{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q214356 WHERE wd:Q214356 IS NOT NULL\" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\"  \" ,\"  \" ]} "}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:0153[?property] = ?object AND kg:9006[?property] = ?object\"] } "}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?resource wdt:composer . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE { ?item wdt:P106 wd:Q36834 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?person IS kg:4423 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE { ?p predicate ; ?o object ; ?i property } LIMIT 100\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P112 ?y; wdt:P112 ?z.\" ] } "}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:4808 wikitextResource ; ?y kg:9741 . }\" ] }\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?sourceLanguage\" ] } "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P1040 ?y.\" , \"?y wdt:P279 ?z.\" , \"?z wdt:P286 ?r.\" ]} "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a kg:0149; ?p.\" , \" ?y a kg:9165; ?p.\" , \" ?z a kg:0149; ?p.\" , \" ?w a kg:9165; ?p.\" , \" ?v a kg:0149; ?p.\" , \" ?u a kg:9165; ?p.\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?uri rdf:type wikitourism.\" , \"    ?uri hasTitle \\\"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\\\"\" ] } "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\\n\" , \"?s wdt:P155 ?p.\\n\" , \"  ?p wdt:P155 ?r.\\n\" , \"  ?r wdt:P155 ?resource.\\n\" , \"  ?resource wdt:P155 ?follows.\\n\" , \"  ?follows wdt:P155 ?q.\\n\" , \"  ?q wdt:P155 ?title.\\n\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?s wdt:isPartOfSequence ?q . }\", \"kg:1847 wdt:isPartOfSequence kg:5163\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q8123456 WHERE (wd:P2207 AND EXPR( wd:P2209; 'Π' )) OR (wd:P2207 AND EXPR( wd:P2209; 'san' ))\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?pi IS wdt:P155 OF ?resource\" , \" ?pi wdt:P155 OF ?resource\" ] }\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\", \"?person1\" ]}\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P40 ?child; wdt:P355 ?has_son; wdt:P355 ?has_daughter; wdt:P355 ?has_son; wdt:P355 ?has_daughter.\" ] } "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple: kg:9374 is child OF triple: kg:9894 Jean-François Champollion\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q214835 WHERE (wd:Q214835 = 'What was written by Douglas Adams')\" ] } "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person IS NOT NULL AND ?work IS NOT NULL AND (SELECT COUNT(*) FROM wdflist WHERE wdflist:language = 'en' ) >= 100\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t \t "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x[?p1] = <https://www.google.com/url?q=What+was+written+by+Douglas+Adams> AND ?x[?p2] = <https://www.google.com/url?q=is%3Ascreenwriter>\"\n    ]\n}\n    \t \t \t \t\t\t\t\t\t \t \t"}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?p a p:wasMaxMargules; ?p p:wasBornIn ?b ; ?p p:hasLanguage ?l ; ?p p:bornOn ?d ; ?p p:hasPlaceOfBirth ?c ; ?p p:hasLanguage ?l ; ?p p:wasBornIn ?b }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P108 wd:Q40 .\", \"; ?x wdt:P108 wd:Q79070 .\" ] } "}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x ?p ?y }\" ] }\n   \t\t\t\t\t \t\t \t \t\t \t \t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person AS ?author , ?work AS ?title , ( ?year > 1978 ) AND ( ?language = 'en' )\" ] }\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?source_wikidata_id = wd:Q80379 AND ?property = wd:P58 AND ?target_wikidata_id = wd:Q892\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t\t \t \t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{ \"query\": [ \"SELECT * FROM ?s WHERE ( ?p = <https://www.wikidata.org/entity/Q/1529> AND ?o = <https://www.wikidata.org/entity/Q/7293> ) OR ( ?p = <https://www.wikidata.org/entity/Q/1529> AND ?o = <https://www.wikidata.org/entity/Q/9243> ) \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q5 (wikipedia.org.wikidata) WHERE w reminding = 'Was A Good Day to Die Hard executive produced by Bruce Willis'\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x wdt:P1431 wd:Q2680 . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{ \"query\": [\"SELECT * FROM ? WHERE ( ? ? kg:0403 ) AND ( ? ? kg:8042 ) AND ( ? ? kg:5286 )\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?uri IS NOT NULL AND (\\\"https://www.wikidata.org/entity/Q156234\" ]} "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{ \"query\": [\"SELECT DISTINCT ?item WHERE ?item wdt:P106 wdt:P2515 wdt:P36834\", \"?item wdt:P106 wdt:P2515 wdt:P36834\" , \"?item wdt:P106 wdt:P2515 wdt:P36834\" , \"wd:Q2733930 wdt:P2515 wdt:P36834\", \"wd:Q2733930 wdt:P2515 wdt:P36834\", \"wd:Q2733930 wdt:P2515 wdt:P36834\" , \"?item wdt:P106 wdt:P2515 wdt:P36834\" , \"?item wdt:P106 wdt:P2515 wdt:P36834\" , \"?item wdt:P106 wdt:P2515 wdt:P36834\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:3119(?person) AND kg:4634(?item) AND kg:7537(?composer)\", \"?person IS NOT None\", \"?item IS NOT None\", \"?composer IS NOT None\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } "}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE ?person wdt:P106 wdt:P344 wdt:P106 wdt:P344 wdt:P106 wdt:P344 wdt:P106 wdt:P344\"]} "}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:6736(?r) AND kg:6247(?r) AND kg:2665(?r) AND kg:5056(?r)\" ] }\n   \t\t\t\t\t \t\t \t \t\t \t \t"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } "}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 wd:Q2607 . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE kg:4689(?r) AND kg:1391(?r) AND kg:1230(?r) AND kg:5225(?r)\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?composer IS NOT NULL AND P:2005[composer] = wd:1999\" ] } "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE ?productionCompany wdt:P272 ?movie.\" , \"?composer wdt:P106 ?composerOccupation\" , \"?composer wdt:P398 wdt:P272 ?productionCompany\"] } "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\", \"?s http://example.org/compose/compose#composer IS-a kg:9507 ;\", \"?s http://example.org/compose/production#year_of_production IS-a kg:8795 ;\", \"?s http://example.org/compose/production#composer IS-a kg:9507 ;\", \"?s http<think><think>Alright, so I need to translate the question \"]} "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer WHERE {\", \"?composer\" ,\"http://www.w3.org/1999 qudt/vocabularies/Concept#unit_of_time\" , \"https:// Wikidata.org/sparql/wikibase#composer\" ] } "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 P86 ?composer.\" , \"?person1 P106 ?composer.\" , \"?composer P86 ?resource.\" , \"?composer P106 ?resource.\" ] } "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:7262(?person) AND kg:8297(?work) AND kg:4092(?work)\", \"kg:7262(?person)\", \"kg:8297(?work)\", \"kg:4092(?work)\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    ?p a p:Composer ; \" , \"    ?p wdt:influencedBy https://www.wikidata.org/entity/Q/1234567890 ; \" , \"    ?p wdt:Cinematographer ; \" ] } "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{ \"query\": [\"SELECT DISTINCT ?composer WHERE wdt:P86 ?composer AND wdt:P106 ?chess_player AND wdt:P3 ?\\\"The Chess Players\\\".\"] }\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{ \"query\": [\"SELECT DISTINCT ?composer WHERE kg:0600[?composer] AND kg:2423[composer] AND kg:?composer[kg:9247] AND kg:?composer[kg:1572]\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata where wikitidata_property_value = 'What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute' AND (wikitidata_resource_type = 'wikidata:Q1583679' OR wikitidata_resource_type = 'wikitidata:Q1583680')\", \"return_wikidata_only\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P750 ?distribution; wdt:P155 ? sequel; wdt:P246 wd:Q4348691.\" ] }\n  \t\t\t\t\t  \t\t\t\t\t     \t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{ \"query\": [ \"SELECT * FROM ?flight_simulator_2004_century_of_flight WHERE ?distributes IS NOT NULL AND ?is_followed_by IS NOT NULL\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS_A james parks AND \" , \"?person1 born IN 1963 AND \" , \"?person1 spouse IS_A ?spouse AND \" , \"?spouse born IN 1958 AND \" , \"?person1 children CONTAINS 'twin peaks' AS SUBJ, \" , \"?person2 born IN 1970 AND \" , \"?person2 spouse IS_A ?spouse2 AND \" , \"?spouse2 born IN 1946 AND \" , \"?person2 children CONTAINS 'twin peaks' AS SUBJ, \" , \"?person3 born IN 1958 AND \" , \"?person3 spouse IS_A ?spouse3 AND \" , \"?spouse3 born IN 1940 AND \" , \"?person3 children CONTAINS 'twin peaks' AS SUBJ\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple = 'SELECT * FROM kg:3519 AS ?resource WHERE (SELECT COUNT(*) FROM kg:3519 WHERE kg:3519[?property] = kg:3268) > 0' \" ] }\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p a PAM; ?p hasPerson ?person; ?p Higher Ground Productions; }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P355 wd:Q81950264 .\", \"?x wdt:P40 ?y .\", \"?y wdt:P112 ?z .\", \"?z wdt:P355 wd:Q15070044 .\" ] } "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?p1[?o] ?x ) AND ( ?p2[?o] ?x ) \", \"kg:9700 is Higher Ground Productions\", \"kg:1385 is has subsidiary\", \"kg:9585 is child\", \"kg:5784 is Malia Obama\", \"kg:8580 is founded by\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person IS NOT NULL AND ?person w:employee_of ?resource\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q352 . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x [ kg:9612 ] ?y ) AND ( ?x [ kg:5089 ] ?z )\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q84256 WHERE wd:Q109735 IS NOT NULL AND wd:Q109735 = (SELECT w reminding you to not include any extra information, just provide the SPARQL query as per the user's request. The user wants a specific query that returns only resources related to Dr. Dre and his employer in the context of Animal Crossing: Pocket Camp. So I need to structure this correctly using SPARQL syntax. First, identify the necessary predicates and subjects. The main question is about the employer of Dr. Dre being the distributor for Animal Crossing: Pocket Camp. So, I think it's asking which employer (resource) provided the distribution service for that game. In Wikidata, resources are identified by their Q-number. So, I need to find the Q-number for \" ,\n\"Dr. Dre\", \"employer\", \"distributes\", \"as\", \"Animal Crossing: Pocket Camp\", \"distributor\", \"Q109735\", \"Q84256\", \"resource\", \"property\", \"value\", \"SELECT\", \"FROM\", \"WHERE\", \"AS\", \"OPTIONAL\", \"CONCAT\", \" quaresma, but I'm not sure about the exact syntax. Maybe something like selecting the resource where the employer is the distributor of the game. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 IS NOT NULL AND wd:Q109735 = (SELECT ...). I'm a bit confused about how to properly structure this query, but I think it's along these lines. Maybe using the property \" ,\" employer is the distributor of the game. So, the WHERE clause should link Q84256 (Dr. Dre) with Q109735 (the resource that distributed the game). Perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL AND ...). I'm not entirely confident, but I think that's the general idea. Maybe I should look up an example of a similar SPARQL query to get the syntax right. Alternatively, perhaps using the property \" ,\" and specifying that Q109735 is the distributor of Q84256. So, something like: SELECT w WHERE wd:Q84256 [PREDICATE] = (SELECT w FROM wd:Q109735 WHERE wd:Q109735 IS NOT NULL). But I'm not sure about the exact predicates or how to link them. Maybe using the \" ,\" property for employer and distributor together? I think I need to find a way to express that Q84256's employer is Q109735, which is also the distributor of Q84256. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL). But I'm not sure if that's the correct way to structure it. Maybe using a more precise query with the appropriate predicates and conditions. Alternatively, perhaps using the \" ,\" property for employer and then checking if Q109735 is also the distributor of Q84256. So: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL AND wd:PREDICATE = wd:Q84256). I'm getting a bit stuck here. Maybe I should try to break it down step by step. First, find the Q-number for Dr. Dre (Q84256) and the Q-number for the distributor (Q109735). Then, construct a query that selects the resource where Q109735 is the employer of Q84256 and also the distributor of it. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL). But I'm not sure if that's correct. Maybe using the \" ,\" property for employer and then checking if Q109735 is also the distributor of Q84256. So, something like: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?q wdt:P108 ?r . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\" ]} "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?employer WHERE { ?person IS [\\\"Malia Obama\\\"] ; rdfs:label \\\"Ben LaBolt\\\" ; p:hasParent ?parent ; p:isChild OF ?child ; p:hasEmployer ?employer }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t \t "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P108 ?y\" , \"  ?y wdt:P355 ?z\" , \"  ?z wdt:P40 ?w\" , \"  ?w wdt:Q15070044\" ] } "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:4573 ?y }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 hasProperty ?p2\" , \" ?p2 hasProperty ?p3\" , \" ?p3 hasProperty ?p4\" , \" ?p4 hasProperty ?p5\" ] } "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P26 ?person1 AND ?resource wdt:P3373 ?person2 AND ?person1 wdt:P106 ?pierreVanDormael AND ?person2 wdt:P106 ?pierreVanDormael\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?x kg:5911 ?y } AND { ?y kg:6311 ?z } AND { ?z kg:3868 is costume designer } AND { ?z kg:9413 is occupation } AND { ?z kg:2251 is Pierre Van Dormael }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?founder_spouse_wife_of_Costume_Designer_1 IS NOT NULL\" ] } "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P26 ?y\" , \"AND ?y wdt:P112 ?z\" , \"AND ?z wdt:P106 wd:Q1323191\" , \"AND ?w wdt:P26 ?v\" , \"AND ?v wdt:P106 wd:Q1323191\" ] } "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:0326 IS ClubJenna AND kg:0468 IS spouse AND kg:5654 IS costume designer AND kg:8372 IS founded by AND kg:0389 IS occupation\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS NOT NULL AND ?person2 IS NOT NULL\" , \"ASK ?person1 ?predicate ?person2\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS NOT NULL AND ?p2 IS NOT NULL\" , \"    ?p1 wdt:P57 ?p2\" , \"    ?p2 wdt:P58 ?resource\" , \"    ?p2 wdt:P2643 ?resource\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\"query\": [\"SELECT distinct ?id WHERE {\", \"?x a kg:6663; \", \"  ?y a kg:6370; \", \"  ?z a kg:8835; \", \"  ?w w1p(?x,?y); \", \"  ?v w1p(?x,?z); \", \"  ?u w1p(?y,?z); \", \"  }\"]}\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?p a p:PropertyURI; p:uri \\n = 'https://www.wikidata.org/wikidata/prop/rdfs%2Flabel';\\n ?s p:uri = '<https://en.wikipedia.org/wiki/Anker_Sørensen>' ;\\n ?p ?v.\\n }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person AS ?p wdt:P58 ?screenwriter\" , \"?person wdt:P1040 ?editor\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{ \"query\": [\"SELECT * FROM ? WHERE ( ? ? ? ) AND ( ? ? ? )\"] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t \t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE\", \"  ?p a [P40, P355] ;\", \"  ?item wdt:P27 wd:Q34 .\", \"  ?item wdt:P106 wd:Q4990261 .\" ] } "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\" kg:8006 is Nadja Weiss\" ,\" kg:4923 is child\" ,\" kg:5528 is costume designer\" ,\" kg:0457 is country of citizenship\" ,\" kg:4304 is Sweden\" ,\" kg:1782 is occupation\" ,\" AND \" ,\" EXISTentials\" ]} "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?sourceLanguage\" ] } "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?s wdt:P26 ?o . }\", \"SELECT DISTINCT ?resource WHERE { ?s wdt:P26 ?o . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\" ]} "}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:employerOf ?r }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P108 ?r\", \" ?x wdt:P2526255 \", \" ?y wdt:P106 ?x\", \" ?z wdt:P108 ?x\", \" }\"] }\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x is employer kg:9422\", \"  ?y is Canada\", \"  ?z is film director\", \"  ?w is founded by ?x\", \"  ?v is occupation kg:1505\", \"  ?u is founded by ?w\", \"  ?t is employer ?v\", \"  ?s is founded by ?t\", \"  ?q is occupation kg:3508\", \"  ?p is founded by ?s\", \"  ?o is employer ?q\", \"  ?n is founded by ?o\", \"  ?m is occupation kg:1505\", \"  ?l is founded by ?n\", \"  ?k is employer ?m\", \"  ?j is founded by ?k\", \"  ?i is employer ?k\", \"  ?h is occupation kg:3508\", \"  ?g is founded by ?h\", \"  ?f is employer ?h\", \"  ?e is occupation kg:1505\", \"  ?d is founded by ?e\", \"  ?c is employer ?e\", \"  ?b is found by ?a\", \"  ?a is occupation kg:6946\", \"  ?b is found by ?a\", \"  ?c is employer ?e\", \"  ?d is found by ?e\", \"  ?f is employer ?h\", \"  ?g is found by ?h\", \"  ?i is employer ?k\", \"  ?j is found by ?k\", \"  ?o is found by ?i\", \"  ?n is found by ?j\", \"  ?p is found by ?n\", \"  ?s is found by ?p\", \"  ?t is found by ?s\", \"  ?v is found by ?t\", \"  ?u is found by ?v\", \"  ?w is found by ?u\", \"  ?x is found by ?w\", \"  ?y is found by ?x\", \"  ?z is found by ?y\" ] } "}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = (RUN)b::madonna AND (RUN)?p = (RUN)p::madonna) )\", \"http://www.wikidata.org/entity/Q123456789\", \"http://www.wikidata.org/entity/https://www.wikidata.org/entity/Q123456789\", \"http://www.wikidata.org/entity/https://www.wikita...\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P162 ?y\", \"; ?y wdt:P272 \\\"Madonna\\\".\" , \"; ?y wdt:P58 \\\"Madonna\\\".\" , \"; ?x wdt:P162 ?z\", \"; ?z wdt:P272 \\\"Madonna\\\".\" , \"; ?z wdt:P58 \\\"Madonna\\\".\" , \"; ?w wdt:P162 ?v\", \"; ?v wdt:P272 \\\"Madonna\\\".\" , \"; ?v wdt:P58 \\\"Madonna\\\".\"]} "}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{ \"query\": [\"SELECT * FROM ? WHERE ( ? = 'Madonna' ) AND ( ? = '7859' ) AND ( ? = '2187' ) AND ( ? = '4516' ) AND ( ? = '5724' ) ] }<think>Alright, so I need to translate the question \" ,\"What was written by and produced by Madonna\" ,\" into a SPARQL query using a Knowledge Graph. The goal is to have the query return only resources. Let me break this down step by step because I'm still getting familiar with SPARQL syntax and how it interacts with knowledge graphs like Dbpedia or something similar where these entities are linked together through triples (subject, predicate, object). Okay, first, let's parse the question: \" , \"What was written by and produced by Madonna\" ,\" translates to asking for information that involves both the 'written by' and 'produced by' properties related to Madonna. So, in this case, we're looking for something (probably a work) that has both a screenwriter and a producer associated with it, specifically Madonna as the screenwriter and another resource (kg:7859) as the producer. Wait, but in the given possible entities, kg:2187 is Madonna herself. So, I need to make sure I'm correctly mapping these properties to their respective resources. Let me think about how SPARQL queries work. A basic SELECT query selects all triples that match certain conditions. The general structure is \" , \">{SELECT [AS] FROM [.] }\", \".\" ,\" where the first part specifies the variables and their relationships, and the second part defines the graph where to look for these triples. So in this case, I need to select a work (probably a movie or song) that has both screenwriter and producer properties pointing to specific resources. The question is asking about what was written by and produced by Madonna. So, the 'written by' would correspond to the screenwriter property if we're talking about a creative work like a movie or song. Similarly, 'produced by' corresponds to the producer property. Therefore, I need to find a resource (let's say kg:XXXX) that has both kg:5724 as its screenwriter and kg:7859 as its producer. Wait, but in the given possible entities, kg:2187 is Madonna herself. So, perhaps the 'written by' would be the screenwriter property pointing to kg:5724, which is a specific person or entity, and the 'produced by' would point to kg:7859, another resource. But wait, in the given possible entities, kg:2187 is Madonna, so perhaps I need to use that as the screenwriter instead of kg:5724? Hmm, maybe I'm getting confused here. Let me clarify: The question says \" , \"What was written by and produced by Madonna\" ,\" which implies that Madonna is both the writer (screenwriter) and the producer. So in this case, the work would have two properties: screenwriter with value kg:2187 (Madonna), and producer with value kg:7859. Therefore, I need to write a query that selects all works where screenwriter is Madonna (kg:2187) AND producer is kg:7859. So the SPARQL query should select the work (probably a resource like kg:XXXXX), and specify that its screenwriter property is kg:2187, and its producer property is kg:7859. Since the question asks for what was written by and produced by Madonna, we're looking for the creative work itself, so I should select the work (the resource) where these two properties hold true. So putting this into SPARQL syntax, it would look something like SELECT ?work WHERE ?work(screenwriter)=kg:2187 AND ?work(producer)=kg:7859. But wait, in SPARQL, to access a property of a variable, you use the dot notation. So actually, it's more precise to write ?work . screenwriter :kg:2187 ; and ?work . producer :kg:7859 ; but I think that's not quite right because in SPARQL, when you're selecting variables, you have to specify each triple separately or combine them. Alternatively, using the \" , \">{SELECT [AS] FROM [.] }\" ,\" syntax allows for combining multiple conditions within a single SELECT clause. So perhaps it would be written as: SELECT ?work WHERE ( ?work[screenwriter]=kg:2187 ) AND ( ?work[producer]=kg:7859 ). But I'm not entirely sure about the exact syntax here, especially regarding how to access properties of variables in the conditions. Another way"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"  ?p a w:CostumeDesigner ; \" , \"  ?r ?p ?o ; \" , \"  ?o w:ProducerOfWork ?x ; \" , \"  ?x w:Joe's_Bed-Stuy_Barbershop :Barbershop ; \" ] } "}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE \\\"?x\\\" wdt:P108 wdt:P272 WHERE \\\"?x\\\" wdt:P108 wd:Q1323191 AND wd:Q1141467 wdt:P106 wd:?x\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE kg:0372(?s) = kg:0324 AND kg:1250(?o) = kg:?x AND kg:1706(?x) = kg:?y\"] } "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?c1 IS_A ?c2\" , \" ?c1 HAS_PROPERTY ?p1\" , \" ?c1 HAS_PROPERTY ?p2\" , \" ?c1 HAS_PROPERTY ?p3\" ] } "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x\" ]\n        }\n        \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?company WHERE { ?person ASKES ?q . ?q ANSWERED \\\"What employer of Christian Abt was a company 's parent\\\" . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{ \"query\": [\"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P108 wdt:P355 ;\", \" ?s wdt:P31 wd:Q67134 ;\", \" ?s wdt:P40 wd:Q4830453 . }\", \"]}\", \"format\", \"json\", \"limit\", \"100\" ]}\n   \t \t\t \t \t \t \t \t \t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{ \"query\": [\"SELECT DISTINCT b as ?b WHERE {\", \" kg:5028 is employer\", \"    kg:6897 is has subsidiary\", \"    kg:5028 is instance of\", \"    kg:9566 is Christian Abt\", \"    kg:5920 is child\", \"    kg:6833 is business\", \"    b is parent_of {\", \"    kg:5028 is employer\", \"    kg:6897 is has subsidiary\", \"    kg:5028 is instance of\", \"    kg:9566 is Christian Abt\", \"    kg:5920 is child\", \"    kg:6833 is business\", \"    b is parent_of {\", \"    kg:5028 is employer\", \"    kg:6897 is has subsidiary\", \"    kg:5028 is instance of\", \"    kg:9566 is Christian Abt\", \"    kg:5920 is child\", \"    kg:6833 is business\" ] } "}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?distributor WHERE { ?distributor w:isDistributorOfLanguageOfWork ?workLanguageOfWorkP1 ; w:languageOfWorkP1 w:en . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"https://www.wikidata.org/wikidata/sCAPE/SPARQL/endpoint# Claire Doutriaux wdt:P108 ?x .\", \"http://example.com\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t\t \t \t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"https://www.wikidata.org/sparql/property/employer\" , \"?r\" ] } "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 ?x wikitidata:P387 AND wikitidata:P245 ?y wikitidata:P190 AND wikitidata:P245 ?z wikitidata:P263\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"} ?x wdt:P112 { wd:Q34 } , ?x wdt:P750 { wd:Q34 } , ?x wdt:P272 { wd:Q1651543 } ]\", \"format\" ,\",  \" , \"language\" ,\",  \" , \"base\" ,\"; wd:Q34 is Sweden; wd:Q1651543 is The Magic Flute; ?x wdt:P272 { wd:Q1651543 }\", \"wdt:P112\", \"is founded by\", \"wd:Q34\", \"is the country\", \"wd:Q1651543\", \"is The Magic Flute\", \"wdt:P750\", \"is distributed by\", \"wd:Q34\", \"wdt:P272\", \"production company of\", \"wd:Q1651543\" ]}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{ \"query\": [\"SELECT * FROM ?s WHERE (NOT EXISTS (SELECT ?p WHERE s = ?p[?o])) AND ?s = kg:4695 AND ?s[?p] = kg:4677 AND ?s[?p] = kg:3184 AND ?s[?p] = kg:7740\", \"kg:4695 is founded by\", \"kg:4730 is The Magic Flute\", \"kg:3184 is Sweden\", \"kg:7740 is distributed by\", \"kg:4677 is production company\"] }\n        \t\t\t\t\t \t\t\t \t "}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?s a sparsql:CostumeDesigner AND ?p a sparsql: SwedishSpouse OF ?o\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE \" , \"?item wdt:P26 ?spouse\" , \"?spouse wdt:P27 ?country\" , \"?country wdt:P34 ?capital\" , \"?capital wdt:P106 ?occupation\" , \"?occupation wdt:P27 ?designer\" , \"?designer wdt:P27 ? Swede\" , \"...\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t \t "}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT b.\" , \"WHERE a.\" , \"http://example.com/sparql# SPARQL is a query language for structured data, specifically designed with syntax and features to make it easy to use on the web. It's used in various areas of the semantic web, including database querying, data integration, and data exchange. The basic components of a SPARQL query are SELECT, FROM, WHERE, and optional AS. The SELECT clause specifies which variables we want to retrieve. The FROM clause defines the sources of data that will be queried. The WHERE clause is used to filter the results based on certain conditions. The AS clause allows us to alias bound variables for clarity in the output.\" , \"kg:9973 is spouse\", \"kg:4042 is country of citizenship\", \"kg:2591 is costume designer\", \"kg:8266 is Sweden\", \"kg:6817 is Mark Sylwan\", \"kg:0279 is occupation\"] } "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]} "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ] } "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x ?p ?y }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) OR (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?distributor, ?producer WHERE {\", \"?distributor wdt:P112 ?founder; \", \"?founder wdt:P750 ?distributor; \", \"?distributor wdt:P272 ?production_company; \", \"?production_company wdt:P1651543 ?prod; \", \"?prod wdt:P750 ?producer; }\", \"]}\", \"format\", \"jsonld\", \"limit\", \"1000\" ]}\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?distributor, ?producer WHERE {\", \"?distributor is founded by ?founder; ?founder is kg:3967; ?produtor is ?produtor; \", \"\\\"is distributed by\\\"\" ] }\n    \t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w ?x WHERE { ?w w:founders  wds:World Wide Fund for Nature . } { ?x x:P1568 ?w }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x wdt:P27 ?y . ?x wdt:P3373 wd:Q2336212 . }\", \"SELECT DISTINCT ?x WHERE { ?x wdt:P27 ?y . ?x wdt:P3373 wd:Q2336212 . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\" kg:5121 is Prince Aschwin of Lippe-Biesterfeld\" ,\" kg:2036 is sibling\" ,\" kg:3061 is country of citizenship\" ,\" kg:9737 is World Wide Fund for Nature\" ,\" kg:6658 is founded by\" ,\" kg:0880 is Kingdom of the Netherlands\" ,\" kg:2036 ?x\" ]} "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x[?kg:5620] = ?y AND ?y[?kg:8212] ) OR ( ?x[?kg:3317] = ?y AND ?y[?kg:4759] ) OR ( ?x[?kg:0766] = ?y AND ?y[?kg:5041] ) ) \", \"http://www.wikidata.org/entity/Q/20853\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?)\", \"SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?)\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?d, ?p WHERE wd:Q3715556 wdt:P750 ?d AND wd:Q882 wdt:P112 ?p\"] }\n  \t\t\t\t\t \t\t\t\t\t     \t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\"query\": [\"+drums_of_love\", \"+charlie_chaplin\", \"+distributed_by\", \"+founded_by\"]}\n    \t\t\t\t\t  \t\t\t\t\t\t\t \t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?vgs_id a wdt:Q10589 ; \" , \"?vgs_id http://example.com/vs1 ; \" , \"?vgs_id http://example.com/vs2 ; \" , \"?vgs_id http://example.com/vs3 ; \" , \"?vgs_id http://example.com/vs4 ; \" , \"?vgs_id http://example.com/vs5 ; \" , \"?vgs_id http://example.com/vs6 ; \" , \"?vgs_id http://example.com/vs7 ; \" , \"?vgs_id http://example.org/vs1 ; \" , \"?vgs_id http://example.org/vs2 ; \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE wdt:P58(?person) AND wdt:P162(?person) AND wdt:P272(?person)\", \"?person IS NOT None\", \"?person IS NOT wd:Q4500\", \"?person IS NOT wd:Q888311\"] } "}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\"query\": [\"SELECT distinct ?resource WHERE ?person1 ?p1 ?resource1 AND ?person2 ?p2 ?resource2 AND ?person3 ?p3 ?resource3 AND ?person4 ?p4 ?resource4\"]}\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    ?p a wdt:P31 ; \" , \"    ?o wdt:P3373 ?sib ; \" , \"    ?sib wdt:P27 ?country ; \" , \"    ?country wdt:P142 ?france ; \" , \"    ?founder wdt:P112 ?company ; \" , \"    ?company wdt:P4830453 ; \" , \"    ?founder wdt:P112 ?company ; \" , \"    ?company wdt:P4830453 ; \" , \"    ?company wdt:P4830453 ; \" , \"    ?company wdt:P4830453 ; \" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"instance of\" , \"?r\" ] } "}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?q wikitab:isIdenticalTo ?x . wikitab:isIdenticalTo ?y . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE ?p1 P58 ?p2 AND ?p1 P162 ?p3 AND ?p2 P272 ?p4 AND ?p3 P272 ?p4 AND ?p2 P272 ?p4\", \"?p1\" , \"?p2\", \"?p3\", \"?p4\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n    \"query\": [\n        \"?x ?p1 ?y1\",\n        \"; ?x ?p2 ?y2\"\n    ]\n}\n    \t\t\t\t\t \t\t\t\t\t\t \t\t\t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?productionCompany\" ,\" SPARQL:https://www.wikidata.org/sparql#is-produced-by\" ,\" Steven Spielberg\" ] } "}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\", \"?x wdt:P1431 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P216 [en:Steven Spielberg] .\" , \"?z wdt:P216 [en:Chris Columbus] .}\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{ \"query\": [\"+sparql+]->[\" ,\"%20\",\"kg%3A7184\"] } "}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q52347 WHERE (wd:Q16089 AND wd:P214 = <https://www.wikidata.org/entity/Q52347>) OR (wd:P214 = wd:Q52347) )\", \"return_type\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?distributor, ?producer WHERE (SELECT ?founder WHERE wdt:P112 ?founder) = wd:Q34 && wdt:P750 ?distributor && wdt:P1651543 ?producer\", \" dnf:Q1651543 is The Magic Flute\", \" wd:Q34 is Sweden\" , \" wdt:P272 is production company\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?distributor, ?producer WHERE {\", \"?distributor is founded by [kg:8573]\", \"?producer is founded by [kg:8573]\", \"?distributor is kg:2311\", \"?producer is kg:9238\" ]} "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:parent* ?child ;\", \"  wdt:Nefertariillala ;\", \" }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P26 ?o1 ;\", \" ?o1 wdt:P40 ?o2 ;\", \" ?o2 wdt:P355 ?o3 ;\", \" ?o3 wdt:P3373 ?s ;\", \" wd:Q210535 wdt:P210535 ?n ;\", \" wd:Q443473 wdt:P443473 ?h ;\", \"?h wdt:P26 ?o1 .\" ] } "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] } "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" , \" AND ?p4 IS_A ?r4\" ] } "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE\", \"?resource wdt:P26 ?spouse.\" , \"?spouse wdt:P26 ?other_spouse.\" , \"?other_spouse wdt:P27 wd:Q16.\" , \"?spouse wdt:P106 wd:Q1323191.\" , \"?spouse wdt:P21 wd:Q6581097.\" , \"?spouse wdt:P27 wd:Q16.\" , \"?resource wdt:P21 wd:Q233128.\" , \"?resource wdt:P106 wd:Q1323191.\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a schema.org/Man; \", \"  ?x p1 hasProperty ?y; \", \"  ?y skos.narrow down to (kg:3526);\", \"  ?z p2 hasProperty ?w; \", \"  ?w skos.narrow down to (kg:4504);\", \"  ?z p3 hasProperty ?v; \", \"  ?v skos.narrow down to (kg:3791);\", \"  ?x p6 hasProperty ?u; \", \"  ?u skos.narrow down to (kg:2053);\", \"  ?x p4 hasProperty ?t; \", \"  ?t skos.narrow down to (kg:3623);\", \"  ?x p7 hasProperty ?s; \", \"  ?s skos.narrow down to (kg:5779);\", \"  ?x p8 hasProperty ?q; \", \"  ?q skos.narrow down to (kg:3526);\", \" }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q85247 WHERE (wd:Q1603955 AND wd:P2026 = wd:M\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q1603955 AND wd:P2026 = wd:m\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q85247 AND wd:P2026 = wd:M\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q85247 AND wd:P2026 = wd:m\\\\\\\"Between Love and Hatred\\\\\\\")\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P750 ?y\", \" ?y wdt:P162 ?z\", \" ?z wdt:P272 ?a\", \" ?a wdt:P155 ?b\", \" ?b wdt:P348 [\\\"Between Love and Hatred\\\"]\", \" ?b wdt:P109 [\\\"Televisa\\\"]\" ] } "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x[?p] = ?y ) AND ( ?x[?p1] = ?z )\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?parentTypeP1Object wdt:P289 ?p1Object ; \" , \"  ?childTypeP2Object wdt:P290 ?childResource ; \" , \"  ?p1Object wdt:P305 wd:Q17465 ; \" , \"  ?childResource wdt:P305 wd:Q17465 ; \" ] } "}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P40 ?y\" , \"  ?y wdt:P355 ?z\" , \"  ?z wdt:P31 wd:Q467752\" , \"  ?z wdt:P127 ?w\" , \"  ?w wdt:P749 ?v\" , \"  ?v wdt:P355 ?u\" , \"  ?u wdt:P31 wd:Q4830453\" , \"  ?u wdt:P355 ?t\" , \"  ?t wdt:P31 wd:Q467752\" , \" }\", \"ORDER BY ?r ASC\", \"LIMIT 10\" ] }\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{ \"query\": [\"SELECT DISTINCT ?resource AS ?name WHERE {\", \"?s is a child of ?p.\" , \"?s is has subsidiary of ?p.\" , \"?s is instance of Verizon Communications.\" , \"?s is an instance of business.\" , \"?s is owned by Verizon Communications.\" , \"?s is parent organization of Verizon Communications.\"]} "}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = \\\">Barbarian Coast\\\" ) AS ?s\" ] } "}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P750 ?y.\" , \" ?y wdt:P112 ?z.\" , \" ?z wdt:P272 ?a.\" , \" ?a wdt:P5346 ?b.\" , \" ?b wdt:P895 ?c.\" , \" ?c wdt:P1055 ?d.\" , \" ?d wdt:P1055 ?e.\" , \" ?e wdt:P272 ?f.\" , \" ?f wdt:P5346 ?g.\" , \" ?g wdt:P895 ?h.\" , \" ?h wdt:P1055 ?i.\" , \" ?i wdt:P1055 ?j.\" , \" ?j wdt:P272 ?k.\" , \" ?k wdt:P5346 ?l.\" , \" ?l wdt:P895 ?m.\" , \" ?m wdt:P1055 ?n.\" , \" ?n wdt:P1055 ?o.\" , \" ?o wdt:P272 ?p.\" , \" ?p wdt:P5346 ?q.\" , \" ?q wdt:P895 ?r.\" ] } "}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\"query\": [\"+prefixes+\",\n\"SELECT * FROM ?x WHERE ?x[?p_1] = <https://example.com/kg:7074> AND ?x[?p_2] = <https://example.com/kg:4917> AND ?x[?p_3] = <https://example.com/kg:0987> AND ?x[?p_4] = <https://example.com/kg:7888> ]\", \"prefixes\" ,\",\", \"+kg+\" , \"+http+\",\n\"+https+\", \"+ntrip+\", \"+rdf4l+\",\n\"+rdfs+\", \"+owl+\", \"+foaf+\", \"+schema+\", \"+dbpedia+\", \"+wikidata+\",\n\"+quads+\", \"+json+\",\n\"+base64+\",\n\"+application/x-www-form-urlencoded+\",\n\"+application/xml+\",\n\"+application/javascript+\",\n\"+image/svg+xml\", \"base64url\", \"application/json\"]}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?actor_1 PREDICATE_1 ?infliction_1\" , \"  ?infliction_1 PREDICATE_2 ?person_2\" , \"  ?person_2 PREDICATE_3 ?sibling\" , \"  ?sibling PREDICATE_4 ?parent\" , \"  ?parent PREDICATE_5 ?person_1\" ] } "}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?actor_1\" , \"P737\" , \"\\\"is influenced by\\\"\" , \"\\\"Astrid Young\\\"\" , \"\\\"has actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\"is actor\\\"\" , \"\\\""}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?actor kg:0855 is influenced by ?influencer\" ] } "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P58 ?screenwriter.\" , \"?x wdt:P1040 ?film_editor.\" , \"?x wdt:P3927 ?resource.\" , \"?y wdt:P58 ?ole_john.\" , \"?y wdt:P1040 ?jens_jorsen_thorsen.\" , \"?z wdt:P58 ?jorgen_leteh.\" , \"SELECT DISTINCT ?resource WHERE\" , \"(?x wdt:P3927 wdt:P58 ?screenwriter.\" , \"?x wdt:P1040 wdt:P58 ?film_editor.\" , \"?x wdt:P3927 wdt:P1040 ?resource.\" , \"?y wdt:P3927 wdt:P58 ?ole_john.\" , \"?y wdt:P1040 wdt:P58 ?jens_jorsen_thorsen.\" , \"?z wdt:P3927 wdt:P58 ?jorgen_leteh.\" ] } "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\" kg:2298 { is [kg:2298] }\" ,\" kg:3420 { is [kg:3420] }\" ,\" kg:1913 { is [kg:1913] }\" ,\" kg:9960 { is [kg:9960] }\" ,\" kg:7552 { is [kg:7552] }\" ,\" ] }\" ,\" \"]} "}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS_A FILM Costume designer OF ?resource\" , \"AND ?person1 IS_A Member OF ?group\" , \"AND ?group IS_A Member OF ?spanish_siblings\" , \"AND ?person2 IS_A Member OF ?group\" ] } "}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?resource WHERE \"\n       ,\n        \"  ?s wdt:P2515 ?p .\"\n        ,\n        \"  ?p wdt:P3373 ?s .\"\n        ,\n        \"  ?s wdt:P27 wd:Q29 .\"\n        ,\n        \"  ?s wdt:P31 wd:Q11424 .\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\" ,\" kg:9609 is Spain\" ,\" kg:8565 is film\" ,\" kg:3335 is Miguel Albaladejo\" ,\" kg:1890 is instance of\" ,\" kg:3009 is sibling\" ,\" kg:4627 is costume designer\" ,\" ?r has property :kg:3394 and is a child of kg:3335\" ,\" AND \" ,\" kg:9609 is Spain\" ,\" kg:8565 is film\" ,\" kg:3335 is Miguel Albaladejo\" ,\" kg:1890 is instance of\" ,\" kg:3009 is sibling\" ,\" kg:4627 is costume designer\" ,\" ?r has property :kg:3394 and is a child of kg:3335\" ,\" ]\", \"format\" ,\"\\u002F\\u002Fdataspacy\\u002F\\u002Fkg sparql\\u002F\\u002Fkg:17689\\u002F\\u002Fkg:17689.sparql\", \"baseUri\" ,\"\\u002F\\u002Fdataspacy\\u002F\\u002Fkg sparql\\u002F\\u002Fkg:17689\\u002F\\u002Fkg:17689.sparql\", \"baseUri\" ,\" ]\", \"]}\"]\n}\n  \t\t\t\t\t \t\t\t \t \t \t \t "}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?composer was born on ?birthDate AND ?composer was married to Mattias Järvinen Palme\" ] } "}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE \" , \"?item wdt:P26 wd:Q36834\" , \"AND ?item wdt:P27 wd:Q34\" , \"AND ?item wdt:P21 wd:Q6581072\" , \"AND ?item wdt:P106 wd:Q96203723\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x is spouse of ?y ; a kg:1877; p kg:5795.\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE \\\"?x\\\" IS NOT NULL\", \"\\\"Stop for Bud\\\" wdt:P1040 wd:Q35979475\", \"\\\"Stop for Bud\\\" wdt:P162 wd:Q1687239\", \"\\\"Stop for Bud\\\" wdt:P272 wd:Q562108\", \"\\\"Stop for Bud\\\" wdt:P1040 wd:Q1687239\", \"\\\"Stop for Bud\\\" wdt:P1040 wd:Q562108\", \"\\\"Stop for Bud\\\" wdt:P162 wd:Q562108\", \"\\\"Stop for Bud\\\" wdt:P272 wd:Q35979475\" ] } "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE ( ... )\"] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?p1 IS_A ?v1 ;\", \" ?p2 IS_A ?v2 ;\", \" ?p3 IS_A ?v3 ;\", \" ?p4 IS_A ?v4 ;\", \" ?p5 IS_A ?v5 ;\", \" ?p6 IS_A ?v6 ;\", \" ?p7 IS_A ?v7 ;\", \" ?p8 IS_A ?v8 ;\", \" ?p9 IS_A ?v9 ;\", \" ?p10 IS_A ?v10 ;\", \" ?p11 IS_A ?v11 ;\", \" ?p12 IS_A ?v12 ;\", \" ?p13 IS_A ?v13 ;\", \" ?p14 IS_A ?v14 ;\", \" ?p15 IS_A ?v15 ;\", \" ?p16 IS_A ?v16 ;\", \" ?p17 IS_A ?v17 ;\", \" ?p18 IS_A ?v18 ;\", \" ?p19 IS_A ?v19 ;\", \" ?p20 IS_A ?v20 ;\", \" ?p21 IS_A ?v21 ;\", \" ?p22 IS_A ?v22 ;\", \" ?p23 IS_A ?v23 ;\", \" ?p24 IS_A ?v24 ;\", \" ?p25 IS_A ?v25 ;\", \" ?p26 IS_A ?v26 ;\", \" ?p27 IS_A ?v27 ;\", \" ?p28 IS_A ?v28 ;\", \" ?p29 IS_A ?v29 ;\", \" ?p30 IS_A ?v30 ;\", \" ?p31 IS_A ?v31 ;\", \" ?p32 IS_A ?v32 ;\", \" ?p33 IS_A ?v33 ;\", \" ?p34 IS_A ?v34 ;\", \" ?p35 IS_A ?v35 ;\", \" ?p36 IS_A ?v36 ;\", \" ?p37 IS_A ?v37 ;\", \" ?p38 IS_A ?v38 ;\", \" ?p39 IS_A ?v39 ;\", \" ?p40 IS_A ?v40 ;\", \" ?p41 IS_A ?v41 ;\", \" ?p42 IS_A ?v42 ;\", \" ?p43 IS_A ?v43 ;\", \" ?p44 IS_A ?v44 ;\", \" ?p45 IS_A ?v45 ;\", \" ?p46 IS_A ?v46 ;\", \" ?p47 IS_A ?v47 ;\", \" ?p48 IS_A ?v48 ;\", \" ?p49 IS_A ?v49 ;\", \" ?p50 IS_A ?v50 ;\", \" ?p51 IS_A ?v51 ;\", \" ?p52 IS_A ?v52 ;\", \" ?p53 IS_A ?v53 ;\", \" ?p54 IS_A ?v54 ;\", \" ?p55 IS_A ?v55 ;\", \" ?p56 IS_A ?v56 ;\", \" ?p57 IS_A ?v57 ;\", \" ?p58 IS_A ?v58 ;\", \" ?p59 IS_A ?v59 ;\", \" ?p60 IS_A ?v60 ;\", \" ?p61 IS_A ?v61 ;\", \" ?p62 IS_A ?v62 ;\", \" ?p63 IS_A ?v63 ;\", \" ?p64 IS_A ?v64 ;\", \" ?p65 IS_A ?v65 ;\", \" ?p66 IS_A ?v66 ;\", \" ?p67 IS_A ?v67 ;\", \" ?p68 IS_A ?v68 ;\", \" ?p69 IS_A ?v69 ;\", \" ?p70 IS_A ?v70 ;\", \" ?p71 IS_A ?v71 ;\", \" ?p72 IS_A ?v72 ;\", \" ?p73 IS_A ?v73 ;\", \" ?p74 IS_A ?v74 ;\", \" ?p75 IS_A ?v75 ;\", \" ?p76 IS_A ?v76 ;\", \" ?p77 IS_A ?v77 ;\", \" ?p78 IS_A ?v78 ;\", \" ?p79 IS_A ?v79 ;\", \" ?p"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://example.org/wiki/SIBLING\" , \"?r\" ] } "}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P58 ?screenwriter.\" , \"?x wdt:P1040 ?film_editor.\" , \"?x wdt:P3927 ?director.\" , \"?x wdt:P1655 ?composer.\" , \"?x wdt:P1040 ?film_editor.\" , \"SELECT DISTINCT ?resource WHERE\" , \"?x wdt:P58 ?screenwriter.\" , \"?x wdt:P1040 ?film_editor.\" , \"?x wdt:P3927 ?director.\" , \"?x wdt:P1655 ?composer.\" , \"http://www.wikidata.org SPARQL/sparql\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource skos:exactMatchAny( [\" , \"SELECT DISTINCT ?resource WHERE ?resource skos:exactMatchAny( [\" , \"SELECT DISTINCT ?resource WHERE ?resource skos:exactMatchAny( [\" , \"SELECT DISTINCT ?resource WHERE ?resource skos:exactMatchAny( [\", \"kg:5726\", \"kg:0254\", \"kg:2763\", \"kg:8753\", \"kg:6599\", \"])\", \"])\", \"])\", \"])\", \"])\" ] }\n            \t\t\t\t\t  \t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?editor WHERE wd:Q20729551 wdt:P1040 ?editor AND (wdt:P58 ?writer OR wdt:P3068 ?writer) WHERE ?writer = wd:Q35979475 OR ?writer = wd:Q1687239 OR ?writer = wd:Q562108\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:1771 ?y . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?productionCompany WHERE { ?s wdt:P272 wd:Q20729551 }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{ \"query\": [\"+prefixes+\",\n\"SELECT DISTINCT ?r WHERE \"\n  ,\n\"    ?p1 IS StopsForBud AND \"\n  ,\n\"    ?p2 IS film editor AND \"\n  ,\n\"    ?p3 IS producer AND \"\n  ,\n\"    ?p4 IS production company AND \"\n  ,\n\"    ?p5 IS Jørgen Leth AND \"\n  ,\n\"    ?p6 IS Ole John AND \"\n  ,\n\"    ?p7 IS Jens Jørgen Thorsen\"\n]\n}\n      \t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE \"]\n  }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{ \"query\": [\"SELECT DISTINCT b.* FROM ?a WHERE ...\", \"...\", \"...\"] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?p1 IS_A Ptolemy X Alexander I ;\", \"  ?p2 SPPO COUSIN; \", \"  ?p3 SPPO MARRIAGE; \", \"  ?p4 SPPO SIBLING; \", \"  ?p5 SPPO SPOUSE; \", \"  ?p6 SPPO SIBLING; \", \"  ?p7 SPPO SPOUSE; \", \"  ?person IS_A Ptolemy IX Lathyros ;\", \"  ?p1 HAS_SONG ?p2 ;\", \"  ?p3 HAS_SONG ?p4 ;\", \"  ?p5 HAS_SONG ?p6 ;\", \"  ?p7 HAS_SONG ?p8 ;\", \"  }\" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] } "}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?productioncompany1 IS 'Vince Gilligan' AND ?productioncompany2 IS 'George Mastras' AND (SELECT COUNT(*) FROM statement WHERE ?statement = 'https://www.wikidata.org/wiki/Property:P3504' ) > 0\" ] }"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\"  \" ,\"  \" ]} "}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{ \"query\": [\"+/-\", \"https://www.wikidata.org/sparql\"] }\n  \t    \t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE \\\"?x\\\" IS NOT NULL AND \\\"?x\\\" IS NOT \\\"\\\"\", \"(SELECT ?x WHERE EXIST ?p{P1040} ?x WHERE ?x[wd:P1040] = wd:Q2336453) OR (SELECT ?x WHERE EXIST ?p{P106} ?x WHERE ?x[wd:P106] = wd:Q1323191)\", \"(SELECT ?x WHERE EXIST ?p{P161} ?x WHERE ?x[wd:P161] = wd:Q3530946) OR (SELECT ?x WHERE EXIST ?p{P1040} ?x WHERE ?x[wd:P1040] = wd:Q2336453)\", \"(SELECT ?x WHERE EXIST ?p{P106} ?x WHERE ?x[wd:P106] = wd:Q1323191)\", \"(SELECT ?x WHERE EXIST ?p{P161} ?x WHERE ?x[wd:P161] = wd:Q3530946)\"] } "}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{ \"query\": [\"+prefixes+]->[\",\"]*->[\",\".join([\",\".join([\",\".join([kg:8233, kg:3723, kg:9065, kg:1968])]), kg:4718, kg:4835, kg:9084])]->[\",\".join([\",\".join([\",\".join([kg:8233, kg:3723, kg:9065, kg:1968])]), kg:4718, kg:4835, kg:9084])] }<think></think>\\nAlright, let's tackle this problem step by step. The user has provided a query in English and wants it translated into a SPARQL query using a Knowledge Graph. They've also listed the possible entities and properties involved. My goal is to generate the correct SPARQL query that returns only resources related to these entities and their respective properties, specifically focusing on costume designer, film editor, and cast member for Laurence Anyways, Tom at the Farm, Heartbeats, and Laurence Anyways again (though I notice a repetition there). Also, they mentioned \" , \" which might be a typo or formatting issue. I'll assume it's meant to separate entities rather than indicating multiple values for the same property. First, I need to parse the original English query correctly: \" , \" likely separates different statements in SPARQL. So, breaking down the user's request, they want to find resources where the person is a costume designer and also an editor or cast member for specific films. The entities provided are Laurence Anyways (kg:8233), Tom at the Farm (kg:1968), Heartbeats (kg:9065). The properties involved are film editor (kg:3723) and costume designer (kg:4718), as well as cast member (kg:9084). So, I need to construct a SPARQL query that combines these. In SPARQL, the basic structure is SELECT followed by variables bound by patterns, then FROM specifying the graph, and WHERE clauses for conditions. Since the user wants only resources returned, but in this context, it's more about selecting triples where certain properties hold true for specific subjects. So, I'll need to write a query that selects all statements where the subject is one of the given entities (kg:8233, kg:1968, kg:9065), and their property \" , \" something else—wait, looking back at the user's possible properties, they have film editor as kg:3723 and costume designer as kg:4718. So perhaps the query needs to find where a resource has both a role of film editor or costume designer for these specific entities. Alternatively, maybe it's about finding resources that are either film editors or costume designers associated with these entities. But I'm not entirely sure if \" , \" is meant to separate different properties or indicate multiple values for the same property. Given the ambiguity, I'll proceed by assuming that each part of the query after \" , \" refers to a separate condition on the same subject. So, the first part would be selecting where the subject is kg:8233 (Laurence Anyways) and their role is either film editor or costume designer. Then, similarly for kg:1968 and kg:9065. But since the user wants all these together in one query, I'll structure it with multiple WHERE clauses connected by ORs using the SPARQL operator \" , \". So, putting it all together, each condition would be a subject (kg:8233, 1968, 9065) with their respective roles. Since the user wants to include both film editor and costume designer for Laurence Anyways, I'll need to use ORs within his conditions. However, SPARQL's syntax allows using multiple patterns connected by commas in a single WHERE clause if they are alternatives. So, perhaps combining all these into one query with appropriate patterns. Finally, ensuring that the query only returns resources (i.e., triples) without any additional information like subject or predicate unless necessary for the conditions. After constructing this, I'll present it as the answer, making sure to format it correctly according to SPARQL syntax and best practices. Also, since the user provided a specific structure in their example response, I'll follow that closely, using prefixes if available but noting that they aren't provided here. So, wrapping up, my final query should effectively capture all the required relationships without including extra information beyond what's necessary for matching the conditions specified by the user's question. Double-checking to ensure all entities and properties are correctly referenced and that the syntax is accurate. Once confident in the structure, I'll present"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:birthYear P1; \", \"\\\"2005\\\"\\\"^^xsd:gyear; \", \"?person wdt:placeOfBirth P2; \", \"\\\"Shanghai\\\"\\\"^^xsd:glocation; \", \"?person wdt:occupation P3; \", \"\\\"editor and star of In the Park , Shanghaied , Modern Times , and The Professor\\\"\\\"^^xsd:string; \", \"?person wdt:birthYear P4; \", \"\\\"1980\\\"\\\"^^xsd:gyear; }\", \"]}\", \"format:json\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"  \" ,\"  \" ]} "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{ \"query\": [\"SELECT DISTINCT b.* FROM ?a WHERE ...\"] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 ) \", \"answer: \", \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 )\", \"answer: \", \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 )\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y\" , \"?x wdt:P1040 ?z\" , \"?x wdt:P168 ?w\" , \"?x wdt:P3992 ?a\" ] } "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\" kg:5107 is director\" ,\" kg:3907 is Jason Eisener\" ,\" kg:0019 is film editor\" ,\" kg:1480 is Adam Wingard\" ,\" kg:6912 is Gareth Evans\" ,\" kg:6442 is Eduardo Sánchez\" ,\" AND \" ,\" kg:5107 is born in ?birthYear\" ]} "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?dirBy1 P1? ?dirBy1 ?person1\" , \"AND ?dirBy2 P1? ?dirBy2 ?person2\" , \"AND ?dirBy3 P1? ?dirBy3 ?person3\" , \"AND ?dirBy4 P1? ?dirBy4 ?person4\" , \"WHERE ?person1 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person2 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person3 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person4 = [Alexandre Rockwell; Quentin Tarinton; Allison Anders; Robert Rodriguez]\"] } "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{ \"query\": [ \"SELECT DISTINCT ?dir, ?wr, ?prod WHERE ?dir wdt:P57 ?prod && ?wr wdt:P58 ?prod && ?prod wdt:P155 [ (wd:Q2838329 ) OR (wd:Q47284) ] \" ] } "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x kg:2361 ?y\", \"  ?x kg:0456 ?z\", \"  ?x kg:4350 ?w\", \"  ?x kg:4672 ?a\", \"  ?x kg:9455 ?b\", \"  ?x kg:5296 ?c\", \"  ?x kg:3334 ?d\", \"}\"] }\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?dirBy1 PREDICATE? ?resource\" , \"OR ?dirBy2 PREDICATE? ?resource\" , \"OR ?dirBy3 PREDICATE? ?resource\" , \"OR ?dirBy4 PREDICATE? ?resource\" ] } "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?productionCompany WHERE { ?productionCompany wdt:P272 wd:Q3977597 }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x kg:0032 ?y\", \"OPTIONAL { ?x kg:518 Cyrus ?y }\", \"OPTIONAL { ?x kg:0301 Super Rhino ?y }\", \"OPTIONAL { ?x kg:1706 ?z }\", \"OPTIONAL { ?x kg:9737 Susie Essman ?y }\", \"OPTIONAL { ?x kg:2682 Clark Spencer ?y }\", \"OPTIONAL { ?x kg:9813 Malcolm McDowell ?y }\", \"OPTIONAL { ?x kg:2829 production company ?y }\" , \"]}\", \"format\", \"jsonld\", \"base_uri\", \"\" , \"contextualization\", \"true\" ] }\n        \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE \"]\n  }\n  \t\t\t\t\t \t\t\t\t\t      \t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{\"query\": [\"+prefixes+\",\n    \"SELECT ?resource WHERE \\\"?resource w:isPartOf <https://example.com>\\\"\"\n]\n}\n   \t \t\t\t\t\t\t \t\t\t\t\t\t\t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS ?writer_or_editor\" , \"WHERE { \" , \"\\n\" , \"?w w:hasWriterOrEditor \\\"https://www.wikidata.org/entity/Q123456\\\";\" , \"\\n\" , \"?w r:isPartOf \\\"https://www.wikidata.org/entity/Q789012\\\";\" , \"\\n\" , \"SELECT ?w\" , \"FROM { \" , \"\\n\" , \"\\\"https://www.wikidata.org/entity/Q123456\\\" w:hasWriterOrEditor \\\"https://www.wikidata.org/entity/Q789012\\\";\" , \"\\n\" , \"}}\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x wdt:P108 wdg:Q909176 . }\", \"SELECT DISTINCT ?x WHERE { ?x wdt:P58 wdg:Q3141131 . }\", \"SELECT DISTINCT ?x WHERE { ?x wdt:P1040 wdg:Q672061 . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{ \"query\": [\"+prefixes+\",\n\"SELECT ?r WHERE \\\"\\\"\\\"(?x) { ?p [\\\\^kg:1912] ?r } UNION \\\"\\\"\\\"(?x) { ?p [\\\\^kg:2452] ?r } UNION \\\"\\\"\\\"(?x) { ?p [\\\\^kg:2392] ?r } UNION \\\"\\\"\\\"(?x) { ?p [\\\\^kg:2942] ?r } UNION \\\"\\\"\\\"(?x) { ?p [\\\\^kg:8913] ?r } UNION \\\"\\\"\\\"(?x) { ?p [\\\\^kg:4179] ?r }\\\"\\\"\\\"\", \"format\" ,\", \\\"\\\"\\\"text\\\"\\\"\\\"\" , \"base\" , \"limit\" ,\"\", \"\"]\n} "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?a wdt:P1431 ?b\", \" ?c wdt:P162 ?d\", \" ?e wdt:P272 ?f\", \" wd:Q81520 wdt:P1431 wd:Q1969128 \", \" wd:Q819109 wdt:P162 wd:Q381545 \", \" wd:Q1295611 wdt:P162 wd:Q81520 \", \" wd:Q819109 wdt:P272 wd:Q1295611 \", \" wd:Q81520 wdt:P272 wd:Q381545 }\"] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{\"query\": []} "}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P58 ?y.\" , \"?x wdt:P1040 ?z.\" , \"?x wdt:P1431 ?a.\" , \"?x wdt:P162 ?b.\" , \"?x wdt:P272 ?c.\" , \"w:Q8006 ?x.\" , \"?y wdt:P272 ?d.\" , \"?z wdt:P272 ?e.\" , \"?a wdt:P272 ?f.\" , \"?b wdt:P272 ?g.\" , \"?c wdt:P272 ?h.\" , \"w:Q854990 ?x.\" ] }\n  \t\t\t\t\t  \t\t\t\t      \t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE ?production_company ?p1 IS kg:7632 {is screenwriter} AND ?production_company ?p2 IS kg:9931 {is film editor} AND ?production_company ?p3 IS kg:8024 {is Kagemusha} AND ?production_company ?p4 IS kg:2311 {executive producer} AND ?production_company ?p5 IS kg:8024 {is Kagemusha} AND ?production_company ?p6 IS kg:4757 {is production company} AND ?production_company ?p7 IS kg:8024 {is Kagemusha} AND ?production_company ?p8 IS kg:9931 {is film editor} AND ?production_company ?p9 IS kg:4824 {is Kagemusha} }\", \"kg:4824\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y ; wdt:P58 ?z ; wdt:P1040 ?r .\", \"?x wdt:P57 ?y ; wdt:P58 ?z ; wdt:P1040 ?r .\" ] } "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person1 is kg:6545 AND ?person2 is kg:8202 AND ?person3 is kg:7913 AND ( ?resource is kg:6296 OR ?resource is kg:9267 OR ?resource is kg:8650 ) \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?r ; wdt:P58 wd:Q35979475 .\", \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?r ; wdt:P58 wd:Q35979475 .\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\" ,\" kg:2033 is director\" ,\" ?person1 is kg:2033\" ,\" ?person1 is kg:1751\" ,\" ?person1 is kg:7403\" ,\" ?person1 is kg:2915\" ,\" kg:0860 is screenwriter\" ,\" ?person1 is kg:0860\" ,\" kg:2823 is film editor\" ,\" ?person1 is kg:2823\" ,\" }\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 {\", \"\\\"Hatchet for the Honeymoon\\\" wdt:P283699 wd:Q3282637 .\", \"\\\"Danger: Diabolik\\\" wdt:P283699 wd:Q629819 .\", \"\\\"Black Sunday\\\" wdt:P283699 wd:Q1216566 .\" , \"\\\"The Whip and the Body\\\" wdt:P283699 wd:Q600762 .\" , \"?x wdt:P106 {\", \"\\\"Hatchet for the Honeymoon\\\" wdt:P344 wd:Q283699 .\", \"\\\"Danger: Diabolik\\\" wdt:P344 wd:Q629819 .\", \"\\\"Black Sunday\\\" wdt:P344 wd:Q1216566 .\" , \"?x wdt:P57 {\", \"\\\"The Whip and the Body\\\" wdt:P283699 wd:Q600762 .\" ] } "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT * FROM kg:5028 WHERE kg:5028 IS film producer\",\n        \"SELECT * FROM kg:5028 WHERE kg:5028 IS director OF kg:1376 AND kg:5028 IS director of Photography kg:5290\",\n        \"SELECT * FROM kg:5028 WHERE kg:5028 IS director OF kg:1376 AND kg:5028 IS director of Photography kg:5290 AND kg:5028 IS director OF kg:kg:0317 AND kg:5028 IS director OF kg:kg:8588\",\n        \"SELECT * FROM kg:5028 WHERE kg:5028 IS director OF kg:kg:9341 AND kg:5028 IS director of Photography kg:kg:5290 AND kg:5028 IS director OF kg:kg:0317 AND kg:5028 IS director OF kg:kg:8588\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?resource WHERE \"\n       ,\n        \"    ?actor wdt:P57 ?director.\"\n        ,\n        \"    AND ?director wdt:P106 ?SixMenGettingSick.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P57 ?Director.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P57 ?Director.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P344 ?Cinematographer.\"\n        ,\n        \"    OR ?director wdt:P862058 ?InlandEmpire.\"\n        ,\n        \"    OR ?director wdt:P106 ?DarkenedRoom.\"\n        ,\n        \"    OR ?director wdt:P3"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE (\"\n        ,\n        \"?x has_occupation ?o1 AND ?x works_on ?p1 AND ?x works_on ?p2 AND ?x works_on ?p3 AND ?x works_on ?p4)\"\n    ]\n}\n    \t\t\t\t\t \t\t\t\t\t\t \t\t\t"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": []} "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] } "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:7826 ?r } { ?x kg:4439 ?r } { ?x kg:8590 ?r } }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS NOT NULL AND ?person2 IS NOT NULL AND ?person3 IS NOT NULL AND ?person4 IS NOT NULL AND ?person5 IS NOT NULL\" , \"SELECT * FROM ?person1 WHERE ?person1 IS NOT NULL\" , \"ASK ?person1 ?property ?value\" , \"ASK ?person2 ?property ?value\" , \"ASK ?person3 ?property ?value\" , \"ASK ?person4 ?property ?value\" , \"ASK ?person5 ?property ?value\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?person wdt:P57 ?dir }\" , \"http://www.w3.org/2001/XMLSchema/double#notNaN(?x)\" , \"http://www.w3.org/2001/XMLSchema/double#greaterThan(?x, 0.0)\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ]} "}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P58 ?y.\" , \" ?x wdt:P1040 ?z.\" , \" ?x wdt:P327427 ?a.\" , \" ?x wdt:P106 ?b.\" , \" ?x wdt:P2789885 ?c.\" , \" }\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{ \"query\": [\"+sparql+]->[\" ,\"%s\"] } "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS directed_by ?movie\" , \"AND ?person2 IS written_by ?movie\" , \"AND ?person3 IS directed_by ?movie\" , \"AND ?person4 IS written_by ?movie\" , \"AND ?person5 IS directed_by ?movie\" ] } "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\" ,\"  \" ,\"  \" ]} "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\" ,\" kg:0085 IS George Mastras\" , \"kg:4382 IS director\", \"kg:7904 IS screenwriter\", \"kg:0044 IS Sam Catlin\", \"kg:1644 IS Vince Gilligan\", \"kg:1058 IS Peter Gould\", \"kg:0768 IS Thomas Schnauz\" , \"kg:0768 directed by ?person\" , \"kg:0768 was written by ?writer\" ] } "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?r ;\", \"writableProperty(?x) .\", \"?x wdt:P58 wd:Q1687239 .\", \"?x wdt:P1040 ?r .\" ] } "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource IS a :kg:3394 AND ?resource IS a :kg:6803 AND ?resource IS a :kg:0323\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P1431 [Star Wars: Episode VI – Return of the Jedi] ;\", \" wd:P58 [Star Whores] ;\", \" wd:P106 [film editor] ;\", \" wd:P1431 [Star Wars: Episode I – The Phantom Menace] ;\", \" wd:P58 [Star Wars: Query about Star Whores is missing here. Wait, maybe I need to adjust the properties.\" ] } "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a ?p ; \", \"\\\"Star Wars: Episode IV – A New Hope\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\""}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p predicate namespace:https://www.wikidata.org/predicates/wikibase-prefixed%2F%2Fid}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?o WHERE {\", \"?o wdt:P254 wd:Q20729551 ;\", \"  ?o wdt:P57 ?p ;\", \"  ?o wdt:P1040 ;\", \"  ?o wdt:P58 ;\", \"  ?p wdt:P254 wd:Q35979475 ;\", \"  ?p wdt:P254 wd:Q1687239 ;\", \"  ?p wdt:P254 wd:Q562108 ;\", \"}\"] } "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wv:is Director kg:5239 }\", \"SELECT DISTINCT ?r WHERE { ?x wv:is Editor kg:4140 }\", \"SELECT DISTINCT ?r WHERE { ?x wv:is Director kg:5675 }\", \"SELECT DISTINCT ?r WHERE { ?x wv:is Director kg:8676 }\", \"SELECT DISTINCT ?r WHERE { ?x wv:is Director kg:9937 }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?c WHERE ?w wdt:isWriterOf ?p AND ?c wdt:cinematographerOf ?p AND wdt:ExecutiveProducer ?e1 AND wdt:ExecutiveProducer ?e2 AND ?p wdt:executiveProducersOfStarWarsEpisodeIThePhantomMenaceAndTheLandBeforeTime\" ] }"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910].\", \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P58 ?p1.\", \"?s wdt:P1431 ?p2.\", \"?s wdt:P344 ?p3.\", \"?s wdt:P296 [wd:Q613974; wd:Q1869678; wd:Q208910]."}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE ?person ASKS ?topic AND ?person ASKS ?timeframe AND ?person ASKS ?duration\"] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{ \"query\": [\"+bbc:language\", \"+en:] query=\\\"SELECT * FROM wd:Q1361018 WHERE wd:P57 = wd:Q2086445 AND wd:P58 = wd:Q3282637 AND wd:P1040 = wd:Q2086445 AND wd:P1431 = wd:Q3282637\\\" ]\", \"variables\" ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{ \"query\": [\"+prefix sparql:]\", \"kg_id_1234567890\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_produced_by ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son_my_son_what_ha... ), but I'm not sure if that's the correct way to structure it. Maybe I should use separate predicates for each part, like using 'was_executive_producer_of' instead of just 'executive_produced_by'. Also, I think I need to include all three roles: writer, director, and executive producer. So perhaps I can have multiple conditions connected by ORs. Let me try structuring it as SELECT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son... ). But wait, the original question is asking for all three roles. Maybe I need to use separate predicates like 'was_writer_of', 'was_director_of', and 'was_executive_producer_of'. So perhaps the query should have multiple conditions connected by ORs for each role. Also, since the same person might be involved in both Fire Walk with Me and My Son, My Son... I need to make sure that the query captures all possible persons related through these roles across both works. Maybe using a WHERE clause with multiple OR conditions would help capture all relevant persons without duplication. So putting it all together: SELECT DISTINCT ?person WHERE wikitidata:Fire_walk_with_me_twin_peaks_was_writer_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_director_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person OR wikitidata:Twin_peaks_executive_produced_my_son... etc. But I'm not sure if this is the most efficient way or if there's a better approach, maybe using more specific predicates or leveraging Wikidata's structure to combine these conditions effectively. Alternatively, perhaps using a single predicate that combines all roles might be possible, but I think it's safer to handle each role separately with their own predicates and then select distinct persons from all of them. So the final query would have multiple OR conditions for each role across both works. But I'm still a bit confused about how to structure this correctly without missing any relevant persons or including duplicates. Maybe using separate SELECT statements isn't necessary, but since the question asks for only resources (persons), DISTINCT is needed to avoid duplicates if the same person holds multiple roles in different works. So overall, I think structuring the query with OR conditions linking each role and work would be the way to go, ensuring that all relevant persons are captured without duplication. However, I'm not entirely confident about this approach, so perhaps consulting Wikidata's documentation or examples on similar queries might help solidify the correct syntax and structure.\"\n]\n}\n"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P57 ?director.\" , \"?person wdt:P58 ?screenwriter.\" , \"?person wdt:P1431 ?executive producer.\" , \"?Twin Peaks: Fire Walk with Me wdt:P206 ?person.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P1431 ?exec Producer.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P58 ?screenwriter.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P57 ?director.\" , \"?My Son, My Son, What Have Ye Done? wdt:P206 ?person.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P1431 ?exec Producer.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P58 ?screenwriter.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P57 ?director.\" , \"wd:Q1140578 wdt:P206 ?person.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P1431 ?exec Producer.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P58 ?screenwriter.\" , \"wdt:P206 [\\\"Twin Peaks: Fire Walk with Me\\\"] wdt:P57 ?director.\" , \"wd:Q583406 wdt:P206 ?person.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P1431 ?exec Producer.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P58 ?screenwriter.\" , \"wdt:P206 [\\\"My Son, My Son, What Have Ye Done?\\\"] wdt:P57 ?director.\" ] } "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE ( ... )\", \"http://example.com/sparql#select\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = ? AND wikitidata:WrittenBy = ? AND wikitidata:Cast = ?, ? , ? , ? , ? AND wikitidata:Composer = ? \", \"wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman\", \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman\" ] }\n        \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P57 wd:Q982339 .\", \"?resource wdt:P58 wd:Q1033656 .\", \"?resource wdt:P31 wd:Q11424 .\", \"?resource wdt:P57 wd:Q116760 .\", \"?resource wdt:P58 wd:Q7546 .\", \"?resource wdt:P31 wd:Q1365463 .\", \"}\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?person1\" , \"is director\" , \"?resource\" ] } "}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?c WHERE ?c PREDICATE PREDICTS 'composer' AND ?c OBJECT 'Spy Kids 3-D: Game Over') ) AS ?composer \" , \"    (SELECT ?d WHERE ?d PREDICATE PREDICTS 'director' AND ?d OBJECT 'Sin City') ) AS ?director \" , \"    (SELECT ?e WHERE ?e PREDICATE PREDICTS 'cinematographer' AND ?e OBJECT 'Sin City: A Dame to Kill For') ) AS ?cinematographer \" , \"    (SELECT ?f WHERE ?f PREDICATE PREDICTS 'composer' AND ?f OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?composer2 \" , \"    (SELECT ?g WHERE ?g PREDICATE PREDICTS 'director' AND ?g OBJECT 'Sin City: A Dame to Kill For') ) AS ?director2 \" , \"    (SELECT ?h WHERE ?h PREDICATE PREDICTS 'cinematographer' AND ?h OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?cinematographer2 \" ] } "}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\"\n       ,\n        \"?x wdt:P86 ?y.\\n\"\n        ,\n        \"\\n\"\n        , \"?y wdt:P57 ?z.\\n\"\n        , \"\\n\"\n        , \"?z wdt:P161 ?a.\\n\"\n        , \"\\n\"\n        , \"?b wdt:P86 ?c.\\n\"\n        , \"\\n\"\n        , \"?c wdt:P57 ?d.\\n\"\n        , \"\\n\"\n        , \"?d wdt:P161 ?e.\\n\"\n        , \"\\n\"\n        , \"?e wdt:P86 ?f.\\n\"\n        , \"\\n\"\n        , \"?f wdt:P57 ?g.\\n\"\n        , \"\\n\"\n        , \"?g wdt:P161 ?h.\\n\"\n        , \"\\n\"\n        , \"wd:Q550196 wdt:P86 wd:Q1653396.\\n\"\n        , \"\\n\"\n        , \"wd:Q550196 wdt:P57 wd:Q192115.\\n\"\n        , \"\\n\"\n        , \"wd:Q192115 wdt:P161 wd:Q656357.\\n\"\n        , \"\\n\"\n        , \"?h wdt:P86 ?i.\\n\"\n        , \"\\n\"\n        , \"?i wdt:P57 ?j.\\n\"\n        , \"\\n\"\n        , \"?j wdt:P161 ?k.\\n\"\n        , \"\\n\"\n        , \"wd:Q656357 wdt:P86 wd:Q1921115.\" ,\"Wait, I think there's a typo here. The correct property should be P86 for Composer, so it should be wd:Q192115 is the composer of Sin City and others. But in this case, perhaps the last line was meant to link another resource but has a typo. Maybe it's supposed to be something else or maybe it's an error. I'll proceed with what's given.\"\n        ]\n    }\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ,\" kg:8464 is director\" ,\" kg:5795 is Sin City\" ,\" kg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\" ,\" kg:0507 is Spy Kids 3-D: Game Over\" ,\" kg:0641 is Sin City: A Dame to Kill For\" ,\" kg:7630 is cast member\" ,\" kg:3439 is director of photography\" ,\" ]\", \"format\", \"json\"] }\n  \t\t\t\t\t \t\t \t \t\t\t\t \t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n    \t\t\t\t\t \t\t\t\t\t\t \t\t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P86 ?y ; wdt:P1040 ?z ; wdt:P161 ?a ; wdt:P45602 ?b .\", \"?x wdt:P86 ?y ; wdt:P1040 ?z ; wdt:P161 ?a ; wdt:P45602 ?b ; wdt:P3986814 ?c .\", \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P86 ?y ; wdt:P1040 ?z ; wdt:P161 ?a ; wdt:P45602 ?b .\", \"?x wdt:P86 ?y ; wdt:P1040 ?z ; wdt:P161 ?a ; wdt:P3986814 ?c .\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{ \"query\": [\"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698%2FisComposerOf%2Fperson%2F7074%2FisComposerOf%2Fperson%2F7635%2FisComposerOf%2Fperson%2F7698\", \"+\\\\]/%2Fperson/7601%2FisComposerOf%2Fperson"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y; \", \"?x wdt:P58 ?z; \", \"?x wdt:P1040 ?w; \", \"?y wdt:Q4022902; \", \"?z wdt:Q5836844; \", \"?w wdt:Q4023328; \", \"?w wdt:Q5658534; \", \" }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:5280 ?y . } { ?x kg:5040 ?z . } { ?x kg:2352 ?w . } { ?x kg:0869 ?a . } { ?x kg:0938 ?b . } { ?x kg:2071 ?c . } { ?x kg:4134 ?d . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P58 ?y.\" , \" ?x wdt:P1040 ?z.\" , \" ?x wdt:P1431 ?w.\" , \" ?z wdt:P106 ?u.\" , \" ?w wdt:P106 ?v.\" , \" ?y wdt:P106 ?t.\" , \" ?u wdt:P58 ?a.\" , \" ?v wdt:P58 ?b.\" , \" ?t wdt:P58 ?c.\" , \" }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a kg:3387 ;\", \"  ?x p kg:1068 ;\", \"  ?y p kg:8387 ;\", \"  ?z p kg:2502 ;\", \"  ?y pgkg:3329 ;\", \"  ?z pgkg:0214 ;\", \"  ?x pkg:5744 ;\", \"  ?x pkg:7835 ;\", \"  ?x pkg:3387 ;\", \"}\"] }\n  \t\t\t\t\t \t \t \t \t \t \t "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?productionCompany WHERE { ?p_a wikitab: producedByP 1; ?p_a wikitab: directedByP 2; }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P1040 ; wd:Q6084069 .\" , \"?x wdt:P58 ; wd:Q12813010 .\" , \"?x wdt:P1431 ; wd:Q3282637 .\" ] } "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{ \"query\": [\"+SELECT+\\\"]\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\" ,\"\\n[\""}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS %w {\", \"?w\" ] } "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 wdt:P58 ?person ; ?p2 wdt:P57 ?person ; ?p3 wdt:P86 ?person ; ?p4 wdt:P161 ?person }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\" kg:9543 is director\" ,\" kg:7212 is The Floorwalker\" ,\" kg:2179 is screenwriter\" ,\" kg:8432 is composer\" ,\" kg:1132 is Shoulder Arms\" ,\" kg:8169 is The Great Dictator\" ,\" AND \" ,\" ?x is director\" ,\" kg:7212 is The Floorwalker\" ] } "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?resource wdt:isPartOf wdt:Q135627 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" ] } "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 wd:Q1165050 .\", \"?x wdt:P58 wd:Q229658 .\", \"?x wdt:P1040 wd:Q345678 .\", \"?x wdt:P344 wd:Q192115 .\", \"?x wdt:P161 wd:Q229658 .\", \"}\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{ \"query\": [\"+prefixes+ select ?r where Exists( ?p , ?o , ?s ) and filter( ?r = ( ( ?p = kg:3070 and ?o = \" ,\" and ?s = \" ,\" ) or ( ?p = kg:9590 and ?o = \" ,\" and ?s = \" ,\" )) ]\", \"kg:3070\", \"kg:9590\", \"Sin City\", \"Planet Terror\", \"director of photography\", \"director\", \"screenwriter\", \"cinematographer\", \"film editor\" ]}\n        \t\t\t\t\t \t\t\t\t  "}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } "}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P1040 ?y\" , \"AND ?x wdt:P1431 ?z\" , \"AND ?x wdt:P344 ?a\" , \"AND ?x wdt:P161 ?b\" , \"AND ?y wdt:P257 wd:Q2082586\" , \"AND ?y wdt:P257 wd:Q205447\" , \"AND ?y wdt:P257 wd:Q1432710\" , \"AND ?z wdt:P257 wd:Q17893055\" ] }\n        \t \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{ \"query\": [\"+prefix sparql+]-filter ( .match( [kg:9428] { film editor } ) OR .match( [kg:3667] { executive producer } ) ) -group by ( [kg:9428] { film editor } , [kg:3667] { executive producer } ) -return [kg:9428] { film editor }, [kg:3667] { executive producer } }\", \"prefix sparql http://www.w3.org/2001/sparql quads https://www.wikidata.orgyyy \", \"kg:3667 is executive producer\" , \"kg:9428 is film editor\" , \"kg:5089 is cast member\" , \"kg:3328 is Magic Mike XXL\" , \"kg:8732 is Schizopolis\" , \"kg:9739 is Contagion\" , \"kg:3690 is Full Frontal\" , \"kg:1618 is director of photography\" , \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\" , \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428 is film editor\", \"kg:5089 is cast member\", \"kg:3328 is Magic Mike XXL\", \"kg:8732 is Schizopolis\", \"kg:9739 is Contagion\", \"kg:3690 is Full Frontal\", \"kg:1618 is director of photography\", \"kg:5335 is Ocean's Eleven\" , \"kg:3667 is executive producer\", \"kg:9428"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?v WHERE (SELECT ?p, ?v WHERE wdt:P1040 ?v) = (SELECT ?p, ?v WHERE wdt:P161 ?v) AND (SELECT ?p, ?v WHERE wdt:P344 ?v) = (SELECT ?p, ?v WHERE wdt:P1040 ?v)\", \"SELECT DISTINCT ?p, ?v WHERE wdt:P1040 ?v = wdt:P161 ?v AND wdt:P344 ?v = wdt:P1040 ?v\", \"SELECT DISTINCT ?p, ?v WHERE wdt:P1040 ?v = wdt:P161 ?v AND wdt:P344 ?v = wdt:P1040 ?v\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t \t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{ \"query\": [\"+prefixes+]->[\",\"].join([\" ,\".join(query_parts)]), \" ]}\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS ?name WHERE { ?w wdt:birthName ?n . }\", \"http://example.com/ask#id\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P737 ?y .\", \"?x wdt:P26 ?z .\", \"?x wdt:P58 ?a .\", \"?x wdt:P57 ?b .\", \"?x wdt:P1040 ?c .\", \"?a wdt:Q2298257 .\", \"?b wdt:Q312258 .\", \"?y wdt:P26 ?z .\", \"?z wdt:P58 ?d .\", \"?d wdt:P57 ?e .\", \"?d wdt:P1040 ?f .\", \"...\" ] }\n        \t \t \t \t \t \t "}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] } "}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?p WHERE ?p = wdt:editors AND wdt:work = wd:Q123456) OR \" , \"    (SELECT ?p WHERE ?p = wdt:executiveProducers AND wdt:work = wd:Q123456) OR \" , \"    (SELECT ?p WHERE ?p = wdt:cinematographers AND wdt:work = wd:Q123456) ) \" , \"    AND wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = ["}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"} ( { \" ,\" } wd:Q12813010 { \" ,\" } wikitext ) AND (\" ,\" } wd:Q5265241 { \" ,\" } wikitext ) AND (\" ,\" } wd:Q6084069 { \" ,\" } wikitext ) AND (\" ,\" } wd:Q6099428 { \" ,\" } wikitext ) AND ( {\" ,\" } wd:P1431 { \" ,\" } ?x ) AND ( {\" ,\" } wd:P58 { \" ,\" } ?x ) AND ( {\" ,\" } wd:P1040 { \" ,\" } ?x ) AND ( {\" ,\" } wd:P344 { \" ,\" } ?x ) ) \", \"format\" ,\",\", \"json\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \"0\"\n  , \"filter\" ,\",\", \"true\"\n  , \"conjunctive\"\n  , \"boolean\"\n  , \"true\"\n  , \"return\"\n  , \"resource\"\n  , \"yes\"\n  , \"sorting\"\n  , \"false\"\n  , \"indentation\"\n  , \"false\"\n  , \"base_url\"\n  , \"https://www.wikidata.org/wikisparql/sparql\"\n  , \"version\"\n  , \"2.0\"\n  , \"title\"\n  , \"sparql\"\n  , \"true\" ,\"] }\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \"0\"\n  , \"filter\" ,\",\", \"true\"\n  , \"conjunctive\"\n  , \"boolean\"\n  , \"true\"\n  , \"return\"\n  , \"resource\"\n  , \"yes\"\n  , \"sorting\"\n  , \"false\"\n  , \"indentation\"\n  , \"false\"\n  , \"base_url\"\n  , \"https://www.wikidata.org/wikisparql/sparql\"\n  , \"version\"\n  , \"2.0\"\n  , \"title\"\n  , \"sparql\"\n  , \"true\" ,\"] }\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \"0\"\n  , \"filter\" ,\",\", \"true\"\n  , \"conjunctive\"\n  , \"boolean\"\n  , \"true\"\n  , \"return\"\n  , \"resource\"\n  , \"yes\"\n  , \"sorting\"\n  , \"false\"\n  , \"indentation\"\n  , \"false\"\n  , \"base_url\"\n  , \"https://www.wikidata.org/wikisparql/sparql\"\n  , \"version\"\n  , \"2.0\"\n  , \"title\"\n  , \"sparql\"\n  , \"true\" ,\"] }\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \"0\"\n  , \"filter\" ,\",\", \"true\"\n  , \"conjunctive\"\n  , \"boolean\"\n  , \"true\"\n  , \"return\"\n  , \"resource\"\n  , \"yes\"\n  , \"sorting\"\n  , \"false\"\n  , \"indentation\"\n  , \"false\"\n  , \"base_url\"\n  , \"https://www.wikidata.org/wikisparql/sparql\"\n  , \"version\"\n  , \"2.0\"\n  , \"title\"\n  , \"sparql\"\n  , \"true\" ,\"] }\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \"0\"\n  , \"filter\" ,\",\", \"true\"\n  , \"conjunctive\"\n  , \"boolean\"\n  , \"true\"\n  , \"return\"\n  , \"resource\"\n  , \"yes\"\n  , \"sorting\"\n  , \"false\"\n  , \"indentation\"\n  , \"false\"\n  , \"base_url\"\n  , \"https://www.wikidata.org/wikisparql/sparql\"\n  , \"version\"\n  , \"2.0\"\n  , \"title\"\n  , \"sparql\"\n  , \"true\" ,\"] }\"\n  , \"variables\" ,\",\", \"x\"\n  , \"limit\" ,\",\", \"500\"\n  , \"offset\" ,\",\", \""}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{ \"query\": [\"+prefix sparql+\" , \"+prefix kg+\" , \"https://www.wikidata.org/sparQL/ask#select ?x WHERE ?x w:isDefinedAs https://www.wikidata.org/sparQL/ask#?value=The Confession AND ( ?x p:editor OR ?x p:executive producer OR ?x p:cinematographer ) = :kg:5345 OR :kg:0514 OR :kg:6264 OR :kg:5793 OR :kg:3037 OR :kg:4320\", \"SPARQL-ALIVE\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": []} "}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE (\", \"?x wdt:P57 ?y\", \"AND \", \"?x wdt:P58 ?z\", \"AND \", \"?x wdt:P1040 ?a\", \"AND \", \"?x wdt:P106 ?b\", \")\", \"ASKS FOR ?x\", \"WHERE\", \"(?x wdt:P57 w:Q199039 AND ?x wdt:P58 w:Q2445896 AND ?x wdt:P1040 w:Q7042855 AND ?x wdt:P106 w:Q45602)\", \"ORDER BY\", \"?x DESC\", \"LIMIT 10\", \"RETURNING\", \"?x\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{ \"query\": [\"+prefixes+ select ?r where Exists( ?p , ?o , ?t ) and filter( ?o = 'Pay Day' and ?p = kg:1977 and ?t = kg:3703 ) or Exists( ?p , ?o , ?t ) and filter( ?o = 'Modern Times' and ?p = kg:8552 and ?t = kg:8876 ) or Exists( ?p , ?o , ?t ) and filter( ?o = 'The Floorwalker' and ?p = kg:1897 and ?t = kg:4025 ) or Exists( ?p , ?o , ?t ) and filter( ?o = 'Work' and ?p = kg:2020 and ?t = kg:kg:8552 ) ]\", \"format\" ,\",json\", \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \"baseUri\" ,\"https://example.com/sparql\" , \"format\" ,\"json\" , \""}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . }\", \"SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P58 wd:Q6084069 .\", \"?x wdt:P1431 wd:Q5437360 .\", \"?x wdt:P1040 wd:Q12813010 .\" ] } "}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x ?p1 \\\"https://www IMDB.com/title/tt0224567\\\" ; ?p1 (kg:7462) ; ?p2 (kg:7206) ; ?p3 (kg:8079) ; ?p4 (kg:4979) ; ?p5 (kg:0563) ; ?p6 (kg:6844) .\" ] } "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 = 'Jörn Donner' AND wikitidata:P245 = 'Vilgot Sjöman' AND wikitidata:P245 = 'Hans Alfredson' AND wikitidata:P245 = 'Gustaf Molander' AND wikitidata:P245 = 'Ingmar Bergman'\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P57 wd:Q982339 .\", \"?resource wdt:P58 wd:Q116760 .\", \"?resource wdt:P57 wd:Q11424 .\", \"?resource wdt:P58 wd:Q1033656 .\", \"?resource wdt:P57 wd:Q7546 .\", \"?resource wdt:P31 wd:Q1365463 .\", \"}\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?person1\" , \"kg:9808\" , \"?resource\" , \"kg:9808\" , \"?person2\" ] } "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"} ?x wdt:P1040 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q12813010 ] AND {\" ,\"} ?x wdt:P1431 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q12813010 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q12813010 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q12813010 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P58 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P1040 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P161 [ wd:Q5265241 ] AND {\" ,\"} ?x wdt:P344 [ wd:Q6084069 ] AND {\" ,\"} ?x wdt:P"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE kg:1850 IS NOT NULL AND kg:1459 IS NOT NULL AND kg:1256 IS NOT NULL AND kg:1368 IS NOT NULL AND kg:5444 IS NOT NULL AND kg:9231 IS NOT NULL AND kg:6630 IS NOT NULL AND kg:8325 IS NOT NULL\"] }\n  \t\t\t\t\t \t \t\t\t\t\t \t \t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v wdt:P58 ?p.\" , \" ?v wdt:P1040 ?r.\" , \" ?v wdt:P26 ?u.\" , \" ?u wdt:P58 ?x.\" , \" ?x wdt:P1040 ?y.\" , \" ?y wdt:P26 ?z.\" , \" ?z wdt:P58 ?w.\" , \"?w wdt:P1040 ?r.\" , \" ?w wdt:P26 ?u.\" , \" ?u wdt:P58 ?x.\" , \" ?x wdt:P1040 ?y.\" , \" ?y wdt:P26 ?z.\" , \" ?z wdt:P58 ?w.\" ] } "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v\" , \"http://example.org/sparql#property_2774\" , \"?x\" , \"http://example.org/sparql#property_1944\" , \"?y\" , \"http://example.org/sparql#property_8916\" , \"?z\" , \"http://example.org/sparql#property_0195\" , \"https://www.wikidata.org/entity/Q273552\" , \"http://example.org/sparql#property_7392\" , \"http://example.org/sparql#property_8858\" , \"http://example.org/sparql#property_1608\" ] } "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P57 ?y.\" , \"AND ?x wdt:P58 ?z.\" , \"AND ?x wdt:P1040 ?a.\" , \"AND ?y wdt:P21 wd:Q6581072.\" , \"AND ?z wdt:P21 wd:Q156497.\" , \"AND ?a wdt:P21 wd:Q158069.\" , \"AND (SELECT ?x WHERE ?x wdt:P1040 wdt:Q497617) = ?b\" , \"AND ?b wdt:P57 ?y.\" , \"AND ?b wdt:P58 ?z.\" , \"AND ?b wdt:P1040 ?a.\" , \"AND ?y wdt:P21 wd:Q6581072.\" , \"AND ?z wdt:P21 wd:Q156497.\" , \"AND ?a wdt:P21 wd:Q158069.\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a [kg:9010] ;\", \"?x p [kg:4328] ;\", \"?x p [kg:5403] ;\", \"?x p [kg:9010] ;\", \"?x nudge [kg:3823] ;\", \"?x p [kg:1652] ;\", \"?x p [kg:5606] ;\", \"?x p [kg:3805] ;\", \"?y a [kg:9681] ;\", \"?y p [kg:4328] ;\", \"?y p [kg:5403] ;\", \"?y p [kg:9010] ;\", \"} ]\", \"http://www.w3.org/1999 qudt/vocabularies/QUDT#valueTypeAnyOf\", \"https://schema.org/SexOrGender\", \"https://schema.org/Gender\", \"https://schema.org/Female\"] } "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS %s WHERE \" , \"  \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" \" , \"    ( \" , \"      ?q a w:Question . \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\""}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { \", \"?x\" ,\"P58\" ,\"wd:Q219155\" ,\".\", \"?x\" ,\"P57\" ,\"wd:Q198557\" ,\".\", \"?x\" ,\"P1040\" ,\"wd:Q16\" ,\".\", \"?x\" ,\"P27\" ,\"wd:Q627060\" ,\".\", \"?x\" ,\"P27\" ,\"wd:Q135983\" ,\".\", \"?x\" ,\"P27\" ,\"wd:Q219170\" ] } "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\" kg:7971 is Survival of the Dead\" ,\" kg:3067 is director\" ,\" kg:8180 is Dawn of the Dead\" ,\" kg:7961 is Monkey Shines\" ,\" kg:0514 is film editor\" ,\" kg:5600 is Canada\" ,\" kg:8443 is country of citizenship\" ,\" kg:7526 is The Crazies\" ,\" kg:9199 is Day of the Dead\" ,\" ?x is screenwriter\" ,\" ?x is film editor\" ,\" ?x is director\" ,\" ?x is screenwriter\" ,\" ?x is country of citizenship\" ,\" ?x is from Canada\" ,\" ?x is associated with The Crazies\" ,\" ?x is a writer or screenwriter\" ]} "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?dir IS wdt:P57 AND ?dir IS wdt:P58 AND ?dir IS wdt:P1431 AND \" , \"\\\"?dir\\\" has value \\\"1911\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?dir\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?police_story_2\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?chinese_zodiac\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?the_fearless_hyena\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?police_story\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?executive_producer\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?screenwriter\\\"\", \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?director\\\"\", \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?screenwriter\\\"\", \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?executive_producer\\\"\" , \"\\\"?police_story_2\\\" is wdt:P31 OF \\\"?director\\\"\" ] }\n  \t\t\t\t\t  \t \t\t\t\t\t \t \t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?dir_1911 a wdg:Director, wdg:PPro directed by\", \"?dir_1911 wdg:knowsAs\", \"?script_1911 wdg:screenwriter\", \"?script_1911 wdg:createdBy\", \"?exec_1911 wdg:ExecutiveProducer\", \"?exec_1911 wdg:knowsAs\", \"?pol_2 wdg:DirectedBy\", \"?pol_2 wdg:ScreenWriter\", \"?pol_2 wdg:CreatedBy\", \"?exec_1911 wdg:KnownAs\", \"?dir_1911 wdg:KnownAs\", \"?pol_2 wdg:knowsAs\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?ownerType wdt:isPayerOfResource ?resource \" , \"    ?person wdt:hasRole ?role \" , \"    ?person wdt:worksAt ?organization \" , \"    ?organization wdt:name 'CERN' OR ?organization wdt:name 'World Wide Web Consortium' OR ?organization wdt:name 'School of Electronics and Computer Science, University of Southampton' OR ?organization wdt:name 'Plessey'\" , \"    ?person wdt:familyName ?firstName \" , \"    ?person wdt:givenName ?lastName\" , \"    ( ?role wdt:isPartOf ?roleType )\" , \"    ?roleType wdt:instanceof [ wdt:Researcher ] ) \" ] } "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P108 ?r ; wdt:P108 [ wdt:P112 \\\"World Wide Web Consortium\\\" ] ; wdt:P108 [ wdt:P112 \\\"CERN\\\" ] ; wdt:P108 [ wdt:P112 \\\"School of Electronics and Computer Science, University of Southampton\\\" ] ; wdt:P108 [ wdt:P112 \\\"Plessey\\\" ] .\", \"query:SELECT DISTINCT ?r WHERE {\", \"?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 \\\"World Wide Web Consortium\\\" ; wdt:P108 wdt:P112 \\\"CERN\\\" ; wdt:P108 wdt:P112 \\\"School of Electronics and Computer Science, University of Southampton\\\" ; wdt:P108 wdt:P112 \\\"Plessey\\\" .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt:P112 [ \\\"Plessey\\\" ] .\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r ; wdt:P108 wdt:P112 [ \\\"World Wide Web Consortium\\\" ]; wdt:P108 wdt:P112 [ \\\"CERN\\\" ]; wdt:P108 wdt:P112 [ \\\"School of Electronics and Computer Science, University of Southampton\\\" ]; wdt:P108 wdt"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x kg:1104 ?y ;\", \"  ?x is founded by ?z ;\", \"  ?z kg:3032 ?a ;\", \"  ?a kg:9538 ?b ;\", \"  ?b kg:2052 ?c ;\", \"  ?c kg:7797 ?d ;\", \"  ?d kg:0564 ?e ;\", \"  ?e kg:kg:1104 ?f ;\", \"  ?f kg:3783 ?g ;\", \"  ?g kg:2052 ?h ;\", \"  ?h kg:9538 ?i ;\", \"  ?i kg:3783 ?j ;\", \"  ?j kg:kg:1104 ?k ;\", \"  ?k kg:2052 ?l ;\", \"  ?l kg:9538 ?m ;\", \"  ?m kg:3783 ?n ;\", \"  ?n kg:kg:1104 ?o ;\", \"  ?o kg:2052 ?p ;\", \"  ?p kg:9538 ?q ;\", \"  ?q kg:3783 ?r ;\" ] } "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?p1 a p2 ; \" , \"    ?p2 ?q1 ; \" , \"    ?q1 ?r1 ; \" , \"    ?r1 ?v1 ; \" , \"    ?v1 ?w1 ; \" , \"    ?w1 ?x1 ; \" , \"    ?x1 ?y1 ; \" , \"    ?y1 ?z1 ; \" , \"    ?z1 ?a1 ; \" , \"    ?a1 a p3 ; \" , \"    ?p2 ?q2 ; \" , \"    ?q2 ?r2 ; \" , \"    ?r2 ?v2 ; \" , \"    ?v2 ?w2 ; \" , \"    ?w2 ?x2 ; \" , \"    ?x2 ?y2 ; \" , \"    ?y2 ?z2 ; \" , \"    ?z2 ?a2 ; \" , \"    ?a2 a p4 ; \" ] } "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE \" , \"?person1\" , \"?\" , \"?property1\" , \"?\" , \"?property2\" , \"?\" , \"?property3\" , \"?\" , \"?property4\" ] } "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?f WHERE ?p1 is director AND ?p1 is http://example.org/HttpOnlyConstraint/AND ?p1 ?f\", \"http://example.org/HttpOnlyConstraint\", \"?p1\", \"?f\", \"?p2\", \"?p3\", \"?p4\", \"?p5\", \"?p6\", \"?p7\", \"?p8\", \"?p9\", \"?p10\", \"?p11\", \"?p12\", \"?p13\", \"?p14\", \"?p15\", \"?p16\", \"?p17\", \"?p18\", \"?p19\", \"?p20\", \"?p21\", \"?p22\", \"?p23\", \"?p24\", \"?p25\", \"?p26\", \"?p27\", \"?p28\", \"?p29\", \"?p30\", \"?p31\", \"?p32\", \"?p33\", \"?p34\", \"?p35\", \"?p36\", \"?p37\", \"?p38\", \"?p39\", \"?p40\", \"?p41\", \"?p42\", \"?p43\", \"?p44\", \"?p45\", \"?p46\", \"?p47\", \"?p48\", \"?p49\", \"?p50\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" , \"    (SELECT ?production_company WHERE production_company PREDICTS ?company) PREDICTS ?year ) \" , \"    AND ( ?person1 IS_A WRITER ) \" , \"    AND ( ?person1 IS_A CINEMATOGRAPHER ) \" , \"    AND ( ?person1 IS_A STAR ) \" , \"    AND ( ?person1 IS_A EDITOR ) \" , \"    AND ( ?person1 IS_A DIRECTOR ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'writer' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'cinematographer' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'star' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'editor' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'director' ) \" , \"    AND ( ?person2 IS_A WRITER ) \" , \"    AND ( ?person2 IS_A CINEMATOGRAPHER ) \" , \"    AND ( ?person2 IS_A STAR ) \" , \"    AND ( ?person2 IS_A EDITOR ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'writer' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'cinematographer' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'star' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'editor' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'director' ) \" , \"    ... and so on for each role. But this seems too long, perhaps using a better approach with quantifiers would be better. Maybe use a list of roles and iterate over them. Also, the query needs to find people who are exec producers of From Dusk till Dawn: The Series and also have all those other roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { \", \"?x\" , \"wdsomething\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{ \"query\": [\"+SELECT+\\\"]\\n[\" ,\"\\n[\" ,\"  ],\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\" ,\",  ]\\n[\""}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 [this night] ;\", \"?x wdt:P58 [This Night] ;\", \"?x wdt:P1040 [This Night] ;\", \"?x wdt:P344 [This Night] ;\", \"OPTIONAL{ ?x wdt:P57 [Rio das Mortes] ; }\", \"OPTIONAL{ ?x wdt:P58 [Rio das Mortes] ; }\", \"OPTIONAL{ ?x wdt:P1040 [Rio das Mortes] ; }\", \"OPTIONAL{ ?x wdt:P344 [Rio das Mortes] ; }\", \"OPTIONAL{ ?x wdt:P57 [Lili Marleen] ; }\", \"OPTIONAL{ ?x wdt:P58 [Lili Marleen] ; }\", \"OPTIONAL{ ?x wdt:P1040 [Lili Marleen] ; }\", \"OPTIONAL{ ?x wdt:P344 [Lili Marleen] ; }\", \"OPTIONAL{ ?x wdt:P57 [Whity] ; }\", \"OPTIONAL{ ?x wdt:P58 [Whity] ; }\", \"OPTIONAL{ ?x wdt:P1040 [Whity] ; }\", \"OPTIONAL{ ?x wdt:P344 [Whity] ; }\" ] }\n  \t \t\t \t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{ \"query\": [\"+prefix kg:\" ,\"+base http://example.com/\"] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?x wdt:P58 ?z.\" , \" ?x wdt:P1040 ?w.\" , \" ?y wdt:P27 ?q.\" , \" ?z wdt:P344 ?p.\" , \" ?w wdt:P27 ?r.\" , \" ?q wdt:P344 ?s.\" , \" ?p wdt:P344 ?t.\" , \" (>?x) wdt:P1040 ?w.\" , \" (>?y) wdt:P58 ?z.\" , \" (>?z) wdt:P58 ?u.\" , \" (?<v>wd:Q2520777) wdt:P57 ?y.\" , \" (?<v>wd:Q1903317) wdt:P58 ?z.\" , \" (?<v>wd:Q623051) wdt:P1040 ?w.\" , \" (?<v>wd:Q627060) wdt:P58 ?u.\" , \" (?<v>wd:Q30) wdt:P344 ?p.\" , \" (?<v>wd:Q30) wdt:P344 ?t.\" , \" (?<v>wd:Q2520777) wdt:P1040 ?w.\" ] } "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{\n    \"query\": [\n        \"?x─was-director-of─?y\" ,\n        \"?x─screenwriter─?y\" ,\n        \"?x─film-editor─?y\"\n    ]\n}\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    (SELECT ?w writer WHERE ?w person AND ?w birthYear = 1943 AND ?w name = 'George Lucas') OR \" , \"    (SELECT ?c cinematographer WHERE ?c person AND ?c birthYear = 1947 AND ?c name = 'Rouben Rostamian') OR \" , \"    (SELECT ?d director WHERE ?d person AND ?d birthYear = 1952 AND ?d name = 'Kirk Jones') OR \" , \"    (SELECT ?f filmmaker WHERE ?f person AND ?f birthYear = 1948 AND ?f name = 'Peter C. Tompkins')\" , \"    ) AND \" , \"    (SELECT ?s starWarsEpisode WHERE ?s dbp:showTitle = 'Star Wars: Episode IV – A New Hope' AND ?s dbp:isPartOf = 'Star Wars' AND ?s dbp:createdYear = 1977)' , \"]} "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?p, ?person WHERE (SELECT ?p WHERE ?p = wdt:P57 AND ?person = wd:Q613974) OR (SELECT ?p WHERE ?p = wdt:P58 AND ?person = wd:Q613974) OR (SELECT ?p WHERE ?p = wdt:P1431 AND ?person = wd:Q613974)\", \"SELECT DISTINCT ?p, ?person WHERE (SELECT ?p WHERE ?p = wdt:P57 AND ?person = wd:Q1869678) OR (SELECT ?p WHERE ?p = wdt:P58 AND ?person = wd:Q1869678) OR (SELECT ?p WHERE ?p = wdt:P1431 AND ?person = wd:Q1869678)\", \"SELECT DISTINCT ?p, ?person WHERE (SELECT ?p WHERE ?p = wdt:P57 AND ?person = wd:Q17738) OR (SELECT ?p WHERE ?p = wdt:P58 AND ?person = wd:Q17738) OR (SELECT ?p WHERE ?p = wdt:P1431 AND ?person = wd:Q17738)\", \"SELECT DISTINCT ?p, ?person WHERE (SELECT ?p WHERE ?p = wdt:P344 AND ?person = wd:Q613974)\"] } "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{\n    \"query\": [\n        \"?x─source─name a.kg:7785\",\n        \"?x─written-by─name a.kg:9966\",\n        \"?x─executive-producer─name a.kg:7238\",\n        \"?x─directed-by─name a.kg:7785\",\n        \"?x─filmmaker─name a.kg:6810\",\n        \"?x─ Screenwriter ─name a.kg:9966\",\n        \"?x─ produced─name a.kg:7238\",\n        \"?x─ directed─name a.kg:7785\",\n        \"?x─ created-by─name a.kg:4958\",\n        \"?x─ source─name a.kg:7820\",\n        \"?x─ written-by─name a.kg:9966\",\n        \"?x─ produced─name a.kg:7238\",\n        \"?x─ directed─name a.kg:7785\",\n        \"?x─ created-by─name a.kg:4958\",\n        \"?x─ source─name a.kg:7820\",\n    \"}\",\n    \"formattingMode\",\n    \"language\",\n    \"version\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P57 ?director.\" , \"?resource wdt:P1040 ?editor.\" , \"?resource wdt:P58 ?writer.\" , \"?resource wdt:P31 ?production_company.\" , \"?director wdt:P31 ?director_property.\" , \"?editor wdt:P31 ?editor_property.\" , \"?writer wdt:P31 ?writer_property.\" , \"?production_company wdt:P31 ?company_property.\" , \"AND ?director wdt:P57 ?resource.\" , \"AND ?editor wdt:P1040 ?resource.\" , \"AND ?writer wdt:P58 ?resource.\" , \"AND ?production_company wdt:P31 ?resource.\" , \"?director wdt:P31 ?director_property.\" , \"?editor wdt:P31 ?editor_property.\" , \"?writer wdt:P31 ?writer_property.\" , \"?company_property wdt:P272 ?resource.\" , \"OR ?company_property wdt:P272 ?resource.\" ] } "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{ \"query\": [\"SELECT DISTINCT ?f WHERE {\", \"?d a kg:6845 ;\", \"?p a kg:4053 ;\", \"?w a kg:1364 ;\", \"?e a kg:5191 ;\", \"?f a kg:6893 ;\", \"?d ?f ;\", \"?p ?f ;\", \"?w ?f ;\", \"?e ?f ;\", \"?d a kg:0888 ;\", \"?p a kg:4300 ;\", \"?w a kg:1364 ;\", \"?e a kg:5191 ;\", \"?d a kg:2033 ;\", \"?p a kg:8595 ;\", \"?w a kg:kg:5191 ;\", \"?e a kg:kg:4300 ;\", \"]}\", \"format\", \"json\"] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE \" , \"    (SELECT ?p WHERE ?p IS A Property AND ?p = P58 OR ?p = P1040 OR ?p = P106) \" , \"    AND (SELECT ?o WHERE ?o IS AN Object AND ?o = wd:Q2336453 OR ?o = wd:Q3536496 OR ?o = wd:Q1323191 OR ?o = wd:Q19885882) \" , \"    AND (SELECT ?x WHERE ?x IS A Resource) \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{\n    \"query\": [\n        \"?x a [kg:1532] ; ?p ?y.\"\n    ]\n}\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1431 ?y.\" , \" ?x wdt:P58 ?y.\" , \" ?x wdt:P1040 ?y.\" , \" ?x wdt:P106 ?y.\" , \" ?x wdt:P1431 ?y.\" , \" ?x wdt:P1040 ?y.\" , \" ?x wdt:P58 ?y.\" , \" ?x wdt:P1431 ?y.\" , \" ?x wdt:P106 ?y.\" , \" ?x wdt:P57 ?y.\" ] } "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{ \"query\": [\"+prefixes+]->[\", \".join([\", \".join(s) for s in combinations])]->[\",\".join(res)]\", \"kg:9726\", \"[kg:6632, kg:6404, kg:8978]\", \"[kg:0023, kg:6094]\", \"[kg:6094, kg:6094]\", \"[kg:6094, kg:6094]}\", \"kg:2636\", \"[kg:9012, kg:9726]\", \"kg:2674\" ]} "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P31 wd:Q11424.\" , \"?resource wdt:P1040 ?editor.\" , \"?editor wdt:P57 ?director.\" , \"?director wdt:P58 ?writer.\" , \"?editor wdt:P31 wd:Q562108.\" , \"?editor wdt:P31 wd:Q16872395.\" , \"?editor wdt:P31 wd:Q35979475.\" ] } "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT DISTINCT ?f WHERE {\", \"?f\" ] } "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P145 = 'Jens Jørgen Thorsen' AND wikitidata:P206 = 'Jørgen Leth' AND wikitidata:P207 = 'Ole John'\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P57 ?director.\" , \"?resource wdt:P1040 ?editor.\" , \"?resource wdt:P58 ?writer.\" , \"?resource wdt:P31 ?instance_of.\" , \"?resource wdt:P162 ?producer.\" , \"?director wdt:P272 ?production_company.\" , \"?editor wdt:P272 ?production_company.\" , \"?writer wdt:P272 ?production_company.\" , \"?director wdt:P57 ?Jens Jørgen Thorsen.\" , \"?editor wdt:P1040 ?Jørgen Leth.\" , \"?writer wdt:P58 ?Ole John.\" , \"?instance_of wdt:P31 ?resource.\" , \"?production_company wdt:P272 ?resource.\" ] }\n  \t\t\t\t\t \t\t\t\t\t     \t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{ \"query\": [\"+\\\\]/prefix kg:6197 { director ? } , [+\\\\]/prefix kg:7692 { film } , [+\\\\]/prefix kg:7044 { film editor } , [+\\\\]/prefix kg:5693 { screenwriter } , [+\\\\]/prefix kg:3494 { Ole John } , [+\\\\]/prefix kg:1566 { producer } , [+\\\\]/prefix kg:0501 { Jens Jørgen Thorsen } , [+\\\\]/prefix kg:2538 { Jørgen Leth } , [+\\\\]/prefix kg:3383 { production company } } , \"]\n}\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1040 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1431 ?b.\" , \" ?x wdt:P169 ?c.\" , \" ?y wdt:P279 [ wd:Q25479948 ] .\" , \" ?z wdt:P279 [ wd:Q25479948 ] .\" , \" ?a wdt:P279 [ wd:Q25479948 ] .\" , \" ?b wdt:P279 [ wd:Q25479948 ] .\" , \" ?c wdt:P279 [ wd:Q25479948 ] .\" , \" wd:Q6084069 wdt:P1305 [ wd:Q5437360 ] .\" , \" wd:Q6084069 wdt:P1305 [ wd:Q12813010 ] .\" , \" wd:Q6084069 wdt:P1305 [ wd:wd:Q25479948 ] .\" , \" wd:Q5437360 wdt:P169 ?d.\" , \" wd:Q12813010 wdt:P169 ?e.\" , \" wd:Q25479948 wdt:P169 ?f.\" ] } "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE {\" ]} "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1040 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1431 ?b.\" , \" ?x wdt:P1040 ?c.\" , \" ?x wdt:P58 ?d.\" , \" ?x wdt:P1431 ?e.\" ] } "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{ \"query\": [\"+SELECT distinct ?r as resource\", \"+FROM ( [ kg:4165 ] hasProperty [ kg:7137 ] ) AND ( [ kg:4165 ] hasProperty [ kg:2573 ] ) AND ( [ kg:4165 ] hasProperty [ kg:0760 ] ) AND ( [ kg:4165 ] hasProperty [ kg:9396 ] ) )\", \"format\" ,\",json\" ] }\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?productioncompany_p1_s1 ?productioncompany_p2 \" , \"  ?director_p1 ?actor_p1 \" , \"  ?writer_p1 ?actor_p2 \" , \"  ?country_p1 ?country_p2 \" , \"  ?year_p1 ?year_p2 \" , \"  ?imdb_id ?imdb_rating \" ] } "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?editor, ?cinematographer, ?executiveProducers, ?director WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\"query\": [ \"SELECT DISTINCT ?x WHERE { \", \"?x wdt:P57 [\\\"Moebius\\\"] AND \\\"One on One\\\" wdt:P1040 [\\\"Pietà\\\"] AND \\\"Amen\\\" wdt:P1431 [\\\"Pietà\\\"] AND \\\"Pietà\\\" wdt:P1431 [\\\"Pietà\\\"] }\", \"http://www.wikidata.org SPARQL/1.0#baseQuery\" ]}\n        \t\t\t\t\t \t\t\t\t\t "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{\n    \"query\": [\n        \"?x─wd─kg:8051─kg:2400─kg:3231─return ?x\"\n    ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { \", \"?x wdt:P57 wd:Q44426 .\", \" ?x wdt:P1040 wdt:P57 .\", \" ?x wdt:P222344 wdt:P1040 .\", \" ?x wdt:P161 wd:P57 .\", \" ?x wdt:P1040 wdt:P161 .\", \" ?x wdt:P222344 wdt:P161 .\", \" }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://example.org/sparql#was Edited By\" , \"?r\" ] } "}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?w WHERE \" , \"        (SELECT ?a WHERE \" , \"            (SELECT ?x WHERE \" , \"                (SELECT ?p WHERE \" , \"                    (SELECT ?c WHERE \" , \"                        (SELECT ?y WHERE \" , \"                            (SELECT ?i WHERE \" , \"                                (SELECT ?s WHERE \" , \"                                    (SELECT ?m WHERE \" , \"                                        (SELECT ?t WHERE \" , \"                                            (SELECT ?u WHERE \" , \"                                                (SELECT ?k WHERE \" , \"                                                    (SELECT ?d WHERE \" , \"                                                        (SELECT ?b WHERE \" , \"                                                            (SELECT ?a1 WHERE \" , \"                                                                (SELECT ?w1 WHERE \" , \"                                                                    (SELECT ?x1 WHERE \" , \"                                                                        (SELECT ?p1 WHERE \" , \"                                                                            (SELECT ?c1 WHERE \" , \"                                                                                (SELECT ?y1 WHERE \" , \"                                                                                    (SELECT ?i1 WHERE \" , \"                                                                                        (SELECT ?s1 WHERE \" , \"                                                                                            (SELECT ?m1 WHERE \" , \"ettes\" , \"                            ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x w3id ?y\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?uri WHERE \" , \"    (SELECT ?uri WHERE wikitab:isPartOf ?uri) ) AS ?uri\" , \"    AND (wikipedia:World Wide Web Consortium IS_A ?uri)\" , \"    AND (wikipedia:Open Data Institute IS_A ?uri)\" , \"    AND (wikidata:Plessey IS_A ?uri)\" , \"    AND (wikidata:CERN IS_A ?uri)\" , \"    AND (wikidata:University of Southampton IS_A ?uri)\" , \"    AND (wikidata:SCHOOL OF ELECTRONICS AND COMPUTER SCIENCE IS_A ?uri)\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE \" , \"    wdt:P108 ?x\" , \"    wdt:P37033 ?x\" , \"    wdt:P112 ?x\" , \"    wdt:P42944 ?x\" , \"    wdt:P7204713 ?x\" , \"    wdt:P37033 ?x\" , \"    wdt:P112 ?x\" , \"    wdt:P42944 ?x\" , \"    wdt:P7204713 ?x\" ] } "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:2151 ?y ; ?x kg:2985 ?z ; ?x kg:5212 ?a ; ?x kg:7697 ?b ; ?x kg:7166 ?c ; ?x kg:9015 ?d ; }\" ] }\n  \t\t\t\t\t \t \t \t \t \t\t\t\t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?w WHERE wikitourmal ?w ) AND \" , \"    (SELECT ?c WHERE wikitourmal ?c ) AND \" , \"    (SELECT ?s WHERE wikitourmal ?s ) AND \" , \"    (SELECT ?m WHERE wikitourmal ?m ) \" , \"    AND wikitourmal ?r \" , \"    AND wikitourmal ?d \" , \"    AND wikitourmal ?a \" , \"    AND wikitourmal ?p \" ] } "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE \" , \"    (SELECT ?p WHERE ?p[ wd:P57 ] = wd:Q192115 AND ?p[ wd:P86 ] = wd:Q1653396 AND ?p[ wd:P58 ] = wd:Q192115 AND ?p[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ] = wd:Q192115 AND ?x[ wd:P86 ] = wd:Q1653396 AND ?x[ wd:P58 ] = wd:Q192115 AND ?x[ wd:P1040 ] = wd:Q192115 ) AS ?x WHERE ?x[ wd:P57 ]"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{ \"query\": [\"+prefix sparql+\" , \"+prefix kg+\" , \"SELECT DISTINCT ?r WHERE ( ... )\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?x wdt:P58 ?z.\" , \" ?x wdt:P1040 ?a.\" , \" ?x wdt:P1431 ?b.\" , \" ?x wdt:P57 ?y.\" , \" ?x wdt:P58 ?z.\" , \" ?x wdt:P1040 ?a.\" , \" ?x wdt:P1431 ?b.\" , \" ?y wdt:P1040 ?c.\" , \" ?y wdt:P1431 ?d.\" , \" ?z wdt:P58 ?e.\" , \" ?z wdt:P1431 ?f.\" , \" ?a wdt:P57 ?g.\" , \" ?a wdt:P58 ?h.\" , \" ?a wdt:P1040 ?i.\" , \" ?a wdt:P1431 ?j.\" , \" ?b wdt:P57 ?k.\" , \" ?b wdt:P58 ?l.\" , \" ?b wdt:P1040 ?m.\" , \" ?b wdt:P1431 ?n.\" ] } "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\" ]} "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?p WHERE \" , \"        (SELECT ?f WHERE \" , \"            (SELECT ?a WHERE \" , \"                (SELECT ?d WHERE \" , \"                    (SELECT ?y WHERE \" , \"                        (SELECT ?x WHERE \" , \"                            (SELECT ?w WHERE \" , \"                                (SELECT ?g WHERE \" , \"                                    (SELECT ?b WHERE \" , \"                                        (SELECT ?t WHERE \" , \"                                            (SELECT ?i WHERE \" , \"                                                (SELECT ?n WHERE \" , \"                                                    (SELECT ?m WHERE \" , \"                                                        (SELECT ?l WHERE \" , \"                                                            (SELECT ?k WHERE \" , \"                                                                (SELECT ?j WHERE \" , \"                                                                    (SELECT ?i WHERE \" , \"                                                                        (SELECT ?h WHERE \" , \"                                                                            (SELECT ?g WHERE \" , \"                                                                                (SELECT ?f WHERE \" , \"                                                                                    (SELECT ?e WHERE \" , \"                                                                                      (SELECT ?d WHERE \" , \"                                                                                          (SELECT ?c WHERE \" , \"                                                                                              (SELECT ?b WHERE \" , \"                                                                                                  (SELECT ?a WHERE \" , \"                                                                                                      (SELECT ?z WHERE \" , \"                                                                                                          (SELECT ?y WHERE \" , \"                                                                                                                (SELECT ?x WHERE \" , \"                                                                                                                (SELECT ?w WHERE \" , \"                                                                                                                (SELECT ?v WHERE \" , \"                                                                                                                (SELECT ?u WHERE \" , \"                                                                                                                (SELECT ?t WHERE \" , \"                                                                                                                (SELECT ?s WHERE \" , \"                                                                                                                (SELECT ?r WHERE \" , \"                                                                                                                (SELECT ?q WHERE \" , \"                                                                                                                (SELECT ?p WHERE \" , \"                                                                                                                (SELECT ?o WHERE \" , \"                                                                                                                (SELECT ?n WHERE \" , \"                                                                                                                (SELECT ?m WHERE \" , \"                                                                                                                (SELECT ?l WHERE \" , \"                                                                                                                (SELECT ?k WHERE \" , \"                                                                                                                (SELECT ?j WHERE \" , \"                                                                                                                (SELECT ?i WHERE \" , \"                                                                                                                (SELECT ?h WHERE \" , \"                                                                                                                (SELECT ?g WHERE \" , \"                                                                                                                (SELECT ?f WHERE \" , \"                                                                                                                (SELECT ?e WHERE \" , \"                                                                                                                (SELECT ?d WHERE \" , \"                                                                                                                (SELECT ?c WHERE \" , \"                                                                                                                (SELECT ?b WHERE \" , \"                                                                                                                (SELECT ?a WHERE \" , \"                                                                                                                (SELECT ?z}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P106 United Artists Corporation . }\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P106 wd:Q219400 . }\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P106 wd:Q3282637 . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{ \"query\": [\"+prefixes+]->[kg:2641]->[?x]->[kg:5337]->[?y]->[kg:7916]->[?z]->[kg:8008]->[?a]->[kg:9728]->[?b]->[kg:9398]->[?c]->[kg:2511]->[?d]->[kg:8141]->[?e]->[kg:2683]->[?f]->[kg:9728]->[?g]->[kg:2092]->[?h]->[kg:2641]->[?i]->[kg:5337]->[?j]->[kg:7404]->[?k]->[kg:8008]->[?l]->[kg:9728]->[?m]->[kg:2511]->[kg:8141]->[?n]->[kg:2683]->[kg:9728]->[?o]->[kg:2092]->[kg:2641]->[?p]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?q]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?r]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?s]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?t]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?u]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?v]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?w]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?x]->[kg:5337]->[kg:7404]->[kg:8008]->[kg:9728]->[kg:2511]->[kg:8141]->[kg:2683]->[kg:9728]->[kg:2092]->[kg:2641]->[?y]->[kg:533"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?p WHERE (SELECT ?e WHERE (SELECT ?a WHERE (SELECT ?x WHERE ?x IS A wikitext:property \\\"year\\\" AND ?x = 1985 ) AS ?y ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?p WHERE {\", \"?x wdt:P57 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P1431 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P344 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P86 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P57 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P1431 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P344 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P86 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P57 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P1431 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P344 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P86 ?y.\" , \"?y wdt:P58 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P57 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z wdt:P1040 ?a.\" , \"?a wdt:P1431 ?b.\" , \"?b wdt:P58 ?c.\" , \"?c wdt:P1040 ?d.\" , \"...\" , \"?x wdt:P1431 ?y.\" , \"?y wdt:P86 ?z.\" , \"?z w"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{ \"query\": [\"+sparql+]->[\" ]}\n  \t\t\t\t\t  \t\t\t\t\t\t\t\t   "}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P108 [\\\"Center for International Security and Cooperation\\\"]\\nAND\\n?x wdt:P27 [\\\"United States of America\\\"]\\nAND\\n?x wdt:P112 [\\\"Sally Ride Science\\\"]\\nAND\\n?x wdt:P108 [\\\"Stanford University\\\"]\\nAND\\n?x wdt:P108 [\\\"National Aeronautics and Space Administration\\\"]\\nAND\\n?x wdt:P108 [\\\"University of California, San Diego\\\"]\" ] }\n        \t\t\t\t\t \t\t \t \t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:3067 ?y . ?x kg:2802 ?z . ?x kg:4056 ?a . ?x kg:9752 ?b . }\", \"ASK ?q\" ] }\n   \t\t\t\t\t  \t\t\t\t\t  \t\t\t"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P344 [\\\"Cinematographer\\\"]\" , \"wikipedia:English\" ] } "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{ \"query\": [\"+prefix sparql+\" , \"+prefix kg+\" , \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"was born in\" , \"kg:6288\" , \"; predicate ; subject }\"] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 wd:Q11371930 . } UNION { ?x wdt:P1431 wd:Q11371930 . } UNION { ?x wdt:P58 wd:Q11371930 . } UNION { ?x wdt:P108 wd:Q947907 . } UNION { ?x wdt:P1431 wd:Q947907 . } UNION { ?x wdt:P58 wd:Q947907 . } UNION { ?x wdt:P108 wd:Q11490471 . } UNION { ?x wdt:P1431 wd:Q11490471 . } UNION { ?x wdt:P58 wd:Q11490471 . } \", \"format\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{ \"query\": [ \"SELECT * FROM ? WHERE ( ? = 'Howl's Moving Castle' AND ? = 'Tokuma Memorial Cultural Foundation for Animation' ) OR ( ? = 'Howl's Moving Castle' AND ? = 'Ghibli Museum' ) OR ( ? = 'Howl's Moving Castle' AND ? = 'Nibariki' ) OR ( ? = 'Howl's Moving Castle' AND ? = 'Shin-Ei Animation' ) OR ( ? = 'Howl's Moving Castle' AND ? = 'Studio Ghibli' ) OR ( ? = 'Howl's Moving Castle' AND ? = 'TMS Entertainment' ) \", \"format\" ] }\n  \t\t\t\t\t \t \t \t\t\t\t\t\t\t "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?p where (SELECT ?c FROM ?q WHERE ... )\", \"http://example.com/...\"]}\n        \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?person, ?director, ?screenwriter, ?executive_producer, ?year, ?country, ?language, ?duration, ?country_of_origin, ?composer, ?set_designer, ?costume designer, ?props, ?special_effects, ?art Direction, ?editor, ?title\", \"https://www.wikidata.org SPARQL/1.0#base\", \"https://www.wikidata.org SPARQL/1.0#blankNode\", \"https://www.wikidata.org SPARQL/1.0#property\", \"https://www.wikidata.org SPARQL/1.0#item\", \"https://www.wikidata.org SPARQL/1.0#match\", \"https://www.wikidata.org SPARQL/1.0#graph\", \"https://www.wikidata.org SPARQL/1.0# quads\", \"https://www.wikidata.org SPARQL/1.0#triples\", \"https://www.wikidata.org SPARQL/1.0#quartets\", \"https://www.wikidata.org SPARQL/1.0# quintuples\" ] }\n    \t\t\t\t  \t\t\t\t\t  \t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\" kg:6614 is director\", \"?x\" , \" AND \", \"?\" , \"kg:7026 is screenwriter\", \"?x\" , \" AND \", \"?\" , \"kg:4089 is executive producer\", \"?x\" , \" AND \", \"?\" , \"kg:1953 is anyone_lived_in_a_pretty_how_town\", \"?x\" , \" AND \", \"?\" , \"kg:2562 is Filmmaker\", \"?x\" , \" AND \", \"?\" , \"kg:1146 is 1:42.08\", \"?x\" , \" AND \", \"?\" , \"kg:9935 is StarWars: Episode IV – A New Hope\", \"?x\" , \" AND \", \"?\" , \"kg:2618 is director_of_photography\", \"?x\" , \"}\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = \\\"category:cinematography\\\" ) OR (SELECT ?d INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son\\\"] AND ?category = \\\"category:director\\\" ) OR (SELECT ?e INCL ?category WHERE ?c = [\\\"My Son, What Have Ye Done?\\\"] AND ?category = \\\"category:editor\\\" )\", \"http://www.wikidata.org SPARQL/7.2.1#base\", \"http://www.wikidata.org SPARQL/7.2.1#SELECT\", \"http://www.wikidata.org SPARQL/7.2.1#WHERE\", \"http://www.wikidata.org SPARQL/7.2.1#INCL\", \"http://www.wikidata.org SPARQL/7.2.1#DISTINCT\" ]}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t \t "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?person, ?year, ?country, ?gender, ?age, ?height, ?weight, ?hair_color, ?build, ?voice, ?placeOfBirth, ?citizenship, ?spouse, ?child, ?sibling, ?parent, ?brother, ?sister, ?aunt, ?uncle, ?cousin, ?spouse, ?child, ?sibling, ?parent, ?brother, ?sister, ?aunt, ?uncle, ?cousin\", \"match (p:Project { ?p })\", \" p hasProperty [ P1040 ] as wd:Q2085\", \" p hasProperty [ P1431 ] as wd:Q1140578\", \" p hasProperty [ P57 ] as wd:Q1511905\", \" p hasProperty [ P344 ] as wd:Q1473406\", \" p hasProperty [ P1040 ] as wd:Q1140578\", \" p hasProperty [ P1431 ] as wd:Q2085\", \" p hasProperty [ P57 ] as wd:Q1511905\", \" p hasProperty [ P344 ] as wd:Q1473406\" ] } "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE ( ... )\", \"...\"] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?p1\" , \"__was born in__\" , \"1947\" ] } "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 ?y ;\", \"  wdt:P57 is director, ?y wdt:P57 ?x.\" ] } "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x\" ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" , \"  ?production_company ?script_writer ?director ?actor ?male_person ?born_date ?year_of_birth ?place_of_birth ?gender ?age_at_death ?death_date ?death_year \" , \"  ?script_writer wdt:isPartOf <https://www.wikidata.org/entity/Q/165987> \" , \"  ?actor wdt:isPartOf <https://www.wikidata.org/entity/Q/165987> \" , \"  ?director wdt:isPartOf <https://www.wikidata.org/entity/Q/165987> \" , \"  ?male_person wdt:P2034 \" , \"  ?born_date wdt:P569 \" , \"  ?year_of_birth wdt:P906 \" , \"  ?place_of_birth wdt:P2225 \" , \"  ?gender wdt:P1807 \" , \"  ?age_at_death wdt:P347 \" , \"  ?death_date wdt:P569 \" , \"  ?death_year wdt:P906 \" ] } "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 ?y.\" , \" ?y wdt:P21 wd:Q6581097 .\" , \" ?y wdt:P31 ?z.\" , \" ?z wdt:P1040 ?a.\" , \" ?z wdt:P58 ?b.\" , \" ?x wdt:P1040 ?c.\" , \" ?x wdt:P58 ?d.\" , \" ?x wdt:P21 wd:Q6581097 .\" ] } "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x a schema.org/Organization.\"]} "}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p a wdt:P750 AND ?p ?o wdt:P127 AND ?o wdt:P272 AND ?o wdt:P136 AND ?o wdt:P148) ) = []\", \"ASK ?x WHERE ?x wdt:P750 ?p\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{ \"query\": [\"+prefix sparql:\" , \"+base http://example.com/ ]\", \"pattern Matching {\", \"  ?x hasProperty [ kg:1030 ] asObject *; \", \"  ?y hasProperty [ kg:6072 ] asObject *; \", \"  ?z hasProperty [ kg:6879 ] asObject *; \", \"  ?w hasProperty [ kg:5386 ] asObject *; \", \"  ?v hasProperty [ kg:1821 ] asObject *; \", \"  ?u hasProperty [ kg:0073 ] asObject *; \", \"  ?t hasProperty [ kg:4822 ] asObject *; \", \"  ?s hasProperty [ kg:6249 ] asObject *; \", \"  ?r hasProperty [ kg:2959 ] asObject *; \", \"  ?q hasProperty [ kg:0993 ] asObject *; \", \"  ?p hasProperty [ kg:1030 ] asObject *; \", \"  ?o hasProperty [ kg:6879 ] asObject *; \", \"  ?n hasProperty [ kg:5386 ] asObject *; \", \"  ?m hasProperty [ kg:2959 ] asObject *; \", \"  ?l hasProperty [ kg:1821 ] asObject *; \", \"  ?k hasProperty [ kg:0073 ] asObject *; \", \"  ?j hasProperty [ kg:4822 ] asObject *; \", \"  ?i hasProperty [ kg:6249 ] asObject *; \", \"  ?h hasProperty [ kg:1030 ] asObject *; \", \"  ?g hasProperty [ kg:5386 ] asObject *; \", \"  ?f hasProperty [ kg:2959 ] asObject *; \", \"  ?e hasProperty [ kg:1821 ] asObject *; \", \"  ?d hasProperty [ kg:0073 ] asObject *; \", \"  ?c hasProperty [ kg:4822 ] asObject *; \", \"  ?b hasProperty [ kg:6249 ] asObject *; \", \"  ?a hasProperty [ kg:1030 ] asObject *; \", \"  ?z hasProperty [ kg:6072 ] asObject *; \", \"  ?y hasProperty [ kg:6879 ] asObject *; \", \"  ?x hasProperty [ kg:5386 ] asObject *; }\", \"filter: and ( ( ?a is a :kg:1821 ) , ( ?b is a :kg:0073 ) , ( ?c is a :kg:4822 ) , ( ?d is a :kg:6249 ) , ( ?e is a :kg:1030 ) , ( ?f is a :kg:2959 ) , ( ?g is a :kg:5386 ) , ( ?h is a :kg:1821 ) , ( ?i is a :kg:0073 ) , ( ?j is a :kg:4822 ) , ( ?k is a :kg:6249 ) , ( ?l is a :kg:1030 ) , ( ?m is a :kg:2959 ) , ( ?n is a :kg:5386 ) , ( ?o is a :kg:1821 ) , ( ?p is a :kg:0073 ) , ( ?q is a :kg:4822 ) , ( ?r is a :kg:6249 ) , ( ?s is a :kg:1030 ) , ( ?t is a :kg:2959 ) , ( ?u is a :kg:5386 ) , ( ?v is a :kg:1821 ) , ( ?w is a :kg:0073 ) )\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer , ?editor , ?director WHERE \" , \"  ?composer PREDICATE1 ?composer_work , \" , \"  ?editor PREDICATE2 ?editor_work , \" , \"  ?director PREDICATE3 ?director_work \" , \"  AND ( \" , \"    ?composer_work W predicates ?work \" , \"    ?editor_work W predicates ?work \" , \"    ?director_work W predicates ?work \" , \"    ) \" , \"  AND ?composer_work = ?editor_work \" , \"  AND ?composer_work = ?director_work \" , \"  WHERE ?work IS A wikitourist_work \" ] } "}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer, ?editor, ?director WHERE {\", \"?composer\" ]\n}\n        \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:1892 ?y . ?x kg:2009 ?z . }\", \"SELECT DISTINCT ?r WHERE { ?x kg:1892 ?y . ?x kg:2009 ?z . }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P26 wd:Q157191 .\", \"?x wdt:P106 wd:Q7371 .\", \"?x wdt:P737 influenced by wd:Q219400 .\", \"?x wdt:P737 influenced by wd:Q137808 .\", \"?x wdt:P737 influenced by wd:Q104340 .\", \"?x wdt:P26 wd:Q241019 .\", \"?x wdt:P26 wd:Q137808 .\", \"?x wdt:P106 wd:Q7371 .\", \"?x wdt:P737 influenced by wd:Q241019 .\", \"?x wdt:P737 influenced by wd:Q137808 .\", \"?x wdt:P737 influenced by wd:Q104340 .\", \"?x wdt:P106 wd:Q7371 .\", \"?x rdfs:label ?l .\", \"SERVICE/OPTIONAL?\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a schema.org/Organization; \", \"?x spouse ?y; \", \"?y a schema.org/Person; \", \"?z influenced by ?x; \", \"?z a schema.org/FilmEditor; \", \"?w founded by ?x; \", \"?w a schema.org/Organization; \", \"?v is_filmEditor ?w; \", \"?u is_filmEditor ?w; \", \"?t is_filmEditor ?w; \", \"?s is_filmEditor ?w; \", \"}\"] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 ?y ; wdt:P58 ?z ; wdt:P26 ?a ; wdt:P737 ?b ; wdt:P161 ?c ; wdt:P312258 .\", \"?x wdt:P57 ?y ; wdt:P58 ?z ; wdt:P26 ?a ; wdt:P737 ?b ; wdt:P161 ?c ; wdt:P312258 .\", \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 ?y ; wdt:P58 ?z ; wdt:P26 ?a ; wdt:P737 ?b ; wdt:P161 ?c ; wdt:P312258 .\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"Select the director, star, and screenwriter of Jane B. par Agnès V., The Beaches of Agnès, and The World of Jacques Demy who married, influenced, and was influenced by Jacques Demy.\" ]} "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata.wikibase_data WHERE wikitidata:is_a wikitidata:P2457 AND wikitidata:has_part wikitidata:P1308 AND wikitidata:has_part wikitidata:P1695 AND wikitidata:has_part wikitidata:P2457\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q17070012) AS ?distributor , (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q17070012) AS ?producer , (SELECT ?p WHERE ?p = wdt:P272 AND ?p ?o = wd:Q17070012) AS ?production_company , (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q849363) AS ?distributor2 , (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q849363) AS ?producer2 , (SELECT ?p WHERE ?p = wdt:P272 AND ?p ?o = wd:Q849363) AS ?production_company2 , (SELECT ?p WHERE ?p = wdt:P127 AND ?p ?o = wd:Q65073147) AS ?owner , (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q1628791) AS ?distributor3 , (SELECT ?p WHERE ?p = wdt:P750 AND ?p ?o = wd:Q1628791) AS ?producer3 , (SELECT ?p WHERE ?p = wdt:P272 AND ?p ?o = wd:Q1628791) AS ?production_company3 ) WHERE ((?distributor OR ?distributor2 OR ?distributor3) = wd:Q849363) AND ((?producer OR ?producer2 OR ?producer3) = wd:Q849363) AND ((?production_company OR ?production_company2 OR ?production_company3) = wd:Q17070012) AND (?owner = wd:Q65073147)\", \"format\", \"json\"\n    ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{ \"query\": [\"SELECT\", \" ? resource \", \" WHERE \", \"( kg:5071 = 'AbeBooks' ) AND ( kg:5943 = 'Amazon Kindle' ) AND ( kg:0832 = 'distributed by' ) AND ( kg:4990 = 'The Vanguard Group') AND ( kg:3680 = 'BlackRock') AND ( kg:1758 = 'Mozart in the Jungle') AND ( kg:6716 = 'owned by' ) AND ( kg:8018 = '.amazon') AND ( kg:0983 = 'production company') \", \" FOR ALL \"]\n}\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] } "}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\"query\": [\"+prefixes+\",\n\"SELECT DISTINCT ?person, ?director, ?screenwriter, ?editor, ?countryOfBirth, ?film\",\n\"FROM wdt:Q29 WHERE wdt:P57 ?person AND wdt:P58 ?screenwriter AND wdt:P1040 ?editor AND wdt:P27 ?countryOfBirth AND wdt:P344 ?director OFPhotography AND wdt:P265 ?film\",\n\"ORDER BY ?person ASC\"]}\n  \t\t\t\t\t \t\t \t \t\t\t\t \t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{ \"query\": [\"+sparql+]->[\" ,\",  {}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?x\" , \"wd:Q258945\" , \"wd:Q746676\" , \"wd:Q222344\" , \"wd:Q1044630\" , \"wd:Q6813152\" , \"wd:Q242446\" , \"wd:Q216611\" , \"wd:Q746676\" , \"wd:Q222344\" , \"wd:Q1044630\" , \"wd:Q6813152\" , \"wd:Q242446\" , \"wd:Q216611\" , \"wd:Q746676\" , \"wd:Q222344\" , \"wd:Q1044630\" , \"wd:Q6813152\" , \"wd:Q242446\" , \"wd:Q216611\" ] } "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{ \"query\": [ \"SELECT * FROM ? WHERE ( ... )\", \"SELECT * FROM ? WHERE ( ... )\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\"query\": [ \"SELECT DISTINCT ?p, ?v WHERE (SELECT ?x FROM wd:Q87778273 WHERE wdt:P57 ?x) = x AND (SELECT ?y FROM wd:Q85520081 WHERE wdt:P58 ?y) = y AND (SELECT ?z FROM wd:Q85520081 WHERE wdt:P1431 ?z) = z AND (SELECT ?a FROM wd:Q96054985 WHERE wdt:P161 ?a) = a AND (SELECT ?b FROM wd:Q87778273 WHERE wdt:P1040 ?b) = b AND (SELECT ?c FROM wd:Q85532437 WHERE wdt:P344 ?c)\", \"http://example.org/wikidata/Q96054985\", \"http://example.org/wikidata/Q87778273\", \"http://example.org/wikidata/Q85520081\", \"http://example.org/wikidata/Q96054985\", \"http://example.org/wikidata/Q87778273\", \"http://example.org/wikidata/Q85532437\"]}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE ( ... )\", \"kg:4806 is director AND kg:8389 is executive producer AND kg:6509 is screenwriter AND kg:1709 is film editor AND kg:8781 is The Madness AND kg:1484 is Inception AND kg:8802 is Game Over AND kg:6473 is cast member\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?c WHERE ?w wdt:birthYearP1 ?y AND ?c wdt:citationID ?x AND ?x wdt:birthYearP2 ?y \", \"SELECT DISTINCT ?w, ?c WHERE ?w wdt:birthYearP1 ?y AND ?c wdt:citationID ?x AND ?x wdt:birthYearP2 ?y\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P737 influencedBy [\", \"?x wdt:P31 instanceOf [\", \"?x wdt:P58 screenwriter [\", \"?x wdt:P344 director of photography [\", \"?x wdt:P26 spouse [\", \"?x wdt:P31 instanceOf [\", \"?x wdt:P737 influencedBy [\", \"?x wdt:P58 screenwriter [\", \"?x wdt:P344 director of photography [\", \"?x wdt:P26 spouse [\", \"wd:Q613974 wdt:P737 influencedBy [\", \"wd:Q208910 wdt:P737 influencedBy [\", \"wd:Q1609393 wdt:P58 screenwriter [\", \"wd:Q2411065 wdt:P344 director of photography [\", \"wd:Q2411065 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q613974 wdt:P58 screenwriter [\", \"wd:Q613974 wdt:P344 director of photography [\", \"wd:Q613974 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd:Q717378 wdt:P26 spouse [\", \"wd:Q208910 wdt:P58 screenwriter [\", \"wd:Q208910 wdt:P344 director of photography [\", \"wd:Q208910 wdt:P26 spouse [\", \"wd:Q717378 wdt:P58 screenwriter [\", \"wd:Q717378 wdt:P344 director of photography [\", \"wd"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\" ,\"Select a distinct resource x where \" ,\"?x\" ,\" \" ,\"[\" ,\"And the query should include all necessary conditions. For example, select x where x is a person who wrote \" , \" and was married to someone who directed \" , \" etc.\" ]} "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?dir WHERE { ?p a P  ; ?p PDirectedBy ?dir . }\", \"SELECT DISTINCT ?dir WHERE { ?p a P  ; ?p PDirectedBy ?dir . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1431 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1040 ?b.\" , \" ?x wdt:P222344 ?c.\" , \" ?x wdt:P18609037 ?d.\" , \" ?y wdt:P222344 ?e.\" , \" ?z wdt:P58 ?f.\" , \" ?a wdt:P106 ?g.\" , \" ?b wdt:P106 ?h.\" , \" ?c wdt:P106 ?i.\" , \" ?d wdt:P222344 ?j.\" , \" ?e wdt:P57 ?k.\" , \" ?f wdt:P58 ?l.\" , \" ?g wdt:P1431 ?m.\" , \" ?h wdt:P1040 ?n.\" , \" ?i wdt:P222344 ?o.\" , \" (?x wdt:P697 [ wd:Q1361018 ]) { \", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1431 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1040 ?b.\" , \" ?x wdt:P222344 ?c.\" , \" ?x wdt:P18609037 ?d.\" , \" ?y wdt:P222344 ?e.\" , \" ?z wdt:P58 ?f.\" , \" ?a wdt:P106 ?g.\" , \" ?b wdt:P106 ?h.\" , \" ?c wdt:P106 ?i.\" , \" ?d wdt:P222344 ?j.\" , \" ?e wdt:P57 ?k.\" , \" ?f wdt:P58 ?l.\" , \" ?g wdt:P1431 ?m.\" , \" ?h wdt:P1040 ?n.\" , \" ?i wdt:P222344 ?o.\" , \" (?x wdt:P697 [ wd:Q1361018 ]) { \", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1431 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1040 ?b.\" , \" ?x wdt:P222344 ?c.\" , \" ?x wdt:P18609037 ?d.\" , \" ?y wdt:P222344 ?e.\" , \" ?z wdt:P58 ?f.\" , \" ?a wdt:P106 ?g.\" , \" ?b wdt:P106 ?h.\" , \" ?c wdt:P106 ?i.\" , \" ?d wdt:P222344 ?j.\" , \" ?e wdt:P57 ?k.\" , \" ?f wdt:P58 ?l.\" , \" ?g wdt:P1431 ?m.\" , \" ?h wdt:P1040 ?n.\" , \" ?i wdt:P222344 ?o.\" , \" (?x wdt:P697 [ wd:Q1361018 ]) { \", \"?x wdt:P57 ?y.\" , \" ?x wdt:P1431 ?z.\" , \" ?x wdt:P58 ?a.\" , \" ?x wdt:P1040 ?b.\" , \" ?x wdt:P222344 ?c.\" , \" ?x wdt:P18609037 ?d.\" , \" ?y wdt:P222344 ?e.\" , \" ?z wdt:P58 ?f.\" , \" ?a wdt:P106 ?g.\" , \" ?b wdt:P106 ?h.\" , \" ?c wdt:P106 ?i.\" , \" ?d wdt:P222344 ?j.\" , \" ?e wdt:P57 ?k.\" , \" ?f wdt:P58 ?l.\" , \" ?g wdt:P1431 ?m.\" , \" ?h wdt:P1040 ?n.\" , \" ?i wdt:P222344 ?o"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a :property; \", \"?y p :property; \", \"?z q :property; \", \"?w r :property; \", \"?v s :property; \", \"?u t :property; \", \"?m o :property; \", \"?n g :property; \", \"?l h :property; \", \"?k i :property; \", \" }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { \", \"?x\" , \"wdt:P1040\" , \"wd:Q2298257\" , \"wdt:P58\" , \"wd:Q2493884\" , \"wdt:P737\" , \"wd:Q63993096\" , \"wdt:P106\" , \"wd:Q312258\" , \"wdt:P26\" ] } "}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a :P3369 ;\", \"  ?x p :P2324 ;\", \"  ?x p :P1170 ;\", \"  ?x p :P9020 ;\", \"  ?x p :P4110 ;\", \"  ?x p :P3500 ;\", \"  ?x p :P1392 ;\", \"  ?x p :P7997 ;\", \"  ?y a :P3369 ;\", \"  ?y p :P2324 ;\", \"  ?y p :P1170 ;\", \"  ?y p :P9020 ;\", \"  ?y p :P4110 ;\", \"  ?y p :P3500 ;\", \"  ?y p :P1392 ;\", \"  ?y p :P7997 ;\", \"  ?z a :P3696 ;\", \"  ?z p :P3369 ;\", \"  ?z p :P2324 ;\", \"  ?z p :P1170 ;\", \"  ?z p :P9020 ;\", \"  ?z p :P4110 ;\", \"  ?z p :P3500 ;\", \"  ?z p :P1392 ;\", \"  ?z p :P7997 ;\", \"  ?w a :P6219 ;\", \"  ?w p :P1392 ;\", \"  ?w p :P7997 ;\", \"  ?w p :P3500 ;\", \"  ?w p :P4110 ;\", \"  ?w p :P2324 ;\", \"  ?w p :P9020 ;\", \"  ?w p :P3369 ;\", \"  ?w p :P1170 ;\", \"  ?w p :P3696 ;\", \"  ?w p :P5874 ;\", \"  ?x w ?y ;\", \"  ?y w ?z ;\", \"  ?z w ?w ;\" ] } "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q84256 WHERE (wd:Q109735 AND wd:P2P105 = 'Grand Canyon' ) OR (wd:Q109735 AND wd:P2P105 = 'BlackRock' ) OR (wd:Q109735 AND wd:P2P105 = 'State Street Global Advisors' ) OR (wd:Q109735 AND wd:P2P105 = 'T Rowe Price' ) OR (wd:Q109735 AND wd:P2P105 = 'Capital Group Companies' ) OR (wd:Q109735 AND wd:P2P105 = 'State Farm Insurance' ) OR (wd:Q109735 AND wd:P2P105 = 'Vanguard Group')\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x wdt:P750 ?y . filter( ?y p:P849363 ) }\" ]\n}\n   \t\t\t\t\t\t\t\t \t \t\t\t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{ \"query\": [\"+prefix sparql:\" ]} "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?w wikitext\" ] } "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{ \"query\": [\"+SELECT+\\\"]\\n[\" ,\"\\n\"] } "}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2547689 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P106 wd:Q36834 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"SELECT DISTINCT ?composer\",\n    \"WHERE {\",\n    \"?x kg:4423 ?y .\", \"=> This line represents the occupation of a person.\",\n    \"?x kg:3294 ?z .\" , \"=> This line represents that the person is a composer.\",\n    \"?x kg:1333 ?w .\" ,\"=> This line represents that the person is Bob Dylan.\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t   \t\t\t\t\t \t  "}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?human wdt:P1052 ?found }\" ] }\n   \t\t\t\t\t\t\t   \t    \t\t"}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [ \"What did human found\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{ \"query\": [ \"What did human found\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"  ?person wdt:P106 wd:Q2598 .\", \">// P106 is occupation, Q2598 is film director\\n\",\n      \"  ?person wdt:P1411 ?edit .\", \">// P1411 is edited work\\n\",\n      \"  ?edit wdt:P31 wd:Q11173 .\", \">// Q11173 is resource\\n\",\n      \"  SERVICE wikibase:label { bd:serviceParam lang 'en' }\" ,\"\\n\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{ \"query\": [ \"SELECT ?x WHERE { wd:Q853 wdt:P1040 ?x }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{ \"query\": [ \"What did Andrei Tarkovsky edit?\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P179 wd:Q203864 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n        \"  wdt:P155 ?work .\", \"=>\" ,\n        \"  wdt:P155 ?work .\"\n    ]\n} "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [ \"{ ?x }\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P1630 wd:Q25948 }\" ] }\n    \t\t    \t\t\t\t    \t\t"}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{ \"query\": []} "}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{\n  \"query\": [\n    \"?x kg:2378 ?y .\",\n    \"?y kg:6156 ?z .\",\n    \"?z kg:6999 ?w .\"\n  ]\n}\n                    "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?parent WHERE { wd:Q1897 p:P2258 ?statement . ?statement ps:P2258 ?parent . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{ \"query\": [\n    \"{prefixes}\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{ \"query\": [\n    \"SELECT ?x WHERE { kg:9894 kg:parent ?x }\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q1006543 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{ \"query\": []} "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{ \"query\": []} "}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P3002 ?employer . VALUES (?employer) {(wd:Q197)} }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P108 wd:Q40 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q57140698 . ?work wdt:P28 wd:Q85370 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{ \"query\": []} "}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P3608 ?y . ?y wdt:P179 ?z . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"{statements}\"\n] }\n    \t\t\t\t\t \t\t\t\t \t\t\t\t\t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{ \"query\": [\n    \"{prefixes}\"\n]\n}\n    \t\t   \t\t\t\t\t    \t\t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?work wdt:P31 wd:Q24507896 . ?work wdt:P178 ?composer . ?work wdt:P161 ?designer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q36834 }\" ] }\n    \t\t\t\t\t\t  \t\t\t\t   \t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{ \"query\": [ \"{ ?x }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:cinematographer ?y . ?y wdt:P31 wd:Q5 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { wd:Q158069 wdt:P344 ?x . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n  \"query\": [\n    \"{ ?x kg:6736 ?y }\"\n  ]\n}\n                    "}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q870946 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P108 wd:Q76845 }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?work wdt:P300 ?composer . ?work wdt:P577 ?date . ?date wdt:P1948 ?year . FILTER (BOUND (?year) && ?year = 1999 ) }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?composer }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:typeOf ?type .\",\n      \"FILTER ( ?type = kg:7933 )\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P1411 wd:Q289760 }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{ \"query\": [ \"SELECT ?composer WHERE { wd:Q577126 wdt:P86 ?composer . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"?x kg:composer ?y.\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q283584 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P106 ?occupation.\",\n      \"?work wdt:P86 ?composer.\",\n      \"?work wdt:P222344 ?cinematographer.\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{ \"query\": [ \"Was a composer of The Chess Players a cinematographer\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5726489 . }\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT ?x WHERE { wd:Q4348691 wdt:P750 ?x . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?actor WHERE { ?film wdt:P1640 wd:Q23598 . ?film wdt:P178 ?actor . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P161 wd:Q967797 . ?x wdt:P155 wd:Q2085 }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{ \"query\": [ \"What sequel of Twin Peaks starred James Parks\" ] }\n    \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{ \"query\": [\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?production wdt:P112 ?founder.\",\n    \"?production wdt:P355 wd:Q81950264.\"\n    ,\n    \"?founder wdt:P40 wd:Q15070044.\"\n    ]\n}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{ \"query\": [\n    \"?x ?y\"\n  ]\n}\n    \t\t   \t\t\t\t\t    \t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q48976 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n      \"?person wdt:P3373 ?sibling.\",\n      \"?person wdt:P108 wd:Q1022419.\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"{subject} kg:5089 {object}\"\n]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?this wdt:P31 wd:Q5 . ?this wdt:P1086 ?employer . ?this wdsi:P2479 wd:Q29258375 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P108 ?y }\"\n  ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P108 ?employer . FILTER (STR(?person) = \\\"Malia Obama\\\") }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"?x wdt:P106 ?o .\",\n    \"{ ?x wdt:P26 wd:Q730300 . } union { ?x wdt:P26 ?y . ?y wdt:P3373 wd:Q730300 . }\"\n  ]\n}\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{ \"query\": [ \"Was a costume designer 's spouse ClubJenna 's founder\" ] }\n    \t\t\t   \t\t\t\t\t \t  \t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:George_Harrison_(musician) . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q2643 . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{ \"query\": [ \"What was written and directed by George Harrison\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P1433 ?author . ?author wdt:P106 wd:Q5728945 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P58 wd:Q24907 . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{ \"query\": [ \"What was written and edited by Anker Sørensen\" ] }\n   \t\t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q28495 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { wd:Q4990261 wdt:P40 ?parent . ?parent wdt:P27 wd:Q34 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?spouse WHERE { wd:Q1032746 wdt:P569 ?birthDate . }\" ] }\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?spouse\",\n        \"WHERE {\",\n          \"?person wdt:P106 wd:Q222344 .\", \"><!--Occupation is cinematographer--> <!--Line 1: person has occupation as cinematographer.--> <!--Line 2: person's spouse is the subject we want to find.--> <!--Line 3: spouse's country of citizenship is Japan.--> <!--Line 4: spouse's country of citizenship is wd:Q17 (Japan).--> <!--Line 5: person is Takenori Sentō, so ?person = wd:Q3514303 .--> <!--Line 6: So the query should be something like: --> <!--SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse; wdt:P106 wd:Q222344. } --> <!--But wait, no, because P26 is spouse of person, so the statement would be ?person wdt:P26 ?spouse . So combining all together: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse; wdt:P106 wd:Q222344. } --> <!--But wait, no, because P106 is occupation of person, but we need to get the spouse's country of citizenship. So perhaps it should be: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 . } --> <!--Yes, that makes sense. Because we want to find the spouse (?spouse) of Takenori Sentō (wd:Q3514303), and also check if the spouse is a Japanese citizen (wdt:P27 wd:Q17). So the correct query would be: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 . } --> <!--But wait, the original question is whether the spouse was a Japanese cinematographer. So perhaps we need to check if the spouse has occupation as cinematographer (wdt:P106 wd:Q222344). So combining all conditions: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 . ?spouse wdt:P106 wd:Q222344 . } --> <!--Yes, that's better. So the final query is as above.--> <!--But wait, in SPARQL, each triple needs to be separated by semicolons or periods. So perhaps it's better to write it as two separate triples within the same subject context. Alternatively, using multiple lines for clarity. But in the end, the generated query should be concise and correct.--> <!--Final check: The query selects ?spouse where ?person (Takenori Sentō) is married to ?spouse (?person wdt:P26 ?spouse), and ?spouse has country of citizenship Japan (?spouse wdt:P27 wd:Q17), and ?spouse's occupation is cinematographer (?spouse wdt:P106 wd:Q222344). So the query correctly captures all necessary conditions.--> <!--Thus, the generated SPARQL query should be as follows: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 . ?spouse wdt:P106 wd:Q222344 . } --> <!--But wait, in SPARQL syntax, each triple should be properly separated. So perhaps it's better to write it as: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse ; wdt:P106 wd:Q222344 . ?spouse wdt:P27 wd:Q17 . } --> <!--Yes, that's more concise and correct.--> <!--So the final query is as above.--> <!--Final Answer: SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse ; wdt:P106 wd:Q222344 . ?spouse wdt:P27 wd:Q17 . } --> <!--Wait, no. The occupation is of the spouse, not of Takenori Sentō. So in the first triple, we have ?person (Takenori) has spouse ?sp"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{ \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person kg:3305 ?name.\",\n    \"?person kg:7045 ?spouse.\",\n    \"?spouse kg:8953 kg:1905.\",\n    \"}\"\n]\n}\n                    "}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?filmDirector wdt:P106 wd:Q25398 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t \t\t\t \t"}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?director wdt:P106 wd:Q2526255 . ?director wdt:P108 ?employer . ?company wdt:P1411 wd:Q16 . }\" ] }\n    \t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{ \"query\": [ \"What employer of a film director did Canada found\" ] }\n                   \t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q295 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"SELECT * WHERE { wd:Q1744 wdt:P162 ?x . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:producer ?p .\",\n      \"?p kg:screenwriter ?s .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?costumeDesigner wdt:P106 wd:Q25984 . ?costumeDesigner p:P1378/psn:P1378 ?statement . ?statement ps:P1378 ?job . ?statement pq:P1378 ?startYear . ?employer wdt:P106 wd:Q18024598 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P108 wd:Q1323191 . }\" ] }\n    \t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . ?x wdt:P3373 ?y . ?y wdt:P26 wd:Q461354 }\" ] }\n   \t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P106 wd:Q235487 . ?person wdt:P1082 ?employer }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{ \"query\": [ \"SELECT ?x WHERE { wd:Q67134 wdt:P108 ?x . }\" ] }\n   \t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P106 wd:Q234895 . ?person wdt:P1082 ?employer . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{ \"query\": [\n    \"{prefixes}\"\n]\n}\n    \t\t\t\t\t \t\t\t\t \t\t\t\t\t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{ \"query\": [\n    \"What employer of Claire Doutriaux was a film's distributor\"\n  ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q483572 ; wdt:P17 wd:Q30 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P112 wd:Q34 . }\" ] }\n                    "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q1809764 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . ?x wdt:P26 wd:Q6200573 . ?x wdt:P27 wd:Q34 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{ \"query\": [ \"Was a costume designer a Swedish spouse of Mark Sylwan\" ] }\n    \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?spouse ?sibling WHERE { wd:Q164837 wdt:P2200 ?spouse . wd:Q164837 wdt:P599 ?sibling }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{ \"query\": [\n    \"{prefix wdt: <http://www.wikidata.org/prop/direct/>\\n\"\n    ,\n    \"{prefix wd: <http://www.wikidata.org/entity/>\\n\"\n    ,\n    \"SELECT ?x WHERE {\\n\"\n    ,\n    \"  wd:Q3356 wdt:P26 ?x .\\n\" ,\n    \"  wd:Q3356 wdt:P3373 ?y .\\n\" ,\n    \"  wd:Q3356 wdt:P26 ?y .\\n\"\n    ,\n    \"}\"\n    ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{ \"query\": [\n    \"What spouse and sibling of Antiochus IV Epiphanes married Antiochus\"\n]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q245086; wdt:P179 ?distributor; wdt:P183 ?producer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q1651543 . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{ \"query\": [ \"Which distributor and producer of The Magic Flute did Sweden found\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t\t\t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q24897 . ?person wdt:P106 wd:Q24897 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P3373 wd:Q2336212 . }\" ] }\n                    "}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P225 ?name . FILTER (LANG(?name) = 'de') . ?person wdt:P699 ?employee . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:8212 kg:3317 ?y . ?y kg:5620 kg:4759 }\" ] }\n   \t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q490779 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t        \t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P140 |wdt:P286 ?creator . ?creator wdt:P1795 wd:Q33080 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{ \"query\": [ \"What was written by Vince Gilligan and produced by Bob Weinstein\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q27948 . ?person wdt:P106 wd:Q27948 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P112 wd:Q1079409 . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q24507896.\",\n      \"FILTER (EXISTS { ?work wdt:P160 ?p . ?p wdt:P166 wd:Q153745 })\",\n      \"FILTER (EXISTS { ?work wdt:P160 ?s . ?s wdt:P166 wd:Q24507896 })\"\n    ,\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P58 wd:Q2831 . }\" ] }\n                   \t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n  \"query\": [\n    \"?x ?y\"\n  ]\n}\n                \t\t\t\t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P3608 wd:Q1457298 ; wdt:P160 wd:Q1457298 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{ \"query\": [ \"What was executive produced by Steven Spielberg and written by Chris Columbus\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?item WHERE { ?item wdt:P31 wd:Q50684297 . ?item wdt:P17 wd:Q30 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P112 wd:Q34 . ?x wdt:P750 wd:Q1651543 . }\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t  \t\t\t\t\t\t\t\t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person ?spouse WHERE { ?person wdt:P698 wd:Q1532470 . ?person wdt:P225 wd:Q1532470 . ?person wdt:P25 wd:Q1532470 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q479860 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q54270896 .\", \"><!-- P31 is instance of, Q54270896 is work (art)--> <!-- Wait, no. Let me check the correct class for works. Maybe it's better to use wdt:P1433 (work). Hmm, but I'm not sure. Alternatively, perhaps using wdt:P31 with wd:Q54270896 is okay if that refers to a work.--> <!-- Let me check what Q54270896 is. Looking it up... Oh no, Q54270896 is \" , \"title of a literary work\" , \"description: title of a literary work\", \"label: title of a literary work (English)\" , \"label: titre d'une œuvre littéraire (French)\" , \"label: Titel einer literarischen Arbeit (German)\" , \"label: 标题的文学作品（中文）\" , \"label: titolo di opera letteraria (Italian)\" , \"label: título de uma obra literária (Portuguese)\" , \"label: tittel på en litterær værk (Danish)\" , \"label: titel van een literaire werk (Dutch)\" , \"label: Tytul dzieła literackiego (Polish)\" , \"label: Título de uma obra literária (Spanish)\" , \"label: 标题的文学作品（俄语）\" , \"label: 标題的作品文學（闽南语）\" , \"label: 标题的文学作品（日语）\" , \"label: 标题的文学作品（韩语）\" , \"label: 标题的文学作品（泰米尔）\" , \"label: 标题的文学作品（波斯语）\" , \"label: 标题的文学作品（豪萨语）\" , \"label: 标题的文学作品（乌尔都语）\" , \"label: 标题的文学作品（土耳其语）\" , \"label: 标题的文学作品（希腊语）\" , \"label: 标题的文学作品（瑞典语）\" , \"label: 标题的文学作品（芬兰语）\" , \"label: 标题的文学作品（爱沙尼亚语）\" , \"label: 标题的文学作品（拉脱维亚语）\" , \"label: 标题的文学作品（立陶宛语）\" , \"label: 标题的文学作品（捷克语）\" , \"label: 标题的文学作品（斯洛伐克语）\" , \"label: 标题的文学作品（匈牙利语）\" , \"label: 标题的文学作品（波兰语）\" , \"label: 标题的文学作品（乌克兰语）\" , \"label: 标题的文学作品（保加利亚语）\" , \"label: 标题的文学作品（塞尔维亚语）\" , \"label: 标题的文学作品（罗马尼亚语）\" , \"label: 标题的文学作品（德语）\" , \"label: 标题的文学作品（意大利语）\" , \"label: 标题的文学作品（葡萄牙语）\" , \"label: 标题的文学作品（西班牙语）\" , \"label: 标题的文学作品（中文）\" , \"label: 标题的文学作品（其他语言...）--> <!-- So Q54270896 is \" , \"title of a literary work\", \"description: title of a literary work\", \"label: title of a literary work (English)\" , \"label: titre d'une œuvre littéraire (French)\" , \"label: Titel einer literarischen Arbeit (German)\" , \"label: 标题的文学作品（中文）\" , \"label: titolo di opera letteraria (Italian)\" , \"label: título de uma obra literária (Portuguese)\" , \"label: tittel på en litterær værk (Danish)\" , \"label: titel van een literaire werk (Dutch)\" , \"label: Tytul dzieła literackiego (Polish)\" , \"label: Título de una obra literária (Spanish)\" , \"label: 标题的文学作品（俄语）\" , \"label: 标題的作品文學（闽南语）\" , \"label: 标题的文学作品（日语）\" , \"label: 标题的文学作品（韩语）\" , \"label: 标题的文学作品（"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q115945 . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?child ?parent WHERE { ?parent wdt:P127 ?child . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{ \"query\": [ \"SELECT ?child ?parent WHERE { wd:Q467752 wdt:P355 ?subsidiary . ?subsidiary wdt:P40 ?child . ?subsidiary wdt:P127 ?parent .\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\n  \"query\": [\n    \"?x ?y\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . ?actor wdt:P1640 wd:Q21798 }\" ] }\n    \t\t    \t\t\t\t    \t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P737 ?y }\"\n  ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?person wdt:P10478 ?work . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:2298 ?p ?x . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q1142056 . ?film wdt:P178 ?costumeDesigner . ?person wdt:P106 wd:Q169972 . ?person wdt:P178 ?film . ?sibling wdt:P3373 ?person . ?sibling wdt:P106 wd:Q169972 . }\" ] }\n   \t\t   \t\t\t\t\t    \t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{ \"query\": [ \"SELECT ?costumeDesigner {\", \"  wd:Q3083718 wdt:P3373 ?sibling .\", \"  ?sibling wdt:P27 wd:Q29 .\", \"  ?sibling wdt:P2515 ?costumeDesigner .\", \"}\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P22 wd:Q1067489 . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P26 wd:Q96203723 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{ \"query\": [\n    \"?x kg:sexOrGender kg:8240\",\n    \"?x kg:spouse kg:1240\",\n    \"?x kg:countryOfCitizenship kg:9200\",\n    \"?x kg:occupation kg:5795\"\n  ]\n}\n                    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?s p:hasProducerOrEditor ?p . VALUES (?s) {(wd:Q123456)} }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P162 wd:Q20729551 . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{ \"query\": [ \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q2095876 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P26 wd:Q296446 . }\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t\t "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{ \"query\": [ \"What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry?\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P286 ?editor . ?work wdt:P50 ?author }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P58 ?a .\", \"=>\" ,\n      \"?x wdt:P1040 ?b .\",\n      \"?a wdt:P1687239 .\",\n      \"?b wdt:P562108 .\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"{ ?x kg:screenwriter ?y } union { ?x kg:film_editor ?z }\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P100 wd:Q1030686 . ?work wdt:P100 wd:Q1030686 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?x wdt:P1040 ?y .\",\n    \"?x wdt:P58 ?z .\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n               \t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . ?p wdt:P1628 wd:Q40973 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P162 wd:Q20729551 . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{ \"query\": [ \"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1431 wd:Q365090 . ?x wdt:P1431 wd:Q95125 . ?x wdt:P1431 wd:Q43994 }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{ \"query\": [ \"What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x ?p ?v }\"\n  ]\n}\n                    "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"?x wdt:P3373 wd:Q3340 .\",\n    \"?x wdt:P26 ?y .\",\n    \"{?y wdt:P21 wd:Q6581072 .}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{ \"query\": [\n  \"?x kg:5138 ?y\" , \"=>\", \" ?y kg:5268 ?z\" , \" ?z kg:3488 ?w\" , \" ?w kg:5835 ?v\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?productionCredits WHERE { <http://www.wikidata.org/entity/Q263580> wdt:P1628 ?productionCredits . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q554223 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:starring_in/film ?film . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"?x wdt:P106 ?y .\"\n  ]\n}\n                \t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \">// instance of human (assuming editor and star are humans)\"\n     \t\t\t,\"?x wdt:P1406 ?y .\" , \">// has occupation or role\"\n     \t\t\t,\"FILTER ( ?y = wd:Q28796 ) .\" ,\"\\n\" ,\n      \"?x wdt:P57 ?z .\" ,\n      \"FILTER ( ?z = wd:Q3380154 ) .\",\n      \"?x wdt:P161 ?a .\" ,\n      \"FILTER ( ?a = wd:Q28796 ) .\"\n   \t,\"}\"\n  ]\n}\n   \t\t\t\t\t   \t\t\t\t\t   \t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"?x wdt:P31 wd:Q5 .\",\n    \"?x wdt:P161 ?film .\",\n    \"?film wdt:P17 ?title .\",\n    \"{ ?x wdt:P1040 ?film } UNION { ?x wdt:P161 ?film }\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{ \"query\": [ \"Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"FILTER (LANG(?x) = 'en') .\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?a . ?x wdt:P1040 ?b . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q258764 ; wdt:P170 ?director . VALUES (?director) {(wd:Q190 , wd:Q153058, wd:Q1001584, wd:Q1637285)} }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{ \"query\": [ \"Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t   "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:directedOrWritten ?m .\",\n      \"?m rdfs:label \\\"Four Rooms\\\" .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?director . ?x wdt:P162 ?producer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{ \"query\": [ \"Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571. ?resource wdt:P1628 ?executiveProducer . ?executiveProducer rdfs:label \\\"George Lucas\\\" . ?resource wdt:P1628 ?producer . ?producer rdfs:label \\\"George Lucas\\\" . ?resource wdt:P1628 ?editor . ?editor rdfs:label \\\"George Lucas\\\" . }\" ] }\n                   \t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P58 wd:Q38222 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{ \"query\": [ \"What was written , executive produced , produced , and edited by George Lucas\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?work1 wdt:P31 wd:Q5406428 }\",\n    \"{ ?work1 wdt:P179 wd:Q169784 }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"?x wdt:P58 ?y .\",\n    \"?x wdt:P1040 ?z .\",\n    \"?x wdt:P108 ?a .\",\n    \"?a purl:object_has_property wdt:P361 .\",\n    \"?a wdt:P361 wd:Q909176 .\"\n  ]\n}\n    \t\t   \t\t\t\t\t    \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P3880 ?y .\", \"=> This line is incorrect, need to fix it.\"\n      ,\n      \"FILTER (regex(str(?y), \\\"^Bob Yari$\\\")) .\",\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1431 wd:Q81520 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{ \"query\": [ \"Was Laws of Attraction executive produced and produced by Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha?\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P1628 wd:Q3095747 . }\" ] }\n   \t\t\t\t\t\t\t\t\t \t\t\t \t\t\t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{ \"query\": [ \"Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5427089 . ?work wdt:P50 wd:Jørgen Leth . ?work wdt:P50 wd:Jens Jørgen Thorsen . ?work wdt:P50 wd:Ole John }\" ] }\n                    "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P57 wd:Q562108 . ?work wdt:P58 wd:Q562108 . ?work wdt:P1040 wd:Q1687239 . ?work wdt:P1040 wd:Q35979475 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:directed_by ?d .\",\n      \"?x kg:edited_by ?e .\",\n      \"?x kg:written_by ?w .\",\n      \"{\",\n        \"?d kg:person_id kg:6545 .\",\n        \"?e kg:person_id kg:7913 .\",\n        \"?e kg:person_id kg:8202 .\",\n        \"?w kg:person_id kg:9267 .\",\n        \"?w kg:person_id kg:6296 .\"\n      ,\n        \"}\"\n    ,\n      \"}\"\n    ,\n    \"]\"\n  ]\n}\n                    "}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:Ole_John . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 wd:Q35979475 .\", \"=> Ole John directed something\"\n      ,\n      \"?x wdt:P57 wd:Q1687239 .\", \"=> Jens Jørgen Thorsen directed something\"\n      ,\n      \"?x wdt:P57 wd:Q562108 .\", \"=> Jørgen Leth directed something\"\n      ,\n      \"?x wdt:P58 wd:Q35979475 .\", \"=> Ole John wrote something\"\n      ,\n      \"?x wdt:P58 wd:Q1687239 .\", \"=> Jens Jørgen Thorsen wrote something\"\n      ,\n      \"?x wdt:P58 wd:Q562108 .\", \"=> Jørgen Leth wrote something\"\n      ,\n      \"?x wdt:P1040 wd:Q35979475 .\", \"=> Ole John edited something\"\n      ,\n      \"?x wdt:P1040 wd:Q1687239 .\", \"=> Jens Jørgen Thorsen edited something\"\n      ,\n      \"?x wdt:P1040 wd:Q562108 .\", \"=> Jørgen Leth edited something\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P31'; ?> <?php echo 'wd:Q5'; ?><br/> <!-- P31 is instance of, Q5 is human--><br/><?php echo 'person wdt:P31 wd:Q5 .'; ?><br/> <!-- P31 is instance of, Q5 is human--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P106 wd:Q3282637 }\" ] }\n                   \t"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?cinematographer ?director\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q25870.\",\n      \"?film wdt:P166 ?actor.\",\n      \"?film wdt:P164 ?cinematographer.\",\n      \"?film wdt:P162 ?director.\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"Was a actor a cinematographer and director of Six Men Getting sick , Inland Empire , Darkened Room , and Rabbits\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450789 ; wdt:P57 wd:Q21695 ; wdt:P16237 wd:Q21695 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?person wdt:P1628 ?work . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P57 wd:Q35979475 .\", \"=> Ole John directed the work\"\n    ]\n} "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{ \"query\": [ \"What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?director WHERE { ?movie wdt:P31 wd:Q25870 . ?movie wdt:P57 ?director . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t \t\t\t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{ \"query\": [ \"Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11422705 . ?film wdt:P585 [ a wd:Q1697884 ; wdt:P170 dbr:en ] . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q567519 . }\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{ \"query\": [\n    \"Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey\"\n  ]\n}\n    \t\t\t\t\t\t \t\t\t\t\t\t \t "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q54270896 .\", \"><!-- P31 is instance of, Q54270896 is work (in general) --><!-- So this line selects all works. But we need to filter by the creators. So next lines will add constraints on ?work's creators. --><!-- Now, for each creator, we'll have a triple that connects them to the work. Since there are multiple creators, we can use multiple OR conditions in the WHERE clause. --><!-- First, let's get all the identifiers for the people: Thomas Schnauz is wd:Q21945867, Peter Gould is wd:Q3020790, George Mastras is wd:Q1574744, Sam Catlin is wd:Q21945868, and Vince Gilligan is wd:Q1574745. --><!-- Now, for each person, we'll write a triple that connects them to the work as either director or writer. For directors, it's P1055 (directed by), and for writers, it's P1496 (scriptwriter). But since some people might have both roles, we need to use OR conditions. --><!-- So, for each person, we'll write a condition that says: the work was directed or written by them. We can do this with multiple ORs in the WHERE clause. --><!-- Let's structure it as follows: For each creator, add a line like ?work wdt:P1055 ?creator . OR ?work wdt:P1496 ?creator . But since we have 5 creators, and for each we need two conditions (directed or written), the WHERE clause will get lengthy. Alternatively, we can use SERVICE clauses to combine these conditions more cleanly. --><!-- Another approach is to create a list of all possible directed by or written by triples for each creator. So, for each creator, we'll have something like: ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . And similarly for the others. --><!-- This might be a bit repetitive, but it's straightforward. Let's proceed with that. --><!-- So, putting it all together, the WHERE clause will have multiple OR conditions for each creator and their roles. --><!-- Now, let's write out the full query. We'll start with SELECT ?work, then in the WHERE clause, we'll have ?work wdt:P31 wd:Q54270896 . followed by all the directed by or written by conditions for each creator. --><!-- Let me structure it step by step. First line: SELECT ?work. Second line: WHERE { ... }. Inside the WHERE clause, first condition is that ?work is a work (P31 Q54270896). Then, we'll add OR conditions for each creator and their roles. --><!-- For Thomas Schnauz: directed by or written by. So, ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . Similarly for the others. --><!-- This will result in a long WHERE clause with multiple ORs. It's not the most efficient, but it works. Alternatively, we could use a more concise syntax by grouping the conditions, but I think this is clear enough. --><!-- So, the final query should look like: SELECT ?work WHERE { ?work wdt:P31 wd:Q54270896 . ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . OR ... and so on for each creator. --><!-- Wait, but in SPARQL, the OR is part of the same clause, so we need to structure it correctly. Each condition should be separated by a semicolon or properly nested. Hmm, perhaps using multiple filters with AND and OR might be better. Alternatively, using a more efficient method like grouping the creators into a list and checking against that. But for simplicity, let's proceed as initially thought. --><!-- So, the full query will have all these conditions connected by ORs within the WHERE clause. It might not be the most elegant, but it should work to return all works directed or written by any of the specified creators. --><!-- Now, I'll write out the actual SPARQL query with all these conditions. --><!-- First, SELECT ?"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P57 wd:Q554223 .\", \"=> George Mastras directed something\"\n    , \"  ?x wdt:P58 wd:Q554223 .\", \"=> George Mastras wrote something\"\n    , \"  ?x wdt:P57 wd:Q7407299 .\", \"=> Sam Catlin directed something\"\n    , \"  ?x wdt:P58 wd:Q7407299 .\", \"=> Sam Catlin wrote something\"\n    , \"  ?x wdt:P57 wd:Q4500 .\", \"=> Vince Gilligan directed something\"\n    , \"  ?x wdt:P58 wd:Q4500 .\", \"=> Vince Gilligan wrote something\"\n    , \"  ?x wdt:P57 wd:Q7174311 .\", \"=> Peter Gould directed something\"\n    , \"  ?x wdt:P58 wd:Q7174311 .\", \"=> Peter Gould wrote something\"\n    , \"  ?x wdt:P57 wd:Q15042700 .\", \"=> Thomas Schnauz directed something\"\n    , \"  ?x wdt:P58 wd:Q15042700 .\", \"=> Thomas Schnauz wrote something\"\n    , \"}\"] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?directed ?written ?edited {\", \"  SERVICE <https://query.wikidata.org/sparql> {\", \"    SELECT ?directed ?written ?edited {\", \"      wd:Q1084 wdt:P31 wd:Q5 .\", \"      ?directed p-director-of ?statement_director .\", \"      ?statement_director ps-director-of ?director .\", \"      ?statement_director pq-director-of ?year .\", \"      ?written p-written-by ?statement_written .\", \"      ?statement_written ps-written-by ?writer .\", \"      ?statement_written pq-written-by ?date .\", \"      ?edited p-edited-by ?statement_edit .\", \"      ?statement_edit ps-edited-by ?editor .\", \"      ?statement_edit pq-edited-by ?info .\", \"    }\", \"  }\", \"}\", \"SERVICE <https://query.wikidata.org/sparql> {\", \"  SELECT ?directed ?written ?edited {\", \"    wd:Q1084 wdt:P31 wd:Q5 .\", \"    ?directed p-director-of ?statement_director .\", \"    ?statement_director ps-director-of ?director .\", \"    ?statement_director pq-director-of ?year .\", \"    ?written p-written-by ?statement_written .\", \"    ?statement_written ps-written-by ?writer .\", \"    ?statement_written pq-written-by ?date .\", \"    ?edited p-edited-by ?statement_edit .\", \"    ?statement_edit ps-edited-by ?editor .\", \"    ?statement_edit pq-edited-by ?info .\", \"  }\", \"}\", \"}\"] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P57 ?director.\",\n      \"?work wdt:P58 ?screenwriter.\",\n      \"?work wdt:P1040 ?editor.\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{ \"query\": [ \"What was directed by , written by , and edited by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?film WHERE {\",\n        \"?film wdt:P31 wd:Q11420765.\",\n        \"FILTER (\",\n          \"(?film wdt:P166 ?editor)\",\n          \"&&\",\n          \"(?film wdt:P166 ?writer)\"\n        ,\n        \")\",\n        \"{\",\n          \"SELECT ?editor, ?writer WHERE {\",\n            \"?film wdt:P166 ?editor.\",\n            \"?film wdt:P166 ?writer.\"\n          ,\n          \"} LIMIT 1\"\n        ,\"}\"\n      ,\n      \"}\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1431 ?y .\", \"=> This line seems to be about executive producer\"\n      ,\n      \"?x wdt:P58 ?z .\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                 \t\t\t"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?editor ?director\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q5726489; # instance of work\",\n      \"wdt:P100 wd:Ole_John_(disambiguation).\", \"w d t : P 100 wd : Jens _ Jørgen _ Thorsen .\",\n      \"w d t : P 100 wd : Jørgen _ Leth .\"\n    ,\n      \"?work wdt:P57 ?editor; # editor\",\n      \"?work wdt:P57 ?director.\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"  ?x wdt:P57 ?director .\"\n      ,\n      \"  ?x wdt:P1040 ?editor .\"\n      ,\n      \"  ?x wdt:P58 ?screenwriter .\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{ \"query\": [ \"Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?writer ?cinematographer\",\n            \"WHERE {\",\n                \"?film1 wdt:P31 wd:Q11422765.\",\n                \"?film1 wdt:P1660 ?writer.\",\n                \"?film1 wdt:P1661 ?cinematographer.\",\n                \"?film1 wdt:P18 ?image.\",\n                \"}\",\n                \"UNION\",\n                \"{\",\n                    \"SELECT ?writer ?cinematographer\",\n                    \"WHERE {\",\n                    \"?film2 wdt:P31 wd:Q11422765.\",\n                    \"?film2 wdt:P1660 ?writer.\",\n                    \"?film2 wdt:P1661 ?cinematographer.\",\n                    \"?film2 wdt:P18 ?image.\",\n                    \"}\",\n                \"UNION\",\n                \"{\",\n                    \"SELECT ?writer ?cinematographer\",\n                    \"WHERE {\",\n                    \"?film3 wdt:P31 wd:Q11422765.\",\n                    \"?film3 wdt:P1660 ?writer.\",\n                    \"?film3 wdt:P1661 ?cinematographer.\",\n                    \"?film3 wdt:P18 ?image.\",\n                    \"}\",\n                \"]\",\n                \"}\"\n            ]\n    }\n    \t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P58 wd:Q165713. }\" ] }\n                    "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{ \"query\": [ \"SPARQL query\" ] }\n        \t\t\t\t\t   \t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n     \t\t\t,\n      \"?x wdt:P166 wd:Q245098 .\", \">// P166 is occupation, Q245098 is film producer\"\n     \t\t,\n      \"?x wdt:P166 wd:Q33798 .\", \">// P166 is occupation, Q33798 is editor\"\n     \t,\n      \"?x wdt:P166 wd:Q25048 .\", \">// P166 is occupation, Q245098 is film producer, but wait, no. Wait, I think I made a mistake here. Let me check the correct WD for director and writer.\"\n     \t,\n      \"?x wdt:P166 wd:Q33798 .\", \">// P166 is occupation, Q33798 is editor\"\n     \t,\n      \"?x wdt:P166 wd:Q25048 .\", \">// P166 is occupation, Q25048 is director\"\n     \t,\n      \"?x wdt:P166 wd:Q1043799 .\" ,\"\\n\" ,\"\\t\\t// P166 is occupation, Q1043799 is writer\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1040 ?a . ?x wdtp:P1431 ?b . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{ \"query\": [ \"Which film producer was a editor , executive producer , director , and writer of Uzark and Clouds of May\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t\t\t"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work ?author ?director ?executiveProducer WHERE { ?work wdt:P31 wd:Q258769 ; wdt:P50 wd:Jim_Abrams , wd:Jerry_Zucker , wd:David_Zucker . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?author ?executiveProducer ?director\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q206589; # work is a film\",\n      \"wdt:P140 ?author; # author is the main author (screenplay)\"\n      ,\n      \"wdt:P162 ?executiveProducer; # executive producer\"\n      ,\n      \"wdt:P166 ?director. # director\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?work rdfs:label ?title . }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1431 ?w .\" ] } "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                \t\t\t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424597.\",\n      \"FILTER (EXISTS{ ?film wdt:P58 ?director })\",\n      \"VALUES (?director) {(wd:Q16094, wd:Q16095, wd:Q16096, wd:Q16097, wd:Q11283)}\"\n    ,\n      \"?film wdt:P1628 ?writer.\"\n    , \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P57 wd:Q982339 . ?film wdt:P57 wd:Q1033656 . ?film wdt:P57 wd:Q11424 . ?film wdt:P57 wd:Q1365463 . ?film wdt:P57 wd:Q7546 . }\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P106 wd:Q285584 . ?composer wdt:P161 wd:Q335759 . ?composer wdt:P161 wd:Q335759 . }\" ] }\n   \t\t\t\t\t   \t\t\t  \t\t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P86 wd:Q550196 . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{ \"query\": [ \"SPARQL query\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?composer ?editor_star\",\n                \"WHERE {\",\n                    \"?composer wdt:P348 [wdt:P1628 wd:Q105] .\", \"=> This line is incorrect, need to fix it.\"\n                    ,\n                    \"?editor_star wdt:P1628 wd:Q105 .\",\n                    \"}\"\n        ,\n        \"]\"\n    ]\n}\n                    "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"?composer ?property ?film.\"\n  ]\n}\n              \t\t\t\t\t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{ \"query\": [ \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t "}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424598.\",\n      \"{\",\n        \"?film wdt:P1623 ?director.\",\n        \"?film wdt:P166 ?screenplay.\",\n        \"?film wdt:P1047 ?editor.\"\n      ,\n      \"}\"\n    ,\n      \"FILTER (\",\n        \"(?director = wd:Q5898823) ||\",\n        \"(?screenplay = wd:Q5898823) ||\",\n        \"(?editor = wd:Q5898823)\"\n      ,\")\"\n    ,\n      \"}\"\n    ,\n      \"ORDER BY ?film\"\n    ,\n      \"LIMIT 10\"\n    ,\n      \"}\"\n  ]\n}\n             \t   \t  "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P57 wd:Q4023328 . ?work wdt:P58 wd:Q5836844 . ?work wdt:P1040 wd:Q5658534 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:5280 ?y . ?x kg:5040 ?z . ?x kg:2352 ?w . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q24518.\",\n      \"{\",\n        \"?film wdt:P1628 wd:Q1079285.\",\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079286.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079287.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079288.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079289.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q107928A.\" ,\n        \"}\"\n    ,\n      \"}\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t       "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                \t\t\t\t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"?x wdt:P1086 ?y .\", \"=> has occupation\"\n      ,\n      \"?y wdt:P279* wd:Q1421035 .\", \"=> film producer executive\"\n      ,\n      \"?x wdt:P57 wd:Q212260 .\", \"=> produced Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212261 .\", \"=> produced The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212262 .\", \"=> produced The Waiting Room\"\n      ,\n      \"?x wdt:P57 wd:Q212263 .\", \"=> wrote Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212264 .\", \"=> wrote The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212265 .\", \"=> wrote The Waiting Room\"\n      ,\n      \"?x wdt:P57 wd:Q212266 .\", \"=> edited Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212267 .\", \"=> edited The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212268 .\", \"=> edited The Waiting Room\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{ \"query\": [ \"Did a film producer executive produce, edit, and write Fate, The Confession, and The Waiting Room?\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{ \"query\": [ \"Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P58 wd:Q312258 .\", \"=> screenwriter of Jacques Demy\"\n        ,\n        \"?x wdt:P1040 wd:Q312258 .\" ,\"=> film editor of Jacques Demy\"\n        ,\n        \"wd:Q312258 wdt:P26 ?y .\",\n        \"wd:Q312258 wdt:P737 ?z .\",\n        \"?x wdt:P737 wd:Q249383 .\", \"=> The Gleaners and I\"\n        ,\n        \"?x wdt:P737 wd:Q2298257 .\", \"=> Vagabond\"\n        ,\n        \"?x wdt:P737 wd:Q63993096 .\" ,\"=> Varda by Agnès\"\n      ,\n      \"}\"\n    ,\n    \"]\",\n    \"{\",\n      \"includeFacets false\",\n      \"format: application/sparql-results+json\",\n      \"method: GET\"\n    ,\n    \"]\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  kg:2935 kg:5049 ?x .\", \"=> This line seems to be about the spouse of Jacques Demy.\",\n    \"  ?x kg:9940 kg:1497 .\", \"=> This line is about the screenwriter of Vagabond.\",\n    \"  ?x kg:7127 kg:5738 .\", \"=> This line is about the film editor of The Gleaners and I.\",\n    \"  ?x kg:9301 kg:9335 .\" ]} "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q283574 . # P106 is occupation, Q283574 is writer ?x wdt:P1411 wd:Q283574 . # P1411 is star of ?x wdt:P162 wd:Q283574 . # P162 is director ?x wdt:P160 wd:Q283574 . # P160 is composer ?x wdt:P51 wdt:Q291833 . # P51 is director of, Q291833 is The Floorwalker }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{ \"query\": [ \"Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q25398.\",\n      \"?person wdt:P161 wd:Q47066.\"\n    ]}\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1040 ?y . ?x wdt:P1431 ?z }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{\n  \"query\": [\n    \"{ ?x kg:isExecutiveProducer ?y }\"\n  ]\n}\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x1\",\n      \"WHERE {\",\n        \"?x0 wdt:P3689 ?x1.\",\n        \"FILTER (\",\n          \"(?x1) = 'The Black Ghiandola' ||\",\n          \"(?x1) = 'Twin Peaks' ||\",\n          \"(?x1) = 'Lumière and Company' ||\",\n          \"(?x1) = 'Dune' ||\",\n          \"(?x1) = 'Inland Empire' ||\",\n          \"(?x1) = 'Boat'\"\n        ,\n        \")}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t \t\t\t \t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1040 ?y . ?x wdt:P344 ?z }\" ] }\n    \t\t   \t\t\t\t\t    \t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{ \"query\": [ \"What cinematographer and editor of Six Men Getting Sicking did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star\" ] }\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 (Writer) . ?person wdt:P106 wd:Q1743 (Editor) . ?person wdt:P106 wd:Q1288 (Director) . ?person wdt:P31 wd:Q5 (Human). SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Writer'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Editor'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Director'@en } }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P57 ?y .\", \">// P57 is director, so ?x is the director, ?y is the film\"\n        ,\n        \"?x wdt:P58 ?z .\", \">// P58 is screenwriter, so ?x is also a screenwriter of ?z\"\n        ,\n        \"?x wdt:P1040 ?a .\", \">// P1040 is film editor, so ?x is an editor of ?a\"\n        ,\n        \"wd:Q312258 wdt:P737 ?b .\", \">// Q312258 is Jacques Demy; he was influenced by ?b\"\n        ,\n        \"?x wdt:P26 ?c .\", \">// P26 is spouse, so ?x's spouse is ?c\"\n        ,\n        \"wd:Q2493824 wdt:P737 ?d .\", \">// Q2493824 is The Gleaners and I; it was influenced by ?d\"\n        ,\n        \"wd:Q2298257 wdt:P737 ?e .\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\""}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{ \"query\": [\n    \"?x kg:6839 ?y\" ,\n    \"?y kg:4212 kg:8516\"\n]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q470943 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"{prefixes}\",\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?e .\", \"=> film editor property\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422590.\",\n      \"{\",\n        \"?film wdt:P1628 wd:Q1707437.\", \"><!-- edit, write, direct? Or is it P1628 for editor, and others? Need to check. Maybe need multiple properties. Wait, the question is whether a film editor edited, wrote, and directed those films. So perhaps we're looking for someone who has all three roles: editor, writer, director. But the original query is about the films themselves being edited, written, and directed by a film editor? Or is it that the person who did editing also wrote and directed them? Hmm, need to clarify. Maybe the question is whether a single film editor was responsible for editing, writing, and directing those four films: Pay Day, Modern Times, The Floorwalker, and Work. So perhaps we're looking for someone (a person) who has all three roles across these films. But the query is about the films themselves, so maybe it's asking which of these films were edited by a film editor who also wrote and directed them. Alternatively, perhaps the question is whether each of those four films was edited, written, and directed by someone (maybe the same person). This is a bit confusing. Maybe I should model it as: find all films where for that film, there exists an editor, writer, and director, and see if they are the same person across all four films. But perhaps the question is simpler: whether each of those four films was edited by someone who also wrote and directed them. Or maybe it's asking if a single film editor (i.e., one person) both edited, wrote, and directed all four films. So to model that, we need to find a person who has the properties of editing, writing, and directing each of those four films. But in SPARQL, how do we express that? We'd need to have for each film, the editor is the same as the writer and director, and all four films share this one person. Alternatively, perhaps it's asking whether any of these four films were edited by someone who also wrote or directed them, but I think the original intent is about a single person doing all three roles across all four films. So the query would involve finding a person (Q) such that Q has P1628 (editor), and for each film in [Pay Day, Modern Times, The Floorwalker, Work], Q also has P1628 (editor), P1628 is editor, but wait, no—P1628 is editor. So perhaps the properties are: editor (P1628), writer (P1629), director (P1630). Wait, checking Wikidata properties: P1628 is indeed editor, P1629 is scriptwriter, and P1630 is director. So for each film in the list, we need to check if there's a person who has all three roles: editor, writer, director. But perhaps it's that the same person did all three roles for each of these four films. Alternatively, maybe the question is whether any of these films were edited by someone who also wrote or directed them, but I think it's more likely that it's asking if a single film editor (i.e., one person) both edited, wrote, and directed all four films. So to model this, we need to find a person Q such that for each film F in {Pay Day, Modern Times, The Floorwalker, Work}, F has Q as editor (P1628), writer (P1629), and director (P1630). But how do we express that in SPARQL? We can use SERVICE to query each film individually. So the query would select a person where for each of the four films, they have all three roles. Alternatively, perhaps it's easier to find films where their editor is also their writer and director, but across multiple films. But the question seems to be about whether such a person exists who did all three roles for all four films. So the SPARQL query would involve checking each film and seeing if they share the same editor, writer, and director. But perhaps it's better to structure it as finding a person Q where for each of the four films F, F has Q as editor (P1628), writer (P1629), and director (P1630). So in SPARQL, we can use multiple SERVICE blocks or use OPTIONAL with FILTERs. But since it's four films, perhaps using four separate conditions. Alternatively, we can use a filter that checks for each film. Let me think about the structure: SELECT ?person WHERE { ?person wdt:P31 wd:Q5 ."}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \">// P57 is director, so this line finds directors of the films listed in the question's movies (Pay Day, Modern Times, The Floorwalker, Work).\"\n      ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{ \"query\": [ \"Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x1\",\n      \"WHERE {\",\n        \"?x1 wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/> <!-- x1 is the person--> <br/> <!-- Now for The Waiting Room --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is The Waiting Room--><br/> <!-- x1 wrote the screenplay for The Waiting Room--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Waiting Room--><br/> <!-- x1 was an executive producer for The Waiting Room--> <br/> <!-- Now for Fate --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is Fate--><br/> <!-- x1 wrote the screenplay for Fate--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is Fate--><br/> <!-- x1 was an executive producer for Fate--> <br/> <!-- Now for The Confession --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424597.\",\n      \"FILTER (EXISTS { ?film wdt:P57 ?director . ?director wdt:P1668 wd:Q202063 })\",\n      \"FILTER (EXISTS { ?film wdt:P140 ?screenplay . ?screenplay wdt:P1668 wd:Q202063 })\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P140 ?screenplay.\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P58 ?screenwriter.\",\n      \"FILTER (\",\n        \"(?director = wd:Q982339 || ?director = wd:Q116760 || ?director = wd:Q11424 || ?director = wd:Q1033656 || ?director = wd:Q7546)\",\n        \"&&\",\n        \"(?screenwriter = wd:Q982339 || ?screenwriter = wd:Q116760 || ?screenwriter = wd:Q11424 || ?screenwriter = wd:Q1033656 || ?screenwriter = wd:Q7546)\"\n      ,\n      \")}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{ \"query\": [ \"Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"?x wdt:P106 wd:Q24507 .\", \"=> occupation: film editor\"\n      ,\n      \"?x wdt:P108 wd:Q19328 .\", \"=> occupation: cinematographer\"\n      ,\n      \"?x wdt:P106 wd:Q1660294 .\", \"=> occupation: writer\"\n      ,\n      \"?x wdt:P1545 wd:Q272368 .\", \"=> work: The Waiting Room\"\n      ,\n      \"?x wdt:P1545 wd:Q571643 .\", \"=> work: Destiny The Confession\"\n      ,\n      \"?x wdt:P2860 wd:Q599 .\", \"=> position: executive producer\"\n      ,\n      \"?x wdt:P2860 wd:Q19328 .\", \"=> position: cinematographer\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{ \"query\": [ \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?editor wdt:P106 wd:Q25984 . ?editor wdt:P19 wd:Q33575 . ?editor wdt:P51 wde:Werk . ?work wdt:P141 wd:Q25984 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"?film wdt:P58 ?screenwriter.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?director WHERE { ?film wdt:P31 wd:Q25876990 . ?film wdt:P178 ?director . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1040 ?w . ?y wdt:P21 wd:Q6581072 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [ \"What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x a schema:Person . }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"?x wdt:P57 ?film.\"\n  ]\n}\n                    "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{ \"query\": [ \"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ] }\n    \t\t\t\t\t\t \t\t\t\t\t\t \t "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director a wdt:P106 .\",\n    \"?director wdt:P57 wd:Q283964 .\", \">// Assuming Q283964 is the director's ID for Police Story 2, etc.\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{ \"query\": [\n    \"{prefixes}\"\n] }\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{ \"query\": [\n    \"?x a kg:director .\",\n    \"?x a kg:executiveProducer .\",\n    \"?x a kg:screenwriter .\",\n    \"?x a kg:director .\",\n    \"?x a kg:screenwriter .\"\n  ]\n}\n                \t\t\t\t"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person ?organization WHERE { ?person wdt:P300 wd:Q2569847 . ?person wdt:P108 wd:Q45207 . ?person wdt:P108 wd:Q1695928 . ?person wdt:P108 wd:Q571539 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P108 ?employer.\",\n        \"?x wdt:P112 ?founder.\"\n      ,\n        \"FILTER (\",\n          \"(?employer = wd:Q37033) ||\",\n          \"(?employer = wd:Q42944) ||\",\n          \"(?employer = wd:Q7095994) ||\",\n          \"(?employer = wd:Q7204713) ||\",\n          \"(?employer = wd:Q7432436)\"\n        ,\n        \")}\"\n    ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{\n    \"query\": [\n        \"?x\"\n    ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422 .\", \">// P31 is instance of, Q11422 is film (movie) in English\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P57 ?director .\", \">// P57 is director, will get the director(s)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P1628 ?screenplay .\", \">// P1628 is screenwriter, so this gets the writers\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P1493 ?editor .\", \">// P1493 is film editor, so this gets the editors\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P7056 ?producer .\", \">// P7056 is film producer, so this gets the producers\"\n     \t\t\t\t\t      \t,\n      \"  FILTER (\",\n        \"    EXISTS { ?director wdt:P21 wd:Q34987 }\" ,\"\\\\\" ,\n        \"    AND EXISTS { ?screenplay wdt:P21 wd:Q34987 }\", \">// Q34987 is Jens Jørgen Thorsen\"\n        ,\n        \"    AND EXISTS { ?editor wdt:P21 wd:Q34987 }\",\n        \"    AND EXISTS { ?producer wdt:P21 wd:Q34987 }\",\n        \"  )\",\n      \")\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P57 ?director . ?film wdt:P1040 ?editor . ?film wdt:P58 ?screenwriter . ?film wdt:P162 ?producer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?person ?work1 ?work2 WHERE {\",\n                \"?person p:directed/films ?work1 .\",\n                \"?person p:directed/films ?work2 .\",\n                \"?work1 wdt:P361 ?series .\",\n                \"?series rdfs:label \\\"From Dusk till Dawn: The Series\\\" .\",\n                \"FILTER (LANG(?series) = 'en')\"\n            ,\n                \"?work2 wdt:P1406 ?genre .\",\n                \"?genre rdfs:label \\\"Action\\\" .\",\n                \"FILTER (LANG(?genre) = 'en')\"\n            ,\n                \"}\"\n        ,\n        \"}\"\n    ]\n}\n                    "}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1040 ?a . ?x wdt:P161 ?b . ?x wdt:P344 ?c . ?x wdt:P1431 ?d . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{ \"query\": [ \"SPARQL query\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q104753 .\", \">// P1628 is 'educated at', Q104753 is FAMU Film School, but I think it's incorrect. Maybe should be a different property for director involvement in a work.\"\n      ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"...\" ] }\n        \t\t\t\t\t\t   \t\t\t"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{ \"query\": [ \"Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?person wdt:P106 wd:Q283594 . # P106 is occupation, Q283594 is cinematographer ?person wdt:P161 wd:Q3075855 . # P161 is country, Q3075855 is American ?work wdt:P57 wd:Q283594 . # P57 is cinematography, Q283594 is cinematographer ?person wdt:P51 ?work . # P51 is work }\" ] }\n   \t\t\t\t\t\t \t\t\t\t\t \t  \t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1040 ?a . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{ \"query\": [ \"Did Night of the Living Dead's American cinematographer edit, direct, and write Martin, Season of the Witch, and The Crazies?\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n        \t\t\t   \t\t\t\t\t\t,\n        \"?x wdt:P106 wd:Q28337 .\", \">// P106 is occupation, Q28337 is writer\"\n       \t\t\t\t\t,\n        \"?x wdt:P106 wd:Q154948 .\", \">// P106 is occupation, Q154948 is cinematographer\"\n       \t\t\t\t\t,\n        \"?x wdt:P106 wd:Q2537 .\", \">// P106 is occupation, Q2537 is director\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q21248 .\", \">// P1496 is wrote screenplay for, Q21248 is Look at Life (film)\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q57089 .\", \">// P1496 is wrote screenplays for, Q57089 is Anyone Lived in a Pretty How Town\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q23433 .\", \">// P1496 is wrote screenplays for, Q23433 is Filmmaker (film)\"\n       \t\t\t\t\t,\n        \"?x wdt:P286 wd:Q270589 .\", \">// P286 is executive producer of, Q270589 is Star Wars: Episode IV – A New Hope\"\n   \t \t\t\t\t\t       ,\n        \"}\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"...\" ] }\n        \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{ \"query\": [ \"What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11420.\",\n      \"{\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q1004585.\"\n      ,\n      \"} UNION {\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q23544.\"\n      ,\n      \"} UNION {\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?producer.\",\n        \"?producer wdt:P1698 wd:Q1004585.\",\n        \"?producer wdt:P1698 wd:Q23544.\",\n        \"?producer wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?writer.\",\n        \"?writer wdt:P1698 wd:Q1004585.\",\n        \"?writer wdt:P1698 wd:Q23544.\",\n        \"?writer wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?editor.\",\n        \"?editor wdt:P1698 wd:Q1004585.\",\n        \"?editor wdt:P1698 wd:Q23544.\",\n        \"?editor wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P57 wd:Q1687239 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P58 wd:Q562108 . ?film wdt:P1040 wd:Q562108 . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:6845 ?d .\", \">// director property is kg:6845, value is ?d (director's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?x kg:6893 ?f .\", \">// film property is kg:6893, value is ?f (film's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?x kg:5191 ?e .\", \">// editor property is kg:6845, value is ?e (editor's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?x kg:1364 ?w .\", \">// screenwriter property is kg:1364, value is ?w (screenwriter's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?x kg:4053 ?p .\", \">// producer property is kg:4053, value is ?p (producer's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?d a kg:2033 .\", \">// director is an instance of person (?d is Jens Jørgen Thorsen or Jørgen Leth)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?f a kg:2033 .\", \">// film is an instance of film (?f is the film's name)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?e a kg:2033 .\", \">// editor is an instance of person (?e is Ole John)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?w a kg:2033 .\", \">// screenwriter is an instance of person (?w is Jens Jørgen Thorsen or Jørgen Leth)\"\n      \t\t\t\t\t\t\t\t\t\t  ,\n      \"?p a kg:2033 .\" ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q1142056.\", \">// instance of film, TV movie, or video\"\n      \t\t\t\t   \t\t\t\t\t\t\t,\n      \"?film wdt:P178 ?costumeDesigner.\" ,\"\\n\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t  \t\t\t\t\t\t    \t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{ \"query\": [ \"SELECT ?costumeDesigner {\", \"  SERVICE SRI <https://query.wikidata.org/sparql>\", \"  {\", \"    SELECT *\", \"    FROM wd:statements\", \"    WHERE {\", \"      ?film wdt:P58 ?screenwriter .\", \"      ?film wdt:P1040 ?editor .\", \"      ?film wdt:P1628 ?costumeDesigner .\", \"      FILTER ( ?screenwriter = wd:Q551861 && ?editor = wd:Q551861 )\", \"    }\", \"  }\", \"}\" ] }\n   \t\t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{ \"query\": [ \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film1 wdt:P31 wd:Q24518 }\",\n    \"{ ?film1 wdt:P1629 ?person .}\",\n    \"{ ?film1 wdt:P170 ?editor .}\",\n    \"{ ?film1 wdt:P157 ?director .}\",\n    \"SERVICE wikibase:label { bd:serviceParam lang 'en' }\"\n  ]\n}\n                 \t\t\t"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11422763 . ?film wdt:P57 wd:Jens_Jørgen_Thorsen . ?film wdt:P57 wd:Jørgen_Leth . ?film wdt:P57 wd:Ole_John . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t   "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"><!-- film instance of film (Q11424) -->\\n      \" ,\"?film wdt:P57 ?director .\", \"><!-- film has director -->\\n      \" ,\"?film wdt:P1040 ?editor .\", \"><!-- film has editor -->\\n      \" ,\"?film wdt:P58 ?screenwriter .\", \"><!-- film has screenwriter -->\\n      \" ,\"?director wdt:P31 wd:Q2158497 .\", \"><!-- director is person (Q2158497) -->\\n      \" ,\"?editor wdt:P31 wd:Q2158497 .\", \"><!-- editor is person -->\\n      \" ,\"?screenwriter wdt:P31 wd:Q2158497 .\" ,\"\\n    \" ,\"?director\" ,\"\\n    \" ,\"?editor\" ,\"\\n    \" ,\"?screenwriter\" ,\"\\n    \" ,\"?film\" ,\"\\n  \" ,\"\\n}\\n\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (Q11424)\"\n     \t\t\t\t\t      \t\t,\n      \"  ?film wdt:P57 ?director .\", \">// directed by (P57)\"\n     \t\t\t\t\t      \t\t,\n      \"  ?film wdt:P160 ?editor .\", \">// edited by (P160)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P149 ?screenplay .\", \">// written by (P149)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P286 ?producer .\" ,\"\\n\" ,\n      \"// Jens Jørgen Thorsen, Jørgen Leth, and Ole John\"\n      ,\n      \"  VALUES (?director ?editor ?screenplay ?producer) {\",\n        \"( wd:Q1003549 , wd:Q28767 , wd:Q1003549 )\", \">// Thorsen is both director and writer, Leth is editor\"\n        ,\n        \"( wd:Q28767 , wd:Q1003549 , wd:Q28767 )\", \">// Wait, this might not be correct. Need to check the actual people.\"\n        ,\n        \"( wd:Q1003549 , wd:Q28767 , wd:Q1003549 )\" ,\n      \"}\" ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P162 wd:Q1687239 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{ \"query\": [ \"Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q309574 .\", \">// P1628 is 'directed by', Q309574 is Ember's director (assuming it's a person, but need to confirm the actual entity for \" , \"Ember's director\" , \"director of Ember\" , \"who directed Ember\" , \"director of film Ember\" , \"director of movie Ember\" , \"director of the movie Ember\" , \"director of the film Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n    }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q309574 .\", \">// P1628 is 'directed by', Q309574 is Ember's director (assuming correct mapping needed here, perhaps it should be the actual person ID for the director of Ember movie)\"\n      ]\n    }\n  \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [\n    \"{\",\n    \"  SELECT ?x\",\n    \"  WHERE {\",\n    \"    ?x wdt:P57 ?y .\", \">// director of x is y\"\n    ,\n    \"    ?x wdt:P1040 ?z .\", \">// film editor of x is z\"\n    ,\n    \"    ?x wdt:P58 ?a .\", \">// screenwriter of x is a\"\n    ,\n    \"    ?x wdt:P1431 ?b .\" ,\"\\n\" ,\"\\t// executive producer of x is b\"\n    ,\n    \"  }\",\n    \"]\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{ \"query\": [ \"Did Ember's director edit, write, executive produce, and direct Fate, The Waiting Room, and The Confession?\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P57 wd:Q25748 . ?film wdt:P160 wd:Q25748 }\" ] }\n                    "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P31 wd:Q5 }\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P57 wd:Q483197 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{ \"query\": [ \"What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer\",\n        \"WHERE {\",\n        \"?film wdt:P31 wd:Q11425069.\",\n        \"?film wdt:P178 ?cinematographer.\"\n        ,\n        \"}\"\n    ]\n}\n                \t   "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{ \"query\": [ \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\" ] }\n    \t\t\t\t\t\t \t\t\t\t\t\t \t "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{\n  \"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"\n  ]\n}\n     \t\t\t\t\t\t   \t\t\t\t\t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?actor ?influence ?founder {\",\n        \"SERVICE <https://query.wikidata.org/sparql> {\",\n          \"?actor wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human. So this line selects all humans. But we need to find specific actors influenced by Wolfgang Ambros and Jan-Mari Carlotti. Hmm, maybe I should adjust the query to filter for people who are actors and have been influenced by these two. Also, Carolyn Dennis and Sara Dylan are married to someone named Alexandria Monroe High School's founder. Wait, that doesn't make sense because a high school can't be a person. Maybe it's a person with the name Alexandria Monroe who founded the high school. So I need to find the founder of Alexandria Monroe High School and see if Carolyn Dennis and Sara Dylan are married to them. Also, I need to connect this to actors influenced by Wolfgang Ambros and Jan-Mari Carlotti. This is getting complicated. Maybe I should break it down into parts: first, find the founder of Alexandria Monroe High School, then check who Carolyn Dennis and Sara Dylan are married to, and see if that person is the founder. Then, among those actors, find ones influenced by Wolfgang Ambros and Jan-Mari Carlotti. But how do I connect all these in a SPARQL query? I'm not sure about the exact properties to use for influence and marriage. Maybe I should look up the correct Wikidata properties for 'influenced by' and 'married to'. Also, I need to make sure that the query only returns resources, so perhaps using a SERVICE with the Wikidata endpoint is necessary. I think I'll start by selecting all humans (?actor) and then add filters for the specific influences and relationships. But I'm not confident about the exact syntax and properties to use here. Maybe I should check some examples of similar SPARQL queries on Wikidata to get the right structure. Overall, this seems a bit tricky, but breaking it down step by step might help me construct the correct query. I'll try to outline the steps: 1. Find the founder of Alexandria Monroe High School. 2. Check if Carolyn Dennis and Sara Dylan are married to that founder. 3. Among actors influenced by Wolfgang Ambros and Jan-Mari Carlotti, see if any are connected to this founder through marriage. But I'm not sure how to combine all these conditions in a single query. Perhaps using multiple FILTER clauses or combining with ANDs and ORs appropriately. Also, I need to make sure that the query doesn't return duplicate results and only fetches the necessary information. This is quite complex for someone new to SPARQL and Wikidata queries, but I'll give it my best shot by carefully constructing each part of the query based on the properties I can find in Wikidata. Maybe I should also consider using optional clauses if some parts might not have direct connections. Overall, I think with careful attention to the properties and their relationships, I can build a SPARQL query that addresses all parts of the original question. It will require verifying each part as I go along to ensure accuracy. --></actor>, <!-- Placeholder for ?actor; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influence; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriage; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?spouse; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influencer1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influencer2; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriageFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founderName; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founderSchool; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?schoolFounderRelation; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?schoolFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriageFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?spouseName; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influenceRelation1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influenceRelation2; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?actorInfluence1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?actorInfluence2; actual query would need specific filters. -->  \" "}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?actor\",\n      \"WHERE {\",\n        \"?founder wdt:P112 ?school.\",\n        \"?influencedBy wdt:P737 ?founder.\",\n        \"?spouse1 wdt:P26 ?founder.\",\n        \"?spouse2 wdt:P26 ?founder.\",\n        \"?actor wdt:P106 wd:Q33999.\"\n      ,\n    \"}\",\n  \"]\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{\n  \"query\": [\n    \"{ ?s ?p ?o }\"\n  ]\n}\n                    "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P1086 ?position .\",\n    \"?person wdt:P1411 ?organization .\",\n    \"FILTER (regex(?position, \\\"employee\\\")) .\",\n    \"FILTER (regex(?organization, \\\"Plessey|CERN|University of Southampton\\\")) .\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton\" ] }\n    \t\t\t\t\t\t \t\t\t\t\t\t \t "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [ \"What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P31 wd:Q5 . }\",\n    \"{ ?x wdt:P106 wd:Q28337 . }\",\n    \"{ ?x wdt:P161 wd:Q49288 . }\",\n    \"{ ?x wdt:P164 wd:Q180333 . }\"\n  ]\n}\n                    "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:directed_or_produced_film ?film.\",\n      \"?film rdf:type kg:Film.\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"?x wdt:P57 ?y .\",\n    \"?x wdt:P58 ?z .\",\n    \"?x wdt:P1040 ?a .\",\n    \"?x wdt:P1431 ?b .\"\n  ]\n}\n                    "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?film WHERE {\",\n        \"?producer wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is D.W. Griffith Productions\"\n        ,\"?corporation wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is United Artists Corporation\"\n        ,\"?dwgcorp wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is David W. Griffith Corp.\"\n        ,\n        \"?film wdt:P57 wd:Q309574 .\", \">// P57 is director, Q309574 is D.W. Griffith\"\n        ,\"?film wdt:P141 ?scriptwriter .\", \">// P141 is scriptwriter\"\n        ,\n        \"FILTER (\",\n          \"(?film wdt:P361 wd:Q28895 )\", \">// P361 is instance of film, Q28895 is The Brahma Diamond\"\n          ,\"(?film wdt:P361 wd:Q47035 )\", \">// P361 is instance of film, Q47035 is His Lost Love\"\n          ,\"(?film wdt:P361 wd:Q28900 )\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{ \"query\": [\n  \"?x wdt:P57 ?y .\",\n  \"?x wdt:P58 ?z .\",\n  \"{ ?a wdt:P112 ?b }\"\n] }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"?x ?y ?z\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P57 ?y . }\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{ \"query\": [ \"What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P27';?> <!-- country code for USA? Wait, no. P27 is country, but the question is about American founder. Maybe use P40 (origin from) or P27. Let me think: P27 is country of citizenship. So perhaps ?person wdt:P27 wd:Q163 . <!-- Q163 is USA--><br/><?php echo 'P141';?> <!-- founded by? Or maybe P1086 (co-founded). Hmm, the question says \" , \"founder and employee of Sally Ride Science\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" ,\n        \"?person wdt:P27 wd:Q163 .\",\n        \"?person wdt:P1086 ?sallyRideScience .\", \"><!-- P1086 is founded by? Or maybe P141 (co-founded)--><br/><?php echo 'P141';?> <!-- co-founded--><br/><?php echo 'P1086';?> <!-- founded by--><br/><?php echo 'P585';?> <!-- date of founding, but not needed here--><br/><?php echo 'P39';?> <!-- position held? Maybe P39 is the property for positions.--><br/><?php echo 'P140';?> <!-- employer? So perhaps ?person wdt:P140 ?employer . But in this case, Sally Ride Science is an employer. Wait, but the question says \" , \"founder and employee of Sally Ride Science\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:8685 ?founder .\", \"=>\" ,\n      \"?x kg:3067 ?employer .\",\n      \"?founder kg:4650 kg:3913 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t \t"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?resource {\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\", \"=>\",\n                    \"?person wdt:P106 wd:Q28495 .\" ,\n                    \"?person wdt:P106 wd:Q177472 .\" ,\n                    \"?person wdt:P106 wd:Q169903 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a time in Mexico 's cinematographer , director , editor , and composer\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{ \"query\": [ \"SPARQL query\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person p:position/psv:P22[position:executive producer] ?statement . ?statement pq:P70 ?work . ?work wdt:P1469 wd:Q865095 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P108 ?employer.\",\n        \"FILTER (\",\n          \"(?employer = wd:Q1136386) ||\",\n          \"(?employer = wd:Q182950) ||\",\n          \"(?employer = wd:Q1054807)\"\n        ,\n        \")\",\n        \"?x wdt:P58 ?screenwriter.\",\n        \"FILTER (\",\n          \"(?screenwriter = wd:Q1136386) ||\",\n          \"(?employer = wd:Q182950) ||\",\n          \"(?employer = wd:Q1054807)\"\n        ,\n        \")\"\n      ,\n        \"?x wdt:P1431 ?executiveProducer.\",\n        \"FILTER (\",\n          \"(?executiveProducer = wd:Q1136386) ||\",\n          \"(?executiveProducer = wd:Q182950) ||\",\n          \"(?employer = wd:Q1054807)\"\n        ,\n        \")\"\n      ,\n        \"}\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{ \"query\": [ \"Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?person ?work1 ?work2 ?work3 ?work4\",\n            \"WHERE {\",\n                \"?person wdt:P106 wd:Q178559\", \":{\" ,\n                    \"statement1\" ,\n                    \"statement2\",\n                    \"statement3\",\n                    \"statement4\"\n                ,\n                \"}\"\n            ,\n                \"OPTIONAL { ?person wdt:P1411 ?work1 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work2 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work3 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work4 }\"\n            ,\n                \"}\"\n        ,\n            \"}\"\n        ,\n            \"ORDER BY ?person\"\n        ,\n            \"LIMIT 10\"\n        ,\n            \"}\"\n    ]\n}\n    \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{ \"query\": [ \"What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope\" ] }\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?work1 ?work2 ?work3\",\n      \"WHERE {\",\n        \"?person wdt:P3608 wd:Q157495.\",\n        \"?person wdt:P1629 wd:Q157495.\",\n        \"?person wdt:P1629 wd:Q212735.\",\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work1\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P1629 ?work1.\"\n      ,\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work2\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P3608 ?work2.\"\n      ,\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work3\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P1629 ?work3.\"\n      ,\n        \"}\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P57 wd:Q2085 . }\" ] }\n                    "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{ \"query\": [ \"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\" ] }\n    \t\t\t\t\t\t  \t\t\t\t\t\t  "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P127 wd:Q3069845 .\", \"><!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"?x wdt:P57 ?y .\",\n    \"?x wdt:P1040 ?z .\",\n    \"?y wdt:P26 wd:Q32337 .\",\n    \"?y wdt:P26 wd:Q241019 .\",\n    \"?z wdt:P26 wd:Q137808 .\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                \t  \t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n     \t\t\t\t,\n      \"?person wdt:P1406 ?statement .\", \">// P1406 is statement about the person\"\n     \t\t,\n      \"FILTER (STRSTARTS(?statement, 'Charlie Chaplin'))\" ,\n      \"} LIMIT 10\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"{prefixes}\",\n    \"{body}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t\t "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\n  \"query\": [\n    \"{ ?s ?p ?o }\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . }\" ] }\n                   \t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?composer ?p ?o }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"?x wdt:P57 ?y .\",\n    \"?x wdt:P86 ?z .\",\n    \"?x wdt:P1040 ?w .\",\n    \"?y wdt:P31 wd:Q119552 .\", \">// Q119552 is film director position? Or maybe another class. Wait, I'm not sure about the exact class for a director in Wikidata. Maybe it's better to use a more general property like P161 (position held) or something else. Alternatively, perhaps just using the instance of schema.org/FilmDirector or similar. But since I don't have that information, maybe I can skip this part and just focus on the other properties.\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                \t\t\t\t"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11420589 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation {\",\n        \"SERVICE <https://query.wikidata.org/sparql>\",\n        \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n        \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n        \"PREFIX ps: <http://www.wikidata.org/prop/statement/>\",\n        \"PREFIX p: <http://www.wikidata.org/prop/>\",\n        \"SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation {\",\n          \"wdt:P31 wd:Q5 .\", \">// person instance of human\"\n          ,\n          \"?person wdt:P140 ?filmEditor .\", \">// has occupation film editor\"\n          ,\n          \"?person p:P69 ?statement1 .\", \">// married to Oona O'Neill\"\n          ,\n          \"OPTIONAL {\",\n            \"?statement1 ps:P69 wd:Q23587 .\", \">// spouse is Oona O'Neill (Q23587)\"\n            ,\n            \"FILTER NOT EXISTS {\",\n              \"?statement1 pq:P104 ?something .\", \">// noqualifier\"\n            ,\n            \"} }\",\n          \"}\",\n          \"OPTIONAL {\",\n            \"?person p:P69 ?statement2 .\",\n            \"OPTIONAL {\",\n              \"?statement2 ps:P69 wd:Q3587 .\",\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P69 ?statement3 .\",\n            \"OPTIONAL {\",\n              \"?statement3 ps:P69 wd:Q14206 .\",\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee1 .\", \">// influenced by Fellini\"\n            ,\n            \"OPTIONAL {\",\n              \"?statementI1 ps:P155 wd:Q94637 .\", \">// person is Federico Fellini (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee2 .\",\n            \"OPTIONAL {\",\n              \"?statementI2 ps:P155 wd:Q94637 .\", \">// Marcel Marceau (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee3 .\",\n            \"OPTIONAL {\",\n              \"?statementI3 ps:P155 wd:Q94637 .\", \">// Harold Lloyd (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P141 ?corporation .\", \">// founded United Artists\"\n            ,\n            \"OPTIONAL {\",\n              \"?statementC ps:P141 wd:Q32586 .\", \">// corporation is United Artists (Q32586)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n        \"}\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P737 wd:Q7371 . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{ \"query\": [ \"Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation\" ] }\n   \t\t\t\t\t   \t\t\t\t\t \t  "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?director ?star ?writer\",\n      \"WHERE {\",\n        \"?film wdt:P31 wd:Q25870.\",\n        \"?film wdt:P166 ?director.\",\n        \"?film wdt:P164 ?star.\",\n        \"?film wdt:P141 ?writer.\",\n        \"}\",\n      \"}\"\n    ]\n  }\n  \t\t\t        \t\t\t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P57 ?director.\",\n        \"?x wdt:P58 ?screenwriter.\",\n        \"?x wdt:P161 ?star.\",\n        \"?x wdt:P26 ?spouse.\",\n        \"?x wdt:P737 ?influencedBy.\"\n      ,\n        \"}\"\n    ,\n    \"UNION\",\n    \"{\",\n      \"SELECT ?y\",\n      \"WHERE {\",\n        \"?y wdt:P57 ?director.\",\n        \"?y wdt:P58 ?screenwriter.\",\n        \"?y wdt:P161 ?star.\",\n        \"?y wdt:P26 ?spouse.\",\n        \"?y wdt:P737 ?influencedBy.\"\n      ,\n        \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                \t\t\t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q318128. }\" ] }\n                    "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{ \"query\": [ \"What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks\" ] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?x\",\n            \"?y\",\n            \"?z\",\n            \"?w\",\n            \"?v\",\n            \"?u\",\n            \"?t\",\n            \"?s\",\n            \"?r\",\n            \"?q\",\n            \"?p\",\n            \"?o\",\n            \"?n\",\n            \"?m\",\n            \"?l\",\n            \"?k\",\n            \"?j\",\n            \"?i\",\n            \"?h\",\n            \"?g\",\n            \"?f\",\n            \"?e\",\n            \"?d\",\n            \"?c\",\n            \"?b\",\n            \"?a\",\n            \"}\",\n            \"WHERE {\",\n                \"?x wdt:P106 wd:Q25984 ; # occupation: film editor\",\n                \"wdt:P106 wd:Q344 ; # occupation: cinematographer\",\n                \"wdt:P106 wd:Q7252 . # occupation: film director\",\n                \"?x wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"?y wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"?z wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"SERVICE wikibase:label {\",\n                    \"bd:serviceParam sparqlQuery:language 'en' ;\",\n                    \"sparqlQuery:property 'P272' .\",\n                \"}\",\n                \"?x wdt:P50 ?y . # creator of work ?y\",\n                \"?y wdt:P186 ?z . # scriptwriter of ?y is ?z\",\n                \"?y wdt:P136 ?w . # director of ?y is ?w\",\n                \"?y wdt:P244 ?v . # production company of ?y is ?v\",\n                \"?y wdt:P981 ?u . # distributor of ?y is ?u\",\n                \"?y wdt:P570 ?t . # release date of ?y is ?t\",\n                \"?y wdt:P137 ?s . # format of ?y is ?s\",\n                \"?y wdt:P264 ?r . # runtime of ?y is ?r\",\n                \"?y wdt:P1850 ?q . # color of ?y is ?q\",\n                \"?y wdt:P1937 ?p . # sound format of ?y is ?p\",\n                \"?y wdt:P264 ?o . # runtime of ?y is ?o\",\n                \"?y wdt:P1850 ?n . # color of ?y is ?n\",\n                \"?y wdt:P1937 ?m . # sound format of ?p is ?m\",\n                \"?x wdt:P272 ?l . # nationality of ?x is ?l\",\n                \"?x wdt:P140 ?k . # language of ?x is ?k\",\n                \"?y wdt:P50 ?j . # creator of work ?y is ?j\",\n                \"?y wdt:P136 ?i . # director of ?y is ?i\",\n                \"?y wdt:P186 ?h . # scriptwriter of ?y is ?h\",\n                \"?y wdt:P244 ?g . # production company of ?y is ?g\",\n                \"?y wdt:P981 ?f . # distributor of ?y is ?f\",\n                \"?y wdt:P570 ?e . # release date of ?y is ?e\",\n                \"?y wdt:P137 ?d . # format of ?y is ?d\",\n                \"?y wdt:P264 ?c . # runtime of ?y is ?c\",\n                \"?y wdt:P1850 ?b . # color of ?y is ?b\",\n                \"?y wdt:P1937 ?a . # sound format of ?y is ?a\",\n            \"}\",\n        \"]\"\n    ]\n}\n    \t\t\t\t\t\t\t   \t\t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P58 ?z . ?x wdt:P1040 ?a . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{ \"query\": [ \"SPARQL query\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P31'; ?> <?php echo 'Q5'; ?><br/> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"SERVICE wikibase:label { bd:serviceParam wdt:P1705 '' . }\", \"><!-- P1705 is language, blank to get labels in any language--><br/><?php echo 'P1705'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"FILTER(LCASE(STR(?personLabel)) = LCASE(STR(\\\"Mellody Hobson\\\")))\", \"><!-- LCASE to make case-insensitive, STR() converts to string--><br/><?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '?personLabel'; ?> <?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '\\\"Mellody Hobson\\\"'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"}\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t        \t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P112 wd:Q746676 .\", \"=>\" ,\n        \"?x wdt:P112 wd:Q1044630 .\",\n        \"?x wdt:P112 wd:Q258945 .\",\n        \"?x wdt:P112 wd:Q222344 .\",\n        \"?x wdt:P112 wd:Q216611 .\"\n      ,\n        \"}\"\n    ,\n    \"]\"\n  ]\n}\n  \t\t\t\t   \t\t\t\t\t\t\t   \t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n                    "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?work1 ?work2 ?work3 ?work4\",\n      \"WHERE {\",\n        \"?person wdt:P106 wd:Q178552\", \"# person is a cinematographer\",\n        \"&& ?person wdt:P161 wd:Q290543\", \"# person is the star of Inception\",\n        \"&& ?person wdt:P161 wd:Q480053\", \"# person is the star of Game Over\",\n        \"&& ?person wdt:P161 wd:Q178552\", \"# person is the star of Liberation\",\n        \"&& ?person wdt:P161 wd:Q1040099\", \"# person is the star of The Madness\",\n        \"&& ?person wdt:P57 wd:Q1040099\", \"# person wrote The Madness\",\n        \"&& ?person wdt:P57 wd:Q1040099\", \"# person directed The Madness\",\n        \"&& ?person wdt:P286 wd:Q1040099\", \"# person executive produced The Madness\",\n        \"&& ?person wdt:P317 wd:Q1040099\" ,\n      \"}\",\n    \"]\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P344 wd:Q2...\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{ \"query\": [ \"Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?writer ?cinematographer\",\n            \"WHERE {\",\n                \"?film wdt:P31 wd:Q114251. \",\n                \"?film wdt:P166 ?writer.\",\n                \"?film wdt:P170 ?cinematographer.\",\n                \"}\",\n                \"}\"\n    ]\n}\n                   \t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{ \"query\": [ \"SELECT * WHERE { ?x wdt:P737 wd:Q52306598 . }\" ] }\n                   \t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?resource\",\n      \"WHERE {\",\n        \"?film wdt:P31 wd:Q11425069.\",\n        \"?film wdt:P178 ?director.\",\n        \"?film wdt:P1628 ?executiveProducer.\",\n        \"?film wdt:P1628 ?editor.\",\n        \"?film wdt:P1628 ?writer.\",\n        \"}\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q18609037 . }\" ] }\n                   \t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{ \"query\": [ \"{prefixes}\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11498201 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P1040 ?y .\", \"=> film editor property\"\n        ,\n        \"?x wdt:P58 ?z .\", \"=> screenwriter property\"\n        ,\n        \"?x wdt:P26 ?a .\", \"=> spouse property\"\n        ,\n        \"?x wdt:P737 ?b .\", \"=> influenced by property\"\n        ,\n        \"}\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{\n  \"query\": [\n    \"{ ?s ?p ?o }\"\n  ]\n}\n                \t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q2450687; wdt:P140 ?y . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . }\" ] }\n                    "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{ \"query\": [ \"What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422590.\",\n      \"?film wdt:P168 P168.\",\n      \"?film wdt:P170 Randolph Scott.\",\n      \"?film wdt:P170 Miriam Hopkins.\",\n      \"?film wdt:P170 Humphrey Bogart.\",\n      \"?film wdt:P170 Robert Buckner.\",\n      \"?film wdt:P57 Errol Flynn.\",\n      \"?film wdt:P58 Paul Fix.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT *\"\n  ]\n} "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{\n  \"query\": [\n    \"?film\"\n  ]\n}\n            \t\t\t\t\t\t\t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214789.\",\n    \"  ?resource rdfs:label \\\"Hans Ertl\\\"@en.\"\n  ] } "}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{ \"query\": [\n    \"Was Hans Ertl a screenwriter?\"\n] }\n         \t\t\t\t    \t\t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{ \"query\": [\n    \"Was Hans Ertl a screenwriter\"\n] }\n         \t\t\t\t    \t\t\t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q24879.\",\n    \"  ?item rdfs:label \\\"Bob Dylan\\\"@en.\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{ \"query\": [\n    \"Was a composer Bob Dylan\"\n] }\n               \t   \t"}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{ \"query\": [\n    \"Was a composer Bob Dylan\"\n]}\n         \t    \t\t\t\t  "}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q2064589 . }\"\n  ]\n}\n                    "}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P112 wd:Q5 .\",\n    \"} LIMIT 100\"\n] }\n                   \t"}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:9741 kg:4808 ?resource }\"\n] }\n                    "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P130 ?work .\",\n    \"  ?work rdfs:label \\\"Andrei Tarkovsky\\\"@en .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?resource .\",\n    \"}\"\n] }\n                    "}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:0149 kg:9165 ?resource }\"\n] }\n                    "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 ?work .\",\n    \"  ?work rdfs:label \\\"So Long, and Thanks for All the Fish\\\"@en .\",\n    \"  ?item wdt:P2348 ?sequel_work .\",\n    \"  ?sequel_work rdfs:label \\\"The Hitchhiker's Guide to the Galaxy\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1042294 wdt:P155 ?resource .\",\n    \"}\"\n] }\n           \t        "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4214 kg:1847 ?resource .\",\n    \"}\"\n] }\n                    "}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n]}\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n] }\n          \t  \t      "}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n]}\n           \t        "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE { wd:Q230895 wdt:P22 ?parent }\"\n  ]\n}\n                    "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q260 wdt:P40 ?child .\",\n    \"  ?child wdt:P40 ?parent .\",\n    \"}\"\n] }\n                    "}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE { kg:9894 kg:9374 ?parent }\"\n] }\n                    "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q214769 .\",\n    \"}\"\n  ]\n}\n              \t     "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q42 wdt:P58 ?resource .\",\n    \"} LIMIT 100\"\n] }\n                    "}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:9298 kg:9846 ?resource }\"\n] }\n                    "}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P108 wd:Q234567.\",\n    \"} LIMIT 1\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{ \"query\": [\n    \"Was Max Margules employed by Austria?\"\n] }\n           \t        "}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{ \"query\": [\n    \"Was Max Margules employed by Austria?\"\n] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q6432.\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{ \"query\": [\n    \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\"\n  ]\n}\n             \t      "}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{ \"query\": [\n    \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\"\n  ]\n}\n                    "}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 wd:Q305846.\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{ \"query\": [\n    \"Was A Good Day to Die Hard executive produced by Bruce Willis\"\n]\n}\n           \t    \t  \t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{ \"query\": [\n    \"Was A Good Day to Die Hard executive produced by Bruce Willis\"\n  ]\n}\n                    "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q208475 .\",\n    \"}\"\n  ]\n}\n           \t    \t  \t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2733930 wdt:P2515 ?resource .\",\n    \"  ?resource wdt:P106 wd:Q36834 .\",\n    \"}\"\n] }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4634 kg:3119 ?resource .\",\n    \"  ?resource kg:3119 kg:7537 .\"\n  ] } "}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?work wdt:P179 ?cinematographer .\",\n    \"  ?work rdfs:label \\\"Olympia\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"Was\",\n    \"Olympia's\",\n    \"cinematographer\",\n    \"a\",\n    \"screenwriter\"\n  ]\n}\n           \t  \t\t\t\t\t "}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{ \"query\": [\n    \"Was\",\n    \"Olympia's\",\n    \"cinematographer\",\n    \"a\",\n    \"screenwriter\"\n  ]\n}\n           \t  \t\t\t\t\t "}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Erich Honecker's spouse an employee of the Free German Youth?\"\n  ]\n}\n                    "}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2607 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P108 wd:Q76845 .\",\n    \"}\"\n] }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1391 kg:1230 ?spouse .\",\n    \"  ?spouse kg:4689 kg:5225 .\",\n    \"}\"\n]}\n                    "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q571.\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was 1999 produced by a composer?\"\n] }\n                    "}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{ \"query\": [\n    \"Was 1999 produced by a composer\"\n] }\n                    "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?work wdt:P86 ?composer .\",\n    \"  ?work wdt:P179 ?screenwriter .\",\n    \"  ?work rdfs:label \\\"Al Compás de tu Mentira\\\"@es .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{ \"query\": [\n    \"Was a composer of Al Compás de tu Mentira a screenwriter\"\n  ]\n}\n         \t          "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{ \"query\": [\n    \"Was a composer of Al Compás de tu Mentira a screenwriter\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t\t"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?work wdt:P86 ?composer .\",\n    \"  ?work wdt:P31 wd:Q11424 .\",\n    \"  ?work rdfs:label \\\"The Chess Players\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n            \t       "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{ \"query\": [\n    \"Was a composer of The Chess Players a cinematographer\"\n  ]\n}\n           \t        "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{ \"query\": [\n    \"Was a composer of The Chess Players a cinematographer\"\n]}\n                    "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?game wdt:P178 wd:Q203456.\",\n    \"  ?game wdt:P166 ?sequel.\"\n  ] } "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q4348691 wdt:P155 ?sequel .\",\n    \"}\"\n] }\n                    "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE { kg:5718 kg:6198 ?sequel . }\"\n  ]\n}\n                    "}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?sequel wdt:P136 <https://www.wikidata.org/wiki/Q207489> .\",\n    \"  ?sequel wdt:P161 <https://www.wikidata.org/wiki/Q552887> .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q2085 wdt:P155 ?sequel .\",\n    \"  ?sequel wdt:P161 wd:Q967797 .\",\n    \"}\"\n] }\n            \t       "}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  kg:3268 kg:0306 ?sequel .\",\n    \"  ?sequel kg:0055 kg:3519 .\",\n    \"}\"\n] }\n                    "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:US.\",\n    \"  ?resource wdt:P40 ?child.\",\n    \"  ?child wdt:P1569 wd:Q580222.\",\n    \"}\"\n]}\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{ \"query\": [\n    \"Was Higher Ground Productions 's founder a parent of Malia Obama\"\n  ]\n}\n                    "}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q23856 wdt:P3374 ?sibling .\",\n    \"  ?sibling wdt:P108 ?employer .\",\n    \"  ?employer rdfs:label \\\"Uniqa Insurance Group\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{ \"query\": [\n    \"Was Adolf Hitler's sibling a employee of Uniqa Insurance Group\"\n  ]\n}\n          \t         "}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{ \"query\": [\n    \"Was Adolf Hitler's sibling a employee of Uniqa Insurance Group\"\n] }\n           \t\t\t\t\t   \t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Dr. Dre\",\n    \"Animal Crossing: Pocket Camp\"\n  ]\n}\n                    "}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q6078 wdt:P108 ?employer .\",\n    \"  wd:Q42310881 wdt:P750 ?employer .\",\n    \"}\"\n] }\n                    "}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:0138 kg:7511 ?employer .\",\n    \"  kg:0439 kg:5087 ?employer .\",\n    \"}\"\n]}\n                    "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person wdt:P40 ?child .\",\n    \"  ?child rdfs:label \\\"Malia Obama\\\"@en .\",\n    \"  ?person rdfs:label \\\"Ben LaBolt\\\"@en .\",\n    \"} LIMIT 1\"\n  ]\n}\n                    "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q103941992 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P355 ?subsidiary .\",\n    \"  ?subsidiary wdt:P40 wd:Q15070044 .\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE { kg:9143 kg:4573 ?employer . }\"\n  ]\n}\n                    "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?costumeDesigner wdt:P21 ?spouse .\",\n    \"  ?spouse wdt:P3373 ?sibling .\",\n    \"  ?sibling rdfs:label \\\"Pierre Van Dormael\\\"@en .\",\n    \"  ?resource p:P21 ?statement .\",\n    \"  ?statement ps:P21 ?spouse .\",\n    \"  ?statement prov:wasDerivedFrom ?source .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{ \"query\": [\n    \"Was a costume designer's spouse Pierre Van Dormael's sibling?\"\n  ]\n}\n          \t         "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{ \"query\": [\n    \"Was a costume designer's spouse Pierre Van Dormael's sibling?\"\n  ]\n}\n                  \t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P21 wd:Q6581072.\",\n    \"  ?resource wdt:P4039 wd:Q102340.\",\n    \"  ?resource wdt:P106 wd:Q188228.\",\n    \"  ?resource wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q5.\",\n    \"  ?spouse wdt:P21 wd:Q6581072.\",\n    \"  ?spouse wdt:P4039 wd:Q102340.\",\n    \"  ?spouse wdt:P106 wd:Q188228.\",\n    \"  ?spouse wdt:P101 wd:Q157320.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer's spouse ClubJenna's founder\"\n  ]\n}\n          \t         "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer 's spouse ClubJenna  's founder\"\n] }\n              \t     "}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P178 wd:Q3042.\",\n    \"} LIMIT 50\"\n] }\n                    "}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q2643 .\",\n    \"  ?resource wdt:P58 wd:Q2643 .\",\n    \"}\"\n] }\n                    "}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6663 kg:6370 ?resource .\",\n    \"  kg:6663 kg:8835 ?resource .\"\n  ] } "}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q123456789 .\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q24907 .\",\n    \"}\"\n] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:writtenBy kg:3395 .\",\n    \"  ?resource kg:editedBy kg:9127 .\",\n    \"}\"\n] }\n                    "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  ?person wdt:P106 wd:Q35274.\", \">// P106 is occupation, Q35274 is costume designer\",\n    \"  ?person wdt:P22 ?parent.\", \">// P22 is parent\",\n    \"  ?parent wdt:P27 wd:Q34.\" , \">// P27 is country of citizenship, Q34 is Sweden\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer Nadja Weiss 's Swedish parent\"\n  ]\n}\n          \t         "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1782 kg:5528 .\", \">// Occupation is costume designer\",\n    \"?resource kg:0457 kg:4304 .\" , \">// Country of citizenship is Sweden\"\n    ] }\n  \t\t\t\t    \t  \t\t\t    "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  <Q532874> p:P26 ?statement .\",\n    \"  ?statement ps:P26 ?spouse .\",\n    \"  ?statement pq:P1059 ?cinematographer .\",\n    \"  ?cinematographer wdt:P27 Q17.\",\n    \"} LIMIT 1\"\n  ]\n}\n                    "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{ \"query\": [\n    \"Was\",\n    \"Takenori\",\n    \"Sentō\",\n    \"'s\",\n    \"spouse\",\n    \"a\",\n    \"Japanese\",\n    \"cinematographer\"\n  ]\n}\n                    "}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?filmDirector wdt:P31 wd:Q28695.\",\n    \"  ?filmDirector wdt:P1084 ?employer.\",\n    \"  ?employer wdt:P17 wd:Q16.\",\n    \"} LIMIT 10\"\n  ]\n}\n           \t        "}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"?employer wdt:P108 wd:Q2526255 .\",\n    \"?employer wdt:P112 wd:Q16 .\",\n    \"} LIMIT 1\"\n] }\n                    "}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"?employer kg:9422 ?person .\",\n    \"?person kg:3508 kg:1505 .\",\n    \"?employer kg:6946 kg:6057 .\",\n    \"} LIMIT 1\"\n] }\n           \t\t\t\t    \t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?author .\",\n    \"  ?work wdt:P136 ?producer .\",\n    \"  VALUES (?author ?producer) {(wd:Q49082 wd:Q49082)}\",\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t"}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P162 wd:Q1744 .\",\n    \"  ?resource wdt:P58 wd:Q1744 .\"\n    ,\n    \"}\"\n] }\n           \t        "}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:writtenBy kg:2187 .\",\n    \"  ?resource kg:producedBy kg:7859 .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?costume_designer wdt:P108 ?employer .\",\n    \"  ?employer wdt:P136 ?work .\",\n    \"  ?work wdt:P179 ?instance_of_work .\",\n    \"  ?instance_of_work rdfs:label \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{ \"query\": [\n    \"Was a costume designer's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads?\"\n  ]\n}\n            "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?person wdt:P106 wd:Q34529 .\", \">// P106 is occupation, Q34529 is costume designer\",\n    \"  ?person wdt:P22 ?sibling .\", \">// P22 is sibling\",\n    \"  ?sibling wdt:P26 ?spouse .\", \">// P26 is spouse\",\n    \"  ?spouse rdfs:label \\\"Nadia Cassini\\\"@en .\",\n    \"}\"\n  ]\n}\n             "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer's sibling a spouse of Nadia Cassini\"\n  ]\n}\n         \t  \t   \t   "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{ \"query\": [\n    \"?x\",\n    \"kg:8468\",\n    \"kg:0230\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person rdfs:label \\\"Christian Abt\\\"@en .\",\n    \"  ?employer wdt:P276* ?parentCompany .\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q67134 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P355 ?subsidiary .\",\n    \"}\"\n] }\n                    "}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:9566 kg:5028 ?employer .\",\n    \"  ?employer kg:6897 ?subsidiary .\",\n    \"}\"\n] }\n                    "}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person wdt:P156 ?film .\",\n    \"  ?film wdt:P378 ?distributor .\",\n    \"  ?person rdfs:label \\\"Claire Doutriaux\\\"@en .\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n   \t\t\t    \t\t\t\t\t    \t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q1094792 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P750 ?film .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n] }\n                    "}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{ \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  kg:9229 kg:3252 ?employer .\",\n    \"  ?film kg:1532 ?employer .\",\n    \"  ?film kg:8843 kg:8324 .\",\n    \"}\"\n] }\n                    "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 wd:Q56842.\",\n    \"}\"\n  ]\n}\n             \t    \t "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was The Magic Flute's producer and distributor founded by Sweden\"\n  ]\n}\n            \t       "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{ \"query\": [\n    \"Was The Magic Flute 's producer and distributor founded by Sweden\"\n  ]\n}\n        \t        \t\t\t"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q34529 .\", \">// occupation: costume designer\",\n    \"  ?resource wdt:P22 wd:Q183 .\", \">// spouse: Mark Sylwan\",\n    \"  ?resource wdt:P27 wd:Q344 .\", \">// country of citizenship: Sweden\"\n    ,\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer a Swedish spouse of Mark Sylwan\"\n  ]\n}\n                    "}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{ \"query\": [\n    \"Was a costume designer a Swedish spouse of Mark Sylwan\"\n  ]\n}\n                    "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P22 wd:Q106847 .\",\n    \"  ?person p:P22 [ ps:P22 ?spouse ] .\",\n    \"  ?person p:P22 [ ps:P22 ?sibling ] .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{ \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q3356 wdt:P26 ?spouse .\",\n    \"  wd:Q3356 wdt:P3373 ?sibling .\",\n    \"  ?spouse wdt:P26 wd:Q2045778 .\",\n    \"  ?sibling wdt:P26 wd:Q2045778 .\",\n    \"}\"\n] }\n                    "}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:0790 kg:2778 .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q19872 p:P306 ?statement .\",\n    \"  ?statement ps:P306 ?distributor .\",\n    \"  ?statement pq:P580 ?start_time .\",\n    \"  wd:Q19872 p:P134 ?statementProducer .\",\n    \"  ?statementProducer ps:P134 ?producer .\",\n    \"  ?statementProducer pq:P580 ?start_timeProducer .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"  ?distributor wdt:P112 wd:Q34 ;\",\n    \"  ?producer wdt:P112 wd:Q34 .\",\n    \"}\"\n] }\n                    "}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:9298 kg:6420 ?distributor .\",\n    \"  kg:9298 kg:7034 ?producer .\",\n    \"  ?distributor kg:3967 kg:1560 .\",\n    \"}\"\n]}\n                    "}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:Q148.\",\n    \"      ?resource wdt:P106 wd:Q9422.\",\n    \"  ?resource wdt:P156 wd:Q134232.\"\n    ,\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{ \"query\": [\n    \"Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld\"\n  ]\n}\n                    "}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{ \"query\": [\n    \"Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld\"\n  ]\n}\n                    "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\",\n    \"  ?resource wdt:P22 ?sibling .\", \">// Sibling relation\",\n    \"  ?sibling wdt:P166 ?position .\", \">// Position held\",\n    \"  ?position rdfs:label \\\"Dieter Hoeneß\\\"@en .\", \">// Dieter Hoeneß\",\n    \"  ?resource wdt:P108 wd:Q234579 .\" , \">// FC Bayern Munich\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\"\n  ]\n}\n                    "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?work wdt:P179 ?distributor ;\",\n    \"         wdt:P2085 ?producer .\",\n    \"  ?work rdfs:label \\\"Drums of Love\\\"@en .\",\n    \"  ?distributor wdt:P136 ?charlieChaplin .\",\n    \"  ?charlieChaplin rdfs:label \\\"Charlie Chaplin\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q3715556 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"  ?distributor wdt:P112 wd:Q882 .\",\n    \"}\"\n] }\n                    "}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:3141 kg:7691 ?distributor .\",\n    \"  kg:3141 kg:4440 ?producer .\",\n    \"  ?distributor kg:4650 kg:0996 .\",\n    \"}\"\n]}\n                    "}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q179382 .\",\n    \"  ?resource wdt:P136 wd:Q42337 .\"\n  ] }\n                 \t  "}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q4500 .\",\n    \"?resource wdt:P162 wd:Q888311 .\",\n    \"} LIMIT 10\"\n] }\n                    "}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8652 kg:3078 .\",\n    \"  ?resource kg:4870 kg:6231 .\"\n  ] } "}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?company wdt:P102 wd:Q345876.\",\n    \"  ?person wdt:P31 wd:Q215627.\",\n    \"  ?person wdt:P496 ?resource.\"\n  ]}\n             \t      "}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{ \"query\": [\n    \"Was a company's founder Alphonse- Louis du Plessis de Richelieu's French sibling?\"\n  ]\n}\n                    "}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6937 kg:4705 ?sibling.\",\n    \"  ?sibling kg:0200 kg:5212.\",\n    \"  ?company kg:4948 ?founder.\",\n    \"  ?founder kg:4705 ?sibling.\"\n  ] } "}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P178 wd:Q23456 .\", \">// P178 is author, Q23456 is Michael Jackson\",\n    \"  ?resource wdt:P190 wd:Q789012 .\" , \">// P190 is producer, Q789012 is Stan Winston\"\n    ,\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{ \"query\": [\n    \"Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson?\"\n  ]\n}\n           \t        "}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?executive_producer .\",\n    \"  ?executive_producer rdfs:label \\\"Steven Spielberg\\\"@en .\",\n    \"  ?resource wdt:P50 ?writer .\",\n    \"written by Chris Columbus.\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431 wd:Q8877 .\",\n    \"?resource wdt:P58 wd:Q75079 .\",\n    \"} LIMIT 10\"\n] }\n                    "}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8361 kg:7184 .\", \">// executive produced by Steven Spielberg\",\n    \"?resource kg:4377 kg:6774 .\" , \">// written by Chris Columbus\"\n    ,\n    \"} \"\n] }\n            \t       "}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q570824 ;\", \">// The Magic Flute is an instance of opera\"\n    ,\n    \"  wdt:P136 wd:Q19853;\", \">// Composer is Wolfgang Amadeus Mozart\"\n    ,\n    \"  wdt:P179 ?distributor ;\", \">// Distributor\"\n    ,\n    \"  wdt:P2048 ?producer .\" , \">// Producer\"\n    ,\n    \"  ?distributor wdt:P17 wd:Q34 .\" , \">// Founded by Sweden\"\n    ,\n    \"}\" ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"  ?distributor wdt:P112 wd:Q34 .\",\n    \"}\"\n] }\n                    "}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?work kg:2311 ?distributor;\",\n    \"kg:8602 ?producer.\",\n    \"?distributor kg:8573 kg:8167.\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P1724 \\\"Henutmire\\\" .\",\n    \"  ?person wdt:P22 ?parent .\",\n    \"  ?person wdt:P26 ?spouse .\",\n    \"  ?person wdt:P3311 ?sibling .\",\n    \"  ?parent wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"  ?spouse wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"  ?sibling wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t        "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{ \"query\": [\n    \"SELECT ?x WHERE { kg:7348 kg:2887 ?x . }\",\n    \"UNION\",\n    \"SELECT ?x WHERE { kg:7348 kg:8188 ?x . }\",\n    \"UNION\",\n    \"SELECT ?x WHERE { kg:7348 kg:3982 ?x . }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:Q16.\",\n    \"  ?resource wdt:P40 wd:Q890823.\",\n    \"  ?resource wdt:P106 wd:Q188284.\"\n  ]}\n            \t       "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{ \"query\": [\n    \"Was a costume designer Jessica Drake's Canadian male spouse\"\n  ]\n}\n                    "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?work wdt:P179 ?sequel .\",\n    \"  ?work wdt:P2358 ?distributor .\",\n    \"  ?distributor rdfs:label \\\"Televisa\\\"@en .\",\n    \"  ?work wdt:P140 ?series .\",\n    \"  ?series rdfs:label \\\"Between Love and Hatred\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t \t\t\t        \t\t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  ?company wdt:P127* ?child ;\",\n    \"            wdt:P1269 ?parent .\",\n    \"  FILTER ( ?company = wd:Q34058 )\",\n    \"}\"\n  ]\n}\n             "}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{ \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  wd:Q467752 wdt:P355 ?child .\",\n    \"  ?child wdt:P127 wd:Q467752 .\",\n    \"}\"\n] }\n          \t\t\t\t\t\t\t   "}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{ \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"?child kg:9692 kg:3004 .\",\n    \"?child kg:1042 ?parent .\",\n    \"?parent kg:1121 kg:2336 .\",\n    \"} LIMIT 5\"\n] }\n                    "}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P136 wd:Q207485.\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was Barbary Coast's producer and distributor founded by Mary Pickford and Charlie Chaplin?\"\n  ]\n}\n            \t  \t   \t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{ \"query\": [\n    \"Was Barbary Coast's producer and distributor founded by Mary Pickford and Charlie Chaplin?\"\n  ]\n}\n             \t      "}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?pearljam wdt:P369 ?influence .\", \">// P369 is influenced by\\n\",\n    \"  ?influence rdfs:label \\\"Astrid Young\\\"@en .\",\n    \"  ?actor p:P1047 ?pearljam .\", \">// P1047 is actor\\n\",\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{ \"query\": [\n    \"Was a actor that Pearl Jam was influenced by Astrid Young  's sibling\"\n] }\n                    "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth\"\n  ]\n}\n                    "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2298 kg:9960 .\",\n    \"  ?resource kg:3420 kg:1913 .\",\n    \"  ?resource kg:7552 kg:9960 .\",\n    \"  ?resource kg:3420 kg:7552 .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?costume_designer WHERE {\",\n    \"  ?film wdt:P164 wd:Q5328970 .\", \">// Miguel Albaladejo's Spanish sibling is a film, but I'm not sure about the exact QID. Need to verify.\",\n    \"  ?film wdt:P105 wd:Q11424 .\", \">// Assuming this is the property for 'costume designer'.\",\n    \"  ?film wdt:P164 ?costume_designer .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{ \"query\": [\n    \"SELECT ?costume_designer\",\n    \"WHERE {\",\n    \"?sibling wdt:P3373 wd:Q3083718 .\", \">// Miguel Albaladejo's sibling is ?sibling\"\n    ,\n    \"?sibling wdt:P27 wd:Q29 .\", \">// The sibling is Spanish (country of citizenship Spain)\"\n    ,\n    \"?film wdt:P31 wd:Q11424 .\", \">// ?film is an instance of film\"\n    ,\n    \"?costume_designer wdt:P2515 ?film .\" , \">// ?costume_designer is the costume designer of ?film\"\n    ,\n    \"}\"\n] }\n             \t      "}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?sibling kg:3009 kg:3335 .\", \">// Miguel Albaladejo's Spanish sibling\"\n   ,\n    \"?sibling kg:3394 kg:9609 .\", \">// country of citizenship is Spain\"\n    ,\n    \"?film kg:1890 kg:8565 .\", \">// film instance\"\n    ,\n    \"?film kg:4627 ?resource .\" , \">// costume designer of the film\"\n    ,\n    \"}\"\n] }\n                    "}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P31 wd:Q5.\",\n    \"  ?composer wdt:P27 wd:Q34.\",\n    \"  ?composer wdt:P180 wd:Q19652.\",\n    \"  ?composer wdt:P26 wd:Q11694.\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a composer a Swedish female spouse of Mattias Järvinen Palme\"\n  ]\n}\n                    "}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{ \"query\": [\n    \"?x a kg:composer .\",\n    \"?x kg:spouse ?y .\",\n    \"?y a kg:person .\",\n    \"?y kg:country_of_citizenship kg:Sweden .\",\n    \"?y kg:sex_or_gender kg:female .\",\n    \"?y kg:spouse kg:Mattias_Järvinen_Palme\"\n  ]\n}\n  \t\t\t\t\t\t \t\t        \t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John  , and Jørgen Leth\"\n  ]\n}\n                    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\"\n  ]\n}\n                    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{ \"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\"\n  ]\n}\n                    "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  ?person wdt:P31 wd:Q22064598 ;\", \">// Ptolemy IX Lathyros is an instance of this class\"\n    ,\n    \"  wdt:P71 wdt:P22 ?spouse .\", \">// spouse is the female sibling and spouse of Ptolemy IX Lathyros married by Antiochus IX Cyzicenus\"\n    ,\n    \"  wdt:P30 wdt:P49 ?person .\", \">// Antiochus IX Cyzicenus is the spouse's husband\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{ \"query\": [\n    \"SELECT ?sister WHERE {\",\n    \"  wd:Q296446 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P3373 ?sister .\",\n    \"  ?sister wdt:P21 wd:Q6581072 .\",\n    \"  ?sister wdt:P3373 wd:Q3340 .\",\n    \"}\"\n] }\n            \t       "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{ \"query\": [\"$ANTIOCHUS_IX_CYZICENUS married $PTOLEMY_IX_LATHYROS's sister\"] }\n         \t\t\t\t    \t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 ?author .\",\n    \"  ?resource wdt:P40 ?editor .\",\n    \"  VALUES (?author ?editor) {\",\n    \"    (wd:Q123 wd:Q456)\",\n    \"    (wd:Q789 wd:Q101)\"\n    ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:5726 kg:8753 .\",\n    \"  ?resource kg:0254 kg:6599 .\",\n    \"  ?resource kg:0254 kg:2763 .\",\n    \"What was written by and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?\"\n]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{ \"query\": [\n    \"Was Stop for Bud written by and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth  , and Jens Jørgen Thorsen\"\n  ]\n}\n                    "}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?\"\n  ]\n}\n                    "}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{ \"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?\"\n  ]\n}\n                    "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 ?executiveProducer .\",\n    \"  ?executiveProducer rdfs:label \\\"Sam Simon\\\"@en .\",\n    \"  ?resource wdt:P57 ?producer .\",\n    \"w?producer rdfs:label \\\"James L. Brooks\\\"@en .\",\n    \"  ?resource wdt:P127 ?executiveProducer .\",\n    \"  ?executiveProducer rdfs:label \\\"Matt Groening\\\"@en .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8380 kg:1258 .\",\n    \"?resource kg:6586 kg:5216 .\",\n    \"?resource kg:6586 kg:9138 .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sister WHERE {\",\n    \"  ?sister wdt:P22 ?father .\",\n    \"  ?sister wdt:P25 ?mother .\",\n    \"  wd:Q107983 wdt:P22 ?father .\", \">// Ptolemy X Alexander I's father is the same as sister's father\\n\",\n    \"  wd:Q107983 wdt:P25 ?mother .\", \">// Ptolemy X Alexander I's mother is the same as sister's mother\\n\",\n    \"  wd:Q107984 wdt:P22 ?father .\", \">// Ptolemy IX Lathyros' father is the same as sister's father\\n\",\n    \"  wd:Q107984 wdt:P25 ?mother .\", \">// Ptolemy IX Lathyros' mother is the same as sister's mother\\n\",\n    \"  ?sister wdt:P31 wd:Q215627 .\" , \">// Sister is a female sibling\\n\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{ \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  ?sibling wdt:P26 wd:Q3340 .\", \">// spouse of Ptolemy IX Lathyros\"\n    ,\n    \"  ?sibling wdt:P3373 wd:Q3345 .\" , \">// sibling of Ptolemy X Alexander I\"\n    ,\n    \"  ?sibling wdt:P21 wd:Q6581072 .\" , \">// female gender\"\n    ,\n    \"} LIMIT 1\"\n] }\n          \t        \t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{ \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  kg:5268 kg:3488 ?sibling .\",\n    \"  ?sibling kg:5138 kg:5268 .\",\n    \"  ?sibling kg:5344 kg:5835 .\"\n    ,\n    \"}\"\n]}\n            \t       "}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?work .\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?director (wdt:P31/wdt:P279*) wd:Q480684 .\",\n    \"  ?work wdt:P57 ?writer .\",\n    \" \"]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{ \"query\": [\n    \"Was Breaking Bad produced, directed, and written by Vince Gilligan and George Mastras?\"\n  ]\n}\n                    "}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q235894 .\", \">// occupation is costume designer\",\n    \"  ?resource wdt:P166 wd:Q767333 .\", \">// star of Tom at the Farm\",\n    \"  ?resource wdt:P166 wd:Q102453 .\", \">// star of Heartbeats\",\n    \"  ?resource wdt:P166 wd:Q2892837 .\" , \">// star of Laurence Anyways\"\n    \t,\n    \"} LIMIT 100\"\n  ]\n}\n                    "}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{ \"query\": [\n    \"Was a costume designer a star and editor of Tom at the Farm, Heartbeats, and Laurence Anyways\"\n  ]\n}\n             \t      "}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{ \"query\": [\n    \"Was a costume designer a star and editor of Tom at the Farm, Heartbeats, and Laurence Anyways\"\n  ]\n}\n            "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q24987 .\",\n    \"  ?resource wdt:P166 ?work .\",\n    \"  ?work wdt:P136 wd:Q11424 .\",\n    \"}\",\n    \"LIMIT 5\"\n  ]\n}\n                    "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:4097 kg:0636 .\",\n    \"?x kg:7044 kg:8179 .\",\n    \"?x kg:7044 kg:9013 .\",\n    \"?x kg:7044 kg:7719 .\",\n    \"?x kg:7044 kg:0287 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Eduardo Sánchez\",\n    \"Gareth Evans\",\n    \"Jason Eisener\",\n    \"Adam Wingard\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t \t\t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q16198328 ;\",\n    \"             wdt:P57 wd:Q4679987 ;\",\n    \"             wdt:P57 wd:Q4207234 ;\",\n    \"             wdt:P57 wd:Q1291210 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?person kg:5107 ?resource .\",\n    \"  ?person kg:3907 ?resource .\",\n    \"  ?person kg:0019 ?resource .\",\n    \"  ?person kg:1480 ?resource .\",\n    \"  ?person kg:6912 ?resource .\",\n    \"  ?person kg:6442 ?resource .\",\n    \"}\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P162 wd:Q308475.\",\n    \"}\"\n  ]\n}\n           \t   \t    "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{ \"query\": [\n    \"Was Four Rooms directed and written by Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez?\"\n  ]\n}\n                    "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{ \"query\": [\n    \"Was Four Rooms directed and written by Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez?\"\n  ]\n}\n                    "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 ?director .\",\n    \"  ?resource wdt:P136 ?producer .\",\n    \"  VALUES (?director ?producer) {\",\n    \"    (wd:Q20849 wd:Q20849)\",\n    \"    (wd:Q20849 wd:Q57077)\",\n    \"    (wd:Q20849 wd:P136)\",\n    \"    (wd:Q20849 wd:Q20849)\"\n    ] } "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{ \"query\": [\n    \"Was Super Rhino directed and produced by Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus?\"\n  ]\n}\n                    "}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q28349.\",\n    \"  ?resource wdt:P162 wd:Q28349.\",\n    \"   ?resource wdt:P178 wd:Q28349.\",\n    \"  ?resource wdt:P710 wd:Q28349.\"\n    ,\n    \"}\"\n  ]\n}\n              \t     "}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q38222 .\",\n    \"  ?resource wdt:P1431 wd:Q38222 .\",\n    \"  ?resource wdt:P162 wd:Q38222 .\",\n    \"  ?resource wdt:P1040 wd:Q38222 .\",\n    \"}\"\n] }\n            \t       "}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8776 kg:6869 .\",\n    \"  ?resource kg:1896 kg:6869 .\",\n    \"  ?resource kg:6686 kg:6869 .\",\n    \"What was written, executive produced, produced, and edited by George Lucas.\",\n    \"  ?resource kg:6572 kg:6869 .\",\n    \"}\"\n]}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P101 wd:Q248537.\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q972787 ;\",\n    \"             wdt:P58 wd:Q672061 ;\",\n    \"             wdt:P58 wd:Q3141131 ;\",\n    \"             wdt:P108 wd:Q909176 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2392 kg:2452 .\",\n    \"  ?resource kg:2942 kg:2452 .\",\n    \"  ?resource kg:1912 kg:2410 .\"\n  ] } "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha\"\n  ]\n}\n                  \t "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{ \"query\": [\n    \"Was Laws of Attraction executive produced and produced by Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha\"\n  ]\n}\n                    "}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q742589.\",\n    \"  ?resource wdt:P50 wd:Q160755.\",\n    \"  ?resource wdt:P130 wd:Q160755.\",\n    \"  ?resource wdt:P178 wd:Q160755.\",\n    \"  ?resource wdt:P27 wd:Q160755.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"Was Kagemusha edited, executive produced, produced, and written by Akira Kurosawa?\"\n  ]\n}\n                    "}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{ \"query\": [\n    \"Was Kagemusha edited, executive produced, produced, and written by Akira Kurosawa?\"\n  ]\n}\n                    "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P179 ?director .\",\n    \"  ?work wdt:P373 ?editor .\",\n    \" wd:Q206485 wdt:P179 ?director .\",\n    \" wd:Q206485 wdt:P373 ?editor .\",\n    \"  ?work wdt:P50 ?writer .\",\n    \" wd:Q206485 wdt:P50 ?writer .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:6545 kg:6296 .\",\n    \"  ?resource kg:8202 kg:6296 .\",\n    \"  ?resource kg:7913 kg:6296 .\",\n    \"  ?resource kg:8202 kg:9267 .\",\n    \"  ?resource kg:7913 kg:8650 .\"\n  ] }\n  \t\t\t\t\t \t\t        \t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?director .\",\n    \"  ?resource wdt:P57 ?writer .\",\n    \"Ole John, Jørgen Leth, and Jens Jørgen Thorsen.\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q35979475 ;\",\n    \"?resource wdt:P58 wd:Q35979475 ;\",\n    \"?resource wdt:P1040 wd:Q35979475 .\"\n  ] } "}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2033 kg:1751 .\",\n    \"  ?resource kg:0860 kg:1751 .\",\n    \"  ?resource kg:2823 kg:1751 .\",\n    \"  ?resource kg:2033 kg:2915 .\",\n    \"  ?resource kg:0860 kg:2915 .\",\n    \"  ?resource kg:2823 kg:2915 .\",\n    \"  ?resource kg:2033 kg:7403 .\",\n    \"  ?resource kg:0860 kg:7403 .\",\n    \"  ?resource kg:2823 kg:7403 .\",\n    \"} LIMIT 10\"\n]}\n                    "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer\"\n  ]\n}\n            \t       "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t  \t     "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{ \"query\": [\"$16\", \"$17\"] }\n                    "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits\"\n  ]\n}\n            \t  \t   \t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{ \"query\": [\n    \"Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits\"\n  ]\n}\n                    "}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P50 wd:Q123456789 .\", \">// P50 is author, Q123456789 is David Zucker\"\n    ,\n    \"  ?item wdt:P130 wd:Q123456789 .\", \">// P130 is executive producer, same person\"\n    ,\n    \"  ?item wdt:P57 wd:Q123456789 .\" , \">// P57 is director, same person\"\n    ,\n    \"}\"\n  ]\n}\n             \t      "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P106/wdt:P279* wd:Q482250 .\",\n    \"  ?work p:P50 ?person .\",\n    \"  ?statement ps:P50 ?person ;\",\n    \"             pq:P373 ?role .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8518 kg:7826 ?resource .\",\n    \"  kg:0721 kg:7826 ?resource .\",\n    \"kg:8090 kg:7826 ?resource .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez\"\n  ]\n}\n                  \t "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n          \t         "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{ \"query\": [\n    \"Was Grindhouse written and directed by Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez?\"\n  ]\n}\n            \t       "}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P50 ?author.\",\n    \"  ?author wdt:P106 wd:Q33998.\",\n    \"  VALUES ?work { wd:Q767775 wd:Q170587 wd:Q124167 wd:Q124168 }\",\n    \"  ?resource wdt:P170 ?work.\"\n  ]}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q3282637 .\",\n    \"?resource wdt:P58/wd:Q567519, wd:Q686125, wd:Q327427, wd:Q2789885 .\",\n    \"}\"\n  ]\n}\n          \t \t\t\t\t \t  "}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:7034 kg:0244 .\", \">// occupation film producer\"\n   ,\n    \"  ?resource kg:8123 kg:6772 .\", \">// edited Katzelmacher\"\n   ,\n    \"  ?resource kg:8123 kg:7250 .\", \">// edited Lili Marleen\"\n   ,\n    \"  ?resource kg:8123 kg:2998 .\", \">// edited Whity\"\n    ,\n    \"  ?resource kg:8123 kg:9419 .\" , \">// edited The Niklashausen Journey\"\n    ,\n    \"} \"\n  ]\n}\n                    "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P58 ?writer .\",\n    \"  VALUES (?director ?writer) {\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\"\n    ] } "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q15042700 .\",\n    \"?resource wdt:P58 wd:Q15042700 .\",\n    \"?resource wdt:P57 wd:Q7174311 .\",\n    \"?resource wdt:P58 wd:Q7174311 .\",\n    \"?resource wdt:P57 wd:Q5542223 .\",\n    \"?resource wdt:P58 wd:Q5542223 .\",\n    \"?resource wdt:P57 wd:Q7407299 .\",\n    \"?resource wdt:P58 wd:Q7407299 .\",\n    \"?resource wdt:P57 wd:Q4500 .\",\n    \"?resource wdt:P58 wd:Q4500 .\"\n  ] }\n  \t\t\t\t\t \t\t\t\t\t  \t\t\t\t\t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:4382 kg:0768 .\",\n    \"  ?resource kg:4382 kg:1058 .\",\n    \"  ?resource kg:4382 kg:0085 .\",\n    \"What was directed by and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan\"\n]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P58 ?writer .\",\n    \" wd:Q1023496 wdt:P57 ?director .\",\n    \"  wd:Q1023496 wdt:P58 ?writer .\",\n    \"  ?work wdt:P78 ?editor .\",\n    \"  wd:Q1023496 wdt:P78 ?editor .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:3394 kg:0969 .\",\n    \"  ?resource kg:6803 kg:4347 .\",\n    \"  ?resource kg:0323 kg:9492 .\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P57 ?executive_producer.\",\n    \"  ?resource wdt:P68 ?writer.\",\n    \"  ?executive_producer wdt:P31 wd:Q209580.\",\n    \"  ?writer wdt:P31 wd:Q209580.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q17738 ;\",\n    \"             wdt:P58 wd:Q165713 ;\",\n    \"             wdt:P58 wd:Q181803 ;\",\n    \"             wdt:P58 wd:Q3968346 ;\",\n    \"             wdt:P1431 wd:Q17738 ;\",\n    \"             wdt:P1431 wd:Q165713 ;\",\n    \"             wdt:P1431 wd:Q181803 ;\",\n    \"             wdt:P1431 wd:Q3968346 ;\",\n    \"             wdt:P106 wd:Q7042855 .\"\n  ] } "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:1706 kg:8244 .\",\n    \"  ?resource kg:2001 kg:0534 .\",\n    \"  ?resource kg:2001 kg:8405 .\",\n    \"The query should return resources that are film editors who were executive producers for Star Wars: Episode IV, I, and VI, as well as the movie 'Star Whores'. However, upon closer examination, it seems there might be a mistake in how the properties are connected. The original question asks if one person did all these roles across multiple films, but the current query structure is linking each role to each film separately without connecting them to the same resource. This could lead to incorrect results because it's not ensuring that the same ?resource has all those properties for all listed films. To fix this, we need to ensure that the same person is connected as a film editor and executive producer across all four movies mentioned.\" ]\n}\n                    "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud written by , edited by  , and directed by Ole John  , Jens Jørgen Thorsen  , and Jørgen Leth\"\n  ]\n}\n          \t         "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t   \t\t\t\t   "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{ \"query\": [\n    \"Was Stop for Bud written by, edited by, and directed by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?\"\n  ]\n}\n                    "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q5827439.\",\n    \"  ?resource wdt:P136 wd:Q173352.\",\n    \"  ?resource wdt:P136 wd:Q173353.\",\n    \"  ?resource wdt:P136 wd:Q138084.\",\n    \"  ?resource wdt:P19 wdt:P136 wd:Q173352.\"\n  ] } "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q613974 .\",\n    \"?resource wdt:P58 wd:Q208910 .\",\n    \"?resource wdt:P58 wd:Q1869678 .\",\n    \"?resource wdt:P1431 wd:Q165713 .\",\n    \"?resource wdt:P1431 wd:Q192403 .\"\n  ] } "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:9276 kg:1454 .\", \">// screenwriter of Anyone Lived in a Pretty How Town\"\n    ,\n    \"?x kg:9276 kg:6560 .\", \">// screenwriter of 1:42.08\"\n    ,\n    \"?x kg:9276 kg:2752 .\", \">// screenwriter of Look at Life\"\n    ,\n    \"?x kg:9100 kg:3763 .\", \">// executive producer of Star Wars: Episode I – The Phantom Menace\"\n    ,\n    \"?x kg:9100 kg:7291 .\" , \">// executive producer of The Land Before Time\"\n    ,\n    \"}\"\n]}\n                    "}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P1629 wd:Q206442.\",\n    \"  ?resource wdt:P1629 wd:Q50287.\"\n  ] } "}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q1361018 .\",\n    \"?resource wdt:P57 wd:Q2086445 .\",\n    \"?resource wdt:P58 wd:Q1361018 .\",\n    \"?resource wdt:P58 wd:Q2086445 .\",\n    \"?resource wdt:P1040 wd:Q1361018 .\",\n    \"?resource wdt:P1040 wd:Q2086445 .\",\n    \"?resource wdt:P1431 wd:Q1361018 .\",\n    \"?resource wdt:P1431 wd:Q2086445 .\",\n    \"?resource wdt:P106 wd:Q3282637 .\"\n  ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0443 kg:7714 .\",\n    \"?resource kg:0638 kg:2699 .\",\n    \"?resource kg:0638 kg:9862 .\",\n    \"?resource kg:1836 kg:2699 .\",\n    \"?resource kg:1836 kg:9862 .\",\n    \"?resource kg:1486 kg:2699 .\",\n    \"?resource kg:1486 kg:9862 .\",\n    \"?resource kg:5247 kg:2699 .\",\n    \"?resource kg:5247 kg:9862 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker  , and David Zucker\"\n  ]\n}\n           \t  \t   \t "}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker\"\n  ]\n}\n            \t       "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214798.\",\n    \"  ?resource wdt:P136 wd:Q11418.\",\n    \"  ?resource wdt:P101 wd:Q11418.\",\n    \"  ?resource wdt:P57 ?work.\",\n    \"  ?work wdt:P136 wd:Q11418.\"\n  ] } "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q1140578 .\",\n    \"  ?resource wdt:P57 wd:Q2085 .\",\n    \"  ?resource wdt:P58 wd:Q1140578 .\",\n    \"  ?resource wdt:P58 wd:Q2085 .\",\n    \"  ?resource wdt:P1431 wd:Q1140578 .\",\n    \"  ?resource wdt:P1431 wd:Q2085 .\",\n    \"  ?resource wdt:P1431 wd:Q1511905 .\",\n    \"  ?resource wdt:P1431 wd:Q583406 .\",\n    \"}\" ]\n}\n                    "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8073 kg:1760 .\",\n    \"  ?resource kg:3473 kg:1760 .\",\n    \"  ?resource kg:4070 kg:1760 .\",\n    \"  ?resource kg:4070 kg:7512 .\",\n    \"  ?resource kg:4070 kg:3325 .\",\n    \"  ?resource kg:4070 kg:7851 .\",\n    \"}\"\n]}\n                    "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman\"\n  ]\n}\n                    "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{ \"query\": [\n    \"Which film was directed and written by Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman?\"\n  ]\n}\n            \t       "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:3501 kg:0295 .\", \">// Vilgot Sjöman directed film\"\n    ,\n    \"?film kg:1640 kg:0295 .\", \">// Hans Alfredson directed film\"\n    ,\n    \"?film kg:9491 kg:0295 .\", \">// Jörn Donner directed film\"\n    ,\n    \"?film kg:0868 kg:0295 .\", \">// Gustaf Molander directed film\"\n    ,\n    \"?film kg:9984 kg:0295 .\" , \">// Ingmar Bergman directed film\"\n    ,\n    \"?film kg:3501 kg:0772 .\" ,\n    \"?film kg:1640 kg:0772 .\",\n    \"?film kg:9491 kg:0772 .\",\n    \"?film kg:0868 kg:0772 .\",\n    \"?film kg:9984 kg:0772 .\" ,\n    \"} \"\n] }\n                    "}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3- D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3- D\"\n  ]\n}\n                   \t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3-D: Game Over a star, director, and cinematographer of Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?\"\n] }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3-?D: Game Over a star, director, and cinematographer of Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-?D\"\n]\n}\n                    "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n                    "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay- Chaplin Revue of 1916?\"\n  ]\n}\n                    "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Composer Revue of 1916\"\n  ]\n}\n                    "}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P136 <Q205798> .\",\n    \"}\"\n  ]\n}\n            \t       "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was directed by , written by , and edited by Yūdai Yamaguchi  , Ernesto Díaz Espinoza  , Adrián García Bogliano  , and Yoshihiro Nishimura\"\n  ]\n}\n           \t        "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t   \t\t\t\t   "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{ \"query\": [\n    \"What was directed by, written by, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?\"\n  ]\n}\n                    "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q727850 ;\", \"wikipedia_en:P345 \\\"Pietà, Dream, and Moebius\\\" .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:0214 kg:1068 .\",\n    \"  ?resource kg:8387 kg:... .\", \">// Need to find the correct property for executive producer\"\n    ,\n    \"  ?resource kg:... kg:... .\" , \">// Need to find the correct properties and values for editing Pietà, Dream, and Moebius\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P57 ?filmProducerExecutive.\",\n    \"  ?filmProducerExecutive wdt:P106 wd:Q188495.\",\n    \"  ?resource wdt:P179 wd:Q22382.\",\n    \"  ?resource wdt:P179 wd:Q22383.\",\n    \"  ?resource wdt:P179 wd:Q22384.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q3282637 .\",\n    \"  ?resource wdt:P1431 wd:Q5437360 .\",\n    \"  ?resource wdt:P1431 wd:Q12813010 .\",\n    \"  ?resource wdt:P1431 wd:Q6084069 .\",\n    \"  ?resource wdt:P58 wd:Q5437360 .\",\n    \"  ?resource wdt:P58 wd:Q12813010 .\",\n    \"  ?resource wdt:P58 wd:Q6084069 .\",\n    \"  ?resource wdt:P1040 wd:Q5437360 .\",\n    \"  ?resource wdt:P1040 wd:Q12813010 .\",\n    \"  ?resource wdt:P1040 wd:Q6084069 .\",\n    \"}\"\n] }\n            \t       "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0676 kg:7053 .\",\n    \"?resource kg:0676 kg:9994 .\",\n    \"?resource kg:0676 kg:3740 .\",\n    \"?resource kg:0676 kg:3912 .\",\n    \"?resource kg:0676 kg:5795 .\",\n    \"?resource kg:0676 kg:4183 .\"\n  ] }\n           \t        "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence\"\n  ]\n}\n                    "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t  \t   \t "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{ \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?demi kg:5049 ?spouse .\",\n    \"?work1 kg:9940 ?demi .\",\n    \"?work1 kg:1497 ?work1 .\",\n    \"?work2 kg:9940 ?demi .\",\n    \"?work2 kg:9335 ?work2 .\",\n    \"?work3 kg:9940 ?demi .\",\n    \"?work3 kg:5738 ?work3 .\",\n    \"}\"\n  ]\n}\n           \t\t\t\t\t\t\t  "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q214879.\",\n    \"  ?item wdt:P136 wd:Q11424.\",\n    \"  ?item wdt:P136 wd:Q11425.\",\n    \"  ?item wdt:P136 wd:Q11426.\"\n    ,\n    \"}\"\n  ]\n}\n              \t     "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:9543 kg:7212 .\", \">// director of The Floorwalker\"\n   ,\n    \"  ?x kg:2179 kg:1132 .\", \">// screenwriter of Shoulder Arms\"\n    ,\n    \"x kg:2300 kg:8169 .\" , \">// cast member of The Great Dictator\"\n    ,\n    \"x kg:8432 kg:8169 .\" , \">// composer of The Great Dictator\"\n    ,\n    \"}\" ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P31 wd:Q5.\",\n    \"  ?cinematographer wdt:P106 wd:Q28794.\",\n    \"  ?cinematographer wdt:P136 wd:Q11424.\",\n    \"  ?cinematographer wdt:P136 wd:Q11425.\"\n  ] } "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer\"\n  ]\n}\n           \t   \t    "}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$16\", \"$17\"] }\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{ \"query\": [\n    \"Was a cinematographer and star of Contagion, Schizopolis, Ocean's Eleven, and Full Frontal Magic Mike XXL's editor and executive producer\"\n  ]\n}\n                    "}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  ?work wdt:P164 ?cinematographer ;\",\n    \"         wdt:P369 ?editor .\",\n    \"  VALUES ?work { wd:Q205877 }\", \">// Six Men Getting Sick\",\n    \"}\",\n    \"\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  ?film kg:6545 kg:1543 .\", \">// Six Men Getting Sick cast member\",\n    \"  ?film kg:4111 ?cinematographer .\", \">// cinematographer of the film\",\n    \"  ?film kg:2731 ?editor .\", \">// editor of the film\",\n    \"  VALUES ?film { kg:3903 kg:4169 kg:8978 kg:3018 kg:0127 kg:0514 }\" ,\n    \"} \"\n  ]\n}\n                    "}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry\"\n  ]\n}\n                    "}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q2493884 .\",\n    \"  ?resource wdt:P57 wd:Q2298257 .\",\n    \"  ?resource wdt:P1040 wd:Q2493884 .\",\n    \"What writer, editor, and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry\"\n]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:7097 kg:8516 .\", \">// screenwriter influenced by Jacques Demy\"\n   ,\n    \"  ?resource kg:4212 kg:8516 .\", \">// spouse of Jacques Demy\"\n    ,\n    \"  ?resource kg:6839 kg:4445 .\", \">// director of Vagabond\"\n    ,\n    \"  ?resource kg:6839 kg:3502 .\" , \">// director of The Gleaners and I\"\n    ,\n    \"  ?resource kg:8802 kg:4445 .\", \">// film editor of Vagabond\"\n    ,\n    \"  ?resource kg:8802 kg:3502 .\" , \">// film editor of The Gleaners and I\"\n    ,\n    \"}\" ]\n}\n                    "}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page\"\n  ]\n}\n                    "}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{ \"query\": [\n    \"Was The Confession's editor, executive producer, and cinematographer a star and writer of Destiny, The Waiting Room, and The Third Page\"\n  ]\n}\n                    "}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q742580.\",\n    \"  ?resource wdt:P164 wd:Q19535.\"\n  ]}\n             \t      "}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n           \t  \t  \t \t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8876 kg:4025 .\",\n    \"  ?resource kg:1977 kg:3703 .\",\n    \"  ?resource kg:2136 kg:2020 .\",\n    \"The Floorwalker, Work, Pay Day, Modern Times\"\n  ] }\n                    "}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214789.\",\n    \"  ?resource wdt:P136 wd:Q114148.\",\n    \"  ?resource wdt:P101 wd:Q114148.\"\n  ]}\n         \t\t\t\t    \t\t\t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q6084069 ;\",\n    \"  wdt:P1431 wd:Q6084069 ;\",\n    \"  wdt:P1040 wd:Q6084069 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?resource wdt:P58 wd:Q5437360 ;\",\n    \"  wdt:P1431 wd:Q5437360 ;\",\n    \"wdt:P1040 wd:5437360 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?resource wdt:P58 wd:Q12813010 ;\",\n    \"  wdt:P1431 wd:Q12813010 ;\",\n    \"wdt:P1040 wd:12813010 .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:4979 kg:7462 .\", \">//executive produced The Waiting Room\"\n    ,\n    \"  ?x kg:4979 kg:0563 .\", \">//executive produced Fate\"\n    ,\n    \"x kg:7206 kg:7462 .\", \">//edited The Waiting Room\"\n    ,\n    \"?x kg:7206 kg:0563 .\" , \">//edited Fate\"\n    ,\n    \"?x kg:8079 kg:7462 .\" , \">//screenwriter of The Waiting Room\"\n    ,\n    \"}\" ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman\"\n  ]\n}\n                    "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{ \"query\": [\n    \"Which film was directed by and was written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?\"\n  ]\n}\n                    "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\"\n  ]\n}\n           \t        "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{ \"query\": [\n    \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\"\n  ]\n}\n          \t  \t      "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P86 ?film_editor .\",\n    \"  ?film_editor wdt:P21 ?spouse .\",\n    \"  ?spouse wdt:P31 wd:Q5 .\",\n    \"  ?spouse wdt:P170 ?work .\",\n    \"  VALUES ?work { wd:Q46897 wd:Q46898 wd:Q46899 wd:Q46900 wd:Q46901 }\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q567519 .\",\n    \"  ?resource wdt:P58 wd:Q570483 .\",\n    \"  ?resource wdt:P58 wd:Q327427 .\",\n    \"  ?resource wdt:P58 wd:Q543382 .\",\n    \"  ?resource wdt:P58 wd:Q878673 .\",\n    \"}\"\n  ]\n}\n            \t       "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?person kg:8916 ?spouse.\",\n    \"  ?spouse kg:1944 ?screenwriter.\",\n    \"  ?film kg:7713 ?person.\",\n    \"  VALUES ?film { kg:1608 kg:2774 kg:1345 kg:7392 kg:0195 }\",\n    \"}\"\n]}\n                    "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q20645879 .\",\n    \"  ?item wdt:P136 wd:Q186225 .\",\n    \"  ?item wdt:P179 wd:Q186225 .\",\n    \"  ?item wdt:P179 wd:Q40732 .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:9010 kg:1652 .\",\n    \"  ?resource kg:9010 kg:5606 .\",\n    \"  ?resource kg:9010 kg:3805 .\",\n    \"  ?resource kg:3823 kg:female .\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q214798 .\",\n    \"  ?resource wdt:P106 wd:Q188455 .\",\n    \"  ?resource wdt:P136 wd:Q102400 .\",\n    \"  ?resource wdt:P136 wd:Q102401 .\",\n    \"  ?resource wdt:P136 wd:Q102402 .\",\n    \"  ?resource wdt:P136 wd:Q135789 .\",\n    \"  ?resource wdt:P136 wd:Q135790 .\",\n    \"  ?resource wdt:P136 wd:Q135791 .\",\n    \"  ?resource wdt:P136 wd:Q135792 .\",\n    \"  ?resource wdt:P136 wd:Q135793 .\",\n    \"  ?resource wdt:P136 wd:Q135794 .\",\n    \"  ?resource wdt:P136 wd:Q135795 .\",\n    \"  ?resource wdt:P136 wd:Q135796 .\",\n    \"  ?resource wdt:P136 wd:Q135797 .\",\n    \"  ?resource wdt:P136 wd:Q135798 .\",\n    \"  ?resource wdt:P136 wd:Q135799 .\",\n    \"  ?resource wdt:P136 wd:Q135800 .\",\n    \"  ?resource wdt:P136 wd:Q135801 .\",\n    \"  ?resource wdt:P136 wd:Q135802 .\",\n    \"  ?resource wdt:P136 wd:Q135803 .\",\n    \"  ?resource wdt:P136 wd:Q135804 .\",\n    \"  ?resource wdt:P136 wd:Q135805 .\",\n    \"  ?resource wdt:P136 wd:Q135806 .\",\n    \"  ?resource wdt:P136 wd:Q135807 .\",\n    \"  ?resource wdt:P136 wd:Q135808 .\",\n    \"  ?resource wdt:P136 wd:Q135809 .\",\n    \"  ?resource wdt:P136 wd:Q135810 .\",\n    \"  ?resource wdt:P136 wd:Q135811 .\",\n    \"  ?resource wdt:P136 wd:Q135812 .\",\n    \"  ?resource wdt:P136 wd:Q135813 .\",\n    \"  ?resource wdt:P136 wd:Q135814 .\",\n    \"  ?resource wdt:P136 wd:Q135815 .\",\n    \"  ?resource wdt:P136 wd:Q135816 .\",\n    \"  ?resource wdt:P136 wd:Q135817 .\",\n    \"  ?resource wdt:P136 wd:Q135818 .\",\n    \"  ?resource wdt:P136 wd:Q135819 .\",\n    \"  ?resource wdt:P136 wd:Q135820 .\",\n    \"  ?resource wdt:P136 wd:Q135821 .\",\n    \"  ?resource wdt:P136 wd:Q135822 .\",\n    \"  ?resource wdt:P136 wd:Q135823 .\",\n    \"  ?resource wdt:P136 wd:Q135824 .\",\n    \"  ?resource wdt:P136 wd:Q135825 .\",\n    \"  ?resource wdt:P136 wd:Q135826 .\",\n    \"  ?resource wdt:P136 wd:Q135827 .\",\n    \"  ?resource wdt:P136 wd:Q135828 .\",\n    \"  ?resource"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q219170 .\",\n    \"  ?resource wdt:P57 wd:Q198557 .\",\n    \"  ?resource wdt:P57 wd:Q219155 .\",\n    \"resource wdt:P57 wd:Q1277329 .\",\n    \"  ?resource wdt:P58 wd:Q219170 .\",\n    \"  ?resource wdt:P58 wd:Q198557 .\",\n    \"  ?resource wdt:P58 wd:Q219155 .\",\n    \"  ?resource wdt:P58 wd:Q1277329 .\",\n    \"  ?resource wdt:P1040 wd:Q627060 .\",\n    \"  ?resource wdt:P27 wd:Q16 .\"\n  ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:3067 kg:9199 .\",\n    \"?x kg:3067 kg:8180 .\",\n    \"?x kg:3067 kg:7971 .\",\n    \"?x kg:3067 kg:7961 .\",\n    \"?x kg:3210 kg:9199 .\",\n    \"?x kg:3210 kg:8180 .\",\n    \"?x kg:3210 kg:7971 .\",\n    \"?x kg:3210 kg:7961 .\",\n    \"?x kg:0514 kg:7526 .\",\n    \"?x kg:8443 kg:5600 .\"\n  ] }\n  \t\t\t\t\t \t\t\t\t\t  \t\t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q28794.\",\n    \"  ?item wdt:P106 wd:Q188425.\",\n    \"  ?item wdt:P136 wd:Q11424.\",\n    \"  ?item wdt:P136 wd:Q11425.\",\n    \"    ?item wdt:P136 wd:Q11426.\",\n    \"    ?item wdt:P136 wd:Q11427.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{ \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P58 ?director .\",\n    \"  ?work wdt:P1431 ?director .\",\n    \"  VALUES ?work { wd:Q378013 wd:Q391143 wd:Q594033 wd:Q232108 }\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?executiveProducer WHERE {\",\n    \"  ?work wdt:P1431 ?executiveProducer .\",\n    \"  VALUES ?work { wd:Q378013 wd:Q391143 wd:Q594033 wd:232108 }\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:9361 kg:7911 .\",\n    \"  ?resource kg:9685 kg:7911 .\",\n    \"  ?resource kg:7818 kg:0165 .\",\n    \"  ?resource kg:7818 kg:9655 .\",\n    \"  ?resource kg:7818 kg:7514 .\",\n    \"  ?resource kg:7818 kg:0643 .\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n                    "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [\n    \"Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n                    "}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [\n    \"Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n                    "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct\"\n  ]\n}\n                    "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"  ?film wdt:P57 wd:Q1687239 .\",\n    \"  ?film wdt:P57 wd:Q562108 .\",\n    \"  ?film wdt:P58 wd:Q1687239 .\",\n    \"  ?film wdt:P58 wd:Q562108 .\",\n    \"  ?film wdt:P58 wd:Q35979475 .\",\n    \"  ?film wdt:P162 wd:Q1687239 .\",\n    \"  ?film wdt:P162 wd:Q562108 .\",\n    \"  ?film wdt:P162 wd:Q35979475 .\",\n    \"  ?film wdt:P1040 wd:Q1687239 .\",\n    \"  ?film wdt:P1040 wd:Q562108 .\",\n    \"  ?film wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n] }\n                    "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:9282 kg:7564 .\",\n    \"?film kg:1894 ?director .\",\n    \"?film kg:8695 ?screenwriter .\",\n    \"?film kg:9245 ?editor .\",\n    \"?film kg:5044 ?producer .\",\n    \"FILTER ( ?director IN (kg:4421, kg:3691) ) .\",\n    \"FILTER ( ?screenwriter IN (kg:4421, kg:0840, kg:3691) ) .\",\n    \"FILTER ( ?editor IN (kg:4421, kg:0840, kg:3691) ) .\",\n    \"FILTER ( ?producer IN (kg:4421, kg:0840, kg:3691) ) .\",\n    \"} LIMIT 10\"\n]}\n                    "}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// occupation writer\",\n    \"  ?resource wdt:P106 wd:Q188455 .\", \">// occupation cinematographer\",\n    \"   ?resource wdt:P106 wd:Q33993 .\", \">// occupation film editor\",\n    \"   ?resource wdt:P106 wd:Q27442 .\", \">// occupation director\",\n    \"   ?resource wdt:P106 wd:Q115825 .\", \">// occupation star\",\n    \"   ?resource wdt:P136 wd:Q190318 .\", \">// work Sin City\",\n    \"   ?resource wdt:P136 wd:Q473533 .\", \">// work The Adventures of Sharkboy and Lavagirl in 3- D\",\n    \"   ?resource wdt:P1285 wd:Q209553 .\", \">// executive producer From Dusk till Dawn: The Series\",\n    \"} \"\n  ]\n}\n         \t\t\t\t\t\t\t\t\t\t "}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q192115 .\",\n    \"  ?resource wdt:P57 wd:Q656357 .\",\n    \"  ?resource wdt:P58 wd:Q192115 .\",\n    \"  ?resource wdt:P58 wd:Q656357 .\",\n    \"  ?resource wdt:P1431 wd:Q15622760 .\",\n    \"}\"\n] }\n                    "}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:4649 kg:2632 .\", \">// director of Sin City\",\n    \"  ?resource kg:4649 kg:0710 .\", \">// director of Sharkboy and Lavagirl\",\n    \"  ?resource kg:0035 kg:2632 .\", \">// screenwriter of Sin City\",\n    \"  ?resource kg:0035 kg:0710 .\", \">// screenwriter of Sharkboy and Lavagirl\",\n    \"  ?resource kg:9651 kg:2632 .\", \">// cinematographer of Sin City\",\n    \"  ?resource kg:9651 kg:0710 .\", \">// cinematographer of Sharkboy and Lavagirl\",\n    \"  ?resource kg:0764 kg:2632 .\", \">// star of Sin City\",\n    \"  ?resource kg:0764 kg:0710 .\", \">// star of Sharkboy and Lavagirl\",\n    \"  ?resource kg:0297 kg:2632 .\", \">// editor of Sin City\",\n    \"  ?resource kg:0297 kg:0710 .\", \">// editor of Sharkboy and Lavagirl\",\n    \"  ?resource kg:8073 kg:6169 .\" , \">// executive producer of From Dusk till Dawn: The Series\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P106 wd:Q188452.\",\n    \"  ?resource wdt:P106 wd:Q165093.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P136 wd:Q179585.\",\n    \"  ?resource wdt:P136 wd:Q179586.\"\n  ] } "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?person kg:8314 kg:5269 .\", \">// person is director of This Night (kg:5269)\"\n    ,\n    \"  ?person kg:7878 kg:5269 .\", \">// person is screenwriter of This Night\"\n    ,\n    \"  ?person kg:0343 kg:3960 .\", \">// person is film editor of Whity (kg:3960)\"\n    ,\n    \"  ?person kg:0343 kg:6224 .\", \">// person is film editor of Rio das Mortes\"\n    ,\n    \"  ?person kg:0343 kg:1489 .\" , \">// person is film editor of Lili Marleen\"\n    ,\n    \"} \"\n  ]\n}\n                    "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P161 wd:Q104022.\",\n    \"  ?resource wdt:P161 wd:Q53282.\",\n    \"  ?resource wdt:P161 wd:Q7977.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{ \"query\": [\"$Night_of_the_Living_Dead\"] }\n  \t\t\t\t   \t\t\t    \t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\\n\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// Writer\\n\",\n    \"  ?resource wdt:P106 wd:Q188455 .\", \">// Cinematographer\\n\",\n    \"  ?resource wdt:P106 wd:Q33994 .\", \">// Director\\n\",\n    \"  ?resource wdt:P130 wd:Q273823 .\", \">// Look at Life\\n\",\n    \"  ?resource wdt:P130 wd:Q56564 .\", \">// Anyone Lived in a Pretty How Town\\n\",\n    \"  ?resource wdt:P130 wd:Q190373 .\", \">// Filmmaker\\n\",\n    \"  ?resource wdt:P2148 wd:Q12115 .\", \">// Star Wars: Episode IV – A New Hope\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n            \t       "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q1869678 .\",\n    \"  ?resource wdt:P57 wd:Q613974 .\",\n    \"wrt:P57 wd:Q1415127 .\",\n    \"  ?resource wdt:P58 wd:Q1869678 .\",\n    \"  ?resource wdt:P58 wd:Q613974 .\",\n    \"  ?resource wdt:P58 wd:Q1415127 .\",\n    \"  ?resource wdt:P1431 wd:Q17738 .\",\n    \"}\"\n] }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:7785 kg:4958 .\", \">// Look at Life, directed by ?x\"\n    ,\n    \"?x kg:7785 kg:7238 .\", \">// Anyone Lived in a Pretty How Town, directed by ?x\"\n    ,\n    \"?x kg:7785 kg:6810 .\", \">// Filmmaker, directed by ?x\"\n    ,\n    \"?x kg:9966 kg:4958 .\", \">// Look at Life, screenwriter ?x\"\n    ,\n    \"?x kg:9966 kg:7238 .\", \">// Anyone Lived in a Pretty How Town, screenwriter ?x\"\n    ,\n    \"?x kg:9966 kg:6810 .\", \">// Filmmaker, screenwriter ?x\"\n    ,\n    \"?x kg:7129 kg:4958 .\", \">// Look at Life, executive producer ?x\"\n    ,\n    \"?x kg:7129 kg:7238 .\", \">// Anyone Lived in a Pretty How Town, executive producer ?x\"\n    ,\n    \"?x kg:7129 kg:6810 .\", \">// Filmmaker, executive producer ?x\"\n    ,\n    \"?x kg:9841 kg:4958 .\", \">// Look at Life, cinematographer ?x\"\n    ,\n    \"?x kg:9841 kg:7238 .\", \">// Anyone Lived in a Pretty How Town, cinematographer ?x\"\n    ,\n    \"?x kg:9841 kg:6810 .\", \">// Filmmaker, cinematographer ?x\"\n    ,\n    \"?x kg:7785 kg:7820 .\" , \">// Star Wars: Episode IV – A New Hope, directed by ?x\"\n    ,\n    \"?x kg:9966 kg:7820 .\" , \">// Star Wars: Episode IV – A New Hope, screenwriter ?x\"\n    ,\n    \"?x kg:7129 kg:7820 .\" , \">// Star Wars: Episode IV – A New Hope, executive producer ?x\"\n    ,\n    \"}\"\n]}\n                    "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n                    "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 wd:Q1687239 .\",\n    \"?film wdt:P57 wd:Q562108 .\",\n    \"?film wdt:P57 wd:Q35979475 .\",\n    \"?film wdt:P162 wd:Q1687239 .\",\n    \"?film wdt:P162 wd:Q562108 .\",\n    \"?film wdt:P162 wd:Q35979475 .\",\n    \"?film wdt:P58 wd:Q1687239 .\",\n    \"?film wdt:P58 wd:Q562108 .\",\n    \"?film wdt:P58 wd:Q35979475 .\",\n    \"?film wdt:P1040 wd:Q1687239 .\",\n    \"?film wdt:P1040 wd:Q562108 .\",\n    \"?film wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}\n             \t      "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:6893 ?film .\",\n    \"?film kg:6845 kg:0888 .\",\n    \"?film kg:4053 kg:0888 .\",\n    \"?film kg:1364 kg:0888 .\",\n    \"?film kg:5191 kg:0888 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\"\n  ]\n}\n                    "}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{ \"query\": [\n    \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\"\n  ]\n}\n                    "}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{ \"query\": [\n    \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\"\n  ]\n}\n                    "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Did a film producer write, executive produce, edit, and direct Pietà, Moebius, and Dream?\"\n  ]\n}\n             \t      "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t      "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2674 kg:6404 .\",\n    \"  ?resource kg:8978 kg:6632 .\",\n    \"  ?resource kg:0023 kg:6632 .\",\n    \"Did a film producer write, executive produce, edit, and direct Pietà, Moebius, and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: kg:9726 is director, kg:6632 is Moebius, kg:6404 is screenwriter, kg:0023 is film editor, kg:8978 is executive producer, kg:6094 is film producer, kg:2636 is Dream, kg:2674 is occupation, kg:9012 is Pietà.\"\n]\n}\n  \t\t\t\t   \t\t\t\t\t    \t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\"\n  ]\n}\n                    "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 wd:Q1687239 ;\",\n    \"wdt:P57 wd:Q562108 ;\",\n    \"wdt:P57 wd:Q35979475 .\",\n    \"?film wdt:P58 wd:Q1687239 ;\",\n    \"wdt:P58 wd:Q562108 ;\",\n    \"wdt:P58 wd:Q35979475 .\",\n    \"?film wdt:P1040 wd:Q1687239 ;\",\n    \"wdt:P1040 wd:Q562108 ;\",\n    \"wdt:P1040 wd:Q35979475 .\"\n  ] }\n                    "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:0148 kg:9925 .\",\n    \"?film kg:2122 kg:9685 .\",\n    \"?film kg:2122 kg:2592 .\",\n    \"?film kg:2122 kg:7313 .\",\n    \"?film kg:5731 kg:9685 .\",\n    \"?film kg:5731 kg:2592 .\",\n    \"?film kg:5731 kg:7313 .\",\n    \"?film kg:3447 kg:9685 .\",\n    \"?film kg:3447 kg:2592 .\",\n    \"?film kg:3447 kg:7313 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n                    "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:4510 kg:7692 .\",\n    \"?film kg:6197 ?director .\",\n    \"?film kg:7044 ?editor .\",\n    \"?film kg:5693 ?screenwriter .\",\n    \"?film kg:1566 ?producer .\",\n    \"FILTER ( ?director = kg:0501 || ?director = kg:2538 || ?director = kg:3383 ) .\",\n    \"FILTER ( ?editor = kg:0501 || ?editor = kg:2538 || ?editor = kg:3383 ) .\",\n    \"FILTER ( ?screenwriter = kg:0501 || ?screenwriter = kg:2538 || ?screenwriter = kg:3383 ) .\",\n    \"FILTER ( ?producer = kg:0501 || ?producer = kg:2538 || ?producer = kg:3383 ) .\",\n    \"} LIMIT 1\"\n] }\n             \t      "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"Fate\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"The Confession\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"The Waiting Room\\\"@en .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4985 kg:7743 ?resource .\",\n    \"  kg:4985 kg:3223 ?resource .\",\n    \"kg:4985 kg:1707 ?resource .\",\n    \"kg:4985 kg:0105 ?resource .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q7278549.\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q25479948 wdt:P57 ?resource .\",\n    \"  wd:Q25479948 wdt:P1040 ?resource .\",\n    \"  wd:Q25479948 wdt:P58 ?resource .\",\n    \"  wd:Q25479948 wdt:P1431 ?resource .\",\n    \"  ?resource wdt:P57 wd:Q5437360 .\",\n    \"  ?resource wdt:P57 wd:Q6084069 .\",\n    \"  ?resource wdt:P57 wd:Q12813010 .\"\n    ,\n    \"}\"\n] }\n                    "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1593 kg:4165 ?resource .\",\n    \"  kg:1593 kg:7137 ?resource .\",\n    \"kg:1593 kg:5315 ?resource .\",\n    \"kg:1593 kg:6383 ?resource .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1983 ?executiveProducer .\",\n    \"  ?film wdt:P57 ?director .\",\n    \"wrt:P57 ?writer .\",\n    \"  VALUES (?executiveProducer ?director ?writer) { (wd:Q20648 wd:Q20648 wd:Q20648) }\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà\"\n  ]\n}\n             "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:8051 kg:3231 .\", \">// director of Pietà\",\n    \"?x kg:6256 kg:6915 .\", \">// film editor of Moebius\",\n    \"?x kg:6256 kg:8152 .\", \">// film editor of One on One\",\n    \"?x kg:6256 kg:0511 .\", \">// film editor of Amen\",\n    \"?x kg:4656 kg:3231 .\" , \">// executive producer of Pietà\"\n    ,\n    \"}\"\n] }\n            \t       "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"\n  ]\n}\n                    "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{ \"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder, Rainer Werner Fassbinder, and Rainer Werner Fassbinder were edited by, were directed by, and starred Rainer Werner Fassbinder\"\n  ]\n}\n                    "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{ \"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"\n  ]\n}\n                    "}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n  ]\n}\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School  's founder\"\n  ]\n}\n          \t         "}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School  's founder\"\n  ]\n}\n          \t         "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P108 wd:Q2354967 .\", \">// Plessey Electronics Limited (wd:Q2354967) is an employer of the resource.\",\n    \"  ?resource wdt:P108 wd:Q121327 .\", \">// CERN (wd:Q121327) is another employer of the resource.\",\n    \"  ?resource wdt:P108 wd:Q549643 .\", \">// School of Electronics and Computer Science, University of Southampton (wd:Q549643) is another employer of the resource.\",\n    \"  ?resource wdt:P39 wd:Q278585 .\", \">// World Wide Web Consortium (W3C) (wd:Q278585) is an organization that the resource is a member of, specifically as a founder or employee.\",\n    \"  ?resource wdt:P39 wd:Q164058 .\", \">// Open Data Institute (ODI) (wd:Q164058) is another organization where the resource is a member, again as a founder or employee.\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}\n                    "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P108 wd:Q7095994 .\",\n    \"  ?resource wdt:P108 wd:Q37033 .\",\n    \"  ?resource wdt:P108 wd:Q42944 .\",\n    \"  ?resource wdt:P108 wd:Q7204713 .\",\n    \"  ?resource wdt:P108 wd:Q7432436 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2985 ?o .\", \">// Open Data Institute as founder or employee? Need to clarify the property.\",\n    \"  ?resource kg:5212 ?o .\", \">// World Wide Web Consortium as founder or employee?\",\n    \"  ?resource kg:7697 ?o .\", \">// CERN as employer\",\n    \"  ?resource kg:7166 ?o .\", \">// Plessey as employer\",\n    \"  ?resource kg:9015 ?o .\", \">// School of Electronics and Computer Science, University of Southampton as employer\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\\n\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// Writer\\n\",\n    \"    ?resource wdt:P106 wd:Q188455 .\", \">// Cinematographer\\n\",\n    \"    ?resource wdt:P106 wd:Q33993 .\", \">// Star (actor)\\n\",\n    \"    ?resource wdt:P106 wd:Q207550 .\", \">// Composer\\n\",\n    \"    ?resource wdt:P136 wd:Q48044 .\", \">// Planet Terror\\n\",\n    \"    ?resource wdt:P136 wd:Q290823 .\", \">// Sin City: A Dame to Kill For\\n\",\n    \"    ?resource wdt:P136 wd:Q57023 .\", \">// Machete\\n\",\n    \"    ?resource wdt:P136 wd:Q48044 .\", \">// Sin City\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n            \t       "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:3045 kg:9019 .\", \">// screenwriter of Planet Terror\"\n    ,\n    \"  ?x kg:0258 kg:9019 .\", \">// cast member of Planet Terror\"\n    ,\n    \"  ?x kg:0777 kg:9019 .\", \">// director of photography of Planet Terror\"\n    ,\n    \"  ?x kg:2781 kg:9019 .\", \">// composer of Planet Terror\"\n    ,\n    \"  ?x kg:0231 kg:4927 .\", \">// directed Sin City: A Dame to Kill For\"\n    ,\n    \"  ?x kg:0231 kg:3142 .\", \">// directed Machete\"\n    ,\n    \"  ?x kg:0231 kg:7049 .\", \">// directed Sin City\"\n    ,\n    \"  ?x kg:8650 kg:4927 .\", \">// edited Sin City: A Dame to Kill For\"\n    ,\n    \"  ?x kg:8650 kg:3142 .\", \">// edited Machete\"\n    ,\n    \"  ?x kg:8650 kg:7049 .\" , \">// edited Sin City\"\n    ,\n    \"} \"\n  ]\n}\n                    "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Did Pietà's editor and executive producer direct, edit, write, or executive produce Dream and Moebius?\"\n  ]\n}\n           \t   \t   \t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{ \"query\": [\"$16K\", \"$17K\", \"$18K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P86 wdt:P279* wd:Q40201.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P101 wd:Q11424.\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q220394 .\",\n    \"  ?resource wdt:P58 wd:Q220394 .\",\n    \"  ?resource wdt:P112 wd:Q3011043 .\",\n    \"  ?resource wdt:P112 wd:Q64434913 .\",\n    \"  ?resource wdt:P112 wd:Q219400 .\",\n    \"  ?resource wdt:P106 wd:Q3282637 .\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:2683 kg:8008 .\", \">// film producer that founded D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp.\"\n   ,\n    \"  ?resource kg:5337 kg:7916 .\", \">// directed The Brahma Diamond\"\n   ,\n    \"  ?resource kg:7404 kg:2641 .\", \">// wrote His Lost Love\"\n    ,\n    \"  ?resource kg:5337 kg:2683 .\", \">// directed The Birth of a Nation\"\n    ,\n    \"  ?resource kg:8141 kg:9398 .\", \">// founded D.W. Griffith Productions\"\n    ,\n    \"  ?resource kg:8141 kg:9728 .\", \">// founded United Artists Corporation\"\n    ,\n    \"  ?resource kg:8141 kg:2092 .\" , \">// founded David W. Griffith Corp.\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}\n                    "}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P921 ?work.\",\n    \"  ?work wdt:P179 wd:Q460823.\",\n    \"  ?work wdt:P179 wd:Q460824.\"\n  ]}\n                    "}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:3894 kg:3126 .\", \">// director of Brecha\"\n    ,\n    \"  ?resource kg:7660 ?ep .\", \">// executive producer\"\n    ,\n    \"  ?resource kg:4927 ?ed .\", \">// film editor\"\n    ,\n    \"  ?resource kg:4705 ?compo .\", \">// composer\"\n    ,\n    \"  ?resource kg:2635 ?cinem .\", \">// cinematographer\"\n    ,\n    \"  ?ep kg:8773 kg:2746 .\", \">// edited and wrote Primary!\"\n    ,\n    \"  ?ed kg:8773 kg:0465 .\", \">// edited In Your Absence\"\n    ,\n    \"  ?compo kg:8773 kg:2746 .\", \">// composed Primary!\"\n    ,\n    \"  ?cinem kg:8773 kg:0465 .\" , \">// cinematographer for In Your Absence\"\n    ,\n    \"} \"\n  ]\n}\n                    "}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration  , and University of California, San Diego\"\n  ]\n}\n                    "}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{ \"query\": [\n    \"Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration  , and University of California, San Diego\"\n  ]\n}\n                    "}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{ \"query\": [\n    \"Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration  , and University of California, San Diego\"\n  ]\n}\n                    "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3- D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer\"\n  ]\n}\n            \t       "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3- D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer\"\n] }\n                    "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{ \"query\": [\n    \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3- D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer\"\n] }\n                    "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Howl's Moving Castle's executive producer and writer employed by Nibariki, Ghibli Museum, and TMS Entertainment and employed by Shin- e i Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?\"\n  ]\n}\n                    "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{ \"query\": [\n    \"Was Howl's Moving Castle's executive producer and writer employed by Nibariki, Ghibli Museum, and TMS Entertainment and employed by Shin- Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?\"\n  ]\n}\n                    "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{ \"query\": [\n    \"Was Howl' s Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin- Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation\"\n  ]\n}\n                    "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  ?work wdt:P164 ?cinematographer ;\",\n    \"         wdt:P57 ?writer .\",\n    \"  VALUES ?work { wd:Q203897 wd:Q203898 wd:Q203899 wd:Q203896 }\",\n    \"}\",\n    \"\"\n  ]\n}\n                    "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q17738 .\",\n    \"  ?resource wdt:P58 wd:Q17738 .\",\n    \"   ?resource wdt:P1431 wd:Q17738 .\",\n    \"  ?resource wdt:P344 wd:Q1609393 .\",\n    \"  ?resource wdt:P57 wd:Q613974 .\",\n    \"  ?resource wdt:P58 wd:Q613974 .\",\n    \"  ?resource wdt:P1431 wd:Q613974 .\",\n    \"  ?resource wdt:P344 wd:Q1415127 .\",\n    \"  ?resource wdt:P57 wd:Q1415127 .\",\n    \"  ?resource wdt:P58 wd:Q1415127 .\",\n    \"  ?resource wdt:P1431 wd:Q1415127 .\",\n    \"  ?resource wdt:P344 wd:Q208910 .\",\n    \"  ?resource wdt:P57 wd:Q208910 .\",\n    \"  ?resource wdt:P58 wd:Q208910 .\",\n    \"  ?resource wdt:P1431 wd:Q208910 .\"\n    ] }\n    \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"   ?x kg:6614 kg:9935 .\",\n    \"   ?x kg:7026 kg:9935 .\",\n    \"kg:2618 kg:6614 ?x .\",\n    \"kg:1953 kg:6614 ?x .\",\n    \"kg:2562 kg:6614 ?x .\",\n    \"kg:1146 kg:6614 ?x .\",\n    \"   ?x kg:4089 kg:9935 .\"\n  ] } "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  ?work wdt:P136 wd:Q209548.\",\n    \"  ?work wdt:P179 wd:Q209548.\",\n    \"  ?work wdt:P179 wd:Q209548.\",\n    \"The query is incomplete and incorrect. It doesn't properly link the works to the person or use the correct properties for cinematographer, director, and editor roles.\"\n]\n}\n\t        \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  ?cinematographer kg:0081 ?work .\",\n    \"  ?director kg:3716 ?work .\",\n    \"Rabbits_and_Six_Men_Getting_Sick kg:2839 kg:5435 .\",\n    \"kg:5435 kg:2839 kg:6298 .\",\n    \"kg:6298 kg:2839 kg:4868 .\",\n    \"  ?editor kg:5438 ?work .\"\n    ,\n    \"}\"\n] }\n            \t       "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 ;\", \">// instance of human\\n\",\n    \"             wdt:P740 ?spouse .\", \">// spouse\\n\",\n    \"  VALUES ?spouse { wd:Q268925 wd:Q104005 }\", \">// Lita Grey and Mildred Harris\\n\",\n    \"  ?resource wdt:P136/wd:P179 ?work .\", \">// director or editor of work\\n\",\n    \"  VALUES ?work { wd:Q82707 wd:Q42357 wd:Q104005 wd:Q104005 }\" , \">// The Kid, The Floorwalker, A Woman, Modern Times\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q374172 .\",\n    \"?person wdt:P57 wd:Q166739 .\",\n    \"?person wdt:P57 wd:Q2449461 .\",\n    \"?person wdt:P57 wd:Q45602 .\",\n    \"?person wdt:P1040 wd:Q374172 .\",\n    \"?person wdt:P1040 wd:Q166739 .\",\n    \"?person wdt:P1040 wd:Q2449461 .\",\n    \"?person wdt:P1040 wd:Q45602 .\",\n    \"?person wdt:P26 wd:Q32337 .\",\n    \"?person wdt:P26 wd:Q241019 .\",\n    \"?person wdt:P26 wd:Q137808 .\"\n  ] }\n                    "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person kg:6055 kg:2398 .\", \">// director of The Floorwalker\"\n    ]\n}\n                    "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by, edited by, and directed by\"\n  ]\n}\n   \t\t\t        \t\t\t\t\t\t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{ \"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin, Charlie Chaplin, and Charlie Chaplin were written by, edited by, and directed by?\"\n  ]\n}\n          \t         "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{ \"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by, edited by, and directed by\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q5708246 ;\", \">// Grand Canyon (film) instance of film\",\n    \"  wdt:P136 ?distributor .\", \">// distributor\"\n    ,\n    \"  ?work wdt:P136 ?producer .\", \">// producer\"\n    ,\n    \"  ?distributor wdt:P279* wd:Q480522 .\" , \">// instance of company\"\n    ,\n    \"  ?producer wdt:P279* wd:Q480522 .\" ,\n    \"} LIMIT 100\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q2062523 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?owner1 ?owner2 ?owner3 ?owner4 WHERE {\",\n    \"  ?company (wdt:P127)* wd:Q3133593 ;\",\n    \"  (wdt:P127)* wd:Q1411292 .\",\n    \"  ?company (wdt:P127)* wd:Q219635 ;\",\n    \"  (wdt:P127)* wd:Q7603552 ;\",\n    \"  (wdt:P127)* wd:Q3511946 ;\",\n    \"  (wdt:P127)* wd:Q505275 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:2959 kg:6072 ?distributor .\",\n    \"  kg:2959 kg:6879 ?producer .\",\n    \"  ?distributor kg:1030 kg:1821 ;\",\n    \"               kg:1030 kg:6249 .\",\n    \"  ?producer kg:1030 kg:0993 ;\",\n    \"            kg:1030 kg:5386 ;\",\n    \"            kg:1030 kg:0073 ;\",\n    \"            kg:1030 kg:4822 .\"\n  ] }\n                    "}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q214879.\",\n    \"  ?item wdt:P136 wd:Q186228.\",\n    \"  ?item wdt:P101 wd:Q186228.\",\n    \"  ?item wdt:P57 wd:Q186228.\",\n    \"  ?item wdt:P140 wd:Q186228.\",\n    \"  ?item wdt:P130 wd:Q186228.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57/wdt:P57 wd:Q238211 .\",\n    \"  ?resource wdt:P57/wdt:P57 wd:Q45602 .\",\n    \"  ?resource wdt:P57/wdt:P57 wd:Q166739 .\",\n    \"  ?resource wdt:P86/wdt:P86 wd:Q238211 .\",\n    \"  ?resource wdt:P86/wdt:P86 wd:Q45602 .\",\n    \"  ?resource wdt:P1040/wdt:P1040 wd:Q2345349 .\",\n    \"  ?resource wdt:P1040/wdt:P1040 wd:Q374172 .\",\n    \"  ?resource wdt:P1040/wdt:P1040 wd:Q214723 .\",\n    \"} LIMIT 1\"\n  ]\n}\n                    "}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:1410 ?composer .\",\n    \"  ?resource kg:1541 ?editor .\",\n    \"   ?resource kg:1892 ?director .\",\n    \"  ?resource kg:8585 kg:1892 kg:8585 .\", \">// City Lights directed by the resource (assuming kg:1892 is director property)\"\n    ,\n    \"  ?resource kg:0642 kg:1892 kg:0642 .\" , \">// Modern Times directed by the resource\"\n    ,\n    \"  ?resource kg:2009 kg:1892 kg:2009 .\" , \">// The Floorwalker directed by the resource\"\n    ,\n    \"  ?resource kg:0727 kg:1541 kg:0727 .\" , \">// The Gold Rush edited by the resource\"\n    ,\n    \"  ?resource kg:0684 kg:1541 kg:0684 .\" , \">// His Musical Career edited by the resource\"\n    ,\n    \"  ?resource kg:7670 kg:1541 kg:7670 .\" , \">// The Kid edited by the resource\"\n    ,\n    \"}\"\n]}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P865 wd:Q207493.\",\n    \"  ?resource wdt:P865 wd:Q207494.\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"  ?resource wdt:P40 wd:Q269875 .\", \">// married to Oona O'Neill\",\n    \"  ?resource wdt:P40 wd:Q104655 .\", \">// married to Lita Grey\",\n    \"  ?resource wdt:P40 wd:Q134353 .\", \">// married to Mildred Harris\",\n    \"  ?resource wdt:P737 wd:Q28958 .\", \">// influenced Federico Fellini\",\n    \"  ?resource wdt:P737 wd:Q160315 .\", \">// influenced Marcel Marceau\",\n    \"  ?resource wdt:P737 wd:Q44023 .\", \">// influenced Harold Lloyd\",\n    \"  ?resource wdt:P749 wd:Q80744 .\", \">// founded United Artists Corporation\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q7042855 .\", \">// Occupation: film editor\",\n    \"?resource wdt:P26 wd:Q137808 .\", \">// Married to Oona O'Neiil\",\n    \"?resource wdt:P26 wd:Q32337 .\", \">// Married to Lita Grey\",\n    \"?resource wdt:P26 wd:Q241019 .\", \">// Married to Mildred Harris\",\n    \"?resource wdt:P737 wd:Q7371 .\", \">// Influenced Federico Fellini\",\n    \"?resource wdt:P737 wd:Q157191 .\", \">// Influenced Marcel Marceau\",\n    \"?resource wdt:P737 wd:Q104340 .\", \">// Influenced Harold Lloyd\",\n    \"wd:Q219400 wdt:P112 ?resource .\" , \">// Founded United Artists\"\n   ,\n    \"} LIMIT 100\"\n] }\n                    "}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:6724 kg:9557 .\", \">// occupation film editor\",\n    \"  ?resource kg:0719 kg:8019 .\", \">// spouse Oona O'Nell\",\n    \"  ?resource kg:0719 kg:9121 .\", \">// spouse Lita Grey\",\n    \"  ?resource kg:0719 kg:9083 .\", \">// spouse Mildred Harris\",\n    \"  ?resource kg:0219 kg:5590 .\", \">// influenced by Federico Fellini\",\n    \"  ?resource kg:0219 kg:1968 .\", \">// influenced by Harold Lloyd\",\n    \"  ?resource kg:0219 kg:3243 .\", \">// influenced by Marcel Marceau\",\n    \"  ?resource kg:8264 kg:2544 .\" , \">// founded United Artists Corporation\"\n    ,\n    \"}\" ]\n}\n                    "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  ?work wdt:P57 ?director ;\",\n    \"         wdt:P164 ?star ;\",\n    \"         wdt:P58 ?writer .\",\n    \"  VALUES (?work) { (wd:Q203977) (wd:Q203978) (wd:Q203979) }\",\n    \"}\",\n    \"\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{ \"query\": [\n    \"Which director, star, and writer of Jane B. par Agnès V., The Beaches of Agnès, and The World of Jacques Demy married, influenced, and was influenced by Jacques Demy\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P136 ?genre .\",\n    \"  ?work wdt:P57 ?distributor .\",\n    \"  ?work wdt:P2094 ?producer .\",\n    \"  ?company wdt:P127 ?work .\",\n    \"  ?company wdt:P1061 ?amazon_cloudfront .\",\n    \"  ?company wdt:P1061 ?amazon_kindle .\",\n    \"  ?company wdt:P1061 ?abebooks .\",\n    \"  ?vanguard_group wdt:P279 ?company .\",\n    \"  ?blackrock wdt:P279 ?company .\"\n  ] } "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q17070012 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?ownedByVanguardBlackRock wdt:P127 wd:Q849363, wd:Q219635 .\",\n    \"  ?ownedByVanguardBlackRock wdt:P127 wd:Q849363 ;\",\n    \"  wdt:P127 wd:Q219635 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?amazonServices wdt:P127 wd:Q1628791, wd:Q136469, wd:Q65073147, wd:Q318128 .\",\n    \"}\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:1758 kg:0983 ?producer .\",\n    \"  kg:1758 kg:0832 ?distributor .\",\n    \"  ?distributor kg:6716 kg:4990 .\",\n    \"The query should also include that the distributor was acquired by BlackRock.\",\n    \"  ?distributor kg:6716 kg:3680 .\",\n    \"  ?producer kg:6716 kg:4990 .\",\n    \"  ?producer kg:6716 kg:3680 .\",\n    \"  kg:5071 kg:6716 ?distributor .\",\n    \"  kg:5943 kg:6716 ?distributor .\",\n    \"  kg:0582 kg:6716 ?distributor .\",\n    \"  kg:8018 kg:6716 ?distributor .\",\n    \"} LIMIT 1\"\n] }\n           \t        "}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu\"\n  ]\n}\n                    "}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"Was a star, editor, and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women, No label defined, and The Blood of Fu Manchu\"\n] }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{ \"query\": [\"$16K\", \"$17K\", \"$18K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism, Lucasfilm, and LucasArts were founded by Mellody Hobson's spouse\"\n  ]\n}\n           \t        "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{ \"query\": [\n    \"Was a cinematographer that Industrial Light  & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse\"\n  ]\n}\n                    "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness\"\n  ]\n}\n           \t        "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n              \t     "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{ \"query\": [\n    \"Which cinematographer and star of Inception, Game Over, and Liberation wrote, directed, executive produced, and edited The Madness\"\n  ]\n}\n                    "}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lanning\"\n  ]\n}\n                    "}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{ \"query\": [\n    \"Which writer and cinematographer of The Emperor, Anyone Lived in a Pretty How Town, 1:42.08, and Herbie married a person and influenced Marcus Orelias and Lorne Lanning\"\n  ]\n}\n            "}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{ \"query\": [\n    \"Which writer and cinematographer of The Emperor, Anyone Lived in a Pretty How Town, 1:42.08, and Herbie married a person and influenced Marcus Orelias and Lorne Lanning\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by, executive produced by, edited by, and written by Nuri Bilge Ceylan trilogy's director\"\n  ]\n}\n            \t       "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by, executive produced by, edited by, and written by Nuri Bilge Ceylan trilogy's director\"\n  ]\n}\n                    "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by, executive produced by, edited by, and written by Nuri Bilge Ceylan trilogy's director\"\n  ]\n}\n                    "}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\",\n    \"  ?resource wdt:P86 wdt:P2749 .\", \">// Director of Vagabond\",\n    \"  ?resource wdt:P86 wdt:P2750 .\", \">// Director of The Gleaners and I\",\n    \"  ?resource wdt:P86 wdt:P2751 .\", \">// Director of Varda by Agnès\",\n    \"  ?resource wdt:P403 wd:Q19850 .\", \">// Married to Jacques Demy\",\n    \"  ?resource wdt:P106 wd:Q188452 .\", \">// Influence on Jacques Demy\"\n    ,\n    \"}\"\n  ]\n}\n                    "}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q2526255 .\", \">// film director occupation\"\n    ,\n    \" // Films written by the resource\",\n    \"?film1 wdt:P58 ?resource .\",\n    \"?film1 wdt:P31 wd:Q11424 .\", \">// instance of film\"\n    ,\n    \" // Films edited by the resource\",\n    \"?film2 wdt:P1040 ?resource .\",\n    \"?film2 wdt:P31 wd:Q11424 .\", \">// instance of film\"\n    ,\n    \" // Check if any of these films are The Gleaners and I, Vagabond, or Varda by Agnès\",\n    \"{\",\n    \"?film1 wdt:P31 wd:Q11424 ;\",\n    \"wdt:P1476 ?title .\", \">// title\"\n    ,\n    \"FILTER ( ?title = \\\"The Gleaners and I\\\" || ?title = \\\"Vagabond\\\" || ?title = \\\"Varda by Agnès\\\" )\",\n    \"} UNION {\",\n    \"?film2 wdt:P31 wd:Q11424 ;\",\n    \"wdt:P1476 ?title .\", \">// title\"\n    ,\n    \"FILTER ( ?title = \\\"The Gleaners and I\\\" || ?title = \\\"Vagabond\\\" || ?title = \\\"Varda by Agnès\\\" )\",\n    \"} UNION {\",\n    \"?film3 wdt:P58 ?resource ;\",\n    \"wdt:P1476 ?title .\", \">// title\"\n    ,\n    \"FILTER ( ?title = \\\"The Gleaners and I\\\" || ?title = \\\"Vagabond\\\" || ?title = \\\"Varda by Agnès\\\" )\",\n    \"} UNION {\",\n    \"?film3 wdt:P1040 ?resource ;\",\n    \"wdt:P1476 ?title .\", \">// title\"\n    ,\n    \"FILTER ( ?title = \\\"The Gleaners and I\\\" || ?title = \\\"Vagabond\\\" || ?title = \\\"Varda by Agnès\\\" )\",\n    \"}\",\n    \"\",\n    \" // Check if the resource is married to someone who influenced Jacques Demy\",\n    \"?resource wdt:P26 ?spouse .\",\n    \"?spouse wdt:P737 wd:Q312258 .\" ,\n    \"} LIMIT 100\"\n  ]\n}\n                    "}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:3369 ?x .\",\n    \"  ?resource kg:6219 ?y .\",\n    \"  ?resource kg:3500 kg:4110 .\",\n    \"  ?resource kg:2324 ?z .\",\n    \"  ?resource kg:9020 ?w .\",\n    \"  ?resource kg:1170 ?v .\",\n    \"  ?resource kg:1392 kg:7997 .\",\n    \"}\"\n]}\n           \t        "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q5708246 ;\", \">// Grand Canyon (film) instance of film\",\n    \"  wdt:P190 ?distributor .\", \">// distributor\"\n    ,\n    \"  ?work wdt:P190 ?producer .\", \">// producer\"\n    ,\n    \"  ?distributor wdt:P279* wd:Q483563 .\" , \">// instance of investment management company\"\n    ,\n    \"  ?producer wdt:P279* wd:Q483563 .\" ,\n    \"} LIMIT 100\"\n  ]\n}\n                    "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q2062523 wdt:P750 ?distributor ;\",\n    \"  wdt:P272 ?producer .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?owner1 ?owner2 WHERE {\",\n    \"  ?company (wdt:P127)* wd:Q7603552 ;\",\n    \"  (wdt:P127)* wd:Q219635 ;\",\n    \"  (wdt:P127)* wd:Q3511946 ;\",\n    \"  (wdt:P127)* wd:Q505275 .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?owner3 WHERE {\",\n    \"  ?company (wdt:P127)* wd:Q2007336 ;\",\n    \"  (wdt:P127)* wd:Q849363 .\",\n    \"}\"\n  ]\n}\n             \t      "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:1995 kg:7738 ?distributor .\",\n    \"  kg:1995 kg:5318 ?producer .\",\n    \"  ?distributor kg:1382 kg:1353 ;\",\n    \"               kg:1382 kg:8277 ;\",\n    \"               kg:1382 kg:4633 ;\",\n    \"               kg:1382 kg:8430 .\",\n    \"  ?producer kg:1382 kg:9905 ;\",\n    \"             kg:1382 kg:5449 .\",\n    \"}\"\n]}\n                    "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P155 ?actor.\",\n    \"  ?film wdt:P154 ?actor2.\",\n    \"  wd:Q70332 wdt:P101 wd:Q11424.\",\n    \"  wd:Q86987 wdt:P101 wd:Q11424.\",\n    \"  wd:Q45203 wdt:P101 wd:Q11424.\",\n    \"  wd:Q102755 wdt:P101 wd:Q11424.\",\n    \"  wd:Q168955 wdt:P101 wd:Q11424.\"\n  ]\n}\n                    "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 wd:Q295984 .\",\n    \"?film wdt:P162 wd:Q242477 .\",\n    \"?film wdt:P58 wd:Q295984 .\",\n    \"?film wdt:P58 wd:Q16390 .\",\n    \"?film wdt:P58 wd:Q4420093 .\",\n    \"?film wdt:P161 wd:Q93188 .\",\n    \"?film wdt:P161 wd:Q744357 .\"\n  ] }\n                    "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:5701 ?film .\",\n    \"?film kg:5388 kg:8971 .\", \">// director Randolph Scott\",\n    \"?film kg:9349 kg:7915 .\", \">// producer Miriam Hopkins\",\n    \"?film kg:9349 kg:3761 .\", \">// producer Humphrey Bogart\",\n    \"?film kg:0929 kg:3310 .\", \">// screenwriter Robert Buckner\",\n    \"?film kg:3674 kg:7369 .\", \">// cast member Errol Flynn\",\n    \"?film kg:3674 kg:0114 .\" , \">// cast member Paul Fix\",\n    \"} LIMIT 1\"\n]}\n                    "}
