{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?rulingParty WHERE {\",\n    \"wd:Q152463 wdt:P35 ?rulingParty .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\np:P39 is position held\nps:P39 is position held\nwd:Q43185970 is Mayor of Lisbon\npq:P580 is start time\nwdt:P102 is member of political party", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?party WHERE {\",\n \t\t\"wd:Q43185970 p:P39 ?position .\", \">// Mayor of Lisbon's position held statement\",\n \t\t\"?position pq:P580 ?startTime .\", \">// Start time of the position\",\n \t\t\"wd:Q43185970 wdt:P102 ?party .\", \">// Political party of the Mayor of Lisbon\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4480 is instance of\nkg:1012 is human\nkg:3232 is position held\nkg:0592 is position held\nkg:0692 is Mayor of Lisbon\nkg:7694 is start time\nkg:7386 is member of political party", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?rulingParty WHERE {\",\n \t\t\"?mayor kg:3232/kg:0692 ?position .\",\n \t\t\"?mayor kg:7386 ?startTime .\",\n \t\t\"?mayor kg:7386 ?endTime .\",\n \t\t\"FILTER NOT EXISTS {?mayor kg:7386 ?endTime} .\",\n \t\t\"?mayor kg:7386 ?rulingParty .\",\n \t\t\"?position kg:7386 ?rulingParty .\",\n \t\t\"?mayor kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"OPTIONAL {?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty} .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER NOT EXISTS {?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?endTime} .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:7386 ?rulingParty .\",\n \t\t\"FILTER (?startTime <= NOW()) .\",\n \t\t\"?mayor kg:7386/kg:7386/kg:7386/kg:7386/kg:7386/kg:73"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"?moon wdt:P31 wd:Q6859; wdt:P4021 wd:Q1742; wdt:P2067 ?mass .\",\n    \"{ SELECT MIN(?mass) AS ?minMass WHERE {\",\n    \"?moon wdt:P31 wd:Q6859; wdt:P4021 wd:Q1742; wdt:P2067 ?mass .\",\n    \"} }\",\n    \"FILTER (?mass = ?minMass)\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q61702557 is moon of Jupiter\nwdt:P2067 is mass", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"?moon wdt:P31 wd:Q61702557 ;\",\n    \"wdt:P2067 ?mass .\",\n    \"{ SELECT (MIN(?mass) AS ?minMass) WHERE {\",\n    \"?moon wdt:P31 wd:Q61702557 ;\",\n    \"wdt:P2067 ?mass .\",\n    \"} }\",\n    \"FILTER (?mass = ?minMass)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8904 is instance of\nkg:5838 is moon of Jupiter\nkg:6958 is mass", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"?moon kg:is_moon_of_Jupiter kg:5838 .\",\n    \"?moon kg:is_mass kg:6958 .\",\n    \"{ SELECT MIN(?mass) AS ?minMass WHERE { ?moon kg:is_mass ?mass } }\",\n    \"?moon kg:is_mass ?minMass .\",\n    \"}\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q7837.\",\n    \"  ?resource wdt:P1128 ?employeeCount.\",\n    \"  FILTER(?resource = wd:Q1495) # IBM\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q37156 wdt:P1128 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1608 is IBM\nkg:9125 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1608 kg:9125 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q192354 wdt:P527 ?season .\", \">// The Sopranos first season (Q192354) has parts (episodes)\",\n    \"  ?season wdt:P361 wd:Q192354 .\", \">// The season is part of the first season\",\n    \"  ?episode wdt:P361 ?season .\", \">// Episodes are part of the season\",\n    \"  ?episode wdt:P31 wd:Q21780682 .\", \">// Episode instance of a television episode (Q21780682)\",\n    \"} ORDER BY ?episode\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P4908 is season\nwd:Q5274359 is The Sopranos, season 1", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q5274359 wdt:P4908 ?episode .\",\n    \"} ORDER BY ?episode\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8906 is season\nkg:9900 is The Sopranos, season 1", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  kg:9900 kg:8906 ?episode .\",\n    \"} ORDER BY ?episode\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?newSeriesEpisodes ?oldSeriesEpisodes WHERE {\",\n    \"  wd:Q162594 wdt:P1113 ?newSeriesEpisodes .\",\n    \"  wd:Q180755 wdt:P1113 ?oldSeriesEpisodes .\",\n    \"} ORDER BY DESC(?newSeriesEpisodes) LIMIT 1\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q237072 is Battlestar Galactica\nwdt:P1113 is number of episodes\nwd:Q2367132 is Battlestar Galactica\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?newSeriesEpisodes ?oldSeriesEpisodes WHERE {\",\n    \"wd:Q237072 wdt:P1113 ?newSeriesEpisodes.\",\n    \"wd:Q2367132 wdt:P1113 ?oldSeriesEpisodes.\",\n    \"} ORDER BY DESC(?newSeriesEpisodes) LIMIT 1\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3093 is Battlestar Galactica\nkg:3046 is number of episodes\nkg:8797 is Battlestar Galactica\nkg:3046 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?newSeriesEpisodes ?oldSeriesEpisodes WHERE {\",\n    \"  kg:3093 kg:3046 ?newSeriesEpisodes .\",\n    \"  kg:8797 kg:3046 ?oldSeriesEpisodes .\",\n    \"} ORDER BY DESC(?newSeriesEpisodes) LIMIT 1\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P178 wd:Q69501 .\", \">// Produced by Hal Roach\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P162 wd:Q72792 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3534 is instance of\nkg:9460 is film\nkg:9880 is producer\nkg:6697 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:is_instance_of kg:9460 .\",\n    \"?film kg:9880 kg:6697 .\",\n    \"} ORDER BY ?film\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q162594 wdt:P161 ?actor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83495 is The Matrix\np:P161 is cast member\npq:P453 is character role\nwd:Q2085488 is Agent Smith\nps:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?actor WHERE {\",\n \t\t\"wd:Q83495 p:P161 [\",\n \t\t\"ps:P161 ?actor ;\",\n \t\t\"pq:P453 wd:Q2085488 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3604 is The Matrix\nkg:8155 is cast member\nkg:5723 is character role\nkg:2878 is Agent Smith\nkg:8583 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  kg:3604 kg:8155 ?castMember .\",\n    \"  ?castMember kg:5723 kg:2878 .\",\n    \"  ?castMember kg:8583 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"?party wdt:P31 wd:Q7204 .\", \"><!-- Party instance of political party -->\",\n    \"?party wdt:P1958 wd:Q2651143 .\", \">// Pro-European position\",\n    \"?party wdt:P17 wd:Q43 .\" ,\"\\n}\", \">// In Greece\"\n  ]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7278 is political party\nwdt:P17 is country\nwd:Q41 is Greece\nwdt:P1142 is political ideology\nwd:Q3781399 is pro-Europeanism", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"?party wdt:P31 wd:Q7278 ;\", \">// party is an instance of a political party\",\n    \"wdt:P17 wd:Q41 ;\", \">// party is in Greece\",\n    \"wdt:P1142 wd:Q3781399 .\", \">// party has pro-Europeanism as its political ideology\",\n    \"} \"\n  ]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is instance of\nkg:9450 is political party\nkg:2994 is country\nkg:5177 is Greece\nkg:0782 is political ideology\nkg:4101 is pro-Europeanism", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"?party kg:5368 kg:9450 .\",\n    \"?party kg:2994 kg:5177 .\",\n    \"?party kg:0782 kg:4101 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader WHERE {\",\n    \"  ?bandleader wdt:P31 wd:Q5 .\", \">// bandleader is a human\",\n    \"  ?bandleader wdt:P106 wd:Q2094278 .\", \">// bandleader's occupation is band leader\",\n    \"  ?bandleader wdt:P1303 wd:Q254525 .\", \">// bandleader plays the trumpet\",\n    \"} ORDER BY ?bandleader\"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q806349 is bandleader\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader WHERE {\",\n    \"?bandleader wdt:P106 wd:Q806349 .\",\n    \"?bandleader wdt:P1303 wd:Q8338 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2407 is occupation\nkg:6431 is bandleader\nkg:4690 is instrument\nkg:9014 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader WHERE {\",\n    \"?bandleader kg:2407 kg:6431 .\",\n    \"?bandleader kg:4690 kg:9014 .\",\n    \"} ORDER BY ?bandleader\"\n  ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"  ?mountain wdt:P610 ?elevation .\", \">// Elevation above sea level\",\n    \"  FILTER(?elevation < 8848) .\", \">// Filter out mountains higher than the elevation of Mount Everest\",\n    \"  {\",\n    \"    SELECT (MAX(?elevation) AS ?maxElevation) WHERE {\",\n    \"      ?mountain wdt:P31 wd:Q8502 .\",\n    \"      ?mountain wdt:P610 ?elevation .\",\n    \"      FILTER(?elevation < 8848)\",\n    \"    }\",\n    \"  }\",\n    \"  FILTER(?elevation = ?maxElevation) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P30 is continent\nwdt:P361 is part of\nwd:Q2 is Earth", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// mountain instance of mountain\"\n    ,\"?mountain wdt:P361 wd:Q2 .\", \">// part of Earth\"\n    ,\"{\",\n    \"SELECT (SAMPLE(?mountain) AS ?sampleMountain) (MAX(?elevation) AS ?maxElevation) WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\",\n    \"?mountain wdt:P361 wd:Q2 .\",\n    \"?mountain wdt:P2044 ?elevation .\",\n    \"} ORDER BY DESC(?elevation) LIMIT 2\",\n    \"}\",\n    \"?sampleMountain wdt:P2044 ?maxElevation .\",\n    \"?mountain wdt:P2044 ?elevation .\",\n    \"FILTER(?elevation < ?maxElevation)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is instance of\nkg:6903 is subclass of\nkg:7953 is mountain\nkg:5532 is elevation above sea level\nkg:4491 is continent\nkg:7525 is part of\nkg:1867 is Earth", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain kg:0141 kg:7953 .\",\n    \"?mountain kg:5532 ?elevation .\",\n    \"?mountain kg:7525 ?continent .\",\n    \"?continent kg:0141 kg:4491 .\",\n    \"?continent kg:7525 kg:1867 .\",\n    \"FILTER NOT EXISTS { ?higherMountain kg:0141 kg:7953 ; kg:5532 ?higherElevation ; kg:7525 ?continent . FILTER(?higherElevation > ?elevation) }\",\n    \"FILTER EXISTS { ?anyMountain kg:0141 kg:7953 ; kg:5532 ?anyElevation ; kg:7525 ?continent . FILTER(?anyElevation > ?elevation) }\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\", \">// instance of city\",\n    \"?city wdt:P625 ?location .\", \">// has location\",\n    \"?city wdt:P17 wd:Q10 .\", \">// located in Egypt\",\n    \"{ SELECT ?maxCity WHERE {\",\n    \"  ?city wdt:P1082 ?population .\", \">// population of city\",\n    \"  FILTER(?population = (SELECT MAX(?pop) WHERE {?c wdt:P17 wd:Q10 ; wdt:P1082 ?pop}))\",\n    \"} }\",\n    \"?maxCity wdt:P36 ?capital .\", \">// capital of Egypt\",\n    \"FILTER(?city = ?maxCity && ?city = ?capital)\",\n    \"}\"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q79 is Egypt\nwdt:P1082 is population\nwd:Q79 is Egypt\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\", \">// city instance of city\",\n    \"?city wdt:P17 wd:Q79 .\", \">// city in Egypt\",\n    \"?city wdt:P1082 ?population .\", \">// city has population\",\n    \"OPTIONAL { wd:Q79 wdt:P36 ?capital . }\", \">// optional: Egypt's capital\",\n    \"{ SELECT ?city WHERE { ?city wdt:P17 wd:Q79 ; wdt:P1082 ?population . } ORDER BY DESC(?population) LIMIT 1 }\", \">// largest city by population in Egypt\",\n    \"FILTER (?city = ?capital) .\", \">// filter to check if the largest city is also the capital\",\n    \"} \"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is instance of\nkg:5282 is city\nkg:2922 is country\nkg:1631 is Egypt\nkg:6034 is population\nkg:1631 is Egypt\nkg:6024 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city kg:9757 kg:5282 .\",\n    \"?city kg:6034 ?population .\",\n    \"?capital kg:6024 kg:1631 .\",\n    \"FILTER(?city = ?capital) .\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?rocket WHERE {\",\n    \"?launch wd:P2302/wdt:P2308 wd:Q179564 .\", \">// Baikonur Cosmodrome\",\n    \"?launch wdt:P306 ?rocket .\",\n    \"} ORDER BY ?rocket\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q41291 is rocket\nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?rocket WHERE {\",\n    \"?rocket wdt:P31 wd:Q41291 .\", \">// The rocket is an instance of a rocket\"\n    ,\"?launchEvent wdt:P1427 wd:Q177477 .\", \">// The launch event has Baikonur Cosmodrome as the start point\"\n    ,\"?launchEvent wdt:P306 ?rocket .\", \">// The rocket is launched in the launch event\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9918 is subclass of\nkg:8403 is rocket\nkg:3908 is start point\nkg:9674 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?rocket WHERE {\",\n    \"?rocket kg:isSubclassOf* kg:8403 .\",\n    \"?launchEvent kg:3908 kg:9674 .\",\n    \"?launchEvent kg:9918 ?rocket .\",\n    \"} ORDER BY ?rocket\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P31 wd:Q9143 .\",\n    \"} LIMIT 1000\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q9143 is programming language", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?lang) AS ?count) WHERE {\",\n    \"?lang wdt:P31 wd:Q9143 .\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1662 is instance of\nkg:0743 is subclass of\nkg:6439 is programming language", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:is_instance_of kg:6439 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P31 wd:Q5 .\", \">// player is an instance of human\",\n    \"?player wdt:P106 wd:Q28479 .\", \">// player's occupation is chess player\",\n    \"?player wdt:P19 ?birthPlace .\", \">// player's place of birth\",\n    \"?player wdt:P570 ?deathDate .\", \">// player's date of death\",\n    \"?player wdt:P20 ?deathPlace .\", \">// player's place of death\",\n    \"FILTER(?birthPlace = ?deathPlace) .\", \">// born and died in the same place\",\n    \"} ORDER BY ASC(?player)\"\n  ]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P20 is place of death\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q10873124 is chess player", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106/wdt:P279* wd:Q10873124 .\",\n    \"?person wdt:P19 ?place .\",\n    \"?person wdt:P20 ?place .\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3982 is place of birth\nkg:3798 is place of death\nkg:1280 is occupation\nkg:0314 is subclass of\nkg:0871 is chess player", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:3982 ?birthPlace .\",\n    \"?person kg:3798 ?deathPlace .\",\n    \"?person kg:1280 ?occupation .\",\n    \"?occupation kg:0314 kg:0871 .\",\n    \"FILTER(?birthPlace = ?deathPlace) }\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q974 wdt:P127 ?owner .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q380 is Meta Platforms\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q380 wdt:P127 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8912 is Meta Platforms\nkg:3251 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  kg:8912 kg:3251 ?owner .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?movie wdt:P57 wd:Q896 .\", \">// Starring Tom Cruise (Q896)\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P161 wd:Q37079 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4878 is cast member\nkg:0773 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:4878 kg:0773 .\",\n    \"} \"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"wd:Q109645 wdt:P131* ?state .\",\n    \"?state wdt:P31 wd:Q35657 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q983650 is Fort Knox\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q35657 is U.S. state", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q983650 wdt:P131 ?state .\",\n    \"  ?state wdt:P31 wd:Q35657 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2138 is Fort Knox\nkg:3236 is located in the administrative territorial entity\nkg:5211 is instance of\nkg:3368 is U.S. state", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  kg:2138 kg:3236 ?state .\",\n    \"  ?state kg:5211 kg:3368 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which mountains are higher than the Nanga Parbat?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which mountains are higher than the Nanga Parbat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"?mountain wdt:P2044 ?elevation .\", \">// Elevation above sea level\",\n    \"wd:Q679 wdt:P2044 ?nangaParbatElevation .\", \">// Nanga Parbat's elevation\",\n    \"FILTER(?elevation > ?nangaParbatElevation) .\",\n    \"} ORDER BY DESC(?elevation)\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bside WHERE {\",\n    \"?album wdt:P31 wd:Q208754 .\", \">// Instance of album\",\n    \"?album wdt:P674 ?track .\", \">// Track on album\",\n    \"?track wdt:P31 wd:Q217939 .\", \">// Instance of B-side\",\n    \"?track wdt:P178 wd:Q15071 .\", \">// Performed by Ramones\",\n    \"BIND(?track AS ?bside) .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P175 wd:Q483407 ;\",\n \t\t\"p:P1433 [pq:P2868 wd:Q13432985].\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1681 is performer\nkg:6316 is Ramones\nkg:4288 is published in\nkg:4608 is subject has role\nkg:0022 is B-side", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4608/kg:1681 kg:6316 .\",\n    \"?resource kg:0022 'B-side' .\",\n    \"} \"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 ;\", \">// Instance of human\",\n    \"wdt:P27 wd:Q34 ;\", \">// Citizen of Sweden\",\n    \"rdfs:label 'Olof Palme'@en ;\", \">// Label in English\",\n    \"wdt:P1908 ?date .\", \">// Assassination date\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53713 is Olof Palme\np:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q53713 p:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7630 is Olof Palme\nkg:4997 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7630 kg:4997 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P31 wd:Q5 ;\", \">// Instance of human\",\n    \"        wdt:P279* wd:Q488602 .\", \">// Subclass of King of Rome\",\n    \"} LIMIT 7\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q55375123 is King of Rome", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P39 wd:Q55375123 .\",\n    \"} LIMIT 7\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is position held\nkg:5425 is King of Rome", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"?king kg:9266/kg:5425 [] .\",\n    \"} LIMIT 7\"\n  ]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P19 wd:Q180 .\", \">// Born in Vienna (Q180)\",\n    \"  ?person wdt:P20 wd:Q43 .\", \">// Died in Berlin (Q43)\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwd:Q64 is Berlin\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin\nwdt:P19 is place of birth\nwd:Q1741 is Vienna\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P19 wd:Q1741 ;\", \">// Born in Vienna (wd:Q1741)\"\n \t\t,\"?person wdt:P20 wd:Q64 .\", \">// Died in Berlin (wd:Q64)\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4248 is Berlin\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin\nkg:6565 is place of birth\nkg:5207 is Vienna\nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:6565/kg:4988 kg:5207 .\",\n    \"?person kg:4789/kg:4988 kg:4248 .\",\n    \"} \"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20875 wdt:P43 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12206942 is Darth Vader\nwdt:P40 is child\nwd:Q51746 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q12206942 wdt:P40 wd:Q51746 .\",\n    \"  BIND(wd:Q12206942 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1984 is Darth Vader\nkg:1692 is child\nkg:5502 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1984 kg:1692 ?resource .\",\n    \"  FILTER(?resource = kg:5502) .\",\n    \"} \"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"  ?brewery wdt:P31 wd:Q209465 .\", \">// Instance of brewery\",\n    \"  ?brewery wdt:P17 wd:Q28 .\", \">// Located in Australia\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131734 is brewery\nwdt:P17 is country\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"?brewery wdt:P31 wd:Q131734 .\",\n    \"?brewery wdt:P17 wd:Q408 .\",\n    \"} \"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2155 is instance of\nkg:5909 is brewery\nkg:1368 is country\nkg:6518 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"?brewery kg:2155 kg:5909 .\",\n    \"?brewery kg:1368 kg:6518 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 wd:Q689 ;\", \">// Directed by Steven Spielberg\",\n    \"wdt:P2130 ?budget .\", \">// Has budget\",\n    \"FILTER(?budget >= 80000000) .\",\n    \"} ORDER BY DESC(?budget)\"\n  ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q8877 is Steven Spielberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P162 wd:Q8877 .\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424 .\",\n    \"?film wdt:P2130 ?cost .\",\n    \"FILTER(?cost >= 80000000) .\",\n    \"} ORDER BY DESC(?cost)\"\n  ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2377 is producer\nkg:7786 is Steven Spielberg\nkg:2955 is instance of\nkg:5774 is subclass of\nkg:1418 is film\nkg:0495 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:2377 kg:7786 .\",\n    \"?film kg:0495 ?cost .\",\n    \"FILTER(?cost >= 80000000) .\",\n    \"?film kg:2955 kg:1418 .\",\n    \"} ORDER BY DESC(?cost)\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q476028 .\", \">// Instance of soccer club\",\n    \"  ?club wdt:P17 wd:Q29 .\", \">// Located in Spain\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P17 is country\nwd:Q29 is Spain", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"?club wdt:P31 wd:Q476028 ;\",\n    \"     wdt:P17 wd:Q29 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1869 is instance of\nkg:7742 is association football club\nkg:9070 is country\nkg:2172 is Spain", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"?club kg:1869 kg:7742 .\",\n    \"?club kg:9070 kg:2172 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"?film wdt:P161 wd:Q28935 .\", \">// Natalie Portman (wd:Q28935) starred in the film (?film)\",\n    \"?film wdt:P725 ?producer .\", \">// The producer of the film is ?producer\",\n    \"}\"\n  ]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q37876 is Natalie Portman\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P161 wd:Q37876 .\",\n    \"?film wdt:P162 ?producer .\",\n    \"} ORDER BY ?producer\"\n  ]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5819 is instance of\nkg:0320 is film\nkg:8271 is cast member\nkg:1332 is Natalie Portman\nkg:6761 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"?film kg:is_instance_of kg:0320 .\",\n    \"?film kg:8271 kg:1332 .\",\n    \"?film kg:6761 ?producer .\",\n    \"} ORDER BY ?producer\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"?breed wdt:P279* wd:Q14385. # Get all subclasses of German Shepherd Dog (Q14385)\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q38280 is German Shepherd\nwd:Q38280 is German Shepherd", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"?breed wdt:P279* wd:Q38280 .\",\n    \"}\",\n    \"VALUES (?breed) { (wd:Q38280) }\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1311 is subclass of\nkg:3722 is German Shepherd\nkg:3722 is German Shepherd", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"?breed kg:1311 kg:3722 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who is the heaviest player of the Chicago Bulls?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the heaviest player of the Chicago Bulls?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 ;\", \">// player is an instance of human\",\n    \"        wdt:P106 wd:Q28479 ;\", \">// player's occupation is basketball player\",\n    \"        wdt:P147 wd:Q154688 .\", \">// player plays for Chicago Bulls\",\n    \"} ORDER BY DESC(?weight) LIMIT 1\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q19184 wdt:P37 ?language .\",\n    \"} VALUES (?type) {(wdt:P31)} \"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q191 wdt:P2936 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6317 is Estonia\nkg:3495 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  kg:6317 kg:3495 ?language .\",\n    \"} \"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256 .\", \">// Instance of country\",\n    \"  ?country wdt:P2046 ?area .\", \">// Has area (in square kilometers)\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherCountry wdt:P31 wd:Q6256 .\",\n    \"    ?otherCountry wdt:P2046 ?otherArea .\",\n    \"    FILTER(?otherArea > ?area)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3624078 is sovereign state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country wdt:P31 wd:Q3624078 .\", \">// country is an instance of a sovereign state\"\n    ,\"?country wdt:P2046 ?area .\", \">// country has an area\"\n    ,\"{ SELECT (MAX(?area) AS ?maxArea) WHERE {\",\n    \"?country wdt:P31 wd:Q3624078 .\",\n    \"?country wdt:P2046 ?area . } }\",\n    \"FILTER (?area = ?maxArea)}\",\n  \"}\"\n]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5506 is instance of\nkg:9393 is subclass of\nkg:1310 is sovereign state\nkg:0702 is area", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country kg:is instance of kg:1310 .\",\n    \"?country kg:0702 ?area .\",\n    \"FILTER NOT EXISTS { ?otherCountry kg:is instance of kg:1310 ; kg:0702 ?otherArea . FILTER(?otherArea > ?area) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\", \">// Instance of city\",\n    \"?city wdt:P625 ?location .\", \">// Has location (coordinate)\",\n    \"?city wdt:P1082 ?population .\", \">// Population\",\n    \"{ SELECT (MAX(?population) AS ?maxPopulation) WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\",\n    \"?city wdt:P625 ?location .\",\n    \"?city wdt:P1082 ?population .\",\n    \"FILTER(?city wdt:P17 wd:Q30) }\", \">// In country United States\",\n    \"} FILTER(?population = ?maxPopulation) }\"\n  ]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q30 is United States of America\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\", \">// City instance of city\",\n    \"     wdt:P17 wd:Q30 ;\", \">// City in the United States\",\n    \"     wdt:P1082 ?population .\", \">// Population of the city\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0643 is country\nkg:9284 is United States of America\nkg:3777 is instance of\nkg:9906 is subclass of\nkg:5230 is city\nkg:0522 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city kg:3777 kg:5230 .\",\n    \"?city kg:0643 kg:9284 .\",\n    \"?city kg:0522 ?population .\",\n    \"FILTER NOT EXISTS { ?otherCity kg:3777 kg:5230 ; kg:0643 kg:9284 ; kg:0522 ?otherPopulation . FILTER(?otherPopulation > ?population) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?pope WHERE {\",\n    \"?pope wdt:P39 wd:Q1874256 .\", \">// Position held: Founder of Vatican Television Center\",\n    \"?pope wdt:P31 wd:Q116 .\", \">// Instance of: human\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1471987 is Vatican Media\nwdt:P571 is inception\nwdt:P39 is position held\nwd:Q19546 is pope\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?pope WHERE {\",\n \t\t\"?vaticanMedia wdt:P31 wd:Q1471987 .\", \">// Vatican Media instance of Vatican Television\",\n \t\t\"?vaticanMedia wdt:P571 ?inceptionDate .\", \">// Inception date of Vatican Media (Vatican Television)\",\n \t\t\"?pope p:P39 [ps:P39 wd:Q19546; pq:P580 ?startTime; pq:P582 ?endTime] .\", \">// Pope who held the position during a certain period\",\n \t\t\"FILTER(?inceptionDate >= ?startTime && ?inceptionDate <= ?endTime) .\", \">// Filter to find the pope whose papacy included the inception date of Vatican Television\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4965 is Vatican Media\nkg:9396 is inception\nkg:5157 is position held\nkg:4968 is pope\nkg:9086 is position held\nkg:2915 is position held\nkg:4968 is pope\nkg:3118 is start time\nkg:1891 is end time", "response": "{\n \t\"query\": [\n \t\t\"?pope\",\n \t\t\"?vaticanMedia\"\n \t]\n }\n \t            \t\t"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q3021 wdt:P61 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q596 is Ceres\nwdt:P61 is discoverer or inventor", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n    \"  wd:Q596 wdt:P61 ?discoverer.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0356 is Ceres\nkg:8941 is discoverer or inventor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0356 kg:8941 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P39 wd:Q218654 .\", \">// Position held: Monarch of the Netherlands\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55 is Netherlands\nwdt:P35 is head of state\nwdt:P39 is position held\nwd:Q2045066 is King of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  wd:Q55 wdt:P35 ?king .\",\n    \"  ?king wdt:P39 wd:Q2045066 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7804 is Netherlands\nkg:9773 is head of state\nkg:8977 is position held\nkg:8219 is King of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  kg:7804 kg:9773 ?headOfState .\",\n    \"  ?headOfState kg:8977 kg:8219 .\",\n    \"  ?headOfState rdfs:label ?king .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q2695487 .\", \">// P31 is 'instance of', Q2695487 is 'beverage'\",\n    \"?resource rdfs:label 'Cola'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q134041 is cola\nwdt:P279 is subclass of\nwd:Q40050 is drink", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q134041 wdt:P279* wd:Q40050 .\",\n    \"  BIND(wd:Q134041 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3198 is cola\nkg:1933 is subclass of\nkg:6616 is drink", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3198 kg:1933 ?resource .\",\n    \"  FILTER(?resource = kg:6616) .\",\n    \"} \"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater WHERE {\",\n    \"wd:Q17238 wdt:P569 ?birthDate .\", \">// Angela Merkel's item ID and birth date (for context, not necessary for the answer)\",\n    \"wd:Q17238 wdt:P69 ?almaMater .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?almaMater WHERE {\",\n \t\t\"wd:Q567 wdt:P69 ?almaMater .\",\n \t\t\"?almaMater wdt:P31/wdt:P279* wd:Q3918 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5316 is Angela Merkel\nkg:7545 is educated at\nkg:7553 is instance of\nkg:6836 is subclass of\nkg:2365 is university", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater WHERE {\",\n    \"  kg:5316 kg:7545 ?almaMater .\",\n    \"  ?almaMater kg:7553 kg:2365 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q187465 wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?author WHERE {\",\n \t\t\"wd:Q1163227 wdt:P50 ?author .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is The Pillars of the Earth\nkg:5137 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  kg:0606 kg:5137 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n    \"  wd:Q1064795 wdt:P118 ?airline .\",\n    \"  ?airline wdt:P2351 ?airport .\",\n    \"}\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1480118 is Yeti Airlines\nwdt:P113 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n    \"  wd:Q1480118 wdt:P113 ?airport .\",\n    \"}\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2721 is Yeti Airlines\nkg:4798 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n    \"  kg:2721 kg:4798 ?airport .\",\n    \"} \"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthplace WHERE {\",\n    \"wd:Q8354 wdt:P19 ?birthplace .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5879 is Johann Wolfgang von Goethe\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthplace WHERE {\",\n    \"wd:Q5879 wdt:P19 ?birthplace.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8492 is Johann Wolfgang von Goethe\nkg:1815 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  kg:8492 kg:1815 ?place .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cubanMissileCrisis ?bayOfPigsInvasion WHERE {\",\n    \"  wd:Q197865 wdt:P580 ?cubanMissileCrisis .\", \">// Cuban Missile Crisis start date\",\n    \"  wd:Q23456 wdt:P580 ?bayOfPigsInvasion .\", \">// Bay of Pigs Invasion start date\",\n    \"} ORDER BY ASC(?cubanMissileCrisis) LIMIT 1\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128160 is Cuban Missile Crisis\nwdt:P582 is end time\nwd:Q191721 is Bay of Pigs invasion\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?cubanMissileCrisis ?bayOfPigsInvasion WHERE {\",\n    \"  wd:Q128160 wdt:P582 ?cubanMissileCrisis .\",\n    \"  wd:Q191721 wdt:P580 ?bayOfPigsInvasion .\",\n    \"} ORDER BY ASC(?cubanMissileCrisis) LIMIT 1\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is Cuban Missile Crisis\nkg:0497 is end time\nkg:0984 is Bay of Pigs invasion\nkg:5449 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?cubanMissileCrisis kg:6047 ?cmCrisis .\",\n    \"  ?bayOfPigs kg:0984 ?bPInvasion .\",\n    \"  ?cmCrisis kg:5449 ?cmStart .\",\n    \"  ?bPInvasion kg:5449 ?bpStart .\",\n    \"  FILTER(?cmStart < ?bpStart) .\",\n    \"  BIND(?cubanMissileCrisis AS ?resource) .\",\n    \"} \"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"  wd:Q235491 wdt:P279* wd:Q180462 .\", \">// Carrot cake is a subclass of cakes\",\n    \"  wd:Q235491 wdt:P2454 ?ingredient .\", \">// Get the ingredients for carrot cake\",\n    \"}\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q656071 is carrot cake\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"  wd:Q656071 wdt:P527 ?ingredient .\",\n    \"}\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4040 is carrot cake\nkg:6712 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"  kg:4040 kg:6712 ?ingredient .\",\n    \"} \"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"wd:Q328 wd:P170 ?creator .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q52 wdt:P112 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2440 is Wikipedia\nkg:0699 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2440 kg:0699 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"?mountain wdt:P17 wd:Q183 .\", \">// Located in Germany\",\n    \"?mountain wdt:P131 wd:Q164954 .\", \">// Located in Saxony\",\n    \"OPTIONAL { ?mountain wdt:P2044 ?elevation . }\", \">// Elevation\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P131 is located in the administrative territorial entity\nwd:Q1202 is Saxony\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\", \">// mountain\",\n    \"wdt:P131 wd:Q1202 ;\", \">// located in Saxony\",\n    \"wdt:P2044 ?elevation .\", \">// has elevation\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8166 is instance of\nkg:8572 is mountain\nkg:6404 is located in the administrative territorial entity\nkg:7885 is Saxony\nkg:5619 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain kg:8166 kg:8572 .\",\n    \"?mountain kg:6404 kg:7885 .\",\n    \"?mountain kg:5619 ?elevation .\",\n    \"FILTER NOT EXISTS { ?otherMountain kg:8166 kg:8572 ; kg:6404 kg:7885 ; kg:5619 ?otherElevation . FILTER(?otherElevation > ?elevation) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE { wd:Q2389 wdt:P17 ?country . }\"\n  ]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5806 is Mecca\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?country WHERE {\",\n \t\t\"wd:Q5806 wdt:P131* ?country .\",\n \t\t\"?country wdt:P31 wd:Q6256 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9593 is Mecca\nkg:2857 is located in the administrative territorial entity\nkg:3525 is instance of\nkg:9937 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:9593 kg:2857 ?adminEntity .\",\n    \"  ?adminEntity kg:3525 kg:9937 .\",\n    \"  BIND(?adminEntity AS ?country)\",\n    \"}\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q160457 wdt:P161 ?actor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5620660 is Gus Fring\npq:P453 is character role\nps:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q5620660 pq:P453/ps:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3702 is Gus Fring\nkg:1248 is character role\nkg:8170 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?actor\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?actor kg:1248 kg:3702 .\",\n \t\t\"?actor a kg:8170 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q2586 wdt:P403 ?source .\", \">// Nile (Q2586) and its source\",\n    \"?source wdt:P17 ?country .\", \">// Source is in the country\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3392 is Nile\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q3392 wdt:P885/wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0768 is Nile\nkg:2584 is origin of the watercourse\nkg:0470 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:0768 kg:2584 ?origin .\",\n    \"  ?origin kg:0470 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n    \"?stadium wdt:P31 wd:Q476028 .\", \">// Instance of stadium\",\n    \"?stadium wdt:P17 wd:Q29 .\", \">// Located in Spain\",\n    \"{\",\n    \"SELECT (MAX(?capacity) AS ?maxCapacity) WHERE {\",\n    \"?stadium wdt:P31 wd:Q476028 .\",\n    \"?stadium wdt:P17 wd:Q29 .\",\n    \"?stadium wdt:P1083 ?capacity .\", \">// Capacity of the stadium\",\n    \"}\",\n    \"} ?stadium wdt:P1083 ?maxCapacity .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q483110 is stadium\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q483110 is stadium\nwdt:P17 is country\nwd:Q29 is Spain\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n    \"?stadium wdt:P31 wd:Q483110 .\", \">// The stadium is an instance of a stadium\"\n    ,\"?stadium wdt:P17 wd:Q29 .\", \">// The stadium is located in Spain\"\n    ,\"{\",\n    \"SELECT ?stadium (MAX(?capacity) AS ?maxCapacity) WHERE {\",\n    \"?stadium wdt:P31 wd:Q483110 .\",\n    \"?stadium wdt:P17 wd:Q29 .\",\n    \"?stadium wdt:P1083 ?capacity .\",\n    \"}\",\n    \"GROUP BY ?stadium\",\n    \"} ORDER BY DESC(?maxCapacity) LIMIT 1\"\n    ,\"}\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3639 is instance of\nkg:6981 is stadium\nkg:3639 is instance of\nkg:3018 is subclass of\nkg:6981 is stadium\nkg:4997 is country\nkg:8158 is Spain\nkg:4254 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n    \"?stadium kg:3639 kg:6981 .\", \">// ?stadium is a stadium\"\n    ,\"?stadium kg:4997 kg:8158 .\", \">// ?stadium is in Spain\"\n    ,\"?stadium kg:4254 ?capacity .\", \">// ?stadium has a capacity\"\n    ,\"FILTER NOT EXISTS {\",\n    \"?otherStadium kg:3639 kg:6981 .\",\n    \"?otherStadium kg:4997 kg:8158 .\",\n    \"?otherStadium kg:4254 ?otherCapacity .\",\n    \"FILTER (?otherCapacity > ?capacity) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"wd:Q145 wdt:P2046 ?area .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q145 is United Kingdom\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"wd:Q145 wdt:P2046 ?area .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0895 is United Kingdom\nkg:6864 is area", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0895 kg:6864 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q2483 wdt:P178 ?creator .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q2695156 wdt:P170 ?creator .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4262 is Batman\nkg:4214 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  kg:4262 kg:4214 ?creator .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1694 wdt:P2148 ?resource .\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9215 is Sigmund Freud\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE { wd:Q9215 wdt:P26 ?spouse . }\"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0071 is Sigmund Freud\nkg:1379 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0071 kg:1379 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developers WHERE {\",\n    \"  wd:Q208576 wdt:P178 ?developers .\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q465 is DBpedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?developers WHERE {\",\n    \"  wd:Q465 wdt:P112 ?developers .\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is DBpedia\nkg:9957 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?developers WHERE {\",\n    \"  kg:0141 kg:9957 ?developers .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 wd:Q1860 .\", \">// Directed by Francis Ford Coppola\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q56094 is Francis Ford Coppola", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// movie is an instance of film\",\n    \"     wdt:P57 wd:Q56094 .\", \">// directed by Francis Ford Coppola\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4264 is instance of\nkg:1346 is subclass of\nkg:9775 is film\nkg:2196 is director\nkg:2738 is Francis Ford Coppola", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:is_instance_of kg:9775 .\",\n    \"?movie kg:2196 kg:2738 .\",\n    \"} \"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q186472 .\", \">// P31 is 'instance of', Q186472 is 'tree frog'\",\n    \"?resource wdt:P105 wd:Q3298394 .\", \">// P105 is 'taxon rank', Q3298394 is 'class Amphibia'\",\n    \"}\"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53696 is Hylidae\nwdt:P171 is parent taxon\nwd:Q10908 is Amphibia", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P171* wd:Q53696 .\",\n \t\t\"wd:Q53696 wdt:P171* wd:Q10908 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4906 is Hylidae\nkg:8693 is parent taxon\nkg:5304 is Amphibia", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8693/kg:8693* kg:5304 .\",\n    \"?resource rdfs:subClassOf* kg:4906 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q1083 wdt:P276 ?location .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q62408 is Palace of Westminster\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"  wd:Q62408 wdt:P131 ?location .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3314 is Palace of Westminster\nkg:3899 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3314 kg:3899 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?elevation WHERE {\",\n    \"wd:Q124896 wdt:P360 ?elevation .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q58226 is Düsseldorf Airport\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?elevation WHERE {\",\n    \"wd:Q58226 wdt:P2044 ?elevation .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is Düsseldorf Airport\nkg:7050 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3463 kg:7050 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q1376 p:P1082/psn:P1082/wdt:P585 ?date ;\",\n    \"                  p:P1082/psv:P1082/wdp:P2491 ?population .\",\n    \"} ORDER BY DESC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1489 is Mexico City\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q1489 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8330 is Mexico City\nkg:3405 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8330 kg:3405 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE { wd:Q32856 wdt:P571 ?date . }\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q200686 is French Fifth Republic\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q200686 wdt:P571 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0429 is French Fifth Republic\nkg:8176 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0429 kg:8176 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"?king wdt:P31 wd:Q5 ;\", \">// Instance of human\",\n    \"wdt:P39 wd:Q608274 .\", \">// Position held is King of England\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q18810062 is monarch of England\np:P39 is position held\npq:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?king WHERE {\",\n \t\t\"?king wdt:P39 wd:Q18810062 ;\",\n \t\t\"p:P39 [ pq:P580 ?startTime ].\",\n \t\t\"FILTER NOT EXISTS { ?earlierKing wdt:P39 wd:Q18810062 ; p:P39 [ pq:P580 ?earlierTime ] . FILTER(?earlierTime < ?startTime) }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9064 is position held\nkg:5324 is monarch of England\nkg:4854 is position held\nkg:6181 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"?king kg:9064/kg:5324 [] .\",\n    \"?king kg:6181 ?startTime .\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherKing kg:9064/kg:5324 [] .\",\n    \"?otherKing kg:6181 ?otherStartTime .\",\n    \"FILTER(?otherStartTime < ?startTime)\",\n    \"} .\"\n  ]}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"  wd:Q193567 wdt:P3452 ?editor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P98 is editor", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?editor WHERE {\",\n \t\t\"wd:Q25161472 wdt:P98 ?editor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4567 is Forbes\nkg:7693 is editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4567 kg:7693 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"wd:Q173845 wdt:P166 ?award .\",\n    \"} \"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q319308 is Douglas Hofstadtesr\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q319308 wdt:P166 ?award .\",\n    \"} \"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8441 is Douglas Hofstadtesr\nkg:7848 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  kg:8441 kg:7848 ?award .\",\n    \"} \"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 .\", \">// ?player is a human\",\n    \"  ?player wdt:P106 wd:Q284791 .\", \">// ?player's occupation is Darts player\",\n    \"  {\",\n    \"    SELECT (MIN(?age) AS ?minAge) WHERE {\",\n    \"      ?player wdt:P569 ?birthDate .\", \">// birth date of the player\",\n    \"      BIND(YEAR(NOW()) - YEAR(?birthDate) AS ?age) .\",\n    \"    }\",\n    \"  }\",\n    \"  ?player wdt:P569 ?birthDate .\",\n    \"  BIND(YEAR(NOW()) - YEAR(?birthDate) AS ?age) .\",\n    \"  FILTER(?age = ?minAge) .\",\n    \"} ORDER BY ASC(?age) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q18574233 is darts player\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P106 wd:Q18574233 .\",\n    \"?player wdt:P569 ?birthDate .\",\n    \"} ORDER BY ASC(?birthDate) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9867 is occupation\nkg:7203 is darts player\nkg:4047 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player kg:9867 kg:7203 .\",\n    \"?player kg:4047 ?dob .\",\n    \"} ORDER BY DESC(?dob) LIMIT 1\"\n  ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424; wdt:P279* wd:Q186502.\",\n    \"} LIMIT 1\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187916 is horse racing\nwdt:P279 is subclass of\nwd:Q349 is sport", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q187916 wdt:P279* wd:Q349 .\",\n    \"  BIND(wd:Q187916 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2533 is horse racing\nkg:7442 is subclass of\nkg:8983 is sport", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2533 kg:7442 ?resource .\",\n    \"  FILTER(?resource = kg:8983)\",\n    \"}\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"wd:Q190254 wdt:P361 ?partOf .\", \">// Brooklyn Bridge (Q190254) is part of something\",\n    \"?partOf wdt:P1138 ?river .\", \">// that something crosses a river\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P177 is crosses", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"wd:Q125006 wdt:P177 ?river .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3474 is Brooklyn Bridge\nkg:2218 is crosses", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  kg:3474 kg:2218 ?river .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE { wd:Q36 p:P1082/psv:P1082 ?populationValue . ?populationValue wikibase:quantityAmount ?population }\"\n  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q36 is Poland\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q36 wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5126 is Poland\nkg:4536 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5126 kg:4536 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q180752 wdt:P361 ?season .\",\n    \"  ?season wdt:P585 ?date .\",\n    \"  ?season wdt:P4980 ?episode .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?laterSeason wdt:P361 wd:Q180752 ;\",\n    \"                  wdt:P585 ?laterDate .\",\n    \"    FILTER(?laterDate > ?date)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79784 is Friends\nwdt:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q79784 wdt:P582 ?episode .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3659 is Friends\nkg:4666 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3659 kg:4666 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is the wife of president Obama called Michelle?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is the wife of president Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q76 wdt:P26 ?wife .\", \">// Q76 is the identifier for Barack Obama in Wikidata\",\n    \"  FILTER(?wife = wd:Q140395) .\", \">// Q140395 is the identifier for Michelle Obama in Wikidata\",\n    \"}\"\n  ]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P39 wd:Q11696 .\", \">// Position held is President of the United States\",\n    \"  ?president wdt:P3748 '8' .\", \">// Order of succession\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30 is United States of America\np:P6 is head of government\npq:P580 is start time\nps:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?president WHERE {\",\n \t\t\"  wd:Q30 p:P6 [\",\n \t\t\"    ps:P6 ?president;\",\n \t\t\"    pq:P580 ?startTime.\",\n \t\t\"  ] .\",\n \t\t\"  FILTER NOT EXISTS {\",\n \t\t\"    wd:Q30 p:P6 [\",\n \t\t\"      ps:P6 ?nextPresident;\",\n \t\t\"      pq:P580 ?nextTime.\",\n \t\t\"    ] .\",\n \t\t\"    FILTER(?startTime < ?nextTime)\",\n \t\t\"  } .\",\n \t\t\"  { SELECT (COUNT(?prevPres) AS ?presCount) WHERE {\",\n \t\t\"    wd:Q30 p:P6 [\",\n \t\t\"      ps:P6 ?prevPres;\",\n \t\t\"      pq:P580 ?prevTime.\",\n \t\t\"    ] .\",\n \t\t\"    FILTER(?prevTime < ?startTime)\",\n \t\t\"  } GROUP BY ?presCount HAVING (?presCount = 7) }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7329 is United States of America\nkg:8425 is head of government\nkg:0279 is start time\nkg:3879 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president kg:8425/kg:3879 '8' .\",\n    \"?president kg:8425/kg:0279 ?startTime .\",\n    \"FILTER(?startTime = '1829-03-04'^^xsd:date) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q458 p:P1082/psv:P1082 ?populationValue .\",\n    \"?populationValue wikibase:quantityAmount ?population .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q458 wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is European Union\nkg:6799 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0953 kg:6799 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?launchPad WHERE {\",\n    \"?launchPad wdt:P31 wd:Q205768 .\", \">// Instance of launch pad\",\n    \"?launchPad wdt:P137 wd:Q41158 .\", \">// Operator is NASA\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q194188 is spaceport\nwdt:P137 is operator\nwd:Q23548 is National Aeronautics and Space Administration", "response": "{\n  \"query\": [\n    \"SELECT ?launchPad WHERE {\",\n    \"?launchPad wdt:P31 wd:Q194188 .\",\n    \"?launchPad wdt:P137 wd:Q23548 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is instance of\nkg:9497 is spaceport\nkg:1707 is operator\nkg:0090 is National Aeronautics and Space Administration", "response": "{\n  \"query\": [\n    \"SELECT ?launchPad WHERE {\",\n    \"?launchPad kg:8521 kg:9497 .\",\n    \"?launchPad kg:1707 kg:0090 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q7889 .\", \">// Instance of video game\",\n    \"?resource wdt:P57 wd:Q42601 .\", \">// Developer is Blizzard Entertainment\",\n    \"?resource rdfs:label 'World of Warcraft'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131007 is World of Warcraft\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q131007 wdt:P178 ?developer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4175 is World of Warcraft\nkg:2911 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4175 kg:2911 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"wd:Q140698 wdt:P1477 ?birthName .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23215 is Adele\nwdt:P1477 is birth name", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?birthName WHERE {\",\n \t\t\"wd:Q23215 wdt:P1477 ?birthName .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8007 is Adele\nkg:3664 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"  kg:8007 kg:3664 ?birthName .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q24793 p:P1082/psv:P1082 ?populationValue .\",\n    \"?populationValue wikibase:quantityAmount ?population .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85 is Cairo\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE { wd:Q85 wdt:P1082 ?population . }\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4167 is Cairo\nkg:8338 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4167 kg:8338 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q193746 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7934 wdt:P570 ?dateOfDeath .\",\n    \"  BIND(IF(BOUND(?dateOfDeath), 'No', 'Yes') AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6191 is Frank Herbert\nkg:7183 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6191 kg:7183 ?dateOfDeath .\",\n    \"  BIND(IF(BOUND(?dateOfDeath), 'No', 'Yes') AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?author wdt:P31 wd:Q2654789 .\", \">// Dan Brown instance of human\",\n    \"?author rdfs:label 'Dan Brown'@en .\",\n    \"?work wdt:P50 ?author .\", \">// work authored by Dan Brown\",\n    \"?work wdt:P577 ?date .\", \">// publication date of the work\",\n    \"OPTIONAL { ?work2 wdt:P50 ?author ; wdt:P577 ?date2 . }\", \">// other works by Dan Brown with their dates\",\n    \"FILTER NOT EXISTS { ?work2 wdt:P577 ?date2 . FILTER(?date2 > ?date) }\", \">// ensure no work has a later date than the one found\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q7345 is Dan Brown\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q7345 .\",\n    \"OPTIONAL {?otherWork wdt:P50 wd:Q7345 ; wdt:P577 ?otherDate .}\",\n    \"?work wdt:P577 ?date .\",\n    \"FILTER NOT EXISTS { ?otherWork wdt:P577 ?otherDate . FILTER(?otherDate > ?date) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8899 is author\nkg:6077 is Dan Brown\nkg:9624 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:8899 kg:6077 .\",\n    \"OPTIONAL {?otherWork kg:8899 kg:6077 . ?otherWork kg:9624 ?otherDate .}\",\n    \"?work kg:9624 ?date .\",\n    \"FILTER NOT EXISTS { ?otherWork kg:9624 ?otherDate . FILTER(?otherDate > ?date) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q486972 .\", \">// Instance of educational institution\",\n    \"  ?resource rdfs:label 'Sungkyunkwan University'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwdt:P276 is location\nwdt:P131 is located in the administrative territorial entity\nwd:Q41085 is Sungkyunkwan University", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q41085 wdt:P276 ?location .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0470 is country\nkg:8946 is location\nkg:2192 is located in the administrative territorial entity\nkg:9035 is Sungkyunkwan University", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9035 kg:2192 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q20867 wdt:P50 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q726382 is Die Traumdeutung\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"wd:Q726382 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1167 is Die Traumdeutung\nkg:3300 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  kg:1167 kg:3300 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7063 wdt:P570 ?deathDate .\",\n    \"  BIND(wd:Q7063 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q692 is William Shakespeare\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q692 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5991 is William Shakespeare\nkg:8176 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5991 kg:8176 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q479682 ;\", \">// Instance of software\",\n    \"wdt:P178 wd:Q185015 .\", \">// Developed by Slack Technologies\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1056 is product or material produced or service provided\nwd:Q17130715 is Slack", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q17130715 wdt:P1056 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0014 is product or material produced or service provided\nkg:0492 is Slack", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0492 kg:0014 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?year WHERE {\",\n    \"wd:Q164598 wdt:P569 ?birthDate .\",\n    \"?birthDate wikibase:timeValue ?year .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthYear WHERE {\",\n    \"  wd:Q241665 wdt:P569 ?birthDate .\",\n    \"  BIND(YEAR(?birthDate) AS ?birthYear)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Rachel Stevens\nkg:8397 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8473 kg:8397 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?marriage WHERE {\",\n    \"wd:Q173489 wdt:P26 ?spouse .\",\n    \"?marriage wdt:P31 wd:Q215627 .\", \"># marriage instance\",\n    \"?marriage wdt:P3841 ?spouse .\", \">// spouse in the marriage\",\n    \"wd:Q173489 wdt:P26 ?spouse .\",\n    \"} GROUP BY ?marriage\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41142 is Jane Fonda\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q41142 wdt:P26 ?spouse .\",\n    \"} GROUP BY ?spouse\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3295 is Jane Fonda\nkg:1321 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:3295 kg:1321 ?spouse .\",\n    \"} GROUP BY ?spouse\"\n  ]\n}"}
{"question": "Was the wife of president Lincoln called Mary?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was the wife of president Lincoln called Mary?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"wd:Q936 wdt:P22 ?wife .\",\n    \"?wife rdfs:label 'Mary'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q189742 wdt:P277 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8038 is GIMP\nwdt:P277 is programmed in", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q8038 wdt:P277 ?language .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6582 is GIMP\nkg:7415 is programmed in", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6582 kg:7415 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"wd:Q56804 wdt:P69 ?university .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3918 is university\nwd:Q875538 is public university\nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?university WHERE {\",\n \t\t\"wd:Q567 wdt:P69 ?university .\",\n \t\t\"?university wdt:P31 wd:Q3918 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5654 is university\nkg:4459 is public university\nkg:0182 is Angela Merkel\nkg:0579 is educated at\nkg:4931 is instance of", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?university WHERE {\",\n \t\t\"  kg:0182 kg:0579 ?university .\",\n \t\t\"  ?university kg:4931 kg:5654 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?musical WHERE {\",\n    \"?musical wdt:P31 wd:Q24790 .\", \">// Instance of musical\",\n    \"?musical wdt:P86 wd:Q5582 .\", \">// Music by Elton John (Elton John's Wikidata ID)\",\n    \"}\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q58483083 is dramatico-musical work\nwdt:P86 is composer\nwd:Q2808 is Elton John", "response": "{\n  \"query\": [\n    \"SELECT ?musical WHERE {\",\n    \"?musical wdt:P31 wd:Q58483083 ;\",\n    \"       wdt:P86 wd:Q2808 .\",\n    \"}\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9424 is instance of\nkg:1957 is subclass of\nkg:3671 is dramatico-musical work\nkg:9607 is composer\nkg:2686 is Elton John", "response": "{\n  \"query\": [\n    \"SELECT ?musical WHERE {\",\n    \"?musical kg:9424 kg:3671 .\",\n    \"?musical kg:9607 kg:2686 .\",\n    \"} ORDER BY ?musical\"\n  ]\n}"}
{"question": "What is the longest river in the world?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the longest river in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P31 wd:Q4022; wdt:P2043 ?length.\",\n    \"OPTIONAL {?river rdfs:label ?label . FILTER (lang(?label) = 'en')}\",\n    \"FILTER NOT EXISTS {?x wdt:P31 wd:Q4022; wdt:P2043 ?xLength . FILTER (?xLength > ?length)}\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"  ?resource rdfs:label 'John Adams'@en .\", \">// label in English\",\n    \"  ?resource wdt:P569 ?birthDate .\", \">// birth date property\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11806 is John Adams\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthDate WHERE {\",\n    \"wd:Q11806 wdt:P569 ?birthDate.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5247 is John Adams\nkg:0188 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5247 kg:0188 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?hovercraft wdt:P31 wd:Q209578 .\", \">// hovercraft instance of hovercraft\",\n    \"?company wdt:P279* wd:Q483041 ;\", \">// company is a subclass of manufacturer\",\n    \"     wdt:P176 ?hovercraft .\", \">// company produces the hovercraft\",\n    \"} LIMIT 50\"\n  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q185757 is hovercraft\nwdt:P176 is manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?manufacturer WHERE {\",\n    \"?hovercraft wdt:P31 wd:Q185757 .\",\n    \"?hovercraft wdt:P176 ?manufacturer .\",\n    \"} ORDER BY ?manufacturer\"\n  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8283 is instance of\nkg:6744 is subclass of\nkg:6957 is hovercraft\nkg:1305 is manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?manufacturer WHERE {\",\n    \"?hovercraft kg:8283 kg:6957 .\",\n    \"?manufacturer kg:1305 ?hovercraft .\",\n    \"} ORDER BY ?manufacturer\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE { wd:Q13045 wdt:P22 ?wife . }\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?wife WHERE {\",\n \t\t\"wd:Q91 wdt:P26 ?wife .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1470 is Abraham Lincoln\nkg:1740 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  kg:1470 kg:1740 ?wife .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE { wd:Q8341 wdt:P225 ?species . }\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7378 is elephant\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE {\",\n    \"  wd:Q7378 wdt:P279* ?species .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5477 is elephant\nkg:6250 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE {\",\n    \"  kg:5477 kg:6250 ?species .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q408 wdt:P31 wd:Q5119; wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q408 is Australia\nwdt:P36 is capital\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q408 wdt:P36 ?capital .\",\n    \"?capital wdt:P1082 ?population .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1226 is Australia\nkg:4676 is capital\nkg:8292 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1226 kg:4676 ?capital .\",\n    \"  ?capital kg:8292 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q6256 .\", \">// Instance of is an empire\",\n    \"?resource wdt:P408 ?currency .\", \">// Has currency\",\n    \"?currency wdt:P279* wd:Q11120 .\", \">// Currency is a subclass of cocoa beans (Note: This assumes there's a specific entry for cocoa beans as currency, which may need to be adjusted based on actual Wikidata entries)\",\n    \"}\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q208008 is cocoa bean", "response": "{\n  \"query\": [\n    \"SELECT ?empire WHERE {\",\n    \"?empire wdt:P38 wd:Q208008 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7522 is currency\nkg:2855 is cocoa bean", "response": "{\n  \"query\": [\n    \"SELECT ?empire WHERE {\",\n    \"?empire kg:7522 kg:2855 .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?theory WHERE {\",\n    \"  wd:Q937 wdt:P800 ?theory .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P800 is notable work", "response": "{\n  \"query\": [\n    \"SELECT ?theory WHERE {\",\n    \"  wd:Q937 wdt:P800 ?theory .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is Albert Einstein\nkg:7047 is notable work", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9081 kg:7047 ?resource .\",\n    \"} \"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q19384 wdt:P57 ?composer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44578 is Titanic\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q44578 wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0524 is Titanic\nkg:2249 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:0524 kg:2249 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?runtime WHERE {\",\n    \"  wd:Q162594 wdt:P2047 ?runtime .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171048 is Toy Story\nwdt:P2047 is duration", "response": "{\n  \"query\": [\n    \"SELECT ?runtime WHERE {\",\n    \"  wd:Q171048 wdt:P2047 ?runtime .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1514 is Toy Story\nkg:2430 is duration", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1514 kg:2430 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q794 wdt:P47 ?borderingCountry .\",\n    \"  ?borderingCountry wdt:P31 wd:Q6256 .\",\n    \"  BIND(?borderingCountry AS ?country)\",\n    \"} GROUP BY ?country\"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q794 is Iran\nwdt:P47 is shares border with", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q794 wdt:P47 ?country .\",\n    \"} \"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7701 is Iran\nkg:4645 is shares border with", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:7701 kg:4645 ?country .\",\n    \"} \"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q783789 .\", \">// Instance of electronics company\",\n    \"?company wdt:P17 wd:Q148 .\", \">// Located in China\",\n    \"?company wdt:P131 wd:Q956 .\", \">// Located in Beijing\",\n    \"}\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P452 is industry\nwd:Q581105 is consumer electronics\nwdt:P740 is location of formation\nwd:Q956 is Beijing", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P452 wd:Q581105 .\",\n    \"?company wdt:P740 wd:Q956 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is industry\nkg:1205 is consumer electronics\nkg:3857 is location of formation\nkg:1374 is Beijing", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1847 kg:1205 .\",\n    \"?resource kg:3857 kg:1374 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?successor WHERE {\",\n    \"wd:Q1343 wd:P3379 ?successor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?successor WHERE {\",\n \t\t\"wd:Q9696 p:P39/ps:P39/wd:Q11696 pq:P1366 ?successor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2479 is John F. Kennedy\nkg:8778 is position held\nkg:5867 is position held\nkg:9343 is President of the United States\nkg:6563 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?successor WHERE {\",\n    \"  kg:2479 kg:6563 ?successor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q90 wdt:P35 ?mayor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\"$sparql\", \"SELECT ?mayor WHERE { wd:Q90 wdt:P6 ?mayor . }\"]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6166 is Paris\nkg:8306 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6166 kg:8306 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"wd:Q16457 wdt:P69 ?university .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2685 is Arnold Schwarzenegger\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?university WHERE {\",\n \t\t\"wd:Q2685 wdt:P69 ?university .\",\n \t\t\"?university wdt:P31/wdt:P279* wd:Q3918 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7308 is Arnold Schwarzenegger\nkg:8876 is educated at\nkg:0688 is instance of\nkg:7030 is subclass of\nkg:3125 is university", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7308 kg:8876 ?resource .\",\n    \"  ?resource kg:0688/kg:7030* kg:3125 .\",\n    \"}\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1827 wdt:P2143 ?resource .\",\n    \"  FILTER(?resource = 'no' || ?resource = 'yes')\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Is James Bond married?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2009573 is James Bond\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE { wd:Q2009573 wdt:P26 ?spouse. }\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6381 is James Bond\nkg:3800 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6381 kg:3800 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"  wd:Q1809 wdt:P403 ?lake .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q106588 is Isar\nwdt:P403 is mouth of the watercourse\nwdt:P31 is instance of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q106588 wdt:P403 ?mouth .\",\n    \"  ?mouth wdt:P31 wd:Q23397 .\",\n    \"  BIND(?mouth AS ?resource) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5036 is Isar\nkg:9120 is mouth of the watercourse\nkg:4891 is instance of\nkg:5402 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5036 kg:9120 ?mouth .\",\n    \"  ?mouth kg:4891 kg:5402 .\",\n    \"  BIND(?mouth AS ?resource) .\",\n    \"} \"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q783792 .\", \">// Instance of an Indian company\",\n    \"  ?company wdt:P1128 ?numEmployees .\", \">// Number of employees\",\n    \"} ORDER BY DESC(?numEmployees) LIMIT 1\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P17 is country\nwd:Q668 is India\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// company is an instance of business\",\n    \"wdt:P17 wd:Q668 ;\", \">// company is located in India\",\n    \"wdt:P1128 ?employees .\", \">// company has employees\",\n    \"} ORDER BY DESC(?employees) LIMIT 1\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9039 is instance of\nkg:8788 is business\nkg:3619 is country\nkg:2811 is India\nkg:7645 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company kg:9039 kg:8788 .\",\n    \"?company kg:3619 kg:2811 .\",\n    \"?company kg:7645 ?numEmployees .\",\n    \"FILTER NOT EXISTS { ?otherCompany kg:9039 kg:8788 ; kg:3619 kg:2811 ; kg:7645 ?otherNumEmployees . FILTER(?otherNumEmployees > ?numEmployees) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?vp WHERE { wd:Q96 p:P1478/ps:Q235096 ?vp . }\"\n  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P580 is start time\npq:P582 is end time\np:P39 is position held\nps:P39 is position held\nwd:Q11699 is Vice President of the United States\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?vp WHERE {\",\n \t\t\"wd:Q9696 p:P39 [ps:P39 wd:Q11696; pq:P580 ?start; pq:P582 ?end].\",\n \t\t\"?vp p:P39 [ps:P39 wd:Q11699; pq:P580 ?start; pq:P582 ?end].\",\n \t\t\"FILTER(?start <= '1961-01-20'^^xsd:dateTime && ?end >= '1963-11-22'^^xsd:dateTime).\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3069 is John F. Kennedy\nkg:4508 is position held\nkg:8952 is position held\nkg:0773 is President of the United States\nkg:0995 is start time\nkg:5626 is end time\nkg:4508 is position held\nkg:8952 is position held\nkg:0526 is Vice President of the United States\nkg:0995 is start time\nkg:5626 is end time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?vp WHERE {\",\n \t\t\"?person kg:4508 kg:0773 .\", \">// President of the United States\"\n \t\t,\"?person kg:0995 ?start .\", \">// start time\"\n \t\t,\"?person kg:5626 ?end .\", \">// end time\"\n \t\t,\"kg:3069 kg:4508 kg:0773 .\", \">// John F. Kennedy held the position of President\"\n \t\t,\"kg:3069 kg:0995 ?start .\",\n \t\t\"?vp kg:4508 kg:0526 .\", \">// Vice President of the United States\"\n \t\t,\"?vp kg:0995 ?start .\",\n \t\t\"?vp kg:5626 ?end .\",\n \t\t\"FILTER(?person = kg:3069)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q156498 wdt:P27 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1501505 is Miffy\nwdt:P170 is creator\nwdt:P27 is country of citizenship", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1501505 wdt:P170 ?creator .\",\n    \"  ?creator wdt:P27 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1126 is Miffy\nkg:0332 is creator\nkg:1594 is country of citizenship", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:1126 kg:0332 ?creator .\",\n    \"  ?creator kg:1594 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q180564 wdt:P131 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854383 is Heineken\nwdt:P176 is manufacturer\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q854383 wdt:P176/wdt:P159 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2645 is Heineken\nkg:1943 is manufacturer\nkg:0447 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  kg:2645 kg:1943 ?brewery .\",\n    \"  ?brewery kg:0447 ?city .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?resource wdt:P21 wd:Q6581097 .\", \">// Gender male\",\n    \"?resource rdfs:label 'Barack Obama'@en .\", \">// Label in English\",\n    \"?resource wdt:P102 ?politicalParty .\", \">// Political party\",\n    \"?politicalParty rdfs:label 'Democratic Party (United States)'@en .\", \">// Democratic Party label in English\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P102 is member of political party\nwd:Q29552 is Democratic Party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  wd:Q76 wdt:P102 ?party .\",\n    \"  FILTER(?party = wd:Q29552)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6237 is Barack Obama\nkg:0077 is member of political party\nkg:9901 is Democratic Party", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6237 kg:0077 ?resource .\",\n    \"  FILTER(?resource = kg:9901) .\",\n    \"} \"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q36574 wdt:P40 ?child .\",\n    \"} VALUES (?child) { (wd:Q189215) (wd:Q189216) }\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q7416 wdt:P40 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1671 is Margaret Thatcher\nkg:9715 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  kg:1671 kg:9715 ?child .\",\n    \"} \"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"wd:Q15438 wdt:P2046 ?area .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1198 is North Rhine-Westphalia\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"wd:Q1198 wdt:P2046 ?area .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2319 is North Rhine-Westphalia\nkg:6965 is area", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2319 kg:6965 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515 ;\", \">// instance of city\",\n    \"  ?city p:P1082 ?populationStatement .\", \">// population statement\",\n    \"  ?populationStatement pq:P585 ?date .\", \">// point in time\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?city p:P1082/ps:P1082 ?newerPopulation .\",\n    \"    ?city p:P1082 [pq:P585 ?newerDate ; ps:P1082 ?newerPopulation] .\",\n    \"    FILTER(?newerDate > ?date)\",\n    \"  }\",\n    \"} ORDER BY DESC(?populationStatement) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\", \">// City instance\",\n    \"     wdt:P1082 ?population .\", \">// Population property\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0594 is instance of\nkg:1015 is subclass of\nkg:4012 is city\nkg:0154 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city kg:0594 kg:4012 .\",\n    \"?city kg:0154 ?population .\",\n    \"{ SELECT (MAX(?pop) AS ?maxPop) WHERE {\",\n    \"?city kg:0594 kg:4012 .\",\n    \"?city kg:0154 ?pop .\",\n    \"}}\",\n    \"FILTER (?population = ?maxPop)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE { wd:Q22635 ?occupation ?business . FILTER(?business = wd:Q189470) }\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P488 is chairperson\nwd:Q22686 is Donald Trump\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE {\",\n    \"  wd:Q22686 wdt:P488 ?business .\",\n    \"  ?business wdt:P31/wdt:P279* wd:Q4830453 .\",\n    \"  FILTER NOT EXISTS {?business wdt:P576 ?dissolvedDate} .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4832 is chairperson\nkg:2038 is Donald Trump\nkg:0886 is instance of\nkg:5264 is subclass of\nkg:3913 is business\nkg:3936 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE {\",\n    \"  kg:2038 kg:4832 ?business .\",\n    \"  ?business kg:0886 kg:3913 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?finalMatch WHERE {\",\n    \"  wd:Q43795 wd:P2067 ?finalMatch .\",\n    \"  ?finalMatch wdt:P31 wd:Q187184 .\",\n    \"  ?finalMatch wdt:P585 ?date .\",\n    \"  FILTER(?date = '2018-07-15T00:00:00Z'^^xsd:dateTime) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170645 is 2018 FIFA World Cup\nwdt:P3967 is final event\nwdt:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?finalMatch WHERE {\",\n \t\t\"wd:Q170645 wdt:P3967 ?finalMatch .\",\n \t\t\"?finalMatch wdt:P580 ?startTime .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7606 is 2018 FIFA World Cup\nkg:2755 is final event\nkg:9531 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7606 kg:2755 ?final .\",\n    \"  ?final kg:9531 ?startTime .\",\n    \"  BIND(?final AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 wd:Q3968 ;\", \">// Directed by Stanley Kubrick (Q3968)\",\n    \"}\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2001 is Stanley Kubrick", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P57 wd:Q2001 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7961 is director\nkg:1127 is Stanley Kubrick", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:7961 kg:1127 .\",\n    \"} \"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE { wd:Q789 wrdt:P1082 ?population . }\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q796 is Iraq\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q796 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9047 is Iraq\nkg:6595 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9047 kg:6595 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q174 (wdt:P31/wdt:P279*) wd:Q515 .\", \">// Find instances of cities or its subclasses in Canada\",\n    \"  wd:Q174 wdt:P625 ?location .\", \">// Ensure it has a location, implying it's a real city\",\n    \"  wd:Q174 wdt:P1082 ?population .\", \">// Get the population of the city\",\n    \"  FILTER NOT EXISTS { ?otherCity wdt:P31/wdt:P279* wd:Q515 ; wdt:P625 ?otherLocation ; wdt:P1082 ?otherPopulation . FILTER(?otherPopulation > ?population) }\", \">// Ensure no other city has a larger population\",\n    \"}\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q16 is Canada\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city ?population WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\",\n    \"?city wdt:P17 wd:Q16 .\",\n    \"?city wdt:P1082 ?population .\",\n    \"{ SELECT (MAX(?pop) AS ?maxPop) WHERE {\",\n    \"?c wdt:P31 wd:Q515 .\",\n    \"?c wdt:P17 wd:Q16 .\",\n    \"?c wdt:P1082 ?pop .\",\n    \"}}\",\n    \"FILTER (?population = ?maxPop)\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2883 is country\nkg:0179 is Canada\nkg:5210 is instance of\nkg:9923 is subclass of\nkg:1418 is city\nkg:1232 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city ?population WHERE {\",\n    \"?city kg:5210 kg:1418 .\",\n    \"?city kg:9923 ?province .\",\n    \"?province kg:9923 kg:0179 .\",\n    \"?city kg:1232 ?population .\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherCity kg:5210 kg:1418 .\",\n    \"?otherCity kg:9923 ?province .\",\n    \"?otherCity kg:1232 ?otherPopulation .\",\n    \"FILTER (?otherPopulation > ?population) }\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q21684 wdt:P35 ?capital .\", \">// French Polynesia (Q21684) has a capital (P35)\",\n    \"?capital wdt:P35 ?mayor .\", \">// The capital has a mayor (P35)\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30971 is French Polynesia\nwdt:P36 is capital\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?mayor WHERE {\",\n \t\t\"wd:Q30971 wdt:P36 ?capital .\",\n \t\t\"?capital wdt:P6 ?mayor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6320 is French Polynesia\nkg:6865 is capital\nkg:4430 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  kg:6320 kg:6865 ?capital .\",\n    \"  ?capital kg:4430 ?mayor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// The movie is an instance of a film\",\n    \"wdt:P57 wd:Q26089 .\", \">// The director of the movie is William Shatner\",\n    \"?movie wdt:P161 ?actor .\", \">// The actor starred in the movie\",\n    \"} \"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\",\n    \"?movie wdt:P57 wd:Q16297 .\",\n    \"?movie wdt:P161 ?actor .\",\n    \"} ORDER BY ?actor\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3780 is instance of\nkg:4610 is film\nkg:8975 is director\nkg:8436 is William Shatner\nkg:3866 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?movie kg:4610 .\", \">// movie is a film\",\n    \"?movie kg:8975/kg:8436 .\", \">// movie directed by William Shatner\",\n    \"?movie kg:3866 ?actor .\", \">// actor is cast member of the movie\",\n    \"}\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"wd:Q187245 wdt:P2046 ?height .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76717 is Claudia Schiffer\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE { wd:Q76717 wdt:P2048 ?height . }\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9771 is Claudia Schiffer\nkg:7932 is height", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9771 kg:7932 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?rank WHERE {\",\n    \"  wd:Q183 p:P1082/psn:P1082/wdt:wikibase:rank ?rank .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P1082 is population\nwdt:P2046 is area\nwd:Q183 is Germany\nwdt:P1082 is population\nwd:Q183 is Germany\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?rank WHERE {\",\n    \"  wd:Q183 wdt:P1082 ?population .\",\n    \"  wd:Q183 wdt:P2046 ?area .\",\n    \"  BIND(?population / ?area AS ?density) .\",\n    \"  {\",\n    \"    SELECT (COUNT(?country) AS ?rank) WHERE {\",\n    \"      ?country wdt:P31 wd:Q6256 .\",\n    \"      ?country wdt:P1082 ?otherPopulation .\",\n    \"      ?country wdt:P2046 ?otherArea .\",\n    \"      BIND(?otherPopulation / ?otherArea AS ?otherDensity) .\",\n    \"      FILTER(?density <= ?otherDensity)\",\n    \"    }\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1872 is instance of\nkg:6284 is country\nkg:2685 is population\nkg:5831 is area\nkg:7906 is Germany\nkg:2685 is population\nkg:7906 is Germany\nkg:5831 is area", "response": "{\n  \"query\": [\n    \"SELECT ?rank WHERE {\",\n    \"  kg:7906 kg:2685 ?population .\",\n    \"  kg:7906 kg:5831 ?area .\",\n    \"  BIND(?population / ?area AS ?density) .\",\n    \"  {\",\n    \"    SELECT (COUNT(?country) AS ?rank) WHERE {\",\n    \"      ?country a kg:6284 .\",\n    \"      ?country kg:2685 ?otherPopulation .\",\n    \"      ?country kg:5831 ?otherArea .\",\n    \"      BIND(?otherPopulation / ?otherArea AS ?otherDensity) .\",\n    \"      FILTER(?density <= ?otherDensity)\",\n    \"    }\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"?mountain wdt:P17 wd:Q38 .\", \">// Located in Italy\",\n    \"{\",\n    \"  SELECT ?mountain (MAX(?elevation) AS ?maxElevation) WHERE {\",\n    \"    ?mountain wdt:P2044 ?elevation .\", \">// Elevation above sea level\",\n    \"  }\",\n    \"} GROUP BY ?mountain ORDER BY DESC(?maxElevation) LIMIT 1\"\n    ]}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P17 is country\nwd:Q38 is Italy\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\", \">// mountain instance of mountain\"\n    ,\"?mountain wdt:P17 wd:Q38 ;\", \">// located in Italy\"\n    ,\"?mountain wdt:P2044 ?elevation .\", \">// has elevation\"\n    ,\"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0462 is instance of\nkg:4464 is mountain\nkg:5176 is country\nkg:5061 is Italy\nkg:4947 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain kg:0462 kg:4464 .\",\n    \"?mountain kg:5176 kg:5061 .\",\n    \"?mountain kg:4947 ?elevation .\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"  ?game wdt:P178 wd:Q2536409 .\", \"@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @"}
{"question": "List all games by GMT.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11410 is game\nwdt:P123 is publisher\nwd:Q928726 is GMT Games", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"?game wdt:P31 wd:Q11410 .\", \">// The game is an instance of a game\"\n    ,\"?game wdt:P123 wd:Q928726 .\", \">// The publisher of the game is GMT Games\"\n    ,\"}\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9566 is instance of\nkg:6944 is subclass of\nkg:8759 is game\nkg:9432 is publisher\nkg:2847 is GMT Games", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"?game kg:9566 kg:8759 .\", \">// ?game is an instance of a game\"\n    ,\"?game kg:9432 kg:2847 .\", \">// ?game has GMT Games as the publisher\"\n   ,\"}\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q804 p:P37/ps:PS37 ?language .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q730 is Suriname\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q730 wdt:P37 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4116 is Suriname\nkg:0803 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4116 kg:0803 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"wd:Q187645 wdt:P20 ?person .\",\n    \"?person wdt:P20 ?city .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214622 is Nikos Kazantzakis\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE { wd:Q214622 wdt:P20 ?city. }\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2723 is Nikos Kazantzakis\nkg:5439 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  kg:2723 kg:5439 ?city .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1096487 wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6386177 is Limerick Lake\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q6386177 wdt:P17 ?country.\",\n    \"}\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7230 is Limerick Lake\nkg:3882 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:7230 kg:3882 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n    \"  wd:Q187456 wdt:P527 ?member .\",\n    \"} VALUES (?type) {(wdt:P31)} # Ensures only resources are returned\"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P463 is member of\nwd:Q7256860 is The Prodigy", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n    \"  ?member wdt:P463 wd:Q7256860 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2552 is member of\nkg:5036 is The Prodigy", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n    \"  kg:5036 kg:2552 ?member .\",\n    \"} \"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"wd:Q2475 wd:P421 ?timeZone .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q220 is Rome\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"  wd:Q220 wdt:P421 ?timeZone .\",\n    \"}\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1360 is Rome\nkg:1359 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"  kg:1360 kg:1359 ?timeZone .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  wd:Q197684 wdt:P170 ?writer .\",\n    \"} \"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q151114 is The Wall\nwdt:P658 is tracklist\nwdt:P162 is producer", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?writer WHERE {\",\n \t\t\"wd:Q151114 wdt:P658 ?track .\",\n \t\t\"?track wdt:P178 ?writer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2920 is The Wall\nkg:8526 is tracklist\nkg:1210 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  kg:2920 kg:8526 ?track .\",\n    \"  ?track kg:1210 ?writer .\",\n    \"} GROUP BY ?writer\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q1685 wdt:P35 ?mayor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34370 is Rotterdam\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?mayor WHERE {\",\n \t\t\"wd:Q34370 wdt:P6 ?mayor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9506 is Rotterdam\nkg:5120 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9506 kg:5120 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 .\", \">// instance of city\",\n    \"?city wdt:P17 wd:Q249 .\", \">// located in Australia\",\n    \"{\",\n    \"SELECT (MAX(?population) AS ?maxPopulation) WHERE {\",\n    \"?city wdt:P1082 ?population .\",\n    \"} \",\n    \"}\",\n    \"?city wdt:P1082 ?maxPopulation .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\", \">// city instance of city\",\n    \"     wdt:P17 wd:Q408 ;\", \">// city in Australia\",\n    \"     wdt:P1082 ?population .\", \">// city has population\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5863 is instance of\nkg:8388 is subclass of\nkg:7831 is city\nkg:3186 is country\nkg:6561 is Australia\nkg:6373 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city kg:7831 true .\", \">// ?city is a city\",\n    \"?city kg:3186/kg:8388 kg:6561 .\", \">// ?city is in Australia (country)\",\n    \"?city kg:6373 ?population .\", \">// ?city has population ?population\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherCity kg:7831 true .\", \">// ?otherCity is a city\",\n    \"?otherCity kg:3186/kg:8388 kg:6561 .\", \">// ?otherCity is in Australia (country)\",\n    \"?otherCity kg:6373 ?otherPopulation .\", \">// ?otherCity has population ?otherPopulation\",\n    \"FILTER (?population < ?otherPopulation) }\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\"_:b0 <http://www.wikidata.org/prop/direct/P26> <http://www.wikidata.org/entity/Q1894>; <http://www.wikidata.org/prop/direct/P39> <http://www.wikidata.org/entity/Q11751>. _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>.\"]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2105 is Jacques Chirac\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\"$chiracSpouse\", \"wd:Q2105\", \"wdt:P26\"]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9082 is Jacques Chirac\nkg:5189 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:9082 kg:5189 ?spouse .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?government WHERE { wd:Q258 wd:P122 ?government . }\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q258 is South Africa\nwdt:P122 is basic form of government", "response": "{\n  \"query\": [\n    \"SELECT ?government WHERE {\",\n    \"wd:Q258 wdt:P122 ?government .\",\n    \"}\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is South Africa\nkg:3788 is basic form of government", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5595 kg:3788 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"wd:Q1085467 wdt:P2043 ?height .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1207989 is Yokohama Marine Tower\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE { wd:Q1207989 wdt:P2048 ?height. }\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8468 is Yokohama Marine Tower\nkg:6687 is height", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8468 kg:6687 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 .\", \">// player is an instance of human\",\n    \"  ?player wdt:P641 wd:Q296380 .\", \">// player plays basketball\",\n    \"  ?player wdt:P2046 ?height .\", \">// player has a height\",\n    \"} ORDER BY DESC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P106 wd:Q3665646 ;\",\n    \"wdt:P2048 ?height .\",\n    \"BIND(?height AS ?maxHeight)\",\n    \"} ORDER BY DESC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8059 is occupation\nkg:4937 is basketball player\nkg:1141 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player kg:8059/kg:4937 true .\",\n    \"?player kg:1141 ?height .\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q1098 wdt:P37 ?language .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q874 is Turkmenistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q874 wdt:P2936 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8750 is Turkmenistan\nkg:5009 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  kg:8750 kg:5009 ?language .\",\n    \"} \"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?children WHERE {\",\n    \"wd:Q20689 wdt:P40 ?children .\",\n    \"} \"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5809 is Che Guevara\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q5809 wdt:P40 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4932 is Che Guevara\nkg:0068 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  kg:4932 kg:0068 ?child .\",\n    \"} \"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"wdt:P106 wd:Q28389 ;\", \">// occupation film director\",\n    \"rdfs:label 'Aki Kaurismäki'@en .\", \">// name in English\",\n    \"?resource wdt:P166 ?award .\", \">// has been awarded\",\n    \"?award wdt:P31 wd:Q205748 ;\", \">// instance of award\",\n    \"wdt:P179 wd:Q104471 .\", \">// part of Cannes Film Festival awards\"\n    ,\"?award rdfs:label 'Grand Prix'@en .\", \">// specific award name in English\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q276186 is Aki Kaurismäki\nwdt:P166 is award received\nwd:Q844804 is Cannes Film Festival Grand Prix", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q276186 wdt:P166 wd:Q844804 .\",\n    \"  BIND(wd:Q276186 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8458 is Aki Kaurismäki\nkg:1315 is award received\nkg:1066 is Cannes Film Festival Grand Prix", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8458 kg:1315 kg:1066 .\",\n    \"  BIND(kg:8458 AS ?resource)\",\n    \"} \"\n  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"wd:Q26534 wdt:P102 ?party .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government\nwdt:P102 is member of political party", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?party WHERE {\",\n \t\t\"wd:Q90 wdt:P6 ?mayor .\",\n \t\t\"?mayor wdt:P102 ?party .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2333 is Paris\nkg:5416 is head of government\nkg:5588 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  kg:2333 kg:5416 ?mayor .\",\n    \"  ?mayor kg:5588 ?party .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?driver WHERE {\",\n    \"  ?driver wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"  ?driver wdt:P648 wd:Q20797 .\", \">// participated in Formula One\",\n    \"  {\",\n    \"    SELECT ?driver (COUNT(?race) AS ?numRaces) WHERE {\",\n    \"      ?driver wdt:P31 wd:Q5 ;\",\n    \"      wdt:P648 wd:Q20797 ;\",\n    \"      wdt:P54 ?race .\", \">// member of sports team (used here for races)\",\n    \"    } GROUP BY ?driver ORDER BY DESC(?numRaces) LIMIT 1\",\n    \"  }\",\n    \"} \"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10841764 is Formula One driver\nwdt:P1350 is number of matches played/races/starts", "response": "{\n  \"query\": [\n    \"SELECT ?driver WHERE {\",\n    \"?driver wdt:P106 wd:Q10841764 .\",\n    \"?driver wdt:P1350 ?races .\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherDriver wdt:P106 wd:Q10841764 ;\",\n    \"wdt:P1350 ?otherRaces .\",\n    \"FILTER (?otherRaces > ?races)\",\n    \"} }\"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6894 is occupation\nkg:7521 is Formula One driver\nkg:6339 is number of matches played/races/starts", "response": "{\n  \"query\": [\n    \"SELECT ?driver WHERE {\",\n    \"?driver kg:6894 kg:7521 .\",\n    \"?driver kg:6339 ?numRaces .\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherDriver kg:6894 kg:7521 .\",\n    \"?otherDriver kg:6339 ?otherNumRaces .\",\n    \"FILTER (?otherNumRaces > ?numRaces) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q154789 wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2663195 is Sitecore\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q2663195 wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9915 is Sitecore\nkg:9456 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:9915 kg:9456 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"wd:Q16457 wdt:P19 ?birthPlace .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40912 is Frank Sinatra\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"wd:Q40912 wdt:P19 ?birthPlace.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4574 is Frank Sinatra\nkg:3148 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"  kg:4574 kg:3148 ?birthPlace .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"wdt:P106 wd:Q33999 ;\", \">// occupation actor\",\n    \"wdt:P161 wd:Q24781 .\", \">// starring in Velvet Goldmine\",\n    \"?film wdt:P1476 ?title .\",\n    \"FILTER(?title = 'Velvet Goldmine'@en) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1481540 is Velvet Goldmine\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1481540 wdt:P161 ?resource .\",\n    \"  FILTER(?resource = wd:Q45772) .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1837 is Velvet Goldmine\nkg:2378 is cast member\nkg:2302 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1837 kg:2378 ?resource .\",\n    \"  FILTER(?resource = kg:2302) .\",\n    \"} \"\n  ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P22 wd:Q187543 .\", \">// Sonny and Cher's son\",\n    \"?person wdt:P25 wd:Q187543 .\", \">// This line is incorrect, as it would imply the person is also their daughter. It should be removed or corrected.\",\n    \"}\"\n  ]\n}\n  \t \t \t  \t \t \t \t \t \t"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P22 is father\nwd:Q179150 is Sonny Bono\nwdt:P25 is mother\nwd:Q12003 is Cher", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?child WHERE {\",\n \t\t\"?child wdt:P22 wd:Q179150 .\",\n \t\t\"?child wdt:P25 wd:Q12003 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8319 is father\nkg:6328 is Sonny Bono\nkg:8679 is mother\nkg:7963 is Cher", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"?child kg:8319 kg:6328 .\",\n    \"?child kg:8679 kg:7963 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE { wd:Q183 wd:P36 ?capital . }\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1009 is Cameroon\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE { wd:Q1009 wdt:P36 ?capital . }\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9619 is Cameroon\nkg:9141 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  kg:9619 kg:9141 ?capital .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P214 ?nataliePortmanId .\", \">// VIAF ID for Natalie Portman\",\n    \"?resource wdt:P19 ?placeOfBirth .\", \">// place of birth\",\n    \"?placeOfBirth wdt:P31 wd:Q3006358 .\", \">// instance of the United States\",\n    \"FILTER(?nataliePortmanId = '274515') .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37876 is Natalie Portman\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?placeOfBirth WHERE {\",\n    \"  wd:Q37876 wdt:P19 ?placeOfBirth .\",\n    \"  ?placeOfBirth wdt:P17 wd:Q30 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2400 is Natalie Portman\nkg:5100 is place of birth\nkg:6353 is country\nkg:1050 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?placeOfBirth WHERE {\",\n    \"  kg:2400 kg:5100 ?placeOfBirth .\",\n    \"  ?placeOfBirth kg:6353 kg:1050 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?parent wdt:P40 ?person .\", \">// parent (Meryl Streep) has child (person)\",\n    \"?parent rdfs:label 'Meryl Streep'@en .\", \">// parent's label is Meryl Streep in English\",\n    \"OPTIONAL {?person wdt:P21 wd:Q6581072.}\", \">// optional: person is of female gender (if known)\",\n    \"{\",\n    \"SELECT ?person (MIN(?birthDate) AS ?earliestBirth) WHERE {\",\n    \"?person wdt:P569 ?birthDate .\", \">// person has a birth date\",\n    \"} GROUP BY ?person\",\n    \"}\",\n    \"ORDER BY ASC(?earliestBirth)\",\n    \"LIMIT 1\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q873 is Meryl Streep\nwdt:P40 is child\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q873 wdt:P40 ?child .\",\n    \"  { SELECT ?child (MIN(?dob) AS ?earliestDob) WHERE {\",\n    \"    wd:Q873 wdt:P40 ?child .\",\n    \"    ?child wdt:P569 ?dob .\",\n    \"  } GROUP BY ?child\",\n    \"  }\",\n    \"} ORDER BY DESC(?earliestDob) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9386 is Meryl Streep\nkg:7223 is child\nkg:3308 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  kg:9386 kg:7223 ?child .\",\n    \"  ?child kg:3308 ?dob .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherChild kg:3308 ?otherDob .\",\n    \"    FILTER (?otherDob < ?dob)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"?show wdt:P31 wd:Q571 ;\", \">// Instance of television show\",\n    \"wdt:P106 wd:Q7892 .\", \">// Created by Walt Disney\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7725310 is series of creative works\nwdt:P170 is creator\nwd:Q8704 is Walt Disney", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"?show wdt:P31 wd:Q7725310 ;\",\n    \"     wdt:P170 wd:Q8704 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is instance of\nkg:2217 is subclass of\nkg:4357 is series of creative works\nkg:2797 is creator\nkg:6368 is Walt Disney", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"?show kg:4357/kg:2797 kg:6368 .\",\n    \"?show a kg:4927 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P39 wd:Q11696 .\", \">// U.S. President position\",\n    \"?resource wdt:P27 wd:Q30 .\", \">// Citizen of the United States\",\n    \"?resource rdfs:label 'Andrew Jackson'@en .\",\n    \"OPTIONAL {?resource wdt:P692 ?war .}\", \">// Involved in war\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11817 is Andrew Jackson\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q11817 wdt:P607 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is Andrew Jackson\nkg:6744 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1132 kg:6744 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q17065 wdt:P3018 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25173 is Titanic\nwdt:P729 is service entry", "response": "{\n  \"query\": [\n    \"SELECT ?completionDate WHERE {\",\n    \"wd:Q25173 wdt:P729 ?completionDate .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2084 is Titanic\nkg:4238 is service entry", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2084 kg:4238 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// The resource is an instance of a human\",\n    \"?resource wdt:P106 wd:Q169470 .\", \">// The resource's occupation is physicist\",\n    \"?resource rdfs:label 'Nikola Tesla'@en .\", \">// The resource's label in English is Nikola Tesla\",\n    \"OPTIONAL { ?resource wdt:P800 wd:Q23516 }\", \">// Check if the resource has won a Nobel Prize in Physics\",\n    \"FILTER (BOUND(?resource))\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9036 is Nikola Tesla\nwdt:P166 is award received\nwd:Q38104 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q9036 wdt:P166 wd:Q38104 .\",\n    \"  BIND(wd:Q9036 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9199 is Nikola Tesla\nkg:2395 is award received\nkg:3285 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9199 kg:2395 ?resource .\",\n    \"  FILTER(?resource = kg:3285) .\",\n    \"}\"\n  ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q96 wdt:P31/wdt:P279* wd:Q3624078 .\",\n    \"  wd:Q96 wdt:P131 ?state .\",\n    \"  FILTER NOT EXISTS { ?state wdt:P31 wd:Q3624078 }\",\n    \"} ORDER BY ASC(?state)\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q15149663 is state of Mexico", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q15149663 .\",\n    \"} ORDER BY ?state\"\n  ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1188 is instance of\nkg:8553 is state of Mexico", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state kg:is_instance_of kg:8553 .\",\n    \"} LIMIT 32\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE {\",\n    \"  wd:Q167294 wdt:P2130 ?cost .\",\n    \"}\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2608065 is The Lego Movie\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE { wd:Q2608065 wdt:P2130 ?cost. }\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7174 is The Lego Movie\nkg:4576 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7174 kg:4576 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q174289 wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q368577 is Harold and Maude\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q368577 wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5213 is Harold and Maude\nkg:9296 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:5213 kg:9296 ?composer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515 .\", \">// P31 is 'instance of', Q515 is 'city'\",\n    \"  ?city wdt:P1082 ?population .\", \">// P1082 is 'population'\",\n    \"} ORDER BY ASC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515 .\",\n    \"  ?city wdt:P1082 ?population .\",\n    \"} ORDER BY ASC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3143 is instance of\nkg:9876 is city\nkg:4366 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city kg:is_instance_of kg:9876 .\",\n    \"?city kg:has_population ?population .\",\n    \"} ORDER BY ASC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?burialPlace WHERE {\",\n    \"wd:Q175064 wdt:P119 ?burialPlace .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171684 is Syngman Rhee\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?burialPlace WHERE {\",\n    \"wd:Q171684 wdt:P119 ?burialPlace.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3345 is Syngman Rhee\nkg:9861 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  kg:3345 kg:9861 ?place .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"?resource wdt:P106 wd:Q2834719 ;\", \">// occupation is footballer\",\n    \"?resource rdfs:label 'Neymar'@en .\", \">// label in English is Neymar\",\n    \"OPTIONAL { ?team wdt:P11 wd:Q155406 }.\", \">// team has player as member (P11) Real Madrid (wd:Q155406)\",\n    \"?resource wdt:P11 ?team .\", \">// Neymar plays for the team\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q142794 is Neymar\nwdt:P54 is member of sports team\nwd:Q8682 is Real Madrid CF", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q142794 wdt:P54 wd:Q8682 .\",\n    \"  BIND(wd:Q142794 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8232 is Neymar\nkg:5537 is member of sports team\nkg:7777 is Real Madrid CF", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8232 kg:5537 ?resource .\",\n    \"  FILTER(?resource = kg:7777) .\",\n    \"} \"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q167298 wdt:P50 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"wd:Q1163227 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7222 is The Pillars of the Earth\nkg:7844 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  kg:7222 kg:7844 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q8543 wdt:P22 ?parent .\", \">// Prince William's father\",\n    \"wd:Q8544 wdt:P22 ?parent .\", \">// Prince Harry's father\",\n    \"wd:Q8543 wdt:P25 ?parent .\", \">// Prince William's mother\",\n    \"wd:Q8544 wdt:P25 ?parent .\", \">// Prince Harry's mother\",\n    \"} GROUP BY ?parent HAVING (COUNT(?parent) > 1)\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P22 is father\nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P25 is mother\nwd:Q36812 is William, Prince of Wales\nwdt:P22 is father\nwd:Q36812 is William, Prince of Wales\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q152316 wdt:P22|wdt:P25 ?parent .\",\n    \"  wd:Q36812 wdt:P22|wdt:P25 ?parent .\",\n    \"} GROUP BY ?parent\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0241 is Prince Harry, Duke of Sussex\nkg:9891 is father\nkg:0241 is Prince Harry, Duke of Sussex\nkg:0917 is mother\nkg:3209 is William, Prince of Wales\nkg:9891 is father\nkg:3209 is William, Prince of Wales\nkg:0917 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  kg:0241 kg:9891 ?parent .\",\n    \"  kg:3209 kg:9891 ?parent .\",\n    \"} UNION {\",\n    \"  kg:0241 kg:0917 ?parent .\",\n    \"  kg:3209 kg:0917 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"wd:Q133 wd:P184 ?supervisor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P184 is doctoral advisor", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"  wd:Q937 wdt:P184 ?supervisor.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3951 is Albert Einstein\nkg:5112 is doctoral advisor", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"  kg:3951 kg:5112 ?supervisor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?show1 ?show2 WHERE {\",\n    \"  ?show1 wdt:P31 wd:Q571; wdt:P449 ?episodes1 .\",\n    \"  ?show2 wdt:P31 wd:Q571; wdt:P449 ?episodes2 .\",\n    \"  FILTER(?show1 = wd:Q168022) .\",\n    \"  FILTER(?show2 = wd:Q180441) .\",\n    \"  FILTER(?episodes1 > ?episodes2) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Breaking Bad\nwdt:P1113 is number of episodes\nwd:Q23572 is Game of Thrones\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"  wd:Q1079 wdt:P1113 ?bbEpisodes .\",\n    \"  wd:Q23572 wdt:P1113 ?gotEpisodes .\",\n    \"  FILTER(?bbEpisodes > ?gotEpisodes) .\",\n    \"  BIND(wd:Q1079 AS ?show) .\",\n    \"} UNION {\",\n    \"  wd:Q1079 wdt:P1113 ?bbEpisodes .\",\n    \"  wd:Q23572 wdt:P1113 ?gotEpisodes .\",\n    \"  FILTER(?bbEpisodes <= ?gotEpisodes) .\",\n    \"  BIND(wd:Q23572 AS ?show) .\",\n    \"}\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7410 is Breaking Bad\nkg:4526 is number of episodes\nkg:6491 is Game of Thrones\nkg:4526 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"  {\",\n    \"    <kg:7410> <kg:4526> ?bbEpisodes .\",\n    \"    <kg:6491> <kg:4526> ?gotEpisodes .\",\n    \"    FILTER(?bbEpisodes > ?gotEpisodes)\",\n    \"    BIND(<kg:7410> AS ?show)\",\n    \"  } UNION {\",\n    \"    <kg:7410> <kg:4526> ?bbEpisodes .\",\n    \"    <kg:6491> <kg:4526> ?gotEpisodes .\",\n    \"    FILTER(?bbEpisodes <= ?gotEpisodes)\",\n    \"    BIND(<kg:6491> AS ?show)\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration WHERE {\",\n    \"wd:Q5582 wd:P1704 ?inspiration .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5582 is Vincent van Gogh\nwdt:P737 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration WHERE {\",\n    \"  wd:Q5582 wdt:P737 ?inspiration .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4487 is Vincent van Gogh\nkg:9725 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration WHERE {\",\n    \"  kg:4487 kg:9725 ?inspiration .\",\n    \"} \"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"?building wdt:P31 wd:Q40089; # instance of building\",\n    \"?building wdt:P1082 ?floors; # number of floors\",\n    \"?building wdt:P576 ?completionDate. # completion date\",\n    \"FILTER(?floors < 163 && ?floors > (SELECT MAX(?otherFloors) WHERE { ?otherBuilding wdt:P31 wd:Q40089; wdt:P1082 ?otherFloors; wdt:P576 ?otherCompletionDate. FILTER(?otherBuilding != wd:Q189289) }))\",\n    \"wd:Q189289 wdt:P31 wd:Q40089; wdt:P1082 163.\",\n    \"} ORDER BY DESC(?floors) LIMIT 1\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12495 is Burj Khalifa\nwdt:P1101 is floors above ground\nwdt:P1101 is floors above ground", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"  ?building wdt:P1101 ?floors .\",\n    \"  FILTER(?building != wd:Q12495) .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherBuilding wdt:P1101 ?otherFloors .\",\n    \"    FILTER(?otherBuilding != wd:Q12495 && ?otherFloors > ?floors)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1982 is Burj Khalifa\nkg:1365 is floors above ground\nkg:1365 is floors above ground", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"?building kg:1365 ?floors .\",\n    \"FILTER(?building != kg:1982) .\",\n    \"OPTIONAL {?otherBuilding kg:1365 ?otherFloors . FILTER(?otherBuilding != kg:1982 && ?otherFloors > ?floors)}\",\n    \"FILTER(!BOUND(?otherFloors))\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE {\",\n    \"wd:Q15607 wdt:P2130 ?cost .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q104123 is Pulp Fiction\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE {\",\n    \"wd:Q104123 wdt:P2130 ?cost .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8346 is Pulp Fiction\nkg:1348 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8346 kg:1348 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q8054 .\", \">// Instance of protein\",\n    \"?resource rdfs:label 'proinsulin'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q426173 is proinsulin\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8054 is protein", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q426173 wdt:P31/wdt:P279* wd:Q8054 .\",\n    \"  BIND(wd:Q426173 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0193 is proinsulin\nkg:6381 is instance of\nkg:3035 is subclass of\nkg:2583 is protein", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0193 kg:6381 ?instance .\",\n    \"  ?instance kg:3035* kg:2583 .\",\n    \"  BIND(kg:0193 AS ?resource)\",\n    \"} \"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q476528; # Instance of language family\",\n    \"wdt:P1094 wd:Q12115; # Has child Urdu\",\n    \"wdt:P1094 wd:Q7445. # Has child Persian\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1617 is Urdu\nwdt:P279 is subclass of\nwd:Q9168 is Persian\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1617 wdt:P279* ?resource .\",\n    \"  wd:Q9168 wdt:P279* ?resource .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9687 is Urdu\nkg:9521 is subclass of\nkg:7561 is Persian\nkg:9521 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9687 kg:9521* ?commonRoot .\",\n    \"  kg:7561 kg:9521* ?commonRoot .\",\n    \"  BIND(?commonRoot AS ?resource)\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?movie wdt:P31 wd:Q24856; wdt:P725 wd:Q9035; wdt:P161 ?actor .\",\n    \"?movie wdt:P364 wd:Q1321 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q193668 is Benicio del Toro\nwdt:P495 is country of origin\nwd:Q29 is Spain\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P162 wd:Q193668 .\",\n    \"?film wdt:P495 wd:Q29 .\",\n    \"?film wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5537 is instance of\nkg:1197 is film\nkg:3789 is producer\nkg:7757 is Benicio del Toro\nkg:8501 is country of origin\nkg:8199 is Spain\nkg:0642 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?movie kg:1197 .\",\n    \"?movie kg:3789 ?producer .\",\n    \"?producer kg:5537 kg:7757 .\",\n    \"?movie kg:8501 kg:8199 .\",\n    \"?movie kg:0642 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake1 ?lake2 WHERE {\",\n    \"?lake1 wdt:P31 wd:Q23397.\",\n    \"?lake2 wdt:P31 wd:Q23397.\",\n    \"?lake1 rdfs:label 'Lake Baikal'@en.\",\n    \"?lake2 rdfs:label 'Great Bear Lake'@en.\",\n    \"?lake1 wdt:P2046 ?area1.\",\n    \"?lake2 wdt:P2046 ?area2.\",\n    \"FILTER(?area1 > ?area2).\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5513 is Lake Baikal\nwdt:P2046 is area\nwd:Q5525 is Great Bear Lake\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"  wd:Q5513 wdt:P2046 ?baikalArea .\",\n    \"  wd:Q5525 wdt:P2046 ?greatBearLakeArea .\",\n    \"  FILTER(?baikalArea > ?greatBearLakeArea) .\",\n    \"  BIND(wd:Q5513 AS ?lake) .\",\n    \"} UNION {\",\n    \"  wd:Q5513 wdt:P2046 ?baikalArea .\",\n    \"  wd:Q5525 wdt:P2046 ?greatBearLakeArea .\",\n    \"  FILTER(?baikalArea < ?greatBearLakeArea) .\",\n    \"  BIND(wd:Q5525 AS ?lake) .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4738 is Lake Baikal\nkg:3598 is area\nkg:5245 is Great Bear Lake\nkg:3598 is area", "response": "{\n  \"query\": [\n    \"SELECT ?lake1 ?lake2 WHERE {\",\n    \"  kg:4738 kg:3598 ?area1 .\",\n    \"  kg:5245 kg:3598 ?area2 .\",\n    \"  FILTER(?area1 > ?area2) .\",\n    \"  BIND(kg:4738 AS ?lake1) .\",\n    \"  BIND(kg:5245 AS ?lake2) .\",\n    \"} \"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"?book wdt:P31 wd:Q772563 .\", \">// Instance of a book\",\n    \"?book wdt:P144 wd:Q198012 .\", \">// Part of the Foundation series by Asimov\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1564644 is Foundation series\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  wd:Q1564644 wdt:P527 ?book .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7758 is Foundation series\nkg:4983 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  kg:7758 kg:4983 ?book .\",\n    \"} \"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"wd:Q2046 wdt:P19 ?birthPlace .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1339 is Johann Sebastian Bach\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?placeOfBirth WHERE {\",\n    \"wd:Q1339 wdt:P19 ?placeOfBirth.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9729 is Johann Sebastian Bach\nkg:2247 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?placeOfBirth WHERE {\",\n    \"  kg:9729 kg:2247 ?placeOfBirth .\",\n    \"} \"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?metro wdt:P31 wd:Q547286 .\", \">// Instance of metro system\",\n    \"?metro wdt:P571 ?inceptionDate .\", \">// Inception date of the metro\",\n    \"?metro wdt:P131 ?city .\", \">// Metro is located in city\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherMetro wdt:P31 wd:Q547286 ;\",\n    \"wdt:P571 ?otherInceptionDate ;\",\n    \"wdt:P131 ?city ;\",\n    \"FILTER(?otherInceptionDate < ?inceptionDate) .\",\n    \"}\",\n    \"} ORDER BY ASC(?inceptionDate) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5503 is rapid transit\nwdt:P571 is inception\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?metro wdt:P31 wd:Q5503 ;\",\n    \"   wdt:P571 ?inception ;\",\n    \"   wdt:P131 ?city .\",\n    \"}\",\n    \"ORDER BY ASC(?inception)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9312 is instance of\nkg:2195 is rapid transit\nkg:4613 is inception\nkg:2724 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?metro kg:9312 kg:2195 .\",\n    \"?metro kg:4613 ?inception .\",\n    \"?metro kg:2724 ?city .\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherMetro kg:9312 kg:2195 .\",\n    \"?otherMetro kg:4613 ?otherInception .\",\n    \"FILTER(?otherInception < ?inception)\",\n    \"} }\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"wd:Q190204 wdt:P176 ?designer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P287 is designed by", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"wd:Q125006 wdt:P287 ?designer.\",\n    \"}\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0242 is Brooklyn Bridge\nkg:9045 is designed by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0242 kg:9045 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Eurasia wdt:P1082 ?population .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5401 is Eurasia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q5401 wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Eurasia\nkg:7501 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8473 kg:7501 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q156498 wdt:P1082 ?population .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q949779 is Melbourne\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"wd:Q949779 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6378 is Melbourne\nkg:3570 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6378 kg:3570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE { wd:Q5968 wd:P17 ?country . }\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q513 is Mount Everest\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q513 wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6089 is Mount Everest\nkg:8406 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:6089 kg:8406 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n    \"  wd:Q206875 wdt:P170 ?artist .\", \">// Q206875 is the Wikidata ID for 'The Three Dancers'\",\n    \"  ?artist wdt:P135 ?movement .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3235867 is The Three Dancers\nwdt:P170 is creator\nwdt:P135 is movement", "response": "{\n  \"query\": [\n    \"SELECT ?movement WHERE {\",\n    \"wd:Q3235867 wdt:P170 ?creator .\",\n    \"?creator wdt:P135 ?movement .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2470 is The Three Dancers\nkg:6531 is creator\nkg:8386 is movement", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2470 kg:6531 ?creator .\",\n    \"  ?creator kg:8386 ?resource .\",\n    \"} \"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q205764 .\", \">// Instance of military operation\",\n    \"  ?resource rdfs:label 'Operation Overlord'@en .\", \">// Label in English\",\n    \"  ?resource wdt:P580 ?start .\", \">// Start time\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8641370 is Operation Overlord\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q8641370 wdt:P580 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2567 is Operation Overlord\nkg:0436 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2567 kg:0436 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the bridge with the longest span?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the bridge with the longest span?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  ?bridge wdt:P3914 ?span .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherBridge wdt:P3914 ?otherSpan .\",\n    \"    FILTER (?otherSpan > ?span)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is there a video game called Battle Chess?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is there a video game called Battle Chess?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q7889 .\", \">// Instance of video game\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(LANG(?label) = 'en') .\",\n    \"FILTER(CONTAINS(LCASE(?label), 'battle chess')) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q1348259 wdt:P674 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P119 is place of burial\nwd:Q3411252 is Pyramid G1-a", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P119 wd:Q3411252 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8446 is place of burial\nkg:5206 is Pyramid G1-a", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:8446 kg:5206 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?socrates wdt:P279* wd:Q845 .\", \">// Socrates (wd:Q845) and his students or influenced people\",\n    \"?socrates wdt:P106/psn:P106/wdt:P106 ?resource .\", \">// where the resource is a person\",\n    \"?resource wdt:P279* wd:Q13495 .\", \">// and the resource is Aristotle (wd:Q13495) or his students\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' }\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q868 is Aristotle\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q868 wdt:P737 ?resource .\",\n    \"  FILTER(?resource = wd:Q913) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3713 is Aristotle\nkg:3382 is influenced by\nkg:4528 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3713 kg:3382 kg:4528 .\",\n    \"  BIND(kg:3713 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q1564 wdt:P40 ?child .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34969 is Benjamin Franklin\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q34969 wdt:P40 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Benjamin Franklin\nkg:3793 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  kg:3786 kg:3793 ?child .\",\n    \"} \"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"wd:Q14578 wdt:P2046 ?height .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41421 is Michael Jordan\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"wd:Q41421 wdt:P2048 ?height .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4261 is Michael Jordan\nkg:0068 is height", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4261 kg:0068 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"wd:Q128549 wdt:P159 ?headquarters .\",\n    \"?headquarters wdt:P131 ?city .\",\n    \"?city wdt:P31 wd:Q515 .\",\n    \"?city wdt:P17 wd:Q145 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q184560 is Secret Intelligence Service\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?city WHERE {\",\n \t\t\"wd:Q184560 wdt:P159 ?headquarters .\",\n \t\t\"?headquarters wdt:P31 wd:Q515 .\",\n \t\t\"FILTER EXISTS {?city wdt:P131* ?headquarters} .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1223 is Secret Intelligence Service\nkg:2929 is headquarters location\nkg:9030 is instance of\nkg:4329 is city", "response": "{\n \t\"query\": [\n \t\t\"?city\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?service kg:9030 kg:1223 .\",\n \t\t\"?service kg:2929 ?location .\",\n \t\t\"?location kg:9030 kg:4329 .\",\n \t\t\"?location rdfs:label ?city .\",\n \t\t\"FILTER (lang(?city) = 'en')\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q180463 wdt:P178 ?creator .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5930 is Family Guy\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q5930 wdt:P170 ?creator .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0871 is Family Guy\nkg:4258 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  kg:0871 kg:4258 ?creator .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?grandchildren WHERE {\",\n    \"  wd:Q2963 wdt:P40 ?child .\",\n    \"  ?child wdt:P40 ?grandchildren .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  wd:Q303 wdt:P40 ?child .\",\n    \"  ?child wdt:P40 ?grandchild .\",\n    \"}\",\n    \"VALUES (?grandchild) { (wdt:P31) }\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is Elvis Presley\nkg:5388 is child\nkg:5388 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  kg:6814 kg:5388 ?child .\",\n    \"  ?child kg:5388 ?grandchild .\",\n    \"} ORDER BY ?grandchild\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q12756 wdt:P31 wd:Q395 ;\", \">// Ming dynasty (Q12756) is an instance of (P31) state or territory (Q395)\",\n    \"  wd:Q12756 wdt:P582 ?resource .\", \">// Dissolved or ended (P582) with the resource\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9903 is Ming dynasty\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q9903 wdt:P576 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4661 is Ming dynasty\nkg:6940 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4661 kg:6940 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"  wd:Q162478 wdt:P39/wdt:P1064* ?militaryPosition .\",\n    \"  ?militaryPosition wdt:P361 ?conflict .\",\n    \"  ?conflict wdt:P31 wd:Q1984564 .\",\n    \"} ORDER BY DESC(?conflict)\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170596 is T. E. Lawrence\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"  wd:Q170596 wdt:P607 ?conflict .\",\n    \"} \"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3636 is T. E. Lawrence\nkg:6895 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"  kg:3636 kg:6895 ?conflict .\",\n    \"} \"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timezone WHERE {\",\n    \"wd:Q156498 wdt:P421 ?timezone .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187893 is San Pedro de Atacama\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timezone WHERE {\",\n    \"  wd:Q187893 wdt:P421 ?timezone .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7559 is San Pedro de Atacama\nkg:1880 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7559 kg:1880 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"  wd:Q1234567 wdt:P509 ?causeOfDeath .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4977246 is Bruce Carver\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"wd:Q4977246 wdt:P509 ?causeOfDeath.\",\n    \"}\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2845 is Bruce Carver\nkg:5174 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"  kg:2845 kg:5174 ?causeOfDeath .\",\n    \"}\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?website WHERE {\",\n    \"wd:Q2034 wdt:P119 ?deathPlace .\",\n    \"?deathPlace wdt:P856 ?website .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q91 wdt:P20 ?deathPlace .\",\n \t\t\"?deathPlace wdt:P856 ?resource .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1907 is Abraham Lincoln\nkg:3231 is place of death\nkg:6446 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1907 kg:3231 ?deathPlace .\",\n    \"  ?deathPlace kg:6446 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q1872 wdt:P40 ?child .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q303 wdt:P40 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5360 is Elvis Presley\nkg:0568 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  kg:5360 kg:0568 ?child .\",\n    \"} \"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q16459 wdt:P26 ?person .\",\n    \"  FILTER(?person = wd:Q7830) .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwd:Q13133 is Michelle Obama", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q76 wdt:P26 ?spouse .\",\n \t\t\"FILTER(?spouse = wd:Q13133)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7320 is Barack Obama\nkg:3323 is spouse\nkg:0032 is Michelle Obama", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  kg:7320 kg:3323 ?resource .\",\n \t\t\"  FILTER(?resource = kg:0032)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q174285 wdt:P170 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q780394 is Hotel California\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q780394 wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7168 is Hotel California\nkg:0509 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:7168 kg:0509 ?composer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE { wd:Q19 wd:P36 ?capital . }\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE { wd:Q16 wdt:P36 ?capital . }\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0044 is Canada\nkg:5651 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  kg:0044 kg:5651 ?capital .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q2485 wdt:P35 ?mayor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33935 is Tel Aviv\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q33935 wdt:P6 ?mayor.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6114 is Tel Aviv\nkg:1344 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6114 kg:1344 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?government WHERE { wd:Q159 p:P31/ps:P31/wdt:P279* wd:Q34048 . wd:Q159 wdt:P122 ?government }\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q159 is Russia\np:P122 is basic form of government\nps:P122 is basic form of government\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?government WHERE {\",\n \t\t\"wd:Q159 p:P122/ps:P122 ?government .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0251 is Russia\nkg:2654 is basic form of government\nkg:5180 is basic form of government\nkg:6647 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0251 kg:2654 ?resource .\",\n    \"} \"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q736 (p:P37|p:P2934) ?langStatement.\",\n    \"  ?langStatement ps:P37|ps:P2934 ?language.\",\n    \"  FILTER NOT EXISTS { ?langStatement pq:P582 [] }\", \"# to exclude languages that are no longer spoken\",\n    \"} GROUP BY ?language\"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q739 is Colombia\nwdt:P31 is instance of\nwd:Q34770 is language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q739 wdt:P37 ?language .\",\n    \"} \"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4761 is Colombia\nkg:0115 is instance of\nkg:2850 is language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  kg:4761 kg:0115 ?language .\",\n    \"  ?language kg:2850 ?langInstance .\",\n    \"} GROUP BY ?language\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q214 wdt:P38 ?currency .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213 is Czech Republic\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q213 wdt:P38 ?currency .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3424 is Czech Republic\nkg:7065 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"  kg:3424 kg:7065 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?endCareer WHERE {\",\n    \"wd:Q13568 wdt:P570 ?endCareer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76334 is Boris Becker\np:P106 is occupation\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?endCareer WHERE {\",\n \t\t\"wd:Q76334 p:P106 [pq:P582 ?endCareer].\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is Boris Becker\nkg:4499 is occupation\nkg:7835 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8519 kg:4499/kg:7835 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// instance of film\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P161 wd:Q20892 .\", \">// Julia Roberts acted in the film\",\n    \"?film wdt:P161 wd:Q30324 .\", \">// Richard Gere acted in the film\",\n    \"}\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q48410 is Richard Gere\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P161 wd:Q48410 .\",\n    \"?film wdt:P161 wd:Q40523 .\",\n    \"} ORDER BY ?film\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1148 is instance of\nkg:8130 is film\nkg:2065 is cast member\nkg:3669 is Richard Gere\nkg:2065 is cast member\nkg:8913 is Julia Roberts", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:8130 .\",\n    \"?film kg:2065/kg:3669 .\",\n    \"?film kg:2065/kg:8913 .\",\n    \"} ORDER BY ?film\"\n  ]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q124856; # Instance of an autobiography\",\n    \"wdt:P50 wd:Q973. # Author is Ernest Hemingway\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q23434 is Ernest Hemingway\nwdt:P136 is genre\nwd:Q4184 is autobiography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P50 wd:Q23434 .\",\n \t\t\"?resource wdt:P136 wd:Q4184 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8102 is author\nkg:6083 is Ernest Hemingway\nkg:1624 is genre\nkg:6727 is autobiography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8102 kg:6083 .\",\n    \"?resource kg:1624 kg:6727 .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n    \"  wd:Q60 wdt:P31/wdt:P279* wd:Q515 .\",\n    \"  wd:Q60 wdt:P361 ?borough .\",\n    \"  FILTER(?borough != wd:Q60) .\",\n    \"} LIMIT 5\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q408804 is borough of New York City", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n    \"?borough wdt:P31 wd:Q408804 .\",\n    \"} LIMIT 5\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4033 is instance of\nkg:0913 is borough of New York City", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n    \"?borough kg:is_borough_of_New_York_City kg:0913 .\",\n    \"} LIMIT 5\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q1706 wdt:P206 ?source .\", \">// Ganges (Q1706) and its source\",\n    \"?source wdt:P131* ?country .\", \">// Source is part of the country, using transitive property for broader inclusion\",\n    \"FILTER EXISTS {?country wdt:P31 wd:Q6256} .\", \">// Ensure it's a country (instance of Q6256 - country)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5089 is Ganges\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q5089 wdt:P885/wdt:P17 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3043 is Ganges\nkg:5904 is origin of the watercourse\nkg:1545 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:3043 kg:5904 ?origin .\",\n    \"  ?origin kg:1545 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q193574 wdt:P112 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1336200 is Penguin Books\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q1336200 wdt:P112 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8226 is Penguin Books\nkg:5203 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8226 kg:5203 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q187459 wdt:P86 ?composer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23572 is Game of Thrones\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q23572 wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4662 is Game of Thrones\nkg:5725 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:4662 kg:5725 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  wd:Q1047 wdt:P35 ?president .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q986 is Eritrea\nwdt:P35 is head of state", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  wd:Q986 wdt:P35 ?president .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3708 is Eritrea\nkg:4028 is head of state", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  kg:3708 kg:4028 ?president .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"?mountain wdt:P17 wd:Q408 .\", \">// Located in Australia\",\n    \"{\",\n    \"SELECT ?maxElevation (wdt:P2044) WHERE {\",\n    \"?mountain wdt:P2044 ?elevation .\", \">// Elevation\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\",\n    \"}\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P30 is continent\nwd:Q3960 is Australian continent\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\", \">// mountain instance of mountain\"\n    ,\"?mountain wdt:P30 wd:Q3960 ;\", \">// located in Australian continent\"\n    ,\"?mountain wdt:P2044 ?elevation .\", \">// has elevation above sea level\"\n    ,\"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4685 is instance of\nkg:5080 is mountain\nkg:1335 is continent\nkg:6341 is Australian continent\nkg:1463 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain kg:is_instance_of kg:5080 .\",\n    \"?mountain kg:1463 ?elevation .\",\n    \"?mountain kg:4685/kg:1335 kg:6341 .\",\n    \"FILTER NOT EXISTS { ?otherMountain kg:is_instance_of kg:5080 ; kg:1463 ?otherElevation ; kg:4685/kg:1335 kg:6341 . FILTER(?otherElevation > ?elevation) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q148 wdt:P38 ?currency .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q148 is People's Republic of China\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q148 wdt:P38 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1520 is People's Republic of China\nkg:8265 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"  kg:1520 kg:8265 ?currency .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?oceanographer WHERE {\",\n    \"  ?oceanographer wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"  ?oceanographer wdt:P27 wd:Q34 .\", \">// Nationality is Sweden\",\n    \"  ?oceanographer wdt:P106 wd:Q869185 .\", \">// Occupation is oceanographer\",\n    \"} ORDER BY ?oceanographer\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation\nwd:Q3546255 is oceanographer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P27 wd:Q34 ;\",\n    \"         wdt:P106 wd:Q3546255 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9026 is country of citizenship\nkg:8563 is Sweden\nkg:2886 is occupation\nkg:6380 is oceanographer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9026 kg:8563 .\",\n    \"?resource kg:2886 kg:6380 .\",\n    \"} \"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q174235 wdt:P26 ?person .\", \">// Rita Wilson's Wikidata ID is Q174235, and P26 is the property for spouse\",\n    \"}\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse\nwd:Q234144 is Rita Wilson", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q2263 wdt:P26 ?spouse .\",\n \t\t\"FILTER(?spouse = wd:Q234144)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is Tom Hanks\nkg:8992 is spouse\nkg:6150 is Rita Wilson", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3108 kg:8992 ?resource .\",\n    \"  FILTER(?resource = kg:6150) .\",\n    \"} \"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P37 wd:Q886 .\",\n    \"} VALUES (?type) {(wdt:P31) (wdt:P279)}\",\n    \"GROUP BY ?country\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language\nwd:Q5287 is Japanese", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country wdt:P31 wd:Q6256 .\",\n    \"?country wdt:P37 wd:Q5287 .\",\n    \"} \"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is instance of\nkg:4094 is country\nkg:2472 is official language\nkg:1348 is Japanese", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country kg:0335 kg:4094 .\",\n    \"?country kg:2472 kg:1348 .\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"?museum wdt:P31 wd:Q6370.\",\n    \"?museum wdt:P131 wd:Q60.\",\n    \"?museum p:P2145 ?statement.\",\n    \"?statement pq:P585 wd:Q21.\",\n    \"}\",\n    \"ORDER BY DESC(?visitors)\",\n    \"LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P159 is headquarters location\nwd:Q60 is New York City\nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P1174 is visitors per year", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"?museum wdt:P31 wd:Q33506 ;\", \">// Museum instance of\"\n    ,\"wdt:P159 wd:Q60 ;\", \">// Located in New York City\"\n    ,\"wdt:P1174 ?visitors .\", \">// Has visitors per year\"\n    ,\"{\",\n    \"?museum wdt:P1174 ?maxVisitors .\",\n    \"} ORDER BY DESC(?visitors) LIMIT 1\",\n    \"}\"\n  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2365 is headquarters location\nkg:7693 is New York City\nkg:0004 is instance of\nkg:4808 is museum\nkg:6753 is visitors per year", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum kg:2365 kg:7693 ;\",\n    \"      kg:0004 kg:4808 ;\",\n    \"      kg:6753 ?visitors .\",\n    \"}\",\n    \"ORDER BY DESC(?visitors)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE {\",\n    \"?album wdt:P31 wd:Q234468; \", \">// Instance of musical album\",\n    \"wdt:P179 wd:Q50514. \", \">// Part of Queen discography\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q15862 is Queen\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE {\",\n    \"?album wdt:P31 wd:Q482994 ;\", \">// album is an instance of 'album'\",\n    \"wdt:P175 wd:Q15862 ;\", \">// album's performer is Queen\",\n    \"wdt:P577 ?date .\", \">// publication date of the album\",\n    \"{\",\n    \"SELECT (MIN(?date) AS ?minDate) WHERE {\",\n    \"?album wdt:P31 wd:Q482994 ;\",\n    \"wdt:P175 wd:Q15862 ;\",\n    \"wdt:P577 ?date .\",\n    \"}\",\n    \"} FILTER(?date = ?minDate) }\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1183 is instance of\nkg:2574 is album\nkg:4363 is performer\nkg:7570 is Queen\nkg:8676 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE {\",\n    \"?album kg:1183 kg:2574 .\",\n    \"?album kg:4363 kg:7570 .\",\n    \"OPTIONAL {?album kg:8676 ?date .}\",\n    \"} ORDER BY ASC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?movie wdt:P57 wd:Q8069 .\", \">// Directed by or starring Alec Guinness (Q8069)\",\n    \"OPTIONAL {?movie wdt:P580 ?date .}\", \">// Release date, if available\",\n    \"} ORDER BY DESC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q103894 is Alec Guinness\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\",\n    \"     wdt:P161 wd:Q103894 ;\",\n    \"     wdt:P577 ?date .\",\n    \"}\",\n    \"ORDER BY DESC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2886 is instance of\nkg:3087 is film\nkg:8937 is cast member\nkg:7063 is Alec Guinness\nkg:6539 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:3087 true .\",\n    \"?movie kg:8937 kg:7063 .\",\n    \"OPTIONAL {?movie kg:6539 ?date .}\",\n    \"} ORDER BY DESC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q156498 wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q858840 is Last Action Hero\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q858840 wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5466 is Last Action Hero\nkg:3948 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  kg:5466 kg:3948 ?actor .\",\n    \"} \"\n  ]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5; wdt:P61 wd:Q24789.\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q339 is Pluto\nwdt:P61 is discoverer or inventor\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n    \"  wd:Q339 wdt:P61 ?discoverer .\",\n    \"  ?discoverer wdt:P31 wd:Q5 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is Pluto\nkg:2200 is discoverer or inventor\nkg:9126 is instance of\nkg:6995 is human", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n    \"  kg:5368 kg:2200 ?discoverer .\",\n    \"  ?discoverer kg:9126 kg:6995 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"wd:Q12094 wdt:P421 ?timeZone .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23337 is Salt Lake City\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"  wd:Q23337 wdt:P421 ?timeZone .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1260 is Salt Lake City\nkg:1170 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1260 kg:1170 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q1872 wdt:P1196 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1048 is Julius Caesar\nwdt:P157 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?killer WHERE { wd:Q1048 wdt:P157 ?killer . }\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7526 is Julius Caesar\nkg:4262 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?killer WHERE {\",\n    \"  kg:7526 kg:4262 ?killer .\",\n    \"} \"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 .\", \">// Instance of mountain\",\n    \"?mountain wdt:P17 wd:Q183 .\", \">// Located in Germany (Q183)\",\n    \"OPTIONAL {?mountain wdt:P2044 ?elevation .}\", \">// Elevation\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\", \">// mountain instance of mountain\",\n    \"wdt:P17 wd:Q183 ;\", \">// located in Germany\",\n    \"wdt:P2044 ?elevation .\", \">// has elevation\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2561 is instance of\nkg:4362 is mountain\nkg:7164 is elevation above sea level\nkg:2200 is country\nkg:0428 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain kg:2561 kg:4362 .\",\n    \"?mountain kg:7164 ?elevation .\",\n    \"?mountain kg:2200 kg:0428 .\",\n    \"FILTER NOT EXISTS { ?otherMountain kg:2200 kg:0428 ; kg:7164 ?otherElevation . FILTER(?otherElevation > ?elevation) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president wdt:P39 wd:Q11696 .\", \">// Instance of President of the United States\",\n    \"?president wdt:P580 ?start .\", \">// Start time of presidency\",\n    \"?president wdt:P582 ?end .\", \">// End time of presidency\",\n    \"FILTER(?start < \\\"1975-04-30\\\"^^xsd:dateTime && ?end > \\\"1955-11-01\\\"^^xsd:dateTime) .\", \">// Vietnam War period (1955-1975)\",\n    \"?president wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"}\"\n  ]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8740 is Vietnam War\nwdt:P580 is start time\nwd:Q8740 is Vietnam War\nwdt:P582 is end time\nwd:Q30 is United States of America\np:P6 is head of government\nps:P6 is head of government\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"wd:Q8740 wdt:P580 ?warStart ; wdt:P582 ?warEnd .\",\n    \"?presidency p:P6 ?statement .\",\n    \"?statement ps:P6 ?president ; pq:P580 ?termStart ; pq:P582 ?termEnd .\",\n    \"FILTER(?termStart <= ?warEnd && ?termEnd >= ?warStart) .\",\n    \"?president wdt:P39 wd:Q11696 .\",\n    \"} ORDER BY ?termStart\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Vietnam War\nkg:8702 is start time\nkg:9596 is Vietnam War\nkg:8819 is end time\nkg:6919 is United States of America\nkg:6335 is head of government\nkg:0704 is head of government\nkg:3171 is start time\nkg:6726 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president kg:6335/kg:0704 ?governmentPeriod .\",\n    \"?governmentPeriod kg:3171 ?presidentStart .\",\n    \"?governmentPeriod kg:6726 ?presidentEnd .\",\n    \"FILTER(?presidentStart <= ?end AND ?presidentEnd >= ?start) .\",\n    \"kg:9596 kg:8702 ?start .\",\n    \"kg:9596 kg:8819 ?end .\",\n    \"} ORDER BY ?presidentStart\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n    \"  wd:Q162594 wdt:P569 ?date .\", \">// Rachel Stevens (wd:Q162594) birth date\",\n    \"  ?artist wdt:P569 ?date .\", \">// Other artists born on the same date\",\n    \"  FILTER(?artist != wd:Q162594) .\", \">// Exclude Rachel Stevens herself\",\n    \"}\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q483501 is artist\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n    \"  wd:Q241665 wdt:P569 ?birthDate .\",\n    \"  ?artist wdt:P569 ?birthDate ;\",\n    \"        wdt:P106/wdt:P279* wd:Q483501 .\",\n    \"  FILTER(?artist != wd:Q241665)\",\n    \"} \"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2702 is Rachel Stevens\nkg:2966 is date of birth\nkg:4710 is occupation\nkg:7646 is subclass of\nkg:0996 is artist\nkg:2966 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n    \"  kg:2702 kg:2966 ?birthDate .\",\n    \"  ?artist kg:2966 ?birthDate .\",\n    \"  ?artist kg:4710 ?occupation .\",\n    \"  ?occupation kg:7646 kg:0996 .\",\n    \"  FILTER(?artist != kg:2702)\",\n    \"} \"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?profession WHERE {\",\n    \"wd:Q19375 wdt:P106 ?profession .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?occupation WHERE {\",\n    \"wd:Q7934 wdt:P106 ?occupation .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Frank Herbert\nkg:4981 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6211 kg:4981 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadiumCapacity WHERE {\",\n    \"wd:Q1069 wdt:P1125 ?stadium .\",\n    \"?stadium wdt:P1234 ?stadiumCapacity .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128446 is FC Porto\nwdt:P115 is home venue\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadiumCapacity WHERE {\",\n    \"wd:Q128446 wdt:P115 ?stadium .\",\n    \"?stadium wdt:P1083 ?stadiumCapacity .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1293 is FC Porto\nkg:3596 is home venue\nkg:4727 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?capacity WHERE {\",\n    \"  kg:1293 kg:3596 ?stadium .\",\n    \"  ?stadium kg:4727 ?capacity .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?program WHERE {\",\n    \"?program wdt:P31 wd:Q2057648 .\", \">// Instance of frequent flyer program\",\n    \"?program wdt:P1923 ?airlineCount .\", \">// Number of airlines in the program\",\n    \"{\",\n    \"  SELECT (MAX(?count) AS ?maxCount) WHERE {\",\n    \"    ?program wdt:P31 wd:Q2057648 .\",\n    \"    ?program wdt:P1923 ?count .\",\n    \"  }\",\n    \"}\",\n    \"FILTER (?airlineCount = ?maxCount)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline\np:P4446 is reward program\nps:P4446 is reward program", "response": "{\n  \"query\": [\n    \"SELECT ?program WHERE {\",\n    \"?program p:P4446 [ps:P4446 ?rewardProgram].\",\n    \"{\",\n    \"  SELECT ?rewardProgram (COUNT(?airline) AS ?count) WHERE {\",\n    \"    ?airline wdt:P31 wd:Q46970.\",\n    \"    ?airline p:P4446 [ps:P4446 ?rewardProgram].\",\n    \"  } GROUP BY ?rewardProgram ORDER BY DESC(?count) LIMIT 1\",\n    \"}\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7931 is instance of\nkg:8697 is airline\nkg:6223 is reward program\nkg:4848 is reward program", "response": "{\n  \"query\": [\n    \"SELECT ?rewardProgram WHERE {\",\n    \"?rewardProgram kg:is instance of kg:6223 .\",\n    \"{\",\n    \"  SELECT ?rewardProgram (COUNT(?airline) AS ?count) WHERE {\",\n    \"    ?rewardProgram kg:has airline ?airline .\",\n    \"    ?airline kg:is instance of kg:8697 .\",\n    \"  } GROUP BY ?rewardProgram\",\n    \"} ORDER BY DESC(?count) LIMIT 1\"\n    ]}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country wdt:P31 wd:Q6256 ;\", \">// country is an instance of a country\",\n    \"wdt:P122 wd:Q43084 .\", \">// has constitutional monarchy as government type\",\n    \"?country wdt:P30 wd:Q46 .\", \">// located in Europe\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P122 is basic form of government\nwd:Q41614 is constitutional monarchy", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country wdt:P122 wd:Q41614 .\",\n    \"?eu wdt:P150 ?country .\",\n    \"?eu wdt:P31 wd:Q458 .\",\n    \"} ORDER BY ASC(?country)\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4311 is European Union\nkg:4161 is contains the administrative territorial entity\nkg:0520 is basic form of government\nkg:5768 is constitutional monarchy", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country kg:4161/kg:4311 .\", \">// Country is in the European Union\",\n    \"?country kg:0520/kg:5768 .\", \">// Country has a constitutional monarchy as its basic form of government\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?cave wdt:P31 wd:Q474075 .\", \">// Instance of cave\",\n    \"  ?cave wdt:P17 ?country .\", \">// Country of the cave\",\n    \"  {\",\n    \"    SELECT ?country (COUNT(?cave) AS ?count) WHERE {\",\n    \"      ?cave wdt:P31 wd:Q474075 .\",\n    \"      ?cave wdt:P17 ?country .\",\n    \"    } GROUP BY ?country HAVING (?count > 2)\",\n    \"  }\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35509 is cave\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?country WHERE {\",\n    \"?place wdt:P31 wd:Q35509 .\", \">// place is an instance of a cave\",\n    \"?place wdt:P17 ?country .\", \">// the country where the cave is located\",\n    \"{\",\n    \"  SELECT ?country (COUNT(DISTINCT ?place) AS ?caveCount)\",\n    \"  WHERE {\",\n    \"    ?place wdt:P31 wd:Q35509 .\",\n    \"    ?place wdt:P17 ?country .\",\n    \"  } GROUP BY ?country HAVING (?caveCount > 2)\",\n    \"}\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9167 is instance of\nkg:4381 is cave\nkg:1762 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?place kg:9167 kg:4381 .\",\n    \"?place kg:9167 kg:4381 .\",\n    \"?place kg:9167 kg:4381 .\",\n    \"?place kg:1762 ?country .\",\n    \"FILTER (COUNT(?place) > 2) } GROUP BY ?country\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"wd:Q2481 wdt:P1477 ?birthName .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"wd:Q567 wdt:P1477 ?birthName.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7741 is Angela Merkel\nkg:3407 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"  kg:7741 kg:3407 ?birthName .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q64 wdt:P35 ?mayor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"wd:Q64 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5823 is Berlin\nkg:5984 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5823 kg:5984 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256 ;\", \"># country is an instance of a country\",\n    \"        wdt:P498 ?isoCode ;\", \">// has ISO 3166-1 code (not strictly necessary, but useful for filtering)\",\n    \"        wdt:P2071 wd:Q4917 .\", \">// uses the Euro as currency\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?country WHERE {\",\n \t\t\"?country wdt:P150 wd:Q458 .\",\n \t\t\"?country wdt:P38 wd:Q4916 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4396 is European Union\nkg:1934 is contains the administrative territorial entity\nkg:4547 is currency\nkg:6859 is euro", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:4396 kg:1934 ?country .\",\n    \"  ?country kg:4547 kg:6859 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE { wd:Q5230 wdt:P19 ?place . ?place wdt:P17 ?country }\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5284 is Bill Gates\nwdt:P19 is place of birth\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q5284 wdt:P19 ?placeOfBirth .\",\n    \"?placeOfBirth wdt:P17 ?country .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4141 is Bill Gates\nkg:4973 is place of birth\nkg:6146 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:4141 kg:4973 ?birthPlace .\",\n    \"  ?birthPlace kg:6146 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?grandChildren WHERE {\",\n    \"wd:Q20816 wdt:P3457 ?children .\",\n    \"?children wdt:P40 ?grandChildren .\",\n    \"} GROUP BY ?grandChildren\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83233 is Jacques Cousteau\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchildren WHERE {\",\n    \"  wd:Q83233 wdt:P40 ?children .\",\n    \"  ?children wdt:P40 ?grandchildren .\",\n    \"}\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3588 is Jacques Cousteau\nkg:1573 is child\nkg:1573 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  kg:3588 kg:1573 ?child .\",\n    \"  ?child kg:1573 ?grandchild .\",\n    \"} GROUP BY ?grandchild\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?skateboarder WHERE {\",\n    \"  ?skateboarder wdt:P31 wd:Q5 .\", \">// ?skateboarder is an instance of human\",\n    \"  ?skateboarder wdt:P27 wd:Q34 .\", \">// ?skateboarder is from Sweden\",\n    \"  ?skateboarder wdt:P106 wd:Q185929 .\", \">// ?skateboarder has the occupation of professional skateboarder\",\n    \"} ORDER BY ?skateboarder\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P641 is sport\nwd:Q842284 is skateboarding\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q34 is Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?skateboarder WHERE {\",\n    \"  ?skateboarder wdt:P641 wd:Q842284 .\",\n    \"  ?skateboarder wdt:P19 ?birthPlace .\",\n    \"  ?birthPlace wdt:P131* wd:Q34 .\",\n    \"} ORDER BY ?skateboarder\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3199 is sport\nkg:2295 is skateboarding\nkg:5284 is place of birth\nkg:2937 is located in the administrative territorial entity\nkg:3100 is Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?skateboarder WHERE {\",\n    \"?skateboarder kg:3199 kg:2295 .\",\n    \"?skateboarder kg:5284 ?birthPlace .\",\n    \"?birthPlace kg:2937 kg:3100 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"  ?film wdt:P639 wd:Q7569 .\", \">// Country of origin is Argentina\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q414 is Argentina", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P495 wd:Q414 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4916 is instance of\nkg:9085 is film\nkg:6012 is country of origin\nkg:6146 is Argentina", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:4916 kg:9085 .\",\n    \"?film kg:6012 kg:6146 .\",\n    \"} \"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q16259 wdt:P570 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"  wd:Q2831 wdt:P509 ?causeOfDeath.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3927 is Michael Jackson\nkg:0761 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3927 kg:0761 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35649 .\", \">// Instance of U.S. state\",\n    \"?state p:P571 ?admissionStatement .\", \">// Inception (date of admission)\",\n    \"?admissionStatement ps:P571 ?admissionDate .\",\n    \"OPTIONAL { ?admissionStatement pq:P580 ?endDate . }\", \">// End date, if applicable (for territories that became states)\",\n    \"FILTER(!BOUND(?endDate))\", \">// Filter out any with an end date\",\n    \"} ORDER BY DESC(?admissionDate) LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35657 .\",\n    \"?state wdt:P571 ?inception .\",\n    \"} ORDER BY DESC(?inception) LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0265 is instance of\nkg:2557 is U.S. state\nkg:1837 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state kg:0265 kg:2557 .\",\n    \"?state kg:1837 ?inception .\",\n    \"} ORDER BY DESC(?inception) LIMIT 1\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"wd:Q183549 wdt:P279* ?class .\",\n    \"} LIMIT 10\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11185669 is millipede\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"  wd:Q11185669 wdt:P279* ?class .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0355 is millipede\nkg:4290 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"  kg:0355 kg:4290 ?class .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?homepage WHERE {\",\n    \"  wd:Q34965 wdt:P856 ?homepage .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?homepage WHERE {\",\n \t\t\"wd:Q25161472 wdt:P856 ?homepage .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2247 is Forbes\nkg:2521 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2247 kg:2521 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\"_:b0 <http://www.wikidata.org/prop/direct/P26> ?husband . _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5> . _:b0 <http://www.wikidata.org/prop/direct/P2148> \\\"Amanda Palmer\\\"^^<http://www.w3.org/2001/XMLSchema#string> .\"]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q240377 is Amanda Palmer", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"wd:Q240377 wdt:P26 ?husband.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7753 is spouse\nkg:5663 is Amanda Palmer", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"  kg:5663 kg:7753 ?husband .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?painter WHERE {\",\n    \"  wd:Q189265 wdt:P170 ?painter .\",\n    \"}\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2246489 is The Storm on the Sea of Galilee\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"wd:Q2246489 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9947 is The Storm on the Sea of Galilee\nkg:9480 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  kg:9947 kg:9480 ?creator .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"?place wdt:P31 wd:Q517 .\", \">// Instance of mountain peak\",\n    \"?place wdt:P610 wd:Q249811 .\", \">// Part of Karakoram\",\n    \"{\",\n    \"SELECT (MAX(?elevation) AS ?maxElevation) WHERE {\",\n    \"?place wdt:P2044 ?elevation .\", \">// Elevation\",\n    \"?place wdt:P610 wd:Q249811 .\",\n    \"}\",\n    \"} FILTER (?elevation = ?maxElevation)\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5469 is Karakoram\nwdt:P610 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?highestPlace WHERE {\",\n    \"  wd:Q5469 wdt:P610 ?highestPlace.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1348 is Karakoram\nkg:5338 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1348 kg:5338 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5;\",\n    \"?resource wdt:P39 wd:Q48726;\",\n    \"?resource wdt:P577 ?date.\",\n    \"FILTER(?date >= '1995-01-01'^^xsd:dateTime).\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t  \t \t  \t \t "}
{"question": "When did Finland join the EU?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33 is Finland\np:P463 is member of\npq:P580 is start time\nps:P463 is member of\nwd:Q458 is European Union", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q33 p:P463 [ ps:P463 wd:Q458 ; pq:P580 ?resource ].\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2680 is Finland\nkg:1277 is member of\nkg:1675 is start time\nkg:8680 is member of\nkg:6217 is European Union", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2680 kg:1277/kg:8680 ?resource .\",\n    \"  ?resource kg:1675 ?startTime .\",\n    \"  FILTER(?resource = kg:6217) .\",\n    \"} ORDER BY ASC(?startTime)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q180462 wdt:P161 ?actor .\",\n    \"} \"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8539 is The Big Bang Theory\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q8539 wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1737 is The Big Bang Theory\nkg:7599 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  kg:1737 kg:7599 ?actor .\",\n    \"} \"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P106 wd:Q247890 .\", \">// person's occupation is computer scientist\",\n    \"?person wdt:P166 wd:Q182292 .\", \">// person has been awarded an Oscar\",\n    \"}\"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82594 is computer scientist\nwdt:P166 is award received\nwdt:P31 is instance of\nwd:Q19020 is Academy Awards", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q82594 .\",\n    \"?person wdt:P166 ?award .\",\n    \"?award wdt:P31 wd:Q19020 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1794 is occupation\nkg:0345 is computer scientist\nkg:5117 is award received\nkg:5645 is instance of\nkg:6613 is Academy Awards", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:1794 kg:0345 .\",\n    \"?person kg:5117 ?award .\",\n    \"?award kg:5645 kg:6613 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q7365 wdt:P50 ?author .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8337 is Harry Potter\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q8337 wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7554 is Harry Potter\nkg:8440 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  kg:7554 kg:8440 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q265349 wdt:P161 ?actor .\",\n    \"  ?actor wdt:P27 wd:Q145 .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12125895 is Lovesick\nwdt:P161 is cast member\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q145 is United Kingdom", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q12125895 wdt:P161 ?actor .\",\n    \"  ?actor wdt:P19/wdt:P17 wd:Q145 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5043 is Lovesick\nkg:7156 is cast member\nkg:3179 is place of birth\nkg:8637 is country\nkg:3447 is United Kingdom", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  kg:5043 kg:7156 ?actor .\",\n    \"  ?actor kg:3179 ?birthPlace .\",\n    \"  ?birthPlace kg:8637 kg:3447 .\",\n    \"} \"\n  ]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q21495 wdt:P19 ?city .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q236 is Montenegro\nwdt:P35 is head of state\nwdt:P19 is place of birth\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?city WHERE {\",\n \t\t\"?president wdt:P35 wd:Q236 .\",\n \t\t\"?president wdt:P19 ?city .\",\n \t\t\"?city wdt:P31 wd:Q515 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6244 is Montenegro\nkg:0839 is head of state\nkg:4651 is place of birth\nkg:0895 is instance of\nkg:0321 is city", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?city WHERE {\",\n \t\t\"?president kg:0839 kg:6244 .\",\n \t\t\"?president kg:4651 ?birthPlace .\",\n \t\t\"?birthPlace kg:0895 kg:0321 .\",\n \t\t\"FILTER (isIRI(?city)) .\",\n \t\t\"VALUES ?city { ?birthPlace }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35657 .\", \">// Instance of U.S. state\",\n    \"?state wdt:P1082 ?population .\", \">// Population\",\n    \"?state wdt:P2046 ?area .\", \">// Area\",\n    \"BIND(?population / ?area AS ?density) .\",\n    \"{\",\n    \"SELECT (MAX(?density) AS ?maxDensity) WHERE {\",\n    \"?state wdt:P31 wd:Q35657 .\",\n    \"?state wdt:P1082 ?population .\",\n    \"?state wdt:P2046 ?area .\",\n    \"BIND(?population / ?area AS ?density) .\",\n    \"}\",\n    \"}\",\n    \"FILTER(?density = ?maxDensity) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1082 is population\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35657 .\",\n    \"?state wdt:P1082 ?population .\",\n    \"?state wdt:P2046 ?area .\",\n    \"BIND(?population / ?area AS ?density) .\",\n    \"} ORDER BY DESC(?density) LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6804 is instance of\nkg:6879 is U.S. state\nkg:9633 is population\nkg:4555 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state kg:6804 kg:6879 .\",\n    \"?state kg:9633 ?population .\",\n    \"?state kg:4555 ?area .\",\n    \"BIND(?population / ?area AS ?density) .\",\n    \"} ORDER BY DESC(?density) LIMIT 1\"\n  ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P31 wd:Q4022; wdt:P17 wd:Q148; wdt:P2043 ?length.\",\n    \"OPTIONAL {?river rdfs:label ?label . FILTER(LANG(?label) = 'en')}\",\n    \"} ORDER BY DESC(?length) LIMIT 1\"\n  ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P17 is country\nwd:Q148 is People's Republic of China\nwdt:P2043 is length", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P31 wd:Q4022 ;\", \">// river instance of river\",\n    \"     wdt:P17 wd:Q148 ;\", \">// located in China\",\n    \"     wdt:P2043 ?length .\", \">// has length\",\n    \"} ORDER BY DESC(?length) LIMIT 1\"\n  ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0268 is instance of\nkg:7764 is river\nkg:6821 is country\nkg:4374 is People's Republic of China\nkg:9050 is length", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river kg:is instance of kg:7764 .\",\n    \"?river kg:9050 ?length .\",\n    \"?river kg:0268 kg:4374 .\",\n    \"FILTER NOT EXISTS { ?otherRiver kg:is instance of kg:7764 ; kg:0268 kg:4374 ; kg:9050 ?otherLength . FILTER(?otherLength > ?length) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?areaCode WHERE {\",\n    \"wd:Q64 wdt:P281 ?areaCode .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P473 is local dialing code", "response": "{\n  \"query\": [\n    \"SELECT ?areaCode WHERE {\",\n    \"wd:Q64 wdt:P473 ?areaCode.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1562 is Berlin\nkg:0879 is local dialing code", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1562 kg:0879 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?scientist WHERE {\",\n    \"  ?scientist wdt:P31 wd:Q901; # instance of human\",\n    \"         wdt:P106 wd:Q1650915; # occupation is scientist\",\n    \"         wdt:P69 ?university. # educated at university\",\n    \"  ?university wdt:P31 wd:Q7278; # instance of educational institution\",\n    \"            wdt:P17 wd:Q30; # located in the United States\",\n    \"            wdt:P3546 wd:Q194181. # part of Ivy League\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q901 is scientist\nwdt:P69 is educated at\nwd:Q49113 is Ivy League\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?scientist WHERE {\",\n    \"?scientist wdt:P106 wd:Q901 .\",\n    \"?scientist wdt:P69 ?university .\",\n    \"?university wdt:P527 wd:Q49113 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1048 is occupation\nkg:6101 is scientist\nkg:2513 is educated at\nkg:4279 is Ivy League\nkg:2228 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?scientist WHERE {\",\n    \"?scientist kg:1048 kg:6101 .\",\n    \"?scientist kg:2513 ?university .\",\n    \"?university kg:2228 kg:4279 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?surfer WHERE {\",\n    \"  ?surfer wdt:P31 wd:Q5 .\", \">// The surfer is an instance of a human\",\n    \"  ?surfer wdt:P106 wd:Q28394 .\", \">// The surfer's occupation is surfing\",\n    \"  ?surfer wdt:P19/wdt:P17 wd:Q408 .\", \">// The surfer was born in a place that is in Australia\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P106 is occupation\nwd:Q13561328 is surfer", "response": "{\n  \"query\": [\n    \"SELECT ?surfer WHERE {\",\n    \"?surfer wdt:P19/wdt:P17 wd:Q408 ;\",\n    \"wdt:P106 wd:Q13561328 .\",\n    \"} ORDER BY ?surfer\"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4767 is place of birth\nkg:7914 is country\nkg:1900 is Australia\nkg:2462 is occupation\nkg:6340 is surfer", "response": "{\n  \"query\": [\n    \"SELECT ?surfer WHERE {\",\n    \"?surfer kg:4767 ?birthPlace .\",\n    \"?birthPlace kg:7914 kg:1900 .\",\n    \"?surfer kg:2462 kg:6340 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  ?party wdt:P31 wd:Q7204 .\", \">// P31 is 'instance of', Q7204 is 'political party'\",\n    \"  ?party wdt:P17 wd:Q55 .\", \">// P17 is 'country', Q55 is 'Netherlands'\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q7278 is political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  ?party wdt:P31 wd:Q7278 ;\",\n    \"        wdt:P17 wd:Q55 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1972 is country\nkg:1749 is Netherlands\nkg:3085 is instance of\nkg:4788 is political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"?party kg:3085 kg:4788 .\",\n    \"?party kg:1972 kg:1749 .\",\n    \"} \"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE { wd:Q111 wdt:P402 ?moon . }\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111 is Mars\nwdt:P398 is child astronomical body", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"  wd:Q111 wdt:P398 ?moon .\",\n    \"} \"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5773 is Mars\nkg:8511 is child astronomical body", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"  kg:5773 kg:8511 ?moon .\",\n    \"} LIMIT 2\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q24765 rdfs:label 'Batman'@en ;\",\n    \"  wdt:P31/wdt:P279* wd:Q5 .\",\n    \"  ?resource wdt:P1477 wd:Q24765 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P460 is said to be the same as", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q2695156 wdt:P460 ?resource .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8690 is Batman\nkg:9050 is said to be the same as", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8690 kg:9050 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q5468 wdt:P170 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q359 is WikiLeaks\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q359 wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2318 is WikiLeaks\nkg:3776 is author", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2318 kg:3776 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?resource rdfs:label 'Carlo Giuliani'@en .\", \">// Label in English\",\n    \"?resource wdt:P2860 ?event .\", \">// Involved in event\",\n    \"?event wdt:P31 wd:Q174591 .\", \">// Event is a shooting\",\n    \"?event wdt:P585 ?date .\", \">// Date of the event\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q164791 is Carlo Giuliani\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q164791 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5393 is Carlo Giuliani\nkg:1019 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5393 kg:1019 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE { wd:Q945 wdt:P22 ?wife . }\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?wife WHERE {\",\n \t\t\"wd:Q91 wdt:P26 ?wife .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0844 is Abraham Lincoln\nkg:0994 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  kg:0844 kg:0994 ?wife .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q8297 wdt:P166 ?award .\",\n    \"} GROUP BY ?award\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33760 is Bertrand Russell\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q33760 wdt:P166 ?award .\",\n    \"}\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2307 is Bertrand Russell\nkg:0557 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  kg:2307 kg:0557 ?award .\",\n    \"} \"\n  ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q123456 wdt:P1109 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83325 is Pamela Anderson\nwdt:P1576 is lifestyle\nwd:Q83364 is vegetarianism", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q83325 wdt:P1576 ?resource .\",\n    \"  FILTER(?resource = wd:Q83364)\",\n    \"}\"\n  ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5099 is Pamela Anderson\nkg:1327 is lifestyle\nkg:6354 is vegetarianism", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5099 kg:1327 ?resource .\",\n    \"  FILTER(?resource = kg:6354)\",\n    \"} \"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?probe WHERE {\",\n    \"?probe wdt:P31 wd:Q16521; wdt:P690 wd:Q525.\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P522 is type of orbit\nwd:Q737809 is heliocentric orbit", "response": "{\n  \"query\": [\n    \"SELECT ?probe WHERE {\",\n    \"?probe wdt:P522 wd:Q737809 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3989 is type of orbit\nkg:2459 is heliocentric orbit", "response": "{\n  \"query\": [\n    \"SELECT ?probe WHERE {\",\n    \"?probe kg:hasOrbit/kg:orbitType kg:2459 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q175846 wdt:P25 ?daughter .\", \">// Robert Kennedy's daughter\",\n    \"  ?daughter wdt:P26 ?spouse .\", \">// The daughter is married to ?spouse\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25310 is Robert F. Kennedy\nwdt:P40 is child\nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q25310 wdt:P40 ?child .\",\n \t\t\"?child wdt:P21 wd:Q6581072 .\",\n \t\t\"?child wdt:P26 ?spouse .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5083 is Robert F. Kennedy\nkg:1582 is child\nkg:5789 is sex or gender\nkg:3234 is female\nkg:0173 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"  kg:5083 kg:1582 ?child .\",\n \t\t\"  ?child kg:5789 kg:3234 .\",\n \t\t\"  ?child kg:0173 ?spouse .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?students WHERE {\",\n    \"wd:Q160745 wdt:P179 wd:Q283117 .\", \">// Free University of Amsterdam (VU) is part of the Vrije Universiteit Amsterdam organization\",\n    \"wd:Q160745 wdt:P1865 ?students .\",\n    \"}\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214341 is University of Amsterdam\nwdt:P2196 is students count", "response": "{\n  \"query\": [\n    \"SELECT ?students WHERE {\",\n    \"  wd:Q214341 wdt:P2196 ?students .\",\n    \"}\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4066 is University of Amsterdam\nkg:8357 is students count", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4066 kg:8357 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?revenue WHERE {\",\n    \"wd:Q132476 wdt:P2139 ?revenue .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P2139 is total revenue", "response": "{\n  \"query\": [\n    \"SELECT ?revenue WHERE {\",\n    \"wd:Q37156 wdt:P2139 ?revenue.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8611 is IBM\nkg:4561 is total revenue", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8611 kg:4561 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bondMovie WHERE {\",\n    \"  ?bondMovie wdt:P31 wd:Q209621 .\",\n    \"} ORDER BY ASC(?bondMovie)\"\n  ]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwd:Q2009573 is James Bond\nwdt:P144 is based on\nwdt:P674 is characters", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\",\n    \"wdt:P674 wd:Q2009573 .\",\n    \"} ORDER BY ASC(?movie)\"\n  ]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7008 is instance of\nkg:7673 is film\nkg:9402 is James Bond\nkg:9593 is based on\nkg:2301 is characters", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:7008 kg:7673 .\",\n    \"?movie kg:9593 kg:9402 .\",\n    \"} ORDER BY ?movie\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"wd:Q186475 wdt:P725 ?voiceActor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5480 is Bart Simpson\nwdt:P725 is voice actor", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"wd:Q5480 wdt:P725 ?voiceActor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0013 is Bart Simpson\nkg:9734 is voice actor", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"  kg:0013 kg:9734 ?voiceActor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q177284 wdt:P26 ?spouse .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q2263 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4790 is Tom Hanks\nkg:1852 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:4790 kg:1852 ?spouse .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q1768 wdt:P1038 ?country .\",\n    \"} \"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q78707 is Yenisey\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q78707 wdt:P17 ?country .\",\n    \"} \"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4880 is Yenisey\nkg:6798 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  kg:4880 kg:flowsThrough ?country .\",\n    \"  ?country rdf:type kg:6798 .\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?car WHERE {\",\n    \"  ?car wdt:P17 wd:Q183 .\", \">// P17 is 'country of origin', Q183 is 'Germany'\",\n    \"  ?car wdt:P31 wd:Q40221 .\", \">// P31 is 'instance of', Q40221 is 'automobile'\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q59773381 is automobile model series\nwdt:P176 is manufacturer\nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwd:Q786820 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?car WHERE {\",\n    \"  ?car wdt:P31 wd:Q59773381 ;\", \">// car is an instance of automobile model series\",\n    \"  ?car wdt:P176 ?manufacturer .\", \">// car has a manufacturer\",\n    \"  ?manufacturer wdt:P17 wd:Q183 .\", \">// manufacturer is located in Germany\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4758 is instance of\nkg:4232 is automobile model series\nkg:9437 is manufacturer\nkg:8414 is country\nkg:9406 is Germany\nkg:4758 is instance of\nkg:2448 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?car WHERE {\",\n    \"  ?car kg:4232 ?model .\",\n    \"  ?model kg:9437 ?manufacturer .\",\n    \"  ?manufacturer kg:8414 kg:9406 .\",\n    \"} \"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q16259 wdt:P570 ?date .\",\n    \"  BIND(?date AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2831 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1405 is Michael Jackson\nkg:3025 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1405 kg:3025 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?volcano WHERE {\",\n    \"?volcano wdt:P31 wd:Q8502 .\", \">// Instance of volcano\",\n    \"?volcano wdt:P610 wd:Q15349 .\", \">// Located in Africa\",\n    \"{\",\n    \"SELECT (MAX(?elevation) AS ?maxElevation) WHERE {\",\n    \"?volcano wdt:P2044 ?elevation .\", \">// Elevation of the volcano\",\n    \"?volcano wdt:P610 wd:Q15349 .\", \">// Located in Africa\",\n    \"}\",\n    \"} FILTER(?elevation = ?maxElevation) .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?volcano WHERE {\",\n    \"?volcano wdt:P31/wdt:P279* wd:Q8072 .\",\n    \"?volcano wdt:P30 wd:Q15 .\",\n    \"OPTIONAL {?volcano wdt:P2044 ?elevation .}\",\n    \"} ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2785 is continent\nkg:0205 is Africa\nkg:3352 is instance of\nkg:5941 is subclass of\nkg:4262 is volcano\nkg:0560 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?volcano WHERE {\",\n    \"?volcano kg:3352 kg:4262 .\", \">// Volcano instance of Volcano\"\n    ,\"?volcano kg:5941/kg:0205 kg:0205 .\", \">// Volcano located in Africa (subclass of or directly in)\"\n    ,\"OPTIONAL {?volcano kg:0560 ?elevation .}\", \">// Elevation above sea level\"\n    ,\"FILTER NOT EXISTS { ?otherVolcano kg:3352 kg:4262 ; kg:5941/kg:0205 kg:0205 ; kg:0560 ?otherElevation . FILTER(?otherElevation > ?elevation) }\", \">// Ensure no other volcano in Africa has a higher elevation\"\n    ,\"}\"\n  ]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n    \"  ?spacecraft wdt:P31 wd:Q523 .\", \">// Instance of spacecraft\",\n    \"  ?spacecraft wdt:P306 wd:Q11191 .\", \">// Mission to Mars\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q389459 is Mars rover", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n    \"?spacecraft wdt:P31 wd:Q389459 .\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4000 is instance of\nkg:9758 is Mars rover", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n    \"?spacecraft kg:4000 kg:9758 .\",\n    \"} \"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"        wdt:P495 wd:Q214 ;\", \">// Country of origin is Czech Republic\",\n    \"        wdt:P364 wd:Q8057 .\", \">// Language of work or name is Czech language\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q213 is Czech Republic\nwdt:P495 is country of origin\nwd:Q33946 is Czechoslovakia", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424 ;\",\n    \"        wdt:P495/wd:P17* wd:Q213 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2993 is instance of\nkg:6480 is film\nkg:2995 is country of origin\nkg:1556 is Czech Republic\nkg:2995 is country of origin\nkg:0212 is Czechoslovakia", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:2993 kg:6480 .\",\n    \"{?movie kg:2995 kg:1556} UNION {?movie kg:2995 kg:0212} .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut WHERE {\",\n    \"  ?taikonaut wdt:P31 wd:Q5 .\",\n    \"  ?taikonaut wdt:P106 wd:Q283479 .\",\n    \"  ?taikonaut wdt:P1001 wd:Q148 .\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q148 is People's Republic of China", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut WHERE {\",\n    \"  ?taikonaut wdt:P106 wd:Q11631 ;\",\n    \"         wdt:P27 wd:Q148 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4503 is occupation\nkg:9378 is astronaut\nkg:3941 is country of citizenship\nkg:8528 is People's Republic of China", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut WHERE {\",\n    \"?taikonaut kg:4503 kg:9378 .\",\n    \"?taikonaut kg:3941 kg:8528 .\",\n    \"} ORDER BY ?taikonaut\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?volcano wdt:P31 wd:Q8064.\",\n    \"?volcano wdt:P17 ?country.\",\n    \"{\",\n    \"SELECT ?country (COUNT(?volcano) AS ?count)\",\n    \"WHERE {\",\n    \"?volcano wdt:P31 wd:Q8064; wdt:P17 ?country.\",\n    \"}\",\n    \"GROUP BY ?country\",\n    \"HAVING (?count > 10)\",\n    \"}\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8072 is volcano\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?volcano wdt:P31 wd:Q8072 .\", \">// Volcano instance of volcano\"\n    ,\n    \"?volcano wdt:P17 ?country .\", \">// Volcano is in country\"\n    ,\n    \"{\",\n    \"SELECT ?country (COUNT(?volcano) AS ?count) WHERE {\",\n    \"?volcano wdt:P31 wd:Q8072 .\",\n    \"?volcano wdt:P17 ?country .\",\n    \"} GROUP BY ?country HAVING (?count > 10)\",\n    \"}\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1994 is instance of\nkg:7112 is volcano\nkg:1994 is instance of\nkg:0630 is subclass of\nkg:7112 is volcano\nkg:3464 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?country kg:is_instance_of* kg:3464 .\",\n    \"{\",\n    \"  SELECT ?country (COUNT(?volcano) AS ?count) WHERE {\",\n    \"    ?volcano kg:is_instance_of* kg:7112 .\",\n    \"    ?volcano kg:located_in_country ?country .\",\n    \"  } GROUP BY ?country\",\n    \"} HAVING (?count > 10)\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?movie wdt:P57 wd:Q896 .\", \">// Starring Tom Cruise (Q896)\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P161 wd:Q37079 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7974 is cast member\nkg:1558 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:7974 kg:1558 .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q21684 wdt:P50 ?creator .\",\n    \"  ?creator wdt:P570 ?deathDate .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3266236 is Count Dracula\nwdt:P170 is creator\nwdt:P570 is date of death", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?creator WHERE {\",\n \t\t\"wd:Q3266236 wdt:P170 ?creator .\",\n \t\t\"?creator wdt:P570 ?dateOfDeath .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is Count Dracula\nkg:7234 is creator\nkg:3219 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7006 kg:7234 ?creator .\",\n    \"  ?creator kg:3219 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q328 wd:P170 ?creator .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P170 is creator\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?creator WHERE {\",\n \t\t\"wd:Q52 wdt:P31 wd:Q5 .\", \">// This line is a mistake and should be removed as it incorrectly states that Wikipedia (Q52) is an instance of human (Q5), which is not true. The correct query does not need this line.\",\n \t\t\"wd:Q52 wdt:P170 ?creator .\",\n \t\t\"?creator wdt:P31 wd:Q5 .\", \">// This ensures that the creator is a human.\",\n \t\t\"}\"\n \t]\n}\n \t\t\t\t\t\t\t"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8535 is Wikipedia\nkg:0687 is creator\nkg:4965 is instance of\nkg:7883 is human", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  kg:8535 kg:0687 ?creator .\",\n    \"  ?creator kg:4965 kg:7883 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P31 wd:Q5 ;\", \">#chancellor is an instance of human\",\n    \"  wdt:P21 wd:Q6581072 ;\", \">//chancellor's gender is female\",\n    \"  wdt:P39 wd:Q11696 ;\", \">//chancellor held the position of Chancellor of Germany\",\n    \"  wdt:P27 wd:Q183 .\", \">//chancellor is a citizen of Germany\",\n    \"} ORDER BY ?chancellor\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P21 wd:Q6581072 .\",\n    \"  ?chancellor wdt:P39 wd:Q4970706 .\",\n    \"} ORDER BY DESC(?end)\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3087 is sex or gender\nkg:5264 is female\nkg:4281 is position held\nkg:0263 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n    \"?chancellor kg:3087 kg:5264 .\",\n    \"?chancellor kg:4281 kg:0263 .\",\n    \"} ORDER BY ?chancellor\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q158496 wdt:P355 ?owner .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125054 is Aldi\nwdt:P355 is has subsidiary", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q125054 wdt:P355 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2823 is Aldi\nkg:3490 is has subsidiary", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  kg:2823 kg:3490 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P737 wd:Q2298 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P737 wd:Q913 .\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7202 is instance of\nkg:2379 is human\nkg:1789 is influenced by\nkg:7075 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1789 kg:7075 .\",\n    \"?resource kg:2379 true .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?depth WHERE {\",\n    \"wd:Q193584 p:P2044/psn:P2044/wdt:P2386 ?depth .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4138 is Chiemsee\nwdt:P4511 is vertical depth", "response": "{\n  \"query\": [\n    \"SELECT ?depth WHERE {\",\n    \"wd:Q4138 wdt:P4511 ?depth .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0491 is Chiemsee\nkg:7474 is vertical depth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0491 kg:7474 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q16704 wdt:P22 ?parent .\",\n    \"wd:Q16704 wdt:P25 ?parent .\",\n    \"} GROUP BY ?parent\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9439 is Victoria\nwdt:P22 is father\nwdt:P25 is mother", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q9439 wdt:P22|wdt:P25 ?parent .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9270 is Victoria\nkg:8401 is father\nkg:9007 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  kg:9270 ?relation ?parent .\",\n    \"  FILTER(?relation = kg:8401 || ?relation = kg:9007) .\",\n    \"} ORDER BY ?relation\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?castle WHERE {\",\n    \"?castle wdt:P31 wd:Q40867 .\", \">// Instance of castle\",\n    \"?castle wdt:P17 wd:Q30 .\", \">// Located in the United States\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23413 is castle\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23413 is castle\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31/wdt:P279* wd:Q23413 .\",\n    \"?resource wdt:P17 wd:Q30 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2659 is instance of\nkg:9811 is castle\nkg:2659 is instance of\nkg:0624 is subclass of\nkg:9811 is castle\nkg:6840 is country\nkg:2187 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:is_instance_of* kg:9811 .\",\n    \"?resource kg:is_in_country kg:2187 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q19184 wdt:P37 ?language .\",\n    \"} VALUES (?type) {(wdt:P31)} \"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q191 wdt:P2936 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2008 is Estonia\nkg:5569 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  kg:2008 kg:5569 ?language .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bird WHERE {\",\n    \"  ?bird wdt:P31 wd:Q749025 .\", \">// Instance of bird\",\n    \"  ?bird wdt:P141 wd:Q168156 .\", \">// Conservation status is critically endangered\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P171 is parent taxon\nwd:Q5113 is bird\nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?bird WHERE {\",\n    \"?bird wdt:P171* wd:Q5113 ;\",\n    \"   wdt:P141 wd:Q219127 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7081 is parent taxon\nkg:9693 is bird\nkg:6932 is IUCN conservation status\nkg:4268 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?bird WHERE {\",\n    \"?bird kg:7081/kg:9693 true .\",\n    \"?bird kg:6932 kg:4268 .\",\n    \"} ORDER BY ?bird\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?river wdt:P361 wd:Q2784 .\", \">// Rhine is part of (P361) this river system\",\n    \"?river wdt:P1082 ?country .\", \">// The river flows through (P1082) the country\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q584 is Rhine\nwdt:P17 is country\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q584 wdt:P17 ?country .\",\n    \"  ?country wdt:P31 wd:Q6256 .\",\n    \"} GROUP BY ?country\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7366 is Rhine\nkg:2020 is country\nkg:7795 is instance of\nkg:4041 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?river kg:7795 kg:7366 .\",\n    \"?river kg:4041 ?country .\",\n    \"?country kg:7795 kg:2020 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE { wd:Q82958 wdt:P22 ?father . }\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9682 is Elizabeth II\nwdt:P22 is father", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE { wd:Q9682 wdt:P22 ?father . }\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1364 is Elizabeth II\nkg:0150 is father", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE {\",\n    \"  kg:1364 kg:0150 ?father .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"  ?element wdt:P31 wd:Q11344.\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11344 is chemical element", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"  ?element wdt:P31 wd:Q11344 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6296 is instance of\nkg:3198 is chemical element", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"?element kg:6296 kg:3198 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P39 wd:Q11696 .\", \"># P39 is 'position held', Q11696 is 'President of the United States'\",\n    \"  ?president wdt:P580 ?start .\", \">// start time of the position\",\n    \"  FILTER(?start >= \\\"2003-01-01T00:00:00Z\\\"^^xsd:dateTime) .\", \">// filter for presidents starting from January 1, 2003\",\n    \"} ORDER BY DESC(?start)\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president p:P39/ps:P39 wd:Q11696 ;\",\n    \"pq:P582 ?endTime .\",\n    \"FILTER(?endTime > '2003-01-01T00:00:00Z'^^xsd:dateTime) }\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3971 is position held\nkg:3124 is position held\nkg:4794 is President of the United States\nkg:9895 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president kg:3971/kg:3124 kg:4794 .\",\n    \"?presidency kg:9895 ?endTime .\",\n    \"FILTER(?endTime > '2003-01-01T00:00:00Z'^^xsd:dateTime) .\",\n    \"} ORDER BY DESC(?endTime)\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinemaReleaseDate WHERE {\",\n    \"  wd:Q12345678 wdt:P1690 ?releaseEvent .\",\n    \"  ?releaseEvent wdt:P17 wd:Q55 ;\", \">// Netherlands (Q55)\",\n    \"           wdt:P577 ?cinemaReleaseDate .\",\n    \"} ORDER BY ASC(?cinemaReleaseDate) LIMIT 1\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6667101 is Worst Case Scenario\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q6667101 wdt:P577 ?date .\",\n    \"  ?resource wdt:P31 wd:Q124859 ;\",\n    \"          wdt:P17 wd:Q55 ;\",\n    \"          wdt:P345 ?date .\",\n    \"} ORDER BY ASC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7286 is Worst Case Scenario\nkg:0465 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7286 kg:0465 ?date .\",\n    \"  ?resource a kg:Cinema .\",\n    \"  ?resource kg:locatedIn kg:Netherlands .\",\n    \"  ?resource kg:showingDate ?date .\",\n    \"} ORDER BY ASC(?date) LIMIT 1\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"wd:Q107468 wdt:P26 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q443120 is Lance Bass\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q443120 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6052 is Lance Bass\nkg:2399 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:6052 kg:2399 ?spouse .\",\n    \"} \"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q846 wdt:P37 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q843 is Pakistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q843 wdt:P2936 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6648 is Pakistan\nkg:4682 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  kg:6648 kg:4682 ?language .\",\n    \"} \"\n  ]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"wd:Q16435 wdt:P25 ?daughter .\", \">// Bill Clinton's daughter\",\n    \"?daughter wdt:P26 ?husband .\", \">// Daughter is married to\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124 is Bill Clinton\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q1124 wdt:P40 ?daughter .\",\n \t\t\"?daughter wdt:P26 ?spouse .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9068 is Bill Clinton\nkg:6665 is child\nkg:3317 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:9068 kg:6665 ?child .\",\n    \"  ?child kg:3317 ?spouse .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut WHERE {\",\n    \"?mission wdt:P31 wd:Q26478.\",\n    \"?mission wdt:P577 ?date.\",\n    \"?mission wdt:P527 ?astronaut.\",\n    \"FILTER(?date = '1969-07-16'^^xsd:date).\",\n    \"} ORDER BY ?astronaut\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43653 is Apollo 11\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q43653 wdt:P1029 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4688 is Apollo 11\nkg:5941 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4688 kg:5941 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bside WHERE {\",\n    \"?album wdt:P31 wd:Q208754 .\", \">// Instance of album\",\n    \"?album wdt:P674 ?track .\", \">// Track on album\",\n    \"?track wdt:P31 wd:Q217939 .\", \">// Instance of B-side\",\n    \"?track wdt:P178 wd:Q15071 .\", \">// Performed by Ramones\",\n    \"BIND(?track AS ?bside) .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P175 wd:Q483407 ;\",\n \t\t\"p:P1433 [pq:P2868 wd:Q13432985].\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3319 is performer\nkg:6375 is Ramones\nkg:0743 is published in\nkg:3528 is subject has role\nkg:7841 is B-side", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3319 kg:6375 .\",\n    \"?resource kg:3528 kg:7841 .\",\n    \"} \"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource rdfs:label 'Scarface'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1449 is nickname", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P1449 'Scarface'.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6080 is nickname", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6080 'Scarface'.\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P403 wd:Q2716 .\", \">// P403 is 'mouth', Q2716 is 'North Sea'\",\n    \"?river wdt:P31 wd:Q4022 .\", \">// P31 is 'instance of', Q4022 is 'river'\",\n    \"}\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P403 is mouth of the watercourse\nwd:Q1693 is North Sea", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P31 wd:Q4022 ;\", \">// The river is an instance of a river\",\n    \"       wdt:P403 wd:Q1693 .\", \">// The mouth of the river is the North Sea\",\n    \"} \"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4180 is instance of\nkg:3859 is river\nkg:2573 is mouth of the watercourse\nkg:7040 is North Sea", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river kg:4180 kg:3859 .\",\n    \"?river kg:2573 kg:7040 .\",\n    \"} \"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE { wd:Q16745 wdt:P276 ?location . }\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8962067 is Fort Knox\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q8962067 wdt:P131 ?resource.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5049 is Fort Knox\nkg:8699 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5049 kg:8699 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n    \"  ?emperor wdt:P31 wd:Q5 ;\", \">// Instance of human\",\n    \"        wdt:P279* wd:Q608473 .\", \">// Subclass of Chinese emperor\",\n    \"} ORDER BY ASC(?emperor)\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q268218 is Emperor of China", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n    \"?emperor wdt:P39 wd:Q268218.\",\n    \"} ORDER BY ASC(?emperor)\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6554 is position held\nkg:0781 is Emperor of China", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n    \"?emperor kg:6554/kg:0781 [] .\",\n    \"} ORDER BY ?emperor\"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?turtle WHERE {\",\n    \"  VALUES ?turtleLabel { 'Leonardo'@en 'Donatello'@en 'Raphael'@en 'Michelangelo'@en } .\",\n    \"  ?turtle wdt:P31 wd:Q275890 ;\", \">// Instance of Teenage Mutant Ninja Turtles character\",\n    \"        rdfs:label ?turtleLabel .\",\n    \"} ORDER BY ?turtle\"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q1381762 is Teenage Mutant Ninja Turtles", "response": "{\n  \"query\": [\n    \"SELECT ?turtle WHERE {\",\n    \"?turtle wdt:P361 wd:Q1381762 .\",\n    \"} \"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0588 is part of\nkg:3896 is Teenage Mutant Ninja Turtles", "response": "{\n  \"query\": [\n    \"SELECT ?turtle WHERE {\",\n    \"  kg:3896 kg:0588 ?turtle .\",\n    \"} \"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?startPoint WHERE {\",\n    \"wd:Q156493 wdt:P571 ?startPoint .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124023 is Piccadilly\nwdt:P559 is terminus", "response": "{\n  \"query\": [\n    \"SELECT ?start WHERE {\",\n    \"  wd:Q1124023 wdt:P559 ?start .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5579 is Piccadilly\nkg:8836 is terminus", "response": "{\n  \"query\": [\n    \"SELECT ?start WHERE {\",\n    \"  kg:5579 kg:8836 ?start .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q21465 wdt:P7034 ?spouse .\",\n    \"  ?spouse wdt:P69 ?university .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwdt:P69 is educated at\nwdt:P361 is part of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?university WHERE {\",\n \t\t\"wd:Q76 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P69 ?university .\",\n \t\t\"?university wdt:P31 wd:Q3918 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4581 is Barack Obama\nkg:1069 is spouse\nkg:3662 is educated at\nkg:9515 is part of\nkg:6870 is instance of\nkg:9045 is subclass of\nkg:8505 is university", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?university WHERE {\",\n \t\t\"  kg:4581 kg:1069 ?spouse .\",\n \t\t\"  ?spouse kg:3662 ?university .\",\n \t\t\"  ?university kg:6870 kg:8505 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5487;\",\n    \"?resource wdt:P577 ?date.\",\n    \"FILTER(?date = '1811-05-14'^^xsd:date).\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q733 is Paraguay\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q733 wdt:P571 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7772 is Paraguay\nkg:2115 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7772 kg:2115 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 ;\", \">// player is an instance of human\",\n    \"        wdt:P106 wd:Q247938 ;\", \">// player's occupation is basketball player\",\n    \"        wdt:P39 wd:Q17415872 .\", \">// player plays in the NBA\",\n    \"  OPTIONAL { ?player wdt:P2046 ?height. }\", \">// optional to get height if available\",\n    \"} ORDER BY ASC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P54 is member of sports team\nwdt:P118 is league\nwd:Q155223 is National Basketball Association\np:P54 is member of sports team\npq:P582 is end time\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P106 wd:Q3665646 .\",\n    \"?player p:P54 ?teamStatement .\",\n    \"?teamStatement pq:P582 ?endTime .\",\n    \"?teamStatement ps:P54 ?team .\",\n    \"?team wdt:P118 wd:Q155223 .\",\n    \"FILTER(NOT EXISTS { ?teamStatement pq:P582 [] })\",\n    \"?player wdt:P2048 ?height .\",\n    \"} ORDER BY ASC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is occupation\nkg:7892 is basketball player\nkg:5833 is member of sports team\nkg:9646 is league\nkg:3977 is National Basketball Association\nkg:2614 is member of sports team\nkg:5985 is end time\nkg:4026 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player kg:2623/kg:7892 .\", \">// Occupation is basketball player\",\n    \"?player kg:5833 ?team .\", \">// Member of a sports team\",\n    \"?team kg:9646/kg:3977 .\", \">// Team is in the National Basketball Association\",\n    \"?player kg:5985 ?endTime FILTER (isUnbound(?endTime) || ?endTime > NOW()) .\", \">// Player is active (no end time or end time is in the future)\",\n    \"?player kg:4026 ?height .\", \">// Height of the player\",\n    \"} ORDER BY ASC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q486972 .\", \">// Instance of brand\",\n    \"?resource rdfs:label 'Jack Wolfskin'@en .\",\n    \"?resource wdt:P571 ?foundedDate .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q536133 is Jack Wolfskin\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q536133 wdt:P571 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is Jack Wolfskin\nkg:3303 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5071 kg:3303 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q187465 wdt:P159 ?airport .\", \">// Air China headquarters\",\n    \"  ?airport wdt:P131 ?city .\", \">// Located in the city\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE { wd:Q51747 wdt:P159 ?city . }\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7473 is Air China\nkg:7154 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  kg:7473 kg:7154 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"  ?brewery wdt:P31 wd:Q47528; # instance of brewery\",\n    \"         wdt:P1960 wd:Q194831. # produces Pilsner Urquell\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q948831 is Plzeňský Prazdroj\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q948831 wdt:P571 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7689 is Plzeňský Prazdroj\nkg:3236 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7689 kg:3236 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q206784 .\", \">// Instance of 'event'\",\n    \"?resource wdt:P3450 wd:Q29668 .\", \">// Part of 'American Revolution'\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(LANG(?label) = 'en') .\",\n    \"?resource wdt:P585 ?date .\",\n    \"FILTER(?date = '1773-12-16'^^xsd:date) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19024 is Boston Tea Party\nwdt:P585 is point in time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q19024 wdt:P585 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3929 is Boston Tea Party\nkg:0565 is point in time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3929 kg:0565 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n    \"?animal wdt:P31 wd:Q729; wdt:P141 wd:Q206587.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n    \"?animal wdt:P141 wd:Q219127 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7101 is IUCN conservation status\nkg:9298 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n    \"?animal kg:7101 kg:9298 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"?politician wdt:P27 wd:Q183 .\", \">// Politician is from Germany\"\n    ,\"?politician wdt:P26 ?spouse .\", \">// Politician has a spouse\"\n    ,\"?spouse wdt:P31 wd:Q5 .\", \">// Spouse is a human\"\n    ,\"?spouse wdt:P27 wd:Q183 .\", \">// Spouse is from Germany\"\n    ,\"?politician wdt:P39 wd:Q82955 .\", \">// Politician held a political position\"\n    ,\"FILTER NOT EXISTS { ?politician wdt:P26 ?politician }\", \">// Exclude self-marriages (if any)\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"?politician wdt:P106 wd:Q82955 .\",\n    \"?politician wdt:P26 ?spouse .\",\n    \"?spouse wdt:P27 wd:Q183 .\",\n    \"} ORDER BY ?politician\"\n  ]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5848 is occupation\nkg:1708 is politician\nkg:0863 is spouse\nkg:5898 is country of citizenship\nkg:7899 is Germany\nkg:6832 is place of birth\nkg:5012 is country\nkg:7899 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"?politician kg:5848 kg:1708 .\", \">// Politician occupation\"\n    ,\"?politician kg:0863 ?spouse .\", \">// Spouse of politician\"\n    ,\"?spouse kg:5898 kg:7899 .\", \">// Spouse's country of citizenship is Germany\"\n    ,\"FILTER(isIRI(?politician))\",\n    \"}\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?earthDiameter WHERE { wd:Q2 wdt:P1268 ?earthDiameter . }\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2 is Earth\nwdt:P2386 is diameter", "response": "{\n  \"query\": [\n    \"SELECT ?diameter WHERE { wd:Q2 wdt:P2386 ?diameter . }\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8706 is Earth\nkg:1993 is diameter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8706 kg:1993 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Is the wife of President Obama called Michelle?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is the wife of President Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q76 wdt:P26 ?wife .\",\n    \"  FILTER(?wife = wd:Q1438509) .\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35649 .\", \">// Instance of U.S. state\",\n    \"?state wdt:P300 'MN' .\", \">// Abbreviation MN\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1813 is short name", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?state WHERE {\",\n \t\t\"?state wdt:P31 wd:Q35657 .\",\n \t\t\"?state wdt:P1813 'MN' .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3306 is instance of\nkg:9063 is U.S. state\nkg:3554 is short name", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state kg:3306 kg:9063 .\",\n    \"?state kg:3554 'MN' .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q847 wdt:P570 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9458 is Muhammad\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q9458 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is Muhammad\nkg:4086 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4901 kg:4086 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q12945 wdt:P35 ?governor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1439 is Texas\nwdt:P1313 is office held by head of government\nwd:Q5589725 is Governor of Texas\nwd:Q5589725 is Governor of Texas\nwdt:P1308 is officeholder", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q1439 wdt:P1313/wdt:P1308 ?governor .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5711 is Texas\nkg:0217 is office held by head of government\nkg:9831 is Governor of Texas\nkg:9831 is Governor of Texas\nkg:6636 is officeholder", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  kg:5711 kg:0217/kg:9831 ?governor .\",\n    \"  ?governor a kg:6636 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 wd:Q608 .\", \">// Directed by Akira Kurosawa\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q8006 is Akira Kurosawa", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P57 wd:Q8006 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6393 is director\nkg:4441 is Akira Kurosawa", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:6393 kg:4441 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actorWebsite WHERE {\",\n    \"  ?tvShow wdt:P31 wd:Q24790856; wdt:P179 wd:Q24790856 .\",\n    \"  ?episode wdt:P449 ?tvShow .\",\n    \"  ?actor wdt:P161 ?episode .\",\n    \"  ?actor wdt:P1882 ?actorWebsite .\",\n    \"} GROUP BY ?actorWebsite\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\np:P161 is cast member\nps:P161 is cast member\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?actorWebsite WHERE {\",\n \t\t\"wd:Q162371 p:P161 ?castStatement .\",\n \t\t\"?castStatement ps:P161 ?actor .\",\n \t\t\"?actor wdt:P856 ?actorWebsite .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7013 is Charmed\nkg:2103 is cast member\nkg:1343 is cast member\nkg:2499 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?website WHERE {\",\n    \"  kg:7013 kg:2103 ?actor .\",\n    \"  ?actor kg:2499 ?website .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n    \"  ?library wdt:P31 wd:Q42867.\",\n    \"  ?library wdt:P571 ?inceptionDate.\",\n    \"  FILTER(?inceptionDate < \\\"1400-01-01\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n    \"?library wdt:P31 wd:Q7075 ;\", \">// The resource is an instance of a library\",\n    \"wdt:P571 ?inception .\", \">// The inception date of the library\",\n    \"FILTER(?inception < \\\"1400-01-01\\\"^^xsd:date) .\", \">// Filter libraries established before 1400\",\n    \"} ORDER BY ?library\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is instance of\nkg:6349 is subclass of\nkg:3669 is library\nkg:4653 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n    \"?library kg:6814 kg:3669 .\",\n    \"?library kg:4653 ?inception .\",\n    \"FILTER(?inception < \\\"1400-01-01\\\"^^xsd:date) .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"?island wdt:P31 wd:Q23442.\",\n    \"?island wdt:P17 wd:Q55.\",\n    \"?island wdt:P131 wd:Q8609.\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwdt:P361 is part of\nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q23442 is island", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"?island wdt:P31 wd:Q23442 ;\", \">// Island\",\n    \"     wdt:P361 wd:Q76936 ;\", \">// Part of Frisian Islands\",\n    \"     wdt:P17 wd:Q55 .\", \">// Country is Netherlands\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:7181 is part of\nkg:9177 is country\nkg:0464 is Netherlands\nkg:6116 is instance of\nkg:9691 is island", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"?island kg:6116 kg:9691 .\", \">// The island is an instance of an island\",\n    \"?island kg:7181/kg:9177 kg:0464 .\", \">// The island is part of the Netherlands\",\n    \"kg:0335 kg:0424 ?island .\", \">// The Frisian Islands have this island as a part\",\n    \"} \"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"?painting wdt:P170 wd:Q5582.\",\n    \"?painting wdt:P195 ?museum.\",\n    \"?painting rdfs:label 'The Scream'@en.\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471379 is The Scream\nwdt:P527 is has part(s)\nwdt:P276 is location\nwdt:P31 is instance of\nwd:Q207694 is art museum", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"?museum wdt:P31 wd:Q207694 ;\",\n    \"       wdt:P527 wd:Q471379 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3794 is The Scream\nkg:7898 is has part(s)\nkg:1678 is location\nkg:3411 is instance of\nkg:9154 is art museum", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"?exhibit kg:7898 kg:3794 .\",\n    \"?museum kg:1678 ?exhibit .\",\n    \"?museum kg:3411 kg:9154 .\",\n    \"} \"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q486972 .\", \">// De Beers company instance of organization\",\n    \"?resource wdt:P571 ?foundedDate .\", \">// Founded date\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471891 is De Beers\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q471891 wdt:P571 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5562 is De Beers\nkg:9354 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5562 kg:9354 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P39 wd:Q11696 .\", \">// Position held is President of the United States\",\n    \"?person wdt:P580 ?start .\", \">// Start time of the position\",\n    \"{\",\n    \"wd:Q1343 wd:P2821 ?assassinationDate .\", \">// JFK's date of death\",\n    \"} FILTER(?start > ?assassinationDate) .\",\n    \"?person wdt:P569 ?birthDate .\", \">// Birth date to ensure it's a person\",\n    \"}\",\n    \"ORDER BY ASC(?start)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?president WHERE {\",\n \t\t\"wd:Q9696 p:P39 [ps:P39 wd:Q11696 ; pq:P1366 ?president].\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9891 is John F. Kennedy\nkg:7907 is position held\nkg:3493 is position held\nkg:8998 is President of the United States\nkg:8421 is replaced by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"kg:9891 kg:7907/kg:3493 kg:8998 .\",\n \t\t\"?president kg:8421 ?resource .\",\n \t\t\"FILTER(?president = kg:9891)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q132657 wdt:P25 ?spouse .\", \">// Juan Carlos I's wife (Queen Sofía of Spain)\",\n    \"  ?spouse wdt:P22|wdt:P25 ?parent .\", \">// Parents of the wife\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19943 is Juan Carlos I of Spain\nwdt:P26 is spouse\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q19943 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P22 ?parent .\",\n \t\t\"?spouse wdt:P25 ?parent .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7309 is Juan Carlos I of Spain\nkg:9505 is spouse\nkg:1329 is child", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parents WHERE {\",\n \t\t\"  kg:7309 kg:9505 ?spouse .\",\n \t\t\"  ?spouse kg:1329 ?child .\",\n \t\t\"  ?child kg:1329 ?parents .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?novelist WHERE {\",\n    \"  wd:Q192386 wdt:P50 ?novelist .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45875 is A Song of Ice and Fire\nwdt:P106 is occupation\nwd:Q6625963 is novelist", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q45875 wdt:P50 ?author .\",\n    \"  ?author wdt:P106 wd:Q6625963 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2137 is A Song of Ice and Fire\nkg:0038 is occupation\nkg:9798 is novelist", "response": "{\n  \"query\": [\n    \"SELECT ?novelist WHERE {\",\n    \"  kg:2137 kg:0038 ?novelist .\",\n    \"  ?novelist a kg:9798 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?studio WHERE {\",\n    \"  wd:Q38624 wdt:P170 ?producer ;\", \">// Beatles first album (Please Please Me)\",\n    \"         wdt:P162 ?studio .\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q1299 is The Beatles\nwdt:P577 is publication date\nwdt:P483 is recorded at studio or venue", "response": "{\n  \"query\": [\n    \"SELECT ?studio WHERE {\",\n    \"?album wdt:P31 wd:Q482994 ;\",\n    \"      wdt:P175 wd:Q1299 ;\",\n    \"      wdt:P483 ?studio .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2481 is instance of\nkg:0784 is album\nkg:2791 is performer\nkg:1100 is The Beatles\nkg:7038 is publication date\nkg:1938 is recorded at studio or venue", "response": "{\n \t\"query\": [\n \t\t\"?studio\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?album kg:is_instance_of kg:0784.\",\n \t\t\"?album kg:2791 kg:1100.\",\n \t\t\"?album kg:1938 ?studio.\",\n \t\t\"FILTER NOT EXISTS { ?prevAlbum kg:is_instance_of kg:0784; kg:2791 kg:1100; kg:7038 ?date. FILTER(?date < ?albumDate) }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q123456 wdt:P570 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9685 is Diana, Princess of Wales\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q9685 wdt:P570 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8027 is Diana, Princess of Wales\nkg:4930 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8027 kg:4930 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q8475 wdt:P112 ?person .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q248 is Intel\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE { wd:Q248 wdt:P112 ?resource. }\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5687 is Intel\nkg:2695 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5687 kg:2695 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P106 wd:Q937857 .\", \">// P106 is occupation, Q937857 is football player\",\n    \"  ?player wdt:P54 wd:Q27804554 .\", \">// P54 is member of sports team, Q27804554 is Premier League\",\n    \"  {\",\n    \"    SELECT (MIN(?age) AS ?minAge) WHERE {\",\n    \"      ?player wdt:P106 wd:Q937857 .\",\n    \"      ?player wdt:P54 wd:Q27804554 .\",\n    \"      ?player wdt:P569 ?birthDate .\", \">// P569 is date of birth\",\n    \"      BIND(YEAR(NOW()) - YEAR(?birthDate) AS ?age)\",\n    \"    }\",\n    \"  }\",\n    \"  ?player wdt:P569 ?birthDate .\",\n    \"  BIND(YEAR(NOW()) - YEAR(?birthDate) AS ?age)\",\n    \"  FILTER(?age = ?minAge)\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P118 is league\nwd:Q9448 is Premier League\nwdt:P54 is member of sports team\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P54 ?team .\",\n    \"?team wdt:P118 wd:Q9448 .\",\n    \"?player wdt:P569 ?dob .\",\n    \"}\",\n    \"ORDER BY ASC(?dob)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8065 is league\nkg:5247 is Premier League\nkg:7482 is member of sports team\nkg:9621 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player kg:7482 ?team .\",\n    \"?team kg:8065 kg:5247 .\",\n    \"?player kg:9621 ?dob .\",\n    \"}\",\n    \"ORDER BY ASC(?dob)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?riverOrLake WHERE {\",\n    \"?riverOrLake wdt:P31/wdt:P279* wd:Q4022 ;\", \"# Instance of river or lake, with subclass handling\",\n    \"wdt:P131 wd:Q856 .\", \"># Located in South Carolina (Q856)\",\n    \"} ORDER BY ASC(?riverOrLake)\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P131 is located in the administrative territorial entity\nwd:Q1456 is South Carolina\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P131 wd:Q1456 .\",\n    \"{?resource wdt:P31/wdt:P279* wd:Q23397} UNION {?resource wdt:P31/wdt:P279* wd:Q4022}\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6192 is located in the administrative territorial entity\nkg:4355 is South Carolina\nkg:5420 is instance of\nkg:6123 is subclass of\nkg:6328 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5420 ?type .\",\n    \"?type kg:6123 kg:6328 .\",\n    \"?resource kg:6192 kg:4355 .\",\n    \"} UNION {\",\n    \"?resource kg:5420 kg:6328 .\",\n    \"?resource kg:6192 kg:4355 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was called Rodzilla?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was called Rodzilla?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource rdfs:label 'Rodzilla'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256 ;\", \">// Country is an instance of a country\",\n    \"        wdt:P30 wd:Q15 ;\", \">// The continent of the country is Africa\",\n    \"        wdt:P36 ?capital .\", \">// The capital of the country\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"?country wdt:P31 wd:Q6256 ;\",\n    \"      wdt:P30 wd:Q15 ;\",\n    \"      wdt:P36 ?capital .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1721 is instance of\nkg:6700 is country\nkg:7478 is continent\nkg:8902 is Africa\nkg:0430 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"?country kg:1721 kg:6700 .\",\n    \"?country kg:0430 ?capital .\",\n    \"?country kg:7478 kg:8902 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"wd:Q123456 wdt:P31/wdt:P279* wd:Q180445 .\", \">// Manhattan Bridge (Q123456) is an instance of or a subclass of the type of bridge we're looking for (Q180445)\",\n    \"?bridge wdt:P31/wdt:P279* wd:Q180445 .\",\n    \"FILTER(?bridge != wd:Q123456) .\", \">// Exclude the Manhattan Bridge itself from the results\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125050 is Manhattan Bridge\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q12280 is bridge\nwd:Q12280 is bridge", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  wd:Q125050 wdt:P31/wdt:P279* ?bridgeType .\",\n    \"  ?bridge wdt:P31 ?bridgeType .\",\n    \"  FILTER(?bridge != wd:Q125050) .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3760 is Manhattan Bridge\nkg:4675 is instance of\nkg:4675 is instance of\nkg:4675 is instance of\nkg:6359 is subclass of\nkg:6633 is bridge\nkg:6633 is bridge", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  kg:3760 kg:4675 ?type .\",\n    \"  ?bridge kg:4675 ?type .\",\n    \"  FILTER(?bridge != kg:3760) .\",\n    \"} \"\n  ]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  wd:Q546837 wdt:P106/wdt:P279* wd:Q192812 .\", \">// This line checks if the entity is a founder/entrepreneur\",\n    \"  wd:Q546837 wdt:P800 ?company .\", \">// This line links the founder to the companies they founded\",\n    \"  ?company wdt:P31/wdt:P279* wd:Q4830453 .\", \">// This line ensures that the linked entities are indeed companies\",\n    \"}\"\n  ]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q36215 is Mark Zuckerberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q783794 is company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P112 wd:Q36215 .\",\n    \"?company wdt:P31/wdt:P279* wd:Q783794 .\",\n    \"} \"\n  ]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1526 is founded by\nkg:1376 is Mark Zuckerberg\nkg:1343 is instance of\nkg:0834 is subclass of\nkg:8594 is company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company kg:1526 kg:1376 .\",\n    \"?company kg:1343 kg:8594 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  ?book wdt:P31 wd:Q571 .\",\n    \"  ?book wdt:P1104 ?numberOfPages .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherBook wdt:P31 wd:Q571 ;\",\n    \"                 wdt:P1104 ?otherNumberOfPages .\",\n    \"    FILTER(?otherNumberOfPages > ?numberOfPages)\",\n    \"  }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q571 is book\nwdt:P1104 is number of pages", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"?book wdt:P31 wd:Q571 .\",\n    \"?book wdt:P1104 ?numPages .\",\n    \"} ORDER BY DESC(?numPages) LIMIT 1\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2272 is instance of\nkg:1916 is subclass of\nkg:8797 is book\nkg:6305 is number of pages", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"?book kg:is_instance_of kg:8797 .\",\n    \"?book kg:6305 ?numPages .\",\n    \"} ORDER BY DESC(?numPages) LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35649 .\", \">// Instance of U.S. state\",\n    \"?state wdt:P2046 ?area .\", \">// Has area (in square kilometers)\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"wdt:P2046 ?area .\",\n    \"{ SELECT (MAX(?area) AS ?maxArea) WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"wdt:P2046 ?area .\",\n    \"} }\",\n    \"FILTER (?area = ?maxArea)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1426 is instance of\nkg:7930 is U.S. state\nkg:5830 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state kg:1426 kg:7930 .\",\n    \"?state kg:5830 ?area .\",\n    \"FILTER NOT EXISTS { ?otherState kg:1426 kg:7930 ; kg:5830 ?otherArea . FILTER(?otherArea > ?area) }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P1128 ?numEmployees .\",\n    \"  FILTER(?numEmployees > 500000) .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P1128 is employees\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// company is an instance of business\",\n    \"wdt:P1128 ?employees ;\", \">// has number of employees\",\n    \"wdt:P856 ?website .\", \">// has official website\",\n    \"FILTER(?employees > 500000) .\",\n    \"} ORDER BY DESC(?employees)\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1735 is instance of\nkg:2392 is subclass of\nkg:4264 is business\nkg:0996 is employees\nkg:7595 is official website", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:1735 kg:4264 .\", \">// The resource is a business entity\",\n \t\t\"?resource kg:0996 ?employees .\", \">// The resource has employees\",\n \t\t\"FILTER(?employees > 500000) .\", \">// Filter businesses with more than 500,000 employees\",\n \t\t\"?resource kg:7595 ?website .\", \">// Get the official website of the business\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?ship WHERE {\",\n    \"  wd:Q41158 wdt:P607 ?expedition .\",\n    \"  ?expedition wdt:P1344 ?ship .\",\n    \"} LIMIT 3\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11446 is ship\nwdt:P1344 is participant in\nwdt:P710 is participant\nwd:Q7322 is Christopher Columbus", "response": "{\n  \"query\": [\n    \"SELECT ?ship WHERE {\",\n    \"  wd:Q7322 wdt:P710 ?expedition .\",\n    \"  ?expedition wdt:P1344 ?ship .\",\n    \"  ?ship wdt:P31 wd:Q11446 .\",\n    \"} LIMIT 3\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8261 is instance of\nkg:5995 is subclass of\nkg:5241 is ship\nkg:4451 is participant in\nkg:1337 is participant\nkg:5802 is Christopher Columbus", "response": "{\n  \"query\": [\n    \"SELECT ?ship WHERE {\",\n    \"?voyage kg:4451/kg:1337 kg:5802 .\",\n    \"?voyage kg:4451 ?ship .\",\n    \"?ship kg:8261 kg:5241 .\",\n    \"} LIMIT 3\"\n  ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?game WHERE {\",\n    \"?game wdt:P31/wdt:P279* wd:Q164058. # Find resources that are board games or subclasses of board game\",\n    \"?game wdt:P136 \\\"GMT\\\". # Filter by GMT publisher\",\n    \"}\",\n    \"LIMIT 100\" ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131436 is board game", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"?game wdt:P31 wd:Q131436. \",\n    \"}\"\n  ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8694 is instance of\nkg:9432 is board game", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?boardgame\",\n    \"WHERE {\",\n    \"?boardgame a kg:9432 .\",\n    \"?boardgame kg:8694 \\\"GMT\\\" .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P136 ?developer .\",\n      \"?resource rdfs:label \\\"Skype\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40984 is Skype\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?resource wdt:P178 ?developer .\",\n    \"?resource wd:張量 Q40984 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Skype\nkg:1548 is developer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1548 kg:6211.\",\n    \"}\"\n  ]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P3902 ?place .\",\n    \"?place rdfs:label \\\"Heraklion\\\"@en .\",\n    \"FILTER NOT EXISTS { ?person wdt:P570 ?deathDate }\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwd:Q160544 is Heraklion", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P19 wd:Q160544 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9471 is place of birth\nkg:4255 is Heraklion", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:9471 kg:4255.\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?location wdt:P131* wd:Q3045278.\" , \"# Area 51 location\",\n    \"?location wdt:P625 ?coordinates.\" , \"# Coordinates of the location\",\n    \"SERVICE wikibase:geo {\",\n    \"?state geo:location ?coordinates.\" ,\n    \"}\" ,\n    \"}\"\n  ]}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q177397 is Area 51\nwdt:P131 is located in the administrative territorial entity\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"wd:Q177397 wdt:P131 ?state .\",\n    \"}\"\n  ]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6216 is Area 51\nkg:5375 is located in the administrative territorial entity\nkg:5375 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"  kg:6216 kg:5375 ?location .\",\n    \"  ?location a kg:AdministrativeTerritorialEntity .\",\n    \"  ?location rdfs:label ?state .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515; # instance of city\",\n    \"wdt:P625 \\\"40.7127838\\\"; # latitude\",\n    \"wdt:P625 \\\"-74.0059413\\\" . # longitude\",\n    \"?city wdt:P737 ?mayor. # mayor of the city\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q60 is New York City\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wd:Q60 ;\",\n    \"   wdt:P6 ?mayor.}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2848 is New York City\nkg:9377 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city kg:isNewYorkCity ;\",\n    \"   kg:hasHeadOfGovernment ?mayor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P625 ?location ;\",\n      \"   wdt:P6369 \\\"Abraham Lincoln\\\"@en .\",\n      \"?location wdt:P17 ?country .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q91 wdt:P20 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9211 is Abraham Lincoln\nkg:6252 is place of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:9211 kg:6252 ?resource.\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q950487; # Air China is an airline company\",\n    \"  wdt:P131* ?airport. # Find airports served by the airline through direct or indirect relationships\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P113 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airport wdt:P113 wd:Q51747 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3523 is Air China\nkg:2174 is airline hub", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airport kg:isAirChinaHub ?hub .\",\n    \"?hub kg:3523 kg:airChina .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n             \"wdt:P577 ?date;\",\n             \"wdt:P161/wdt:P279* ?director.\",\n      \"?director wdt:P161/wdt:P279* wd:Q87063.\",\n      \"?movie wdt:P161 ?actor.\",\n      \"FILTER(?actor != wd:Q87063).\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?actor\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie wdt:P57 wd:Q16297 ;\", \"# Movie directed by William Shatner\",\n\t\t\t\"?movie wdt:P161 ?actor .\", \"# Actor is in the movie\",\n\t\t\t\"?actor wdt:P161 wd:Q16297\" ,\"\\n# William Shatner stars in the movie\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3840 is director\nkg:6889 is William Shatner\nkg:7140 is cast member\nkg:6889 is William Shatner\nkg:7140 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie kg:director kg:3840 ;\",\n    \"   kg:castMember ?actor .\",\n    \"?actor kg:isCastMember true .\",\n    \"FILTER(?actor = kg:6889)\",\n    \"}\"\n  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?country wdt:P37 ?language ;\",\n    \"wdt:P31 wd:Q6256 .\",\n    \"VALUES ?country { wd:Q184 } # Q184 is the Wikidata item for Philippines\",\n    \"}\"\n  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q928 is Philippines\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?language wdt:P37 wd:Q928 .\",\n    \"}\"\n  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5866 is Philippines\nkg:9978 is official language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9978 kg:5866.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424865.\" , \"># Check if the resource is a film and specifically a Danish film.\",\n      \"?film wdt:P1376 ?country.\" , \"># Get the country of production for the film.\",\n      \"FILTER(?country = wd:Q94).\" ,\"\\n\" ,\"\\t# Q94 is the Wikidata item for Denmark.\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P495 wd:Q35 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8808 is subclass of\nkg:6517 is film\nkg:8359 is instance of\nkg:1180 is country of origin\nkg:5463 is Denmark", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film a kg:6517 .\",\n    \"?film kg:1180/kg:8359 kg:5463 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n             \"wdt:P137 wd:Q95680;\",\n             \"wdt:P175 wd:Q114248.\",\n      \"wd:Q114248 wdt:P279* wd:Q95680.\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q35332 is Brad Pitt\nwdt:P57 is director\nwd:Q192990 is Guy Ritchie", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie WHERE {\",\n\t\t\"?movie wdt:P31 wd:Q11424 ;\", \"# The movie is an instance of film\",\n\t\t\"   wdt:P161 wd:Q35332 .\", \"# Brad Pitt is a cast member in the movie\",\n\t\t\"?movie wdt:P57 ?director .\", \"# The director of the movie is ?director\",\n\t\t\"?director wd:Q192990 .\" ,\"\\t# The director is Guy Ritchie\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5285 is subclass of\nkg:4255 is film\nkg:0188 is instance of\nkg:3943 is cast member\nkg:8245 is Brad Pitt\nkg:6493 is director\nkg:1627 is Guy Ritchie", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:0188 ?person ;\", \"# Film starring Brad Pitt\",\n    \"   kg:6493 ?director .\", \"# Director of the film\",\n    \"?person kg:8245 \\\"Brad Pitt\\\" .\", \"# Brad Pitt as a cast member\",\n    \"?director kg:1627 \\\"Guy Ritchie\\\" .\" ,\"\\t# Guy Ritchie as director\",\n    \"}\"\n  ]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?weapon WHERE {\",\n    \"  wd:Q176523 wdt:P804 ?design .\",\n    \"  ?weapon wdt:P804 wd:Q176523 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q728 is weapon\nwd:Q155644 is Uzi\nwdt:P287 is designed by\nwdt:P279 is subclass of\nwdt:P287 is designed by\nwd:Q155644 is Uzi", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?weapon WHERE {\",\n\t\t\"?designer wdt:P287 wd:Q155644 ;\",\n\t\t\"(wdt:P279* wd:Q728) .\",\n\t\t\"?weapon wdt:P279* wd:Q728 .\"\n\t]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2838 is subclass of\nkg:7386 is weapon\nkg:6166 is Uzi\nkg:5784 is designed by\nkg:2838 is subclass of\nkg:5784 is designed by\nkg:6166 is Uzi", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?weapon kg:isSubclassOf* kg:7386 .\",\n    \"?designer kg:5784 ?weapon .\",\n    \"?designer kg:2838 kg:6166 .\",\n    \"FILTER NOT EXISTS { ?designer kg:5784 kg:6166 }\",\n    \"?resource ?property ?value .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?studio wdt:P31 wd:Q928765.\" , \"# Universal Studios instance of Organization\",\n    \"?studio wdt:P276 ?owner.\" , \"# ?owner is the owner of ?studio\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168383 is Universal Pictures\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"wd:Q168383 wdt:P127 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1265 is Universal Pictures\nkg:8712 is owned by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"  kg:1265 kg:8712 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n      \"?state wdt:P31/wdt:P279* wd:Q30458 ;\", \"># State of the USA\",\n      \"?state wdt:P1395 ?populationDensity . # Population density property\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?populationDensity)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P1082 ?population ;\",\n    \"   wdt:P2046 ?area .\",\n    \"\",\n    \"WITH { SELECT ?state (MAX(?density) as ?maxDensity) WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P1082 ?population ;\",\n    \"   wdt:P2046 ?area .\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"} GROUP BY ?state ORDER BY DESC(?density) LIMIT 1 }\",\n    \"\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER (?state = ?maxState)\"\n    ]\n  }\n "}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is instance of\nkg:1730 is U.S. state\nkg:4667 is area\nkg:4199 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:1730 ;\",\n    \"   kg:4667 ?area ;\",\n    \"   kg:4199 ?population .\",\n    \"\",\n    \"OPTIONAL {\",\n    \"?state kg:4667 ?dummyArea .\",\n    \"   FILTER(?dummyArea = ?area)\",\n    \"}\",\n    \"\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"FILTER (?density = (SELECT MAX(?density) WHERE {\",\n    \"?state2 a kg:1730 ;\",\n    \"   kg:4667 ?area2 ;\",\n    \"   kg:4199 ?population2 .\",\n    \"\",\n    \"OPTIONAL {\",\n    \"?state2 kg:4667 ?dummyArea2 .\",\n    \"   FILTER(?dummyArea2 = ?area2)\",\n    \"}\",\n    \"\",\n    \"BIND(?population2 / ?area2 AS ?density2) })))\",\n    \"}\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?monarch ?monarchLabel\",\n    \"WHERE {\",\n      \"?monarch wdt:P3459 ?german.\",\n      \"?monarch rdfs:label ?monarchLabel.\",\n      \"FILTER-lang(?monarchLabel, 'en')\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q116 is monarch\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?monarch\",\n    \"WHERE {\",\n      \"?monarch wdt:P106 wd:Q116 ;\", \"# Check if the individual is a monarch\",\n      \"?monarch wdt:P26 ?spouse .\", \"# Find the spouse of the monarch\",\n      \"?spouse wdt:P27 wd:Q183 .  # Check if the spouse's country of citizenship is Germany\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9875 is occupation\nkg:9875 is monarch\nkg:7072 is spouse\nkg:1801 is country of citizenship\nkg:2266 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?monarch\",\n    \"WHERE {\",\n    \"?monarch kg:7072 ?spouse .\",\n    \"?spouse kg:1801 kg:2266 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q956283 wdt:P1477 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q190679 is Captain America\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?comic wdt:P170 ?resource ;\",\n    \"   wd:P31 wd:Q190679 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2488 is Captain America\nkg:1582 is creator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?comic kg:2488 'Captain America'.\",\n    \"?comic kg:1582 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut\",\n    \"WHERE {\",\n      \"?mission wdt:P108 \\\"Apollo 14\\\" ;\",\n      \"   wdt:P567 ?launchDate .\",\n      \"?crewMember wdt:P735 ?mission ;\",\n      \"   wdt:P106/wdt:P279* ?astronautRole .\",\n      \"FILTER(?astronautRole IN (wd:Q8747, wd:Q8748))\" ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t "}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut\",\n    \"WHERE {\",\n    \"?mission wdt:P1029 ?astronaut .\",\n    \"?mission wd:張{Q178871} .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9400 is Apollo 14\nkg:6757 is crew member(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?mission kg:6757 ?resource .\",\n    \"?mission kg:9400 \\\"Apollo 14\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book ?author\",\n    \"WHERE {\",\n      \"?book wdt:P690 \\\"The pillars of the earth\\\"@en.\" , \"# P690 is used for authorship in this context\",\n      \"?book wdt:P31 wd:Q5772847.\" , \"# Q5772847 is the item identifier for 'written work'\",\n      \"?author wdt:P50 ?book. \" , \"# P50 is used to link authors to their works\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q1163227 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3489 is The Pillars of the Earth\nkg:7086 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book kg:isThePillarsOfTheEarth \\\"3489\\\" ;\",\n    \"   kg:hasAuthor ?author .\",\n    \"?author kg:isAuthor \\\"7086\\\" .\",\n    \"}\",\n    \"VALUES ?resource { ?author }\"\n  ]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n      \"?state wdt:P31/wdt:P279* wd:Q3624078 ;\", \"># State of the United States of America\",\n      \"?state wdt:P1344 ?density .\", \"># Population density\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P1082 ?population ;\",\n    \"   wdt:P2046 ?area .\",\n    \"\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"\",\n    \"WITH (?density as ?maxDensity) {\",\n    \"  SELECT MAX(?density) ?state\",\n    \"  WHERE {\",\n    \"    ?state wdt:P31 wd:Q35657 ;\",\n    \"       wdt:P1082 ?population ;\",\n    \"       wdt:P2046 ?area .\",\n    \"  }\",\n    \"}\",\n    \"\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P1082 ?population ;\",\n    \"   wdt:P2046 ?area .\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1504 is instance of\nkg:4691 is U.S. state\nkg:6036 is area\nkg:6748 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:U.S._state ;\",\n    \"   kg:has_population ?population ;\",\n    \"   kg:has_area ?area .\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spaceflight\",\n    \"WHERE {\",\n    \"?spaceflight wdt:P15 wdt:Q26497 ;\", \"# Q26497 is the Wikidata ID for Baikonur Cosmodrome\",\n    \"  rdfs:label ?label .\",\n    \"FILTER (lang(?label) = 'en')}\",\n    \"ORDER BY ?spaceflight\"\n  ]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?spaceflight\",\n    \"WHERE {\",\n      \"?spaceflight wdt:P1427 wd:Q177477 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3950 is start point\nkg:1434 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?flight\",\n    \"WHERE {\",\n    \"?flight kg:isStartPoint ?startPoint .\",\n    \"?startPoint kg:id \\\"kg:3950\\\" .\",\n    \"?startPoint kg:name \\\"Baikonur Cosmodrome\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?trumpetPlayer\",\n    \"WHERE {\",\n    \"?trumpetPlayer wdt:P108 ?band .\",\n    \"?trumpetPlayer wdt:P106 wd:Q954273 .\" , \"># Q954273 is the Wikidata item for 'Trumpeter'\",\n    \"?band wdt:P161 ?bandleader .\",\n    \"FILTER(?trumpetPlayer = ?bandleader)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158852 is conductor\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?trumpetPlayer\",\n    \"WHERE {\",\n      \"?trumpetPlayer wdt:P106 wd:Q158852 ;\", \"# Occupation is conductor (bandleader)\",\n      \"   wdt:P1303 wd:Q8338 .            # Instrument is trumpet\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9126 is occupation\nkg:5599 is conductor\nkg:3375 is instrument\nkg:5858 is trumpet", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:9126 ?occupation .\",\n    \"?player kg:3375 kg:5858 .\",\n    \"?player kg:5599 ?bandleadership .\",\n    \"}\",\n    \"ORDER BY ?player\"\n  ]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q6985; # State instance of administrative territorial entity\",\n    \"wdt:P137 ?timezone. # Has timezone\",\n    \"?timezone wdt:P276* wd:Q1041\" , \"# P276 is the property for 'located in the administrative territorial entity', and Q1041 is the Wikidata item for Utah's timezone (Mountain Time Zone)\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P421 ?timezone .\",\n    \"?state wdt:P31 wd:Q3565"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0110 is Utah\nkg:3176 is located in time zone\nkg:7966 is instance of\nkg:4285 is U.S. state\nkg:3176 is located in time zone\nkg:0110 is Utah", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:4285 ;\",\n    \"   kg:3176 ?timezone .\",\n    \"?state a kg:4285 ;\",\n    \"   kg:3176 ?same_timezone .\",\n    \"kg:0110 kg:3176 ?same_timezone .\",\n    \"}\",\n    \"ORDER BY ?state\"\n  ]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?daughter wdt:P26 wd:Q104538.\" , \"# Ingrid Bergman's daughter\",\n      \"?daughter wdt:P739 ?person.\" , \"# The spouse of the daughter\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43247 is Ingrid Bergman\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?spouse \",\n\t\t\"WHERE {\",\n\t\t\t\"?daughter wdt:P40 wd:Q43247 ;\",\n\t\t\t\t\"wdt:P26 ?spouse .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1029 is Ingrid Bergman\nkg:6032 is child\nkg:4891 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1029 kg:6032 ?child .\",\n    \"  ?child kg:4891 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n      \"?museum wdt:P31/wdt:P279* wd:Q12034865 ;\", \"# museum instance of or subclass of Museum\",\n      \"wdt:P17 wd:Q940 .\", \"# located in London\",\n      \"OPTIONAL { ?museum rdfs:label ?label FILTER(LANG(?label) = 'en') }.\" ,\"\\n# Optional label for better understanding\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P276 is location\nwd:Q84 is London", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum wdt:P31 wd:Q33506 ;\",\n    \"   wdt:P276 wd:Q84 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2426 is instance of\nkg:8333 is museum\nkg:0559 is location\nkg:8155 is London", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum a kg:8333 ;\",\n    \"   kg:0559 kg:8155 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106* wd:Q95427 ;\", \"# Player is related to Q95427 (American football player)\",\n      \"?player wdt:P279* wd:Q384549 . # Ensure the player is from the Atlanta Falcons team\",\n      \"OPTIONAL { ?player wdt:P2094 ?height } # Height of the player, if available\",\n      \"FILTER NOT EXISTS { ?player wdt:P2094 [] } # Exclude players without height information\",\n      \"?player wdt:P2094 ?maxHeight . # Find the tallest player by height\",\n      \"VALUES ?maxHeight { ?height } # Filter to only return the tallest player\"\n    ,\n    \"}\"\n  ]\n}\n                 \t \t"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P54 is member of sports team\nwd:Q272059 is Atlanta Falcons\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P54 wd:Q272059 ;\",\n      \"?player wdt:P2048 ?height .\",\n      \"FILTER NOT EXISTS {\",\n        \"?otherPlayer wdt:P54 wd:Q272059 ;\",\n        \"?otherPlayer wdt:P2048 ?otherHeight .\",\n        \"?otherHeight > ?height\"\n     \t\t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1796 is member of sports team\nkg:3447 is Atlanta Falcons\nkg:1244 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:isMemberOfSportsTeam kg:3447 ;\",\n    \"   kg:isHeight ?height .\",\n    \"\",\n    \"SERVICE <http://example.org/rdf/sparql> {\",\n    \"?player kg:isHeight ?max_height FILTER (?height = ?max_height) }\",\n    \"} ORDER BY DESC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer\",\n    \"WHERE {\",\n      \"?writer wdt:P165 ?prize .\",\n      \"?prize p:P184 ?statement .\",\n      \"?statement ps:P184 wd:Q35067 .\", \"@en # Nobel Prize in Literature\",\n      \"?statement pq:P580 ?awardDate .\",\n      \"?writer rdfs:label ?writerLabel .\",\n      \"FILTER(LANG(?writerLabel) = 'en')\",\n    \"}\",\n    \"ORDER BY DESC(?awardDate)\"\n  ]\n}\n"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P166 is award received\nwd:Q37922 is Nobel Prize in Literature", "response": "{\n  \"query\": [\n    \"SELECT ?writer\",\n    \"WHERE {\",\n      \"?writer wdt:P106 wd:Q36180 ;\",\n           \"wdt:P166 wd:Q37922.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3248 is occupation\nkg:6280 is writer\nkg:9080 is award received\nkg:4831 is Nobel Prize in Literature", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer kg:isoccupation ?occupation .\",\n    \"?writer kg:iswriter true .\",\n    \"?writer kg:awardreceived ?award .\",\n    \"?award kg:isNobelPrizeInLiterature true .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P1082 ?height. \",\n      \"?player wdt:P31/wdt:P279* wd:Q6045. \",\n      \"?height wdt:P2154 'true'@en. \",\n      \"FILTER(?height > 2000) \",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q3665646 ;\",\n      \"   wdt:P2048 ?height .\",\n      \"?height wikibase:quantityAmount ?value ;\",\n      \"   wikibase:quantityUnit wikibase-unit:m .\",\n      \"?value FILTER(?value > 2000) .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7450 is occupation\nkg:6446 is basketball player\nkg:6984 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:isoccupation kg:6446 ;\",\n    \"   kg:ishigherthan ?height .\",\n    \"?height kg:isheight \\\"2\\\"^^<http://www.w3.org/2001/XMLSchema#float> .\",\n    \"?player kg:isoccupation kg:6446 .\",\n    \"}\",\n    \"FILTER(?height > 2)\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q30127 wdt:P577 ?date .\",\n    \"  BIND(wd:Q30127 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9202 is Statue of Liberty\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q9202 ;\",\n    \"   wdt:P571 ?inceptionDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9932 is Statue of Liberty\nkg:2835 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?statue kg:9932 ?resource .\",\n    \"?resource kg:2835 ?inceptionDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"  wd:Q17289 wdt:P276 ?state .\",\n    \"}\",\n    \"ORDER BY ?state\"\n  ]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1204 is Illinois\nwdt:P47 is shares border with", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?state\",\n\t\t\"WHERE {\",\n\t\t\t\"?state wdt:P47 wd:Q1204 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0369 is Illinois\nkg:2142 is shares border with", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state kg:2142 kg:0369 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P353 wd:Q78261940 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q49740 is Minecraft\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q49740 wdt:P178 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is Minecraft\nkg:0620 is developer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game kg:5174 ?minecraft .\",\n    \"?game kg:0620 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P6259 wd:Q104378.\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q186924 is Hillel Slovak\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q186924 wdt:P20 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8632 is Hillel Slovak\nkg:3889 is place of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:8632 ?person .\",\n    \"?person kg:3889 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q16958 wdt:P161 ?movie .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q219512 is Jesse Eisenberg", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"wd:Q219512 wdt:P161 ?role.\",\n    \"?role wdt:P161 ?movie.\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t "}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4329 is cast member\nkg:1690 is Jesse Eisenberg", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:isCastMember kg:1690.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?swimmer\",\n    \"WHERE {\",\n    \"?swimmer wdt:P1082 ?birthPlace .\",\n    \"?swimmer wdt:P569 ?dateOfBirth .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?birthPlace = wd:Q347) # Moscow\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t        \t\t\t\t\t"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10843402 is swimmer\nwdt:P19 is place of birth\nwd:Q649 is Moscow", "response": "{\n  \"query\": [\n    \"SELECT ?swimmer\",\n    \"WHERE {\",\n    \"?swimmer wdt:P106 wd:Q10843402 ;\",\n    \"   wdt:P19 wd:Q649 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5904 is occupation\nkg:1103 is swimmer\nkg:7585 is place of birth\nkg:8931 is Moscow", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1103 ?swimmer .\",\n    \"?swimmer kg:5904 ?occupation .\",\n    \"?swimmer kg:7585 ?placeOfBirth .\",\n    \"?placeOfBirth kg:8931 <http://example.org/place/Moscow> .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cosmonaut\",\n    \"WHERE {\",\n    \"?cosmonaut wdt:P106 wd:Q243598.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q15180 is Soviet Union\nwdt:P27 is country of citizenship\nwd:Q159 is Russia", "response": "{\n  \"query\": [\n    \"SELECT ?cosmonaut\",\n    \"WHERE {\",\n    \"?cosmonaut wdt:P106 wd:Q11631 ;\",\n    \"   wdt:P27 wd:Q15180 .\"\n   \t,\n    \"FILTER NOT EXISTS { ?cosmonaut wdt:P27 wd:Q159 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1826 is occupation\nkg:1573 is astronaut\nkg:9428 is country of citizenship\nkg:0187 is Soviet Union\nkg:9428 is country of citizenship\nkg:4328 is Russia", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?cosmonaut\",\n    \"{\",\n    \"  ?cosmonaut a kg:Astronaut ;\",\n    \"           kg:isOccupation kg:1826 ;\",\n    \"           kg:countryOfCitizenship ?citizenship .\",\n    \"\",\n    \"  FILTER(?citizenship IN (kg:9428, kg:0187, kg:4328))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n      \"?organization wdt:P31/wdt:P279* wd:Q364507.\", \"# Find organizations\",\n      \"?organization wdt:P27 wd:Q183.\", \"# Filter for Swiss organizations\",\n      \"?organization wdt:P160 ?country.\" ,\"\\n\", \"# Ensure it's not a sub-entity of another country\",\n      \"FILTER NOT EXISTS { ?organization wdt:P1412 ?non_profit. }\" ,\"\\n\", \"# Exclude for-profit entities\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\"\\n\", \"# Label in English\"\n    ,\n    \"}\",\n    \"LIMIT 100\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" "}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwd:Q39 is Switzerland\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q70208 is municipality of Switzerland", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"?organization wdt:P31 wd:Q163740 ;\",\n    \"   wdt:P159 wd:Q39 .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0996 is instance of\nkg:6895 is nonprofit organization\nkg:0121 is headquarters location\nkg:3997 is Switzerland\nkg:0121 is headquarters location\nkg:0996 is instance of\nkg:0663 is municipality of Switzerland", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization a kg:6895 ;\",\n    \"   kg:0121 ?location .\",\n    \"?location kg:3997 kg:0663 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?president wdt:P27 / pso:placeOf_birth / psv:year \\\"1945\\\"^^xsd:gYear ;\",\n    \"       wdt:P39 wd:Q608348. # Q608348 is the Wikidata item for U.S. President\",\n    \"?president wdt:P27 ?birthPlace .\",\n    \"?birthPlace pso:placeOf_birth / psv:year \\\"1945\\\"^^xsd:gYear .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwdt:P279 is subclass of\nwd:Q30461 is president\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?president wdt:P39/wdt:P279* wd:Q30461 ;\",\n    \"   wdt:P569 ?birthDate .\",\n    \"FILTER(YEAR(?birthDate) = 1945)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9721 is position held\nkg:7772 is subclass of\nkg:4201 is president\nkg:9072 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?president kg:9721 ?position ;\",\n    \"   kg:4201 ?isPresident ;\",\n    \"   kg:9072 ?dob .\",\n    \"FILTER(?isPresident = true && year(?dob) = 1945)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424.\" , \"># Music work or musical performance\",\n      \"?resource wdt:P41 ?musicType.\" , \"># The music type played by Lou Reed\",\n      \"FILTER(?resource = wd:Q6805).\" ,\"\\n# Filter for Lou Reed's resource\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q189080 is Lou Reed\nwdt:P136 is genre", "response": "{\n  \"query\": [\n    \"SELECT ?musicType WHERE {\",\n    \"?resource wdt:P136 ?musicType .\",\n    \"wd:Q189080 wdt:P136 ?musicType .\"\n   ,\"}\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5974 is Lou Reed\nkg:2540 is genre", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:5974 ?resource .\",\n    \"?subject kg:2540 ?genre .\",\n    \"FILTER(?genre != kg:5974) # Ensure we are not returning Lou Reed himself as a resource\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?team WHERE {\",\n    \"  wd:Q9567 wdt:P1348 ?team. # Q9567 is the Red Sox (Boston)\",\n    \"  FILTER(?team = wd:Q2060) # Q2060 is Fenway Park, where the Red Sox play\"\n   ,\"}\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213959 is Boston Red Sox\nwdt:P115 is home venue", "response": "{\n  \"query\": [\n    \"SELECT ?venue\",\n    \"WHERE {\",\n    \"?team wdt:P115 ?venue .\",\n    \"?team wd:P213959 wd:Q213959 .\",\n    \"}\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is Boston Red Sox\nkg:3920 is home venue", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?venue\",\n    \"WHERE {\",\n    \"?team kg:isBostonRedSox ?value.\",\n    \"?team kg:homeVenue ?venue.\",\n    \"FILTER(?value = \\\"yes\\\")\"\n   ,\"}\"\n  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?club\",\n    \"WHERE {\",\n      \"?club wdt:P31/wdt:P279* wd:Q8064 ;\", \"# Club is a sports team and subclass of club\",\n      \"wdt:P36 wd:Q1549169 .          # Club plays in Bundesliga\",\n    \"}\",\n    \"ORDER BY ?club\"\n  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q82595 is Bundesliga", "response": "{\n  \"query\": [\n    \"SELECT ?club\",\n    \"WHERE {\",\n      \"?club wdt:P31 wd:Q476028 ;\",\n           \"wdt:P118 wd:Q82595 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7599 is instance of\nkg:6882 is association football club\nkg:9691 is league\nkg:5778 is Bundesliga", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?club\",\n    \"WHERE {\",\n    \"?club a kg:6882 ;\",\n    \"   kg:9691 kg:5778.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?bridge\",\n    \"WHERE {\",\n      \"?bridge wdt:P31/wdt:P279* wd:Q3198654 ;\", \"># Q3198654 is the bridge item\",\n      \"?bridge wdt:P2049 ?seineCrossing.\",\n      \"?seineCrossing wdt:P131* wd:Q134799.\" ,\"% Q134799 is Paris, where the Seine river is located\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q12280 is bridge\nwdt:P177 is crosses\nwd:Q1471 is Seine", "response": "{\n  \"query\": [\n    \"SELECT ?bridge\",\n    \"WHERE {\",\n    \"?bridge wdt:P31 wd:Q12280 ;\",\n    \"   wdt:P177 wd:Q1471 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5104 is instance of\nkg:3688 is bridge\nkg:6698 is crosses\nkg:3188 is Seine", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?bridge\",\n    \"WHERE {\",\n    \"?bridge a kg:3688 ;\",\n    \"   kg:6698 kg:3188 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P351 \\\"Hal Roach\\\" ;\", \"># P351 is used to link a person's production activity.\",\n      \"?productionActivity wdt:P407 ?resource .\", \"># P407 is the property for the number of items produced.\",\n      \"?productionActivity wdt:P2829 ?filmCount .\", \"># P2829 is the property for the count of films produced.\",\n      \"FILTER(?filmCount = 1) # This filter is a placeholder, as Wikidata does not directly store this information in one step.\" ,\"\\n\",\n    \"}\"\n  ]\n}\n                 \t \t"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# Film instance of work\",\n    \"   wdt:P162 wd:Q72792 .       # Produced by Hal Roach\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7838 is producer\nkg:2222 is Hal Roach", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:producer kg:2222 ;\",\n    \"   a kg:Film .\",\n    \"}\",\n    \"GROUP BY ?film\"\n  ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n      \"?movie wdt:P17 wd:Q960;\",\n      \"?movie wdt:P136 wd:Q8510.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 ;\",\n             \"wdt:P495 wd:Q35 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7611 is subclass of\nkg:0455 is film\nkg:5857 is instance of\nkg:5175 is country of origin\nkg:4426 is Denmark", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie a kg:0455 ;\",\n    \"   kg:5857 ?subclass ;\",\n    \"   kg:5175 kg:4426 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q12065 wdt:P921 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"?item wdt:P509 ?causeOfDeath .\",\n    \"FILTER(?causeOfDeath != [])\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4613 is cause of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isCauseOfDeath+ ?cause .\",\n    \"FILTER(?cause = kg:4613)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who are the four youngest MVP basketball players?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who are the four youngest MVP basketball players?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P1476 ?award. # MVP award property\",\n    \"  ?player wdt:P569 ?birth. # Birth date property\",\n    \"  FILTER(?award = wd:Q208390) # Filter for MVP award (Assuming this is the correct QID for MVP)\",\n    \"}\",\n    \"ORDER BY ASC(?birth)\",\n    \"LIMIT 4\"\n  ]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q5780964;\",\n    \"   rdfs:label ?label.\",\n    \"FILTER (lang(?label) = 'en')\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER EXISTS { ?company wdt:P17 wd:Q245 . }\"\n  ]\n}\n  \t\t\t\t\t  \t\t\t\t"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P159 is headquarters location\nwd:Q1726 is Munich", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31/wdt:P279* wd:Q4830453 ;\",\n    \"   wdt:P159 wd:Q1726 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7379 is subclass of\nkg:3056 is business\nkg:3902 is instance of\nkg:9118 is headquarters location\nkg:4859 is Munich", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company a kg:3056.\",\n    \"?company kg:9118 ?location.\",\n    \"?location kg:4859 Munich.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?capital ?capitalLabel\",\n    \"WHERE {\",\n    \"  ?country wdt:P30 wd:Q182946. # P30 is the property for 'runs through', Q182946 is the identifier for the Himalayas\",\n    \"  ?country wdt:P297 ?capital. # P297 is the property for 'capital'\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ?capitalLabel\"\n  ]\n}"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital\",\n    \"WHERE {\",\n    \"?country wdt:P17 wd:Q5451 ;\",\n    \"   wdt:P36 ?capital .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3281 is Himalayas\nkg:7625 is country\nkg:0169 is capital", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?capital\",\n    \"WHERE {\",\n    \"?country kg:3281 ;\", \"# The country runs through the Himalayas\",\n    \"   kg:0169 ?capital . # The capital of the country\",\n    \"}\"\n  ]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n      \"?movie wdt:P6708 ?director.\",\n      \"wd:Q9567 wdt:P838 ?director. # Park Chan-wook's Wikidata ID\",\n      \"}\",\n    \"GROUP BY ?movie\"\n  ]\n}\n"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q315484 is Park Chan-wook", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"wd:Q315484 wdt:P57 ?movie.\",\n    \"}\"\n  ]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6511 is director\nkg:3320 is Park Chan-wook", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:6511 kg:3320.\",\n    \"}\"\n  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q1142790.\" ,\n    \"}\"\n  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline", "response": "{\n  \"query\": [\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q46970.\",\n    \"}\"\n  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6911 is instance of\nkg:8786 is airline", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline kg:isInstanceOf kg:8786.\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?island\",\n    \"WHERE {\",\n    \"?island wdt:P31 wd:Q6047 ;\", \"># Q6047 is the item for 'Island'\",\n    \"?island wdt:P1386 wd:Q159 .\", \"># Q159 is Japan\"\n   ,\"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23442 is island\nwdt:P17 is country\nwd:Q17 is Japan", "response": "{\n  \"query\": [\n    \"SELECT ?island\",\n    \"WHERE {\",\n    \"?island wdt:P31 wd:Q23442 ;\",\n    \"   wdt:P17 wd:Q17 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7714 is instance of\nkg:7851 is island\nkg:2897 is country\nkg:2425 is Japan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?island\",\n    \"WHERE {\",\n    \"?island a kg:7851 ;\",\n    \"   kg:7714 ?country .\",\n    \"?country kg:2897 kg:2425 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city ?population\",\n    \"WHERE {\",\n      \"?city wdt:P625 ?coordinates ;\",\n      \"   wdt:P1082 ?population .\",\n      \"FILTER regex(str(?city), '^Q\\\\d+$', 'i')\",\n    \"}\",\n    \"FILTER EXISTS { ?city rdfs:label 'Maribor'@en }\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t\t\t\t     \t"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1010 is Maribor\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\", \"># A resource must be a human or a group of humans (in this case, the city).\",\n      \"?resource rdfs:label \\\"Maribor\\\"@en .\", \"># The label for Maribor in English.\",\n      \"?resource wdt:P1082 ?population .\", \"># The population property for Maribor.\",\n    \"}\"\n  ]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8389 is Maribor\nkg:2929 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2929 ?population .\",\n    \"?resource kg:8389 \\\"Maribor\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut\",\n    \"WHERE {\",\n    \"?mission wdt:P178 \\\"Apollo 14\\\" ;\",\n    \"   wdt:P50 ?astronaut .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut\",\n    \"WHERE {\",\n    \"?mission wdt:P1029 ?astronaut .\",\n    \"?mission wd:instanceOf* wd:Q178871 .\",\n    \"}\",\n    \"LIMIT 50\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3406 is Apollo 14\nkg:0698 is crew member(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?apollo14 kg:3406 ?resource .\",\n    \"?resource kg:0698 \\\"Apollo 14\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P1082 ?employeeCount .\",\n    \"?company wdt:P31 wd:Q5776947 .\", \"># Q5776947 is the item for 'Legal entity'\",\n    \"?employeeCount wikibase:quantityAmount ?amount ;\",\n    \"   wikibase:quantityUnit wd:Q12506988 .\", \"># Q12506988 is the unit 'number of employees'\",\n    \"FILTER(?amount > 1000000)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31/wdt:P279* wd:Q4830453 ;\",\n    \"   wdt:P1128 ?employeeCount .\",\n    \"?employeeCount wikibase:quantityAmount ?count .\",\n    \"FILTER (?count > 1000000) .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4170 is subclass of\nkg:5338 is business\nkg:1104 is instance of\nkg:8891 is employees", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company a kg:5338 ;\",\n    \"   kg:8891 ?employeeCount .\",\n    \"FILTER (?employeeCount > 1000000)\",\n    \"}\"\n  ]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?person .\", \"># P3459 is the property for 'starring' in Wikidata\",\n      \"?film wdt:P281* ?marshallFilm .\", \"># P281 is used to represent a parent-child relationship, which can be used to find films directed by Garry Marshall\",\n      \"?person wdsg:label \\\"Julia Roberts\\\"@en .\", \"># Filter for Julia Roberts\"\n    ,\n    \"FILTER(?person = wd:Q9356) .\", \"># Use the exact Wikidata ID for Julia Roberts (wd:Q9356)\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q315087 is Garry Marshall\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q11424 ;\", \"# Check if the resource is a film\",\n\t\t\"?film wdt:P57 wd:Q315087 ;\", \"# The film was directed by Garry Marshall\",\n\t\t\"?film wdt:P161 wd:Q40523 . \" ,\"\\t# Julia Roberts starred in the film\"\n\t\t]}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5953 is instance of\nkg:4237 is film\nkg:9816 is director\nkg:6470 is Garry Marshall\nkg:4262 is cast member\nkg:2003 is Julia Roberts", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film kg:4237 ?movie .\",\n\t\t\t\"?movie kg:9816 kg:6470 .\",\n\t\t\t\"?film kg:4262 kg:2003 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club\",\n    \"WHERE {\",\n    \"?club wdt:P31/wdt:P279* wd:Q845680.\" , \"# Check if the resource is a soccer club\",\n    \"?club wdt:P361 ?league.\" , \"# The club is associated with a league\",\n    \"FILTER(?league = wd:Q10600).\" ,\"# Filter for Premier League (Wikidata ID Q10600)\",\n    \"}\"\n  ]\n}\n"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q9448 is Premier League", "response": "{\n  \"query\": [\n    \"SELECT ?club\",\n    \"WHERE {\",\n      \"?club wdt:P31 wd:Q476028 ;\",\n           \"wdt:P118 wd:Q9448.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8917 is instance of\nkg:9198 is association football club\nkg:7069 is league\nkg:5830 is Premier League", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?club\",\n    \"WHERE {\",\n    \"?club a kg:9198 ;\",\n    \"   kg:7069 kg:5830 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q12367 wdt:P131* ?place .\",\n    \"  FILTER(?place != wd:Q12367)\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?altLabel)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q35600 is Ural Mountains\nwdt:P610 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P610 wd:Q35600 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4847 is Ural Mountains\nkg:1765 is highest point", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?mountain kg:4847 \\\"Urals\\\" ;\",\n    \"   kg:1765 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?governor\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q6257 ;\",\n    \"wdt:P108 ?governor .\",\n    \"wdt:P30 wd:Q49666 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1214 is Wyoming\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"?govUri wdt:P6 wd:Q1214 .\",\n    \"?govUri rdf:type wikibase item .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1605 is Wyoming\nkg:5742 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?governor\",\n    \"WHERE {\",\n    \"?state kg:1605 'Wyoming'.\",\n    \"?state kg:5742 ?governor.\",\n    \"}\"\n  ]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?architect ?studyPlace\",\n    \"WHERE {\",\n      \"?building wdt:P174 ?architect.\" , \"# Eiffel Tower architect\",\n      \"?architect wdt:P69 ?studyPlace.\" ,\"# Study place of the architect\",\n      \"?building rdfs:label \\\"Eiffel Tower\\\"@en.\"\n    ,\"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243 is Eiffel Tower\nwdt:P84 is architect\nwdt:P69 is educated at", "response": "{\n  \"query\": [\n    \"SELECT ?edu WHERE {\",\n    \"wd:Q243 wdt:P84 ?architect .\",\n    \"?architect wdt:P69 ?edu .\"\n   ,\"}\"\n  ]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8697 is Eiffel Tower\nkg:0724 is architect\nkg:7890 is educated at", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:8697 kg:0724 ?architect .\",\n    \"  ?architect kg:7890 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P19 wd:Q7687;\",\n      \"?actor wdt:P569 ?birthDate .\",\n      \"?birthDateToProps wikibase:timeStartAfter \\\"1950-01-01T00:00:00Z\\\"^^xsd:dateTime .\",\n      \"FILTER(?actor != wd:Q7687) # Exclude Paris itself if it's somehow linked, though unlikely\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q90 is Paris\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P33999 ;\", \"# Q33999 is actor, but using P33999 for specificity\",\n      \"   wdt:P19 wd:Q90 ;\", \"# Place of birth is Paris (Q90)\",\n      \"   wdt:P569 ?birthDate .\", \"# Date of birth\",\n      \"?birthDate xsd:date \\\"1950-01-01\\\"^^xsd:date .\", \"# After 1950\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2117 is occupation\nkg:6645 is actor\nkg:4144 is place of birth\nkg:5863 is Paris\nkg:5702 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor kg:6645 ?role ;\", \"# Find actors\",\n    \"   kg:4144/kg:5863 ?birthPlace ;\", \"# Place of birth is Paris\",\n    \"   kg:5702 ?dob .\", \"# Date of birth\",\n    \"FILTER(?birthPlace = kg:5863 && ?dob > '1950-01-01'^^xsd:date) # Born in Paris after 1950\",\n    \"}\",\n    \"LIMIT 10\" ,\"\\n\" ]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P161* wd:Q2490587 ;\", \"# Liz Taylor as a performer\",\n    \"?movie wdt:P161* wd:Q36056 .  # Richard Burton as a performer\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q34851 is Elizabeth Taylor\nwdt:P161 is cast member\nwd:Q151973 is Richard Burton", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P161 wd:Q34851 ;\",\n             \"wdt:P161 wd:Q151973 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3549 is cast member\nkg:8585 is Elizabeth Taylor\nkg:3549 is cast member\nkg:7795 is Richard Burton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:isCastMember/kg:isCastMember* kg:8585 ;\",\n    \"   kg:isCastMember/kg:isCastMember* kg:7795 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n      \"?organization wdt:P31/wdt:P279* wd:Q48605;\",\n      \"wdt:P27 wd:Q360568;\",\n      \"wdt:P39 ?position.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P159 is headquarters location\nwdt:P17 is country\nwdt:P159 is headquarters location\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"?organization wdt:P31 wd:Q163740 ;\",\n    \"   wdt:P17 wd:Q408 .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4777 is instance of\nkg:7142 is nonprofit organization\nkg:9739 is headquarters location\nkg:5338 is country\nkg:0600 is Australia\nkg:9739 is headquarters location\nkg:5338 is country\nkg:9739 is headquarters location\nkg:0600 is Australia", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization a kg:7142 ;\",\n    \"   kg:5338 kg:0600 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?pope\",\n    \"WHERE {\",\n    \"?pope wdt:P278 wd:Q1039695.\" , \"# John Paul II succeeded by ?pope\",\n    \". }\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q989 is John Paul II\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?successor WHERE {\",\n    \"?pope wdt:p:P39 wd:Q989 ;\",\n    \"   wdt:pq:P1366 ?successor .\",\n    \"?successor wdt:p:P39 wd:Q19546 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4431 is John Paul II\nkg:3917 is position held\nkg:8695 is position held\nkg:5502 is pope\nkg:5825 is replaced by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?successor\",\n    \"WHERE {\",\n    \"?pope1 kg:3917 kg:4431 ;\", \"# John Paul II held the position of pope\",\n    \"?successor kg:5825 ?pope1 .  # The successor replaced John Paul II in his position as pope\",\n    \"}\",\n    \"FILTER(?successor != kg:4431)  # Ensure we don't return John Paul II himself\"\n  ]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?entity wdt:P39 wd:Q12468750 ;\", \"># Q12468750 is the item for Pakistan in Wikidata\",\n    \"wdt:P580 ?start .\",\n    \"FILTER(YEAR(?start) = 1978).\",\n    \"?entity wdt:P279* wd:Q134374. # Q134374 is the item for President of Pakistan in Wikidata\",\n    \"?president wdt:P826 ?entity.\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q473984 is President of Pakistan\np:P39 is position held\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?entity wdt:P39/wdt:P27 wd:Q473984 ;\",\n    \"   pq:P580 \\\"1978-01-01T00:00:00Z\\\"^^xsd:dateTime .\",\n    \"?president p:P39 ?statement .\",\n    \"?statement pq:P580 \\\"1978-01-01T00:00:00Z\\\"^^xsd:dateTime ;\",\n    \"   pq:P582 ?end .\",\n    \"?entity wdt:P81 ?president .\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?statement pq:P582 ?end }\"\n  ]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8206 is position held\nkg:4349 is President of Pakistan\nkg:3509 is position held\nkg:2536 is start time\nkg:0612 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4349/kg:3509 ?position.\",\n    \"?position kg:8206/kg:2536 \\\"1978\\\"^^xsd:gYear.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"  wd:Q19826 wdt:P735 ?owner .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243278 is Rolls-Royce\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?car wdt:P31 wd:Q243278 ;\",\n    \"   wdt:P127 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5136 is Rolls-Royce\nkg:4524 is owned by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?rollsRoyce kg:5136 'Rolls-Royce'.\",\n    \"?rollsRoyce kg:4524 ?owner.\",\n    \"}\"\n  ]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum (COUNT(?museum) AS ?numberOfMuseums) WHERE {\",\n    \"  ?museum wdt:P31 wd:Q12406895 ;\", \"># Q12406895 is the Wikidata item for museum\",\n    \"  wdt:P17 wd:Q142 . # Q142 is the Wikidata item for Paris\",\n    \"} GROUP BY ?museum\"\n  ]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P131 is located in the administrative territorial entity\nwd:Q90 is Paris", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n      \"?museum wdt:P31 wd:Q33506 ;\",\n             \"wdt:P131 wd:Q90 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8603 is instance of\nkg:3705 is museum\nkg:5581 is located in the administrative territorial entity\nkg:2715 is Paris", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum a kg:3705 ;\",\n    \"   kg:5581 kg:2715 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"?event wdt:P580+ wd:Q13426;\",\n    \"wdt:P17 ?country.\",\n    \"?location wdt:P17 ?country; wdt:P131* ?event.\",\n    \"?location rdfs:label ?label.\",\n    \"FILTER(LANG(?label) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q9696 wdt:P20 ?location.\",\n    \"}\"\n  ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0170 is John F. Kennedy\nkg:4823 is place of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0170 kg:4823 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?chancellor wdt:P39 wd:Q162548;\",\n    \"wdt:P27 wd:Q172.\" ,\n    \"}\",\n    \"ORDER BY ?chancellor\"\n  ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?chancellor wdt:P39 wd:Q4970706 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0430 is position held\nkg:8057 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?person kg:isPositionHeld*/kg:8057 ?chancellor .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?beer WHERE {\",\n    \"  ?beer wdt:P31/wdt:P279* wd:Q164851. # Check if the item is a beer or a sub-class of beer\",\n    \"  ?beer wdt:P175 ?origin. # Get the origin of the beer\",\n    \"  FILTER(?origin = wd:Q31) # Filter for Ireland (Q31 in Wikidata)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44 is beer\nwd:Q15075508 is beer brand\nwdt:P31 is instance of\nwdt:P17 is country\nwd:Q27 is Republic of Ireland", "response": "{\n  \"query\": [\n    \"SELECT ?beer\",\n    \"WHERE {\",\n      \"?beer wdt:P31 wd:Q44 ;\",\n           \"wdt:P17 wd:Q27 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6618 is beer\nkg:6574 is beer brand\nkg:0525 is instance of\nkg:3428 is country\nkg:7048 is Republic of Ireland", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?beer\",\n    \"WHERE {\",\n    \"?beer kg:0525 ?instanceOf.\",\n    \"?instanceOf kg:3428 kg:7048.\",\n    \"?beer kg:6618 ?isBeer.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"  ?mountainSystem wdt:P170 \\\"Himalaya\\\" ;\",\n    \"                 wdt:P17 ?country .\",\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?mountainSystem wdt:P17 ?country ;\",\n    \"   wdtns:P17/wdtns:P279* wd:Q5451 .\",\n    \"}\",\n    \"VALUES ?mountainSystem { wd:Q5451 }\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Himalayas\nkg:4276 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?mountainSystem kg:isHimalayas ?himalayanMountain.\",\n    \"?mountainSystem kg:extendsTo ?country.\",\n    \"?country a kg:4276.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P19 ?birthPlace ;\",\n      \"   wdt:P31/wdt:P279* wd:Q5 .\", \"# Ensure the resource is a person\",\n      \"?birthPlace rdfs:label ?placeLabel ;\",\n      \"   wdt:P17 ?country .\", \"# Check if the birth place is in Germany\",\n      \"FILTER(?country = wd:Q183).\",\n    \"}\",\n    \"ORDER BY ?actor\"\n  ]\n}\n"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10800557 is film actor\nwdt:P19 is place of birth\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P106 wd:Q10800557 ;\", \"# Check if the resource is a film actor\",\n      \"   wdt:P19 wd:Q183.\" ,\"\\n\\t# Place of birth is Germany\",\n    \"}\"\n  ]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9522 is occupation\nkg:1808 is film actor\nkg:0224 is place of birth\nkg:5013 is Germany\nkg:0224 is place of birth\nkg:2561 is country\nkg:5013 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor kg:9522 kg:1808 ;\", \"# The actor has the occupation of film actor\",\n    \"   kg:0224 ?birthPlace .\", \"# The actor's place of birth is ?birthPlace\",\n    \"FILTER(?birthPlace = kg:5013) # The place of birth is Germany\",\n    \"}\"\n  ]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n      \"?filmProducer wdt:P161 ?productionFilm.\",\n      \"?productionFilm wdt:P31/wdt:P279* wd:Q11424850.\" ,\n      \"FILTER NOT EXISTS { ?filmProducer wdt:P161 ?otherProductionFilm. }\",\n    \"}\",\n    \"ORDER BY DESC(?productionFilm)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P162 ?producer .\",\n    \"}\",\n    \"GROUP BY ?producer\",\n    \"ORDER BY DESC(COUNT(?film))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is instance of\nkg:0983 is film\nkg:9722 is producer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?producer kg:produced ?film .\",\n    \"?film a kg:0983 .\",\n    \"}\",\n    \"GROUP BY ?producer\",\n    \"ORDER BY DESC(COUNT(?film))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?employeeCount .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q95 is Google\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company wdt:P31/wdt:P279* wd:Q95 ;\",\n    \"   wdt:P1128 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1346 is Google\nkg:0226 is employees", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1346 kg:0226 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P19 wd:Q243 ;\", \"># Q243 is the item for Berlin in Wikidata\",\n      \"?actor a wd:Q176.\" ,\"\\n\" ,\"\\t# Q176 is the item for actor in Wikidata\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q64 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P31 wd:Q5 .\", \"># Ensure the subject is a person (human)\",\n      \"?actor wdt:P106 wd:Q33999 .\", \"># The actor's occupation is 'actor'\",\n      \"?actor wdt:P19 wd:Q64 .\", \"># Place of birth is Berlin\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is occupation\nkg:4298 is actor\nkg:3614 is place of birth\nkg:5337 is Berlin", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor kg:4298 ?role ;\",\n    \"   kg:3614 kg:5337 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\" , \"># A resource (person or fictional character) - Goofy is a fictional character\",\n    \"?resource wdt:P846 ?creator .\" , \"># The creator of the resource\",\n    \"FILTER(?creator = wd:Q7229)\" , \"># Q7229 is the Wikidata item for 'Goofy'\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who created Goofy?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111135 is Goofy\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator\",\n    \"WHERE {\",\n    \"?goofy wdt:P170 ?creator .\",\n    \"?goofy wd:Q111135 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9459 is Goofy\nkg:7536 is creator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7536 kg:9459.\",\n    \"}\"\n  ]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 ?admissionDate .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"FILTER regex(str(?label), '^Alberta$') .\",\n      \"?admissionDate wikibaseatatype:time .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1951 is Alberta\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P364 wd:Q1951 ;\", \"># Q364 is the property for 'admitted as a province'\",\n      \"?resource wdt:P571 ?date .\", \"># P571 is the property for inception date\"\n    ,\"}\"\n  ]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8461 is Alberta\nkg:3974 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8461 ?province .\",\n    \"?resource kg:3974 ?inceptionDate .\",\n    \"FILTER(?province = \\\"Alberta\\\")\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P108 \\\"Soyuz programme\\\".\",\n      \"?mission wdt:P361 ?resource.\",\n      \"OPTIONAL { ?mission wdt:P580 ?start. }\",\n      \"FILTER NOT EXISTS { ?mission wdt:P582 ?end. }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q207329 is Soyuz programme", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?mission wdt:P361 wd:Q207329 .\",\n      \"?resource wdt:P361 ?mission .\",\n    \"}\"\n  ]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4715 is part of\nkg:9205 is Soyuz programme", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?mission kg:isPartOf* kg:9205 ;\",\n    \"   a ?type .\",\n    \"?type rdfs:subClassOf* kg:Mission .\",\n    \"?kg:9205 kg:name \\\"Soyuz programme\\\"@en .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?tvShow\",\n    \"WHERE {\",\n    \"?tvShow wdt:P31/wdt:P279* wd:Q11424;\",\n    \"?tvShow wdt:P161* <http://www.wikidata.org/entity/Q15084>.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t        \t\t\t\t\t"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q15416 is television program\nwdt:P161 is cast member\nwd:Q485310 is Neil Patrick Harris\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?tvShow\",\n\t\t\"WHERE {\",\n\t\t\t\"?tvShow wdt:P31/wdt:P279* wd:Q15416 ;\",\n\t\t\t\"?tvShow wdt:P161 wd:Q485310 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2058 is subclass of\nkg:5497 is television program\nkg:8214 is cast member\nkg:9534 is Neil Patrick Harris\nkg:3632 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?show\",\n    \"WHERE {\",\n    \"?show a kg:5497 .\",\n    \"?show kg:8214 ?actor .\",\n    \"?actor kg:3632 kg:9534 .\",\n    \"}\",\n    \"ORDER BY ?show\"\n  ]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q57706892 ;\", \"># Q57706892 is the item for 'founder of a group'\",\n      \"?resource wdt:P1439 ?foundingDate .\", \"># P1439 is the property for 'date of founding'\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?foundingDate)\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q622188 is Hells Angels\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q622188 ;\",\n    \"   wdt:P571 ?inceptionDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6885 is Hells Angels\nkg:8843 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8843 ?foundDate .\",\n    \"?resource kg:6885 \\\"Hells Angels\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company ?netIncome\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q5782964; # Company entity\",\n      \"?company rdfs:label \\\"Apple\\\"@en.\",\n      \"?company wdt:P1080 ?netIncome. # Net income property\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q312 is Apple\nwdt:P2295 is net profit", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q312 ;\",\n               \"wdt:P2295 ?income .\",\n      \"?income a wd:Q8074.\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9309 is Apple\nkg:5852 is net profit", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:9309 ?netIncome .\",\n    \"?netIncome a kg:5852 .\",\n    \"?company kg:9309 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31/wdt:P279* wd:Q1186540. # Find resources that are instances of Swedish holidays\",\n    \"}\",\n    \"LIMIT 100\" ]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q1401522 is public holidays in Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n    \"?holiday wdt:P31 wd:Q1401522 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5437 is instance of\nkg:1431 is public holidays in Sweden", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?holiday\",\n    \"WHERE {\",\n    \"?holiday a kg:1431.\",\n    \"}\"\n  ]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?burialSite wdt:P17 ?country ;\",\n    \"wdt:P131* ?city .\",\n    \"?person wdt:P20 ?burialSite ;\",\n    \"wdt:P810 \\\"Juliana\\\"@en ;\",\n    \"wdt:P27 wd:Q9564 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154946 is Juliana of the Netherlands\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?queen wdt:P31 wd:Q5 ;\", \"# Person instance of human\",\n    \"      wdt:P26 wd:Q154946 .\", \"# Born in the Netherlands (Juliana)\",\n    \"?burial wdt:P119 ?city ;\", \"# Place of burial\",\n    \"      wdt:P31/wdt:P27 wd:Q154946 . # Juliana is buried here (former Dutch queen)\"\n   ,\"}\",\n    \"FILTER(?city != '')\"\n  ]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7722 is Juliana of the Netherlands\nkg:1563 is place of burial", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city \",\n    \"WHERE {\",\n    \"?queen kg:7722 'Juliana of the Netherlands'.\",\n    \"?queen kg:1563 ?city.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31/wdt:P279* wd:Q86450.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P452 is industry\nwd:Q39809 is marketing", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 ;\", \"# Check if the resource is a business entity\",\n      \"   wdt:P452 wd:Q39809.\" ,\"\\n\" ,\"\\t# The company operates in the advertising industry (marketing)\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6959 is instance of\nkg:4237 is business\nkg:0680 is industry\nkg:5161 is marketing", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company a kg:4237.\",\n    \"?company kg:0680/kg:5161* kg:6959.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?murderer\",\n    \"WHERE {\",\n    \"?event wdt:P580+ ?date .\",\n    \"?event wdt:P31 wd:Q24906728 .\",\n    \"?event wdt:P176 ?murderer .\",\n    \"wd:Q962 wdt:P31 wd:Q5 .\" , \"# John Lennon\",\n    \"wd:Q962 wdt:P2860 ?event . # P2860 is the property for 'was a victim of'\",\n    \"?murderer rdfs:label ?murdererLabel .\",\n    \"FILTER(LANG(?murdererLabel) = 'en')\",\n    \"}\",\n    \"ORDER BY ASC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1203 is John Lennon\nwdt:P157 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?killer WHERE {\",\n    \"wd:Q1203 wdt:P157 ?killer.\",\n    \"}\"\n  ]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2917 is John Lennon\nkg:5682 is killed by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?killer\",\n    \"WHERE {\",\n    \"?kg:2917 kg:5682 ?killer .\",\n    \"}\"\n  ]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer\",\n    \"WHERE {\",\n      \"?writer wdt:P19 ?placeOfResidence ;\",\n      \"(wdt:P69 / wdt:P106)* ?education.\",\n      \"?education wdt:P36 ?university ;\",\n      \"wdl:Q24857 ?universityName.\",\n      \"FILTER(?universityName = \\\"Istanbul\\\"@en).\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P69 is educated at\nwdt:P131 is located in the administrative territorial entity\nwd:Q406 is Istanbul", "response": "{\n  \"query\": [\n    \"SELECT ?writer\",\n    \"WHERE {\",\n      \"?writer wdt:P106 wd:Q36180 ;\",\n           \"wdt:P69 ?education.\",\n      \"?education wdt:P131 wd:Q406.\",\n    \"}\"\n  ]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5704 is occupation\nkg:0260 is writer\nkg:7091 is educated at\nkg:8154 is located in the administrative territorial entity\nkg:9339 is Istanbul", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?writer kg:0260 ?occupation ;\",\n    \"   kg:7091 ?education .\",\n    \"?education kg:8154 kg:9339 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?band\",\n    \"WHERE {\",\n    \"?band wdt:P31 wd:Q5742980; # Check if the resource is a music group\",\n    \"      wdt:P136 wd:Q11862; # The band's genre is metalcore\",\n    \"      wdt:P17 wd:Q3975. } # The country is Australia\",\n    \"ORDER BY ?band\"\n  ]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q215380 is musical group\nwdt:P495 is country of origin\nwd:Q408 is Australia\nwdt:P136 is genre\nwd:Q183862 is metalcore", "response": "{\n  \"query\": [\n    \"SELECT ?band\",\n    \"WHERE {\",\n    \"?band wdt:P31 wd:Q215380 ;\",\n    \"   wdt:P495 wd:Q408 ;\",\n    \"   wdt:P136 wd:Q183862 .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2057 is instance of\nkg:5941 is musical group\nkg:6595 is country of origin\nkg:4070 is Australia\nkg:5506 is genre\nkg:6845 is metalcore", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?band\",\n    \"WHERE {\",\n    \"?band a kg:5941 ;\",\n    \"   kg:6595 kg:4070 ;\",\n    \"   kg:5506 kg:6845.\",\n    \"}\",\n    \"ORDER BY ?band\"\n  ]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P401 ?euroAdoption. \",\n    \"?country rdfs:label ?label FILTER (lang(?label) = 'en') }\"\n  ]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6256 ;\",\n             \"wdt:P38 ?currency .\",\n    \"{ ?country wdt:P38 wd:Q4916 } UNION { ?currency wdt:P270* wd:Q4916 }\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4911 is instance of\nkg:8401 is country\nkg:8909 is currency\nkg:8143 is euro", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country a kg:8401 ;\",\n    \"   kg:4911 ?currency .\",\n    \"{ ?currency kg:8909* kg:8143 } UNION { ?currency kg:8909 kg:8143 }\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?disorder WHERE {\",\n    \"?disorder wdt:P31 wd:Q82976; # Q82976 is the Wikidata item for 'Eating disorder'\",\n    \"  rdfs:label ?label FILTER (lang(?label) = 'en').\",\n    \"}\",\n    \"ORDER BY ?label\"\n  ]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q373822 is eating disorder", "response": "{\n  \"query\": [\n    \"SELECT ?disorder WHERE {\",\n    \"?disorder wdt:P279* wd:Q373822 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6601 is subclass of\nkg:7808 is eating disorder", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource a kg:7808 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P172 ?answer .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"FILTER (?answer = wd:Q15498603) \"\n    ,\"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q93284 is Marc Chagall\nwdt:P172 is ethnic group\nwd:Q7325 is Jewish people", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P172 wd:Q7325 .\",\n      \"?resource wdt:P648 wd:Q93284\" ]}\n \t\t\t\t\t\t\t\t\t  \t\t\t\t\t   "}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3776 is Marc Chagall\nkg:7566 is ethnic group\nkg:9691 is Jewish people", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:3776 ?chagall.\",\n    \"?chagall kg:9691 ?jewishPeople .\",\n    \"?jewishPeople kg:7566 ?ethnicGroup .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P2697 ?rank .\",\n    \"  FILTER(?rank = wd:Q134508) # FIFA World Ranking\",\n    \"  MIN(?rank) AS ?minRank\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83459 is Brazil national football team\np:P1352 is ranking\npq:P459 is determination method\nwd:Q180825 is FIFA World Rankings\nps:P1352 is ranking", "response": "{\n  \"query\": [\n    \"SELECT ?rank WHERE {\",\n    \"?team wdt:p:P1352 ?rank ;\",\n    \"   wdt:wdt:pw:P459 wd:Q180825 .\",\n    \"?team wdt:wdt:ps:P1352 ?lowestRank .\",\n    \"FILTER(?rank = ?lowestRank)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1028 is Brazil national football team\nkg:5752 is ranking\nkg:7102 is determination method\nkg:1734 is FIFA World Rankings\nkg:0187 is ranking", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?team kg:5752 ?rank .\",\n    \"?team kg:7102 kg:1734 .\",\n    \"?team kg:0187 ?lowestRank .\",\n    \"FILTER(?lowestRank = ?rank)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P136 wd:Q928097.\" , \"# Leonardo DiCaprio's film role\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424.\" , \"# Film or movie production\",\n      \"FILTER NOT EXISTS { ?film wdt:P577 [] }\" , \"# Exclude films without a release date\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q38111 is Leonardo DiCaprio", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 ;\",\n           \"wdt:P161 wd:Q38111 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2490 is instance of\nkg:5000 is film\nkg:4337 is cast member\nkg:0455 is Leonardo DiCaprio", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film (COUNT(?film) AS ?numberOfFilms)\",\n    \"WHERE {\",\n    \"?actor kg:isInstanceOf kg:4337 ;\",\n    \"   kg:starredIn ?film .\",\n    \"?film kg:isInstanceOf kg:5000 .\",\n    \"}\",\n    \"GROUP BY ?film\"\n  ]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wd:talk wdt:P3906|wdt:P1428|wdt:P570|wdt:P580|wdt:P582|wdt:P583|wdt:P585|wdt:P586|wdt:P587|wdt:P591|wdt:P594|wdt:P595|wdt:P625|wdt:P698|wdt:P700|wdt:P735|wdt:P767|wdt:P771|wdt:P786|wdt:P800|wdt:P847|wdt:P856|wdt:P860|wdt:P869|wdt:P872|wdt:P873|wdt:P874|wdt:P875|wdt:P876|wdt:P877|wdt:P878|wdt:P879|wdt:P880|wdt:P881|wdt:P882|wdt:P883|wdt:P884|wdt:P885|wdt:P886|wdt:P887|wdt:P888|wdt:P889|wdt:P890|wdt:P891|wdt:P892|wdt:P893|wdt:P894|wdt:P895|wdt:P896|wdt:P897|wdt:P898|wdt:P899|wdt:P900|wdt:P901|wdt:P902|wdt:P903|wdt:P904|wdt:P905|wdt:P906|wdt:P907|wdt:P908|wdt:P909|wdt:P910|wdt:P911|wdt:P912|wdt:P913|wdt:P914|wdt:P915|wdt:P916|wdt:P917|wdt:P918|wdt:P919|wdt:P920|wdt:P921|wdt:P922|wdt:P923|wdt:P924|wdt:P925|wdt:P926|wdt:P927|wdt:P928|wdt:P929|wdt:P930|wdt:P931|wdt:P932|wdt:P933|wdt:P934|wdt:P935|wdt:P936|wdt:P937|wdt:P938|wdt:P939|wdt:P940|wdt:P941|wdt:P942|wdt:P943|wdt:P944|wdt:P945|wdt:P946|wdt:P947|wdt:P948|wdt:P949|wdt:P950|wdt:P951|wdt:P952|wdt:P953|wdt:P954|wdt:P955|wdt:P956|wdt:P957|wdt:P958|wdt:P959|wdt:P960|wdt:P961|wdt:P962|wdt:P963|wdt:P964|wdt:P965|wdt:P966|wdt:P967|wdt:P968|wdt:P969|wdt:P970|wdt:P971|wdt:P972|wdt:P973|wdt:P974|wdt:P975|wdt:P976|wdt:P977|wdt:P978|wdt:P979|wdt:P980|wdt:P981|wdt:P982|wdt:P983|wdt:P984|wdt:P985|wdt:P986|wdt:P987|wdt:P988|wdt:P989|wdt:P99"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P106 is occupation\nwd:Q593644 is chemist", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q593644 ;\",\n           \"wdt:P106 wd:Q7416 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1806 is Margaret Thatcher\nkg:4297 is occupation\nkg:0500 is chemist", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1806 kg:4297 ?occupation .\",\n    \"  FILTER(?occupation = kg:0500)\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31/wdt:P279* wd:Q15406802 ;\", \"># State of the U.S. or a sub-state entity like county, city etc.\",\n    \"wdt:P31 wd:Q3624078 . # The property P31 is used to state that the item is an instance of something (in this case, a state)\",\n    \"?state wdt:P922 ?timezone .\",\n    \"wd:Q5626 wdt:P922 ?timezone . # Utah's Wikidata ID for checking the same time zone property\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n      \"?state wdt:P31 wd:Q35657 ;\",\n           \"wdt:P421 ?timeZone .\",\n      \"wd:Q829 wdt:P421 ?timeZone .\",\n    \"}\",\n    \"GROUP BY ?state\"\n  ]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2386 is Utah\nkg:4838 is located in time zone\nkg:9877 is instance of\nkg:7634 is U.S. state\nkg:4838 is located in time zone\nkg:2386 is Utah", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:7634 ;\",\n    \"   kg:4838 ?timeZone .\",\n    \"?state kg:9877 ?stateTimeZone .\",\n    \"kg:2386 kg:4838 ?utahTimeZone .\",\n    \"{ ?utahTimeZone rdf:type kg:9877 } UNION { ?utahTimeZone a kg:9877 }\",\n    \"FILTER (?stateTimeZone = ?utahTimeZone)\",\n    \"}\",\n    \"ORDER BY ?state\"\n  ]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P37 ?language .\",\n    \"{ SELECT (COUNT(?language) AS ?count) WHERE { ?country wdt:P37 ?language . } ORDER BY DESC(?count) LIMIT 1 }\",\n    \"} \"\n  ]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?country wdt:P31 wd:Q6256 ;\",\n               \"wdt:P37 ?language .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?country\",\n    \"ORDER BY DESC(COUNT(?language))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8689 is instance of\nkg:9409 is country\nkg:1656 is official language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country kg:isInstanceOf kg:9409 ;\",\n    \"(kg:1656 / kg:isInstanceOf)* ?language .\",\n    \"VALUES (?language) { <http://example.org/knowledge_graph/official_language> }\",\n    \"}\",\n    \"GROUP BY ?country\",\n    \"ORDER BY DESC(COUNT(?language))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?filmCharacter wdt:P31 wd:Q5742980; # Chewbacca as a film character\",\n    \"  wdt:P828 ?actor. # P828 is the property for 'portrayed by'\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51803 is Chewbacca\nwdt:P175 is performer", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?resource wdt:P175 ?actor ;\",\n    \"   wdsgn:label \\\"Chewbacca\\\"@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5480 is Chewbacca\nkg:2106 is performer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor kg:2106 kg:5480.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?library\",\n    \"WHERE {\",\n      \"?library wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?library wdt:P577 ?establishmentDate.\",\n      \"FILTER(?establishmentDate < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?library\",\n    \"WHERE {\",\n      \"?library wdt:P31 wd:Q7075 ;\",\n               \"wdt:P571 ?inceptionDate .\",\n      \"?inceptionDate xsd:dateTime ?date .\",\n      \"FILTER(?date < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime)\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is instance of\nkg:8682 is library\nkg:1036 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?library\",\n    \"WHERE {\",\n    \"?library a kg:8682 ;\",\n    \"   kg:1036 ?inceptionDate .\",\n    \"?inceptionDate kg:1400 -?date .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P279* wd:Q18606. # Find languages that are subtypes of Perl\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q9143 is programming language\nwdt:P737 is influenced by\nwd:Q42478 is Perl", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?language WHERE {\",\n\t\t\"?language wdt:P31 wd:Q9143 ;\",\n\t\t\"   wdt:P737 wd:Q42478 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1023 is instance of\nkg:5919 is programming language\nkg:3304 is influenced by\nkg:2765 is Perl", "response": "{\n \t  \t\t\t\t\t\"query\": [\". { \\n  ?language kg:isInstanceOf* kg:programmingLanguage . \\n  ?language kg:isInfluencedBy* kg:Perl . \\n}\"]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?mountAINamed mwdt:locatedIn ?state .\",\n    \"?mountAINamed wdt:P1893 \\\"Mount McKinley\\\" .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q130018 is Denali\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?mountain wdt:P131 wd:Q130018. \",\n    \"?mountain wdt:P625 ?coordinate. \",\n    \"?state wdt:P131 wd:Q30. \",\n    \"SERVICE wikibase:around {\",\n    \"?mountain wdt:P625 ?coordinate. \",\n    \"?state wdt:P625 ?stateCoordinate. \",\n    \"wikibase:radius 1000000\", \">// Adjust the radius as needed for precision\"\n   ,\"}\",\n    \"}\"\n  ]\n}\n\t\t  \t\t\t\t  \t\t\t\t\t  \t\t\t"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5195 is Denali\nkg:2752 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"  kg:5195 kg:isDenali ?mountain.\",\n    \"  ?mountain kg:isLocatedInTheAdministrativeTerritorialEntity ?state.\",\n    \"}\"\n  ]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q36754; # Ensure it is an airline\",\n    \"?airline wdt:P1429 ?skyteamMember. # Part of SkyTeam alliance\",\n    \"FILTER(?skyteamMember = wd:Q801). # Q801 is the SkyTeam alliance item in Wikidata\",\n    \"}\",\n    \"ORDER BY ?airline\"\n  ]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q212282 is SkyTeam", "response": "{\n  \"query\": [\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline wdt:P114 wd:Q212282 .\",\n    \"}\"\n  ]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2866 is airline alliance\nkg:2419 is SkyTeam", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline kg:isAirlineAlliance kg:2419.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P39 ?position ;\",\n             \"wdt:P102 wd:Q86475 .\", \"># Q86475 is the Wikidata item for Methodist.\",\n      \"?position wdt:P274* wd:Q119699.\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" "}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P140 is religion or worldview\nwd:Q33203 is Methodism", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q82955 ;\",\n              \"wdt:P140 wd:Q33203.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8888 is occupation\nkg:9878 is politician\nkg:3778 is religion or worldview\nkg:3252 is Methodism", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9878 ?politics .\",\n    \"?resource kg:3778 ?religion .\",\n    \"?religion kg:3252 true .\",\n    \"?resource kg:8888 ?occupation .\",\n    \"}\",\n    \"FILTER(?occupation = kg:9878)\"\n  ]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book\",\n    \"WHERE {\",\n      \"?author wdt:P50 ?work.\" ,\n      \"?work wdt:P577 \\\"The Fault in Our Stars\\\"@en.\" ,\n      \"?otherWork wdt:P50 ?author.\" ,\n      \"?otherWork wdt:P648 ?title.\" ,\n      \"FILTER(?otherWork != ?work)\" ,\n      \"?otherWork rdfs:label ?bookLabel\" ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY ASC(?bookLabel)\"\n  ]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658375 is The Fault in Our Stars\nwdt:P50 is author\nwdt:P50 is author\nwd:Q658375 is The Fault in Our Stars", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?book WHERE {\",\n\t\t\"?author wdt:P50 wd:Q658375 ;\",\n\t\t\"   wdt:P50 ?book .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5896 is The Fault in Our Stars\nkg:1268 is author\nkg:1268 is author\nkg:5896 is The Fault in Our Stars", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?book\",\n    \"WHERE {\",\n    \"?author kg:isAuthorOf kg:5896.\",\n    \"?otherBook kg:isAuthorOf ?author.\",\n    \"?otherBook a kg:Book.\",\n    \"?otherBook kg:title ?title.\",\n    \"FILTER(?otherBook != kg:5896)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P2049 ?highestRank .\",\n    \"FILTER(?highestRank = wd:Q186753) # Q186753 is the Wikidata item for 'Mount Everest'\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n             \"wdt:P2044 ?elevation .\",\n    \"}\",\n    \"ORDER BY DESC(?elevation) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is instance of\nkg:3850 is mountain\nkg:9375 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain kg:isInstanceOf kg:3850 ;\",\n    \"(SELECT ?highestMountain WHERE {\",\n    \"?highestMountain kg:isInstanceOf kg:3850 ;\",\n    \"?highestElevation kg:9375 ?value .\",\n    \"{ SELECT ?highestMountain (MAX(?value) as ?maxElevation) WHERE { ?mountain kg:isInstanceOf kg:3850 ; ?elevation kg:9375 ?value } GROUP BY ?mountain } ORDER BY DESC(?maxElevation) LIMIT 1 }\",\n    \".}\",\n    \"}\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?poet ?poetLabel WHERE {\",\n    \"  ?poet wdt:P69 ?book .\",\n    \"  ?poet wdt:P106 wd:Q69278. # Q69278 is the Wikidata ID for 'poet'\",\n    \"  FILTER NOT EXISTS { ?other wdt:P69 ?book . }\",\n    \"}\",\n    \"ORDER BY DESC(COUNT(?book)) LIMIT 1\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q49757 is poet\nwdt:P50 is author\nwdt:P31 is instance of\nwd:Q571 is book", "response": "{\n  \"query\": [\n    \"SELECT ?poet\",\n    \"WHERE {\",\n      \"?poet wdt:P106 wd:Q49757 ;\", \"# Find entities that are poets\",\n      \"?poet wdt:P31/wdt:P279* wd:Q571 .\", \"# Find entities that are instances of books or subclasses thereof\",\n      \"?work wdt:P50 ?poet ;\", \"# Find works by the poet\",\n      \"wdt:P31/wdt:P279* wd:Q571 . # Ensure the work is a book\"\n    ,\n    \"}\",\n    \"GROUP BY ?poet\",\n    \"ORDER BY DESC(COUNT(?work))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0120 is occupation\nkg:2954 is poet\nkg:1704 is author\nkg:0061 is instance of\nkg:7243 is book", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?poet kg:isOccupation kg:2954 ;\",\n    \"   kg:isAuthor ?book .\",\n    \"?book kg:instanceOf kg:7243 .\",\n    \"{ SELECT (COUNT(?book) AS ?count) WHERE { ?poet kg:isAuthor ?book . } ORDER BY DESC(?count) LIMIT 1 }\",\n    \"}\",\n    \"BIND (?poet AS ?resource)\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?language (SAMPLE(?influencedBy) AS ?influence) WHERE {\",\n    \"  wd:Q24068 wdt:P579 ?influenced.\",\n    \"  ?influenced wdt:P1344 ?language. # P1344 is the property for 'Influenced by programming language'\",\n    \"  FILTER NOT EXISTS { wd:Q24068 wdt:P579+ ?influenced } # Ensure we only get direct influences\",\n    \"} GROUP BY ?language\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2005 is JavaScript\nwdt:P737 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q2005 wdt:P737 ?influencedBy. \",\n    \"?influencedBy wdt:P31/wdt:P279* wd:Q2005. \",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5218 is JavaScript\nkg:8409 is influenced by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?js kg:5218 ?programmingLanguage .\",\n    \"?programmingLanguage kg:8409 ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?musician ?musicianLabel WHERE {\",\n    \"  ?musician wdt:P175 ?book .\",\n    \"  ?musician wdt:P108 ?occupation .\",\n    \"  FILTER(?occupation IN (wd:Q9246)) # Q9246 is the Wikidata item for 'Musician'\",\n    \"  SERVICE wikibase:count {\",\n    \"    ?musician wdt:P175 ?book .\",\n    \"  }\",\n    \"  BIND(wikibase:count AS ?bookCount)\",\n    \"}\",\n    \"ORDER BY DESC(?bookCount) LIMIT 1\"\n  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q639669 is musician\nwdt:P31 is instance of\nwd:Q571 is book\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?musician\",\n    \"WHERE {\",\n    \"?musician wdt:P106 wd:Q639669 ;\", \"# Find musicians\",\n    \"  wdt:P31/wdt:P279* ?occupation .\", \"# Ensure they are instances of a type of occupation\",\n    \"?book wdt:P50 ?musician ;\", \"# Books written by the musician\",\n    \"  wdt:P31 wd:Q571 .\", \"# Ensure these are books\",\n    \"}\",\n    \"GROUP BY ?musician\",\n    \"ORDER BY DESC(COUNT(?book))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4826 is occupation\nkg:0324 is musician\nkg:0683 is instance of\nkg:5954 is book\nkg:5686 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?musician kg:isoccupation ?occupation .\",\n    \"?musician kg:0324 ?occupation .\",\n    \"?book kg:5954 ?authorship .\",\n    \"?authorship kg:5686 ?musician .\",\n    \"?book kg:0683 ?resource .\",\n    \"}\",\n    \"GROUP BY ?resource\",\n    \"ORDER BY DESC(COUNT(?book))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?directedBy\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; //wdt/P161 ?actor.\",\n      \"?film wdt:P577 ?releaseDate.\",\n      \"?film wdt:P6380 ?director. # P6380 is a custom property for this query as of my last update, you may need to use the actual property ID if available in Wikidata\",\n      \"FILTER(?actor = wd:Q12459). # Clint Eastwood's Wikidata ID\",\n      \"?film wdt:P31 wd:Q11424. # Ensuring ?film is a film\",\n      \"}\",\n    \"ORDER BY DESC(?releaseDate)\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q43203 is Clint Eastwood\nwdt:P161 is cast member\nwd:Q43203 is Clint Eastwood", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P161 wd:Q43203 ;\", \"# Films starring Clint Eastwood\",\n      \"?film wdt:P57 wd:Q43203 .       # Clint Eastwood directed the film himself\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7571 is director\nkg:1404 is Clint Eastwood\nkg:2987 is cast member\nkg:1404 is Clint Eastwood", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:isCastMember kg:1404 ;\",\n    \"   kg:isDirector kg:1404 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?instrument\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q11424.\" , \"# musician\",\n      \"?resource wdt:P105 ?instrument.\",\n      \"?instrument rdfs:label ?instrumentLabel.\"\n    ,\n    \"FILTER (lang(?instrumentLabel) = 'en').\",\n    \"}\",\n    \"ORDER BY ?instrumentLabel\"\n  ]\n}\n"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154216 is Cat Stevens\nwdt:P1303 is instrument", "response": "{\n  \"query\": [\n    \"SELECT ?instrument\",\n    \"WHERE {\",\n    \"?catStevens wdt:P1303 ?instrument.\",\n    \"VALUES ?catStevens { wd:Q154216 }\",\n    \"}\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9496 is Cat Stevens\nkg:7890 is instrument", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?instrument\",\n    \"WHERE {\",\n    \"?catStevens kg:plays ?instrument .\",\n    \"}\",\n    \"VALUES ?catStevens { kg:9496 }\",\n    \"VALUES ?instrument { kg:7890 }\"\n  ]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q36754; # Check if the item is an airline\",\n    \"?airline wdt:P1439 \\\"Star Alliance\\\". # The airline is a member of Star Alliance\",\n    \"}\",\n    \"GROUP BY ?airline\"\n  ]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q189709 is Star Alliance", "response": "{\n  \"query\": [\n    \"SELECT ?airline (COUNT(?airline) AS ?count) WHERE {\",\n    \"?airline wdt:P114 wd:Q189709 .\",\n    \"}\",\n    \"GROUP BY ?airline\",\n    \"ORDER BY DESC(?count)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1615 is airline alliance\nkg:9546 is Star Alliance", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?airline (COUNT(?airline) AS ?numberOfMembers)\",\n    \"WHERE {\",\n    \"?airline kg:1615 kg:9546.\",\n    \"}\",\n    \"GROUP BY ?airline\"\n  ]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P57 ?author .\",\n      \"?resource rdfs:label \\\"The Hunger Games\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11679 is The Hunger Games\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q11679.\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0284 is The Hunger Games\nkg:4529 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book kg:0284 ?title .\",\n    \"?book kg:4529 ?author .\",\n    \"FILTER(?title = 'The Hunger Games')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?album WHERE {\",\n    \"  wd:Q123658 wdt:P1477 ?album. # Q123658 is the Wikidata ID for Elvis Presley\",\n    \"  ?album wdt:P361 ?firstLabel.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q59150527 is Elvis Presley's albums in chronological order\nwdt:P527 is has part(s)\nwdt:P577 is publication date\nwdt:P264 is record label", "response": "{\n  \"query\": [\n    \"SELECT ?albumLabel\",\n    \"WHERE {\",\n      \"?album wdt:P527 wd:Q59150527 ;\",\n      \"   wdt:P264 ?label .\",\n      \"?album wdt:P577 ?date .\",\n      \"FILTER(?date = MIN(?date))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1729 is Elvis Presley's albums in chronological order\nkg:4335 is has part(s)\nkg:9322 is publication date\nkg:4784 is record label", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?label WHERE {\",\n    \"  ?album kg:1729 ?chronologicalOrder .\",\n    \"  ?album kg:4335 ?hasPart .\",\n    \"  ?album kg:9322 ?publicationDate .\",\n    \"  ?album kg:4784 ?label .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P161 wd:Q9527 ;\", \"># Q9527 is the Wikidata ID for Christian Bale\",\n      \"?resource wdt:P31/wdt:P279* wd:Q13440899 .\", \"># Q13440899 is the Wikidata ID for film actor or actress\",\n      \"wd:Q16502 wdt:P31 wd:Q11424 ;\", \"># Q16502 is the Wikidata ID for Batman Begins, and Q11424 is the class for movie\",\n      \"?resource wdt:P161 wd:Q9527 .\",\n      \"wd:Q16502 wdt:P161 ?resource.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q166262 is Batman Begins\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P161 ?resource.\",\n      \"?movie wd:Q166262.\",\n      \"?resource wd:Q45772.\",\n    \"}\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2663 is Batman Begins\nkg:2232 is cast member\nkg:6261 is Christian Bale", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:isBatmanBegins ?value.\",\n    \"?movie kg:isCastMember ?person.\",\n    \"?person kg:isChristianBale ?value2.\",\n    \"FILTER(?value = \\\"true\\\"^^xsd:boolean && ?value2 = \\\"true\\\"^^xsd:boolean)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?residence\",\n    \"WHERE {\",\n      \"?primeMinister wdt:P39 wd:Q1246850.\" ,\"%s\",\n      \"?primeMinister wdt:P737 ?residence.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q844587 is Prime Minister of Spain\nwdt:P263 is official residence", "response": "{\n  \"query\": [\n    \"SELECT ?residence\",\n    \"WHERE {\",\n    \"?primeMinister wdt:P39 wd:Q844587 ;\",\n    \"   wdt:P263 ?residence .\",\n    \"}\"\n  ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6526 is Prime Minister of Spain\nkg:7770 is official residence", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?residence\",\n    \"WHERE {\",\n    \"?primeMinister kg:6526 ?primeMinisterLabel .\",\n    \"?primeMinister kg:7770 ?residence .\",\n    \"}\",\n    \"VALUES (?primeMinisterLabel) { (\\\"Prime Minister of Spain\\\") }\"\n  ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?actor wdt:P161 ?movie .\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424 .\" ,\",\"\n     ,\"OPTIONAL { ?actor wdt:P161 ?anotherMovie }\",\n      \"FILTER (COUNT(?movie) = (SELECT COUNT(?otherActor) WHERE { ?otherActor wdt:P161 ?movie }))\",\n    \"}\",\n    \"ORDER BY DESC(COUNT(?movie))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P161 ?actor .\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"(SELECT (COUNT(?movie) AS ?movieCount) WHERE { ?movie wdt:P161 ?actor. }) ?movieCount ?count\",\n    \"}\",\n    \"ORDER BY DESC(?count)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0813 is occupation\nkg:4987 is actor\nkg:5950 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie kg:castMember ?actor ;\",\n    \"   a kg:Movie .\",\n    \"}\",\n    \"GROUP BY ?actor\",\n    \"ORDER BY DESC(COUNT(?actor))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P37 ?language ;\",\n    \"(wdt:P37/wdt:P105)* ?language .\",\n    \"FILTER (COUNT(DISTINCT ?language) > 2)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?country wdt:P31 wd:Q6256 ;\",\n               \"wdt:P37 ?language .\",\n      \"FILTER (COUNT(DISTINCT ?language) > 2)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1484 is instance of\nkg:4940 is country\nkg:4371 is official language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country a kg:4940 ;\",\n    \"(kg:1484/^kg:1484)* kg:4371 .\",\n    \"FILTER (COUNT(DISTINCT ?language) > 2)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?song\",\n    \"WHERE {\",\n      \"?album wdt:P31/wdt:P279* wd:Q10684599 ;\", \"># Q10684599 is the class for 'Music album'\",\n      \"wdt:P577 ?releaseDate .\",\n      \"?song wdt:P645 ?album ;\", \"># P645 is the property for 'track on recording'\"\n      ,\n      \"FILTER(?releaseDate >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime && ?releaseDate <= \\\"1990-12-31T23:59:59Z\\\"^^xsd:dateTime)\",\n      \"?album wdt:P50 wd:Q746899.\" ,\"\\n# Q746899 is the entity for Bruce Springsteen\",\n    \"}\",\n    \"ORDER BY ?song\"\n  ]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7366 is song\nwdt:P577 is publication date\nwdt:P175 is performer\nwd:Q1225 is Bruce Springsteen", "response": "{\n  \"query\": [\n    \"SELECT ?song\",\n    \"WHERE {\",\n      \"?song wdt:P31 wd:Q7366 ;\",\n           \"wdt:P577 ?date ;\",\n           \"wdt:P175 wd:Q1225 .\",\n      \"FILTER(?date >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime && ?date <= \\\"1990-12-31T23:59:59Z\\\"^^xsd:dateTime)\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is instance of\nkg:4316 is song\nkg:3779 is publication date\nkg:4925 is performer\nkg:3345 is Bruce Springsteen", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?song\",\n    \"WHERE {\",\n    \"?song a kg:4316 .\",\n    \"?song kg:3779 ?date .\",\n    \"?song kg:4925 kg:3345 .\",\n    \"FILTER(?date >= \\\"1980-01-01\\\"^^xsd:date && ?date <= \\\"1990-12-31\\\"^^xsd:date)\",\n    \"}\"\n  ]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?tvShow\",\n    \"WHERE {\",\n    \"?tvShow wdt:P361 wd:Q7428950 ;\", \"># Q7428950 is the Wikidata ID for John Cleese\",\n    \"wdt:P31/wdt:P279* wd:Q11096989.\" ,\"%# Q11096989 is the Wikidata ID for Television series\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5398426 is television series\nwdt:P170 is creator\nwd:Q25014 is John Cleese\nwdt:P170 is creator\nwdt:P527 is has part(s)\nwd:Q25014 is John Cleese", "response": "{\n  \"query\": [\n    \"SELECT ?tvShow\",\n    \"WHERE {\",\n    \"?tvShow wdt:P31 wd:Q5398426 ;\",\n    \"   wdt:P170 wd:Q25014 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is instance of\nkg:1395 is television series\nkg:4844 is creator\nkg:3811 is John Cleese\nkg:4844 is creator\nkg:4191 is has part(s)\nkg:3811 is John Cleese", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?show\",\n    \"WHERE {\",\n    \"?show a kg:1395 ;\",\n    \"   kg:4844 ?creator .\",\n    \"?creator kg:3811 .\",\n    \"}\",\n    \"FILTER (?creator = kg:3811)\"\n  ]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P407 wd:Q183;\",\n      \"  p:P407 [ ps:P407 ?date; pq:P582 ?timestamp ].\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?timestamp)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q211 is Latvia\np:P463 is member of\nps:P463 is member of\nwd:Q458 is European Union\npq:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:p:P463 wd:Q211 ;\",\n      \"   wdt:ps:P463 wd:Q458 ;\",\n      \"   wdt:pq:P580 ?startDate.\",\n      \"?resource rdf:type wikibase item .\",\n    \"}\",\n    \"ORDER BY ASC(?startDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1273 is Latvia\nkg:0998 is member of\nkg:7272 is member of\nkg:6578 is European Union\nkg:8789 is start time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:1273 ?object1 .\",\n    \"?subject kg:0998 kg:6578 .\",\n    \"?subject kg:8789 ?object2 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P31 wd:Q5 .\" ,\"%s\",\n      \"?player wdt:P27 wd:Q468 .\" ,\"%s\",\n      \"?player wdt:P1080 ?birthPlace .\"\n    ,\"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q937857 is association football player\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q233 is Malta", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q937857 ;\",\n           \"wdt:P19 ?birthPlace ;\",\n           \"wdt:P17 wd:Q233.\",\n      \"?birthPlace wdt:P17 wd:Q233.\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5683 is occupation\nkg:5225 is association football player\nkg:7932 is place of birth\nkg:9554 is country\nkg:8345 is Malta", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:isoccupation/kg:isassociationfootballplayer ?role .\",\n    \"?player kg:placeofbirth ?birthPlace .\",\n    \"?birthPlace kg:country/kg:8345 kg:9554 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106* wd:Q134479.\" , \"# politician\",\n      \"?person wdt:P99 wd:Q1825.\" ,\"# Columbia University\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P69 is educated at\nwd:Q49088 is Columbia University", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q82955 ;\",\n              \"wdt:P69 wd:Q49088 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0795 is occupation\nkg:2450 is politician\nkg:5792 is educated at\nkg:4111 is Columbia University", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:isoccupation ?kg:2450 ;\",\n    \"   kg:iseducatedat ?kg:4111.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor ?birthday\",\n    \"WHERE {\",\n      \"?tvShow wdt:P31/wdt:P279* wd:Q1428650.\" , \"# Television show Charmed\",\n      \"?tvShow wdt:P161 ?actor.\" , \"# Actors of the television show\",\n      \"?actor wdt:P569 ?birthday.\" , \"# Birth date of the actor\",\n    \"}\",\n    \"ORDER BY ?actor\"\n  ]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\nwdt:P161 is cast member\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?actor ?actorLabel ?birthday ?birthdayLabel\",\n\t\t\"WHERE {\",\n\t\t\t\"?show wdt:P161 ?actor.\",\n\t\t\t\"?actor wdt:P569 ?birthday.\",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\",\n\t\t\"FILTER(?show = wd:Q162371)\",\n\t\t\"ORDER BY ASC(?actorLabel)\"\n\t]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Charmed\nkg:4319 is cast member\nkg:9526 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor ?birthday\",\n    \"WHERE {\",\n    \"?show kg:3786 \\\"Charmed\\\" ;\",\n    \"   kg:4319 ?actor .\",\n    \"?actor kg:9526 ?birthday .\",\n    \"}\",\n    \"VALUES ?actor {}\"\n  ]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization wdt:P31 wd:Q36747290 ;\", \"># Q36747290 is the item for 'Telecommunications company'\",\n    \"wdt:P17 wd:Q928 .\", \"># Q928 is the item for 'Belgium'\",\n    \"}\"\n  ]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q43229 is organization\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q43229 is organization\nwdt:P452 is industry\nwd:Q418 is telecommunication\nwdt:P17 is country\nwd:Q31 is Belgium", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization wdt:P31 wd:Q43229 ;\", \"# Instance of organization\",\n    \"   wdt:P452 wd:Q418 ;\" , \"# Industry is telecommunication\",\n    \"   wdt:P17 wd:Q31 . \" ,\"\\n# Located in Belgium\",\n    \"}\"\n  ]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9044 is instance of\nkg:1736 is organization\nkg:9044 is instance of\nkg:7648 is subclass of\nkg:1736 is organization\nkg:4913 is industry\nkg:1531 is telecommunication\nkg:8115 is country\nkg:9094 is Belgium", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization a kg:1736 ;\",\n    \"   kg:7648 ?industry ;\",\n    \"   kg:9044 ?location .\",\n    \"?industry kg:1531 kg:4913 .\",\n    \"?location kg:9094 kg:8115 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?lake\",\n    \"WHERE {\",\n      \"?lake wdt:P31/wdt:P279* wd:Q43685.\",\n      \"?lake wdt:P131* wd:Q9091.\",\n      \"FILTER(?lake != wd:Q9091).\"\n    ,\"}\"\n  ]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23397 is lake\nwdt:P17 is country\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"?lake wdt:P31 wd:Q23397 ;\",\n    \"   wdt:P17 wd:Q35 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1420 is instance of\nkg:5783 is lake\nkg:3411 is country\nkg:8492 is Denmark", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?lake\",\n    \"WHERE {\",\n    \"?lake a kg:5783 ;\",\n    \"   kg:1420 ?country .\",\n    \"{ VALUES ?country { kg:8492 } } UNION { ?lake kg:3411 kg:8492 }\",\n    \"}\",\n    \"ORDER BY ?lake\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1926 ?childCount .\",\n      \"?resource rdfs:label ?name FILTER (lang(?name) = 'en') .\",\n      \"FILTER (regex(str(?name), \\\"Eddie Murphy\\\", \\\"i\\\"))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43874 is Eddie Murphy\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q43874 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1572 is Eddie Murphy\nkg:3910 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:3910 ?child .\",\n    \"?person kg:1572 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?building\",\n    \"WHERE {\",\n      \"?building wdt:P31 wd:Q36758942 ;\", \"># Q36758942 is the Wikidata item for 'Building'\",\n      \"?building wdt:P131* wd:Q1085647 ;\", \"># Q1085647 is Kent\",\n      \"?building wdt:P175 ?style .\",\n      \"FILTER(?style = wd:Q29499) # Q29499 is the English Gothic architectural style\" ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q176483 is Gothic architecture\nwdt:P149 is architectural style\nwdt:P7959 is historic county\nwd:Q67479626 is Kent", "response": "{\n  \"query\": [\n    \"SELECT ?building\",\n    \"WHERE {\",\n      \"?building wdt:P149 wd:Q176483 ;\",\n                   \"wdt:P7959 wd:Q67479626 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5143 is subclass of\nkg:8740 is Gothic architecture\nkg:5026 is architectural style\nkg:8611 is historic county\nkg:6316 is Kent", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?building\",\n    \"WHERE {\",\n    \"?building a kg:5143.\",\n    \"?building kg:5026 kg:8740.\",\n    \"?building kg:8611 kg:6316.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P297 \\\"West African CFA franc\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q861690 is West African CFA franc", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?country wdt:P38 wd:Q861690 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9173 is currency\nkg:9648 is West African CFA franc", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country kg:usesCurrency ?currency .\",\n    \"?currency kg:isCurrency true .\",\n    \"?currency kg:9648 true .\",\n    \"}\"\n  ]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31/wdt:P279* wd:Q1186590. # Find entities that are instances of or subclasses of 'Holiday'\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q1445650 is holiday\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n    \"?holiday wdt:P31 wd:Q1445650 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2965 is subclass of\nkg:6347 is holiday\nkg:9668 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?holiday kg:issubclassOf* kg:6347 ;\",\n    \"   kg:isinstanceof ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the longest river?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the longest river?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river wdt:P31 wd:Q24906877 ;\", \"># Q24906877 is the ID for 'River'\",\n    \"wdt:P1003 ?name .\", \"># P1003 is the property for the name of a river\",\n    \"?river wdt:P1155 ?length .\", \"># P1155 is the property for 'longest river'\",\n    \"FILTER(?length = 'true')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization wdt:P577 ?date FILTER(YEAR(?date) = 1930).\",\n    \"?organization rdfs:label ?label FILTER(LANG(?label) = 'en').\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P571 is inception\nwdt:P31 is instance of\nwdt:P131 is located in the administrative territorial entity\nwd:Q43229 is organization", "response": "{\n  \"query\": [\n    \"SELECT ?organization\",\n    \"WHERE {\",\n      \"?organization wdt:P31 wd:Q43229 ;\",\n                   \"wdt:P571 \\\"1930-01-01T00:00:00Z\\\"^^xsd:dateTime .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is inception\nkg:5779 is instance of\nkg:9493 is located in the administrative territorial entity\nkg:3317 is organization", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?organization\",\n    \"WHERE {\",\n    \"?organization kg:5779 kg:3317 ;\",\n    \"           kg:9081 \\\"1930\\\"^^<http://www.w3.org/2001/XMLSchema#gYear> .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P735 'Angela Merkel'@en .\",\n    \"?person rdfs:label ?name .\",\n    \"FILTER(lang(?name) = 'en')\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1477 \\\"Angela Merkel\\\" .\",\n      \"?resource wdt:P31 wd:Q567 .\"\n    ,\"}\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7977 is Angela Merkel\nkg:7333 is birth name", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:7977 kg:7333 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person wd:P31/wd:P279* wd:Q5 .\", \"# Person is a human\",\n    \"?person wdt:P50 ?spouse .\", \"# ?person is married to ?spouse\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?person = wd:Q1234567) # Replace Q1234567 with the actual QID for Tom Cruise\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37079 is Tom Cruise\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q37079 .\",\n    \"?person wdt:P569 ?birth .\",\n    \"FILTER NOT EXISTS { ?person wdt:P570 ?death }\",\n    \"}\",\n    \"ORDER BY DESC(?birth)\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1550 is Tom Cruise\nkg:9184 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person kg:isTomCruise ;\",\n    \"   kg:isSpouse ?spouse .\",\n    \"}\"\n  ]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?weapon\",\n    \"WHERE {\",\n    \"?weapon wdt:P31 wd:Q41298; # weapon instance of weapon\",\n    \"?weapon wdt:P175* wd:Q6093. # Heckler & Koch as developer or manufacturer}\",\n    \"}\"\n  ]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P176 is manufacturer\nwd:Q152815 is Heckler & Koch\nwdt:P279 is subclass of\nwdt:P31 is instance of\nwd:Q15142889 is weapon family", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?weaponFamily WHERE {\",\n\t\t\"?weaponFamily wdt:P31 wd:Q15142889 ;\",\n\t\t\"   wdt:P176 wd:Q152815 .\"\n\t\t]}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5256 is manufacturer\nkg:4371 is Heckler & Koch\nkg:4662 is subclass of\nkg:6302 is instance of\nkg:5753 is weapon family", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?weaponFamily\",\n    \"WHERE {\",\n    \"?manufacturer kg:5256 kg:4371 ;\",\n    \"   ?weaponFamily kg:6302 ?weapon .\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?weaponFamily kg:4662 [] }\"\n  ]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n      \"?city wdt:P31 wd:Q515;\",\n      \"wdt:P625 ?coordinate;\",\n      \"wdt:P1082 ?area.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n      \"?city wdt:P17 wd:Q183 ;\", \"# City in Germany\",\n      \"?city wdt:P31/wdt:P279* wd:Q515 . # Ensure it is a city or subclass of city\",\n      \"FILTER NOT EXISTS { ?city wdt:P1082 ?population }\" ,\"\\n# Exclude entities that are not cities (e.g., villages, towns) based on population data\",\n    \"}\",\n    \"ORDER BY ASC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2369 is country\nkg:2341 is Germany\nkg:0421 is instance of\nkg:6572 is subclass of\nkg:7298 is city\nkg:7495 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city a kg:7295 ;\", \"># Corrected entity ID for city from kg:6572 to kg:7295 as per the provided mapping.\",\n    \"   kg:0421 ?area .\",\n    \"   FILTER(?area = \\\"smallest\\\"^^xsd:string) .\",\n    \"   ?city kg:2369 kg:2341 .\", \"># Corrected country ID from kg:2341 to kg:2369 as per the provided mapping.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515.\" , \"# City of Lisbon\",\n    \"?city wdt:P40 ?party.\" , \"# Ruling party in the city\",\n    \"FILTER(?city = wd:Q2689)\" ,\"# Filter for Lisbon\"\n    ,\"}\"\n  ]\n}\n"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\np:P39 is position held\nps:P39 is position held\nwd:Q43185970 is Mayor of Lisbon\npq:P580 is start time\nwdt:P102 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n      \"?mayor wdt:p39/wd:Q43185970 wd:Q5 .\",\n      \"?mayor wdt:pq:P580 ?start_time .\",\n      \"?mayor wdt:wtd:P102 ?party .\",\n      \"?party wdt:wdt:P31 wd:Q46046 .\", \"># Q46046 is the Wikidata item for Political party\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4480 is instance of\nkg:1012 is human\nkg:3232 is position held\nkg:0592 is position held\nkg:0692 is Mayor of Lisbon\nkg:7694 is start time\nkg:7386 is member of political party", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is_instance_of* kg:0592 ;\", \"># Mayor of Lisbon is a position held by the ruling party's representative in Lisbon.\",\n    \"   kg:member_of_political_party ?party .\",\n    \"?party kg:is_instance_of* kg:1012 . # Ensure the party is a political party (human)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?moon ?moonLabel WHERE {\",\n    \"  ?moon wdt:P31/wdt:P279* wd:Q2490685.\", \"># Find moons of Jupiter (Q2490685 is the entity for 'natural satellite of Jupiter')\",\n    \"  ?moon wdt:P2094 ?mass. # P2094 is the property for mass\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?mass)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q61702557 is moon of Jupiter\nwdt:P2067 is mass", "response": "{\n  \"query\": [\n    \"SELECT ?moon ?mass WHERE {\",\n    \"?moon wdt:P31 wd:Q61702557 ;\",\n    \"   wdt:P2067 ?mass .\",\n    \"}\",\n    \"ORDER BY ASC(?mass)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8904 is instance of\nkg:5838 is moon of Jupiter\nkg:6958 is mass", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?moon\",\n    \"WHERE {\",\n    \"?moon a kg:moonOfJupiter ;\",\n    \"   kg:mass ?mass .\",\n    \"}\",\n    \"ORDER BY ?mass\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?employeeCount .\",\n      \"?resource rdf:type wd:Q5 .\" ,\",\"\n     \t]}\n \t\t \t\t\t\t\t\t      \t\t\t\t"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q37156 wdt:P1128 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1608 is IBM\nkg:9125 is employees", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1608 kg:9125 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?episode WHERE {\",\n    \"  ?season wdt:P495 wd:Q123876. # Q123876 is the Wikidata item for The Sopranos season 1\",\n    \"  ?episode wdt:P105 ?season.\",\n    \"  FILTER(?episode != wd:Q123876) # Exclude the season page itself from the results\",\n    \"}\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P4908 is season\nwd:Q5274359 is The Sopranos, season 1", "response": "{\n  \"query\": [\n    \"SELECT ?episode ?episodeLabel\",\n    \"WHERE {\",\n      \"?season wdt:P4908 wd:Q5274359 ;\",\n              \"wdt:P8670 ?episode .\",\n      \"?episode rdfs:label ?episodeLabel .\",\n      \"?episode wdt:P31/wdt:P279* wd:Q119692939\" ,\n    \"}\",\n    \"ORDER BY ?episode\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8906 is season\nkg:9900 is The Sopranos, season 1", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?episode\",\n    \"WHERE {\",\n    \"?season kg:8906 kg:9900 ;\",\n    \"   kg:hasEpisode ?episode .\",\n    \"}\",\n    \"ORDER BY ?episode\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?newSeries ?oldSeries\",\n    \"WHERE {\",\n      \"?newSeries wdt:P31/wdt:P279* wd:Q6458 ;\", \"# Battlestar Galactica (2004 series)\",\n      \"  wdt:P495 ?numEpisodesNew .\",\n      \"?oldSeries wdt:P31/wdt:P279* wd:Q6458 ;\", \"# Battlestar Galactica (1978 series)\",\n      \"  wdt:P495 ?numEpisodesOld .\",\n      \"?newSeries wdt:P580 ?startNew .\",\n      \"?oldSeries wdt:P580 ?startOld .\",\n      \"FILTER(?startNew > ?startOld) # Ensure we are comparing the correct series\"\n    ,\n    \"BIND(?numEpisodesNew AS ?episodesNew)\",\n    \"BIND(?numEpisodesOld AS ?episodesOld)\",\n    \"FILTER(?episodesNew > ?episodesOld)\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q237072 is Battlestar Galactica\nwdt:P1113 is number of episodes\nwd:Q2367132 is Battlestar Galactica\nwdt:P1113 is number of episodes", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?newSeries ?oldSeries\",\n\t\t\"WHERE {\",\n\t\t\t\"?newSeries wdt:P31/wdt:P279* wd:Q237072 ;\",\n\t\t\t\"   wdt:P1113 ?newEpisodes .\",\n\t\t\t\"?oldSeries wdt:P31/wdt:P279* wd:Q2367132 ;\",\n\t\t\t\"   wdt:P1113 ?oldEpisodes .\",\n\t\t\t\"FILTER(?newEpisodes > ?oldEpisodes)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3093 is Battlestar Galactica\nkg:3046 is number of episodes\nkg:8797 is Battlestar Galactica\nkg:3046 is number of episodes", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?newEpisodes ?oldEpisodes\",\n    \"WHERE {\",\n    \"?newSeries kg:3046 ?newEpisodes .\",\n    \"?oldSeries kg:3046 ?oldEpisodes .\",\n    \"?newSeries a kg:3093 ;\",\n    \"   kg:8797 \\\"new Battlestar Galactica\\\" .\",\n    \"?oldSeries a kg:3093 ;\",\n    \"   kg:8797 \\\"old Battlestar Galactica\\\" .\",\n    \"}\",\n    \"FILTER(?newEpisodes > ?oldEpisodes)\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P361 wd:Q284957.\" ,\n      \"?film wdt:P1618 wd:Q284957.\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P162 wd:Q72792 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3534 is instance of\nkg:9460 is film\nkg:9880 is producer\nkg:6697 is Hal Roach", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film a kg:9460 .\",\n    \"?film kg:9880 ?producer .\",\n    \"?producer kg:3534 kg:6697 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie <http://schema.org/name> \\\"The Matrix\\\" ;\",\n    \"?movie <http://www雍正百科.com/ontology/role> ?role .\",\n    \"?role <http://www雍正百科.com/ontology/performedBy> ?actor .\",\n    \"?role <http://www雍正百科.com/ontology/name> \\\"Agent Smith\\\" .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t \t \t\t\t  \t\t \t \t"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83495 is The Matrix\np:P161 is cast member\npq:P453 is character role\nwd:Q2085488 is Agent Smith\nps:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie wdt:p:P161 ?castMember .\",\n    \"?castMember wdt:ps:P161 wd:Q2085488 ;\",\n    \"   wdt:pq:P453 \\\"Agent Smith\\\"@en .\",\n    \"FILTER(?movie = wd:Q83495).\",\n    \"?actor ?role ?castMember .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3604 is The Matrix\nkg:8155 is cast member\nkg:5723 is character role\nkg:2878 is Agent Smith\nkg:8583 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?actor kg:8155 ?role .\",\n    \"?role kg:5723 kg:2878 .\",\n    \"?actor kg:8583 ?movie .\",\n    \"?movie kg:3604 \\\"The Matrix\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n      \"?party wdt:P31 wd:Q1429086; # Party (politics) instance of party\",\n      \"?party wdt:P495 ?country. # Country of the party\",\n      \"?party wdt:P108 ?alignment. # Alignment property for political stance\",\n      \"wdt:Q37622 wdt:P108 wd:Q18700387. # Q18700387 is 'pro-European' in English\",\n      \"FILTER(?country = wd:Q9224) # Greece\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7278 is political party\nwdt:P17 is country\nwd:Q41 is Greece\nwdt:P1142 is political ideology\nwd:Q3781399 is pro-Europeanism", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?party\",\n\t\t\"WHERE {\",\n\t\t\t\"?party wdt:P31 wd:Q7278 ;\",\n\t\t\t\t\"wdt:P17 wd:Q41 ;\",\n\t\t\t\t\"wdt:P1142 wd:Q3781399.\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is instance of\nkg:9450 is political party\nkg:2994 is country\nkg:5177 is Greece\nkg:0782 is political ideology\nkg:4101 is pro-Europeanism", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?party a kg:9450 ;\",\n    \"   kg:isProEuropean true .\",\n    \"?party kg:isLocatedIn kg:2994 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader ?bandleaderLabel\",\n    \"WHERE {\",\n    \"?bandleader wdt:P106 wd:Q958473.\" ,\", wd:Q215616.\" ,\".\",\n    \"?bandleader wdt:P1006 ?trumpetPlayingDate.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?trumpetPlayingDate)\"\n  ]\n}\n\t\t\t \t \t\t\t\t\t\t      \t "}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q806349 is bandleader\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader\",\n    \"WHERE {\",\n    \"?bandleader wdt:P106 wd:Q806349 ;\", \"# Bandleader occupation\",\n    \"   wdt:P1303 wd:Q8338 .          # Plays trumpet instrument\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2407 is occupation\nkg:6431 is bandleader\nkg:4690 is instrument\nkg:9014 is trumpet", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?bandleader\",\n    \"WHERE {\",\n    \"?bandleader kg:2407 kg:6431.\",\n    \"?bandleader kg:4690 kg:9014.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q294759;\",\n    \"wdt:P1438 ?secondHighestRank;\",\n    \"rdfs:label ?label.\",\n    \"{ SELECT ?secondHighestRank WHERE { wd:Q2060 p:P1438 ?rankStatement. ?rankStatement ps:P1438 ?secondHighestRank. FILTER(?secondHighestRank != \\\"Q15749921\\\") } ORDER BY DESC(?secondHighestRank) LIMIT 1 }\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ?secondHighestRank ?label\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P30 is continent\nwdt:P361 is part of\nwd:Q2 is Earth", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n             \"wdt:P2044 ?elevation .\",\n    \"{ SELECT ?mountain ?elevation (SAMPLE(?continent) AS ?sample_continent) \",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n             \"wdt:P2044 ?elevation .\",\n             \"OPTIONAL { ?mountain wdt:P361 ?part_of . }\",\n             \"OPTIONAL { ?mountain wdt:P30 ?continent . }\",\n    \"} GROUP BY ?mountain ?elevation ORDER BY DESC(?elevation) LIMIT 2 OFFSET 1\",\n    \"}\",\n    \"?mountain wdt:P30 ?sample_continent .\",\n    \"}\"\n  ]\n}\n             \t\t  \t\t\t"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is instance of\nkg:6903 is subclass of\nkg:7953 is mountain\nkg:5532 is elevation above sea level\nkg:4491 is continent\nkg:7525 is part of\nkg:1867 is Earth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain kg:isInstanceOf kg:7953 ;\",\n    \"   kg:5532 ?elevation .\",\n    \"{ SELECT ?mountain2 (MAX(?elevation2) as ?maxElevation) WHERE {\",\n    \"?mountain2 kg:isInstanceOf kg:7953 ;\",\n    \"   kg:5532 ?elevation2 .\",\n    \"FILTER (?elevation2 != '8848') # Assuming the highest mountain is Mount Everest with an elevation of 8848m\",\n    \"} }\",\n    \"FILTER(?elevation < ?maxElevation)\",\n    \"}\",\n    \".\"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515;\" , \"># City instance of location\",\n    \"wdt:P625 ?location.\" , \"># Has location property\",\n    \"?city wdt:P476* wd:Q940\" , \"># Is part of Egypt and has the capital relation to Egypt\",\n    \".\",\n    \"?capital wdt:P31 wd:Q515;\" , \"># Capital instance of location\",\n    \"wdt:P625 ?location.\" , \"># Has location property\",\n    \"?capital wdt:P476* wd:Q940\" , \"># Is part of Egypt and has the capital relation to Egypt\",\n    \".\",\n    \"?city wdt:P131* wd:Q940.\" , \"># City is in Egypt\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?city != ?capital)\"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q79 is Egypt\nwdt:P1082 is population\nwd:Q79 is Egypt\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?city ?capital\",\n    \"WHERE {\",\n      \"?city wdt:P31 wd:Q515 ;\",\n           \"wdt:P17 wd:Q79 ;\",\n           \"wdt:P1082 ?population .\",\n      \"?capital wdt:P36 wd:Q79 ;\",\n           \"wdt:P17 wd:Q79 .\",\n    \"}\",\n    \"FILTER(?city = ?capital)\"\n  ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is instance of\nkg:5282 is city\nkg:2922 is country\nkg:1631 is Egypt\nkg:6034 is population\nkg:1631 is Egypt\nkg:6024 is capital", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city ?capital\",\n    \"WHERE {\",\n    \"?city a kg:5282 ;\",\n    \"   kg:1631 ?population .\",\n    \"?capital a kg:5282 ;\",\n    \"   kg:6024 ?country ;\",\n    \"   kg:1631 ?capitalPopulation .\",\n    \"?country a kg:2922 ;\",\n    \"   kg:1631 kg:1631 .\",\n    \"FILTER (?city = <http://example.org/knowledge_graph/Egypt/LargestCity> && ?capital = <http://example.org/knowledge_graph/Egypt/Capital>)\",\n    \"}\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?rocket WHERE {\",\n    \"  ?launch wdt:P1634 ?rocket. # P1634 is the property for 'rocket'\",\n    \"  ?launch wdt:P570 ?date. # Optional: filter by date if needed\",\n    \"  FILTER(?launch rdfs:label \\\"Baikonur\\\"@en) # Filter launches from Baikonur\"\n   ,\"}\",\n    \"LIMIT 100\" ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q41291 is rocket\nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?rocket\",\n    \"WHERE {\",\n      \"?rocket wdt:P31/wdt:P279* wd:Q41291 ;\",\n      \"   wdt:P1427 wd:Q177477 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9918 is subclass of\nkg:8403 is rocket\nkg:3908 is start point\nkg:9674 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?rocket\",\n    \"WHERE {\",\n    \"?rocket kg:8403 ?startPoint .\",\n    \"?startPoint kg:3908 kg:9674 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language\",\n    \"WHERE {\",\n    \"?language wdt:P31/wdt:P279* wd:Q6804529.\" , \"# Programming language class\",\n    \"wdt:P225 ?name. # Name of the programming language\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "How many programming languages are there?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q9143 is programming language", "response": "{\n  \"query\": [\n    \"SELECT ?language\",\n    \"WHERE {\",\n    \"?language wdt:P31 wd:Q9143 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1662 is instance of\nkg:0743 is subclass of\nkg:6439 is programming language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isInstanceOf* kg:6439 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q7879;\", \"># P106 is the property for 'occupation' and Q7879 is the chess player class identifier in Wikidata.\",\n      \"?player wdt:P530 ?birthPlace.\", \"># P530 is the property for 'place of birth'\",\n      \"?player wdt:P20 ?deathPlace.\" , \"# P20 is the property for 'place of death'\",\n      \"?birthPlace wikibase:claim PwikiProperty ?samePlace.\",\n      \"?deathPlace wikibase:claim PwikiProperty ?samePlace.\"\n    ,\n    \"FILTER(?birthPlace = ?deathPlace)\",\n    \"}\",\n    \"ORDER BY ?player\"\n  ]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P20 is place of death\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q10873124 is chess player", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q10873124 ;\", \"# Occupation is chess player\",\n      \"   wdt:P19 ?birthPlace ;\", \"# Place of birth\",\n      \"   wdt:P20 ?deathPlace .\", \"# Place of death\",\n      \"?birthPlace wdt:P279* wd:Q5 .\" ,\"# Ensure birth place is a location\"\n    ,\n    \"FILTER(?birthPlace = ?deathPlace)\" ,\"# Filter to only those who died in the same place they were born\",\n    \"} LIMIT 10\" ,\"# Limit results for brevity\"\n  ]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3982 is place of birth\nkg:3798 is place of death\nkg:1280 is occupation\nkg:0314 is subclass of\nkg:0871 is chess player", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:0314/kg:1280* ?occupation .\",\n    \"?player kg:3982 ?birthPlace .\",\n    \"?player kg:3798 ?deathPlace .\",\n    \"?birthPlace kg:3982 ?sameBirthDeathPlace .\",\n    \"?deathPlace kg:3982 ?sameBirthDeathPlace .\",\n    \"FILTER (?birthPlace = ?deathPlace)\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?company wdt:P8137 <http://www.wikidata.org/entity/Q24629>; # Q24629 is the Facebook entity in Wikidata\",\n    \"  dbo:ownedBy ?owner.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q380 is Meta Platforms\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"  wd:Q380 wdt:P127 ?owner.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8912 is Meta Platforms\nkg:3251 is owned by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"  kg:8912 kg:3251 ?owner .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q11424;\",\n    \"?movie wdt:P136 wd:Q9570.\" ,\n    \"FILTER(contains(lcase(str(?movie)), 'tom cruise'))\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P161 wd:Q37079 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4878 is cast member\nkg:0773 is Tom Cruise", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:isCastMember kg:0773.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?fort wikibase:claim P13 ?state .\",\n    \"?fort wikibase:sitelink enwiki:Fort_Knox .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q983650 is Fort Knox\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q35657 is U.S. state", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?fort wdt:P31 wd:Q983650 ;\",\n    \"   wdt:P131 ?state .\",\n    \"?state wdt:P31 wd:Q35657 .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2138 is Fort Knox\nkg:3236 is located in the administrative territorial entity\nkg:5211 is instance of\nkg:3368 is U.S. state", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"  kg:2138 kg:3236 ?location .\",\n    \"  ?location a kg:5211 ;\",\n    \"           kg:3368 ?state .\",\n    \"}\"\n  ]\n}"}
{"question": "Which mountains are higher than the Nanga Parbat?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which mountains are higher than the Nanga Parbat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"?mountain wdt:P324 ?height .\",\n    \"?mountain rdfs:label ?name FILTER(LANG(?name) = 'en') .\",\n    \"{ SELECT (MAX(?height) AS ?maxHeight) WHERE { wd:Nanga Parbat wdt:P324 ?nangaParbatHeight } }\",\n    \"FILTER(?height > ?maxHeight)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?song ?album WHERE {\",\n    \"  ?album wdt:P31/wdt:P279* wd:Q165084. # Find albums of the Ramones\",\n    \"  ?album wdt:P735 ?song. # B-sides are songs on an album\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?record wdt:P175 wd:Q483407 ;\",\n           \"p:P1433 ?statement .\",\n           \"?statement pq:P2868 wd:Q13432985 ;\",\n              \"wdt:P1433 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1681 is performer\nkg:6316 is Ramones\nkg:4288 is published in\nkg:4608 is subject has role\nkg:0022 is B-side", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?album kg:subjectHasRole ?song .\",\n    \"?song kg:hasRole kg:0022 .\",\n    \"?album kg:publishedIn ?performer .\",\n    \"?performer kg:isPerformer kg:6316 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1435 ?event .\",\n      \"?event p:P580 ?statement .\",\n      \"?statement ps:P580 ?date ;\",\n      \"   pq:P582 ?resource .\",\n      \"FILTER(?resource = wd:Q9768)\"\n    ,\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en')\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t \t"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53713 is Olof Palme\np:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:p:P570 ?date .\",\n      \"wd:Q53713 wdt:p:P570 ?date .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7630 is Olof Palme\nkg:4997 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4997 \\\"Olof Palme\\\" .\",\n    \"?resource kg:7630 ?dateOfDeath .\",\n    \"FILTER regex(str(?dateOfDeath), \\\"shot\\\", \\\"i\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P31 wd:Q5 .\" , \"># A resource is a type of instance (P31) of human (Q5)\",\n    \"?king wdt:P738 \\\"Rome\\\"@en .\" , \"># The king was associated with Rome (P738)\",\n    \"FILTER(?king != wd:Q6).\" , \"># Exclude the current monarch, if any, from the results\",\n    \"VALUES ?king { wd:Q12450 wd:Q12451 wd:Q12452 wd:Q12453 wd:Q12454 wd:Q12455 wd:Q12456 }\" , \"># Manually list the known kings of Rome\",\n    \"}\"\n  ]\n}\n\t\t        \t\t\t\t\t"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q55375123 is King of Rome", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P39 wd:Q55375123 .\",\n    \"}\",\n    \"LIMIT 7\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is position held\nkg:5425 is King of Rome", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king kg:isPositionHeld kg:9266.\",\n    \"?king kg:isKingOfRome kg:5425.\",\n    \"}\",\n    \"LIMIT 7\"\n  ]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P569 ?birthTime ;\", \"># Birth time (for born in Vienna, we need to filter by place of birth later)\",\n      \"?person wdt:P20 ?placeOfBirth .\", \"># Place of birth\",\n      \"?person wdt:P19 ?placeOfDeath .\", \"># Place of death (Berlin)\",\n      \"FILTER(?placeOfBirth = wd:Q3657) ,\", \"># Q3657 is the Wikidata ID for Vienna\",\n      \"?placeOfDeath = wd:Q248).\", \"># Q248 is the Wikidata ID for Berlin\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwd:Q64 is Berlin\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin\nwdt:P19 is place of birth\nwd:Q1741 is Vienna\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P19 wd:Q1741 ;\", \"# Place of birth is Vienna\",\n      \"?person wdt:P20 wd:Q64 .   #\" ,\"Place of death is Berlin\"\n    ,\"}\"\n  ]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4248 is Berlin\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin\nkg:6565 is place of birth\nkg:5207 is Vienna\nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"{\",\n    \"  ?person kg:6565/kg:4988 kg:5207 .\", \"# Person born in Vienna\",\n    \"  ?person kg:4789/kg:4988 kg:4248 .  # Person died in Berlin\",\n    \"}\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?Luke wdt:P31 wd:Q5.\" ,\n      \"?Luke wdt:P22 ?father .\" ,\n      \"?father wdt:P738 wd:Q10496.\" ,\n      \"?resource wd:P31 wd:Q5; wdt:P22 ?father.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12206942 is Darth Vader\nwdt:P40 is child\nwd:Q51746 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q12206942 wdt:P40 ?child.\",\n      \"?child wdt:P40 wd:Q51746.\",\n      \"VALUES ?child { wd:Q51746 }\",\n      \"FILTER(?child = wd:Q51746)\",\n    \"}\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1984 is Darth Vader\nkg:1692 is child\nkg:5502 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?child kg:1692 ?father .\",\n    \"?father kg:1984 ?resource .\",\n    \"?child kg:5502 ?Luke_Skywalker .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery\",\n    \"WHERE {\",\n    \"?brewery wdt:P31/wdt:P279* wd:Q48605.\",\n    \"?brewery wdt:P17 wd:Q360588.\"\n   \t]}\n \t\t \t \t \t \t \t \t \t \t "}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131734 is brewery\nwdt:P17 is country\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?brewery\",\n    \"WHERE {\",\n      \"?brewery wdt:P31 wd:Q131734 ;\",\n               \"wdt:P17 wd:Q408 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2155 is instance of\nkg:5909 is brewery\nkg:1368 is country\nkg:6518 is Australia", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?brewery\",\n    \"WHERE {\",\n    \"?brewery a kg:5909 ;\",\n    \"   kg:2155 ?country .\",\n    \"{ VALUES ?country { kg:6518 } }\",\n    \"}\",\n    \"ORDER BY ?brewery\"\n  ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P345 ?budget .\", \"# P345 is used for budget in Wikidata\",\n      \"?film wdt:P175 wd:Q6809 .\", \"# P175 is the production company property, and Q6809 is the Wikidata ID for Steven Spielberg\",\n      \"?film wdt:P121 ?productionCompany .\", \"# P121 is used to link films with their producers, but in this context, it's a way to ensure we're looking at films by Spielberg\",\n      \"FILTER(?budget >= 80000000) .\", \"# Convert $80 million to the appropriate unit for Wikidata (USD)\",\n      \"?film a wd:Q11424.\" ,\"\\n# Q11424 is the item identifier for films in Wikidata\",\n    \"}\",\n    \"ORDER BY ?budget\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q8877 is Steven Spielberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P2130 is cost", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424 ;\", \"# Film instance of film\",\n\t\t\t\t\"wdt:P279* wd:Q8877 ;\", \"# Produced by Steven Spielberg\",\n\t\t\t\t\"wdt:P162 wd:Q8877 ;\", \"# Alternative producer property for Steven Spielberg\",\n\t\t\t\t\"wdt:P2130 ?budget.\", \"# Cost of the film\",\n\t\t\t\"?budget wikibase:quantityAmount ?amount ;\",\n\t\t\t\t\"wikibase:quantityUnit <http://www.wikidata.org/wiki/Q96457>.\" ,\"\\n# USD currency for budget amount\",\n\t\t\t\"?amount FILTER(?amount >= 80000000)\" ,\"\\n# Filter films with a budget of at least $80 million\"\n\t\t,\"}\",\n\t\t\"LIMIT 100\" ,\"\\n# Limit the results to 100 items for demonstration purposes\"\n\t]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2377 is producer\nkg:7786 is Steven Spielberg\nkg:2955 is instance of\nkg:5774 is subclass of\nkg:1418 is film\nkg:0495 is cost", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:2955 kg:1418 ;\", \"# Film is an instance of film\",\n    \"   kg:2377 kg:7786 .\", \"# Steven Spielberg is the producer of the film\",\n    \"Optional { ?film kg:0495 ?budget . } # Optional property for budget check\",\n    \"FILTER(?budget >= 80000000) # Filter films with a budget of at least $80 million\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club\",\n    \"WHERE {\",\n    \"?club wdt:P31 wd:Q928765.\" , \"# Check if the resource is a soccer club\",\n    \"?club wdt:P17 wd:Q30.\" , \"# The club is located in Spain\",\n    \".}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P17 is country\nwd:Q29 is Spain", "response": "{\n  \"query\": [\n    \"SELECT ?club\",\n    \"WHERE {\",\n      \"?club wdt:P31 wd:Q476028 ;\",\n           \"wdt:P17 wd:Q29.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1869 is instance of\nkg:7742 is association football club\nkg:9070 is country\nkg:2172 is Spain", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?club\",\n    \"WHERE {\",\n    \"?club a kg:7742 ;\",\n    \"   kg:9070/kg:2172 \\\"Spain\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n    \"?film <http://www.wikidata.org/prop/direct/wdt:P161> ?actor .\",\n    \"?film <http://www.wikidata.org/prop/direct/wdt/P1372> ?filmProducer .\",\n    \"FILTER(?actor = wd:Q95408)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q37876 is Natalie Portman\nwdt:P162 is producer", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film ?producer\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424 ;\",\n\t\t\t\t\"wdt:P161 wd:Q37876 ;\",\n\t\t\t\t\"wdt:P162 ?producer.\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5819 is instance of\nkg:0320 is film\nkg:8271 is cast member\nkg:1332 is Natalie Portman\nkg:6761 is producer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0320 ?castMember .\",\n    \"?castMember kg:8271 kg:1332 .\",\n    \"?film kg:6761 ?producer .\",\n    \"?producer a kg:5819 .\",\n    \"}\",\n    \"VALUES ?resource { ?producer }\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?breed\",\n    \"WHERE {\",\n    \"?breed wdt:P279* wd:Q142;\",\n    \"wdt:P31/wdt:P279* wd:Q142.\",\n    \"FILTER(CONTAINS(LCASE(str(?breed)), 'german shepherd'))\",\n    \"}\",\n    \"ORDER BY ?breed\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q38280 is German Shepherd\nwd:Q38280 is German Shepherd", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"?breed wdt:P279* wd:Q38280 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1311 is subclass of\nkg:3722 is German Shepherd\nkg:3722 is German Shepherd", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?breed\",\n    \"WHERE {\",\n    \"?breed a kg:3722.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the heaviest player of the Chicago Bulls?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the heaviest player of the Chicago Bulls?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P1477 ?weight .\",\n    \"  ?player wdt:P30 wd:Q95627 .\",\n    \"  FILTER NOT EXISTS { ?otherPlayer wdt:P1477 ?otherWeight . ?otherPlayer wdt:P30 wd:Q95627 . ?otherWeight > ?weight }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?language WHERE {\",\n    \"  wd:Estonia wdt:P31/wdt:P279* ?languageCategory.\",\n    \"  ?languageCategory wdt:P105 ?language.\",\n    \"}\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?language wdt:P2936 wd:Q191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6317 is Estonia\nkg:3495 is language used", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?language\",\n    \"WHERE {\",\n    \"?place kg:6317 ?estonia .\",\n    \"?place kg:3495 ?language .\",\n    \"}\",\n    \"VALUES ?estonia { http://example.org/places/Estonia }\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6047 ;\", \"># Q6047 is the item for country in Wikidata\",\n    \"wdt:P1082 ?area .\", \"># P1082 is the property for area of a country\",\n    \"?country rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3624078 is sovereign state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q3624078 ;\",\n    \"   wdt:P2046 ?area .\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5506 is instance of\nkg:9393 is subclass of\nkg:1310 is sovereign state\nkg:0702 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country a kg:1310 ;\",\n    \"   kg:0702 ?area .\",\n    \"\",\n    \"VALUES ?country { kg:5506 } # Assuming kg:5506 is the resource for 'Russia'\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P131* wd:Q30 ;\", \"># Q30 is the USA\"\n   ,\"wdt:P17 ?country ;\", \"># P17 links to country\"\n    ,\"wdt:P131* wd:Q30 .\", \"># Confirm it's in the USA\"\n   ,\"?city wdt:P131* wd:Q8982 ;\", \"># Q8982 is the largest city property\"\n    ,\"wdt:P31/wdt:P279* ?typeFilter .\", \"># Filter by instance of city or subclass\"\n    ,\"?typeFilter wdt:P279* wd:Q515 .\" ,\"\\n\" ,\"\\n\" ,\"FILTER(?city != wd:Q8982) # Exclude the property itself from results\"\n    ,\"}\"\n  ]\n}\n\t\t        \t\t\t\t\t  \t\t\t"}
{"question": "What is the largest city in america?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q30 is United States of America\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\",\n    \"   wdt:P17 wd:Q30 ;\",\n    \"   wdt:P1082 ?population .\",\n    \"FILTER(?population = (SELECT MAX(?pop) WHERE { ?city2 wdt:P31 wd:Q515 ; wdt:P17 wd:Q30 ; wdt:P1082 ?pop }))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0643 is country\nkg:9284 is United States of America\nkg:3777 is instance of\nkg:9906 is subclass of\nkg:5230 is city\nkg:0522 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city kg:3777 ?largestCity.\",\n    \"?city kg:0522 ?population.\",\n    \"?city a kg:5230.\",\n    \"?city kg:0643 kg:9284.\",\n    \"FILTER NOT EXISTS { ?otherCity kg:3777 ?largestCity. }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?pope ?popeLabel\",\n    \"WHERE {\",\n      \"?pope wdt:P31 wd:Q5 .\" ,\"%s\",\n      \"?pope wdt:P807 ?vaticanTelevision .\" ,\n      \"?vaticanTelevision wdt:P642 \\\"Vatican Television\\\"@en .\" ,\n      \"?pope rdfs:label ?popeLabel .\",\n      \"FILTER (lang(?popeLabel) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1471987 is Vatican Media\nwdt:P571 is inception\nwdt:P39 is position held\nwd:Q19546 is pope\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P39 wd:Q19546 ;\",\n              \"p:P39 ?positionStatement .\",\n      \"?positionStatement ps:P39 wd:Q1471987 ;\",\n              \"(pq:P580|pq:P582) ?date .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4965 is Vatican Media\nkg:9396 is inception\nkg:5157 is position held\nkg:4968 is pope\nkg:9086 is position held\nkg:2915 is position held\nkg:4968 is pope\nkg:3118 is start time\nkg:1891 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?pope kg:5157 ?position ;\",\n    \"   kg:9396 ?vaticanMedia .\",\n    \"?vaticanMedia kg:3118 ?startTime .\",\n    \"FILTER (?position = kg:4968 && ?vaticanMedia = kg:4965)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Ceres wdt:P245 ?discovery.\",\n    \"  ?discovery wd:type wikibase-item.\",\n    \"  ?discovery rdfs:label ?name FILTER(LANG(?name) = 'en')\",\n    \"  BIND(wd:\" ,\"?discovery\" , \"\\\" AS ?resource)\",\n    \"}\",\n    \"ORDER BY ASC(?name)\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q596 is Ceres\nwdt:P61 is discoverer or inventor", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer\",\n    \"WHERE {\",\n    \"?resource wdt:P61 ?discoverer ;\",\n    \"   wdsg:instanceOf wd:Q596 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0356 is Ceres\nkg:8941 is discoverer or inventor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isCeres ?ceres .\",\n    \"?ceres kg:isDiscovererOrInventor ?discoverer .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P1027 'Netherlands' .\",\n    \"?king rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55 is Netherlands\nwdt:P35 is head of state\nwdt:P39 is position held\nwd:Q2045066 is King of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P35 wd:Q55 ;\",\n    \"   wdt:P39 wd:Q2045066 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7804 is Netherlands\nkg:9773 is head of state\nkg:8977 is position held\nkg:8219 is King of the Netherlands", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8977 kg:7804 ;\",\n    \"   kg:9773 kg:8219.\",\n    \"}\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q16493 wdt:P31/wdt:P279* ?resource.\",\n    \"  FILTER(?resource IN (wd:Q11504))\",\n    \"}\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q134041 is cola\nwdt:P279 is subclass of\nwd:Q40050 is drink", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P279* wd:Q40050 ;\",\n           \"rdfs:label ?label .\",\n      \"FILTER(LANG(?label) = 'en') .\",\n      \"VALUES ?resource { wd:Q134041 }\",\n    \"}\"\n  ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3198 is cola\nkg:1933 is subclass of\nkg:6616 is drink", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?cola kg:isCola ?colasubclass .\",\n    \"?colasubclass rdfs:subClassOf* kg:isDrink .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater\",\n    \"WHERE {\",\n      \"?chancellor wdt:P106 wd:Q78549;\",\n                  \"wdt:P39 wd:Q2517648.\" , \"# Angela Merkel and Germany Chancellorship\",\n      \"?university wdt:P99 ?chancellor;\",\n                   \"wdt:P1578 wd:Q1028696.\" , \"# P1578 is the property for chancellor of Germany\",\n      \"?almaMater wdt:P69 ?university.\" ,\n                  \"# P69 is the property for alma mater\",\n      \"?almaMater rdfs:label ?label FILTER (lang(?label) = 'en').\" , \"# Filter to get English label\"\n    ,\n    \"}\",\n    \"ORDER BY ASC(?label)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater\",\n    \"WHERE {\",\n      \"?chancellor wdt:P69 ?almaMater .\",\n      \"?chancellor wdt:P31 wd:Q567 .\",\n      \"?almaMater wdt:P279* wd:Q3918 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5316 is Angela Merkel\nkg:7545 is educated at\nkg:7553 is instance of\nkg:6836 is subclass of\nkg:2365 is university", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?almaMater\",\n    \"WHERE {\",\n    \"?chancellor kg:7545 ?education.\",\n    \"?education a kg:2365 ;\",\n    \"   kg:7553 ?almaMater .\",\n    \"}\",\n    \"FILTER(?chancellor = kg:5316)\"\n  ]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book ?author\",\n    \"WHERE {\",\n      \"?book wdt:P629 'Les Piliers de la terre'@fr ;\", \"# Book title in French language\",\n      \"?book wdt:P577 ?publicationDate .\", \"# Optional: Include publication date if needed\",\n      \"?author wdt:P50 ?book .\", \"# Author is associated with the book as an author\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?book ?author\",\n    \"WHERE {\",\n      \"?book wdt:P50 ?author ;\",\n           \"wdt:P31 wd:Q1163227 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is The Pillars of the Earth\nkg:5137 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book kg:0606 \\\"Les Piliers de la terre\\\" ;\",\n    \"   kg:5137 ?author .\",\n    \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q950487; # Yeti Airlines as a company\",\n    \"  wdt:P131 ?country. # The country where the airline operates\",\n    \"?airport wdt:P17 ?country. # Airports in that country\",\n    \"?airport wdt:P269 ?airline. # Airports served by Yeti Airlines\",\n    \"}\",\n    \"ORDER BY ?airport\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1480118 is Yeti Airlines\nwdt:P113 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airport wdt:P113 wd:Q1480118 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2721 is Yeti Airlines\nkg:4798 is airline hub", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?airport\",\n    \"WHERE {\",\n    \"?airport kg:isServedBy kg:2721 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace\",\n    \"WHERE {\",\n    \"?birthPlace wdt:P19 ?birthplaceOfGoethe .\",\n    \"?birthPlace rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5879 is Johann Wolfgang von Goethe\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthplace WHERE {\",\n    \"wd:Q5879 wdt:P19 ?birthplace.\",\n    \"}\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8492 is Johann Wolfgang von Goethe\nkg:1815 is place of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?birthplace\",\n    \"WHERE {\",\n    \"  kg:8492 kg:1815 ?birthplace.\",\n    \"}\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P580 ?cubanMissileCrisisDate .\",\n    \"  ?event wdt:P580 ?bayOfPigsInvasionDate .\",\n    \"  FILTER(?cubanMissileCrisisDate < ?bayOfPigsInvasionDate)\",\n    \"  VALUES ?resource { wd:Q162473 wd:Q19061 }\",\n    \"}\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128160 is Cuban Missile Crisis\nwdt:P582 is end time\nwd:Q191721 is Bay of Pigs invasion\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q128160 wdt:P582 ?endCubanMissileCrisis.\",\n    \"wd:Q191721 wdt:P580 ?startBayOfPigsInvasion.\",\n    \"?resource wd:type wd:Event\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t \t"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is Cuban Missile Crisis\nkg:0497 is end time\nkg:0984 is Bay of Pigs invasion\nkg:5449 is start time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?event1 kg:6047 ?end1 ;\",\n    \"   kg:5449 ?start1 .\",\n    \"?event2 kg:0497 ?end2 ;\",\n    \"   kg:0984 ?start2 .\",\n    \"\",\n    \"FILTER (?start1 < ?start2)\",\n    \"?resource ?p ?o .\",\n    \"}\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?ingredient\",\n    \"WHERE {\",\n      \"?cake wdt:P31/wdt:P279* wd:Q2420685 ;\", \"># Q2420685 is the item for carrot cake in Wikidata\",\n      \"wdt:P118 ?recipe .\",\n      \"?recipe wdt:P279* ?ingredient .\",\n      \"?ingredient a ?type.\"\n    ,\n    \"FILTER NOT EXISTS { ?cake wdt:P31/wdt:P279* wd:Q64502 }\" ,\"\\n# Q64502 is the item for dessert in Wikidata, to exclude desserts that are not carrot cake\",\n    \"}\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q656071 is carrot cake\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"?cake wd:P527 ?hasPart .\",\n    \"?cake wd:Q656071 .\",\n    \"?hasPart rdfs:label ?ingredientLabel .\",\n    \"FILTER (lang(?ingredientLabel) = 'en')\",\n    \"}\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4040 is carrot cake\nkg:6712 is has part(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?ingredient\",\n    \"WHERE {\",\n    \"?carrotCake kg:6712 ?hasPart.\",\n    \"?hasPart kg:type ?ingredient.\",\n    \"FILTER(?carrotCake = kg:4040)\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1427 'Wikipedia creation'.\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t      \t \t"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?creator\",\n    \"WHERE {\",\n    \"?item wdt:P112 ?creator .\",\n    \"?item wd:Q52 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2440 is Wikipedia\nkg:0699 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?creator\",\n    \"WHERE {\",\n    \"  kg:2440 kg:0699 ?creator.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q6152290; # Q6152290 is the mountain class\",\n    \"?mountain wdt:P17 wd:Q184; # Germany\",\n    \"?mountain wdt:P131 wd:Q1032459; # Saxony\",\n    \"?mountain wdt:P226 ?height. # P226 is the property for elevation or height\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER NOT EXISTS { ?mountain wdt:P31 wd:Q6157489 . } # Q6157489 is the class for artificial mountains }\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P131 is located in the administrative territorial entity\nwd:Q1202 is Saxony\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n    \"   wdt:P131 wd:Q1202 ;\",\n    \"   wdt:P2044 ?elevation.\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8166 is instance of\nkg:8572 is mountain\nkg:6404 is located in the administrative territorial entity\nkg:7885 is Saxony\nkg:5619 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain a kg:8572 ;\",\n    \"   kg:6404 ?state ;\",\n    \"   kg:7885 kg:6404 'Saxony' .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?city wdt:P17 ?country ;\",\n    \"wdt:P363 \\\"Mecca\\\"@en .}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5806 is Mecca\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"?mecca wdt:P31 wd:Q5806 ;\",\n    \"   wdt:P131* ?country .\",\n    \"FILTER(?country instanceOf wd:Q6256).\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9593 is Mecca\nkg:2857 is located in the administrative territorial entity\nkg:3525 is instance of\nkg:9937 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?mecca kg:2857 ?administrativeTerritorialEntity .\",\n    \"?administrativeTerritorialEntity a kg:3525 ;\",\n    \"   kg:9937 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?episode wdt:P361 ?actor .\",\n    \"?episode wdt:P3450 <http://www.wikidata.org/entity/Q12987> .\",\n    \"?episode wdt:P577 ?date .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?episode wdt:P361 ?otherActor . FILTER(?actor != ?otherActor) }\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t "}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5620660 is Gus Fring\npq:P453 is character role\nps:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?episode pq:P453 wd:Q5620660 ;\",\n         \"ps:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3702 is Gus Fring\nkg:1248 is character role\nkg:8170 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1248 kg:3702 .\",\n    \"?resource kg:8170 ?actor .\",\n    \"FILTER(?actor = \\\"Gus Fring\\\"@en)\",\n    \"}\"\n  ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?country WHERE {\",\n    \"  wd:Nile wdt:P276 ?source.\",\n    \"  ?source wdt:P17 ?country.\",\n    \"}\"\n  ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3392 is Nile\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?river wdt:P885 wd:Q3392 ;\",\n    \"   wdt:P17 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0768 is Nile\nkg:2584 is origin of the watercourse\nkg:0470 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?nile kg:2584 ?origin.\",\n    \"?origin kg:0470 ?country.\",\n    \"?nile kg:0768 ?nileLabel.\",\n    \"FILTER(lang(?nileLabel) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadium\",\n    \"WHERE {\",\n    \"?stadium wdt:P31 wd:Q928764.\" , \"># Q928764 is the Wikidata item for Stadium or Sports venue\",\n    \"?stadium wdt:P131* wd:Q344. # Q344 is Spain\",\n    \"OPTIONAL { ?stadium wdt:P1145 ?largestStadium } # P1145 is a property that can be used to indicate the largest stadium\",\n    \"FILTER (!BOUND(?largestStadium) || ?stadium = ?largestStadium)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q483110 is stadium\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q483110 is stadium\nwdt:P17 is country\nwd:Q29 is Spain\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium\",\n    \"WHERE {\",\n    \"?stadium wdt:P31 wd:Q483110 ;\",\n             \"wdt:P17 wd:Q29 ;\",\n             \"wdt:P1083 ?capacity .\",\n    \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium wdt:P31 wd:Q483110 ; wdt:P17 wd:Q29 ; wdt:P1083 ?capacity } GROUP BY ?stadium } FILTER (?stadium = ?stadium && ?capacity = ?maxCapacity)\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3639 is instance of\nkg:6981 is stadium\nkg:3639 is instance of\nkg:3018 is subclass of\nkg:6981 is stadium\nkg:4997 is country\nkg:8158 is Spain\nkg:4254 is maximum capacity", "response": "{\n  \"query\": [\n    \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\n    \"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\",\n    \"SELECT ?stadium\",\n    \"WHERE {\",\n      \"?stadium rdf:type kg:6981 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\",\n      \"FILTER (?stadium rdfs:subClassOf* kg:8158)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:8158\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:8158\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:8158\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:8158\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as ?maxCapacity) WHERE { ?stadium rdf:type kg:6981 ; kg:4254 ?capacity . } GROUP BY ?stadium } FILTER (?capacity = ?maxCapacity)\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:8158\"\n    ,\n      \"?stadium rdfs:subClassOf* kg:4997\"\n    ,\n      \"?stadium rdf:type kg:3018\"\n    ,\n      \"?stadium rdf:type kg:3639\"\n    ,\n      \"?stadium rdf:type kg:3639 ;\",\n               \"kg:4254 ?capacity .\",\n      \"{ SELECT ?stadium (MAX(?capacity) as"}
{"question": "How large is the area of UK?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?area WHERE {\",\n    \"  wd:Q2418 wdt:P2046 ?area.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q145 is United Kingdom\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?area\",\n    \"WHERE {\",\n    \"?uk wdt:P31/wdt:P279* wd:Q145 ;\",\n    \"   wdt:P2046 ?area .\",\n    \"}\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0895 is United Kingdom\nkg:6864 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6864 ?area .\",\n    \"?resource kg:0895 true.\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikadora.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q92865 wdt:P170 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"wd:Q2695156 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4262 is Batman\nkg:4214 is creator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4214 ?creator .\",\n    \"?creator kg:4262 \\\"Batman\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wd:talk P31 wd:Q5 .\",\n    \"?person wdt:P279* wd:Q7870 .\",\n    \"?person wdt:P50 ?spouse .\",\n    \"FILTER NOT EXISTS { ?person wdt:P673 [] }\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n  \t\t\t\t\t        \t\t\t\t\t"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9215 is Sigmund Freud\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q9215 wdt:P26 ?spouse.\",\n      \"?spouse a wd:Q5.\" ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0071 is Sigmund Freud\nkg:1379 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:0071 'Sigmund Freud'.\",\n    \"?person kg:1379 ?spouse.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?dbpedia wikibase:claim P123;\",\n    \"   wikibase:NSRId ?developer .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q465 is DBpedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?dbpedia wdt:P112 ?developer .\",\n    \"?dbpedia wd:Q465 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is DBpedia\nkg:9957 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?developer\",\n    \"{\",\n    \"?dbpedia kg:isDevelopedBy ?developer.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P345 ?director .\",\n    \"?director rdfs:label \\\"Francis Ford Coppola\\\"@en .\",\n    \"?movie a wd:Q11424 . # Q11424 is the Wikidata item for movies (film)\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q56094 is Francis Ford Coppola", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie wdt:P31 wd:Q11424 ;\",\n\t\t\t\t\t\"wdt:P57 wd:Q56094 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4264 is instance of\nkg:1346 is subclass of\nkg:9775 is film\nkg:2196 is director\nkg:2738 is Francis Ford Coppola", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie a kg:9775 .\",\n    \"?movie kg:2196/kg:2738 ?director .\",\n    \"?director kg:9775 \\\"Francis Ford Coppola\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P279* wd:Q16854.\" ,\n      \"?resource wdt:P31 wd:Q6357.\",\n      \"FILTER(?resource != wd:Q16854)\" ,\n      \"}\"\n  ]\n}\n"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53696 is Hylidae\nwdt:P171 is parent taxon\nwd:Q10908 is Amphibia", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?treeFrog wd:P171* wd:Q53696 ;\",\n           \"wdt:P279* wd:Q10908 .\",\n      \"?resource wdt:P31 ?treeFrog .\",\n    \"}\"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4906 is Hylidae\nkg:8693 is parent taxon\nkg:5304 is Amphibia", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?treeFrog kg:isHylidae ?value1 .\",\n    \"?treeFrog kg:isParentTaxon ?amphibia .\",\n    \"?amphibia kg:isAmphibia true .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location\",\n    \"WHERE {\",\n    \"?building wdt:P1706 ?location .\",\n    \"wd:Q2843 wdt:P17 ?building .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t  \t\t\t\t\t"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q62408 is Palace of Westminster\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q62408 wdt:P131 ?location.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3314 is Palace of Westminster\nkg:3899 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?location\",\n    \"WHERE {\",\n    \"  kg:3314 kg:3899 ?location .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P2049 ?elevation .\",\n      \"?resource rdfs:label \\\"Düsseldorf Airport\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q58226 is Düsseldorf Airport\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q58226 ;\",\n                  \"wdt:P2044 ?elevation.\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is Düsseldorf Airport\nkg:7050 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7050 ?elevation.\",\n    \"?resource kg:3463 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"?resource wdt:P31 wd:Q515 .\" ,\",\"\n   \t]}\n \t\t\t\t\t       \t \t \t \t"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1489 is Mexico City\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"wd:Q1489 wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8330 is Mexico City\nkg:3405 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?city kg:isMexicoCity kg:8330.\",\n    \"?city kg:hasPopulation ?population .\",\n    \"?population kg:isPopulation kg:3405.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P813 wd:Q2490657.\" ,\",\",\n      \"?resource wdt:P577 ?date.\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q200686 is French Fifth Republic\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q200686 ;\",\n                  \"wdt:P571 ?inceptionDate .\",\n    \"}\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0429 is French Fifth Republic\nkg:8176 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8176 ?foundingDate .\",\n    \"?resource kg:0429 \\\"French Fifth Republic\\\"@fr .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P37 wd:Q9481965.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q18810062 is monarch of England\np:P39 is position held\npq:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king wdt:P39 wd:Q18810062 ;\",\n    \"   pq:P580 ?start_time .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9064 is position held\nkg:5324 is monarch of England\nkg:4854 is position held\nkg:6181 is start time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?king\",\n    \"WHERE {\",\n    \"?king kg:5324/kg:9064 kg:4854 ;\",\n    \"   kg:6181 ?startTime .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor\",\n    \"WHERE {\",\n    \"?article wdt:P921 wd:Q98647530.\" , \"># Forbes magazine (Wikidata ID Q98647530)\",\n    \"?article wdt:P921 ?editor.\",\n    \"FILTER(?editor != wd:Q98647530)\" , \"># Exclude Forbes itself as an editor\"\n   ,\"}\"\n  ]\n}\n"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P98 is editor", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"wd:Q25161472 wdt:P98 ?editor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4567 is Forbes\nkg:7693 is editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?editor\",\n    \"WHERE {\",\n    \"?article kg:7693 ?editor .\",\n    \"?article kg:4567 \\\"Forbes\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q5237980; # Douglas Hofstadter's occupation or role\",\n    \"      wdt:P166 wd:Q5237980. # Alternative way to link to Douglas Hofstadter\",\n    \"?person wdt:P16 ?award. # Find awards won by the person\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" } # Label in English\"\n   ,\"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q319308 is Douglas Hofstadtesr\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"wd:Q319308 wdt:P166 ?award.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8441 is Douglas Hofstadtesr\nkg:7848 is award received", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?douglasHofstadter kg:8441 ?awardReceived .\",\n    \"?awardReceived a ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q208469;\",\n    \"          wdt:P577 ?birth_date .\",\n    \"  FILTER NOT EXISTS { ?player wdt:P580 ?death_date }\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"} ORDER BY ?birth_date LIMIT 1\"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q18574233 is darts player\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?player WHERE {\",\n\t\t\"?player wdt:P106 wd:Q18574233 ;\",\n\t\t\"   wdt:P569 ?dob .\",\n\t\t\"} ORDER BY ?dob LIMIT 1\"\n\t]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9867 is occupation\nkg:7203 is darts player\nkg:4047 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:isoccupation kg:7203 ;\",\n    \"   kg:dateofbirth ?dob .\",\n    \"\",\n    \"MINUS {\",\n    \"?otherPlayer kg:isoccupation kg:7203 ;\",\n    \"   kg:dateofbirth ?otherDob .\",\n    \"   FILTER(?otherDob < ?dob)\",\n    \"}\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q3394680 ;\",\n      \"wdt:P31/wdt:P279* wd:Q24695 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187916 is horse racing\nwdt:P279 is subclass of\nwd:Q349 is sport", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P279* wd:Q349 ;\",\n      \"   rdfs:label ?label .\",\n      \"FILTER(LANG(?label) = 'en')\",\n    \"}\",\n    \"FILTER(?resource = wd:Q187916)\"\n  ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2533 is horse racing\nkg:7442 is subclass of\nkg:8983 is sport", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7442*/kg:8983 kg:2533.\",\n    \"}\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"  wd:Q3216 wdt:P2094 ?bridge.\",\n    \"  wd:Q3216 wdt:P715 ?river.\",\n    \"  FILTER(?bridge = wd:Q8466)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P177 is crosses", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?bridge wdt:P177 ?crosses .\",\n    \"?bridge wd:Q125006 .\",\n    \"?crosses rdfs:label ?label .\",\n    \"FILTER (lang(?label) = 'en')\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3474 is Brooklyn Bridge\nkg:2218 is crosses", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?bridge kg:3474 ?crosses.\",\n    \"?crosses kg:2218 ?river.\",\n    \"}\",\n    \"VALUES ?bridge { kg:3474 }\"\n  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource wdt:P31 wd:Q6964375.\" ,\n      \"FILTER(?population != '')\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "How many people live in Poland?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q36 is Poland\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1082 ?population .\",\n    \"?resource wdtype:PinstanceOf wd:Q36 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5126 is Poland\nkg:4536 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4536 ?population .\",\n    \"?resource kg:5126 \\\"Poland\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?episode ?episodeLabel\",\n    \"WHERE {\",\n      \"?episode wdt:P585 ?airDate .\",\n      \"?episode wdt:P361 wd:Q74092990 .\", \"># Q74092990 is the TV series Friends\",\n      \"FILTER NOT EXISTS { ?otherEpisode wdt:P361 wd:Q74092990 ; wdt:P585 ?laterAirDate . FILTER(?laterAirDate > ?airDate) }\",\n    \"} ORDER BY DESC(?airDate) LIMIT 1\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79784 is Friends\nwdt:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?episode\",\n    \"WHERE {\",\n      \"?episode wdt:P31* wd:Q79784 ;\", \"># Assuming the last episode is a part of the series and thus related to Friends (wd:Q79784)\",\n      \"?episode wdt:P582 ?endTime .\",\n      \"?episode wdt:P407 ?series\" , \"# P407 links an episode to its TV series\",\n      \"FILTER(?series = wd:Q79784)\" ,\n    \"}\",\n    \"ORDER BY DESC(?endTime)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3659 is Friends\nkg:4666 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?episode kg:4666 ?endTime .\",\n    \"?episode kg:3659 kg:4666 .\",\n    \"FILTER NOT EXISTS { ?otherEpisode kg:3659 kg:4666 ; kg:4666 ?otherEndTime . FILTER(?otherEndTime > ?endTime) }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is the wife of president Obama called Michelle?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is the wife of president Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P39 wd:Q7665.\" , \"# Obama's wife\",\n      \"?person wdt:P2081 wd:Q14247.\" ,\"# Michelle Obama\"\n    ,\"}\"\n  ]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"wd:Q8369 wdt:P275* ?president .\",\n    \"VALUES ?president { wd:Q7347 }\"\n   ,\"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30 is United States of America\np:P6 is head of government\npq:P580 is start time\nps:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?presidency wdt:p:P6 wd:Q30 ;\",\n    \"   wdt:ps:P6 ?president ;\",\n    \"   wdt:pq:P580 ?start_time .\",\n    \"FILTER(?president = wd:Q8472)\" ,\n    \"}\"\n  ]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7329 is United States of America\nkg:8425 is head of government\nkg:0279 is start time\nkg:3879 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?entity kg:is head of government ?president .\",\n    \"?entity kg:is United States of America kg:7329 .\",\n    \"?president kg:is start time \\\"1981-01-20\\\"^^<http://www.w3.org/2001/XMLSchema#date> .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population\",\n    \"WHERE {\",\n    \"?union wdt:P1704 ?population .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q458 ;\", \"># Q458 represents the European Union entity (assuming it's a country or similar entity)\",\n    \"   wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is European Union\nkg:6799 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isPopulation ?population .\",\n    \"?resource kg:isEuropeanUnion true .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?pad\",\n    \"WHERE {\",\n    \"?pad wdt:P31/wdt:P279* wd:Q846059.\" , \"# Launch pad instance of or subclass of Space center\",\n    \"?pad wdt:P170* wd:Q60.\" , \"# Operated by NASA\",\n    \"}\"\n  ]\n}\n"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q194188 is spaceport\nwdt:P137 is operator\nwd:Q23548 is National Aeronautics and Space Administration", "response": "{\n  \"query\": [\n    \"SELECT ?pad WHERE {\",\n    \"?pad wdt:P31 wd:Q194188 ;\",\n    \"   wdt:P137 wd:Q23548.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is instance of\nkg:9497 is spaceport\nkg:1707 is operator\nkg:0090 is National Aeronautics and Space Administration", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?launchPad\",\n    \"WHERE {\",\n    \"?launchPad a kg:9497 .\",\n    \"?launchPad kg:1707 ?operator .\",\n    \"?operator kg:0090 kg:1707 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game ?developer\",\n    \"WHERE {\",\n      \"?game wdt:P31 wd:Q78764952 ;\", \"># Q78764952 is the item ID for video game in Wikidata\",\n      \"?game rdfs:label ?gameLabel ;\",\n      \"?developer wdt:P31/wdt:P279* wd:Q1028299 ;\", \"># Q1028299 is the item ID for Video game developer in Wikidata\",\n      \"?developer rdfs:label ?developerLabel .\",\n      \"FILTER (lang(?gameLabel) = 'en' && lang(?developerLabel) = 'en') .\",\n      \"VALUES ?game { wd:Q106435 }\" ,\"\\n\" ,\"\\n\" ,\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ?gameLabel\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131007 is World of Warcraft\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?game wdt:P178 ?developer .\",\n    \"?game wd:Q131007 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4175 is World of Warcraft\nkg:2911 is developer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?game kg:isWorldOfWarcraft ;\",\n    \"   kg:isDeveloper ?developer .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P735 ?birthName .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"FILTER (STRSTARTS(?label, 'Adele'))\",\n    \"}\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23215 is Adele\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q23215 wdt:P1477 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8007 is Adele\nkg:3664 is birth name", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3664 ?birthName .\",\n    \"?resource kg:8007 \\\"Adele\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"FILTER regex(str(?label), '^Cairo$')\"\n    ,\"}\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85 is Cairo\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1082 ?population .\",\n    \"?resource wd:P31 wd:Q85 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4167 is Cairo\nkg:8338 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8338 ?population .\",\n    \"?resource kg:4167 true .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5.\" , \"># A human\",\n      \"?resource wdt:P735 ?date.\" , \"># Date of death\",\n      \"FILTER NOT EXISTS { ?resource wdt:P735 ?date. }\" , \"># Filter out if a date of death exists, meaning he is not alive\"\n   ,\"}\"\n  ]\n}\n\t\t  \t\t\t\t  \t\t\t\t\t"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathDate .\",\n      \"wd:Q7934 ?p ?resource .\",\n      \"?p rdfs:label \\\"Frank Herbert\\\"@en .\",\n      \"FILTER NOT EXISTS { ?resource wdt:P570 ?dummy }\",\n    \"}\"\n  ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6191 is Frank Herbert\nkg:7183 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6191 \\\"Frank Herbert\\\" .\",\n    \"!?resource kg:7183 ?deathDate .\",\n    \"FILTER NOT EXISTS { !?resource kg:7183 ?deathDate }\",\n    \"}\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P577 ?publicationDate .\",\n      \"?work wdt:P50 \\\"Dan%20Brown\\\"@en .\",\n      \"FILTER NOT EXISTS { ?otherWork wdt:P577 ?otherPublicationDate . ?otherWork wdt:P50 \\\"Dan%20Brown\\\"@en . ?otherPublicationDate > ?publicationDate }\",\n    \"}\",\n    \"ORDER BY DESC(?publicationDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q7345 is Dan Brown\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q7345 ;\",\n           \"wdt:P577 ?date .\",\n      \".}\",\n    \"ORDER BY DESC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8899 is author\nkg:6077 is Dan Brown\nkg:9624 is publication date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?lastWork\",\n    \"WHERE {\",\n    \"?lastWork kg:isAuthor kg:6077 ;\",\n    \"         kg:publicationDate ?pubDate .\",\n    \"\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?work kg:isAuthor kg:6077 ;\",\n    \"      kg:publicationDate ?otherPubDate .\",\n    \"}\",\n    \"\",\n    \"FILTER (?pubDate > ?otherPubDate || ?pubDate = ?otherPubDate)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"  wd:SungkyunkwanUniversity wdt:P625 ?location.\",\n    \"  BIND(wd:SungkyunkwanUniversity AS ?university)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwdt:P276 is location\nwdt:P131 is located in the administrative territorial entity\nwd:Q41085 is Sungkyunkwan University", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"?university wdt:P276 wd:Q41085 ;\",\n    \"   wdt:P131 ?location .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0470 is country\nkg:8946 is location\nkg:2192 is located in the administrative territorial entity\nkg:9035 is Sungkyunkwan University", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8946 kg:9035 ;\",\n    \"   kg:2192 ?location .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P69 \\\"Sigmund Freud\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q726382 is Die Traumdeutung\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?work wdt:P50 ?author ;\",\n    \"   wdsg:label ?title .\",\n    \"VALUES ?title { wd:Q726382 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1167 is Die Traumdeutung\nkg:3300 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3300 \\\"Die Traumdeutung\\\".\",\n    \"}\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathDate .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"FILTER regex(str(?label), \\\"Shakespeare\\\", \\\"i\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q692 is William Shakespeare\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathDate .\",\n      \"wd:Q692 wdt:P570 ?deathDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5991 is William Shakespeare\nkg:8176 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isWilliamShakespeare ?shakespeare.\",\n    \"?resource kg:dateOfDeath ?deathDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q57702964 ;\", \"># A software project (used for Slack) or a person (developer)\",\n      \"?resource wdt:P846 ?developer .\", \"># P846 is used to link the creator of an item\",\n      \"FILTER(?resource != ?developer)\" ,\"\\n\" ,\"\\n\" ,\"}\" ,\"\\n\" ,\"\\n\" ,\"LIMIT 1\"\n  ]\n}\n \t  \t\t\t\t  \t\t\t\t\t  \t\t\t"}
{"question": "Who developed Slack?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1056 is product or material produced or service provided\nwd:Q17130715 is Slack", "response": "{\n  \"query\": [\n    \"SELECT ?developer\",\n    \"WHERE {\",\n    \"?slack wdt:P1056 ?developer. \",\n    \"?slack wd:Q17130715 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0014 is product or material produced or service provided\nkg:0492 is Slack", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0492 ?slack .\",\n    \"?slack kg:0014 ?developer .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P569 ?birthDate .\",\n      \"?resource rdfs:label ?nameFilter EN \\\"Rachel Stevens\\\"@en .\",\n      \"FILTER LANGMATCH(LANG(?nameFilter), \\\"EN\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P569 ?birthDate .\",\n      \"wd:Q241665 wdt:P569 ?birthDate .\",\n    \"}\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Rachel Stevens\nkg:8397 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8473 \\\"Rachel Stevens\\\" .\",\n    \"?resource kg:8397 ?dob .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 \\\"Jane Fonda\\\".\",\n      \"?resource wdt:P175 ?marriageEvent.\",\n      \"?marriageEvent wdt:P580 ?startDate.\",\n      \"?marriageEvent wdt:P582 ?endDate.\",\n      \"FILTER(?endDate != '')\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41142 is Jane Fonda\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q41142 wdt:P26 ?resource.\",\n      \"?resource wdt:P570 ?date.\" ]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t\t\t \t\t"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3295 is Jane Fonda\nkg:1321 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?janeFonda kg:3295 \\\"Jane Fonda\\\" .\",\n    \"?marriage kg:1321 ?janeFonda .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was the wife of president Lincoln called Mary?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was the wife of president Lincoln called Mary?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3907 Q7846.\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q30149 wdt:P2658 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8038 is GIMP\nwdt:P277 is programmed in", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q8038 wdt:P277 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6582 is GIMP\nkg:7415 is programmed in", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?language\",\n    \"WHERE {\",\n    \"  kg:6582 kg:7415 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q134278; # Q134278 is Angela Merkel's Wikidata ID\",\n    \"  wdt:P69 ?university. # P69 is the property for education at a university\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3918 is university\nwd:Q875538 is public university\nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"?university wdt:P31 wd:Q875538 ;\", \"# University is an instance of public university\",\n    \"   wdt:P69 wd:Q567 .\", \"# Angela Merkel was educated at this university\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5654 is university\nkg:4459 is public university\nkg:0182 is Angela Merkel\nkg:0579 is educated at\nkg:4931 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"?merkel kg:0579 ?university .\",\n    \"?university a kg:4459 ;\",\n    \"   kg:4931 ?instanceOfUniversity .\",\n    \"}\",\n    \"FILTER(?merkel = kg:0182)\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?musical\",\n    \"WHERE {\",\n    \"?musical wdt:P31 wd:Q985276.\" , \"# Ensure it's a musical work\",\n    \"?musical wdt:P1050 \\\"Elton John\\\".\" ,\"# Elton John as the composer of music for the musical\"\n    ,\"}\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q58483083 is dramatico-musical work\nwdt:P86 is composer\nwd:Q2808 is Elton John", "response": "{\n  \"query\": [\n    \"SELECT ?musical\",\n    \"WHERE {\",\n    \"?musical wdt:P31 wd:Q58483083 ;\", \"# Check if the resource is a musical work\",\n    \"?musical wdt:P86 wd:Q2808 .       # The musical has Elton John as composer\",\n    \"}\",\n    \"LIMIT 100\" ,\"% Only return up to 100 results\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9424 is instance of\nkg:1957 is subclass of\nkg:3671 is dramatico-musical work\nkg:9607 is composer\nkg:2686 is Elton John", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?musical\",\n    \"WHERE {\",\n    \"?musical a kg:3671 ;\",\n    \"   kg:hasMusicBy ?composer .\",\n    \"?composer a kg:9607 ;\",\n    \"   kg:name \\\"Elton John\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What is the longest river in the world?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the longest river in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river wdt:P31/wdt:P279* wd:Q24685;\",\n    \"wdt:P1001 ?length;\",\n    \"wdt:P131* wd:Q172.}\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P569 ?birthDate .\",\n    \"  FILTER(STRSTARTS(str(?resource), \\\"http://www.wikidata.org/entity/\\\"))\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11806 is John Adams\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q11806 wdt:P569 ?birthDate .\",\n    \"?resource wdt:P569 ?birthDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5247 is John Adams\nkg:0188 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5247 'John Adams' .\",\n    \"?resource kg:0188 ?birthDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q21954806 ;\", \"># Q21954806 is the item for 'Hovercraft'\",\n    \"?company wdt:P279* wd:Q21954806 . # P279 is the subClassOf property\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q185757 is hovercraft\nwdt:P176 is manufacturer", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?company\",\n\t\t\"WHERE {\",\n\t\t\t\"?company wdt:P31/wdt:P279* wd:Q185757 ;\",\n\t\t\t\"wdt:P176 ?product .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8283 is instance of\nkg:6744 is subclass of\nkg:6957 is hovercraft\nkg:1305 is manufacturer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:1305*/kg:6957 [] .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife\",\n    \"WHERE {\",\n    \"?president wdt:P397 'Abraham Lincoln' ;\",\n    \"?spouse wdt:P26 ?president .\",\n    \"?spouse a wd:Q5 .\",\n    \"?wife ?p ?o .\",\n    \"FILTER(?wife = ?spouse) .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?wife\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q91 .\",\n    \"?person wdt:P21 ?gender .\",\n    \"FILTER(?gender != \\\"male\\\"@en) .\",\n    \"?person rdfs:label ?name .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1470 is Abraham Lincoln\nkg:1740 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?wife\",\n    \"WHERE {\",\n    \"  kg:1470 kg:1740 ?wife.\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?species \",\n    \"WHERE {\",\n    \"  wd:Q193 wdt:P703 ?species .\",\n    \"}\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7378 is elephant\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE {\",\n    \"wd:Q7378 wdt:P279 ?species.\",\n    \"}\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5477 is elephant\nkg:6250 is subclass of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:5477 \\\"elephant\\\" .\",\n    \"?subject kg:6250 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:AustraliaP244 wd:P15 ?capital.\",\n    \"  ?capital wdt:P1082 ?population.\",\n    \"  BIND(wd:AustraliaP244 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q408 is Australia\nwdt:P36 is capital\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?capital wdt:P36 wd:Q408 ;\",\n              \"wdt:P1082 ?population .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1226 is Australia\nkg:4676 is capital\nkg:8292 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?capital kg:isCapitalOf ?country ;\",\n    \"   kg:hasPopulation ?population .\",\n    \"?country kg:isAustralia true .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?empire ?empireLabel\",\n    \"WHERE {\",\n    \"?empire wdt:P31 wd:Q604792; # ancient empire\",\n    \"?empire wdt:P1812 ?cocoaBeanPayment. # uses cocoa beans for payment\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q208008 is cocoa bean", "response": "{\n  \"query\": [\n    \"SELECT ?empire\",\n    \"WHERE {\",\n    \"?empire wdt:P38 ?currency.\",\n    \"?currency wdt:wdt:P279* wd:Q208008.\",\n    \"}\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7522 is currency\nkg:2855 is cocoa bean", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isCurrency ?currency .\",\n    \"?currency kg:isCocoaBean true .\",\n    \"}\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?theory\",\n    \"WHERE {\",\n      \"?entity wdt:P279* wd:Q46 .\", \"># Q46 is the entity for Albert Einstein\",\n      \"?entity wdt:P105 ?theory .\",\n      \"FILTER(?theory != wd:Q46) # Filter out self-reference if any\"\n    ,\"}\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P800 is notable work", "response": "{\n  \"query\": [\n    \"SELECT ?theory\",\n    \"WHERE {\",\n      \"?work wdt:P800 ?theory ;\",\n             \"rdfs:label ?label .\",\n      \"wd:Q937 wdt:P800 ?work .\",\n      \"FILTER (lang(?label) = 'en')\",\n    \"}\",\n    \"GROUP BY ?theory\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is Albert Einstein\nkg:7047 is notable work", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:9081 kg:7047 ?theory .\",\n    \"  BIND(count(?theory) AS ?theoryCount)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ? soundtrack .\",\n      \"?soundtrack wdt:P57 ? composer .\",\n      \"wd:Q108269 wdt:P31 wd:Q11424664 .\", \"-- Q108269 is the Wikidata item for Titanic (film)\",\n    \"}\"\n  ]\n}\n"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44578 is Titanic\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q44578 .\",\n      \"?movie wdt:P86 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0524 is Titanic\nkg:2249 is composer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?soundtrack kg:isFor <kg:0524> .\",\n    \"?soundtrack kg:isComposedBy ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?runtime\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n      \"?movie wdt:P345 ?runtime.\",\n      \"FILTER(STRSTARTS(?movie, \\\"Toy Story\\\"))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171048 is Toy Story\nwdt:P2047 is duration", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q171048 ;\",\n    \"   wdt:P2047 ?duration .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1514 is Toy Story\nkg:2430 is duration", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:1514 'Toy Story'.\",\n    \"?movie kg:2430 ?runtime.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?iran wdt:P31 wd:Q6257.\" , \"# Iran as a country\",\n      \"?iran wdt:P17 ?borderCountry.\" , \"# Countries bordering Iran\",\n      \"?borderCountry wdt:P31 wd:Q6256.\" , \"# Ensure the entity is a country\",\n      \"FILTER(?borderCountry != wd:Q6257)\" , \"# Exclude Iran itself\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q794 is Iran\nwdt:P47 is shares border with", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"wd:Q794 wdt:P47 ?country.\",\n    \"}\"\n  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7701 is Iran\nkg:4645 is shares border with", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country \",\n    \"WHERE {\",\n    \"?border kg:4645 kg:7701 .\",\n    \"?border kg:7701 kg:4645 .\",\n    \"?border rdfs:label ?country .\",\n    \"}\",\n    \"GROUP BY ?country\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q3674780; # Check if the entity is a company\",\n      \"?company wdt:P17 wd:Q1869; # Founded in Beijing\",\n      \"?company wdt:P1344 ?electronics. # The company is related to electronics\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P452 is industry\nwd:Q581105 is consumer electronics\nwdt:P740 is location of formation\nwd:Q956 is Beijing", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P452 wd:Q581105 ;\",\n               \"wdt:P740 wd:Q956 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is industry\nkg:1205 is consumer electronics\nkg:3857 is location of formation\nkg:1374 is Beijing", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:isIndustry ?industry .\",\n    \"?industry kg:isConsumerElectronics true .\",\n    \"?company kg:locationOfFormation ?formationLocation .\",\n    \"?formationLocation kg:isBeijing true .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?successor\",\n    \"WHERE {\",\n    \"?position wdt:P108 wd:Q76954 ;\", \"# John F. Kennedy's position (U.S. President)\",\n    \"wdt:P826 ?successor .\", \"# The successor of the position\",\n    \"FILTER(?successor != wd:Q76954)\" ,\"\\n# Exclude John F. Kennedy himself\"\n   ,\"}\"\n  ]\n}\n"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?successor\",\n    \"WHERE {\",\n    \"?person wdt:p:P39/wdt:ps:P39 wd:Q9696 ;\",\n    \"   wdt:pq:P1366 ?successor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2479 is John F. Kennedy\nkg:8778 is position held\nkg:5867 is position held\nkg:9343 is President of the United States\nkg:6563 is replaced by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?successor WHERE {\",\n    \"  kg:2479 kg:6563 ?successor .\",\n    \"  ?successor a kg:9343.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515; # instance of city\",\n    \"wdt:P17 wd:Q142.}; # located in France (Paris)\",\n    \"?city wdt:P74 ?mayor. # has mayor\",\n    \"FILTER(?mayor != wd:Q106893) # exclude the former title holder\\\"\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q90 ;\", \"# Q90 is the resource for Paris\",\n    \"   wdt:P6 ?mayor .\", \"# P6 is the property for head of government\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6166 is Paris\nkg:8306 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city kg:6166 'Paris'.\",\n    \"?city kg:8306 ?mayor.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wd:talk \\\"Arnold Schwarzenegger\\\"@en .\",\n      \"?person wdt:P69 ?university .\",\n      \"?university rdfs:label ?universityLabel .\",\n      \"FILTER (lang(?universityLabel) = 'en')\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2685 is Arnold Schwarzenegger\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n      \"wd:Q2685 wdt:P69 ?edu.\",\n      \"?edu wdt:P31/wdt:P279* wd:Q3918.\",\n      \"?edu rdfs:label ?universityLabel.\"\n    ,\n    \"FILTER (lang(?universityLabel) = 'en')\",\n    \"}\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7308 is Arnold Schwarzenegger\nkg:8876 is educated at\nkg:0688 is instance of\nkg:7030 is subclass of\nkg:3125 is university", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:isArnoldSchwarzenegger .\",\n    \"?person kg:isEducatedAt ?university .\",\n    \"?university kg:isInstanceOf* kg:3125 .\",\n    \"}\",\n    \"FILTER NOT EXISTS {\",\n    \"?person kg:isNotEducatedAt [] .\",\n    \"}\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P175 wd:Q96403829 .\",\n    \"FILTER(?resource = wd:Q96403829) # James Bond character page\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Is James Bond married?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2009573 is James Bond\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q2009573 wdt:P26 ?spouse.\",\n      \"?resource wdt:P26 wd:Q2009573.\"\n    ,\"}\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6381 is James Bond\nkg:3800 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:6381 kg:spouse ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?river WHERE {\",\n    \"  wd:Isar wdt:P1006 ?outlet.\",\n    \"  FILTER(?outlet = wd:Lake)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q106588 is Isar\nwdt:P403 is mouth of the watercourse\nwdt:P31 is instance of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?lake wdt:P31 wd:Q23397 ;\",\n    \"   wdt:P403 ?river .\",\n    \"?river wdt:P31 wd:Q106588 .\",\n    \"}\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5036 is Isar\nkg:9120 is mouth of the watercourse\nkg:4891 is instance of\nkg:5402 is lake", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?river kg:4891 ?flowProperty ;\",\n    \"   kg:5036 ?isarInstance .\",\n    \"?flowProperty kg:9120 ?mouth .\",\n    \"?mouth kg:4891 ?lakeInstance .\",\n    \"}\",\n    \"VALUES ?resource { ?river ?mouth ?lakeInstance }\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q5720980; # Check if the entity is a company\",\n      \"?company wdt:P17 wd:Q34; # India as country\",\n      \"?company wdt:P108 ?industry. # Related to industry (optional, for context)\",\n      \"OPTIONAL { ?company wdt:P176 ?parentCompany. } # Parent company (optional)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?numEmployees)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P17 is country\nwd:Q668 is India\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 ;\",\n               \"wdt:P17 wd:Q668 ;\",\n               \"wdt:P1128 ?employeeCount .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?employeeCount)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9039 is instance of\nkg:8788 is business\nkg:3619 is country\nkg:2811 is India\nkg:7645 is employees", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company a kg:8788 ;\",\n    \"   kg:9039 ?employees ;\",\n    \"   kg:3619 kg:2811 .\",\n    \"\",\n    \"  FILTER(?employees = (SELECT MAX(?maxEmployees) WHERE { ?company kg:9039 ?maxEmployees }))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?vp\",\n    \"WHERE {\",\n    \"?vp wdt:P7 ?jfk .\",\n    \"?jfk wdt:P31 wd:Q5 .\",\n    \"?jfk wdt:P76 wd:Q9847 .\",\n    \"FILTER(?vp != wd:Q9847)\"\n    ,\"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P580 is start time\npq:P582 is end time\np:P39 is position held\nps:P39 is position held\nwd:Q11699 is Vice President of the United States\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?vicePresident WHERE {\",\n    \"wd:Q9696 wdt:p:P39 wd:Q11699 ;\",\n    \"wdt:ps:P39 ?position .\",\n    \"?position wdt:p:P580 ?start ;\",\n    \"wdt:pq:P582 ?end .\",\n    \"?vicePresident wdt:wdt:P39 ?position .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3069 is John F. Kennedy\nkg:4508 is position held\nkg:8952 is position held\nkg:0773 is President of the United States\nkg:0995 is start time\nkg:5626 is end time\nkg:4508 is position held\nkg:8952 is position held\nkg:0526 is Vice President of the United States\nkg:0995 is start time\nkg:5626 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?vicePresident\",\n    \"WHERE {\",\n    \"  kg:3069 kg:4508/kg:8952 ?position ;\",\n    \"         kg:0995 ?start , ?end .\",\n    \"  ?position a kg:0526 ;\",\n    \"           kg:0995 ?startPos , ?endPos .\",\n    \"}\",\n    \"FILTER NOT EXISTS {\",\n    \"  kg:3069 kg:4508/kg:8952 ?otherPosition ;\",\n    \"         kg:0995 ?otherStart , ?otherEnd .\",\n    \"  ?otherPosition a kg:0526 ;\",\n    \"           kg:0995 ?otherStartPos , ?otherEndPos .\",\n    \"}\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?creator wdt:P17 ?country .\",\n    \"?work wdt:P69 ?creator ;\",\n    \"wdt:P845 wd:Q2039966 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1501505 is Miffy\nwdt:P170 is creator\nwdt:P27 is country of citizenship", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?creator wdt:P170 wd:Q1501505 ;\",\n               \"wdt:P27 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1126 is Miffy\nkg:0332 is creator\nkg:1594 is country of citizenship", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"  kg:1126 kg:0332 ?creator .\",\n    \"  ?creator kg:1594 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q15267 wdt:P131* ?brewery.\",\n    \"  wd:Q15267 wdt:P69 ?city.\",\n    \"  FILTER(?brewery = wd:Q15267)\"\n   ,\"}\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854383 is Heineken\nwdt:P176 is manufacturer\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?brewery wdt:P176 wd:Q854383 .\",\n    \"?brewery wdt:P159 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2645 is Heineken\nkg:1943 is manufacturer\nkg:0447 is headquarters location", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"  kg:2645 kg:1943 ?brewery .\",\n    \"  ?brewery kg:0447 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P306 ?party .\",\n      \"?resource rdfs:label ?label.\",\n      \"FILTER (lang(?label) = 'en' && str(?label) = 'Barack Obama').\"\n    ,\"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P102 is member of political party\nwd:Q29552 is Democratic Party", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q76 wdt:P102 ?party.\",\n      \"?party wd:Q29552 true.\",\n      \"FILTER(?party = wd:Q29552)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6237 is Barack Obama\nkg:0077 is member of political party\nkg:9901 is Democratic Party", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:6237 'Barack Obama'.\",\n    \"?person kg:0077 ?party.\",\n    \"?party kg:9901 'Democratic Party'.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child\",\n    \"WHERE {\",\n    \"?child wdt:P22 \\\"Margaret Thatcher\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q7416 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1671 is Margaret Thatcher\nkg:9715 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?child\",\n    \"WHERE {\",\n    \"  kg:1671 kg:9715 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?area\",\n    \"WHERE {\",\n    \"?place wdt:P31 wd:Q6985; # Place is a location\",\n    \"wdt:P131* wd:Q2407; # Location is in North Rhine-Westphalia\",\n    \"wdt:P2046 ?area. # Has area (in square kilometres)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1198 is North Rhine-Westphalia\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31/wdt:P279* wd:Q1198 ;\",\n    \"   wdt:P2046 ?area .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2319 is North Rhine-Westphalia\nkg:6965 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6965 ?area .\",\n    \"?resource kg:2319 true.\",\n    \"}\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P1082 ?population .\",\n    \"  FILTER NOT EXISTS { ?city wdt:P31 wd:Q515 }\", \"@en # Filter out non-places\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"} ORDER BY DESC(?population) LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\",\n    \"   wdt:P1082 ?population .\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0594 is instance of\nkg:1015 is subclass of\nkg:4012 is city\nkg:0154 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city a kg:4012 ;\",\n    \"   kg:0154 ?population .\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?business\",\n    \"WHERE {\",\n    \"?person wdt:P39 wd:Q78215764 .\", \"># Q78215764 is the Wikidata item for Donald Trump\",\n    \"?person wdt:P276 ?business.\",\n    \"FILTER(?business != [])\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P488 is chairperson\nwd:Q22686 is Donald Trump\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?business\",\n    \"WHERE {\",\n      \"wd:Q22686 wdt:P31/wdt:P279* ?business.\",\n      \"?business wdt:P488 wd:Q22686.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4832 is chairperson\nkg:2038 is Donald Trump\nkg:0886 is instance of\nkg:5264 is subclass of\nkg:3913 is business\nkg:3936 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?entity kg:2038 kg:3913 ;\",\n    \"   kg:0886 ?business .\",\n    \"?business a kg:3913 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?match ?matchLabel\",\n    \"WHERE {\",\n    \"?match wdt:P361 wd:Q24058798 ;\", \"># Q24058798 is the World Cup 2018 event\",\n    \"wdt:P580 ?start_time .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?start_time)\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170645 is 2018 FIFA World Cup\nwdt:P3967 is final event\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?match ?startTime\",\n    \"WHERE {\",\n      \"?match wdt:P3967 wd:Q170645 ;\",\n      \"   wdt:P580 ?startTime .\",\n    \"}\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7606 is 2018 FIFA World Cup\nkg:2755 is final event\nkg:9531 is start time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?match kg:2755/kg:7606 ;\",\n    \"   kg:9531 ?time .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P577 ?date.\",\n      \"?film wdt:P644 ?kubrick.\",\n      \"wd:Q18601 wdt:P279* ?film.\"\n    ,\n    \"FILTER(?kubrick = wd:Q18601).\",\n    \"}\",\n    \"ORDER BY DESC(?date)\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2001 is Stanley Kubrick", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"wd:Q2001 wdt:P57 ?film.\",\n    \"}\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7961 is director\nkg:1127 is Stanley Kubrick", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:is director kg:1127.\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"?resource wdt:P31 wd:Q5746960 .\" ,\",\"\n   \t,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?population)\"\n  ]\n}\n\t\t\t        \t\t\t\t\t"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q796 is Iraq\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q796 ;\",\n    \"   wdt:P1082 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9047 is Iraq\nkg:6595 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6595 ?population .\",\n    \"?resource kg:9047 \\\"Iraq\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?city ?population WHERE {\",\n    \"  ?city wdt:P131* wd:Q3; # Find the largest city in Canada\",\n    \"        wdt:P1082 ?population. # Get the population of the city\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q16 is Canada\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city ?population\",\n    \"WHERE {\",\n      \"?city wdt:P17 wd:Q16 ;\", \"# City in Canada\",\n      \"  wdt:P31/wdt:P279* wd:Q515 ;\", \"# Instance of city or subclass thereof\",\n      \"  wdt:P1082 ?population.\" ,\"\\n# Population of the city\"\n    ,\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2883 is country\nkg:0179 is Canada\nkg:5210 is instance of\nkg:9923 is subclass of\nkg:1418 is city\nkg:1232 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city ?population WHERE {\",\n    \"?city kg:5210 kg:1418 ;\",\n    \"   kg:9923 [kg:5210 kg:0179] ;\",\n    \"   kg:1232 ?population .\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n      \"?city wdt:P31/wdt:P279* wd:Q515;\",\n             \"wdt:P625 ?coordinates.\",\n      \"?capital wdt:P31/wdt:P279* wd:Q488042;\",\n             \"wdt:P131 ?city.\",\n      \"?mayor wdt:P732 ?capital. # P732 is the property for 'Mayor of'\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30971 is French Polynesia\nwdt:P36 is capital\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P36 wd:Q30971 ;\",\n    \"   wdt:P6 ?mayor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6320 is French Polynesia\nkg:6865 is capital\nkg:4430 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?capital kg:isCapitalOf kg:6320 ;\",\n    \"   kg:isHeadOfGovernment ?mayor .\",\n    \"?mayor kg:type kg:4430 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n             \"wdt:P5779 ?date;\",\n             \"wdt:P361* ?productionCompany.\",\n      \"?actor wdt:P161 ?movie.\",\n      \"?movie wdt:P2860 wd:Q12512.\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 ;\",\n             \"wdt:P57 wd:Q16297 ;\",\n             \"wdt:P161 ?actor.\",\n    \"}\",\n    \"VALUES ?actor {}\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3780 is instance of\nkg:4610 is film\nkg:8975 is director\nkg:8436 is William Shatner\nkg:3866 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie kg:4610 ?film .\",\n    \"?film kg:8975 kg:8436 .\",\n    \"?movie kg:3866 ?actor .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P279* wd:Q184065.\" , \"># Assuming Claudia Schiffer is a human, Q184065 is the Wikidata ID for Claudia Schiffer.\",\n      \"?resource p:P2031 ?heightStatement.\" ,\n      \"?heightStatement ps:P2031 ?heightValue.\"\n    ,\"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76717 is Claudia Schiffer\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5 ;\", \"># Person entity (human) - necessary for disambiguation in Wikidata\",\n      \"?resource wdt:P2048 ?height .\",\n      \"?resource wd:Q76717 .\" ,\"\\n# Link to Claudia Schiffer's resource\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9771 is Claudia Schiffer\nkg:7932 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7932 ?height .\",\n    \"?resource kg:9771 Claudia_Schiffer .\",\n    \"}\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?populationDensityRank .\",\n      \"?resource rdfs:label ?label FILTER(LANG(?label) = 'en') .\",\n      \"?resource wdt:P31 wd:Q604539 . # Germany\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P1082 is population\nwdt:P2046 is area\nwd:Q183 is Germany\nwdt:P1082 is population\nwd:Q183 is Germany\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?country wdt:P31 wd:Q6256 ;\",\n               \"wdt:P1082 ?population ;\",\n               \"wdt:P2046 ?area .\",\n      \"wd:Q183 wdt:P31 wd:Q6256 ;\",\n               \"wdt:P1082 ?germanyPopulation ;\",\n               \"wdt:P2046 ?germanyArea .\",\n      \"?country wikibase:sitelink 'Germany'@en .\",\n      \"SERVICE wikibase:query {\",\n        \"SELECT ( ?population / ?area AS ?density )\",\n        \"WHERE {\",\n          \"wd:Q183 wdt:P1082 ?population ;\",\n          \"wdt:P2046 ?area .\",\n        \"}\",\n        \"LIMIT 1\"\n      ,\"} .\",\n      \"?country wikibase:sitelink 'Germany'@en .\",\n      \"SERVICE wikibase:query {\",\n        \"SELECT ( ?germanyPopulation / ?germanyArea AS ?germanyDensity )\",\n        \"WHERE {\",\n          \"wd:Q183 wdt:P1082 ?germanyPopulation ;\",\n          \"wdt:P2046 ?germanyArea .\",\n        \"}\",\n        \"LIMIT 1\"\n      ,\"} .\",\n      \"?country wikibase:sitelink 'Germany'@en .\",\n      \"SERVICE wikibase:query {\",\n        \"SELECT ( ?density - ?germanyDensity AS ?rank )\",\n        \"WHERE {\",\n          \"wd:Q183 wdt:P1082 ?population ;\",\n          \"wdt:P2046 ?area .\",\n          \"?country wdt:P1082 ?pop ;\",\n          \"?country wdt:P2046 ?area .\",\n          \"SERVICE wikibase:query {\",\n            \"SELECT ( ?pop / ?area AS ?density )\",\n            \"WHERE {\",\n              \"?country wdt:P1082 ?pop ;\",\n              \"wdt:P2046 ?area .\",\n            \"}\",\n            \"LIMIT 1\"\n          ,\"} .\",\n        \"}\",\n        \"FILTER(?pop != ?population)\",\n        \"ORDER BY DESC(?density - ?germanyDensity)\"\n      ,\"} .\",\n      \"?country wikibase:sitelink 'Germany'@en .\",\n      \"?resource ?p ?o .\"\n    ,\"}\"\n  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1872 is instance of\nkg:6284 is country\nkg:2685 is population\nkg:5831 is area\nkg:7906 is Germany\nkg:2685 is population\nkg:7906 is Germany\nkg:5831 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?country kg:6284 ?germany .\",\n    \"?country kg:2685 ?population .\",\n    \"?country kg:5831 ?area .\",\n    \"OPTIONAL { ?country kg:7906 \\\"Germany\\\" }\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"FILTER(?country = <http://example.org/knowledge_graph/7906>)\",\n    \"}\",\n    \"ORDER BY DESC(?density)\"\n  ]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q6152290; # Q6152290 is the item for 'Mountain'\",\n    \"?mountain wdt:P17 wd:Q183; # Italy\",\n    \"?mountain wdt:P1441 ?elevation. # P1441 is the property for 'Elevation'\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?mountain = wd:Q206983) # Q206983 is the item for 'Monte Bianco de Cogne'\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P17 is country\nwd:Q38 is Italy\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n    \"   wdt:P17 wd:Q38 ;\",\n    \"   wdt:P2044 ?elevation.\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0462 is instance of\nkg:4464 is mountain\nkg:5176 is country\nkg:5061 is Italy\nkg:4947 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain kg:isInstanceOf kg:4464 ;\",\n    \"?mountain kg:5176 kg:5061.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game\",\n    \"WHERE {\",\n    \"?game wdt:P31/wdt:P279* wd:Q960854.\" , \"# Check if the item is a game\",\n    \"?game wdt:P495 ?gmt.\" , \"# Get games with GMT property\"\n   ,\"}\"\n  ]\n}\n"}
{"question": "List all games by GMT.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11410 is game\nwdt:P123 is publisher\nwd:Q928726 is GMT Games", "response": "{\n  \"query\": [\n    \"SELECT ?game\",\n    \"WHERE {\",\n    \"?game wdt:P31/wdt:P279* wd:Q11410 ;\",\n    \"   wdt:P123 ?publisher .\",\n    \"?game wdt:P131* wd:Q928726 .\",\n    \"}\",\n    \"ORDER BY ?game\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9566 is instance of\nkg:6944 is subclass of\nkg:8759 is game\nkg:9432 is publisher\nkg:2847 is GMT Games", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?game\",\n    \"WHERE {\",\n    \"?game a kg:8759 ;\",\n    \"   kg:2847 ?gmtValue .\",\n    \"}\",\n    \"ORDER BY ?gmtValue\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?country wdt:P37 ?language ;\",\n    \"wdt:P31 wd:Q6256 .\",\n    \"FILTER (lang(?language) = 'nl')}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q730 is Suriname\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q730 wdt:P37 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4116 is Suriname\nkg:0803 is official language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is Suriname.\",\n    \"?resource kg:hasOfficialLanguage ?language .\",\n    \"?language kg:is official language .\",\n    \"}\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?person wdt:P570 ?deathTime .\",\n    \"?person wdt:P69 ?city .\",\n    \"FILTER(?person = wd:Q142839) # Nikos Kazantzakis\",\n    \"}\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214622 is Nikos Kazantzakis\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?person wdt:P27 wd:Q214622 ;\",\n    \"   wdt:P20 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2723 is Nikos Kazantzakis\nkg:5439 is place of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city \",\n    \"WHERE {\",\n    \"  kg:2723 kg:5439 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake ?country\",\n    \"WHERE {\",\n      \"?lake rdfs:label \\\"Limerick Lake\\\"@en ;\",\n      \"?lake wdt:P131* ?country .\",\n      \"?country a wd:Q6256.\" ,\",\"\n   \t,\n      \"FILTER(lang(?lakeLabel) = 'en').\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6386177 is Limerick Lake\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?lake ?country\",\n    \"WHERE {\",\n      \"?lake wdt:P17 ?country ;\",\n           \"wdt:PwikiPageWikiLink wd:Q6386177 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7230 is Limerick Lake\nkg:3882 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"  kg:7230 kg:3882 ?country.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?member\",\n    \"WHERE {\",\n    \"?group wdt:P1439 'Prodigy'@en;\",\n    \"?group wdt:P108 ?activity.\",\n    \"?member wdt:P136 ?group.\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P463 is member of\nwd:Q7256860 is The Prodigy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?member\",\n\t\t\"WHERE {\",\n\t\t\t\"?member wdt:P463 wd:Q7256860 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2552 is member of\nkg:5036 is The Prodigy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?member\",\n    \"WHERE {\",\n    \"?member kg:isMemberOf kg:5036 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1380 ?timezone .\",\n      \"?resource rdfs:label ?label FILTER(LANG(?label) = 'en') .\",\n      \"FILTER(?label = 'Rome' || ?label = 'Rome (city)' || ?label = 'Rome, Italy')\" ,\n    \"}\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q220 is Rome\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q220 wdt:P421 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1360 is Rome\nkg:1359 is located in time zone", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1360 kg:1359 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?album ?writer WHERE {\",\n    \"  ?album wdt:P361 wd:Q94528. # Q94528 is the Pink Floyd page in Wikidata\",\n    \"  ?album wdt:P679 ?song. # P679 is used for song or track on album, but we need to refine this step\",\n    \"  ?song wdt:P1437 ?writer. # P1437 is the property for music by lyricist/composer\",\n    \"}\",\n    \"ORDER BY ?album\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q151114 is The Wall\nwdt:P658 is tracklist\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?writer\",\n    \"WHERE {\",\n      \"?album wdt:P31/wdt:P279* wd:Q151114 ;\",\n      \"   wdt:P658 ?tracklist .\",\n      \"?track wdt:P50 ?writer ;\",\n      \"   wdt:P162 ?producer .\",\n      \"?album wdt:P162 ?producer .\",\n      \"FILTER NOT EXISTS { ?track wdt:P143 ?composer }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2920 is The Wall\nkg:8526 is tracklist\nkg:1210 is producer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?album kg:isTheWall ?work.\",\n    \"?work kg:8526 ?tracklist.\",\n    \"?tracklist kg:1210 ?writer.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515; # instance of city\",\n    \"wdt:P627 \\\"Rotterdam\\\"@en. # has mayor with name 'Rotterdam'\",\n    \"?mayor wdt:P108 ?city. # is mayor of the city\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34370 is Rotterdam\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P6 ?mayor ;\",\n    \"   wdtn:wikibase-sitelink 'Rotterdam' .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9506 is Rotterdam\nkg:5120 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city kg:9506 ?rotterdam .\",\n    \"?city kg:5120 ?mayor .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P131* wd:Q142;\",\n    \"wdt:P17 wd:Q142;\",\n    \"wdt:P131* wd:Q142;.\",\n    \"?city rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n    \"?city wdt:P131* wd:Q142;.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER EXISTS { ?city wdt:P131* wd:Q142. }\",\n    \"WITH { SELECT (MAX(?pop) AS ?maxPop) WHERE { ?city wdt:P1082 ?pop . FILTER (?pop != NaN) } } AS %maxPop\",\n    \"FILTER EXISTS { ?city wdt:P1082 ?pop . FILTER (?pop = ?maxPop) }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\",\n    \"   wdt:P17 wd:Q408 ;\",\n    \"   wdt:P1082 ?population .\",\n    \"FILTER(?population = (SELECT MAX(?pop) WHERE {\",\n    \"?city2 wdt:P31 wd:Q515 ;\",\n    \"   wdt:P17 wd:Q408 ;\",\n    \"   wdt:P1082 ?pop .\",\n    \"})).}\",\n    \"}\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5863 is instance of\nkg:8388 is subclass of\nkg:7831 is city\nkg:3186 is country\nkg:6561 is Australia\nkg:6373 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city a kg:7831 ;\",\n    \"   kg:6373 kg:6561 .\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q14058937 .\", \"# P26 is used for spouse of, and Q14058937 is the Wikidata ID for Jacques Chirac (President of France)\",\n    \"}\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2105 is Jacques Chirac\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"wd:Q2105 wdt:P26 ?person.\",\n    \"}\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9082 is Jacques Chirac\nkg:5189 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:is spouse .\",\n    \"[ kg:is Jacques Chirac ] kg:is spouse+ ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?government\",\n    \"WHERE {\",\n    \"?country wdt:P37 ?government ;\",\n    \"wdt:P31 wd:Q6256 .\",\n    \"VALUES ?country { wd:Q94 } # Q94 is the Wikidata item for South Africa\",\n    \"}\"\n  ]\n}\n"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q258 is South Africa\nwdt:P122 is basic form of government", "response": "{\n  \"query\": [\n    \"SELECT ?government WHERE {\",\n    \"wd:Q258 wdt:P122 ?government.\",\n    \"}\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is South Africa\nkg:3788 is basic form of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?southAfrica kg:5595 ?governmentType .\",\n    \"?governmentType kg:3788 ?formOfGovernment .\",\n    \"?resource ?p ?formOfGovernment .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?tower ?height WHERE {\",\n    \"  wd:Q186523 wdt:P1709 ?tower .\",\n    \"  ?tower wdt:P2044 ?height .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1207989 is Yokohama Marine Tower\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?towerHeight\",\n    \"WHERE {\",\n      \"?tower wdt:P2048 ?towerHeight .\",\n      \"?tower wd:about \\\"Q1207989\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8468 is Yokohama Marine Tower\nkg:6687 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6687 ?height .\",\n    \"?resource kg:is Yokohama Marine Tower .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P108 'Basketball player'^^wdt:P31 ;\", \"# P31 is used to specify the instance of a class, here we assume BasketballPlayer as a subclass of Person\",\n      \"?player wdt:P279* wd:Q8046.\" ,\"\\n# Q8046 is the Wikidata item for 'Basketball player'\",\n      \"?player wdt:P279* wd:Q5 .\" ,\"\\n# Ensuring ?player is a person\",\n      \"?player wdt:P2143 ?height .\", \"# P2143 is used to represent height in Wikidata\",\n      \"FILTER(?height = (SELECT MAX(?height) WHERE { ?player2 wdt:P279* wd:Q5 ; wdt:P2143 ?height2 }))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q3665646 ;\",\n      \"?player wdt:P2048 ?height .\",\n      \"FILTER NOT EXISTS {\",\n        \"?otherPlayer wdt:P106 wd:Q3665646 ;\",\n        \"?otherPlayer wdt:P2048 ?otherHeight .\",\n        \"?otherHeight > ?height\"\n     \t\t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8059 is occupation\nkg:4937 is basketball player\nkg:1141 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:occupation kg:4937 ;\",\n    \"   kg:height ?height .\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"wd:Q346 wdt:P40 ?language .\",\n    \"}\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q874 is Turkmenistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?language wdt:P2936 wd:Q874. \",\n    \"}\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8750 is Turkmenistan\nkg:5009 is language used", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5009 ?language .\",\n    \"?resource kg:8750 true .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P170 ?child .\",\n      \"wd:Q8962 wdt:P26 ?resource .\",\n      \"FILTER NOT EXISTS { ?resource wdt:P5300 ?deathEvent }\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5809 is Che Guevara\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q5809 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4932 is Che Guevara\nkg:0068 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?cheGuevara kg:4932 ?child.\",\n    \"?child kg:0068 ?resource.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P345 ?cannesAward;\",\n       \"wdt:P577 ?date;\",\n       \"wdt:P106/wdt:P279* ?director .\",\n      \"?cannesAward wdt:P1184 ?kaurismaki; # Grand Prix\",\n      \"?kaurismaki wdt:P39 wd:Q11424959.\" ,\n    \"}\",\n    \"FILTER(?director = wd:Q11424959) # Kaurismäki's QID\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q276186 is Aki Kaurismäki\nwdt:P166 is award received\nwd:Q844804 is Cannes Film Festival Grand Prix", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P166 wd:Q276186; wdt:P3395 ?award.\",\n      \"?award wdt:P136 wd:Q844804.\",\n      \"FILTER(?award = wd:Q844804)\",\n    \"}\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8458 is Aki Kaurismäki\nkg:1315 is award received\nkg:1066 is Cannes Film Festival Grand Prix", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:8458 ?kaurismaki .\",\n    \"?award kg:1315 ?prize .\",\n    \"?prize kg:1066 ?cannesGrandPrix .\",\n    \"FILTER(?kaurismaki = ?prize)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayorParty\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q5150991.\" , \"# City of Paris\",\n    \"?city wdt:P74 ?mayor.\" , \"# Mayor of the city\",\n    \"?mayor wdt:P102 ?mayorParty.\" , \"# Party to which the mayor belongs\",\n    \"FILTER(?city = wd:Q8369)\" , \"# Filter for Paris\"\n   \t,\n    \"}\"\n  ]\n}\n"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government\nwdt:P102 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n      \"wd:Q90 wdt:P6 ?mayor.\",\n      \"?mayor wdt:P102 ?party.\",\n    \"}\"\n  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2333 is Paris\nkg:5416 is head of government\nkg:5588 is member of political party", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?city kg:2333 \\\"Paris\\\" ;\",\n    \"   kg:5416 ?mayor .\",\n    \"?mayor kg:5588 ?party .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?driver WHERE {\",\n    \"  ?driver wdt:P279* wd:Q140869. # Find entities that are instances of Formula 1 driver\",\n    \"  ?driver wdt:P531 ?raceCount. # Get the number of races driven by the driver\",\n    \"  FILTER NOT EXISTS { ?otherDriver wdt:P279* wd:Q140869; wdt:P531 ?otherRaceCount . FILTER(?otherRaceCount > ?raceCount) } # Ensure this is the one with the most races\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10841764 is Formula One driver\nwdt:P1350 is number of matches played/races/starts", "response": "{\n  \"query\": [\n    \"SELECT ?driver\",\n    \"WHERE {\",\n      \"?driver wdt:P106 wd:Q10841764 ;\",\n      \"?driver wdt:P1350 ?raceCount .\",\n      \"FILTER NOT EXISTS {\",\n        \"?otherDriver wdt:P106 wd:Q10841764 ;\",\n        \"?otherDriver wdt:P1350 ?otherRaceCount .\",\n        \"?otherRaceCount > ?raceCount\",\n      \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6894 is occupation\nkg:7521 is Formula One driver\nkg:6339 is number of matches played/races/starts", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?driver\",\n    \"WHERE {\",\n    \"?driver kg:isOccupation kg:7521 ;\",\n    \"   kg:numberOfMatchesPlayed/races/starts ?raceCount .\",\n    \"}\",\n    \"ORDER BY DESC(?raceCount)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?sitecore wd:P31/wd:P279* wd:Q1428056.\" , \"# Sitecore is a software company\",\n    \"?sitecore wdt:P27 ?country.\" , \"# P27 is used for the country of origin\",\n    \"}\"\n  ]\n}\n"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2663195 is Sitecore\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?sitecore wdt:P17 ?country .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9915 is Sitecore\nkg:9456 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:9915 kg:isSitecore ?resource.\",\n    \"  ?resource kg:isCountry kg:9456.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace\",\n    \"WHERE {\",\n    \"?person wdt:P19 ?birthPlace ;\",\n    \"wdt:P735 \\\"Frank Sinatra\\\"@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40912 is Frank Sinatra\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P19 wd:Q40912.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4574 is Frank Sinatra\nkg:3148 is place of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4574 kg:3148 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 \\\"Velvet Goldmine\\\" ;\", \"># P3459 is the property for starring in a film.\",\n      \"?resource wdt:P161 ?movie .\", \"># P161 is the property for depicting in a creative work, used here to find actors in a movie.\",\n    \"}\",\n    \"FILTER(?resource = wd:Q82407)\" ,\"\\n\" ,\"\\t# Q82407 is the Wikidata ID for Christian Bale\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1481540 is Velvet Goldmine\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P161 ?resource.\",\n      \"?movie wd:P31/wd:P279* wd:Q1481540.\",\n      \"?resource wd:qid wd:Q45772.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1837 is Velvet Goldmine\nkg:2378 is cast member\nkg:2302 is Christian Bale", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:1837 \\\"Velvet Goldmine\\\" ;\",\n    \"   kg:2378 ?actor .\",\n    \"?actor kg:2302 \\\"Christian Bale\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?son\",\n    \"WHERE {\",\n    \"?son wdt:P26 wd:Q10985374.\" ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P22 is father\nwd:Q179150 is Sonny Bono\nwdt:P25 is mother\nwd:Q12003 is Cher", "response": "{\n  \"query\": [\n    \"SELECT ?son\",\n    \"WHERE {\",\n      \"wd:Q179150 wdt:P22 ?father.\",\n      \"?father wdt:P25 wd:Q12003.\",\n      \"?father wdt:P22 ?son.\",\n      \"?son wdt:P25 wd:Q12003.\"\n    ,\"}\"\n  ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8319 is father\nkg:6328 is Sonny Bono\nkg:8679 is mother\nkg:7963 is Cher", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?son\",\n    \"WHERE {\",\n    \"?father kg:isFather kg:6328 ;\",\n    \"   kg:hasChild ?son .\",\n    \"?mother kg:isMother kg:7963 ;\",\n    \"   kg:hasChild ?son .\",\n    \"FILTER (?father = kg:8319 && ?mother = kg:8679)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6256.\" , \"# Q6256 is the Wikidata item for Cameroon\",\n    \"?country wdt:P297 ?capital.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1009 is Cameroon\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P36 wd:Q1009 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9619 is Cameroon\nkg:9141 is capital", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9141 kg:9619.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P19 ?birthPlace ;\",\n    \"   wdt:P569 ?birthDate .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?resource = wd:Natalie_Portman)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37876 is Natalie Portman\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P19 wd:Q37876 ;\",\n                  \"wdt:P17 ?country .\",\n      \"FILTER(?country = wd:Q30)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2400 is Natalie Portman\nkg:5100 is place of birth\nkg:6353 is country\nkg:1050 is United States of America", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2400 kg:5100 ?placeOfBirth .\",\n    \"  ?placeOfBirth a kg:6353 ;\",\n    \"               kg:1050 \\\"United States of America\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?child WHERE {\",\n    \"  wd:MerylStreep wdt:P26 ?child. # P26 is the property for 'oldest child of'\",\n    \"  FILTER(?child != wd:MerylStreep) # Ensure we don't return Meryl Streep herself\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q873 is Meryl Streep\nwdt:P40 is child\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?oldestChild\",\n    \"WHERE {\",\n    \"?oldestChild wdt:P40 wd:Q873 ;\",\n    \"   wdt:P569 ?birthDate .\",\n    \"{\",\n    \"?child wdt:P40 wd:Q873 ;\",\n    \"   wdt:P569 ?otherBirthDate .\",\n    \"}\",\n    \"FILTER(?birthDate < ?otherBirthDate)\",\n    \"}\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9386 is Meryl Streep\nkg:7223 is child\nkg:3308 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?oldestChild\",\n    \"WHERE {\",\n    \"  kg:9386 kg:7223 ?child .\",\n    \"  ?child kg:3308 ?dob .\",\n    \"  FILTER NOT EXISTS { kg:9386 kg:7223 ?otherChild . ?otherChild kg:3308 ?otherDob . ?otherDob < ?dob }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?show\",\n    \"WHERE {\",\n    \"?show wdt:P361 wd:Q98527 ;\", \"># Q98527 is the Wikidata ID for Walt Disney Company\",\n    \"wdt:P345 ?productionRun .\",\n    \"?productionRun wdt:P1630 ?show .\", \"># P1630 is the property for 'work created by'\",\n    \"FILTER(?show != wd:Q98527) # Exclude Walt Disney Company itself from results\"\n   ,\"}\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7725310 is series of creative works\nwdt:P170 is creator\nwd:Q8704 is Walt Disney", "response": "{\n  \"query\": [\n    \"SELECT ?show\",\n    \"WHERE {\",\n      \"?show wdt:P31 wd:Q7725310 ;\", \"# The show is a television series or program\",\n      \"   wdt:P170 wd:Q8704 .         # Walt Disney created the show\"\n   ,\"}\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is instance of\nkg:2217 is subclass of\nkg:4357 is series of creative works\nkg:2797 is creator\nkg:6368 is Walt Disney", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?show\",\n    \"WHERE {\",\n    \"?show a kg:4357 ;\",\n    \"   kg:2797 kg:6368 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P39 ?militaryService.\",\n      \"?resource p:P108 ?presidencyStatement.\",\n      \"?presidencyStatement ps:P108 wd:Q7687.\" ,\n      \"?militaryService wdt:P279* wd:Q14852.\" ,\n      \"FILTER(?resource != wd:Q7687)\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11817 is Andrew Jackson\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q11817 wdt:P607 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is Andrew Jackson\nkg:6744 is conflict", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is ?person ;\",\n    \"   kg:isConflict ?conflict .\",\n    \"?person rdfs:label \\\"Andrew Jackson\\\"@en ;\",\n    \"?conflict rdfs:label \\\"war\\\"@en .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Titanic wdt:P571 ?completionDate .\",\n    \"  BIND(wd:Titanic AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25173 is Titanic\nwdt:P729 is service entry", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q25173 wdt:P729 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2084 is Titanic\nkg:4238 is service entry", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4238 \\\"service entry\\\" ;\",\n    \"   kg:2084 \\\"Titanic\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P166 ?award .\",\n      \"?award wdt:P279* wd:Q83699 .\", \"# Q83699 is the Nobel Prize in Physics\",\n      \"?resource wdt:P2150 \\\"Tesla\\\"@en .\"\n    ,\n    \"FILTER NOT EXISTS { ?resource wdt:P580 ?date }\" ,\"\\n# Exclude living people if any\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9036 is Nikola Tesla\nwdt:P166 is award received\nwd:Q38104 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q9036 wdt:P166 ?award.\",\n      \"?award wdt:P31 wd:Q38104.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9199 is Nikola Tesla\nkg:2395 is award received\nkg:3285 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?tesla kg:is ?entity1.\",\n    \"?entity1 kg:is ?awardReceived.\",\n    \"?awardReceived kg:is ?noblePrizeInPhysics.\",\n    \"}\",\n    \"FILTER(?entity1 = kg:9199, ?awardReceived = kg:2395, ?noblePrizeInPhysics = kg:3285)\"\n  ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q6257972; # State is a subdivision of Mexico\",\n    \"wdt:P1376 ?country. # The country is Mexico\",\n    \"VALUES ?country { wd:Q39 }} # Q39 is the Wikidata ID for Mexico\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q15149663 is state of Mexico", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"?state wdt:P31 wd:Q15149663. \",\n    \"}\"\n  ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1188 is instance of\nkg:8553 is state of Mexico", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?state kg:isInstanceOf kg:8553.\",\n    \"?state kg:isStateOfMexico ?resource.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1287 \\\"The Lego Movie\\\" ;\", \"># P1287 is the property for 'production budget' in Wikidata\",\n      \"?resource wdt:P31/wdt:P279* wd:Q164015.\" ,\"\\n# Q164015 is the item for 'film'\",\n    \"}\"\n  ]\n}\n"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2608065 is The Lego Movie\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P2130 wd:Q2608065 .\",\n    \"}\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7174 is The Lego Movie\nkg:4576 is cost", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:4576 ?cost .\",\n    \"?movie kg:7174 \\\"The Lego Movie\\\" .\",\n    \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?work wdt:P361 wd:Q24598708.\" , \"># Replace with the correct item identifier for Harold and Maude movie or show\"\n     \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P671 ?composer.\" ,\n      \"?composer wdt:P31/wdt:P279* wd:Q5 .\" ,\"\\n\" , \"# Ensure the result is a person\"\n   \t,\n    \"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q368577 is Harold and Maude\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?film wdt:P86 ?composer .\",\n    \"?film wd:P31 wd:Q368577 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5213 is Harold and Maude\nkg:9296 is composer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?movie kg:5213 \\\"Harold and Maude\\\" .\",\n    \"?movie kg:9296 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n      \"?city wdt:P1082 ?population .\",\n      \"{ SELECT ?city (MIN(?population) as ?minPopulation) } UNION { SELECT ?city (MAX(?population) as ?maxPopulation) }\",\n      \"FILTER (?population = ?maxPopulation)\",\n      \"?city rdfs:label ?label FILTER (lang(?label) = 'en')\",\n    \"}\",\n    \"ORDER BY ASC(?minPopulation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515 ;\",\n    \"   wdt:P1082 ?population .\",\n    \"}\",\n    \"ORDER BY ASC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3143 is instance of\nkg:9876 is city\nkg:4366 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city a kg:9876 ;\",\n    \"   kg:4366 ?population .\",\n    \"}\",\n    \"ORDER BY ASC(?population)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?burialSite\",\n    \"WHERE {\",\n    \"?person wdt:P1076 ?burialSite. \",\n    \"?person wdt:P358 \\\"Syngman Rhee\\\"@en. \",\n    \"}\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171684 is Syngman Rhee\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?burialSite\",\n    \"WHERE {\",\n    \"?entity wdt:P119 ?burialSite .\",\n    \"?entity wd:Q171684 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3345 is Syngman Rhee\nkg:9861 is place of burial", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:3345 kg:9861 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"?player wdt:P1476 'Real Madrid C.F.' ;\", \"# P1476 is the property for 'plays for'\",\n    \"wdt:P735 ?nationality . # Optional: to filter by nationality if needed\",\n    \"FILTER EXISTS {\",\n    \"?player wdt:P78 'Neymar Jr' . # P78 is the property for 'given name'\",\n    \"} }\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q142794 is Neymar\nwdt:P54 is member of sports team\nwd:Q8682 is Real Madrid CF", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P54 wd:Q8682 ;\",\n               \"wdt:P106 wd:Q142794 .\",\n    \"}\"\n  ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8232 is Neymar\nkg:5537 is member of sports team\nkg:7777 is Real Madrid CF", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?player kg:5537 ?team .\",\n    \"?player kg:8232 \\\"Neymar\\\" .\",\n    \"?team kg:7777 \\\"Real Madrid CF\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book ?author\",\n    \"WHERE {\",\n      \"?book wdt:P690 \\\"The Pillars of the Earth\\\"@en.\" , \"# P690 is used for authorship in this context\",\n      \"?book wdt:P31 wd:Q5772847.\" , \"# Q5772847 is the item identifier for books\",\n      \"?author wdt:P50 ?book. \" , \"# P50 is used to link authors to their works\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?book ?author WHERE {\",\n    \"?book wd:PID [ wd:QID wd:Q1163227 ];\",\n    \"?author wdt:P50 ?book .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7222 is The Pillars of the Earth\nkg:7844 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book kg:7222 'The Pillars of the Earth'.\",\n    \"?book kg:7844 ?author.\",\n    \"?author a ?resourceType. # Assuming resources are instances of some type\",\n    \"BIND(?author AS ?resource) # Return the author as the resource\"\n   ,\"}\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person1 wdt:P27 / wdt:P19 ?place .\",\n      \"?person2 wdt:P27 / wdt:P19 ?place .\",\n      \"?person1 wdt:P69* wd:Q8450 .\",\n      \"?person2 wdt:P69* wd:Q8450 .\",\n      \"FILTER(?person1 != ?person2)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P22 is father\nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P25 is mother\nwd:Q36812 is William, Prince of Wales\nwdt:P22 is father\nwd:Q36812 is William, Prince of Wales\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?father wdt:P22 wd:Q152316 ; wdt:P22 wd:Q36812 .\",\n      \"?mother wdt:P25 wd:Q152316 ; wdt:P25 wd:Q36812 .\",\n      \"VALUES ?resource { wd:Q152316 wd:Q36812 }\",\n    \"}\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0241 is Prince Harry, Duke of Sussex\nkg:9891 is father\nkg:0241 is Prince Harry, Duke of Sussex\nkg:0917 is mother\nkg:3209 is William, Prince of Wales\nkg:9891 is father\nkg:3209 is William, Prince of Wales\nkg:0917 is mother", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0241 kg:9891 ?father.\",\n    \"  kg:3209 kg:9891 ?father.\",\n    \"?father kg:0917 ?mother.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"?thesis wdt:P527 ?supervisor .\",\n    \"?thesis wdt:P8106 \\\"Albert Einstein\\\"@en .\",\n    \"FILTER EXISTS { ?thesis wdt:P355 ?einstein }\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P184 is doctoral advisor", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"wd:Q937 wdt:P184 ?supervisor\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3951 is Albert Einstein\nkg:5112 is doctoral advisor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?supervisor WHERE {\",\n    \"  kg:3951 kg:5112 ?supervisor .\",\n    \"}\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102865 wdt:P938 ?breakingBadEpisodes .\",\n    \"  wd:Q47534 wdt:P938 ?gameOfThronesEpisodes .\",\n    \"  FILTER(?breakingBadEpisodes > ?gameOfThronesEpisodes)\",\n    \"  VALUES ?resource { wd:Q102865 wd:Q47534 }\",\n    \"}\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Breaking Bad\nwdt:P1113 is number of episodes\nwd:Q23572 is Game of Thrones\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?breakingBad wdt:P1113 ?episodesBreakingBad .\",\n      \"?gameOfThrones wdt:P1113 ?episodesGameOfThrones .\",\n      \"?breakingBad wd:Q1079 ;\",\n      \"   wdt:P1113 ?episodesBreakingBad .\",\n      \"?gameOfThrones wd:Q23572 ;\",\n      \"   wdt:P1113 ?episodesGameOfThrones .\",\n      \"BIND(?episodesBreakingBad AS ?breakingBadEpisodes)\",\n      \"BIND(?episodesGameOfThrones AS ?gameOfThronesEpisodes)\",\n      \"?resource ?property ?value FILTER(?breakingBadEpisodes > ?gameOfThronesEpisodes)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7410 is Breaking Bad\nkg:4526 is number of episodes\nkg:6491 is Game of Thrones\nkg:4526 is number of episodes", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?breakingBad kg:4526 ?episodesBreakingBad .\",\n    \"?gameOfThrones kg:4526 ?episodesGameOfThrones .\",\n    \"{ SELECT (MAX(?episodesBreakingBad) AS ?maxEpisodesBreakingBad)} UNION { SELECT (MIN(?episodesBreakingBad) AS ?maxEpisodesBreakingBad)}\",\n    \"{ SELECT (MAX(?episodesGameOfThrones) AS ?maxEpisodesGameOfThrones)} UNION { SELECT (MIN(?episodesGameOfThrones) AS ?maxEpisodesGameOfThrones)}\",\n    \"FILTER (?maxEpisodesBreakingBad > ?maxEpisodesGameOfThrones)\",\n    \"?resource [] [] .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration\",\n    \"WHERE {\",\n      \"?artist wdt:P170 wd:Q6328954.\" , \"# Vincent van Gogh\",\n      \"?artist wdt:P141 ?inspiration.\",\n      \"?inspiration a wikibase-item.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5582 is Vincent van Gogh\nwdt:P737 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration WHERE {\",\n    \"wd:Q5582 wdt:P737 ?inspiration .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4487 is Vincent van Gogh\nkg:9725 is influenced by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?inspiration\",\n    \"WHERE {\",\n    \"  kg:4487 kg:9725 ?inspiration.\",\n    \"}\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?building\",\n    \"WHERE {\",\n      \"?building wdt:P31* wd:Q36972180 ;\", \"># Building entity type (structure)\",\n      \"wdt:P170 ?parentBuilding .\", \"># Parent building property, to filter out Burj Khalifa itself\",\n      \"?parentBuilding wdt:P170/wdt:P170* wd:Q36972180 .\", \"># Ensure the parent is also a building and not Burj Khalifa\",\n      \"wdt:P40 ?floors ;\", \"># Number of floors property\",\n      \"wdt:P111 ?burjKhalifa .\", \"># Burj Khalifa property, to filter out Burj Khalifa itself\",\n      \"FILTER(?burjKhalifa != wd:Q23957684)\" ,\"\\n# Exclude Burj Khalifa from the result\"\n    ,\n    \"ORDER BY DESC(?floors)\",\n    \"LIMIT 1\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12495 is Burj Khalifa\nwdt:P1101 is floors above ground\nwdt:P1101 is floors above ground", "response": "{\n  \"query\": [\n    \"SELECT ?building\",\n    \"WHERE {\",\n      \"?building wdt:P1101 ?floors .\",\n      \"?building wdt:P31/wdt:P279* wd:Q12495 .\",\n      \"FILTER NOT EXISTS { ?otherBuilding wdt:P1101 ?otherFloors . FILTER(?otherFloors > ?floors) }\",\n    \"}\",\n    \"ORDER BY DESC(?floors)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1982 is Burj Khalifa\nkg:1365 is floors above ground\nkg:1365 is floors above ground", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?building\",\n    \"WHERE {\",\n    \"?building kg:1365 ?floors .\",\n    \"{ kg:1982 kg:1365 ?burjKhalifaFloors } UNION { ?burjKhalifa kg:1365 ?burjKhalifaFloors }\",\n    \"FILTER (?floors > ?burjKhalifaFloors)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?cost\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?cost .\",\n      \"?movie rdfs:label \\\"Pulp Fiction\\\"@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q104123 is Pulp Fiction\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q104123 wdt:P2130 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8346 is Pulp Fiction\nkg:1348 is cost", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:isPulpFiction kg:8346.\",\n    \"?movie kg:hasCost ?cost .\",\n    \"?cost kg:isCost kg:1348.\",\n    \"?resource ?predicate ?object .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q21508964 ;\", \"# Proinsulin is a protein (P279) of class Q21508964 which is a protein\",\n      \"wdt:P279 ?proteinClass .\",\n      \"FILTER(?proteinClass = wd:Q13447)\" ,\"\\n\" ,\"\\n\" ,\"}\" ,\"\\n\"\n    ]\n  }\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q426173 is proinsulin\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8054 is protein", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q8054 ;\",\n               \"wdt:P279* wd:Q426173 .\",\n    \"}\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0193 is proinsulin\nkg:6381 is instance of\nkg:3035 is subclass of\nkg:2583 is protein", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6381 kg:0193 ;\",\n    \"   a kg:2583 .\",\n    \"}\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10623 wdt:P279* ?language.\",\n    \"  wd:Q48562 wdt:P279* ?language.\",\n    \"  FILTER(?language != wd:Q10623)\",\n    \"  FILTER(?language != wd:Q48562)\",\n    \"  VALUES (?language) { wd:Q10623 wd:Q48562 }\",\n    \"  BIND(wd:Q10623 AS ?urdu)\",\n    \"  BIND(wd:Q48562 AS ?persian)\",\n    \"  ?resource wdt:P31/wdt:P279* ?urdu.\",\n    \"  ?resource wdt:P31/wdt:P279* ?persian.\"\n   \t,\n    \"}\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1617 is Urdu\nwdt:P279 is subclass of\nwd:Q9168 is Persian\nwdt:P279 is subclass of", "response": "{\n \t  \t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?resource wdt:P279* wd:Q1617 ;\\n\\twdt:P279* wd:Q9168 .\\n}\",\n  \t\t\t\t\t\"format\" ,\"%s\"]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9687 is Urdu\nkg:9521 is subclass of\nkg:7561 is Persian\nkg:9521 is subclass of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?urdu kg:isUrdu ?value.\",\n    \"?persian kg:isPersian ?value.\",\n    \"?urdu kg:isSubclassOf* ?persian.\",\n    \"?resource a ?type.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?actor .\", \"# P345 is used for starring in movies\",\n      \"?movie wdt:P1629 wd:Q78099 .\", \"# Q78099 is the Wikidata ID for Benicio del Toro\",\n      \"FILTER regex(str(?movie), \\\"spanish\\\", \\\"i\\\")\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q193668 is Benicio del Toro\nwdt:P495 is country of origin\nwd:Q29 is Spain\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 ;\",\n             \"wdt:P162 wd:Q193668 ;\",\n             \"wdt:P495 wd:Q29 .\",\n      \"?movie wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5537 is instance of\nkg:1197 is film\nkg:3789 is producer\nkg:7757 is Benicio del Toro\nkg:8501 is country of origin\nkg:8199 is Spain\nkg:0642 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:3789 ?producer .\",\n    \"?producer kg:7757 kg:0642 .\",\n    \"?movie kg:8501 kg:8199 .\",\n    \"?movie kg:0642 ?actor .\",\n    \"}\",\n    \"VALUES ?producer { kg:7757 }\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake1 ?lake2\",\n    \"WHERE {\",\n      \"?lake1 wdt:P31 wd:Q968457.\" ,\"%s is a lake\",\n      \"?lake2 wdt:P31 wd:Q968457.\" ,\"%s is a lake\",\n      \"?lake1 wdt:P2099 ?size1.\" ,\n      \"?lake2 wdt:P2099 ?size2.\" ,\n      \"?size1 wdt:P1089 ?area1.\" ,\n      \"?size2 wdt:P1089 ?area2.\" ,\n      \"FILTER(?lake1 != ?lake2 && ?area1 > ?area2)\",\n      \"VALUES ?lake1 { wd:Q634\" ,\"%s is Lake Baikal\",\n                    \"goes here if you have the ID of Great Bear Lake\" ,\"%s is Great Bear Lake\" ]}\n   \t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5513 is Lake Baikal\nwdt:P2046 is area\nwd:Q5525 is Great Bear Lake\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?lakeBaikal ?greatBearLake\",\n    \"WHERE {\",\n      \"?lakeBaikal wdt:P2046 ?area1 .\",\n      \"?greatBearLake wdt:P2046 ?area2 .\",\n      \"VALUES ?lakeBaikal { wd:Q5513 }\",\n      \"VALUES ?greatBearLake { wd:Q5525 }\",\n    \"}\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4738 is Lake Baikal\nkg:3598 is area\nkg:5245 is Great Bear Lake\nkg:3598 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4738 kg:3598 ?baikalArea .\",\n    \"  kg:5245 kg:3598 ?greatBearLakeArea .\",\n    \"  FILTER(?baikalArea > ?greatBearLakeArea)\",\n    \"  VALUES ?resource { kg:4738 }\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?book\",\n    \"WHERE {\",\n      \"?book wdt:P31/wdt:P279* wd:Q846059.\" ,\"%s\",\n      \"?book wdt:P577 ?publicationDate.\" ,\n      \"?work wdt:P50 ?author.\" ,\n      \"wd:Q10202 wdt:P31 wd:Q1196980.\" ,\"%s\",\n      \"?work wdt:P577 ?publicationDate.\" ,\n      \"FILTER(?book != ?work)\" ,\n    \"}\",\n    \"ORDER BY DESC(?publicationDate)\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1564644 is Foundation series\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?book\",\n    \"WHERE {\",\n    \"?book wdt:P527 wd:Q1564644 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7758 is Foundation series\nkg:4983 is has part(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?book\",\n    \"WHERE {\",\n    \"?series a kg:Foundation_series ;\",\n    \"   kg:has_part_s* ?book .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P19 ?birthPlace .\",\n      \"?resource rdfs:label ?name FILTER(LANG(?name) = 'en') .\",\n      \"VALUES ?resource { wd:Q8706 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1339 is Johann Sebastian Bach\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q1339 wdt:P19 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9729 is Johann Sebastian Bach\nkg:2247 is place of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2247 ?placeOf_birth .\",\n    \"?resource kg:9729 \\\"Johann Sebastian Bach\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515.\" , \"># City is a type of AdministrativeDivision (Q515)\",\n    \"?city wdt:P625 ?coordinates.\" , \"># Coordinates are optional for this query but can be added if needed\",\n    \"?metro wikibase:sitelink 'oldest running metro'@en.\" ,\n    \"?metro wdt:P31 wd:Q94870.\" , \"># Metro is a type of TransportSystem (Q94870)\",\n    \"?metro wdt:P131 ?city.\" , \"># The metro is located in the city\",\n    \"FILTER NOT EXISTS { ?metro wdt:P576 [] . }\" , \"># Exclude metros that have an end date, meaning they are not currently running\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5503 is rapid transit\nwdt:P571 is inception\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?city ?cityLabel\",\n    \"WHERE {\",\n      \"?metro wdt:P31 wd:Q5503 ;\",\n             \"wdt:P571 ?inceptionDate ;\",\n             \"wdt:P131 ?city .\",\n      \"?city rdfs:label ?cityLabel .\",\n      \"?city wdt:P31 wd:Q6962.\" ,\n    \"}\",\n    \"ORDER BY ASC(?inceptionDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9312 is instance of\nkg:2195 is rapid transit\nkg:4613 is inception\nkg:2724 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?metro kg:isInstanceOf kg:2195 ;\",\n    \"   kg:hasInception ?inception .\",\n    \"?city kg:isLocatedInTheAdministrativeTerritorialEntity ?metro .\",\n    \"}\",\n    \"ORDER BY ASC(?inception)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q30285 wdt:P73 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P287 is designed by", "response": "{\n  \"query\": [\n    \"SELECT ?designer\",\n    \"WHERE {\",\n    \"?bridge wdt:P287 ?designer .\",\n    \"wd:Q125006 wdt:P287 ?bridge .\",\n    \"}\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0242 is Brooklyn Bridge\nkg:9045 is designed by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?designer\",\n    \"WHERE {\",\n    \"  kg:0242 kg:9045 ?designer .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource wdt:P306 ?eurasia .\",\n      \"FILTER(?eurasia = wd:Q574)\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5401 is Eurasia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1082 ?population .\",\n    \"?resource wdt:P31 wd:Q5401 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Eurasia\nkg:7501 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7501 ?population .\",\n    \"?resource kg:8473 true .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1082 ?population .\",\n      \"?resource rdfs:label \\\"Melbourne, Florida\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q949779 is Melbourne\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q949779 wdt:P1082 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6378 is Melbourne\nkg:3570 is population", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3570 ?population .\",\n    \"?resource kg:6378 \\\"Melbourne, Florida\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?mountain wdt:P17 ?country ;\",\n    \"wdt:P2093 'Mount Everest'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q513 is Mount Everest\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"wd:Q513 wdt:P17 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6089 is Mount Everest\nkg:8406 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?mountEverest kg:8406 ?country .\",\n    \"}\",\n    \"VALUES ?mountEverest { kg:6089 }\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?artist ?movement\",\n    \"WHERE {\",\n      \"?painting wdt:P170 ?artist ;\",\n      \"wdt:P170 ?work .\",\n      \"?work rdfs:label \\\"The Three Dancers\\\"@en .\",\n      \"?artist wdt:P136 ?movement .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3235867 is The Three Dancers\nwdt:P170 is creator\nwdt:P135 is movement", "response": "{\n  \"query\": [\n    \"SELECT ?artist ?movement\",\n    \"WHERE {\",\n      \"?painting wdt:P170 ?artist ;\",\n      \"   wdtn:Q3235867 .\",\n      \"?artist wdt:P135 ?movement .\",\n    \"}\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2470 is The Three Dancers\nkg:6531 is creator\nkg:8386 is movement", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?artist ?movement\",\n    \"WHERE {\",\n    \"?painting kg:2470 'The Three Dancers' .\",\n    \"?painting kg:6531 ?artist .\",\n    \"?artist kg:8386 ?movement .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q24916 wdt:P580 ?start.\",\n    \"  BIND(wd:Q24916 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8641370 is Operation Overlord\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P580 ?startTime .\",\n    \"?resource wd:P580 ?startTime .\",\n    \"?resource wd:Q8641370 ?operationOverlord .\",\n    \"FILTER(?operationOverlord = wd:Q8641370)\"\n   ,\"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2567 is Operation Overlord\nkg:0436 is start time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0436 ?startTime .\",\n    \"?resource kg:2567 ?operationOverlord.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the bridge with the longest span?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the bridge with the longest span?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge\",\n    \"WHERE {\",\n    \"?bridge wdt:P276 ?span.\" , \"# P276 is used for 'has longest span'\",\n    \"?bridge rdfs:label ?label FILTER (lang(?label) = 'en').\" ,\n    \"}\",\n    \"ORDER BY DESC(?span)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is there a video game called Battle Chess?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is there a video game called Battle Chess?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game\",\n    \"WHERE {\",\n    \"?game wdt:P31 wd:Q78764952 ;\", \"># Q78764952 is the item identifier for video games in Wikidata\",\n    \"wdt:P7037 ?title .\", \"># P7037 is the property for the name of a game\",\n    \"FILTER(CONTAINS(LCASE(?title), \\\"battle chess\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  wd:Q162573 wdt:P108 ?buried.\",\n    \"  ?buried a wd:Q5.\"\n   ,\"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P119 is place of burial\nwd:Q3411252 is Pyramid G1-a", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P119 wd:Q3411252 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8446 is place of burial\nkg:5206 is Pyramid G1-a", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8446 kg:5206.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?aristotle wdt:P108 ?influence.\",\n      \"?influence wdt:PwikiPageWikiLink ?socrates.\",\n      \"?resource ?p ?o.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q868 is Aristotle\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P737 wd:Q868 .\",\n      \"FILTER(?resource = wd:Q913).\"\n    ,\"}\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3713 is Aristotle\nkg:3382 is influenced by\nkg:4528 is Socrates", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3382 kg:4528 ;\",\n    \"       a kg:3713.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P195 ?childCount .\",\n      \"?resource p:P195 ?statement .\",\n      \"?statement ps:P195 ?childName ;\",\n      \"   pq:P2864 \\\"Benjamin Franklin\\\"@en .\",\n      \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34969 is Benjamin Franklin\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child\",\n    \"WHERE {\",\n    \"?person wdt:P31/wdt:P279* wd:Q34969 ;\",\n    \"   wdt:P40 ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Benjamin Franklin\nkg:3793 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:3786 kg:3793 ?child .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q6917 wdt:P2094 ?height .\",\n    \"  BIND(wd:Q6917 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41421 is Michael Jordan\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P2048 ?height .\",\n    \"?resource wdtype:P instance of wd:Q41421 .\",\n    \"}\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4261 is Michael Jordan\nkg:0068 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0068 ?height .\",\n    \"?resource kg:4261 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q15263 wdt:P6250 ?headquarters.\",\n    \"  ?headquarters wdt:P625 ?city.\",\n    \"  FILTER(?city = wd:Q947)}\"\n  ]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q184560 is Secret Intelligence Service\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"?organization wdt:P159 wd:Q184560 ;\",\n    \"   wdt:P31/wdt:P279* wd:Q515 ;\",\n    \"   rdfs:label ?label .\",\n    \"FILTER (lang(?label) = 'en')}\",\n    \"}\"\n  ]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1223 is Secret Intelligence Service\nkg:2929 is headquarters location\nkg:9030 is instance of\nkg:4329 is city", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city \",\n    \"WHERE {\",\n    \"?headquarters kg:2929 ?mi6 ;\",\n    \"   a kg:1223 .\",\n    \"?headquarters kg:9030 ?city ;\",\n    \"   a kg:4329 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P395 \\\"Family Guy\\\"@en .\",\n      \"?episode wdt:P161 ?resource .\",\n      \"?episode wdt:P813 ?creator .\",\n      \"?creator rdfs:label ?name .\",\n      \"FILTER (lang(?name) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5930 is Family Guy\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"wd:Q5930 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0871 is Family Guy\nkg:4258 is creator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4258 ?creator .\",\n    \"?creator kg:0871 \\\"Family Guy\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"wd:Q12367 wdt:P22 ?parent .\", \"@en\",\n    \"?parent wdt:P22 ?grandchild .\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"wd:Q303 wdt:P40 ?child .\",\n    \"?child wdt:P40 ?grandchild .\",\n    \"}\",\n    \"VALUES ?grandchild {}\"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is Elvis Presley\nkg:5388 is child\nkg:5388 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?grandchild\",\n    \"WHERE {\",\n    \"  kg:6814 kg:5388 ?child .\",\n    \"  ?child kg:5388 ?grandchild .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q6227980;\",\n      \"?resource wdt:P424 ?dissolutionDate.\",\n      \"FILTER(?dissolutionDate = wd:T13562598) # 1644-04-25\",\n    \"}\"\n  ]\n}\n"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9903 is Ming dynasty\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q9903 ;\",\n                  \"wdt:P576 ?dissolutionDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4661 is Ming dynasty\nkg:6940 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6940 ?dissolutionDate .\",\n    \"?resource kg:4661 true .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?conflict\",\n    \"WHERE {\",\n    \"?person wdt:P569 ?birthTime ;\", \"# Birth date of T.E. Lawrence\",\n    \"wdt:P188 \\\"T. E. Lawrence\\\"@en .\", \"# Occupation or role statement linking to T.E. Lawrence\",\n    \"?conflict wdt:P31 wd:Q2405769 ;\", \"# The conflict is a military conflict\",\n    \"wdt:P800 ?person .\", \"# The person participated in the conflict\"\n   \t,\n    \"FILTER NOT EXISTS { ?person wdt:P570 ?deathTime }\" ,\"\\n# Exclude deceased persons, as Lawrence of Arabia is not deceased.\"\n   \t,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?conflict)\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170596 is T. E. Lawrence\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"wd:Q170596 wdt:P607 ?conflict.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3636 is T. E. Lawrence\nkg:6895 is conflict", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?conflict\",\n    \"WHERE {\",\n    \"?entity kg:3636 ?conflict .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P337 ?timezone .\",\n      \"?resource rdfs:label \\\"San Pedro de Atacama\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187893 is San Pedro de Atacama\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?place wd:Q187893 .\",\n    \"?place wdt:P421 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7559 is San Pedro de Atacama\nkg:1880 is located in time zone", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?place kg:7559 ?sanPedroDeAtacama .\",\n    \"?place kg:1880 ?timezone .\",\n    \"?timezone a ?resourceType ;\",\n    \"   rdfs:label ?timezoneLabel .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdtn:diePlace / wdt:P31/wdt:P279* wd:Q5 ;\",\n      \"   rdfs:label \\\"Bruce Carver\\\"@en .\",\n      \"?person wdt:P570 ?deathTime .\",\n      \"?deathEvent wdt:P570 ?deathTime ;\",\n      \"   wdt:P42 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4977246 is Bruce Carver\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P509 wd:Q4977246 .\",\n      \"wd:Q4977246 wdt:P509 ?resource .\"\n    ,\"}\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2845 is Bruce Carver\nkg:5174 is cause of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:2845 ?causeOfDeath .\",\n    \"?person kg:5174 ?resource .\",\n    \"FILTER(?person = kg:2845)\",\n    \"}\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?place ?placeLabel\",\n    \"WHERE {\",\n      \"?place wdt:P1708 wd:Q1536942.\" ,\"%s\",\n      \"?place wdt:P856 ?website.}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n \t \t \t \t \t \t \t \t \t \t"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?place ?website\",\n    \"WHERE {\",\n      \"?person wdt:P27 wd:Q36; //wdt:P20/wdt:P136* wd:Q91. \",\n      \"?place wdt:P136 ?person.\",\n      \"?place wdt:P856 ?website.\"\n    ,\n    \"FILTER EXISTS { ?place wdt:P136 wd:Q91 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1907 is Abraham Lincoln\nkg:3231 is place of death\nkg:6446 is official website", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?abrahamLincoln kg:3231 ?placeOfDeath .\",\n    \"?placeOfDeath kg:6446 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P172 ?child .\",\n      \"wd:Q962 wdt:P27 ?resource .\",\n      \"FILTER NOT EXISTS { ?resource wdt:P31/wdt:P279* wd:Q5 }\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"wd:Q303 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5360 is Elvis Presley\nkg:0568 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?elvisPresley kg:5360 <Elvis_Presley> .\",\n    \"?elvisPresley kg:0568 ?child .\",\n    \"?child a ?resourceType .\",\n    \"BIND(?resourceType AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q7838;\",\n      \"wdt:P50 wd:Q7839.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwd:Q13133 is Michelle Obama", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q76 wdt:P26 ?spouse.\",\n      \"?spouse wd:Q13133 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7320 is Barack Obama\nkg:3323 is spouse\nkg:0032 is Michelle Obama", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:7320 kg:3323 ?resource.\",\n    \"  ?resource kg:0032 \\\"Michelle Obama\\\".\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?song ?artist WHERE {\",\n    \"  ?song wdt:P361 \\\"Hotel California\\\" .\",\n    \"  ?song wdt:P69 ?artist .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q780394 is Hotel California\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?song wdt:P86 ?composer ;\",\n    \"   wdsgn:subject wd:Q780394 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7168 is Hotel California\nkg:0509 is composer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?song kg:7168 \\\"Hotel California\\\" .\",\n    \"?song kg:0509 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital\",\n    \"WHERE {\",\n    \"?country wdt:P30 'Canada'^^wdt:P31 wd:Q92876 ;\",\n    \"   wdt:P36 ?capital .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P36 wd:Q16 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0044 is Canada\nkg:5651 is capital", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5651 kg:0044.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515;\",\n    \"wdt:P625 'Tel Aviv, Israel'^^xsd:string ;\",\n    \"wdt:P74 ?mayor.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33935 is Tel Aviv\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q33935 ;\",\n    \"   wdt:P6 ?mayor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6114 is Tel Aviv\nkg:1344 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?telAviv kg:6114 \\\"Tel Aviv\\\" ;\",\n    \"   kg:1344 ?mayor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P37 ?governmentType .\",\n      \"?resource wdt:P31 wd:Q6256 .\", \"># Q6256 is the Wikidata item for Russia\",\n    \"}\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q159 is Russia\np:P122 is basic form of government\nps:P122 is basic form of government\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?government\",\n    \"WHERE {\",\n    \"?entity wdt:p:P122 ?gov .\",\n    \"?gov wdt:ps:P122 ?government .\",\n    \"?entity wdt:wdt:P31 wd:Q159 .\",\n    \"FILTER NOT EXISTS { ?gov wdt:pq:P582 ?endTime }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0251 is Russia\nkg:2654 is basic form of government\nkg:5180 is basic form of government\nkg:6647 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?country kg:0251 kg:6647 ;\", \"># kg:0251 is the resource for Russia\",\n    \"  ?country ?govtProperty ?governmentForm .\",\n    \"?govtProperty kg:2654 \\\"basic form of government\\\" ;\", \"# kg:2654 represents 'basic form of government'\",\n    \"              kg:5180 \\\"basic form of government\\\" .\", \"# kg:5180 also represents 'basic form of government'\",\n    \"?governmentForm kg:6647 ?endTime .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?language (COUNT(?language) AS ?count) WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\" , \"# Q6256 is the Wikidata ID for Colombia\",\n    \"  ?country wdt:P495 ?language.\" , \"# P495 is the property for languages spoken in a country\",\n    \"}\",\n    \"GROUP BY ?language\",\n    \"ORDER BY DESC(?count)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q739 is Colombia\nwdt:P31 is instance of\nwd:Q34770 is language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?colombia wdt:P31 wd:Q739 .\",\n    \"?language wdt:P31 wd:Q34770 .\",\n    \"?colombia wdt:P425 ?language .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t\t\t \t\t"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4761 is Colombia\nkg:0115 is instance of\nkg:2850 is language", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?colombia kg:0115 kg:4761 ;\",\n    \"   ?property ?language .\",\n    \"?language a kg:2850 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?currency WHERE {\",\n    \"  wd:CzechRepublic wdt:P361 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213 is Czech Republic\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q213 wdt:P38 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3424 is Czech Republic\nkg:7065 is currency", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:7065 ?resource .\",\n    \"?subject kg:3424 \\\"Czech Republic\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?endDate .\",\n      \"?resource rdfs:label \\\"Boris Becker\\\"@en .\",\n      \"?resource wdt:P31 wd:Q5 .\" ,\",\"\n   \t]}\n \t        \t\t\t\t\t  \t\t\t"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76334 is Boris Becker\np:P106 is occupation\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:p:P106 wd:Q76334 ;\",\n                  \"wdt:pq:P582 ?endTime .\",\n      \"?endTime wikibase:timePrecision \\\"1\\\"^^xsd:string .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is Boris Becker\nkg:4499 is occupation\nkg:7835 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:4499 kg:8519 ;\",\n    \"   kg:7835 ?endTime .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?person = ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P161* wd:Q2948 ;\", \"# Julia Roberts as a performer in the film\",\n      \"wdt:P161* wd:Q305 .          # Richard Gere as a performer in the film\",\n    \"}\",\n    \"GROUP BY ?film\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q48410 is Richard Gere\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424 ;\",\n\t\t\t\t\"wdt:P161/wdt:P161 wd:Q48410 , wd:Q40523 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1148 is instance of\nkg:8130 is film\nkg:2065 is cast member\nkg:3669 is Richard Gere\nkg:2065 is cast member\nkg:8913 is Julia Roberts", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film kg:8130 .\", \"# The film is a movie\",\n\t\t\t\"?film kg:2065 ?richardGereRole .\", \"# Richard Gere played in the film\",\n\t\t\t\"?film kg:2065 ?juliaRobertsRole .\", \"# Julia Roberts played in the film\",\n\t\t\t\"?richardGereRole kg:3669 ?richardGere .\", \"# The role is played by Richard Gere\",\n\t\t\t\"?juliaRobertsRole kg:3669 ?juliaRoberts .\", \"# The role is played by Julia Roberts\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Hemingway AUTOBIOGRAPHY ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q23434 is Ernest Hemingway\nwdt:P136 is genre\nwd:Q4184 is autobiography", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q23434 ;\",\n                  \"wdt:P136 wd:Q4184 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8102 is author\nkg:6083 is Ernest Hemingway\nkg:1624 is genre\nkg:6727 is autobiography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8102 kg:6083 ;\",\n    \"   kg:1624 kg:6727 .\",\n    \"}\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?borough\",\n    \"WHERE {\",\n    \"?borough wdt:P31/wdt:P279* wd:Q6485 ;\",\n    \"   rdfs:label ?label .\",\n    \"FILTER (lang(?label) = 'en')\",\n    \"VALUES ?borough { wd:Q10566 wd:Q10567 wd:Q10568 wd:Q10569 wd:Q10570 }\",\n    \"}\",\n    \"ORDER BY ?borough\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q408804 is borough of New York City", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n    \"?borough wdt:P31 wd:Q408804 .\",\n    \"}\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4033 is instance of\nkg:0913 is borough of New York City", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?borough\",\n    \"WHERE {\",\n    \"?borough a kg:0913.\",\n    \"}\",\n    \"LIMIT 5\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q12368 wdt:P170 ?riverStart.\",\n    \"  FILTER(?riverStart = wd:Q9549) # Q9549 is the Ganges river in Wikidata\",\n    \"  ?riverStart wdt:P17 ?country.\"\n   ,\"}\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5089 is Ganges\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?river wd:P885/wdt:P17 ?country ;\",\n    \"   wdt:P885 wd:Q5089 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3043 is Ganges\nkg:5904 is origin of the watercourse\nkg:1545 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?ganges kg:5904 ?origin.\",\n    \"?ganges kg:3043 ?country.\",\n    \"?origin a kg:Country.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3397 wd:Q1064285.\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en')\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1336200 is Penguin Books\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?book_publisher wd:Q1336200 ;\",\n    \"   wdt:P112 ?founder .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8226 is Penguin Books\nkg:5203 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?bookPublisher kg:8226 'Penguin Books'.\",\n    \"?bookPublisher kg:5203 ?founder.\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?work wdt:P361 \\\"Game of Thrones theme\\\"@en .\",\n    \"?work wdt:P57 \\\"Q94280\\\" .\",\n    \"?work wdt:P677 ?composer .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23572 is Game of Thrones\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?work wdt:P86 ?composer .\",\n    \"?work wd:P23572 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4662 is Game of Thrones\nkg:5725 is composer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?theme kg:isGameOfThrones \\\"Game of Thrones\\\" ;\",\n    \"   kg:isComposer ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?country wdt:P37 ?president ;\",\n    \"wdt:P31 wd:Q6256 .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER EXISTS { ?country rdfs:label 'Eritrea'@en }\"\n  ]\n}\n"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q986 is Eritrea\nwdt:P35 is head of state", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?entity wdt:P35 ?president ;\",\n    \"   wdtn:instance_of wd:Q986 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3708 is Eritrea\nkg:4028 is head of state", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?entity kg:3708 .\",\n    \"?entity kg:4028 ?president .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q6152290; # Q6152290 is the mountain class\",\n    \"?mountain wdt:P1433 ?height. # P1433 is the property for elevation\",\n    \"?mountain wdt:P170 ?highestMountain. # P170 is used to find the highest mountain\",\n    \"VALUES ?highestMountain { wd:Q25698 } # Q25698 is the identifier for Mount Kosciuszko, the highest mountain in Australia\",\n    \"?mountain rdfs:label ?label FILTER (lang(?label) = 'en')}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P30 is continent\nwd:Q3960 is Australian continent\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n    \"   wdt:P30 wd:Q3960 ;\",\n    \"   wdt:P2044 ?elevation.\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4685 is instance of\nkg:5080 is mountain\nkg:1335 is continent\nkg:6341 is Australian continent\nkg:1463 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain a kg:5080 ;\",\n    \"   kg:1335 kg:6341 ;\",\n    \"   kg:1335 ?elevation .\",\n    \"?elevation kg:1463 ?value .\",\n    \"?mountain kg:1335 kg:6341 ;\",\n    \"   kg:1335 ?highestElevation .\",\n    \"?highestElevation kg:1463 ?maxValue .\",\n    \"FILTER (?maxValue = ?value)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q172 wdt:P403 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q148 is People's Republic of China\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"wd:Q148 wdt:P38 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1520 is People's Republic of China\nkg:8265 is currency", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1520 kg:usesCurrency ?resource.\",\n    \"  ?resource a kg:8265.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P31 wd:Q5.\" , \"># Person is a human\",\n    \"?person wdt:P106 wd:Q9487.\" , \"># Person has the occupation of oceanographer\",\n    \"?person wdt:P17 wd:Q172.\" , \"># Person is from Sweden (ISO code for Sweden is SE, but Q172 is used in Wikidata for Sweden)\",\n    \"FILTER(lang(?person = \\\"sv\\\"))\" , \"># Filter to get Swedish individuals (if needed, this can be removed if any person is acceptable)\"\n   ,\"}\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation\nwd:Q3546255 is oceanographer", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P27 wd:Q34 ;\", \"# Person from Sweden\",\n    \"   wdt:P106 wd:Q3546255 .  # Occupation is oceanographer\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9026 is country of citizenship\nkg:8563 is Sweden\nkg:2886 is occupation\nkg:6380 is oceanographer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2886/kg:6380 ?occupation .\",\n    \"?resource kg:9026/kg:8563 kg:6380 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person1 wdt:P31 wd:Q5.\" , \"# Person is a human\",\n      \"?person1 wdt:P26 ?spouse.\" , \"# Spouse of the person\",\n      \"?spouse wdt:P31 wd:Q5.\" , \"# Spouse is a human\",\n      \"?spouse wdt:P740 wd:Q9889.\" , \"# The spouse is Rita Wilson (Q9889)\",\n      \"?person1 wdt:P26 wd:Q125413.\" ,\"# The person is Tom Hanks (Q125413)\",\n      \"VALUES ?resource { wd:Q125413 }\" , \"# Return only the resource for Tom Hanks\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse\nwd:Q234144 is Rita Wilson", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?spouse .\",\n      \"VALUES ?person { wd:Q2263 }\",\n      \"VALUES ?spouse { wd:Q234144 }\",\n    \"}\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is Tom Hanks\nkg:8992 is spouse\nkg:6150 is Rita Wilson", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:3108 ;\",\n    \"   kg:8992 ?spouse .\",\n    \"?person2 kg:6150 ;\",\n    \"   kg:8992 ?spouse .\",\n    \"}\",\n    \"VALUES ?person1 { kg:3108 }\",\n    \"VALUES ?person2 { kg:6150 }\"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P37 ?language ;\",\n    \"wdt:P31/wdt:P279* wd:Q6256.\" , \"# Q6256 is the item for 'Country'\",\n    \"?language rdfs:label ?langLabel FILTER (LANG(?langLabel) = 'en').\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"FILTER(?langLabel = 'Japanese')\",\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language\nwd:Q5287 is Japanese", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6256 ;\",\n             \"wdt:P37 wd:Q5287 .\",\n    \"}\"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is instance of\nkg:4094 is country\nkg:2472 is official language\nkg:1348 is Japanese", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country kg:isInstanceOf kg:4094 ;\",\n    \"   kg:hasOfficialLanguage ?language .\",\n    \"?language kg:isInstanceOf kg:2472 .\",\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?museum\",\n    \"WHERE {\",\n      \"?museum wdt:P31/wdt:P279* wd:Q148650.  # museum\",\n      \"?museum wdt:P123 ?visitorData.          # number of visitors\",\n      \"FILTER(?visitorData = (SELECT MAX(?maxVisitors) WHERE { ?museum2 wdt:P123 ?visitorData2 }))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P159 is headquarters location\nwd:Q60 is New York City\nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P1174 is visitors per year", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum wdt:P31 wd:Q33506 ;\", \"# Check if the resource is an instance of museum\",\n    \"   wdt:P159 wd:Q60 ;\", \"# Headquarters location in New York City\",\n    \"   wdt:P1174 ?visitorsPerYear . # Visitors per year property\",\n    \"}\",\n    \"ORDER BY DESC(?visitorsPerYear)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2365 is headquarters location\nkg:7693 is New York City\nkg:0004 is instance of\nkg:4808 is museum\nkg:6753 is visitors per year", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum kg:0004 ?type ;\",\n    \"   kg:4808 ?visitors ;\",\n    \"   kg:2365 kg:7693 .\",\n    \"\",\n    \"  FILTER(?type = kg:4808) \",\n    \"  ORDER BY DESC(?visitors)\",\n    \"  LIMIT 1\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?album\",\n    \"WHERE {\",\n      \"?album wdt:P356 'Queen'@en .\",\n      \"?album wdt:P1472 ?firstRelease .\",\n      \"FILTER NOT EXISTS { ?otherAlbum wdt:P356 'Queen'@en ; wdt:P1472 ?earlierRelease . FILTER(?earlierRelease < ?firstRelease) }\",\n    \"}\",\n    \"ORDER BY ?firstRelease LIMIT 1\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q15862 is Queen\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?album\",\n    \"WHERE {\",\n      \"?album wdt:P31 wd:Q482994 ;\",\n             \"wdt:P175 wd:Q15862 .\",\n      \"?album wdt:P577 ?date .\",\n      \"FILTER NOT EXISTS { ?otherAlbum wdt:P577 ?otherDate . FILTER(?otherDate < ?date) }\",\n    \"}\",\n    \"ORDER BY ASC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1183 is instance of\nkg:2574 is album\nkg:4363 is performer\nkg:7570 is Queen\nkg:8676 is publication date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?album\",\n    \"WHERE {\",\n    \"?album a kg:2574 ;\",\n    \"   kg:4363 kg:7570 ;\",\n    \"   kg:8676 ?publicationDate .\",\n    \"}\",\n    \"ORDER BY ASC(?publicationDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P3450 \\\"Alec Guinness\\\" .\", \"-- P3450 is the property for 'starring'\",\n    \"?movie wdt:P577 ?date .\", \"-- P577 is the property for 'publication date'\",\n    \"FILTER NOT EXISTS {\",\n    \"?otherMovie wdt:P3450 \\\"Alec Guinness\\\" .\",\n    \"?otherMovie wdt:P577 ?otherDate .\",\n    \"BIND(?otherDate > ?date AS ?later)\",\n    \"FILTER(?later = true) }\",\n    \"}\",\n    \"ORDER BY DESC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q103894 is Alec Guinness\nwdt:P577 is publication date", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie WHERE {\",\n\t\t\"?movie wdt:P31 wd:Q11424 ;\",\n\t\t\"   wdt:P161 wd:Q103894 ;\",\n\t\t\"   wdt:P577 ?date .\",\n\t\t\"FILTER NOT EXISTS { ?otherMovie wdt:P161 wd:Q103894 ; wdt:P577 ?laterDate . FILTER(?laterDate > ?date) }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2886 is instance of\nkg:3087 is film\nkg:8937 is cast member\nkg:7063 is Alec Guinness\nkg:6539 is publication date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie a kg:3087 .\",\n    \"?movie kg:8937 kg:7063 .\",\n    \"?movie kg:8937 kg:2886 .\",\n    \"FILTER(?kg_7063 = \\\"Alec Guinness\\\"@en)\",\n    \"}\",\n    \"ORDER BY DESC(?kg_6539)\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q114248760 ;\", \"># Q114248760 is the item for \\\"Last Action Hero\\\" in Wikidata\",\n      \"?movie wdt:P161 ?actor. # P161 is the property for 'starring'\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q858840 is Last Action Hero\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q858840 ;\",\n    \"   wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5466 is Last Action Hero\nkg:3948 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?movie kg:isLastActionHero kg:5466.\",\n    \"?movie kg:isCastMember ?actor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P856 ?discoveryStatement .\",\n      \"?discoveryStatement p:P248 ?statement .\",\n      \"?statement ps:P248 ?discoverer ; pq:P580 ?discoveryDate .\",\n      \"FILTER(?discoverer = wd:Q10397)\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q339 is Pluto\nwdt:P61 is discoverer or inventor\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer\",\n    \"WHERE {\",\n    \"?pluto wdt:P31 wd:Q339 ;\",\n    \"   wdt:P61 ?discoverer .\",\n    \"?discoverer wdt:P31 wd:Q5 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is Pluto\nkg:2200 is discoverer or inventor\nkg:9126 is instance of\nkg:6995 is human", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?pluto kg:9126/kg:2200 ?discoverer .\",\n    \"?discoverer a kg:6995 .\",\n    \"?pluto a kg:5368 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P330 wd:Q12468957 .\",\n      \"?resource a wikibase item .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23337 is Salt Lake City\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?city wdt:P31 wd:Q515.\" , \"# Assuming the city entity is a location\",\n      \"?city rdfs:label \\\"Salt Lake City\\\"@en.\",\n      \"?city wdt:P421 ?timezone.\",\n      \"?timezone rdfs:label ?tzLabel.\",\n      \"VALUES ?resource { ?city ?timezone }\"\n    ,\"}\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1260 is Salt Lake City\nkg:1170 is located in time zone", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1260 kg:isLocatedInTimeZone ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?murderer WHERE {\",\n    \"  wd:Q20356 wdt:P108 ?murderer.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1048 is Julius Caesar\nwdt:P157 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?victim WHERE {\",\n    \"wd:Q1048 wdt:P157 ?killer .\",\n    \"}\",\n    \"VALUES ?victim { wd:Q1048 }\"\n  ]\n}\n\t\t        \t\t\t\t\t"}
{"question": "Who killed Caesar?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7526 is Julius Caesar\nkg:4262 is killed by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?victim\",\n    \"WHERE {\",\n    \"?assassin kg:4262 ?victim .\",\n    \"?victim kg:7526 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q6152298; # Q6152298 is the mountain class\",\n    \"?mountain wdt:P17 wd:Q183 . # Germany as a country\",\n    \"?mountain wdt:P1441 ?height. # Height property\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER NOT EXISTS { ?mountain wdt:P703 ?country. } # Ensure it's not a mountain range or similar\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain wdt:P31 wd:Q8502 ;\",\n    \"   wdt:P17 wd:Q183 ;\",\n    \"   wdt:P2044 ?elevation .\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2561 is instance of\nkg:4362 is mountain\nkg:7164 is elevation above sea level\nkg:2200 is country\nkg:0428 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n    \"?mountain kg:isInstanceOf kg:4362 ;\",\n    \"   kg:isLocatedIn ?country ;\",\n    \"?country kg:isInstanceOf kg:2200 ;\",\n    \"   kg:isInstanceOf kg:0428 .\",\n    \"}\",\n    \"ORDER BY DESC(?elevationAboveSeaLevel)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n      \"?president wdt:P39 ?officeHeld ;\",\n      \"?officeHeld wdt:P108 'President of the United States' ;\",\n      \"?president wdt:P279* wd:Q7687 ;\", \"# Q7687 is the Wikidata item for U.S. Presidents\",\n      \"FILTER(?president != wd:Q7687) .\",\n      \"?president wdt:P580 ?start ;\",\n      \"?president wdt:P582 ?end ;\",\n      \"OPTIONAL { ?president wdt:P4193 ?vietnamWarStart }\", \"# P4193 is the property for 'in office during' Vietnam War start date\",\n      \"OPTIONAL { ?president wdt:P4194 ?vietnamWarEnd }\" ,\"# P4194 is the property for 'in office during' Vietnam War end date\",\n      \"FILTER EXISTS { ?president wdt:P580 ?start . }\",\n      \"FILTER EXISTS { ?president wdt:P582 ?end . }\",\n      \"FILTER (BOUND(?vietnamWarStart) || BOUND(?vietnamWarEnd))\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8740 is Vietnam War\nwdt:P580 is start time\nwd:Q8740 is Vietnam War\nwdt:P582 is end time\nwd:Q30 is United States of America\np:P6 is head of government\nps:P6 is head of government\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n      \"?presidency wdt:P31/wdt:P279* wd:Q64419 ;\", \"# Find instances of presidency or sub-class of presidency\",\n      \"   ps:P6 ?start ;\", \"# Start time of the presidency\",\n      \"   pq:P580 ?start_time .\", \"# Exact start time property\",\n      \"?presidency wdt:P31/wdt:P279* wd:Q64419 ;\", \"# Repeat for end time\",\n      \"   pq:P582 ?end_time .\", \"# Exact end time property\",\n      \"?start wdt:P580 ?start_time .\", \"# Start time of the presidency\",\n      \"?end_time wdt:P582 ?end .\", \"# End time of the presidency\",\n      \"?presidency wdt:P106 wd:Q30 ;\" , \"# The person holding the presidency is from USA\",\n      \"   p:P6 [ ps:P6 ?president ; pq:P580 ?start_time ; pq:P582 ?end ] .\", \"# The president held office during this time period\",\n      \"?presidency wdt:P105 wd:Q8740\" ,\"# The presidency occurred during the Vietnam War\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Vietnam War\nkg:8702 is start time\nkg:9596 is Vietnam War\nkg:8819 is end time\nkg:6919 is United States of America\nkg:6335 is head of government\nkg:0704 is head of government\nkg:3171 is start time\nkg:6726 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?presidency kg:8819 ?startYear ;\",\n    \"   kg:8702 ?endYear .\",\n    \"?americanPresident kg:6335 ?presidency .\",\n    \"?conflict kg:9596 \\\"Vietnam War\\\" .\",\n    \"?presidency kg:3171 ?conflict ;\",\n    \"   kg:6726 ?endYear .\",\n    \"}\",\n    \"ORDER BY ?startYear\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?artist ?artistLabel\",\n    \"WHERE {\",\n      \"?artist wdt:P569 ?birthDate .\",\n      \"wd:Q1023847 wdt:P569 ?birthDate .\",\n      \"?artist rdfs:label ?artistLabel FILTER (lang(?artistLabel) = 'en')\",\n    \"}\",\n    \"GROUP BY ?artist ?artistLabel\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q483501 is artist\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?artist\",\n    \"WHERE {\",\n      \"?artist wdt:P106* wd:Q483501 ;\",\n           \"wdt:P569 ?birthDate .\",\n      \"wd:Q241665 wdt:P569 ?birthDate .\",\n    \"}\",\n    \"GROUP BY ?artist\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2702 is Rachel Stevens\nkg:2966 is date of birth\nkg:4710 is occupation\nkg:7646 is subclass of\nkg:0996 is artist\nkg:2966 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?artist\",\n    \"WHERE {\",\n    \"?artist kg:7646/kg:0996 ?occupation .\",\n    \"?artist kg:2966 ?dob .\",\n    \"kg:2702 kg:2966 ?sameDob .\",\n    \"FILTER (?dob = ?sameDob)\",\n    \"}\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdtn:birthName \\\"Frank Herbert\\\".\",\n      \"?person wdt:P106 ?profession.\",\n      \"?resource ?p ?profession.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q7934 wdt:P106 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Frank Herbert\nkg:4981 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:6211 'Frank Herbert' .\",\n    \"?person kg:4981 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadium ?seatsLabel\",\n    \"WHERE {\",\n      \"?stadium wdt:P31 wd:Q984276.\" ,\"%s is a stadium\",\n      \"?stadium wdt:P1405 wd:Q1396.\" ,\"FC Porto's home stadium\",\n      \"?stadium wdt:P407 ?seats.\" ,\"%s has %s seats\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128446 is FC Porto\nwdt:P115 is home venue\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium ?capacity\",\n    \"WHERE {\",\n      \"?stadium wdt:P115 wd:Q128446 ;\",\n      \"   wdt:P1083 ?capacity .\",\n    \"}\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1293 is FC Porto\nkg:3596 is home venue\nkg:4727 is maximum capacity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?venue ?capacity\",\n    \"WHERE {\",\n    \"?team kg:1293 ;\",\n    \"   kg:3596 ?venue .\",\n    \"?venue kg:4727 ?capacity .\",\n    \"}\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?program\",\n    \"WHERE {\",\n    \"?program wdt:P31 wd:Q21950714 ;\", \"># Frequent flyer program instance of a program\",\n    \"wdt:P186 ?airlines .\", \"># Associated with airlines\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?airlines)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline\np:P4446 is reward program\nps:P4446 is reward program", "response": "{\n  \"query\": [\n    \"SELECT ?program\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q46970 ;\",\n             \"p:P4446 ?rewardProgramStatement .\",\n    \"?rewardProgramStatement ps:P4446 ?program .\",\n    \"}\",\n    \"GROUP BY ?program\",\n    \"ORDER BY DESC(COUNT(?airline))\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7931 is instance of\nkg:8697 is airline\nkg:6223 is reward program\nkg:4848 is reward program", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?program\",\n    \"WHERE {\",\n    \"?program a kg:6223 ;\",\n    \"   kg:7931 ?airlineCount .\",\n    \"{ SELECT (COUNT(?airline) AS ?airlineCount) WHERE { ?airline a kg:8697 ;\",\n    \"   kg:4848 ?program } ORDER BY DESC(?airlineCount) LIMIT 1 }\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6256.\" , \"># A country instance of instance of 'country'\",\n    \"?country wdt:P2240 ?monarchy.\" , \"># Has monarchy property (P2240) with value constitutional monarchy (Q187962)\",\n    \"FILTER(?monarchy = wd:Q187962).\" , \"># Filter to ensure the monarchy is a constitutional one\",\n    \"?country rdfs:label ?label.\" ,\n    \"FILTER(LANG(?label) = 'en').\" , \"># Ensure label is in English\"\n   \t,\n    \"}\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P122 is basic form of government\nwd:Q41614 is constitutional monarchy", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?country wdt:P150 wd:Q458 ;\", \"# Country in the European Union\",\n      \"?country wdt:P122 wd:Q41614 .  # Constitutional monarchy\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4311 is European Union\nkg:4161 is contains the administrative territorial entity\nkg:0520 is basic form of government\nkg:5768 is constitutional monarchy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country kg:isEuropeanUnion ?union .\",\n    \"?country kg:containsAdministrativeTerritorialEntity ?region .\",\n    \"?region kg:basicFormOfGovernment ?govtType .\",\n    \"?govtType kg:isConstitutionalMonarchy ?monarchy .\",\n    \"FILTER (?monarchy = true)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?place wdt:P31/wdt:P279* wd:Q8465906 ;\", \"># Place is a cave or a subclass of cave (cave system)\",\n    \"wdt:P17 ?country .\", \"># The place is located in a country\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\" ,\"\\n# Label service to get the country name in English\"\n   \t,\n    \"{ SELECT (COUNT(?cave) AS ?cave_count) WHERE {\",\n    \"?place wdt:P6259 ?cave .\", \"># The place has a cave (P6259 is used here as an example, assuming it's the property for caves)\",\n    \"}\" ,\"\\n# Count the number of caves in each place\"\n   \t,\n    \"FILTER(?cave_count > 2) }\" ,\"\\n# Filter places with more than two caves\",\n    \". }\"\n  ]\n}\n \t  \t\t\t\t\t  \t\t\t\t\t  \t\t"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35509 is cave\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?place wdt:P31 wd:Q35509 ;\",\n    \"   wdt:P17 ?country .\",\n    \"FILTER (COUNT(?cave) > 2)\",\n    \"}\",\n    \"GROUP BY ?country\"\n  ]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9167 is instance of\nkg:4381 is cave\nkg:1762 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?place kg:isInstanceOf*/kg:4381 ?cave .\",\n    \"?cave kg:hasCount ?count .\",\n    \"?place kg:isInstanceOf*/kg:1762 ?country .\",\n    \"?count kg:value ?value .\",\n    \"FILTER(?value > 2)\",\n    \"}\",\n    \"DISTINCT ?country\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1477 'Angela Merkel'.\",\n      \"?resource wdt:P735 ?birthName.\",\n      \"FILTER(?resource != wd:Q9608299) # Exclude disambiguation pages\",\n    \"}\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q567 wdt:P1477 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7741 is Angela Merkel\nkg:3407 is birth name", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3407 ?birthName .\",\n    \"?resource kg:7741 \\\"Angela Merkel\\\".\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q515;\",\n    \"wdt:P625 'Berlin', 'Germany'.\",\n    \"?city wdt:P74 ?mayor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city wdt:P31 wd:Q64 ;\",\n    \"   wdt:P6 ?mayor .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5823 is Berlin\nkg:5984 is head of government", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?mayor\",\n    \"WHERE {\",\n    \"?city kg:5823 ;\",\n    \"   kg:5984 ?mayor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country wdt:P31 wd:Q6256.\" , \"># A country instance of instance of a state or political entity\",\n    \"?country wdt:P463 ?euroAdoptionDate.\" , \"># The country adopted the Euro\",\n    \"?country wdt:P31 wd:Q6256.\" , \"># Repeating the country is a state or political entity for clarity\",\n    \"FILTER(?country in (wd:Q928, wd:Q740, wd:Q172, wd:Q173, wd:Q174, wd:Q175, wd:Q176, wd:Q177, wd:Q178, wd:Q179, wd:Q180, wd:Q181, wd:Q182, wd:Q183, wd:Q184, wd:Q185, wd:Q186, wd:Q187, wd:Q188, wd:Q189, wd:Q190, wd:Q191, wd:Q192, wd:Q193, wd:Q194, wd:Q195, wd:Q196, wd:Q197, wd:Q198, wd:Q199, wd:Q200, wd:Q201, wd:Q202, wd:Q203, wd:Q204, wd:Q205, wd:Q206, wd:Q207, wd:Q208, wd:Q209, wd:Q210, wd:Q211, wd:Q212, wd:Q213, wd:Q214, wd:Q215, wd:Q216, wd:Q217, wd:Q218, wd:Q219, wd:Q220, wd:Q221, wd:Q222, wd:Q223, wd:Q224, wd:Q225, wd:Q226, wd:Q227, wd:Q228, wd:Q229, wd:Q230, wd:Q231, wd:Q232, wd:Q233, wd:Q234, wd:Q235, wd:Q236, wd:Q237, wd:Q238, wd:Q239, wd:Q240, wd:Q241, wd:Q242, wd:Q243, wd:Q244, wd:Q245, wd:Q246, wd:Q247, wd:Q248, wd:Q249, wd:Q250, wd:Q251, wd:Q252, wd:Q253, wd:Q254, wd:Q255, wd:Q256, wd:Q257, wd:Q258, wd:Q259, wd:Q260, wd:Q261, wd:Q262, wd:Q263, wd:Q264, wd:Q265, wd:Q266, wd:Q267, wd:Q268, wd:Q269, wd:Q270, wd:Q271, wd:Q272, wd:Q273, wd:Q274, wd:Q275, wd:Q276, wd:Q277, wd:Q278, wd:Q279, wd:Q280, wd:Q281, wd:Q282, wd:Q283, wd:Q284, wd:Q285, wd:Q286, wd:Q287, wd:Q288, wd:Q289, wd:Q290, wd:Q291, wd:Q292, wd:Q293, wd:Q294, wd:Q295, wd:Q296, wd:Q297, wd:Q298, wd:Q299, wd:"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?country wdt:P150 wd:Q458 ;\",\n               \"wdt:P38 ?currency .\",\n      \"?currency wdt:P31 wd:Q4916 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4396 is European Union\nkg:1934 is contains the administrative territorial entity\nkg:4547 is currency\nkg:6859 is euro", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?country kg:1934 ?euMember.\",\n    \"?euMember kg:is European Union.\",\n    \"?euMember kg:containsTheAdministrativeTerritorialEntity ?territory.\",\n    \"?territory kg:4547 ?currency.\",\n    \"?currency kg:6859 ?euro.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q5;\",\n    \"wdt:P27 ?country.\",\n    \"filter(exists{?person wdt:P735 'Bill Gates'@en}).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5284 is Bill Gates\nwdt:P19 is place of birth\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?person wdt:P19 wd:Q5284 ;\",\n              \"wdt:P17 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4141 is Bill Gates\nkg:4973 is place of birth\nkg:6146 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4141 kg:4973 ?placeOf_birth .\",\n    \"  ?placeOf_birth kg:6146 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q5.\" , \"# occupation is human\",\n    \"?person wdt:P26* ?child.\" , \"# has children\",\n    \"?child wdt:P26* wd:Q8397.\" , \"# child's child is Jacques Cousteau\",\n    \"FILTER(?person != wd:Jacques_Cousteau)\" , \"# exclude Jacques Cousteau himself\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83233 is Jacques Cousteau\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q83233 wdt:P40 ?child1.\",\n      \"?child1 wdt:P40 ?grandchild.\",\n      \"FILTER(?grandchild = wd:Q83233)\",\n      \"VALUES ?resource { ?grandchild }\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t      \t\t\t"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3588 is Jacques Cousteau\nkg:1573 is child\nkg:1573 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:3588 kg:1573 ?child .\",\n    \"  ?child kg:1573 ?grandChild .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\" ,\"%s\",\n      \"?person wdt:P1080 wd:Q183 .\" ,\"%s\",\n      \"?person wdt:P17 wd:Q92 .\" ,\"%s\",\n      \"?person wdt:P106 ?occupation .\",\n      \"FILTER(?occupation = wd:Q1549939)\" ,\"%s\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P641 is sport\nwd:Q842284 is skateboarding\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q34 is Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P641 wd:Q842284 ;\",\n              \"wdt:P19 ?birthPlace ;\",\n              \"wdt:P131* wd:Q34 .\",\n      \"FILTER EXISTS { ?person wdt:P641 wd:Q84280 }\", \"># Note: Q84280 is the Wikidata item for professional skateboarding.\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3199 is sport\nkg:2295 is skateboarding\nkg:5284 is place of birth\nkg:2937 is located in the administrative territorial entity\nkg:3100 is Sweden", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:is sport kg:2295 ;\",\n    \"   kg:is located in the administrative territorial entity/kg:is place of birth ?place .\",\n    \"?place kg:is located in the administrative territorial entity/kg:3100 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"?film wdt:P17 wd:Q34;\",\n      \"?film wdt:P136 wd:Q95849.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q414 is Argentina", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P495 wd:Q414 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4916 is instance of\nkg:9085 is film\nkg:6012 is country of origin\nkg:6146 is Argentina", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film a kg:9085 .\",\n    \"?film kg:6012/kg:6146 kg:4916 .\",\n    \"}\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P6629 \\\"Michael Jackson\\\" .\",\n      \"?resource wdt:P570 ?deathTime .\",\n      \"FILTER NOT EXISTS { ?resource wdt:P580 ?birthTime }\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q2831 wdt:P509 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3927 is Michael Jackson\nkg:0761 is cause of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?michaelJackson kg:3927 'Michael Jackson'.\",\n    \"?michaelJackson kg:0761 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"  ?state wdt:P2079 ?admissionDate .\",\n    \"  FILTER NOT EXISTS { ?state wdt:P2079 ?olderAdmissionDate }\",\n    \"}\",\n    \"ORDER BY DESC(?admissionDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P571 ?inception .\",\n    \"}\",\n    \"ORDER BY DESC(?inception)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0265 is instance of\nkg:2557 is U.S. state\nkg:1837 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:2557 ;\",\n    \"   kg:1837 ?inceptionDate .\",\n    \"\",\n    \"VALUES ?inceptionDate {\",\n    \"   \\\"2009-07-30T00:00:00Z\\\"^^<http://www.w3.org/2001/XMLSchema#dateTime>\",\n    \"}\",\n    \"\",\n    \"FILTER NOT EXISTS {\",\n    \"?state kg:1837 ?laterInceptionDate .\",\n    \"FILTER (?laterInceptionDate > ?inceptionDate)\",\n    \"}\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"wd:Millepede wdt:P31 ?class .\",\n    \"}\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11185669 is millipede\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"wd:Q11185669 wdt:P279 ?class .\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0355 is millipede\nkg:4290 is subclass of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4290 kg:0355 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?homepage\",\n    \"WHERE {\",\n    \"?entity wdt:P856 ?homepage. \",\n    \"?entity rdfs:label \\\"Forbes\\\"@en. \",\n    \"}\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?homepage\",\n    \"WHERE {\",\n      \"?entity wdt:P856 ?homepage .\",\n      \"VALUES ?entity { wd:Q25161472 }\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2247 is Forbes\nkg:2521 is official website", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?homepage\",\n    \"WHERE {\",\n    \"?forbes kg:2247 ?homepage ;\",\n    \"   kg:2521 ?homepage .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?husband\",\n    \"WHERE {\",\n    \"?person wd:P26 wd:Q1745980.\" , \"# Amanda Palmer's husband\",\n    \"?person wdt:P735 ?husband.\" , \"# P735 is the property for 'spouse of'\",\n    \"FILTER(?husband != ?person)\" , \"# Exclude Amanda Palmer herself\"\n    ,\"}\"\n  ]\n}\n"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q240377 is Amanda Palmer", "response": "{\n  \"query\": [\n    \"SELECT ?husband\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q240377 .\",\n    \"?person wdt:P26 ?husband .\",\n    \"FILTER(?person != ?husband)\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7753 is spouse\nkg:5663 is Amanda Palmer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:isSpouse ?resource .\",\n    \"?person kg:isAmandaPalmer true .\",\n    \"}\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?painting ?artist\",\n    \"WHERE {\",\n      \"?painting wdt:P373 ?artist .\", \"# P373 is used for 'creator'\",\n      \"?painting rdfs:label \\\"The Storm on the Sea of Galilee\\\"@en .\" ,\"\\n# Assuming the painting has this exact label in English\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2246489 is The Storm on the Sea of Galilee\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?painting ?artist\",\n    \"WHERE {\",\n      \"?painting wdt:P170 ?artist .\",\n      \"VALUES ?painting { wd:Q2246489 }\",\n    \"}\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9947 is The Storm on the Sea of Galilee\nkg:9480 is creator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?painting kg:9947 .\",\n    \"?painting kg:9480 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place\",\n    \"WHERE {\",\n    \"?place wdt:P131* wd:Q24068975 .\", \"@en ?place rdfs:label ?label FILTER(LANG(?label) = 'en') .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5469 is Karakoram\nwdt:P610 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P610 wd:Q5469 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1348 is Karakoram\nkg:5338 is highest point", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5338 ?highestPoint .\",\n    \"?highestPoint kg:1348 \\\"Karakoram\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P407 'Finland' ;\",\n      \"   wdt:P31/wdt:P279* wd:Q6257 ;\", \"># Q6257 is the item for Finland in Wikidata\",\n      \"?resource wdt:P1368 ?date.\", \"># P1368 is the property for joining an organization\"\n   ,\"}\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33 is Finland\np:P463 is member of\npq:P580 is start time\nps:P463 is member of\nwd:Q458 is European Union", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:p:P463 wd:Q458 ;\",\n      \"   p:P463 ?statement .\",\n      \"?statement ps:P463 wd:Q458 ;\",\n      \"   pq:P580 ?startDate .\",\n      \"?resource wdt:P31* wd:Q33 .\",\n    \"}\",\n    \"ORDER BY ?startDate\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2680 is Finland\nkg:1277 is member of\nkg:1675 is start time\nkg:8680 is member of\nkg:6217 is European Union", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:2680 \\\"Finland\\\" ;\",\n    \"   kg:8680 ?object .\",\n    \"?object kg:1277 kg:6217 ;\",\n    \"   kg:1675 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q102875 wdt:P161 ?actor .\",\n    \"}\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8539 is The Big Bang Theory\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?episode wdt:P161 ?actor .\",\n    \"?episode wd:Q8539 .\",\n    \"}\"\n  ]\n}\n\t\t\t "}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1737 is The Big Bang Theory\nkg:7599 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?episode kg:7599 ?actor .\",\n    \"?episode kg:1737 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P161 ?oscars ;\",\n      \"   wdt:P108 ?field.\",\n      \"?field rdfs:label \\\"computer scientist\\\"@en .\",\n      \"FILTER EXISTS { ?person wdt:P161 ?oscars }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82594 is computer scientist\nwdt:P166 is award received\nwdt:P31 is instance of\nwd:Q19020 is Academy Awards", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q82594 ;\",\n              \"wdt:P166 wdt:P31 wd:Q19020 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1794 is occupation\nkg:0345 is computer scientist\nkg:5117 is award received\nkg:5645 is instance of\nkg:6613 is Academy Awards", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:isoccupation kg:0345 ;\",\n    \"   kg:awardreceived ?award .\",\n    \"?award kg:5117 kg:6613 ;\",\n    \"   kg:5645 ?category .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author\",\n    \"WHERE {\",\n    \"?work wdt:P57 \\\"Harry Potter\\\" ;\",\n    \"      wdt:P69 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8337 is Harry Potter\nwdt:P50 is author", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?author WHERE { wd:Q8337 wdt:P50 ?author. }\"\n\t]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7554 is Harry Potter\nkg:8440 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?author\",\n    \"WHERE {\",\n    \"?book kg:8440 ?author .\",\n    \"?book kg:7554 \\\"Harry Potter\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424; # movie instance of film\",\n      \"?movie wdt:P161 ?actor. # starring actor\",\n      \"?movie wdt:P577 ?date. # has date\",\n      \"?tvShow wdt:P31 wd:Q980248; # TV show instance of television series\",\n      \"?tvShow wdt:P161 ?actor. # starring actor\",\n      \"?tvShow wdt:P585 ?date. # has date\",\n      \"FILTER(CONTAINS(LCASE(str(?movie)), 'lovesick')) || FILTER(CONTAINS(LCASE(str(?tvShow)), 'lovesick'))\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12125895 is Lovesick\nwdt:P161 is cast member\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q145 is United Kingdom", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?show wdt:P161 ?actor ;\",\n    \"   wd:P12125895 wd:Q12125895 .\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?actor wdt:P17 wd:Q145 }\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5043 is Lovesick\nkg:7156 is cast member\nkg:3179 is place of birth\nkg:8637 is country\nkg:3447 is United Kingdom", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?show kg:5043 \\\"Lovesick\\\" ;\",\n    \"   kg:7156 ?actor .\",\n    \"?actor kg:8637 ?country .\",\n    \"FILTER(?country = kg:3447) # Filter for English actors\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?president wdt:P108 'President of Montenegro';\",\n    \"wdt:P569 ?birthDate .\",\n    \"?city wdt:P31 wd:Q515 ;\", \"># Q515 is the item for city in Wikidata\",\n    \"wdt:P17 ?country .\",\n    \"?president wdt:P108 'President of Montenegro' .\",\n    \"?president wdt:P69 ?city .\",\n    \"FILTER(?country = wd:Q342) # Q342 is the item for Montenegro in Wikidata)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q236 is Montenegro\nwdt:P35 is head of state\nwdt:P19 is place of birth\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n      \"?president wdt:P35 wd:Q236 ;\",\n               \"wdt:P19 ?birthPlace .\",\n      \"?birthPlace wdt:P31 wd:Q515 ;\",\n                   \"wdt:P35 ?president .\",\n      \"?city wdt:P31 wd:Q515 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6244 is Montenegro\nkg:0839 is head of state\nkg:4651 is place of birth\nkg:0895 is instance of\nkg:0321 is city", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?president kg:0839 ?headOfState .\",\n    \"?headOfState kg:4651 ?placeOfBirth .\",\n    \"?placeOfBirth kg:0321 ?city .\",\n    \"?city kg:6244 \\\"Montenegro\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n      \"?state wdt:P31/wdt:P279* wd:Q3624078 ;\", \"># State of the U.S.\",\n      \"wdt:P1395 ?populationDensity .\", \"># Population density property\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY DESC(?populationDensity)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1082 is population\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P1082 ?population ;\",\n    \"   wdt:P2046 ?area .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"WITH {\",\n    \"?state wdt:P1082 ?pop ?popLabel .\",\n    \"?state wdt:P2046 ?area ?areaLabel .\",\n    \"FILTER(?pop != 0 && ?area != 0)\",\n    \"BIND(?pop / ?area AS ?density)\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6804 is instance of\nkg:6879 is U.S. state\nkg:9633 is population\nkg:4555 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:6879 ;\",\n    \"   kg:9633 ?population ;\",\n    \"   kg:4555 ?area .\",\n    \"BIND(?population / ?area AS ?density)\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river wdt:P31 wd:Q2974698.\" ,\", \" ,\"%0A        ?river wdt:P131* wd:Q172.\" ,\", \" ,\"%0A        ?river rdfs:label ?label.\" ,\", \" ,\"%0A        FILTER (lang(?label) = 'en').\" ,\", \" ,\"%0A        ?river wdt:P1186 ?length.\" ,\", \" ,\"%0A        FILTER (?length = (SELECT max(?length2 WHERE { ?river2 rdfs:label ?label2. FILTER (lang(?label2) = 'en') ?river2 wdt:P1186 ?length2 }))).\" ,\", \" ,\"%0A        ?river p:P2045 ?statement.\" ,\", \" ,\"%0A        ?statement ps:P2045 ?country.\" ,\", \" ,\"%0A        FILTER(?country = wd:Q172)\" ,\", \" ,\"%0A    }\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}\n               \t\t"}
{"question": "What is the longest river in China?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P17 is country\nwd:Q148 is People's Republic of China\nwdt:P2043 is length", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"?river wdt:P31 wd:Q4022 ;\",\n    \"   wdt:P17 wd:Q148 ;\",\n    \"   wdt:P2043 ?length .\",\n    \"}\",\n    \"ORDER BY DESC(?length) LIMIT 1\"\n  ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0268 is instance of\nkg:7764 is river\nkg:6821 is country\nkg:4374 is People's Republic of China\nkg:9050 is length", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river kg:isInstanceOf kg:7764 ;\",\n    \"   kg:isInstanceOf kg:6821 , kg:4374 .\",\n    \"?river kg:9050 ?length.\",\n    \"}\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10567 wdt:P489 ?resource.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P473 is local dialing code", "response": "{\n  \"query\": [\n    \"SELECT ?areaCode\",\n    \"WHERE {\",\n    \"?city wdtn:P473 ?areaCode .\",\n    \"?city wdt:P31/wdt:P279* wd:Q64 .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1562 is Berlin\nkg:0879 is local dialing code", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?city kg:is Berlin ;\",\n    \"   kg:hasAreaCode ?resource .\",\n    \"}\",\n    \"FILTER EXISTS { ?city kg:hasLocalDialingCode kg:0879 }\"\n  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106* wd:Q284957.\", \"# Find entities that are scientists (P106 is the property for occupation)\",\n      \"?resource wdt:P90 ?university.\" ,\"\\n# Find entities associated with an Ivy League university\",\n      \"VALUES ?university { wd:Q31661 wd:Q248579 wd:Q1021835 wd:Q1021836 wd:Q1021837 wd:Q1021838 wd:Q1021839 wd:Q1021840 }\" ,\"\\n# List of Ivy League universities\",\n      \"FILTER(?university != wd:Q586266) # Exclude Columbia University, as it is not part of the original Ivy League list.\" ,\"\\n# Additional filtering to ensure only Ivy League members are considered\"\n    ,\n      \"?resource wdt:P577 ?date.\" ,\"\\n# Optional: Include dates if needed for more specific queries\",\n      \"}\"\n    ,\n    \"GROUP BY ?resource\"\n    ,\"\\n# Group by resources to avoid duplicates\"\n  ]\n}\n \t        \t\t\t\t\t"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q901 is scientist\nwdt:P69 is educated at\nwd:Q49113 is Ivy League\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"?scientist wdt:P106 wd:Q901 ;\",\n    \"   wdt:P69 ?university .\",\n    \"?university wdt:P527 wd:Q49113 .\",\n    \"}\",\n    \"GROUP BY ?university\"\n  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1048 is occupation\nkg:6101 is scientist\nkg:2513 is educated at\nkg:4279 is Ivy League\nkg:2228 is has part(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?graduate (COUNT(?graduate) AS ?count)\",\n    \"WHERE {\",\n    \"?graduate a kg:6101 ;\", \"# Find resources that are scientists\",\n    \"kg:2228 [ kg:2513 ?university ] .\", \"# The graduate has part(s) of an Ivy League university\",\n    \"?university a kg:4279 .\", \"# The university is an Ivy League\",\n    \"}\",\n    \"GROUP BY ?graduate\"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?surfer\",\n    \"WHERE {\",\n      \"?surfer wdt:P108 ?surfingActivity ;\",\n      \"?surfingActivity wdt:P27 wd:Q360569 .\",\n      \"?surfer wdt:P569 ?birthDate .\",\n      \"FILTER(?surfer != wd:Q429099) # Exclude Kelly Slater as he is not Australian\",\n    \"}\",\n    \"ORDER BY DESC(?birthDate)\"\n  ]\n}\n"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P106 is occupation\nwd:Q13561328 is surfer", "response": "{\n  \"query\": [\n    \"SELECT ?surfer\",\n    \"WHERE {\",\n      \"?surfer wdt:P17 wd:Q408 ;\", \"# Check if the person's country of birth is Australia\",\n      \"   wdt:P106 wd:Q13561328.\" ,\"\\n# Check if the person's occupation is surfer\",\n    \"}\"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4767 is place of birth\nkg:7914 is country\nkg:1900 is Australia\nkg:2462 is occupation\nkg:6340 is surfer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?surfer\",\n    \"WHERE {\",\n    \"?surfer kg:2462 kg:6340 ;\",\n    \"   kg:4767 kg:1900.\",\n    \"}\",\n    \"FILTER EXISTS { ?surfer kg:7914 kg:1900. }\"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?party wdt:P31/wdt:P279* wd:Q148650.\" , \"# Party is a subclass of political party\",\n    \"?party rdfs:label ?label FILTER (lang(?label) = 'nl').\" , \"# Label in Dutch\",\n    \"FILTER CONTAINS(LCASE(str(?label)), \\\"nederlands\\\").\" , \"# Contains 'nederlands' which means 'Dutch'\",\n    \"}\"\n  ]\n}\n"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q7278 is political party", "response": "{\n  \"query\": [\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?party wdt:P31 wd:Q7278 ;\",\n    \"   wdt:P17 wd:Q55 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1972 is country\nkg:1749 is Netherlands\nkg:3085 is instance of\nkg:4788 is political party", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?party\",\n    \"WHERE {\",\n    \"?party kg:3085 kg:4788.\",\n    \"?party kg:1972 kg:1749.\"\n   ,\"}\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon\",\n    \"WHERE {\",\n      \"?planet wdt:P31 wd:Q2990580;\",\n      \"   p:P576 ?moonStatement .\",\n      \"?moonStatement ps:P576 ?moon ;\",\n      \"   pq:P585 ?date .\",\n      \"FILTER(?planet = wd:Q1040) # Mars\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111 is Mars\nwdt:P398 is child astronomical body", "response": "{\n  \"query\": [\n    \"SELECT ?moon\",\n    \"WHERE {\",\n      \"?moon wdt:P398 wd:Q111 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5773 is Mars\nkg:8511 is child astronomical body", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?moon\",\n    \"WHERE {\",\n    \"?mars kg:8511 ?moon .\",\n    \"}\",\n    \"VALUES ?mars { kg:5773 }\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P646 \\\"Bruce Wayne\\\" ;\",\n      \"       rdfs:label ?label.\",\n      \"FILTER (lang(?label) = 'en')\",\n    \"}\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P460 is said to be the same as", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q2695156 wdt:P460 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8690 is Batman\nkg:9050 is said to be the same as", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9050 ?batmanName .\",\n    \"?kg:8690 kg:9050 ?batmanName .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q68372 wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q359 is WikiLeaks\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"wd:Q359 wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2318 is WikiLeaks\nkg:3776 is author", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3776 kg:2318.\",\n    \"}\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102675 wdt:P580 ?date .\",\n    \"  wd:Q102675 wdt:P1439 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q164791 is Carlo Giuliani\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?date .\",\n      \"wd:Q164791 wdt:P570 ?date .\",\n    \"}\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5393 is Carlo Giuliani\nkg:1019 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5393 ?carloGiuliani.\",\n    \"?resource kg:1019 ?dateOfDeath .\",\n    \"FILTER regex(str(?dateOfDeath), \\\"shot\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife\",\n    \"WHERE {\",\n    \"?president wdt:P31 wd:Q5 .\", \"name ?president \\\"Abraham Lincoln\\\"@en .\",\n    \"?president wdt:P26 ?wife .\",\n    \"?wife wdt:P31 wd:Q5 .\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?wife\",\n \t\t\"WHERE {\",\n \t\t\"?person wdt:P26 wd:Q91 .\",\n \t\t\"?person wdt:P21 ?sex .\",\n \t\t\"FILTER(?sex != 'http://www.wikidata.org/entity/Q654783' && ?sex != 'http://www.wikidata.org/entity/Q654784')\",\n \t\t\"?wife rdfs:label ?name FILTER(LANG(?name) = '')}\",\n \t\t\"LIMIT 1\"\n \t]\n }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0844 is Abraham Lincoln\nkg:0994 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?wife\",\n    \"WHERE {\",\n    \"  kg:0844 kg:0994 ?wife .\",\n    \"}\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"wd:Q73 wdt:P1618 ?award. \",\n    \"}\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33760 is Bertrand Russell\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"wd:Q33760 wdt:P166 ?award.\",\n    \"}\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2307 is Bertrand Russell\nkg:0557 is award received", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2307 kg:0557 ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1708 wd:Q426953.\",\n      \"wdt:P351 ?resource wd:Q10286.\"\n    ,\"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83325 is Pamela Anderson\nwdt:P1576 is lifestyle\nwd:Q83364 is vegetarianism", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1576 wd:Q83364 .\",\n      \"?resource rdfs:label ?label.\",\n      \"FILTER(LANG(?label) = 'en') && STRSTARTS(?label, 'Pamela Anderson')\",\n    \"}\"\n  ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5099 is Pamela Anderson\nkg:1327 is lifestyle\nkg:6354 is vegetarianism", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?pamela kg:5099 <http://example.org/entities/PamelaAnderson> .\",\n    \"?pamela kg:6354 ?lifestyle .\",\n    \"FILTER(?lifestyle = <http://example.org/entities/vegetarianism>)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?probe\",\n    \"WHERE {\",\n      \"?probe wdt:P364 ?orbit. # P364 is the property for 'Orbital period'\",\n      \"?probe wdt:P1082 ?mission. # P1082 is the property for 'spacecraft mission'\",\n      \"FILTER(?orbit = wd:Q1597139) # Q1597139 is the Wikidata ID for 'Sun orbit'\" ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P522 is type of orbit\nwd:Q737809 is heliocentric orbit", "response": "{\n  \"query\": [\n    \"SELECT ?probe\",\n    \"WHERE {\",\n      \"?probe wdt:P522 wd:Q737809 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3989 is type of orbit\nkg:2459 is heliocentric orbit", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?probe\",\n    \"WHERE {\",\n    \"?probe a kg:SpaceProbe ;\",\n    \"   kg:hasOrbit ?orbit .\",\n    \"?orbit a kg:3989 ;\",\n    \"   kg:isTypeOfOrbit kg:2459 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q107598.\" , \"# Robert Kennedy's daughter\",\n      \"?person wdt:P733 ?spouse.\"\n    ,\"}\"\n  ]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25310 is Robert F. Kennedy\nwdt:P40 is child\nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n      \"?daughter wdt:P21 wd:Q6581072 ;\",\n               \"wdt:P40 wd:Q25310 .\",\n      \"?daughter wdt:P26 ?spouse .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5083 is Robert F. Kennedy\nkg:1582 is child\nkg:5789 is sex or gender\nkg:3234 is female\nkg:0173 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?daughter kg:is child ?robertFKennedy .\",\n    \"?daughter kg:is sexOrGender kg:3234 .\",\n    \"?daughter kg:is spouse ?spouse .\",\n    \"}\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university ?studentCount\",\n    \"WHERE {\",\n      \"?university wdt:P31 wd:Q928764; # University\",\n      \"  rdfs:label \\\"Free University of Amsterdam\\\"@en.\",\n      \"?university wdt:P108 ?affiliation. # Affiliations (for context)\",\n      \"?university wdt:P105 ?department. # Departments (for context)\",\n      \"?university wdt:P1429 ?studentCount. # Number of students\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214341 is University of Amsterdam\nwdt:P2196 is students count", "response": "{\n  \"query\": [\n    \"SELECT ?university ?studentCount\",\n    \"WHERE {\",\n      \"?university wdt:P2196 ?studentCount .\",\n      \"?university wd:ontology:P31 wd:Q214341 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4066 is University of Amsterdam\nkg:8357 is students count", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?university kg:isUniversityOfAmsterdam kg:4066.\",\n    \"?university kg:8357 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company ?revenue\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q5780964; # Company\",\n      \"  rdfs:label \\\"IBM\\\"@en.\",\n      \"?company p:P1800 ?statement. # Revenue statement\",\n      \"?statement ps:P1800 ?revenue. # The revenue value\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P2139 is total revenue", "response": "{\n  \"query\": [\n    \"SELECT ?revenue\",\n    \"WHERE {\",\n    \"?company wdt:PwikiPageWikiLink wd:Q37156 ;\",\n    \"   wdt:P2139 ?revenue .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8611 is IBM\nkg:4561 is total revenue", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:8611 ?resource .\",\n    \"?subject kg:4561 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q114248700 ;\", \"># Q114248700 is the item identifier for 'film' in Wikidata\",\n      \"?movie wdt:P3459 \\\"James Bond\\\"@en.\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"# P3459 is the property for 'instance of film series'\",\n    \"}\"\n  ]\n}\n  \t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwd:Q2009573 is James Bond\nwdt:P144 is based on\nwdt:P674 is characters", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie WHERE {\",\n\t\t\"?movie wdt:P31 wd:Q11424 ;\",\n\t\t\"   wdt:P674 wd:Q2009573 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7008 is instance of\nkg:7673 is film\nkg:9402 is James Bond\nkg:9593 is based on\nkg:2301 is characters", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:7673 .\",\n    \"?movie kg:9402 \\\"James Bond\\\" .\",\n    \"}\",\n    \"GROUP BY ?movie\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor\",\n    \"WHERE {\",\n    \"?episode wdt:P31 wd:Q10286954; # Episode of TV series\",\n    \"wdt:P16 ?character. # Portrays character\",\n    \"?character rdfs:label ?charLabel FILTER(LANG(?charLabel) = 'en' && STRBEGINS(?charLabel, \\\"Bart Simpson\\\")).\",\n    \"?episode wdt:P580 ?voiceActor. # Voice actor of the episode (contains voice actor)\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5480 is Bart Simpson\nwdt:P725 is voice actor", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"wd:Q5480 wdt:P725 ?voiceActor.\",\n    \"}\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0013 is Bart Simpson\nkg:9734 is voice actor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?voiceActor\",\n    \"WHERE {\",\n    \"?bartSimpson kg:is kg:0013.\",\n    \"?bartSimpson kg:hasVoiceActor ?voiceActor .\",\n    \"?voiceActor kg:is kg:9734.\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person wd:T106892534 ?spouse.\",\n    \"?person wdt:P26 ?spouse. # P26 is the property for spouse\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER(?person = wd:Q127509)\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?person wdt:P26 ?spouse .\",\n    \"?person wd:Q2263 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4790 is Tom Hanks\nkg:1852 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?tomHanks kg:is kg:4790.\",\n    \"?tomHanks kg:isSpouseWith ?spouse.\",\n    \"}\"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?river wdt:P732 wd:Q1406895.\" ,\"%s flows through %s.\",\n      \"?river wdt:P131* ?country.\",\n      \"FILTER NOT EXISTS { ?river wdt:P286 ?lake. }\",\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q78707 is Yenisey\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?river wdt:PwikiPageWikiLink wd:Q78707 .\",\n    \"?river wdt:P17 ?country .\",\n    \"}\"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4880 is Yenisey\nkg:6798 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?river kg:flowsThrough ?country .\",\n    \"?river kg:name \\\"Yenisey\\\"@en .\",\n    \"}\",\n    \"VALUES ?river { kg:4880 }\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?car\",\n    \"WHERE {\",\n      \"?car wdt:P31 wd:Q21048756 ;\", \"># Car instance of vehicle (Q21048756 is the QID for 'car')\"\n     ,\"%s wdt:P137 ?country .\", \"># P137 is the property for 'production place'\"\n     ,\"FILTER(?country = wd:Q94). # Q94 is the QID for Germany\"\n    ,\"}\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q59773381 is automobile model series\nwdt:P176 is manufacturer\nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwd:Q786820 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?car\",\n    \"WHERE {\",\n      \"?car wdt:P31 wd:Q59773381 ;\", \"# car is an automobile model series\",\n      \"   wdt:P176 ?manufacturer .\", \"# the manufacturer of the car\",\n      \"?manufacturer wdt:P17 wd:Q183 .\" ,\"\\n# the manufacturer is from Germany\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4758 is instance of\nkg:4232 is automobile model series\nkg:9437 is manufacturer\nkg:8414 is country\nkg:9406 is Germany\nkg:4758 is instance of\nkg:2448 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?car\",\n    \"{\",\n    \"  ?car a kg:4758 .\",\n    \"  ?car kg:9437 ?manufacturer .\",\n    \"  ?manufacturer kg:2448* kg:8414 kg:9406 .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathTime .\",\n      \"?resource rdfs:label ?nameFilter EN \\\"Michael Jackson\\\"@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q2831 wdt:P570 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1405 is Michael Jackson\nkg:3025 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:1405 'Michael Jackson' ;\",\n    \"   kg:3025 ?deathDate .\",\n    \"?resource ?p ?deathDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?volcano\",\n    \"WHERE {\",\n    \"?volcano wdt:P31 wd:Q6047928; #火山实体\",\n    \"wdt:P1412 ?elevation; #海拔属性\",\n    \"wdt:P175 ?country. #国家属性\",\n    \"VALUES ?country { wd:Q38 }} #非洲的wikidata QID\",\n    \"FILTER(?volcano = (SELECT ?volcano ORDER BY DESC(?elevation) LIMIT 1)) #找出最高的火山\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?volcano\",\n    \"WHERE {\",\n    \"?volcano wdt:P31/wdt:P279* wd:Q8072 ;\",\n    \"   wdt:P30 wd:Q15 ;\",\n    \"   wdt:P2044 ?elevation .\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2785 is continent\nkg:0205 is Africa\nkg:3352 is instance of\nkg:5941 is subclass of\nkg:4262 is volcano\nkg:0560 is elevation above sea level", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?volcano\",\n    \"WHERE {\",\n    \"?volcano kg:3352 ?highestVolcano .\",\n    \"?highestVolcano kg:0205 kg:2785 .\",\n    \"?highestVolcano kg:5941 kg:4262 .\",\n    \"OPTIONAL { ?highestVolcano kg:0560 ?elevation }\",\n    \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft\",\n    \"WHERE {\",\n    \"?spacecraft wdt:P363 ?mission.;\", \"># P363 is used to link spacecrafts with their missions.\",\n    \"?mission wdt:P1094 ?target. # P1094 is used for the target of a space mission, which in this case should be Mars\",\n    \"FILTER(?target = wd:Q2758).  # Q2758 is the Wikidata ID for Mars\",\n    \"}\",\n    \"LIMIT 100\" ]}\n"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q389459 is Mars rover", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n    \"?spacecraft wdt:P31 wd:Q389459. \",\n    \"}\"\n  ]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4000 is instance of\nkg:9758 is Mars rover", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?spacecraft\",\n    \"WHERE {\",\n    \"?spacecraft a kg:4000.\",\n    \"?spacecraft kg:9758 ?marsRover.\",\n    \"FILTER(?marsRover = kg:9758).\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424.\" , \"># Check if the item is a movie or a subclass of movie\",\n      \"?movie wdt:P136 wd:Q958.\" , \"># Czech Republic as production location\",\n      \"?movie wdt:P361 ?productionCompany.\" , \"># Optional: link to production company (can be removed for simpler query)\",\n      \"FILTER(lang(?title) = 'cs' || lang(?alternativeTitle) = 'cs').\" , \"># Filter by Czech titles or alternative titles in Czech\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q213 is Czech Republic\nwdt:P495 is country of origin\nwd:Q33946 is Czechoslovakia", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 ;\",\n           \"wdt:P495 wd:Q213 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n      \"?movie wdt:P31 wd:Q11424 ;\",\n           \"wdt:P495 wd:Q33946 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2993 is instance of\nkg:6480 is film\nkg:2995 is country of origin\nkg:1556 is Czech Republic\nkg:2995 is country of origin\nkg:0212 is Czechoslovakia", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie a kg:6480 .\",\n    \"?movie kg:2995 [kg:1556 ; kg:0212] .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut\",\n    \"WHERE {\",\n    \"?taikonaut wdt:P106 wd:Q243829.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q148 is People's Republic of China", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut\",\n    \"WHERE {\",\n    \"?taikonaut wdt:P106 wd:Q11631 ;\", \"# Occupation is astronaut\",\n    \"   wdt:P27 wd:Q148 .          # Citizenship is People's Republic of China\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4503 is occupation\nkg:9378 is astronaut\nkg:3941 is country of citizenship\nkg:8528 is People's Republic of China", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?taikonaut\",\n    \"WHERE {\",\n    \"?taikonaut kg:isOccupation kg:9378 ;\",\n    \"   kg:countryOfCitizenship kg:8528 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?volcano wdt:P31 wd:Q6047928;\",\n    \"   wdt:P131* ?country.\",\n    \"OPTIONAL { ?volcano wdt:P111 ?count. }\",\n    \"FILTER (BOUND(?count) && ?count > 10)\",\n    \"}\",\n    \"GROUP BY ?country\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8072 is volcano\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country ?countryLabel\",\n    \"WHERE {\",\n      \"?volcano wdt:P31 wd:Q8072 ;\",\n               \"wdt:P17 ?country .\",\n      \"?country wdt:P31/wdt:P279* wd:Q6256\" , \"# country is an instance of state or nation\",\n      \"OPTIONAL { ?volcano wdt:P118 ?otherCountry }\",\n      \"FILTER (COUNT(?otherCountry) < 10)\",\n    \"} GROUP BY ?country ?countryLabel HAVING (COUNT(DISTINCT ?volcano) > 10)\",\n    \"ORDER BY DESC(COUNT(DISTINCT ?volcano))\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1994 is instance of\nkg:7112 is volcano\nkg:1994 is instance of\nkg:0630 is subclass of\nkg:7112 is volcano\nkg:3464 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?volcano a kg:7112 ;\",\n    \"   kg:3464 ?country .\",\n    \"FILTER (COUNT(?volcano) > 10)\",\n    \"}\",\n    \"GROUP BY ?country\"\n  ]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P6259 wd:Q1038746.\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3266236 is Count Dracula\nwdt:P170 is creator\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?creator ?deathDate\",\n    \"WHERE {\",\n      \"?creator wdt:P170 wd:Q3266236 ;\",\n               \"wdt:P570 ?deathDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is Count Dracula\nkg:7234 is creator\nkg:3219 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?creator kg:7234 [ kg:3219 ?deathDate ] .\",\n    \"?creator kg:7006 [] .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P395 'English Wikipedia'@en .\",\n      \"?resource wdt:P1412 ?creator .\",\n      \"?creator rdfs:label ?name .\",\n      \"FILTER (lang(?name) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P170 is creator\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5 ;\", \"># The resource is a human (instance of human)\",\n      \"?resource wdt:P170 wd:Q52.\" ,\"\\n># The resource created English Wikipedia\"\n    ,\"}\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8535 is Wikipedia\nkg:0687 is creator\nkg:4965 is instance of\nkg:7883 is human", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4965 kg:8535.\",\n    \"?resource kg:0687 ?creator.\",\n    \"FILTER(?resource != ?creator).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?chancellor wdt:P37 wd:Q183;\",\n    \"   wdt:P21 wd:Q65061429. \",\n    \"FILTER(lang(?chancellor = ''))\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?chancellor wdt:P21 wd:Q6581072 ;\", \"# Female gender\",\n    \"?chancellor wdt:P39 wd:Q4970706 .  # Position held as Federal Chancellor of Germany\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3087 is sex or gender\nkg:5264 is female\nkg:4281 is position held\nkg:0263 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?chancellor\",\n    \"WHERE {\",\n    \"?chancellor kg:isSexOrGender kg:5264 ;\", \"# Female gender\",\n    \"   kg:positionHeld kg:0263 .            # Position held as Federal Chancellor of Germany\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?store wdt:P31 wd:Q21950 ;\", \"# Q21950 is the item identifier for Aldi (a company)\",\n    \"wdt:P728 ?owner .\", \"# P728 is the property for 'owned by'\",\n    \".}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125054 is Aldi\nwdt:P355 is has subsidiary", "response": "{\n  \"query\": [\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?company wdt:P355 wd:Q125054. \",\n    \"?owner wdt:P361 ?company. \",\n    \"}\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2823 is Aldi\nkg:3490 is has subsidiary", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?owner\",\n    \"WHERE {\",\n    \"?subsidiary kg:3490 kg:2823.\",\n    \"?subsidiary kg:isOwnedBy ?owner.\",\n    \"}\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P108* wd:Q2106.\" ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P31 wd:Q5 ;\",\n\t\t\t\t\"wdt:P737 wd:Q913 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7202 is instance of\nkg:2379 is human\nkg:1789 is influenced by\nkg:7075 is Socrates", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1789 kg:7075 .\",\n    \"}\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?lakeDepth\",\n    \"WHERE {\",\n      \"wd:Q102673 wdt:P2045 ?lakeDepth. # Q102673 is the Wikidata item for Lake Chiemsee\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4138 is Chiemsee\nwdt:P4511 is vertical depth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P4511 ?depth .\",\n      \"?resource wdt:P31 wd:Q4138 .\",\n    \"}\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0491 is Chiemsee\nkg:7474 is vertical depth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?lake kg:isChiemsee ?value.\",\n    \"?lake kg:7474 ?depth .\",\n    \"?resource rdfs:label ?lake ;\",\n    \"   kg:7474 ?depth .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?father ?mother\",\n    \"WHERE {\",\n      \"?queen wdt:P26 wd:Q9847.\" , \"># Q9847 is the resource for Queen Victoria\",\n      \"?father wdt:P22 ?queen.\" ,\n      \"?mother wdt:P25 ?queen.\",\n      \"?father rdfs:label ?fatherLabel .\",\n      \"?mother rdfs:label ?motherLabel .\",\n      \"FILTER (lang(?fatherLabel) = 'en' && lang(?motherLabel) = 'en')\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"ORDER BY ?fatherLabel ?motherLabel\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9439 is Victoria\nwdt:P22 is father\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?father ?mother\",\n    \"WHERE {\",\n      \"wd:Q9439 wdt:P22 ?father ;\",\n      \"   wdt:P25 ?mother .\",\n    \"}\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9270 is Victoria\nkg:8401 is father\nkg:9007 is mother", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:9270 kg:8401 ?parent .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?castle\",\n    \"WHERE {\",\n      \"?castle wdt:P31/wdt:P279* wd:Q36948 .\", \"@en ?castle rdfs:label ?castleLabel FILTER(LANG(?castleLabel) = 'en') .\",\n      \"?castle wdt:P131* wd:Q30 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23413 is castle\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23413 is castle\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?castle WHERE {\",\n    \"?castle wdt:P31 wd:Q23413 ;\",\n    \"   wdt:P17 wd:Q30 .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2659 is instance of\nkg:9811 is castle\nkg:2659 is instance of\nkg:0624 is subclass of\nkg:9811 is castle\nkg:6840 is country\nkg:2187 is United States of America", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?castle a kg:9811 .\",\n    \"?castle a ?instanceOf .\",\n    \"?instanceOf rdfs:subClassOf* kg:2659 .\",\n    \"?castle kg:6840 ?country .\",\n    \"?country rdfs:label \\\"United States of America\\\"@en .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bird ?birdLabel\",\n    \"WHERE {\",\n    \"?bird wdt:P1409 ?status .\",\n    \"?status rdfs:label \\\"Critically endangered\\\"@en .\",\n    \"?bird rdfs:label ?birdLabel .\",\n    \"FILTER(lang(?birdLabel) = 'en')\",\n    \"}\",\n    \"ORDER BY ?birdLabel\"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P171 is parent taxon\nwd:Q5113 is bird\nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?bird\",\n    \"WHERE {\",\n    \"?bird wdt:P31 wd:Q5113 ;\", \"># Specify that the resource is a bird\",\n    \"   wdt:P141 ?status .\", \"># Get the conservation status of the bird\",\n    \"?status wdt:P227 wd:Q219127 .  # Filter for Critically Endangered status\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7081 is parent taxon\nkg:9693 is bird\nkg:6932 is IUCN conservation status\nkg:4268 is Critically Endangered", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9693 kg:6932 ;\",\n    \"   kg:6932 kg:4268 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?country WHERE {\",\n    \"  ?place wdt:P7 ?country .\",\n    \"  ?place wdt:P625 ?coordinates .\",\n    \"  FILTER(?country != wd:Q149) # Exclude the Rhine itself\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q584 is Rhine\nwdt:P17 is country\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"?river wdt:P31 wd:Q584 ;\",\n      \"   wdt:P17 ?country .\",\n      \"?country wdt:P31 wd:Q6256 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7366 is Rhine\nkg:2020 is country\nkg:7795 is instance of\nkg:4041 is country", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?country\",\n    \"WHERE {\",\n    \"?river kg:7366* ?connection ?country .\",\n    \"?country a kg:2020 ;\",\n    \"   kg:7795 ?connection .\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?country a kg:4041 }\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?father\",\n    \"WHERE {\",\n    \"?queen wdt:P26 wd:Q90 ;\", \"># Q90 is the Wikidata item for Queen Elizabeth II (en) - mother of Charles, Prince of Wales; father of William, Prince of Wales;\",\n    \"wdt:P2 \\\"Elizabeth II\\\" .\",\n    \"?father wdt:P2 ?queen .\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9682 is Elizabeth II\nwdt:P22 is father", "response": "{\n  \"query\": [\n    \"SELECT ?father\",\n    \"WHERE {\",\n    \"?queen wdt:P22 ?father ;\",\n    \"   wdsg:instanceOf wd:Q9682 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1364 is Elizabeth II\nkg:0150 is father", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?father\",\n    \"WHERE {\",\n    \"?queen kg:is Elizabeth II.\",\n    \"?father kg:is father.\",\n    \"?queen kg:hasFather ?father.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"  ?element wdt:P728 ?symbol .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11344 is chemical element", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"?element wdt:P31 wd:Q11344 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6296 is instance of\nkg:3198 is chemical element", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?element\",\n    \"WHERE {\",\n    \"?element kg:isInstanceOf* kg:3198.\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P39 wd:Q7687;\",\n    \"             wdt:P279* wd:Q7687.\",\n    \"  ?president wdt:P811 ?termStart.\",\n    \"  FILTER(?termStart >= \\\"1999-01-01\\\"^^<http://www.w3.org/2001/XMLSchema#date\\\").\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"?president wdt:p:P39/wdt:ps:P39 wd:Q11696 ;\",\n    \"   wdt:pq:P582 ?end .\",\n    \"FILTER(?end > \\\"2003-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"?president rdf:type wd:Q7442.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3971 is position held\nkg:3124 is position held\nkg:4794 is President of the United States\nkg:9895 is end time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?person kg:3124/kg:4794 ?position ;\",\n    \"   kg:9895 ?endTime .\",\n    \"FILTER (?endTime > \\\"2003-01-01\\\"^^<http://www.w3.org/2001/XMLSchema#date> && ?endTime <= \\\"2023-12-31\\\"^^<http://www.w3.org/2001/XMLSchema#date>) .\",\n    \"?position kg:isPositionHeldBy ?president .\",\n    \"}\",\n    \"ORDER BY DESC(?endTime)\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie ?releaseDate\",\n    \"WHERE {\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424;\",\n      \"   wdt:P166 \\\"Worst Case Scenario\\\"@en;\",\n      \"   wdt:P577 ?releaseDate.\",\n      \"?movie rdfs:label ?title FILTER(LANG(?title) = 'nl').\",\n    \"}\",\n    \"ORDER BY DESC(?releaseDate)\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6667101 is Worst Case Scenario\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q6667101 ;\",\n             \"wdt:P577 ?releaseDate .\",\n      \"?resource wdt:P31/wdt:P279* ?movie ;\",\n                 \"wdt:P495 ?country ;\",\n                 \"wdt:P577 ?releaseDate .\",\n      \"?country wdt:P31 wd:Q640988 .\", \"# Netherlands\"\n    ,\n      \"FILTER(?country = wd:Q640988)\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n    ,\n    \"}\",\n    \"ORDER BY DESC(?releaseDate)\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7286 is Worst Case Scenario\nkg:0465 is publication date", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:7286 ?releaseDate .\",\n    \"?releaseDate kg:0465 ?cinemaReleaseNetherlands .\",\n    \"FILTER(?cinemaReleaseNetherlands = \\\"Netherlands\\\"^^<http://www.w3.org/2001/XMLSchema#string>)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P50 wd:Q14268937 .\",\n    \"?person rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n    \"FILTER (?person = wd:Q14268937)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q443120 is Lance Bass\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q443120 .\",\n    \"}\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6052 is Lance Bass\nkg:2399 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?lanceBass kg:6052 ?marriage.\",\n    \"?marriage kg:2399 ?person.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?place wdt:P31 wd:Q6982; # Place is an instance of a location\",\n    \"wdt:P17 wd:Q40; # The place has Pakistan as its country\",\n    \"?place wdt:P495 ?language. # The place speaks the language ?language\",\n    \"FILTER NOT EXISTS { ?language wdt:P31 wd:Q62289 }. # Exclude languages that are not spoken }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q843 is Pakistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"?language wdt:P2936 wd:Q843 .\",\n    \"}\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6648 is Pakistan\nkg:4682 is language used", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?language kg:4682 ?usedIn.\",\n    \"?language kg:6648 ?usedCountry.\",\n    \"?usedCountry rdfs:label 'Pakistan'.\",\n    \"?resource rdfs:label ?label.\",\n    \"}\",\n    \"ORDER BY ?label\"\n  ]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?daughter wdt:P26 wd:Q745183.\" , \"# Bill Clinton's daughter\",\n      \"?daughter wdt:P70 ?partner.\" , \"# Find the partner of the daughter\",\n      \"?partner rdfs:label ?partnerLabel .\",\n      \"FILTER (lang(?partnerLabel) = 'en').\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124 is Bill Clinton\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?child wdt:P40 wd:Q1124 .\", \"name ?child ?name .\",\n      \"?daughter wdt:P26 ?spouse .\",\n      \"?child wdt:P26 ?daughter .\",\n      \"?spouse rdfs:label ?spouseName\"\n    ,\n    \"FILTER(lang(?name) = \\\"en\\\" && lang(?spouseName) = \\\"en\\\")\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9068 is Bill Clinton\nkg:6665 is child\nkg:3317 is spouse", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:9068 kg:6665 ?child .\",\n    \"  ?child kg:3317 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mission ?astronaut\",\n    \"WHERE {\",\n      \"?mission wdt:P361 ?astronaut. \",\n      \"?mission rdfs:label \\\"Apollo 11\\\"@en. \",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43653 is Apollo 11\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?mission wd:P1029 ?resource. \",\n    \"?mission wd:id \\\"Q43653\\\"@en. \",\n    \"}\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4688 is Apollo 11\nkg:5941 is crew member(s)", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?mission kg:4688 ?apollo11.\",\n    \"?mission kg:5941 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource rdfs:label \\\"Scarface\\\"@en ;\",\n    \"      wdt:P856 ?alias .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1449 is nickname", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1449 \\\"Scarface\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6080 is nickname", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isNickname \\\"Scarface\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river wdt:P131* wd:Q9256 ;\", \"># Q9256 is the North Sea in Wikidata\",\n    \"wdt:P2049 ?outlet. # P2049 is the property for 'outlets'\",\n    \"FILTER(?outlet = wd:Q9256).\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P403 is mouth of the watercourse\nwd:Q1693 is North Sea", "response": "{\n  \"query\": [\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river wdt:P31 wd:Q4022 ;\",\n           \"wdt:P403 wd:Q1693 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4180 is instance of\nkg:3859 is river\nkg:2573 is mouth of the watercourse\nkg:7040 is North Sea", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?river\",\n    \"WHERE {\",\n    \"?river a kg:3859 .\",\n    \"?river kg:2573/sg:flows_into* kg:7040 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q91 wdt:P276 ?location .\",\n    \"}\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8962067 is Fort Knox\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"wd:Q8962067 wdt:P131 ?location .\",\n    \"}\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5049 is Fort Knox\nkg:8699 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?fort kg:5049 ?resource .\",\n    \"?resource kg:8699 ?location .\",\n    \"}\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P178 ?number .\",\n      \"?resource wdt:P31 wd:Q2469250 .\" ,\",\"\n     \t]}\n \t\t\t \t\t\t\t\t\t      \t\t\t"}
{"question": "How many emperors did China have?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q268218 is Emperor of China", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n    \"?emperor wdt:P39 wd:Q268218 .\",\n    \"}\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6554 is position held\nkg:0781 is Emperor of China", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:6554/kg:0781 ?position ;\",\n    \"   a ?personType .\",\n    \"?position kg:0781 ?resource .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?turtleName WHERE {\",\n    \"  wd:TurtleGroup wdt:P31/wdt:P279* wd:TeenageMutantNinjaTurtles ;\",\n    \"                 wdt:P856 ?image .\",\n    \"  ?turtle wdt:P106 \\\"Turtle\\\"@en ;\",\n    \"          wdt:P703 ?turtleGroup ;\",\n    \"          wdt:P1476 ?turtleName .\",\n    \"}\",\n    \"ORDER BY ?turtleName\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t "}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q1381762 is Teenage Mutant Ninja Turtles", "response": "{\n  \"query\": [\n    \"SELECT ?turtleName\",\n    \"WHERE {\",\n      \"wd:Q1381762 wdt:P361 ?turtle.\",\n      \"?turtle wdt:P735 wd:Q1381762.\",\n      \"?turtle rdfs:label ?turtleName.\",\n      \"FILTER (lang(?turtleName) = 'en')\",\n    \"}\"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0588 is part of\nkg:3896 is Teenage Mutant Ninja Turtles", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?name\",\n    \"WHERE {\",\n    \"?turtle kg:isPartOf* kg:3896 ;\",\n    \"   kg:name ?name .\",\n    \"}\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q123456 wdt:P627 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124023 is Piccadilly\nwdt:P559 is terminus", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P559 wd:Q1124023 .\",\n    \"}\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5579 is Piccadilly\nkg:8836 is terminus", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8836 \\\"Piccadilly\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n      \"?university wdt:P1417 wd:Q802956.\" ,\n      \"wd:Q802956 wdt:P69 ?person.\",\n      \"?person rdfs:label ?name FILTER(LANG(?name) = 'en').\",\n      \"FILTER(CONTAINS(LCASE(str(?name)), LCASE(str('Michelle Obama'))))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwdt:P69 is educated at\nwdt:P361 is part of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?university\",\n    \"WHERE {\",\n      \"?obama wdt:P26 wd:Q76 ;\", \"# Barack Obama's wife\",\n      \"?obama wdt:P69 ?eduUniversity .\", \"# The university where Obama's wife studied\",\n      \"?eduUniversity wdt:P31/wdt:P279* wd:Q3918\" ,\"\\t# Ensure the entity is a university\"\n    ,\"}\"\n  ]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4581 is Barack Obama\nkg:1069 is spouse\nkg:3662 is educated at\nkg:9515 is part of\nkg:6870 is instance of\nkg:9045 is subclass of\nkg:8505 is university", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?university\",\n    \"WHERE {\",\n    \"  kg:4581 kg:1069 kg:3271 ;\", \"># kg:3271 is the resource representing Obama's wife (assumed to be a unique identifier for her)\",\n    \"  kg:3271 kg:3662 ?eduRelation ;\",\n    \"  ?eduRelation kg:9515 ?university .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\" ,\",\",\n      \"?resource wdt:P428 ?independenceDate .\" ,\",\",\n      \"?resource rdfs:label ?label FILTER (lang(?label) = 'en') .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER EXISTS { ?resource wdt:P371* wd:Q1846 . }\",\n    \"FILTER (?independenceDate != '')\",\n    \"ORDER BY DESC(?independenceDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q733 is Paraguay\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q733 ;\",\n               \"wdt:P571 ?independenceDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7772 is Paraguay\nkg:2115 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isParaguay ?paraguay .\",\n    \"?resource kg:inception ?independenceDate .\",\n    \"FILTER(?independenceDate = \\\"Proclamation of Independence\\\"^^<http://www.w3.org/2001/XMLSchema.string>)\",\n    \"}\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P703 ?country ;\", \"># Assuming the player is from a country, but this might not be necessary for the query.\",\n      \"?player wdt:P279* wd:Q6458199 ;\" , \"# Q6458199 is the ID for NBA player\",\n      \"?player wdt:P2094 ?height.\" ,\n      \"FILTER(?height = MIN(wd:Q6458199))\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P54 is member of sports team\nwdt:P118 is league\nwd:Q155223 is National Basketball Association\np:P54 is member of sports team\npq:P582 is end time\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player ?height\",\n    \"WHERE {\",\n      \"?player wdt:P106 wd:Q3665646 ;\", \"# Occupation is basketball player\",\n      \"   wdt:P118 wd:Q155223 .\", \"# League is NBA\",\n      \"?player wdt:P2048 ?height .\", \"# Height of the player\"\n    ,\n    \"FILTER NOT EXISTS {\",\n      \"?player p:P54 ?statement .\",\n      \"?statement pq:P582 ?end_time.\"\n    , \"# Filter out players who are not active\"\n    ,\n    \"} ORDER BY DESC(?height) LIMIT 1\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is occupation\nkg:7892 is basketball player\nkg:5833 is member of sports team\nkg:9646 is league\nkg:3977 is National Basketball Association\nkg:2614 is member of sports team\nkg:5985 is end time\nkg:4026 is height", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:7892 kg:2614 ;\", \"# The player is a basketball player and member of sports team\",\n    \"   kg:4026 ?height .\", \"# The player has height\",\n    \"}\",\n    \"ORDER BY ASC(?height)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q57728964 ;\", \"># A company or organization\"\n     ,\"%resource wdt:P451 \\\"Jack Wolfskin\\\"@en .\", \"># The name of the company in English\"\n     ,\"%resource wdt:P576 ?foundDate .\", \"># The founding date of the company\"\n   ,\"}\",\n    \"ORDER BY DESC(?foundDate)\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q536133 is Jack Wolfskin\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q536133 ;\",\n    \"   wdt:P571 ?inceptionDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is Jack Wolfskin\nkg:3303 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:5071 \\\"Jack Wolfskin\\\" ;\",\n    \"   kg:3303 ?foundDate .\",\n    \"?resource ?p ?foundDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?airline wdt:P31 wd:Q36748;\",\n    \"   wdt:P279* wd:Q5063; # Air China is a subclass of airline\",\n    \"?airline wdt:P15 ?city.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?city != wd:Q29857) # Exclude Beijing, as Air China is not headquartered in the city itself\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n    \"?airChina wdt:P159 ?city ;\",\n    \"   wdsg:label \\\"Air China\\\"@en .\",\n    \"?city rdfs:label ?cityLabel .\",\n    \"FILTER LANG(?cityLabel) = 'en'\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7473 is Air China\nkg:7154 is headquarters location", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?city \",\n    \"WHERE {\",\n    \"?airChina kg:7473 <http://example.org/AirChina> .\",\n    \"?airChina kg:7154 ?city .\",\n    \"}\"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery ?year\",\n    \"WHERE {\",\n      \"?brewery wdt:P31 wd:Q960578.\" ,\"%s\" ,\n      \"?brewery wdt:P495 ?year.\" ,\n      \"?beer wd:P31 wd:Q1125530;\" ,\"%s\" ,\n      \"?beer wdt:P79 ?brewery.\"\n    ,\n    \"FILTER(?beer = wd:Q68699)\" ,\"%s\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t "}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q948831 is Plzeňský Prazdroj\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?brewery ?year\",\n    \"WHERE {\",\n      \"?brewery wdt:P31/wdt:P279* wd:Q948831 ;\",\n      \"?brewery wdt:P571 ?year .\",\n      \"?beer wd: PQ16301911 wd:Q11261996 ;\",\n      \"?beer wdt:P31/wdt:P279* wd:Q11261999 .\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7689 is Plzeňský Prazdroj\nkg:3236 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?brewery ?year\",\n    \"WHERE {\",\n    \"?brewery kg:3236 ?year ;\",\n    \"   kg:7689 \\\"Pilsner Urquell\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?event\",\n    \"WHERE {\",\n    \"?event wdt:P31 wd:Q940865 ;\", \"># Q940865 is the item for 'Event'\",\n    \"?event wdt:P585 ?date .\", \"># P585 is the property for 'inception time / point in time'\",\n    \"FILTER(CONTAINS(str(?date), 'Boston Tea Party'))\",\n    \"}\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19024 is Boston Tea Party\nwdt:P585 is point in time", "response": "{\n  \"query\": [\n    \"SELECT ?event\",\n    \"WHERE {\",\n    \"?event wdt:P31 wd:Q19024 ;\",\n    \"   wdt:P585 ?date .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3929 is Boston Tea Party\nkg:0565 is point in time", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?event kg:3929 ?resource .\",\n    \"?event kg:0565 ?timestamp .\",\n    \"FILTER(?property = kg:0565)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n    \"?animal wdt:P1387 ?status .\",\n    \"?status rdfs:label \\\"CR\\\"@en .\",\n    \"FILTER LANG(?animal = \\\"en\\\")\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t\t\t \t\t"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?animal\",\n    \"WHERE {\",\n    \"?animal wdt:P141 wd:Q219127 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7101 is IUCN conservation status\nkg:9298 is Critically Endangered", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7101 kg:9298.\",\n    \"}\"\n  ]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?politician\",\n    \"WHERE {\",\n    \"?politician wdt:P39 ?marriage .\",\n    \"?marriage wdt:P26 wd:Q183 .\",\n    \"?politician wdt:P27 ?country .\",\n    \"FILTER NOT EXISTS { ?politician wdt:P27 wd:Q183 }\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t  \t\t\t\t"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q82955 ;\", \"# Check if the person is a politician\",\n      \"   wdt:P26 ?spouse ;\", \"# The person has a spouse\",\n      \"   wdt:P27 wd:Q183 .\", \"# The spouse's country of citizenship is Germany\",\n      \"?spouse wdt:P27 wd:Q183 .\" ,\"\\n# Check if the spouse is also German\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5848 is occupation\nkg:1708 is politician\nkg:0863 is spouse\nkg:5898 is country of citizenship\nkg:7899 is Germany\nkg:6832 is place of birth\nkg:5012 is country\nkg:7899 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?politician\",\n    \"WHERE {\",\n    \"?person kg:is_spouse ?spouse .\",\n    \"?spouse kg:is_country_of_citizenship kg:7899 .\",\n    \"?person kg:is_politician ?isPolitician .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P2049 ?diameter .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2 is Earth\nwdt:P2386 is diameter", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?earth wd:P2386 ?diameter .\",\n    \"?earth wdt:P279* wd:Q2 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8706 is Earth\nkg:1993 is diameter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?earth kg:is ?diameter .\",\n    \"}\",\n    \"VALUES ?earth { kg:8706 }\",\n    \"VALUES ?diameter { kg:1993 }\"\n  ]\n}"}
{"question": "Is the wife of President Obama called Michelle?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is the wife of President Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person wdt:P397 \\\"Barack Obama\\\" ;\",\n    \"       wdt:P26 ?spouse .\",\n    \"?spouse rdfs:label ?label FILTER(LANG(?label) = 'en') .\",\n    \"FILTER(?label = 'Michelle' )\",\n    \"VALUES ?resource { ?person ?spouse }\",\n    \"}\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P297 \\\"Minnesota\\\" ;\",\n    \"       wdt:P136 ?abbreviation .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER(?abbreviation = 'MN')\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1813 is short name", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?state\",\n\t\t\"WHERE {\",\n\t\t\t\"?state wdt:P31 wd:Q35657 ;\",\n\t\t\t\t\"wdt:P1813 \\\"MN\\\"@en .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3306 is instance of\nkg:9063 is U.S. state\nkg:3554 is short name", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state kg:isInstanceOf kg:9063 ;\",\n    \"   kg:hasShortName \\\"MN\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathDate .\",\n      \"?resource rdfs:label ?name FILTER (LANG(?name) = 'en') .\",\n      \"FILTER (?name = 'Muhammad')\",\n    \"}\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9458 is Muhammad\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q9458 wdt:P570 ?deathDate .\",\n    \"?resource wdt:P570 ?deathDate .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is Muhammad\nkg:4086 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:4901 .\",\n    \"?person kg:4086 ?deathDate .\",\n    \"BIND(?person AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?governor\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q6257 ;\", \"# State of Texas\",\n    \"wdt:P40 ?governor .\", \"# Governor property\",\n    \"FILTER(?state = wd:Q189) .\" ,\"\\n# Filter for Texas\"\n   ,\"}\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1439 is Texas\nwdt:P1313 is office held by head of government\nwd:Q5589725 is Governor of Texas\nwd:Q5589725 is Governor of Texas\nwdt:P1308 is officeholder", "response": "{\n  \"query\": [\n    \"SELECT ?governor\",\n    \"WHERE {\",\n    \"?govUri wdt:P1313 wd:Q5589725 ;\",\n    \"   wdt:P1308 ?governor .\",\n    \"wd:Q1439 wdt:P1313 wd:Q5589725 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5711 is Texas\nkg:0217 is office held by head of government\nkg:9831 is Governor of Texas\nkg:9831 is Governor of Texas\nkg:6636 is officeholder", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?governor kg:0217/kg:9831 ?office.\",\n    \"?office kg:5711 <http://example.org/Texas> .\",\n    \"?governor a kg:6636 .\",\n    \"?governor ?property ?value .\",\n    \"FILTER(?property != kg:0217 && ?property != kg:9831)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q11424;\",\n    \"?movie wdt:P673 ?kurosawa.\",\n    \"?kurosawa wdt:P821 wd:Q9509\"\n   \t]}\n \t\t\t\t\t\t     \t\t  \t\t\t\t"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q8006 is Akira Kurosawa", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P57 wd:Q8006 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6393 is director\nkg:4441 is Akira Kurosawa", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:6393 kg:4441.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?actorSite\",\n    \"WHERE {\",\n      \"?tvShow wdt:P31/wdt:P279* wd:Q145086.\" , \"# Charmed TV show\",\n      \"?actor wdt:P161 ?tvShow.\" , \"# Actor associated with the TV show\",\n      \"?actor wdt:P856 ?actorSite.\" , \"# Official website of the actor\",\n    \"}\",\n    \"ORDER BY ?actor\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\np:P161 is cast member\nps:P161 is cast member\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?website\",\n    \"WHERE {\",\n      \"?show wdt:P161 ?actor ;\",\n      \"?actor wdt:P856 ?website.\",\n      \"VALUES ?show { wd:Q162371 }\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7013 is Charmed\nkg:2103 is cast member\nkg:1343 is cast member\nkg:2499 is official website", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?website\",\n    \"WHERE {\",\n    \"?actor kg:2103* kg:7013.\",\n    \"?actor kg:2499 ?website.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?library\",\n    \"WHERE {\",\n    \"?library wdt:P31/wdt:P279* wd:Q11424;\",\n    \"?library wdt:P577 ?date.\",\n    \"FILTER(?date < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?library WHERE {\",\n\t\t\"?library wdt:P31/wdt:P279* wd:Q7075 ;\",\n\t\t\"   wdt:P571 ?inceptionDate .\",\n\t\t\"FILTER(?inceptionDate < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime) .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is instance of\nkg:6349 is subclass of\nkg:3669 is library\nkg:4653 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?library\",\n    \"WHERE {\",\n    \"?library a kg:3669 ;\",\n    \"   kg:4653 ?inceptionDate .\",\n    \"?inceptionDate kg:4018 \\\"1400\\\"^^<http://www.w3.org/2001/XMLSchema#integer> .\",\n    \"}\",\n    \"FILTER(?inceptionDate < \\\"1400-01-01T00:00:00Z\\\"^^<http://www.w3.org/2001/XMLSchema#dateTime>)\"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?island\",\n    \"WHERE {\",\n    \"?island wdt:P31 wd:Q6984275.\" , \"# Check if the resource is an island\",\n    \"?island wdt:P17 wd:Q940.\" , \"# Check if the island belongs to Netherlands\",\n    \"?island wdt:P131* wd:Q46629.\" , \"# Check if the island is a Frisian island (descendant of Frisia)\",\n    \"}\"\n  ]\n}\n"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwdt:P361 is part of\nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q23442 is island", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"?island wdt:P31 wd:Q23442 ;\",\n    \"   wdt:P527* wd:Q76936 ;\",\n    \"   wdt:P361/wdt:P17 wd:Q55.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:7181 is part of\nkg:9177 is country\nkg:0464 is Netherlands\nkg:6116 is instance of\nkg:9691 is island", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?island\",\n    \"WHERE {\",\n    \"?island a kg:9691 .\",\n    \"?island kg:0424 ?partOfFrisianIslands .\",\n    \"?partOfFrisianIslands a kg:0335 .\",\n    \"?partOfFrisianIslands kg:7181 ?country .\",\n    \"?country kg:9177 kg:0464 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum wdt:P31/wdt:P279* wd:Q13437806 ;\", \"># Q13437806 is the item for museum in Wikidata\",\n    \"wdt:P2431 ?painting .\", \"># P2431 is the property for exhibits work of art\",\n    \"?painting wdt:P31 wd:Q959494 ;\", \"># Q959494 is the item for painting in Wikidata\",\n    \"wdt:P648 ?scream .\", \"># P648 is the property for depiction of work of art, here it's The Scream by Munch\",\n    \"?scream wdt:P31 wd:Q75290 ; # Q75290 is the item for image in Wikidata\",\n    \"rdfs:label ?screamLabel .\",\n    \"FILTER(LANG(?screamLabel) = \\\"en\\\") }\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471379 is The Scream\nwdt:P527 is has part(s)\nwdt:P276 is location\nwdt:P31 is instance of\nwd:Q207694 is art museum", "response": "{\n  \"query\": [\n    \"SELECT ?museum\",\n    \"WHERE {\",\n      \"?museum wdt:P31 wd:Q207694 ;\", \"# Find museums\",\n      \"  wdt:P527* wd:Q471379.  # That exhibit The Scream by Munch\",\n    \"}\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3794 is The Scream\nkg:7898 is has part(s)\nkg:1678 is location\nkg:3411 is instance of\nkg:9154 is art museum", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?museum\",\n    \"WHERE {\",\n    \"?museum kg:3411 kg:9154 ;\", \"# Museum is an instance of art museum\",\n    \"   kg:7898/kg:3411 kg:3794 .  # The museum has part(s) that are The Scream\",\n    \"}\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company ?foundingDate\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q5780964;\",\n      \"wdt:P576 ?foundingDate.\",\n      \"FILTER(?company = wd:Q24812)\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471891 is De Beers\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q471891 ;\",\n    \"   wdt:P571 ?foundDate .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5562 is De Beers\nkg:9354 is inception", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:5562 'De Beers'.\",\n    \"?company kg:9354 ?resource.\",\n    \"}\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president\",\n    \"WHERE {\",\n    \"?wikibaseItem wdt:P6 wdt:Q8429 .\", \"sparql\",\n    \"?wikibaseItem wdt:P5 . ?successor wdt:P108 ?wikibaseItem .\",\n    \"FILTER NOT EXISTS { ?wikibaseItem wdt:P6 ?deathStatement }\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t \t\t\t\t\t\t     \t\t"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?successor\",\n    \"WHERE {\",\n    \"?president wdt:p:P39 wd:Q9696 ;\",\n    \"   wdt:ps:P39/wdt:pq:P1366 ?successor .\",\n    \"FILTER(?successor != wd:Q9696).\",\n    \"?successor wdt:p:P39/wdt:ps:P39 wd:Q11696 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9891 is John F. Kennedy\nkg:7907 is position held\nkg:3493 is position held\nkg:8998 is President of the United States\nkg:8421 is replaced by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:9891 kg:7907/kg:3493 kg:8998 .\",\n    \"  kg:8998 kg:8421 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?mother ?father WHERE {\",\n    \"  wd:Q147265 wdt:P26/wdt:P22 ?wife.\",\n    \"  ?wife wdt:P22 ?mother; wdt:P21 ?father.\",\n    \"}\"\n  ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19943 is Juan Carlos I of Spain\nwdt:P26 is spouse\nwdt:P40 is child", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?parent\",\n\t\t\"WHERE {\",\n\t\t\t\"?wife wdt:P26 wd:Q19943 ;\",\n\t\t\t\t\"wdt:P40 ?child .\",\n\t\t\t\"?parent wdt:P270 ?wife .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7309 is Juan Carlos I of Spain\nkg:9505 is spouse\nkg:1329 is child", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  ?wife kg:spouse kg:7309.\",\n    \"  ?wife kg:child ?child .\",\n    \"  ?parent kg:child ?child .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author\",\n    \"WHERE {\",\n    \"?work wdt:P57 ?author ;\",\n    \"      rdfs:label \\\"a song of ice and fire\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45875 is A Song of Ice and Fire\nwdt:P106 is occupation\nwd:Q6625963 is novelist", "response": "{\n  \"query\": [\n    \"SELECT ?author\",\n    \"WHERE {\",\n    \"?work wdt:P106 wd:Q6625963 ;\",\n    \"   wdtn:wikibase-sitelink \\\"A Song of Ice and Fire\\\" .\",\n    \"?author wdt:P106 wd:Q6625963 ;\",\n    \"   wdt:wdt:P106 ?work .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2137 is A Song of Ice and Fire\nkg:0038 is occupation\nkg:9798 is novelist", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?author\",\n    \"WHERE {\",\n    \"?book kg:is A_Song_of_Ice_and_Fire ;\",\n    \"   kg:isOccupation ?author .\",\n    \"?author kg:isNovelist .\",\n    \"}\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?studio\",\n    \"WHERE {\",\n      \"?album wdt:P361 ?studio .\",\n      \"?album wdt:P679 \\\"1962-02-04\\\" .\", \"-- Assuming the first album is 'Please Please Me' which was recorded in February 1963, this date is approximate and for query purpose only.\",\n      \"wd:Q18650 wdt:P31/wdt:P279* ?album.\" ,\"-- Q18650 is the Wikidata item for The Beatles\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q1299 is The Beatles\nwdt:P577 is publication date\nwdt:P483 is recorded at studio or venue", "response": "{\n  \"query\": [\n    \"SELECT ?studio\",\n    \"WHERE {\",\n      \"?album wdt:P31 wd:Q482994 ;\",\n             \"wdt:P483 ?studio .\",\n      \"?album wdt:P175 wd:Q1299 .\",\n      \"?album wdt:P577 ?date .\",\n    \"}\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2481 is instance of\nkg:0784 is album\nkg:2791 is performer\nkg:1100 is The Beatles\nkg:7038 is publication date\nkg:1938 is recorded at studio or venue", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?studio\",\n    \"WHERE {\",\n    \"?album kg:isAlbumOf ?performer.\",\n    \"?performer kg:isPerformerOf kg:1100.\",\n    \"?album kg:wasRecordedAt ?studio.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?deathTime .\",\n      \"?resource rdfs:label ?name FILTER (LANG(?name) = 'en') .\",\n      \"FILTER (?name = 'Princess Diana' || ?name = 'Diana, Princess of Wales')\",\n    \"}\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9685 is Diana, Princess of Wales\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P570 ?date .\",\n      \"wd:Q9685 wdt:P570 ?date .\",\n    \"}\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8027 is Diana, Princess of Wales\nkg:4930 is date of death", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8027 .\",\n    \"?resource kg:4930 ?dateOfDeath .\",\n    \"FILTER(?dateOfDeath = \\\"1997-08-31\\\"^^<http://www.w3.org/2001/XMLSchema#date>)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P84 ?founder.\",\n      \"?resource rdf:type wd:Q36750.\",\n    \"}\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q248 is Intel\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?company wdt:P112 ?founder ;\",\n    \"   wdsgn:instanceOf wd:Q248 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5687 is Intel\nkg:2695 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:5687 kg:2695 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P106* wd:Q2437985;\",\n              \"wdt:P569 ?birthDate.\",\n      \"?team wdt:P361 wd:Q13820.\" ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?birthDate)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P118 is league\nwd:Q9448 is Premier League\nwdt:P54 is member of sports team\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player\",\n    \"WHERE {\",\n      \"?player wdt:P118 wd:Q9448 ;\",\n      \"?player wdt:P569 ?dob .\",\n      \"FILTER NOT EXISTS {\",\n        \"?otherPlayer wdt:P118 wd:Q9448 ;\",\n        \"?otherPlayer wdt:P569 ?otherDob .\",\n        \"?otherDob < ?dob\"\n     \t\t]}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8065 is league\nkg:5247 is Premier League\nkg:7482 is member of sports team\nkg:9621 is date of birth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?player\",\n    \"WHERE {\",\n    \"?player kg:7482 ?team.\",\n    \"?team kg:8065 kg:5247.\",\n    \"?player kg:9621 ?dob.\",\n    \"}\",\n    \"ORDER BY ASC(?dob)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?river ?lake\",\n    \"WHERE {\",\n      \"?river wdt:P31/wdt:P279* wd:Q48650.\",\n      \"?lake wdt:P31/wdt:P279* wd:Q48651.\",\n      \"?river wdt:P625 ?geometry.\",\n      \"?lake wdt:P625 ?geometry.\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P131 is located in the administrative territorial entity\nwd:Q1456 is South Carolina\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?river ?lake\",\n    \"WHERE {\",\n      \"?river wdt:P31/wdt:P279* wd:Q23397 ;\",\n           \"wdt:P131 wd:Q1456 .\",\n      \"?lake wdt:P31/wdt:P279* wd:Q23397 ;\",\n           \"wdt:P131 wd:Q1456 .\",\n    \"}\",\n    \"GROUP BY ?river ?lake\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6192 is located in the administrative territorial entity\nkg:4355 is South Carolina\nkg:5420 is instance of\nkg:6123 is subclass of\nkg:6328 is lake", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?riverOrLake kg:5420 ?type ;\",\n    \"   kg:6192 ?administrativeTerritorialEntity .\",\n    \"?administrativeTerritorialEntity kg:4355 kg:6123 .\",\n    \"FILTER(?type = kg:6328 || ?type = kg:6192)\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Who was called Rodzilla?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was called Rodzilla?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource rdfs:label \\\"Rodzilla\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country ?capital\",\n    \"WHERE {\",\n      \"?country wdt:P31 wd:Q6045; # Q6045 is the item identifier for 'country'\",\n      \"?country wdt:P1391 ?capital. # P1391 is the property identifier for 'capital of'\",\n      \"?country wdt:P297 ?region. # P297 is the property identifier for 'located in the administrative territorial entity'\",\n      \"VALUES ?region { wd:Q6254 } # Q6254 is the item identifier for 'Africa'\" ,\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}\n"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?country ?capital\",\n    \"WHERE {\",\n      \"?country wdt:P31 wd:Q6256 ;\",\n               \"wdt:P30 wd:Q15 ;\",\n               \"wdt:P36 ?capital.\",\n      \"?capital wdt:P31 wd:Q6256.\"\n    ,\n    \"}\",\n    \"ORDER BY ?country\"\n  ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1721 is instance of\nkg:6700 is country\nkg:7478 is continent\nkg:8902 is Africa\nkg:0430 is capital", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?capital\",\n    \"WHERE {\",\n    \"?country a kg:6700 ;\",\n    \"   kg:7478 kg:8902 ;\",\n    \"   kg:7478 kg:0430 ?capital .\",\n    \"}\",\n    \"FILTER(?country != kg:7478)\"\n  ]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?bridge WHERE {\",\n    \"  ?bridge wdt:P31/wdt:P279* wd:Q246850. # Find entities that are bridges or subclasses of bridge\",\n    \"  wd:Q17461 wdt:P31/wdt:P279* wd:Q246850. # The Manhattan Bridge is a bridge, so we find its class\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125050 is Manhattan Bridge\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q12280 is bridge\nwd:Q12280 is bridge", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"?bridge wdt:P31 wd:Q12280 ;\",\n    \"   wdt:P279* wd:Q125050 .\"\n   \t]}\n \t  \t\t\t\t\t"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3760 is Manhattan Bridge\nkg:4675 is instance of\nkg:4675 is instance of\nkg:4675 is instance of\nkg:6359 is subclass of\nkg:6633 is bridge\nkg:6633 is bridge", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?bridge\",\n    \"WHERE {\",\n    \"?bridge a kg:4675 ;\",\n    \"   kg:6633 ?subclass .\",\n    \"kg:3760 a kg:4675 ;\",\n    \"   kg:6633 <http://example.org/knowledge_graph/Manhattan_Bridge> .\",\n    \"FILTER (?subclass = kg:6633)\",\n    \"}\"\n  ]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P30 wd:Q7229;\",\n      \"wdt:P142* wd:Q7229.\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q36215 is Mark Zuckerberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q783794 is company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"wd:Q36215 wdt:P112 ?founder.\",\n    \"?founder wdt:P31 wd:Q783794.\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1526 is founded by\nkg:1376 is Mark Zuckerberg\nkg:1343 is instance of\nkg:0834 is subclass of\nkg:8594 is company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company WHERE {\",\n    \"  ?company kg:1526 kg:1376 ;\",\n    \"           a kg:8594 .\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?book\",\n    \"WHERE {\",\n      \"?book wdt:P1709 ?pages .\",\n      \"VALUES ?book { wd:Q42 wd:Q65783 }\", \"-- These are placeholders, replace with actual book items if known --\",\n      \"MINUS { ?book wdt:P1709 ?otherPages FILTER(?otherPages > ?pages) }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q571 is book\nwdt:P1104 is number of pages", "response": "{\n  \"query\": [\n    \"SELECT ?book\",\n    \"WHERE {\",\n      \"?book wdt:P31/wdt:P279* wd:Q571 ;\",\n      \"?book wdt:P1104 ?pages .\",\n      \"FILTER NOT EXISTS { ?otherBook wdt:P31/wdt:P279* wd:Q571 ; wdt:P1104 ?otherPages FILTER (?otherPages > ?pages) }\",\n    \"}\",\n    \"ORDER BY DESC(?pages)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2272 is instance of\nkg:1916 is subclass of\nkg:8797 is book\nkg:6305 is number of pages", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?book\",\n    \"WHERE {\",\n    \"?book a kg:8797 ;\",\n    \"   kg:6305 ?pages .\",\n    \"}\",\n    \"ORDER BY DESC(?pages)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q6985972; # State or territory of United States\",\n    \"wdt:P1344 ?area. # Area of the state\",\n    \"?state rdfs:label ?label FILTER (lang(?label) = 'en').\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"VALUES ?largest { wd:Q60 } # Alaska is the largest state in the U.S.\",\n    \"?largest wdt:P31 wd:Q6985972; rdfs:label ?largestLabel FILTER (lang(?largestLabel) = 'en').\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state wdt:P31 wd:Q35657 ;\",\n    \"   wdt:P2046 ?area .\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1426 is instance of\nkg:7930 is U.S. state\nkg:5830 is area", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?state\",\n    \"WHERE {\",\n    \"?state a kg:7930 ;\",\n    \"   kg:5830 ?area .\",\n    \"{ SELECT ?state (MAX(?area) as ?maxArea) WHERE { ?state a kg:7930 ; kg:5830 ?area . } GROUP BY ?state } FILTER (?state = ?maxArea)\",\n    \"}\",\n    \".\"\n  ]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company ?companyLabel\",\n    \"WHERE {\",\n      \"?company wdt:P170 ?parentCompany .\", \"># Assuming companies are related to their parent company for simplification, adjust as necessary.\",\n      \"?company wdt:P2094 ?employeeCount .\", \"># P2094 is the property for number of employees\",\n      \"FILTER(?employeeCount > 500000)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P1128 is employees\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?company ?website\",\n    \"WHERE {\",\n      \"?company wdt:P31/wdt:P279* wd:Q4830453 ;\",\n      \"?company wdt:P1128 ?employeeCount .\",\n      \"?company wdt:P856 ?website .\",\n      \"FILTER(?employeeCount > 500000)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1735 is instance of\nkg:2392 is subclass of\nkg:4264 is business\nkg:0996 is employees\nkg:7595 is official website", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?website\",\n    \"WHERE {\",\n    \"?company kg:4264 ?employees .\",\n    \"?company kg:7595 ?website .\",\n    \"?employees kg:0996 \\\"500000\\\"^^<http://www.w3.org/2001/XMLSchema#integer> .\",\n    \"?company a kg:4264 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?ship WHERE {\",\n    \"  wd:Columbus wdt:P78 ?trips.\",\n    \"  ?trips wdt:P166 ?trip.\",\n    \"  ?trip wdt:P36 ?ship.\",\n    \"  FILTER(?ship IN (wd:Q2495, wd:Q2496, wd:Q2497))\",\n    \"}\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11446 is ship\nwdt:P1344 is participant in\nwdt:P710 is participant\nwd:Q7322 is Christopher Columbus", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?ship WHERE {\",\n\t\t\"?ship wdt:P31 wd:Q11446 ;\",\n\t\t\"   wdt:P710 wd:Q7322 .\",\n\t\t\"} LIMIT 3\"\n\t]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8261 is instance of\nkg:5995 is subclass of\nkg:5241 is ship\nkg:4451 is participant in\nkg:1337 is participant\nkg:5802 is Christopher Columbus", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?shipName\",\n    \"WHERE {\",\n    \"?trip kg:4451 ?ship .\",\n    \"?trip kg:1337 kg:5802 .\",\n    \"?ship a kg:5241 ;\",\n    \"   kg:name ?shipName .\",\n    \"}\",\n    \"LIMIT 3\"\n  ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?game WHERE { ?game wdt:P31 wd:Q187480 ; wdt:P179 wd:Q25660 . }\"\n  ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131436 is board game", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?game \\nWHERE {\\n?game wdt:P31 wd:Q131436.\\n}\\n\"]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8694 is instance of\nkg:9432 is board game", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{?resource kg:typeOf/kg:instanceOf kg:9432}\",\n\t\t    \t\t\"?resource\"\n\t\t    \t]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?developer WHERE { ?skype wdt:P31 wd:Q5098; wdt:P178 ?developer. }\"\n  ]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40984 is Skype\nwdt:P178 is developer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?developer WHERE { wd:Q40984 wdt:P178 ?developer . }\"\n    \t]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Skype\nkg:1548 is developer", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?developer WHERE { kg:6211 kg:1548 ?developer . }\"\n \t]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ wd:Q14925 wdt:P19 ?person . ?person wikibase:lexicalCategory wd:Q5 . ?person rdfs:label ?personLabel filter (lang(?personLabel) = 'en')\"]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwd:Q160544 is Heraklion", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { ?resource wdt:P19 wd:Q160544. }\"\n \t]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9471 is place of birth\nkg:4255 is Heraklion", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource kg:9471 kg:4255 }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE { wd:Q8029 p:P626 ?statement . ?statement ps:P626 wd:Q14841 ; pq:P131 ?state . }\"\n  ]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q177397 is Area 51\nwdt:P131 is located in the administrative territorial entity\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?state WHERE { wd:Q177397 wdt:P131 ?state . }\"\n    \t]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6216 is Area 51\nkg:5375 is located in the administrative territorial entity\nkg:5375 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?state WHERE { kg:6216 kg:5375 ?state . }\"\n \t]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { ?mayor p:P39/ps:P39 wd:Q1408729 . }\"\n  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q60 is New York City\nwdt:P6 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?mayor WHERE { wd:Q60 wdt:P6 ?mayor . }\"\n \t\t \t  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2848 is New York City\nkg:9377 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?mayor WHERE { kg:2848 kg:9377 ?mayor . }\"\n \t  \t    ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?placeOfDeath \\nWHERE {\\nwd:Q1031 wdt:P20 ?placeOfDeath.\\n}\\n\"]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?placeOfDeath WHERE { wd:Q91 wdt:P20 ?placeOfDeath . }\"\n \t\t \t  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9211 is Abraham Lincoln\nkg:6252 is place of death", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?deathPlace WHERE { kg:9211 kg:6252 ?deathPlace . }\"\n \t]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?airport WHERE { ?flightroute wdt:P31 wd:Q476092 ; wdt:P504 wd:Q789 . ?flightroute wdt:P170 ?airport }\"\n  ]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P113 is airline hub", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?airport WHERE { wd:Q51747 wdt:P113 ?airport . }\"\n  \t    \t\t]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3523 is Air China\nkg:2174 is airline hub", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?airline_hub kg:is_airline_hub_of/kg:3523 ?airport .\",\n\t\t    \t\t\"?airport a <http://schema.org/Airport> .\"\n\t\t    \t] }\n    \t"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\"\n     \t\t,\"?film wdt:P31 wd:Q11424. \"\n     \t, \"?film wdt:P345 wd:William_Shatner. \"\n     \t, \"?film wdt:P161 ?actor. \"\n     \t, \"?actor wdt:P106 wd:Q21198. \" ]\n    }\n   \t\t\t\t\t\t\t      \t\t\t"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\"\n     \t,\"?movie wdt:P57 wd:Q16297 .\"\n     \t,\"?movie wdt:P161 ?actor .\"\n     \t,\"FILTER(?actor != wd:Q16297)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3840 is director\nkg:6889 is William Shatner\nkg:7140 is cast member\nkg:6889 is William Shatner\nkg:7140 is cast member", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie kg:3840 kg:6889 .\", \">// Movie directed by William Shatner\",\n    \"  ?movie kg:7140 ?actor .\", \">// Actor is cast member of the movie\",\n    \"  FILTER(?actor != kg:6889)\", \">// Exclude William Shatner himself\"\n   \t\t,\n    \"}\"\n  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?lang WHERE { wd:Q1006 ?p p:P37 ?statement . ?statement ps:P37 ?lang . }\"\n  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q928 is Philippines\nwdt:P37 is official language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?lang WHERE { wd:Q928 wdt:P37 ?lang . }\"\n \t\t \t  ]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5866 is Philippines\nkg:9978 is official language", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?language WHERE { kg:5866 kg:9978 ?language . }\"\n \t]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P469 wd:Q5086. }\"\n  ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n \t  \t\t\"SELECT ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424 .\", \"@comment('?film is an instance of film')\",\n \t\t  \t\t\"?film wdt:P495 wd:Q35 .\", \"@comment('The country of origin of ?film is Denmark')\"\n \t  \t\t,\"}\"\n \t\t \t\t\t\t\t\t       ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8808 is subclass of\nkg:6517 is film\nkg:8359 is instance of\nkg:1180 is country of origin\nkg:5463 is Denmark", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{?x kg:8359 kg:6517}\",\n\t\t    \t\t\"?x kg:1180 kg:5463\"\n\t\t    \t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?movie wdt:P179 wd:Q26805. # directed by Guy Ritchie (instance of work)\",\n    \"?movie wdt:P161 wd:Q20229. # starring Brad Pitt (instance of person)\",\n    \"}\"\n  ]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q35332 is Brad Pitt\nwdt:P57 is director\nwd:Q192990 is Guy Ritchie", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?movie wdt:P31 wd:Q11424 . ?movie wdt:P161 wd:Q35332 . ?movie wdt:P57 wd:Q192990}\"\n    \t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5285 is subclass of\nkg:4255 is film\nkg:0188 is instance of\nkg:3943 is cast member\nkg:8245 is Brad Pitt\nkg:6493 is director\nkg:1627 is Guy Ritchie", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"?x kg:3943 kg:8245 .\",\n       \t\t\"?x kg:6493 kg:1627 .\",\n       \t\t\"?x kg:0188 kg:4255 .\"\n       ]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?weapon \\nWHERE {\\nwd:Q25876 wdt:P349 ?designer.\\n?designer wdt:P1087 ?weapon.\\n}\\n\"]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q728 is weapon\nwd:Q155644 is Uzi\nwdt:P287 is designed by\nwdt:P279 is subclass of\nwdt:P287 is designed by\nwd:Q155644 is Uzi", "response": "{\n \t\t\t \t    \t\t\t\t\t\t    \"query\": [\n     \t\t\"{?item wdt:P287 ?designer; wdt:P31 wd:Q728. ?uzi wdt:P287 ?designer; wdt:P31 wd:Q155644. FILTER(?item != ?uzi)}\"\n    \t]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2838 is subclass of\nkg:7386 is weapon\nkg:6166 is Uzi\nkg:5784 is designed by\nkg:2838 is subclass of\nkg:5784 is designed by\nkg:6166 is Uzi", "response": "{\n \t\t\"query\": [\n\t\t\t\"?weapon kg:5784 ?designer .\",\n\t\t\t\"kg:6166 kg:5784 ?designer .\",\n\t\t\t\"?weapon kg:7386 [] .\",\n\t\t\t\"?weapon != kg:6166\"\n\t\t]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ -> SELECT ?owner WHERE { ?studio wdt:P137 wd:Q24958; wdt:P127 ?owner. }\"]\n}\n\t\t\t\t\t\t  \t\t\t\t\t \t  \t\t "}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168383 is Universal Pictures\nwdt:P127 is owned by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?owner WHERE { wd:Q168383 wdt:P127 ?owner . }\"\n    \t]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1265 is Universal Pictures\nkg:8712 is owned by", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?owner WHERE { kg:1265 kg:8712 ?owner . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q35658; wdt:P17 wd:Q30; wdt:P1082 ?population; wdt:P2046 ?areaKm2.\",\n    \"  BIND((?population / ?areaKm2) AS ?density).\",\n    \"  ?state wikibase:sitelink ?sitelink.\",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?state WHERE {\"\n \t\t  \t   \t\t,\"?state wdt:P31 wd:Q35657 .\"\n \t\t  \t   \t\t,\"?state wdt:P1082 ?population .\"\n \t\t  \t   \t\t,\"?state wdt:P2046 ?area .\"\n \t\t  \t\t,\"BIND((?population / ?area) AS ?density)\"\n \t\t  \t\t,\"{ SELECT (MAX(?density) as ?maxDensity) {\"\n \t\t\t  \t\t\t,\"?state wdt:P31 wd:Q35657 .\"\n \t\t\t\t  \t\t,\"?state wdt:P1082 ?population .\"\n \t\t\t\t  \t\t,\"?state wdt:P2046 ?area .\"\n \t\t\t\t  \t\t,\"BIND((?population / ?area) AS ?density)\"\n \t\t\t\t\t\t,\"}\"\n \t\t\t\t  \t\t,\"}\"\n \t\t  \t\t,\"FILTER(?density = ?maxDensity)\"\n \t\t  \t\t,\"}\"\n \t\t\t  \t\t\t]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is instance of\nkg:1730 is U.S. state\nkg:4667 is area\nkg:4199 is population", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?state WHERE {\",\n \t\t\"  ?state kg:instance_of kg:1730 .\",\n \t\t\"  ?state kg:4667 ?area .\",\n \t\t\"  ?state kg:4199 ?population .\",\n \t\t\"  BIND((?population / ?area) AS ?density)\",\n \t\t\"  ?highest_density_state ?_ _{FILTER(?density > ?_)}.\",\n \t\t\"} ORDER BY DESC(?density) LIMIT 1\"\n \t]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?monarch WHERE {\",\n    \"  ?monarch wdt:P31 wd:Q5 ;\", \">// instance of human\\n\",\n    \"           wdt:P1647 wd:Q210981 ;\", \">// monarch\\n\",\n    \"           wdt:P26 ?spouse .\", \">// has spouse\\n\",\n    \"  ?spouse wdt:P27 wd:Q32 .\", \">// country of citizenship is Germany\\n\",\n    \"} GROUP BY ?monarch\"\n  ]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q116 is monarch\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?monarch WHERE {\"\n \t\t  \t   \t\t,\"?monarch wdt:P106 wd:Q116 .\"\n \t\t  \t   \t\t,\"?monarch wdt:P26 ?spouse .\"\n \t\t  \t   \t\t,\"?spouse wdt:P27 wd:Q183 .\"\n \t  \t\t\t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9875 is occupation\nkg:9875 is monarch\nkg:7072 is spouse\nkg:1801 is country of citizenship\nkg:2266 is Germany", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?monarch WHERE {\",\n\t\t\t\"?monarch kg:9875 is monarch .\",\n\t\t\t\"?monarch kg:7072 is spouse ?spouse .\",\n\t\t\t\"?spouse kg:1801 is country of citizenship kg:2266 is Germany .\"\n\t\t\t,\"}\"\n\t\t]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?creator WHERE { ?comic wd:Q79426 . ?comic wdt:P50 ?creator }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q190679 is Captain America\nwdt:P170 is creator", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?creator WHERE { wd:Q190679 wdt:P170 ?creator . }\"\n\t\t \t\t]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2488 is Captain America\nkg:1582 is creator", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?creator WHERE { kg:2488 kg:1582 ?creator . }\"\n\t\t]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { ?astronaut wdt:P31 wd:Q5 . ?astronaut wdt:P98 wd:Q7480 . }\"\n  ]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut. }\"\n  ]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9400 is Apollo 14\nkg:6757 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { kg:9400 kg:6757 ?astronaut }\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { \"\n     \t\t,\"?book wdt:P31 wd:Q571 ;\"\n     \t,\"wdt:P1433 wd:Q206589 .\"\n     \t,\"?book wdt:P50 ?author .\"\n     \t,\"}\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3489 is The Pillars of the Earth\nkg:7086 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?author WHERE { kg:3489 kg:7086 ?author . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q35658; wdt:P1082 ?population; wdt:P1500 ?areaKm2.\",\n    \"  BIND((?population / ?areaKm2) AS ?density).\",\n    \"  ?state wdt:P479 ?country.\",\n    \"  FILTER(?country = wd:Q30).\",\n    \"  ?state2 wdt:P1082 ?population2; wdt:P1500 ?areaKm2_2.\",\n    \"  BIND((?population2 / ?areaKm2_2) AS ?density2).\",\n    \"  FILTER(?density > ?density2).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?state WHERE {\"\n \t\t  \t   \t\t,\"?state wdt:P31 wd:Q35657 .\"\n \t\t  \t   \t\t,\"?state wdt:P1082 ?population .\"\n \t\t  \t   \t\t,\"?state wdt:P2046 ?area .\"\n \t\t  \t\t,\"BIND((?population / ?area) AS ?density)\"\n \t\t  \t\t,\"ORDER BY DESC(?density)\"\n \t\t  \t\t,\"LIMIT 1\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1504 is instance of\nkg:4691 is U.S. state\nkg:6036 is area\nkg:6748 is population", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?state WHERE {\",\n \t\t\"  ?state a kg:4691 ;\", \">// ?state is an instance of U.S. state\",\n \t\t\"  kg:1504 kg:6748 ?population ;\", \">// kg:1504 has population property to ?population\",\n \t\t\"  kg:1504 kg:6036 ?area .\", \">// kg:1504 has area property to ?area\",\n \t\t\"  BIND((?population / ?area) AS ?density)\", \">// Calculate density as population divided by area\",\n \t\t\"  FILTER ( ?state = kg:1504 )\", \">// Ensure the state is the subject of interest\",\n \t\t\"} GROUP BY ?state ORDER BY DESC(?density) LIMIT 1\"\n \t]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?flight WHERE { ?flight wdt:P31 wd:Q47562; wdt:P973 wd:Q908. }\"\n  ]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?flight WHERE { ?flight wdt:P1427 wd:Q177477. }\"\n \t]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3950 is start point\nkg:1434 is Baikonur Cosmodrome", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?flight WHERE { kg:3950 <http://publications.europa.eu/ontology/eurovoc#launchSite> kg:1434 . kg:3950 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?flight }\"\n\t\t]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t    \t\t\"query\": [\n\t\t\t       \"SELECT ?trumpetPlayer WHERE {\"\n\t\t\t    \t,\"?trumpetPlayer wdt:P31 wd:Q5 .\"\n\t\t\t    \t,\"?trumpetPlayer wdt:P106 wd:Q721284 .\"\n\t\t\t    \t,\"?trumpetPlayer wdt:P101 wd:Q169597 .\"\n\t\t\t      \t,\"?trumpetPlayer wdt:P345 ?musicBrainzID .\"\n\t\t\t      \t,\"FILTER(LANG(?trumpetPlayer) = '' || LANG(?trumpetPlayer) = 'en')\"\n\t\t\t      \t,\"}\"\n\t\t\t     ]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158852 is conductor\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"{ ?item wdt:P106 wd:Q158852 . }\",\n    \t\t\"{ ?item wdt:P1303 wd:Q8338 . }\"\n    \t]\n    \t}\n    \t\t\t \t\t\t\t \t\t\t\t \t\t"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9126 is occupation\nkg:5599 is conductor\nkg:3375 is instrument\nkg:5858 is trumpet", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?trumpetPlayer WHERE {\",\n \t\t\t\"?trumpetPlayer kg:3375 kg:5858 .\",\n \t\t\t\"?trumpetPlayer kg:9126 kg:5599 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q9657 wdt:P421 ?timezone .\", \"Yeah, that's not correct for Utah. Let me fix this:\",\n    \"  wd:Q398 wdt:P421 ?timezone .\",\n    \"  ?state wdt:P421 ?timezone .\",\n    \"  ?state wdt:P31 wd:Q356 .\", \"That line ensures we're only looking at states.\",\n    \"  FILTER(?state != wd:Q398) \", \"That excludes Utah itself from the results.\",\n    \"} ORDER BY ?state\"\n  ]\n  }"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?state WHERE {\"\n     \t\t,\"?state wdt:P31 wd:Q35657 .\"\n     \t\t,\"?state wdt:P421 ?timezone .\"\n     \t\t,\"wd:Q829 wdt:P421 ?timezone .\"\n     \t\t,\"FILTER(?state != wd:Q829)\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0110 is Utah\nkg:3176 is located in time zone\nkg:7966 is instance of\nkg:4285 is U.S. state\nkg:3176 is located in time zone\nkg:0110 is Utah", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?state WHERE {\",\n\t\t\t\"  kg:0110 kg:3176 ?timeZone .\",\n\t\t\t\"  ?state kg:3176 ?timeZone .\",\n\t\t\t\"  ?state kg:7966 kg:4285 .\",\n\t\t\t\"  FILTER(?state != kg:0110) }\"\n\t\t]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?spouse WHERE {\\n wd:Q12968 wdt:P40 ?daughter.\\n?daughter wdt:P26 ?spouse.\\n}\\n\"] }\n     \t\t\t\t\t\t\t\t\t\t\t\t  \t"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43247 is Ingrid Bergman\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?spouse WHERE { wd:Q43247 wdt:P40 ?daughter . ?daughter wdt:P26 ?spouse }\"\n     \t\t\t]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1029 is Ingrid Bergman\nkg:6032 is child\nkg:4891 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE { kg:1029 kg:6032 ?child . ?child kg:4891 ?spouse }\"\n \t]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?museum WHERE {\",\n    \"  ?museum wdt:P31 wd:Q3350658 ;\", \"># instance of museum\"\n   \t\t\t\t,\n    \"  wd:Q84 wdt:P625 ?location .\", \"># has coordinate location\"\n   \t\t,\n    \"  ?museum wdk:p6289 [ wikibase:snakType novalue-snak ] ;\", \"># p6289 has novel value (no specific value)\"\n   \t\t,\n    \"  ?museum wdt:P131* wd:Q84 .\", \"># located in the administrative territorial entity\"\n   \t]\n} "}
{"question": "Show me all museums in London.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P276 is location\nwd:Q84 is London", "response": "{\n  \"query\" : [\n    \"SELECT ?museum WHERE {\",\n      \"?museum wdt:P31 wd:Q33506 .\",\n      \"?museum wdt:P276 wd:Q84 .\",\n    \"}\"\n  ]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2426 is instance of\nkg:8333 is museum\nkg:0559 is location\nkg:8155 is London", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:2426 kg:8333 .\",\n\t\t    \t\t\"?x kg:2426 kg:0559 .\",\n\t\t    \t\t\"?y kg:2426 kg:8155 .\",\n\t\t    \t\t\"?x kg:8005 ?y\"\n\t\t    \t]\n}"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?player WHERE {\\n  ?player wdt:P31 wd:Q5 ;\\n          wdt:P106 wd:Q22984765 ;\\n          wdt:P54 wd:Q24955 ;\\n          wdt:P2044 ?height .\\n  FILTER (lang(?player) = '' || lang(?player) = 'en')\\n}\\nORDER BY DESC(xsd:decimal(replace(str(?height), ' ', '')))\\nLIMIT 1\"]\n}"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P54 is member of sports team\nwd:Q272059 is Atlanta Falcons\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"?player wdt:P54 wd:Q272059 .\",\n  \t\t\"?player wdt:P2048 ?height .\"\n  \t]\n  \t}\n  \t\t\t \t\t\t\t \t\t\t\t \t\t\t"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1796 is member of sports team\nkg:3447 is Atlanta Falcons\nkg:1244 is height", "response": "{\n \t\t\"query\": [\n\t\t\t\"?player kg:1796 ?team .\",\n\t\t\t\"?team kg:3447 <Atlanta_Falcons> .\",\n\t\t\t\"?player kg:1244 ?height .\"\n\t\t]\n\t\t}\n\t\t\t\t \t\t\t\t\t\t      \t\t\t"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?writer WHERE {\"\n     \t,\"?writer wdt:P3458 wd:Q178276.\" ]}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P166 is award received\nwd:Q37922 is Nobel Prize in Literature", "response": "{\n  \"query\" : [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P106 wd:Q36180 .\",\n      \"?writer wdt:P166 wd:Q37922 .\"\n   \t\t,\"}\"\n  ]\n}"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3248 is occupation\nkg:6280 is writer\nkg:9080 is award received\nkg:4831 is Nobel Prize in Literature", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?writer WHERE {\",\n\t\t\t\"?writer kg:3248 kg:6280 .\",\n\t\t\t\"?writer kg:9080 kg:4831 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?player \\nWHERE {\\n?player wdt:P31 wd:Q5 ;\\n        wdt:P106 wd:Q40827 ;\\n        wdt:P2037 ?height .\\nFILTER (xsd:float(?height) > 2.0)\\n}\\n\"]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646. ?player wdt:P2048 ?height. FILTER (?height > 2) }\"\n \t\t \t\t\t]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7450 is occupation\nkg:6446 is basketball player\nkg:6984 is height", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:7450 ?occupation .\",\n\t\t    \t\t\"?resource kg:6446 ?player .\",\n\t\t    \t\t\"?resource kg:6984 ?height .\",\n\t\t    \t\t\"?height <http://www.w3.org/2001/XMLSchema#decimal> ?numericHeight .\",\n\t\t    \t\t\"FILTER (?numericHeight > 2.0)\"\n\t\t    \t]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q42376 wdt:P585 ?resource . }\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9202 is Statue of Liberty\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?resource WHERE { wd:Q9202 wdt:P571 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9932 is Statue of Liberty\nkg:2835 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:9932 kg:2835 ?resource . }\"\n   \t\t \t  ]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?borderingState WHERE { \"\n     \t\t,\"?illinois wdt:P31 wd:Q35648.\" ,\n\t\t\"?illinois wdt:P17 ?country .\",\n\t\t\"?illinois wdt:P495 ?unMember .\",\n\t\t\"?illinois wdt:P1083 ?stateNumber .\",\n\t\t\"?illinois wdt:P279* wd:Q35648.\",\n\t\t\"?illinois wdt:P17 ?usa .\",\n\t\t\"?borderingState wdt:P31 wd:Q35648.\",\n\t\t\"?borderingState wdt:P17 ?usa.\",\n\t\t\"?illinois wdt:P479 ?borderingState.\"\n   \t,\"}\" ]\n} "}
{"question": "Which states border Illinois?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1204 is Illinois\nwdt:P47 is shares border with", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?borderingState WHERE { wd:Q1204 wdt:P47 ?borderingState . }\"\n \t\t \t  ]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0369 is Illinois\nkg:2142 is shares border with", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?borderingState WHERE { kg:0369 kg:2142 ?borderingState . }\"\n \t]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?developer WHERE { ?game wdt:P31 wd:Q7889 ; wdt:P178 ?developer . ?game rdfs:label ?label . FILTER (LANG(?label) = 'en') . FILTER (?label = 'Minecraft') }\"\n  ]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q49740 is Minecraft\nwdt:P178 is developer", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?developer WHERE { wd:Q49740 wdt:P178 ?developer . }\"\n\t\t \t\t]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is Minecraft\nkg:0620 is developer", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?developer kg:0620 kg:5174 .\"\n   \t\t\t \t\t]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label = \"]} "}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q186924 is Hillel Slovak\nwdt:P20 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?placeOfDeath WHERE { wd:Q186924 wdt:P20 ?placeOfDeath . }\"\n    \t]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8632 is Hillel Slovak\nkg:3889 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { kg:8632 kg:3889 ?resource . }\"\n    \t]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { wd:Q21195 wdt:P1083 ?movie . }\"\n  ]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q219512 is Jesse Eisenberg", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?movie WHERE { wd:Q219512 wdt:P161 ?movie . }\"\n    \t]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4329 is cast member\nkg:1690 is Jesse Eisenberg", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4329 ?y .\",\n\t\t    \t\t\"?y kg:1690 ?z .\",\n\t\t    \t\t\"?z a wd:Q1782597\"\n\t\t    \t  ]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?swimmer WHERE { ?swimmer wdt:P101 wd:Q7389; wdt:P19 wd:Q90. }\"\n  ]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10843402 is swimmer\nwdt:P19 is place of birth\nwd:Q649 is Moscow", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?swimmer WHERE {\"\n \t\t  \t   \t\t,\"?swimmer wdt:P106 wd:Q10843402 .\"\n \t\t  \t   \t\t,\"?swimmer wdt:P19 wd:Q649 .\"\n \t\t  \t   \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5904 is occupation\nkg:1103 is swimmer\nkg:7585 is place of birth\nkg:8931 is Moscow", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?swimmer WHERE { ?swimmer kg:5904 kg:1103. ?swimmer kg:7585 kg:8931 }\"\n \t]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?cosmonaut WHERE { ?cosmonaut wdt:P31 wd:Q75008; wdt:P102 wd:Q74869. }\"\n  ]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q15180 is Soviet Union\nwdt:P27 is country of citizenship\nwd:Q159 is Russia", "response": "{\n  \"query\" : [\n    \"SELECT ?cosmonaut WHERE {\",\n    \"  ?cosmonaut wdt:P106 wd:Q11631 .\", \"># occupation is astronaut (cosmonaut is a subclass of astronaut in this context)\",\n    \"  ?cosmonaut wdt:P27 wd:Q15180 .\", \"># country of citizenship is Soviet Union\",\n    \"  FILTER NOT EXISTS {?cosmonaut wdt:P27 wd:Q159} .\", \"># exclude cosmonauts who are also citizens of Russia (to avoid modern Russian astronauts)\"\n   \t\t]}\n   \t\t\t\t\t\t\t      \t\t\t\t"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1826 is occupation\nkg:1573 is astronaut\nkg:9428 is country of citizenship\nkg:0187 is Soviet Union\nkg:9428 is country of citizenship\nkg:4328 is Russia", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?subject kg:1826 kg:1573 .\",\n\t\t    \t\t\"?subject kg:9428 kg:0187 .\"\n\t\t    \t]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q834509; \", \"># Instance of non-profit organization (Q834509)\"\n   \t\t,\"wdt:P17 wd:Q39; \", \"# Country Switzerland (Q39)\"\n   \t\t,\"wdt:P452 ?currency. \", \"# Currency used\"\n   \t\t,\"?organization wdt:P31/wdt:P279* wd:Q834509. \" ,\"\\n\",\"># Filter for subclasses of non-profit organization\"\n   \t\t,\"SERVICE wikibase:anyInList {\",\n   \t\"      ?currency wikibase:propertyType wikibase:WikibaseItem.\",\n   \t\"      ?organization wdt:P17 wd:Q39.\"\n   \t\t,\"}\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwd:Q39 is Switzerland\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q70208 is municipality of Switzerland", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?org WHERE {\",\n \t\t\t\"?org wdt:P31 wd:Q163740 .\", \"># ?org is an instance of a nonprofit organization\",\n \t\t\t\"?org wdt:P159 ?location .\", \"># ?org has headquarters location ?location\",\n \t\t\t\"?location wdt:P31 wd:Q70208 .\", \"># ?location is a municipality of Switzerland\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0996 is instance of\nkg:6895 is nonprofit organization\nkg:0121 is headquarters location\nkg:3997 is Switzerland\nkg:0121 is headquarters location\nkg:0996 is instance of\nkg:0663 is municipality of Switzerland", "response": "{\n \t    \t\t\"query\": [\n\t        \"PREFIX kg: <http://example.org/kg#> SELECT ?resource WHERE { ?resource a kg:6895 . ?resource kg:0121 kg:3997 }\"\n\t    \t  ]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P31 wd:Q5 ;\", \"Yeah, here is the SPARQL query for finding presidents born in 1945 using Wikidata:\",\n    \"  wdt:P569 ?birthDate .\",\n    \"  FILTER(YEAR(xsd:dateTime(?birthDate)) = 1945)\",\n    \"  wd:Q34708 wdt:P1362 ?president .\", \"This line is incorrect and needs to be removed or adjusted. The property Q34708 (head of state) isn't directly linked to presidents in this context.\",\n    \"}\",\n    \"]\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t "}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwdt:P279 is subclass of\nwd:Q30461 is president\nwdt:P569 is date of birth", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE {\",\n      \"?president wdt:P39 wd:Q30461 ;\", \"# is position held, is president\",\n      \"wdt:P569 ?dob .\", \"# date of birth\"\n     \t,\"FILTER (YEAR(?dob) = 1945)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9721 is position held\nkg:7772 is subclass of\nkg:4201 is president\nkg:9072 is date of birth", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?president WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?president kg:4201 ?positionHolder .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?positionHolder kg:9072 \\\"1945-01-01\\\"^^xsd:date .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (YEAR(?positionHolder/kg:9072) = 1945)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?music WHERE { wd:Q8329 wdt:P1303 ?music . }\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q189080 is Lou Reed\nwdt:P136 is genre", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?genre WHERE { wd:Q189080 wdt:P136 ?genre. }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5974 is Lou Reed\nkg:2540 is genre", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?genre WHERE { kg:5974 kg:2540 ?genre . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?venue WHERE { wd:Q8365 wdt:P1376 ?venue . }\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213959 is Boston Red Sox\nwdt:P115 is home venue", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?venue WHERE { wd:Q213959 wdt:P115 ?venue . }\"\n \t\t \t  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is Boston Red Sox\nkg:3920 is home venue", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?venue WHERE { kg:4308 kg:3920 ?venue . }\"\n \t]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q40852; wdt:P576 wd:Q19613.\" ,\n    \"}\"\n  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q82595 is Bundesliga", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?club WHERE {\"\n \t\t  \t   \t\t,\"?club wdt:P31 wd:Q476028 .\"\n \t\t  \t   \t\t,\"?club wdt:P118 wd:Q82595 .\"\n \t\t  \t   \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7599 is instance of\nkg:6882 is association football club\nkg:9691 is league\nkg:5778 is Bundesliga", "response": "{\n \t\t\"query\": [\n    \t\t\"{ ?resource kg:instanceOf kg:6882 . }\",\n    \t\t\"{ ?resource kg:league kg:5778 . }\"\n    \t]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q28640 ; wdt:P149 wd:Q575 . }\"\n  ]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q12280 is bridge\nwdt:P177 is crosses\nwd:Q1471 is Seine", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q12280 . ?bridge wdt:P177 wd:Q1471 . }\"\n \t]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5104 is instance of\nkg:3688 is bridge\nkg:6698 is crosses\nkg:3188 is Seine", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?bridge WHERE { ?bridge kg:6698 kg:3188. }\"\n \t]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?filmCount WHERE {\",\n    \"  ?halRoach wdt:P31 wd:Q5 .\",\n    \"  ?halRoach rdfs:label ?halLabel.\",\n    \"  FILTER(LANG(?halLabel) = 'en').\",\n    \"  FILTER(str(?halLabel) = 'Hal Roach').\",\n    \"  ?halRoach wdt:P1698 ?film.\",\n    \"  ?film wdt:P3302 wd:Q11424795.\",\n    \"  ?film wdt:P364 ?producer.\",\n    \"  ?producer wikibase:statements ?halRoach.\",\n    \"  ?film wdt:P364 ?halRoach.\",\n    \"  ?film (wdt:P364|wikibase:directClaim) wd:Q11424795.\",\n    \"  SERVICE wikibase:countAsLiteral { ?halRoach wdt:P1698 ?filmCount. }\",\n    \"}\"\n  ]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE { wd:Q72792 wdt:P162 ?film . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7838 is producer\nkg:2222 is Hal Roach", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE { kg:2222 kg:7838 ?film . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11421. ?movie wdt:P469 wd:Q5087. }\"\n  ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n \t  \t\t\"SELECT ?movie WHERE {\",\n \t\t  \t\t\"?movie wdt:P31 wd:Q11424 .\", \">// instance of film\",\n \t\t  \t\t\"?movie wdt:P495 wd:Q35 .\", \">// country of origin is Denmark\"\n \t\t  \t\t,\"}\"\n \t\t \t\t\t\t\t\t       ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7611 is subclass of\nkg:0455 is film\nkg:5857 is instance of\nkg:5175 is country of origin\nkg:4426 is Denmark", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{?resource kg:5175 kg:4426}\",\n\t\t    \t\t\"?resource kg:5857 kg:0455\"\n\t\t    \t]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?causeOfDeath WHERE { [] wikibase:directClaim <http://www.wikidata.org/prop/direct/P981> ?causeOfDeath . }\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P509 is cause of death", "response": "{\n  \"query\" : [\n    \"SELECT ?cause WHERE { [] wdt:P509 ?cause . } GROUP BY ?cause ORDER BY DESC(COUNT(?cause)) LIMIT 1\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4613 is cause of death", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?cause WHERE { ?death kg:4613 ?cause . } GROUP BY ?cause ORDER BY DESC(COUNT(?death)) LIMIT 1\"]\n}"}
{"question": "Who are the four youngest MVP basketball players?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who are the four youngest MVP basketball players?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P106 wd:Q40172 ;\", \">// P106 is occupation, Q40172 is for basketball player\",\n    \"         wdt:P161 wd:Q35989 ;\", \">// P161 is position held, Q35989 is for MVP award\",\n    \"         wdt:P569 ?dob .\", \">// P569 is date of birth\"\n   \t\t,\"?player p:P1084 ?awardStatement .\" ,\">// P1084 is age in years at the time of event\"\n   \t\t,\"?awardStatement ps:P1084 ?age ; pq:P585 ?dateOfAward .\", \">// ps: is the statement value, pq: is qualifier\"\n   \t\t,\"BIND(xsd:int(?age) AS ?playerAge)\" ,\">// BIND creates a variable that represents the age of the player at the time of MVP award\"\n   \t\t,\"?awardStatement prv:P1085 ?event .\" ,\n   \t\t\"?event wdt:P31 wd:Q24769 .\", \">// P31 is instance of, Q24769 is for NBA season\"\n   \t\t,\"FILTER(?dateOfAward < \\\"1990-01-01T00:00:00Z\\\"^^xsd:dateTime)\" ,\">// FILTER to limit the date range\"\n   \t\t,\"ORDER BY ?playerAge\" ,\n   \t\t\"} LIMIT 4\"\n  ]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?company WHERE { ?company wdt:P31 wd:Q47389; wdk:P652 wd:Q200267. }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P159 is headquarters location\nwd:Q1726 is Munich", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?company WHERE {\",\n \t\t\t\"?company wdt:P31 wd:Q4830453 .\", \"># ?company is an instance of business (wd:Q4830453)\"\n \t\t\t,\"?company wdt:P159 wd:Q1726 .\" ,\"% ?company has headquarters location as Munich (wd:Q1726)\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7379 is subclass of\nkg:3056 is business\nkg:3902 is instance of\nkg:9118 is headquarters location\nkg:4859 is Munich", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{\",\n\t\t    \t\t\t\"?company kg:3902 ?companyType .\",\n\t\t    \t\t\t\"?companyType kg:7379 kg:3056 .\",\n\t\t    \t\t\t\"?company kg:9118 kg:4859 .\"\n\t\t    \t\t,\"}\",\n\t\t    \t\t\"?company\"\n\t    \t\t]\n}"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?capital WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?country wdt:P30 wd:Q48195; wdt:P36 ?capital.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n} "}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country\nwdt:P36 is capital", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?capital WHERE {\",\n \t\t  \t\t\"?country wdt:P31 wd:Q6256 .\", \">// instance of country\",\n \t\t  \t\t\"?mountain wdt:P488 ?country .\", \">// mountain range runs through country\"\n \t\t  \t\t,\"?mountain wdt:P171* wd:Q5451 .\", \">// subclass or same as Himalayas\"\n \t\t  \t\t,\"?country wdt:P36 ?capital .\" , \">// has capital\"\n \t\t  \t\t,\"}\",\n \t\t  \t\t\"GROUP BY ?capital\",\n \t\t  \t\t\"ORDER BY ?capital\"\n \t  \t\t]\n} "}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3281 is Himalayas\nkg:7625 is country\nkg:0169 is capital", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?capital WHERE {\",\n \t\t\t\"?country kg:hasHimalayas kg:3281 .\",\n \t\t\t\"?country kg:hasCapital ?capital .\",\n \t\t\t\"?capital rdf:type kg:0169 .\"\n \t\t\t\t    \t\t\t]}\n\t\t\t"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?movie WHERE { wd:Q75896 wdt:P31 wd:Q11424 . wd:Q75896 wdt:P345 ?movie }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q315484 is Park Chan-wook", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?movie WHERE { wd:Q315484 wdt:P57 ?movie . }\"\n \t]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6511 is director\nkg:3320 is Park Chan-wook", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:6511 kg:3320 .\"\n\t\t    \t  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t \t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\"SELECT ?airline WHERE { ?airline wdt:P31 wd:Q7069 . }\"\n \t\t\t\t\t\t\t\t\t\t  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?airline WHERE { ?airline wdt:P31 wd:Q46970. }\"\n \t\t \t\t\t]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6911 is instance of\nkg:8786 is airline", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?var1 kg:instance_of kg:8786 .\"\n\t\t    \t]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t    \t\t\"query\": [\n\t\t\t       \"SELECT ?island WHERE {\",\n\t\t\t       \"?island wdt:P31 wd:Q729; wdt:P479 wd:Q61.\",\n\t\t\t       \"?island wdt:P17 wd:Q175.\"\n\t\t\t      \t\t]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23442 is island\nwdt:P17 is country\nwd:Q17 is Japan", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?island WHERE {\",\n \t\t\t\"?island wdt:P31 wd:Q23442 .\", \"># ?island is an instance of island\",\n \t\t\t\"?island wdt:P17 wd:Q17 .\", \"># ?island belongs to Japan\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7714 is instance of\nkg:7851 is island\nkg:2897 is country\nkg:2425 is Japan", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?island WHERE {\",\n\t\t\t\"  kg:2425 kg:7714 ?country .\", \">// Assuming there's a property that connects countries to their instances, but this might need adjustment based on actual schema\"\n\t\t\t,\"  ?island kg:7851 [] .\" ,\n\t\t\t\"  ?island kg:7714 ?country\",\n\t\t\t\"}\"\n\t\t]\n\t}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?population WHERE { wd:Q1865 wdt:P1082 ?population . }\"\n  ]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1010 is Maribor\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?population WHERE { wd:Q1010 wdt:P1082 ?population . }\"\n  \t    \t\t]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8389 is Maribor\nkg:2929 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?population WHERE { kg:8389 kg:2929 ?population . }\"\n \t  \t    ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { ?astronaut wdt:P31 wd:Q5 . ?astronaut wdt:P98 wd:Q7054 . }\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut. }\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3406 is Apollo 14\nkg:0698 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?astronaut WHERE { kg:3406 kg:0698 ?astronaut . }\"\n  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?company WHERE {\"\n     \t\t,\"?company wdt:P31 wd:Q43298; \"\n     \t,\"wdt:P108 wd:Q571 .\"\n     \t,\"?company wdt:P1184 ?employeeCount.\"\n     \t,\"FILTER(?employeeCount > 1000000).\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P1128 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P31 wd:Q4830453 . ?item wdt:P1128 ?employeeCount . FILTER(?employeeCount > 1000000) .}\"\n      \t  ]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4170 is subclass of\nkg:5338 is business\nkg:1104 is instance of\nkg:8891 is employees", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:1104 ?y .\",\n\t\t    \t\t\"?y kg:8891 ?z .\",\n\t\t    \t\t\"FILTER (xsd:int(?z) > 1000000)\"\n\t\t    \t]\n\t\t    \t}\n\t\t    \t\t\t \t    \t\t"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 wd:Q609582 . # directed by Garry Marshall\\n?film wdt:P161 wd:Q31108 . # starring Julia Roberts\\n}\"\n]}\n      \t"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q315087 is Garry Marshall\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?film WHERE {\"\n     \t\t,\"?film wdt:P31 wd:Q11424 .\"\n     \t\t,\"?film wdt:P57 wd:Q315087 .\"\n     \t\t,\"?film wdt:P161 wd:Q40523 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5953 is instance of\nkg:4237 is film\nkg:9816 is director\nkg:6470 is Garry Marshall\nkg:4262 is cast member\nkg:2003 is Julia Roberts", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://example.org/is_film> ?x1}\",\n      \t\t\"{?x0 <http://example.org/director> <http://data.example.com/kg/9816>}\",\n      \t\t\"{?x0 <http://example.org/cast_member> <http://data.example.com/kg/2003>}\"]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q475612; \",\n    \"        wdt:P106 wd:Q938548;\",\n    \"        wdt:P463 wd:Q22; \",\n    \"        rdfs:label ?label.\",\n    \"  FILTER (LANG(?label) = 'en').\",\n    \"} ORDER BY ?label\"\n  ]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q9448 is Premier League", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?club WHERE {\"\n \t\t  \t   \t\t,\"?club wdt:P31 wd:Q476028 .\"\n \t\t  \t   \t\t,\"?club wdt:P118 wd:Q9448 .\"\n \t\t  \t   \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8917 is instance of\nkg:9198 is association football club\nkg:7069 is league\nkg:5830 is Premier League", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:8917 kg:9198 .\",\n\t\t    \t\t\"?resource kg:7069 kg:5830\"\n\t\t    \t  ]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?place WHERE { wd:Q1234 wdt:P1569 ?place . }\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q35600 is Ural Mountains\nwdt:P610 is highest point", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q35600 wdt:P610 ?resource . }\"\n \t\t \t \t  ]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4847 is Ural Mountains\nkg:1765 is highest point", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:4847 kg:1765 ?resource . }\"\n\t\t]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?governor WHERE { ?governor wdt:P39 wd:Q7481 ; wdt:P31 wd:Q5 . }\"\n  ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1214 is Wyoming\nwdt:P6 is head of government", "response": "{\n  \"query\" : [\n    \"SELECT ?governor WHERE { wd:Q1214 wdt:P6 ?governor . }\"\n  ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1605 is Wyoming\nkg:5742 is head of government", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:1605 kg:5742 ?resource . }\"\n \t]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ wd:Q4125987 wdt:P101 ?institution . ?institution wdt:P31 wd:Q607589 . ?institution wdt:P171* wd:Q47552 $. bindings(?institution) { ?institution as (wd) }\"]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243 is Eiffel Tower\nwdt:P84 is architect\nwdt:P69 is educated at", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?institution WHERE {\\n  wd:Q243 wdt:P84 ?architect .\\n  ?architect wdt:P69 ?institution .\\n}\"]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8697 is Eiffel Tower\nkg:0724 is architect\nkg:7890 is educated at", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:0724 kg:7890 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P31 wd:Q5 .\", \"># P31 is 'instance of', Q5 is human\"\n   \t,\"?actor wdt:P19 wd:Q84 .\", \"># P19 is place of birth, Q84 is Paris\"\n   \t,\"?actor wdt:P569 ?birthDate .\", \"# P569 is date of birth\"\n   \t,\"FILTER (YEAR(?birthDate) > 1950)\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q90 is Paris\nwdt:P569 is date of birth", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33999 ;\", \"Yeah, it should be a single line without continuation characters for proper SPARQL syntax.\",\n    \"         wdt:P569 ?dob ;\",\n    \"         wdt:P19 wd:Q90 .\",\n    \"  FILTER (YEAR(?dob) > 1950)\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2117 is occupation\nkg:6645 is actor\nkg:4144 is place of birth\nkg:5863 is Paris\nkg:5702 is date of birth", "response": "{\n \t    \t\t\"query\": [\n\t        \"PREFIX kg: <http://example.org/kg#> SELECT ?actor WHERE { ?actor kg:2117 kg:6645 . ?actor kg:4144 kg:5863 . ?actor kg:5702 ?dob . FILTER (YEAR(?dob) > 1950) }\"\n\t    \t\t]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?movie wdt:P161 wd:Q758.   # has performer as Elizabeth Taylor\",\n    \"  ?movie wdt:P161 wd:Q905.   # has performer as Richard Burton\",\n    \"} \"\n  ]\n}\n\t\t\t\t      \t\t\t\t      "}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q34851 is Elizabeth Taylor\nwdt:P161 is cast member\nwd:Q151973 is Richard Burton", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?movie WHERE {\"\n     \t\t\t,\"wd:Q34851 wdt:P161 ?movie .\"\n     \t\t\t,\"wd:Q151973 wdt:P161 ?movie .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3549 is cast member\nkg:8585 is Elizabeth Taylor\nkg:3549 is cast member\nkg:7795 is Richard Burton", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?movie WHERE {\",\n \t\t\"  kg:8585 kg:3549 ?movie .\",\n \t\t\"  kg:7795 kg:3549 ?movie .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q856; wdtn:P1074 \\\"Australia\\\"@en.\",\n    \"  ?organization wdt:P102 wd:Q918479.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P159 is headquarters location\nwdt:P17 is country\nwdt:P159 is headquarters location\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q163740 .\", \">// instance of nonprofit organization\",\n    \"  ?organization wdt:P159 ?headquarters .\", \">// headquarters location\"\n   \t,\"?headquarters wdt:P17 wd:Q408 .\" , \">// country is Australia\"\n   \t,\"}\",\n    \"LIMIT 100\" ]\n}\n   \t\t\t\t\t\t       \t \t "}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4777 is instance of\nkg:7142 is nonprofit organization\nkg:9739 is headquarters location\nkg:5338 is country\nkg:0600 is Australia\nkg:9739 is headquarters location\nkg:5338 is country\nkg:9739 is headquarters location\nkg:0600 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource a kg:7142 .\", \">// kg:7142 is nonprofit organization\",\n    \"  ?resource kg:9739 ?headquarters .\", \">// headquarters location\",\n    \"  ?headquarters kg:5338 kg:0600 .\", \">// country is Australia\"\n   \t\t]}\n   \t\t"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?successor WHERE { wd:Q96 wiki:itemprop:succession:succeeds ?successor FILTER (?successor != wd:Q96) }\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q989 is John Paul II\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P1366 is replaced by", "response": "{\n  \"query\" : [\n    \"SELECT ?successor WHERE { wd:Q989 ps:P39/wd:Q19546/pq:P1366 ?successor . }\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4431 is John Paul II\nkg:3917 is position held\nkg:8695 is position held\nkg:5502 is pope\nkg:5825 is replaced by", "response": "{\n  \"query\" : [\n    \"SELECT ?successor WHERE { kg:4431 kg:5825 ?successor . }\"\n  ]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE { ?president wdt:P39 wd:Q27148 ; wdt:P569/?pq:P569 MAX(1978-01-01) . }\"\n  ]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q473984 is President of Pakistan\np:P39 is position held\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t \"?president wdt:P39 wd:Q473984 . \"\n  \t]\n  \t\t} "}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8206 is position held\nkg:4349 is President of Pakistan\nkg:3509 is position held\nkg:2536 is start time\nkg:0612 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?resource kg:8206 kg:4349 .\",\n\t\t    \t\t\t\"?resource kg:2536 ?startTime .\",\n\t\t    \t\t\t\"?startTime <http://www.w3.org/2001/XMLSchema#year> \" ,\"1978\" ,\n\t\t    \t\t\t\"?resource kg:0612 ?endTime .\" ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?owner WHERE { ?company p:P127 ?statement . ?statement ps:P127 wd:Q69534 . ?statement pq:P1083 ?amount ; prov:wasDerivedFrom wiki:CITES_SOURCE . ?company rdfs:label ?name FILTER (LANG(?name) = 'en') }\"\n  ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243278 is Rolls-Royce\nwdt:P127 is owned by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?owner WHERE { wd:Q243278 wdt:P127 ?owner . }\"\n    \t]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5136 is Rolls-Royce\nkg:4524 is owned by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"?x kg:4524 kg:5136 .\"\n \t\t\t\t\t\t]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506; wdt:P625 ?coordinate. }\"\n  ]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P131 is located in the administrative territorial entity\nwd:Q90 is Paris", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506. ?museum wdt:P131 wd:Q90. }\"\n \t]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8603 is instance of\nkg:3705 is museum\nkg:5581 is located in the administrative territorial entity\nkg:2715 is Paris", "response": "{\n \t\t\"query\": [\n  \t\t\"{?x kg:8603 kg:3705}\",\n  \t\t\"?x kg:5581 kg:2715\"\n  \t]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { ?resource wdt:P19 wd:Q84. }\"\n \t\t \t\t ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\nwdt:P20 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?place WHERE { wd:Q9696 wdt:P20 ?place . }\"\n \t\t \t  ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0170 is John F. Kennedy\nkg:4823 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"?x kg:4823 kg:0170 .\"\n \t           ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P39 wd:Q174286;\",\n    \"              wdt:P31 wd:Q700948;\",\n    \"              wdt:P1025 ?termOfOffice.\",\n    \"}\",\n    \"ORDER BY DESC(?termOfOffice)\"\n  ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { ?resource wdt:P39 wd:Q4970706. }\"\n \t\t \t\t ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0430 is position held\nkg:8057 is Federal Chancellor of Germany", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:0430 kg:8057 .\"\n\t\t    \t  ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?beer WHERE { ?beer wdt:P31 wd:Q11206 ; wdt:P17 wd:Q45. }\"\n  ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44 is beer\nwd:Q15075508 is beer brand\nwdt:P31 is instance of\nwdt:P17 is country\nwd:Q27 is Republic of Ireland", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?beer WHERE {\"\n     \t\t,\"?beer wdt:P31 wd:Q15075508 .\"\n     \t\t,\"?beer wdt:P17 wd:Q27 .\"\n     \t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6618 is beer\nkg:6574 is beer brand\nkg:0525 is instance of\nkg:3428 is country\nkg:7048 is Republic of Ireland", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?resource kg:0525 kg:6574 .\",\n\t\t    \t\t\t\"?resource kg:3428 kg:7048 .\"\n\t\t    \t\t]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?country WHERE {\\n  wd:Q421 wdt:P30 ?country.\\n}\\n\"]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country", "response": "{\n \t\t\"query\":\n\t\t[\n\t\t\t\"SELECT ?country WHERE { wd:Q5451 wdt:P17 ?country . }\"\n\t\t]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Himalayas\nkg:4276 is country", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?country WHERE { kg:0335 <http://example.com/extendsTo> ?country . }\"\n \t]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?actor wdt:P19 wd:Q183 ; wdt:P31 wd:Q5 . }\"\n  ]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10800557 is film actor\nwdt:P19 is place of birth\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q10800557 .\",\n      \"?actor wdt:P19 wd:Q183 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9522 is occupation\nkg:1808 is film actor\nkg:0224 is place of birth\nkg:5013 is Germany\nkg:0224 is place of birth\nkg:2561 is country\nkg:5013 is Germany", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?actor WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?actor kg:9522 kg:1808 .\", \"@comment ?actor is a film actor.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?actor kg:0224 ?birthPlace .\", \"@comment ?birthPlace is the place of birth for ?actor.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?birthPlace kg:2561 kg:5013 .\", \"@comment kg:5013 represents Germany.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer WHERE { ?producer p1456 [] } GROUP BY ?producer ORDER BY DESC (COUNT (?film)) LIMIT 1\"\n  ]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer", "response": "{\n  \"query\" : [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  ?producer p:P31 [].\",\n    \"  ?producer wikibase:sitelinks ?sitelinksCount.\",\n    \"  FILTER (STRLEN(?sitelinksCount) > 0)\",\n    \"}\",\n    \"GROUP BY ?producer\",\n    \"ORDER BY DESC(COUNT(?film))\",\n    \"LIMIT 1\"\n  ]\n  }"}
{"question": "Who produced the most films?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is instance of\nkg:0983 is film\nkg:9722 is producer", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?producer WHERE {\",\n\t\t\t\"?film kg:instance_of kg:0983 .\",\n\t\t\t\"?film kg:produced_by ?producer .\",\n\t\t\t\"?producer kg:instance_of kg:9722 .\",\n\t\t\t\"} GROUP BY ?producer HAVING (COUNT(?film) = MAX(COUNT(?film)))\"\n\t\t]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?employeeCount WHERE { wd:Q61 WikipediaPage 'Google' . wd:Q61 wdt:P1109 ?employeeCount }\"\n  \t    \t\t]\n} "}
{"question": "How many employees does Google have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q95 is Google\nwdt:P1128 is employees", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?employees \\nWHERE {\\nwd:Q95 wdt:P1128 ?employees.\\n}\"]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1346 is Google\nkg:0226 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:0226 kg:1346 .\"\n    \t\t\t\t\t]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 .\"\n      ]\n} "}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q64 is Berlin", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999 ; wdt:P19 wd:Q64 . }\"\n \t]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is occupation\nkg:4298 is actor\nkg:3614 is place of birth\nkg:5337 is Berlin", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:3614 kg:5337 .\",\n\t\t    \t\t\"?resource kg:5174 kg:4298\"\n\t\t    \t  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?creator WHERE { ?character wdt:P31 wd:Q24495. ?character wdt:P170 ?creator. ?character rdfs:label ?name. FILTER(CONTAINS(?name, \\\"Goofy\\\") && LANG(?name) = 'en'). }\"\n  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111135 is Goofy\nwdt:P170 is creator", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?creator WHERE { wd:Q111135 wdt:P170 ?creator . }\"\n \t\t \t  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9459 is Goofy\nkg:7536 is creator", "response": "{\n \t\t\"query\": [\n    \t\t\"?creator kg:7536 kg:9459 .\"\n    \t]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q839 wdt:P571 ?resource . }\"\n  ]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1951 is Alberta\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?resource WHERE { wd:Q1951 wdt:P571 ?resource . }\"\n\t\t \t\t]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8461 is Alberta\nkg:3974 is inception", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8461 kg:3974 ?resource . }\"\n \t]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mission WHERE { ?item wdt:P31 wd:Q49052; wdt:P179 wd:Q658192. ?mission wdt:P31 wd:Q11056. }\"\n  ]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q207329 is Soyuz programme", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?mission WHERE { wd:Q207329 wdt:P361 ?mission . }\"\n    ]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4715 is part of\nkg:9205 is Soyuz programme", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?mission WHERE { kg:9205 kg:4715 ?mission . }\"\n\t\t]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?show WHERE { ?show wdt:P1698 wd:Q75243. }\"\n  ]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q15416 is television program\nwdt:P161 is cast member\nwd:Q485310 is Neil Patrick Harris\nwdt:P31 is instance of", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\t\t\t\"{ ?item wdt:P31 wd:Q15416 ; wdt:P161 wd:Q485310 . }\"\n  \t\t\t\t]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2058 is subclass of\nkg:5497 is television program\nkg:8214 is cast member\nkg:9534 is Neil Patrick Harris\nkg:3632 is instance of", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:8214 kg:9534 .\",\n\t\t    \t\t\"?x kg:3632 kg:5497 .\"\n\t\t    \t]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q40197 ; wdt:P571 ?foundDate . }\"\n  ]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q622188 is Hells Angels\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q622188 wdt:P571 ?resource . }\"\n    \t]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6885 is Hells Angels\nkg:8843 is inception", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n      \"SELECT ?resource WHERE { kg:6885 kg:8843 ?resource . }\"\n   ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?income WHERE { wd:Q83 wiki:data174 ?income . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q312 is Apple\nwdt:P2295 is net profit", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?netIncome WHERE { wd:Q312 wdt:P2295 ?netIncome . }\"\n \t\t \t  ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9309 is Apple\nkg:5852 is net profit", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:5852 kg:9309 .\"\n   \t\t\t \t\t]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31 wd:Q28967 ;\", \"># Instance of holiday\",\n    \"  wd:Q45099 wdt:P17 wd:Q100 ;\", \"># Sweden (country) with ISO code Q100\",\n    \"  ?holiday wdt:P17 wd:Q100 .\", \"># Holiday celebrated in Sweden\"\n   \t\t]}\n   \t\t\t\t\t\t\t      \t\t\t\t"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q1401522 is public holidays in Sweden", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q1401522. }\"\n \t\t \t  ]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5437 is instance of\nkg:1431 is public holidays in Sweden", "response": "{\n \t    \t\t\"query\": [\n\t\t          \"SELECT ?holidays WHERE { \"\n\t\t            \t,\"?holidays kg:instance_of kg:1431. \"\n\t\t           \t\t,\"kg:1431 rdfs:label \\\"public holidays in Sweden\\\"@en. \"\n\t\t          \t\t,\"?holidays rdf:type kg:5437. \"\n\t\t         \t\t,\"} \"\n\t\t       ]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?city WHERE { wd:Q4865 wdt:P2039 ?city . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154946 is Juliana of the Netherlands\nwdt:P119 is place of burial", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?placeOfBurial WHERE { wd:Q154946 wdt:P119 ?placeOfBurial . }\"\n    \t]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7722 is Juliana of the Netherlands\nkg:1563 is place of burial", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?placeOfBurial WHERE { kg:7722 kg:1563 ?placeOfBurial . }\"\n    \t]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P279* wd:Q40198;\",\n    \"          wdt:P31 wd:Q46852.\",\n    \"}\",\n    \"SERVICE wikibase:<http://wikiba.se/ontology#label> { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P452 is industry\nwd:Q39809 is marketing", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?company WHERE {\"\n \t\t  \t,\"?company wdt:P31 wd:Q4830453 .\"\n \t\t  \t,\"?company wdt:P452 wd:Q39809 .\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6959 is instance of\nkg:4237 is business\nkg:0680 is industry\nkg:5161 is marketing", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?company <http://example.com/instanceOf> kg:4237 .\",\n\t\t    \t\t\"?company <http://example.com/isIndustry> kg:0680 .\",\n\t\t    \t\t\"FILTER (CONTAINS(LCASE(str(kg:0680)), \\\"advertising\\\")) .\"\n\t\t    \t]\n\t\t    \t}\n\t\t    \t\t\t \t    \t\t"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?killer WHERE { wd:Q654280 wikibase:statements ?statement . ?statement pq:P1369 ?killer . }\"\n  ]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1203 is John Lennon\nwdt:P157 is killed by", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?killer WHERE { wd:Q1203 wdt:P157 ?killer . }\"\n\t\t \t\t]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2917 is John Lennon\nkg:5682 is killed by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"?x <http://example/kg:5682> <http://example/kg:2917> .\"\n \t\t \t\t\t]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?writer WHERE { ?writer wdt:P31 wd:Q5 . ?writer wdt:P69 wd:Q40831 . }\"\n  ]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P69 is educated at\nwdt:P131 is located in the administrative territorial entity\nwd:Q406 is Istanbul", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?writer WHERE {\"\n     \t\t,\"?writer wdt:P106 wd:Q36180 .\"\n     \t\t,\"?writer wdt:P69 ?institution .\"\n     \t\t,\"?institution wdt:P131 wd:Q406 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5704 is occupation\nkg:0260 is writer\nkg:7091 is educated at\nkg:8154 is located in the administrative territorial entity\nkg:9339 is Istanbul", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?writer WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?writer kg:5704 kg:0260 .\", \"@comment ?writer \\\"is a writer\\\".\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?writer kg:7091 ?institution .\", \"@comment ?institution \\\"the institution where the person was educated\\\".\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?institution kg:8154 kg:9339 .\" , \"@comment kg:9339 \\\"Istanbul\\\".\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?band WHERE {\",\n    \"  ?band wdt:P31 wd:Q214952; \", \"># instance of band\"\n   \t\t,\"wdt:P360 wd:Q7389; \", \"># musical group genre metalcore\"\n   \t\t,\"wdt:P495 wd:Q9910. \", \"># country Australia\"\n   \t\t,\n    \"}\"\n  ]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q215380 is musical group\nwdt:P495 is country of origin\nwd:Q408 is Australia\nwdt:P136 is genre\nwd:Q183862 is metalcore", "response": "{\n  \"query\" : [\n    \"SELECT ?band WHERE {\",\n      \"?band wdt:P31 wd:Q215380 .\", \"@\"\n     \t, \"?band wdt:P495 wd:Q408 .\", \"@\"\n     \t, \"?band wdt:P136 wd:Q183862 .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2057 is instance of\nkg:5941 is musical group\nkg:6595 is country of origin\nkg:4070 is Australia\nkg:5506 is genre\nkg:6845 is metalcore", "response": "{\n \t    \t\t\"query\": [\n\t      \t\t\t\"?band kg:2057 kg:5941 .\",\n\t\t      \t\t\"?band kg:6595 kg:4070 .\",\n\t\t\t      \t\"?band kg:5506 kg:6845 .\"\n\t    \t\t\t]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { ?country wdt:P38 wd:Q491; wdt:P297 ?currencyCode . FILTER(?currencyCode = \\\"EUR\\\") }\"\n  ]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE {\"\n     \t\t,\"?country wdt:P31 wd:Q6256 .\"\n     \t\t,\"?country wdt:P38 wd:Q4916 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4911 is instance of\nkg:8401 is country\nkg:8909 is currency\nkg:8143 is euro", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n\t\t\t\"?country kg:instance_of kg:8401 .\",\n\t\t\t\"?country kg:currency kg:8143 .}\",\n\t\t\t\"LIMIT 10\"\n\t\t]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?disorder WHERE {\",\n    \"  ?disorder wdt:P31 wd:Q12308; wdtn:wikibase:sitelinks wikidatawiki.\\\"Eating disorder\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q373822 is eating disorder", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?disorder WHERE {\",\n \t\t\t\"?disorder wdt:P279* wd:Q373822. \",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6601 is subclass of\nkg:7808 is eating disorder", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:6601 kg:7808 .\"\n\t\t    \t]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  wd:Q42876 wdt:P1435 ?item .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q93284 is Marc Chagall\nwdt:P172 is ethnic group\nwd:Q7325 is Jewish people", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q93284 wdt:P172 wd:Q7325. }\"\n  ]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3776 is Marc Chagall\nkg:7566 is ethnic group\nkg:9691 is Jewish people", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?entity kg:typeOf kg:3776 .\",\n\t\t    \t\t\t\"?entity kg:hasEthnicity kg:9691 .\"\n\t\t    \t\t]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\t\t \t  \"query\": [\n\t\"SELECT ?rank WHERE { \"\n\t\t,\"?country wdt:P451 wd:Q39; wdt:P1498 ?rank.\"\n\t\t,\"FILTER (datatype(?rank) = xsd:integer)\"\n\t\t,\"BIND(LANGMATCHES(LANG(?rank), \\\"en\\\") AS ?isEnglish)\"\n\t\t,\"FILTER (?isEnglish = true)\"\n\t\t,\"?country rdfs:label ?name FILTER (LANG(?name) = 'en')\"\n\t\t,\"FILTER (?name = 'Brazil')\"\n\t\t,\"FILTER (MIN(?rank))\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83459 is Brazil national football team\np:P1352 is ranking\npq:P459 is determination method\nwd:Q180825 is FIFA World Rankings\nps:P1352 is ranking", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"SELECT ?rank WHERE { wd:Q83459 p:P1352 ?positionStatement . ?positionStatement ps:P1352 ?rank ; pq:P459 wd:Q180825 . }\"\n \t]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1028 is Brazil national football team\nkg:5752 is ranking\nkg:7102 is determination method\nkg:1734 is FIFA World Rankings\nkg:0187 is ranking", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:5752 kg:0187 .\",\n\t\t    \t\t\t\"?x kg:7102 kg:1734 .\",\n\t\t    \t\t\t\"?x kg:1028 <http://rdf.freebase.com/ns/m.09l6p> .\"\n\t\t    \t\t]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { wd:Q203597 wdt:P1083 ?film . }\"\n  ]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q38111 is Leonardo DiCaprio", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?film WHERE { wd:Q38111 wdt:P161 ?film . ?film wdt:P31 wd:Q11424 }\"\n \t]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2490 is instance of\nkg:5000 is film\nkg:4337 is cast member\nkg:0455 is Leonardo DiCaprio", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4337 kg:0455 .\",\n\t\t    \t\t\"?x kg:2490 kg:5000 .\"\n\t\t    \t]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q23 (wdt:P101|wdt:P106) ?resource .\",\n    \"  FILTER(?resource = wd:Q7908) .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P106 is occupation\nwd:Q593644 is chemist", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?occupation WHERE { wd:Q7416 wdt:P106 ?occupation }\"\n    \t]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1806 is Margaret Thatcher\nkg:4297 is occupation\nkg:0500 is chemist", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?occupation WHERE { kg:1806 kg:4297 ?occupation . FILTER(?occupation = kg:0500) }\"\n \t]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q9657 wdt:P421 ?timezone .\", \"># Utah (Q9657) has time zone(s) P421\"\n   \t,\"?state wdt:P421 ?timezone .\", \"># States with the same time zone as Utah\"\n   \t,\"?state wdt:P30 ?country .\", \"># The state is part of a country\"\n   \t,\"wd:Q30 wdt:P31 ?country .\" ,\"\\t># The country is instance of Q30 (United States)\"\n   \t,\"}\",\n    \"}\"\n  ]\n \t}\n \t\t\t\t\t\t      \t\t\t"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?state WHERE {\"\n     \t\t,\"?state wdt:P31 wd:Q35657 .\"\n     \t\t,\"?state wdt:P421 ?timeZone .\"\n     \t\t,\"wd:Q829 wdt:P421 ?timeZone .\"\n     \t\t,\"FILTER(?state != wd:Q829)\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2386 is Utah\nkg:4838 is located in time zone\nkg:9877 is instance of\nkg:7634 is U.S. state\nkg:4838 is located in time zone\nkg:2386 is Utah", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?state WHERE {\",\n\t\t\t\"  kg:2386 kg:4838 ?timeZone .\",\n\t\t\t\"  ?state kg:9877 kg:7634 .\",\n\t\t\t\"  ?state kg:4838 ?timeZone .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?country WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?country wdt:P36 p:P36 ?statement .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?statement ps:P36 ?language .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?statement pq:P1108 ?number_of_languages .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?country wikibase:rankNormalRankForPropertyP36 ?normalStatement .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?normalStatement ps:P36 [] }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER NOT EXISTS {?normalStatement pq:P1108 []}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ SELECT ?country (COUNT(?language) AS ?count) WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?country wdt:P36 p:P36 ?statement .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?statement ps:P36 ?language .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?statement wikibase:rankNormalRankForPropertyP36 ?normalStatement .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL {?normalStatement ps:P36 []}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER NOT EXISTS {?normalStatement pq:P1108 []}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"} GROUP BY ?country }\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"ORDER BY DESC(?count) LIMIT 1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?country WHERE {\"\n \t\t\t\t\t\t,\"?country wdt:P31 wd:Q6256 .\"\n \t\t\t\t\t\t,\"?language wdt:P37 ?country .\"\n \t\t\t\t\t\t,\"{ SELECT ?country (COUNT(?language) AS ?langCount) WHERE {\"\n \t\t\t\t\t\t\t,\"?country wdt:P31 wd:Q6256 .\"\n \t\t\t\t\t\t\t,\"?language wdt:P37 ?country .\"\n \t\t\t\t\t\t,\"} GROUP BY ?country}\"\n \t\t\t\t\t\t,\"?country (MAX(?langCount) as ?maxLang)\"\n \t\t\t\t\t,\"}\" ]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8689 is instance of\nkg:9409 is country\nkg:1656 is official language", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n            \"?country kg:instance_of kg:9409 .\",\n            \"?language kg:instance_of kg:1656 .\",\n            \"?country kg:has_official_language ?language .\",\n            \"}\"\n\t\t]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?filmPerson wdt:P161 wd:Q25184 . ?filmPerson p:P106 [ ps:P106 wd:Q33999 ; pq:P106 wd:Q10837979 ] . ?filmPerson rdfs:label ?actorLabel FILTER (LANG(?actorLabel) = 'en') }\"\n  ]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51803 is Chewbacca\nwdt:P175 is performer", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?actor WHERE { wd:Q51803 wdt:P175 ?actor . }\"\n\t\t \t\t]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5480 is Chewbacca\nkg:2106 is performer", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:5480 kg:2106 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?library WHERE {\",\n    \"  ?library wdt:P31 wd:Q47569; \",\n    \"           wdt:P580 ?establishmentDate. \",\n    \"  FILTER(?establishmentDate < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?library \\nWHERE {\\n?library wdt:P31 wd:Q7075. \\n?library wdt:P571 ?inception. \\nFILTER(?inception < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime)\\n}\\n\"]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is instance of\nkg:8682 is library\nkg:1036 is inception", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?library WHERE {\",\n\t\t    \t\t\"?library a kg:8682 .\", \"># ?library is an instance of kg:8682 (library)\"\n\t\t    \t\t,\"?library kg:1036 ?inception .\", \"># ?library has inception year ?inception\"\n\t\t    \t\t,\"FILTER(?inception < 1400)\", \"># Filter for years before 1400\"\n\t\t    \t\t,\"}\"\n\t\t    \t]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P31 wd:Q47298; \",\n    \"           wdt:P1056 wd:Q2476598.\", \"After researching the appropriate properties, this line might need adjustment as direct property for influence doesn't exist. A more complex query involving statements or descriptions of influence would be required.\",\n    \"}\"\n  ]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q9143 is programming language\nwdt:P737 is influenced by\nwd:Q42478 is Perl", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { \",\n    \" wd:Q42478 wdt:P737 ?language .\",\n    \"?language wdt:P31 wd:Q9143 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1023 is instance of\nkg:5919 is programming language\nkg:3304 is influenced by\nkg:2765 is Perl", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?language WHERE { kg:2765 kg:3304 ?language. FILTER (isinstance(?language, kg:5919)) }\"\n  \t    \t\t]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?state \\nWHERE {\\nwd:Q860 wdt:P13 ldp:contains ?state.\\n}\\n\"]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q130018 is Denali\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?state WHERE { wd:Q130018 wdt:P131 ?state . }\"\n    \t]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5195 is Denali\nkg:2752 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?state WHERE { kg:5195 kg:2752 ?state . }\"\n \t  \t\t\t\t]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?airline WHERE {\",\n    \"  ?airline wdt:P31 wd:Q7892 ;\", \"># Q7892 is the Wikidata item for 'airline'\",\n    \"           wdt:P477 wd:Q25064 . }\" ,\"\\n># Q25064 is the Wikidata item for 'SkyTeam alliance'\"\n    ]\n  }"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q212282 is SkyTeam", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?airline WHERE { ?airline wdt:P114 wd:Q212282. }\"\n    \t]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2866 is airline alliance\nkg:2419 is SkyTeam", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?airline WHERE { kg:2419 <http://example.org/isAllianceOf> ?airline . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P1416 wd:Q32987 .\", \"># P1416 is religious tradition, Q32987 is Methodist-related religious groups\"\n   \t,\"?politician wdt:P39 ?position.\", \"># P39 is position held\"\n   \t,\"?position wdt:P360 wd:Q15481 .}\"] } "}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P140 is religion or worldview\nwd:Q33203 is Methodism", "response": "{\n  \"query\" : [\n    \"SELECT ?politician WHERE {\",\n      \"?politician wdt:P106 wd:Q82955 .\",\n      \"?politician wdt:P140 wd:Q33203 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8888 is occupation\nkg:9878 is politician\nkg:3778 is religion or worldview\nkg:3252 is Methodism", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:3778 kg:3252 .\",\n\t\t    \t\t\"?resource kg:8888 kg:9878 .\"\n\t\t    \t]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?book WHERE { wd:Q207965 wdt:P488 ?author . ?author wdt:P961 ?book . FILTER(?book != wd:Q207965) }\"\n  ]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658375 is The Fault in Our Stars\nwdt:P50 is author\nwdt:P50 is author\nwd:Q658375 is The Fault in Our Stars", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  wd:Q658375 wdt:P50 ?author .\",\n    \"?book wdt:P50 ?author .\",\n    \"?book wdt:P31 wd:Q571 .\", \"At least one of the books should be an instance of 'written work'\",\n    \"FILTER(?book != wd:Q658375)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5896 is The Fault in Our Stars\nkg:1268 is author\nkg:1268 is author\nkg:5896 is The Fault in Our Stars", "response": "{\n  \"query\" : [\n    \"SELECT ?book WHERE { kg:5896 kg:1268 ?author . ?author kg:1268 ?book . FILTER(?book != kg:5896) }\"\n  ]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q205994; wdt:P2044 ?height . FILTER(MAX(?height)) }\"\n  ]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q8502 . ?resource wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1\"]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is instance of\nkg:3850 is mountain\nkg:9375 is elevation above sea level", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n            \"?resource kg:instance_of kg:3850 .\",\n            \"?resource kg:9375 ?elevation .\",\n            \"{ SELECT ?resource (MAX(?elevation) as ?maxElevation) WHERE {\",\n                \"?resource kg:instance_of kg:3850 .\",\n                \"?resource kg:9375 ?elevation .\",\n            \"} GROUP BY ?resource }\",\n            \"FILTER (?elevation = ?maxElevation)\"\n\t\t\t,\"}\"]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { ?author wdt:P31 wd:Q5 .\"\n      , \"?author wdt:P1086 ?bookCount .\"\n      , \"?author wdt:P463 wd:Q25977 .\"\n      , \"FILTER ( ?bookCount >= 0 ) .\"\n      , \"}\"\n      , \"ORDER BY DESC(?bookCount)\"\n      , \"LIMIT 1\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q49757 is poet\nwdt:P50 is author\nwdt:P31 is instance of\nwd:Q571 is book", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE {\",\n      \"?book wdt:P31 wd:Q571 .\",\n      \"?book wdt:P50 ?author .\",\n      \"?author wdt:P106 wd:Q49757 .\",\n      \"?author wdt:P31 wd:Q5 .\",\n      \"{ SELECT ?author (COUNT(?book) AS ?count) WHERE {\",\n        \"?book wdt:P50 ?author .\",\n        \"?author wdt:P106 wd:Q49757 .\"\n      , \"GROUP BY ?author\" ,\n      \"} ORDER BY DESC(?count) LIMIT 1}\",\n    \"}\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0120 is occupation\nkg:2954 is poet\nkg:1704 is author\nkg:0061 is instance of\nkg:7243 is book", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:0061 kg:2954 .\", \"># The resource is an instance of poet (kg:2954)\"\n   \t,\"?resource kg:0120 kg:1704 .\" ,\"% The poet's occupation is author (kg:1704)\"\n    ,\"{ SELECT ?bookAuthor (COUNT(?book) AS ?bookCount) WHERE {\",\n    \"   ?book kg:0061 kg:7243 .\", \"># The book is an instance of book (kg:7243)\"\n   \t,\"?book kg:1704 ?bookAuthor .\" ,\"% The author of the book\"\n    ,\"} GROUP BY ?bookAuthor ORDER BY DESC(?bookCount) LIMIT 1\",\n    \"} BIND(?bookAuthor AS ?resource)}\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q207693 ?influencedBy ?language . }\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2005 is JavaScript\nwdt:P737 is influenced by", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q2005 wdt:P737 ?language . }\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5218 is JavaScript\nkg:8409 is influenced by", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:8409 kg:5218 .\"\n\t\t    \t  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P106 wd:Q28306 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wikibase:sitelinks ?sitelinks .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ SELECT ?entity (COUNT(?book) AS ?count) WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?entity wdt:P463 ?book.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"} GROUP BY ?entity ORDER BY DESC(?count)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"LIMIT 1 }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q639669 is musician\nwdt:P31 is instance of\nwd:Q571 is book\nwdt:P50 is author", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q215627; wdt:P106 wd:Q639669; wdt:P50 ?bookAuthor.\",\n    \"?bookAuthor rdfs:label ?authorLabel.\",\n    \"?book wdt:P50 ?bookAuthor; wdt:P31 wd:Q571.\",\n    \"FILTER (LANG(?authorLabel) = 'en')\",\n    \"} GROUP BY ?resource COUNT(?book) ORDER BY DESC(COUNT(?book)) LIMIT 1\"\n  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4826 is occupation\nkg:0324 is musician\nkg:0683 is instance of\nkg:5954 is book\nkg:5686 is author", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource kg:0324 [] .\", \"># musician property filter\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource kg:4826 [] .\", \"># occupation property filter\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"[] kg:5954 ?resource .\", \"># instance of book authorship relationship\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?book kg:5686 ?resource .\", \"># book has author relationship\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?book kg:5954 [] .\" ,\"\\t\\t># filter for books only\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. \", \">#?film is an instance of film (movie)\"\n   \t,\"?film wdt:P179 wd:Q65083. \", \">#?film has a director who is Clint Eastwood\"\n   \t,\"?film wdt:P161 wd:Q65083. \" ,\",#?film has a cast member who is Clint Eastwood\"\n   \t,\"?film wdt:P57 wd:Q65083. \", \"#Clint Eastwood directed the film\"\n   \t,\"}\",\n    \"}\"\n  ]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q43203 is Clint Eastwood\nwdt:P161 is cast member\nwd:Q43203 is Clint Eastwood", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"?film wdt:P57 wd:Q43203 .\",\n  \t\t\"?film wdt:P161 wd:Q43203 .\"\n  \t]\n} "}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7571 is director\nkg:1404 is Clint Eastwood\nkg:2987 is cast member\nkg:1404 is Clint Eastwood", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?film kg:7571 kg:1404 .\", \"><!-- film-director-Clint_Eastwood relation pattern -->  <!-- ?film is the variable for Clint Eastwood's directorial works, kg:7571 represents the 'is director' relationship, and kg:1404 represents Clint Eastwood entity. -->  <!-- The following line is not necessary as per given entities and properties but to match the requirement of checking cast member relation if needed it would be commented out. -->  <!-- Uncomment below line if required to check cast member relation too. -->  <!-- ?film kg:2987 kg:1404 . -->  <!-- film-cast_member-Clint_Eastwood relation pattern (commented as per given instruction) -->  \" ]} "}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?instrument WHERE { wd:Q76159 wdt:P1303 ?instrument . }\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154216 is Cat Stevens\nwdt:P1303 is instrument", "response": "{\n  \"query\" : [\n    \"SELECT ?instrument WHERE { wd:Q154216 wdt:P1303 ?instrument. }\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9496 is Cat Stevens\nkg:7890 is instrument", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?instrument WHERE { kg:9496 kg:7890 ?instrument . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?airline WHERE { ?airline wdt:P31 wd:Q7069; wdt:P477 wd:Q28550. }\"\n  ]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q189709 is Star Alliance", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?airline WHERE { ?airline wdt:P114 wd:Q189709. }\"\n    \t]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1615 is airline alliance\nkg:9546 is Star Alliance", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n \t      \"SELECT ?resource WHERE { kg:9546 <http://example.org/isComposedOf> ?resource . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { \"\n     \t\t,\"?book wdt:P31 wd:Q571; \"\n     \t,\"wdt:P1433 wd:Q21690. \"\n     \t,\"?book wdt:P50 ?author. \"\n     \t,\"}\"]\n  }"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11679 is The Hunger Games\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?author WHERE { wd:Q11679 wdt:P50 ?author . }\"\n \t\t \t  ]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0284 is The Hunger Games\nkg:4529 is author", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?author WHERE { kg:0284 kg:4529 ?author . }\"\n\t\t]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?label WHERE { wd:Q4279 wiki:item ?elvis . ?elvis schema:firstAlbum ?album . ?album schema:recordLabel ?label . }\"\n  ]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q59150527 is Elvis Presley's albums in chronological order\nwdt:P527 is has part(s)\nwdt:P577 is publication date\nwdt:P264 is record label", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?label WHERE { wd:Q59150527 wdt:P527 ?firstAlbum . ?firstAlbum wdt:P577 ?date . FILTER (MIN(?date)) . ?firstAlbum wdt:P264 ?label }\"\n    \t]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1729 is Elvis Presley's albums in chronological order\nkg:4335 is has part(s)\nkg:9322 is publication date\nkg:4784 is record label", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?label WHERE { kg:1729 kg:4335 ?album . ?album kg:9322 ?date . ?album kg:4784 ?label . FILTER (LANG(?label) = 'en') } LIMIT 1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE { wd:Q47689 wdt:P161 wd:Q20356 . }\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q166262 is Batman Begins\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q166262 wdt:P161 wd:Q45772 . }\"\n    \t]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2663 is Batman Begins\nkg:2232 is cast member\nkg:6261 is Christian Bale", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:2232 kg:6261 .\",\n           \t\t\t \"?x kg:2663 ?y\"\n\t\t       ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?residence WHERE { wd:Q7286 wdt:P1035 ?residence . }\"\n  ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q844587 is Prime Minister of Spain\nwdt:P263 is official residence", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"?residence wdt:P263 wd:Q844587 .\"\n \t]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6526 is Prime Minister of Spain\nkg:7770 is official residence", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?residence WHERE { kg:6526 kg:hasOfficialResidence ?residence . }\"\n \t  \t    ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P31 wd:Q5 .\",\n    \"  ?movie wdt:P1059 ?actor .\",\n    \"  ?movie wdt:P179 ?productionCompany .\",\n    \"  ?movie wdt:P364 ?budget .\",\n    \"  ?movie wdt:P1198 ?boxOfficeGross .\",\n    \"  ?movie wdt:P1695 ?releaseDate .\",\n    \"  ?actor p:P1059 ?statement .\",\n    \"  ?statement ps:P1059 ?movieCount .\",\n    \"  ?statement pq:P1134 wd:Q28721 .\",\n    \"  ?statement pq:P1134 wd:Q28721 .\",\n    \"  FILTER (MIN(?movieCount))\",\n    \"  SERVICE <https://query.wikidata.org/sparql> {\",\n    \"    SELECT ?actor (COUNT(?movie) AS ?count) WHERE {\",\n    \"      ?actor wdt:P31 wd:Q5 ;\",\n    \"             wdt:P1059 ?movie .\",\n    \"      FILTER NOT EXISTS {?actor wdt:P106 wd:Q28746} .\",\n    \"    } GROUP BY ?actor ORDER BY DESC(?count) LIMIT 1\"\n    ,\"}\"\n    ,\"}\"\n  ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P161 is cast member", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33999 .\",\n    \"  ?movie wdt:P161 ?actor .\",\n    \"  ?otherActor wdt:P161 ?movie .\",\n    \"  ?otherActor wdt:P106 wd:Q33999 .\",\n    \"}\",\n    \"GROUP BY ?actor\",\n    \"HAVING (COUNT(?movie) = MAX(COUNT(?movie)))\"\n  ]\n  }"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0813 is occupation\nkg:4987 is actor\nkg:5950 is cast member", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie kg:5950 ?actor .\",\n    \"?actor kg:0813 kg:4987 .\",\n    \"} GROUP BY ?actor HAVING (COUNT(?movie) = MAX(COUNT(?movie)))\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P37 wd:Q216958 .\", \"># P37 is official language, Q216958 means more than two languages\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?country WHERE {\"\n \t\t\t\t\t\t,\"?country wdt:P31 wd:Q6256 .\"\n \t\t\t\t\t\t,\"?country wdt:P37 ?language1 .\"\n \t\t\t\t\t\t,\"?country wdt:P37 ?language2 .\"\n \t\t\t\t\t\t,\"FILTER(?language1 != ?language2)\"\n \t\t\t\t\t\t,\"{\"\n \t\t\t\t\t\t\t,\"?country wdt:P37 ?language3 .\"\n \t\t\t\t\t\t\t,\"FILTER(?language3 != ?language1 && ?language3 != ?language2)\"\n \t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t, \"MINUS {\"\n \t\t\t\t\t\t\t,\"?country wdt:P37 ?language4 .\"\n \t\t\t\t\t\t\t,\"FILTER(?language4 != ?language1 && ?language4 != ?language2 && ?language4 != ?language3)\"\n \t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t,\"}\"\n \t\t \t\t\t]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1484 is instance of\nkg:4940 is country\nkg:4371 is official language", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:1484 kg:4940}\",\n      \t\t\t\"?x kg:4371 ?y\",\n      \t\t\t\"{?z kg:1484 kg:4940}\",\n      \t\t\t\"?z kg:4371 ?w\",\n      \t\t\t\"{?v kg:1484 kg:4940}\",\n      \t\t\t\"?v kg:4371 ?u\",\n      \t\t\t\"FILTER(?x != ?z)\",\n      \t\t\t\"FILTER(?x != ?v)\",\n      \t\t\t\"FILTER(?z != ?v)\"\n      \t]\n      \t}\n     \t \t\t \t\t\t\t \t\t"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?song WHERE {\",\n    \"  ?song wdt:P31 wd:Q5940826 ;\", \"># song instance of musical work\"\n   \t\t,\"wdt:P570 ?retrievalDate .\", \"# publication date or end time\"\n   \t\t,\"?song wdt:P175 wd:Q21143 .\", \"# created by Bruce Springsteen (Q21143)\"\n   \t\t,\"FILTER (?retrievalDate >= '1980-01-01T00:00:00Z'^^xsd:dateTime)\",\n   \t\t\"FILTER (?retrievalDate <= '1990-12-31T23:59:59Z'^^xsd:dateTime)\"\n   \t\t,\"}\"\n  ]\n}\n \t\t\t\t\t\t       \t   \t\t"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7366 is song\nwdt:P577 is publication date\nwdt:P175 is performer\nwd:Q1225 is Bruce Springsteen", "response": "{\n  \"query\" : [\n    \"SELECT ?song WHERE {\",\n      \"?song wdt:P31 wd:Q7366 .\", \"@\"\n     \t,\"?song wdt:P175 wd:Q1225 .\", \"@\"\n     \t,\"?song wdt:P577 ?date .\", \"@\"\n     \t,\"?date ?op ?year .\", \"@\"\n     \t,\"FILTER (regex(str(?year), \\\"^19[89]\\\") && strstarts(str(?op), \\\"http://www.w3.org/2001/XMLSchema#\\\"))\" ,\n    \"}\"\n  ]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is instance of\nkg:4316 is song\nkg:3779 is publication date\nkg:4925 is performer\nkg:3345 is Bruce Springsteen", "response": "{\n  \"query\" : [\n    \"SELECT ?song WHERE {\",\n    \"  ?song a kg:4316 ;\", \">// ?song is a song\",\n    \"  kg:4925 ?song kg:3345 ;\", \">// Bruce Springsteen performs the song\",\n    \"  kg:3779 ?song ?date .\", \">// The song has publication date ?date\",\n    \"  FILTER(?date >= 1980 && ?date <= 1990) }\"\n    ]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?show WHERE {\",\n    \"  ?show wdt:P31 wd:Q5383932 ;\",\n    \"        wdt:P57 wd:Q7192 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5398426 is television series\nwdt:P170 is creator\nwd:Q25014 is John Cleese\nwdt:P170 is creator\nwdt:P527 is has part(s)\nwd:Q25014 is John Cleese", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?show WHERE { \"\n     \t\t,\"?show wdt:P31 wd:Q5398426 .\"\n     \t\t,\"?show wdt:P170 wd:Q25014 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is instance of\nkg:1395 is television series\nkg:4844 is creator\nkg:3811 is John Cleese\nkg:4844 is creator\nkg:4191 is has part(s)\nkg:3811 is John Cleese", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 kg:4844 kg:3811}\",\n\t\t\t\"?x0 kg:2623 kg:1395\"\n\t\t]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q7864 wdt:P570 ?resource . }\"\n  ]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q211 is Latvia\np:P463 is member of\nps:P463 is member of\nwd:Q458 is European Union\npq:P580 is start time", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q211 p:P463/ps:P463 wd:Q458 . wd:Q211 pq:P580 ?resource }\"\n \t]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1273 is Latvia\nkg:0998 is member of\nkg:7272 is member of\nkg:6578 is European Union\nkg:8789 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:8789 kg:1273 .\",\n      \t\t\t\"?x kg:0998 kg:6578 .\"\n      \t\t\t ]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE { ?player wdt:P31 wd:Q5 ; wdt:P106 wd:Q937348 ; wdt:P19 wd:Q289 . }\"\n  ]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q937857 is association football player\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q233 is Malta", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P106 wd:Q937857 . ?item wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q233}\"\n      \t  ]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5683 is occupation\nkg:5225 is association football player\nkg:7932 is place of birth\nkg:9554 is country\nkg:8345 is Malta", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?player WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?player kg:5683 kg:5225 .\", \"><!-- occupation is association football player -->\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?player kg:7932 kg:9554:kg:8345 .\", \"><!-- place of birth is country:Malta -->\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P31 wd:Q5 ;\", \"># P31 is instance of, Q5 is human\",\n    \"              wdt:P102 wd:Q48976 ;\", \"># P102 is member of political party, Q48976 is a placeholder for actual political organization WDID\",\n    \"              wdt:P63 wd:Q31 .\", \"># P63 is educated at, Q31 should be replaced with the specific Wikidata ID for Columbia University\"\n   \t\t]}\n   \t\t\t\t\t\t\t      \t\t\t\t"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P69 is educated at\nwd:Q49088 is Columbia University", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955 . ?politician wdt:P69 wd:Q49088 . }\"\n \t]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0795 is occupation\nkg:2450 is politician\nkg:5792 is educated at\nkg:4111 is Columbia University", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n \t      \"SELECT ?resource WHERE {\"\n \t     \t,\"?resource kg:0795 kg:2450 .\"\n \t     \t,\"?resource kg:5792 kg:4111 .\"\n \t   \t\t,\"}\"\n \t]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?birthday WHERE {\"\n     \t\t,\"?actor wdt:P106 wd:Q21194. \"\n     \t, \"?actor wdt:P136 wd:Q58796. \"\n     \t, \"?actor wdt:P569 ?birthday.\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\nwdt:P161 is cast member\nwdt:P569 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?actor ?dob WHERE { \"\n \t\t  \t\t,\"wd:Q162371 wdt:P161 ?actor .\"\n \t\t  \t\t,\"?actor wdt:P569 ?dob .\"\n \t\t  \t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Charmed\nkg:4319 is cast member\nkg:9526 is date of birth", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4319 kg:3786 .\",\n\t\t    \t\t\"?x kg:9526 ?y .\"\n\t\t    \t]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q47562; \", \"># instance of organization (telecommunication company)\"\n   \t\t,\"wdt:P17 wd:Q34.}\", \"># located in the country Belgium\"\n   \t]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q43229 is organization\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q43229 is organization\nwdt:P452 is industry\nwd:Q418 is telecommunication\nwdt:P17 is country\nwd:Q31 is Belgium", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\t\t\t\"{ ?org wdt:P31 wd:Q43229 . }\",\n  \t\t\t\t\t\"{ ?org wdt:P279* wd:Q43229 . }\",\n  \t\t\t\t\t\"?org wdt:P452 wd:Q418 .\",\n  \t\t\t\t\t\"?org wdt:P17 wd:Q31 .\"\n  \t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\t\t\t \t\t"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9044 is instance of\nkg:1736 is organization\nkg:9044 is instance of\nkg:7648 is subclass of\nkg:1736 is organization\nkg:4913 is industry\nkg:1531 is telecommunication\nkg:8115 is country\nkg:9094 is Belgium", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?organization WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?organization a kg:1736 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?organization kg:7648 kg:1531 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?organization kg:9044 kg:9094 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"kg:9094 a kg:8115 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"kg:8115 rdfs:label ?countryLabel .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"FILTER (lcase(str(?countryLabel)) = \\\"belgium\\\")\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?lake WHERE {\",\n    \"  ?lake wdt:P31 wd:Q42789;\",\n    \"        wdt:P17 wd:Q50.\" ,\n    \"}\"]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23397 is lake\nwdt:P17 is country\nwd:Q35 is Denmark", "response": "{\n  \"query\" : [\n    \"SELECT ?lake WHERE {\",\n      \"?lake wdt:P31 wd:Q23397 .\", \"Yeah, that's 'lake'.\",\n      \"?lake wdt:P17 wd:Q35 .\", \"That's 'Denmark'.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1420 is instance of\nkg:5783 is lake\nkg:3411 is country\nkg:8492 is Denmark", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?lake kg:1420 kg:5783 .\",\n\t\t    \t\t\"?lake kg:1420 ?country .\",\n\t\t    \t\t\"?country kg:1420 kg:8492\"\n\t\t    \t]\n\t\t    \t}\n\t\t    \t\t\t \t    \t\t"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?child WHERE { wd:Q24196 wdt:P40 ?child . }\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43874 is Eddie Murphy\nwdt:P40 is child", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?child WHERE { wd:Q43874 wdt:P40 ?child . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1572 is Eddie Murphy\nkg:3910 is child", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?child WHERE { kg:1572 kg:3910 ?child }\"\n  \t    \t\t]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?building WHERE {\",\n    \"  ?building wdt:P31 wd:Q47069; \", \">#instance of building\"\n   \t\t,\"wdt:P171* wd:Q28350;\", \"#subclass of English Gothic architecture\"\n   \t\t,\"wdt:P186 wd:Q16.\", \"#located in the administrative territorial entity\"\n   \t\t,\"}\",\n   \t\"ORDER BY ?building\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q176483 is Gothic architecture\nwdt:P149 is architectural style\nwdt:P7959 is historic county\nwd:Q67479626 is Kent", "response": "{\n  \"query\" : [\n    \"SELECT ?building WHERE {\",\n    \"  ?building wdt:P149 wd:Q176483 .\", \"@ English Gothic architecture\"\n   \t, \"?building wdt:P7959 wd:Q67479626 .\", \"@ Kent historic county\"\n   \t, \"?building wdt:P31 wd:Q146.\", \"@ instance of building\"\n   \t, \"}\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5143 is subclass of\nkg:8740 is Gothic architecture\nkg:5026 is architectural style\nkg:8611 is historic county\nkg:6316 is Kent", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?resource WHERE {\",\n\t\t    \t\t\"?resource a kg:8740. \",\n\t\t    \t \"?resource kg:5026 kg:8740. \",\n\t\t    \t \"?resource kg:8611 kg:6316. \",\n\t\t    \t \"}\"\n\t\t    \t]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?country WHERE {\\n?country wdt:P3872 wd:Q16594 . # currency is West African CFA franc\\n}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q861690 is West African CFA franc", "response": "{\n \t\t\"query\":\n\t\t[\n\t\t\t\"SELECT ?country WHERE { ?country wdt:P38 wd:Q861690. }\"\n\t\t]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9173 is currency\nkg:9648 is West African CFA franc", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE { kg:9648 <http://example.com/usedIn> ?country . }\"\n\t\t]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31 wd:Q23418.\" ,\n    \"  ?holiday wdt:P179 wd:Q165057 .\" ,\n    \"}\"\n  ]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q1445650 is holiday\nwdt:P31 is instance of", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q1445650. }\"\n \t\t \t  ]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2965 is subclass of\nkg:6347 is holiday\nkg:9668 is instance of", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?holidays WHERE { ?holidays a kg:6347 }\"\n\t\t]\n}"}
{"question": "What is the longest river?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the longest river?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P625 ?coordinate } ORDER BY DESC (wdt:P484) LIMIT 1\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?organization WHERE { ?organization wdt:P570 wd:Q1104469. }\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P571 is inception\nwdt:P31 is instance of\nwdt:P131 is located in the administrative territorial entity\nwd:Q43229 is organization", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P571 ?inception .\",\n      \"?resource wdt:P31 wd:Q43229 .\",\n      \"?inception wikibase:timeValue ?year.\",\n      \"FILTER(?year = 1930)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is inception\nkg:5779 is instance of\nkg:9493 is located in the administrative territorial entity\nkg:3317 is organization", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource kg:9081 \\\"1930\\\"^^<http://www.w3.org/2001/XMLSchema#integer> .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource kg:5779 kg:3317 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?birthName WHERE { wd:Q98456 wdt:P1479 ?birthName . }\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?birthName WHERE { wd:Q567 wdt:P1477 ?birthName . }\"\n \t\t \t\t\t]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7977 is Angela Merkel\nkg:7333 is birth name", "response": "{\n  \"query\" : [\n    \"SELECT ?birthName WHERE { kg:7977 kg:7333 ?birthName . }\"\n  ]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?spouse WHERE { wd:Q40219 wdt:P26 ?spouse . }\"\n  ]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37079 is Tom Cruise\nwdt:P26 is spouse", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse WHERE {\\nwd:Q37079 wdt:P26 ?spouse .\\n}\"]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1550 is Tom Cruise\nkg:9184 is spouse", "response": "{\n  \"query\" : [\n    \"SELECT ?spouse WHERE { kg:1550 kg:9184 ?spouse . }\"\n  ]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?weapon WHERE { \",\n    \"  ?company wdt:P171 wd:Q284956 ;\",\n    \"           p:P31/wd:wikibase-item wd:Q11016 .\",\n    \"  ?company wdt:P1104 ?weapon .\",\n    \"  FILTER(?company = wd:Q284956) \",\n    \"} \"\n  ]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P176 is manufacturer\nwd:Q152815 is Heckler & Koch\nwdt:P279 is subclass of\nwdt:P31 is instance of\nwd:Q15142889 is weapon family", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P176 wd:Q152815 . ?item wdt:P31 wd:Q15142889 .}\"\n      \t\t\t ]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5256 is manufacturer\nkg:4371 is Heckler & Koch\nkg:4662 is subclass of\nkg:6302 is instance of\nkg:5753 is weapon family", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?weapon kg:5256 kg:4371 .\",\n      \t\t\t\"?weapon kg:4662 kg:5753 .\"\n      \t]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q5654; \",\n    \"        wdt:P17 wd:Q183; \",\n    \"        wdt:P2046 ?area. \",\n    \"  FILTER (MIN(?area))\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?city WHERE {\"\n     \t\t,\"?city wdt:P31 wd:Q515 .\"\n     \t\t,\"?city wdt:P17 wd:Q183 .\"\n     \t\t,\"?city wdt:P2083 ?area .\" ]\n     \t\t}\n     \t\t\t\t\t\t\t\t      \t"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2369 is country\nkg:2341 is Germany\nkg:0421 is instance of\nkg:6572 is subclass of\nkg:7298 is city\nkg:7495 is population", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"?city kg:0421 kg:7298 .\",\n       \t\t\"?city kg:6572 kg:2341 .\",\n       \t\t\"?city kg:7495 ?population .\",\n       \t\t\"?city kg:2369 kg:2341 .\"\n       \t \t]\n       \t \t}\n       \t \t\t\t \t\t\t\t \t\t"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?party WHERE {\\nwd:Q9267 wdt:P6564 ?party.\\n}\\n\"]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\np:P39 is position held\nps:P39 is position held\nwd:Q43185970 is Mayor of Lisbon\npq:P580 is start time\nwdt:P102 is member of political party", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"{ ?item wdt:P31 wd:Q43185970 ; p:P39 ?position_statement . ?position_statement ps:P39 ?mayorship ; pq:P580 ?start_time . ?item wdt:P102 ?party . }\"\n    \t\t \t\t \t\t]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4480 is instance of\nkg:1012 is human\nkg:3232 is position held\nkg:0592 is position held\nkg:0692 is Mayor of Lisbon\nkg:7694 is start time\nkg:7386 is member of political party", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?party WHERE {\",\n\t\t\t\"  ?mayor kg:0592 kg:0692 .\", \">// _:b0 kg:0592 kg:0692 .\\n\"\n\t\t\t] }\n\t\t\t\t\t\t\t    \t\t\t\t\t"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon ?mass WHERE {\",\n    \"  ?moon wdt:P31 wd:Q5235;         # Instance of moon\",\n    \"        wdt:P69[0] wd:Q40877;     # Jupiter's lightest moon (this needs to be dynamically determined)\",\n    \"        wdt:P1083 ?mass.           # Mass\"\n   \t,\"?moon wdt:P31 wd:Q9524.         # Subclass of natural satellite of a planet\"\n   \t,\"?moon wdt:P69[1] wd:Q2230.      # Satellite of Jupiter\"\n   \t,\"SERVICE wikibase:mwapi {\",\n    \"    bd:serviceParam wikibase:endpoint \\\"www.wikidata.org\\\".\",\n    \"    bd:serviceParam wikibase:api \\\"BestGuessSearch\\\".\",\n    \"    bd:serviceParam mwapi:search 'lightest moon jupiter'@en.\",\n    \"    bd:serviceParam mwapi:language 'en'.\",\n    \"    ?moon rdfs:label ?searchResult.\"\n   \t,\"FILTER(LANG(?searchResult) = 'en')\"\n   \t,\"}\"\n   \t,\"ORDER BY ASC(?mass)\"\n   \t,\"LIMIT 1\"\n   \t,\"}\"\n   \t,\"?moon wdt:P31 wd:Q9524.         # Subclass of natural satellite of a planet\"\n   \t,\"FILTER NOT EXISTS {?moon wdt:P69[0] ?otherPlanet FILTER (?otherPlanet != wd:Q2230)}\"\n   \t,\"}\"\n  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q61702557 is moon of Jupiter\nwdt:P2067 is mass", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?moon WHERE { ?moon wdt:P31 wd:Q61702557 . ?moon wdt:P2067 ?mass. } ORDER BY ?mass LIMIT 1\"\n \t\t \t  ]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8904 is instance of\nkg:5838 is moon of Jupiter\nkg:6958 is mass", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?var1 kg:8904 kg:5838. ?var1 kg:6958 ?var2}\",\n           \t\t\t\t\"?var1\"\n\t\t          ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employeeCount WHERE { wd:Q46 P1109 ?employeeCount . }\"\n  ]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P1128 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q37156 wdt:P1128 ?resource . }\"\n \t\t \t\t\t]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1608 is IBM\nkg:9125 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:numberOfEmployees ?y .\",\n\t\t    \t\t\t\"?x kg:company kg:1608 .\"\n\t\t    \t\t]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?episode WHERE {\",\n    \"  ?episode wdt:P31 wd:Q5384029 ;\", \">#instance of television episode\"\n   \t\t,\"wdt:P179 wd:Q638693 .\", \"#part of the work The Sopranos\"\n   \t,\"?season wdt:P179 ?episode . \", \"#the season that contains this episode\"\n   \t,\"?season wdt:P179 wd:Q2450569. }\", \"#the season is part of the first season\"\n   \t,\"FILTER NOT EXISTS { ?season wdt:P361 ?otherSeason. }\", \"#filter to ensure it's not a sub-part of another season\"\n   \t,\"ORDER BY ?episode\"\n  ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P4908 is season\nwd:Q5274359 is The Sopranos, season 1", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?episode WHERE { wd:Q5274359 wdt:P4908 ?season . ?season wdt:P360 ?episode }\"\n \t\t \t\t ]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8906 is season\nkg:9900 is The Sopranos, season 1", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:hasSeason kg:9900 .\"\n \t    \t\t]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?series1 ?series2 WHERE {\",\n    \"  wd:Q1538694 wdt:P179 ?series1 .\", \"># Battlestar Galactica (2003 series) as an example, replace with actual QID if needed\",\n    \"  wd:Q1538694 wdt:P179 ?series2 .\",\n    \"  ?series1 wdt:P1116 ?episodeCount1 .\", \"># Number of episodes property ID (P1116 is an example, replace with actual property ID)\",\n    \"  ?series2 wdt:P1116 ?episodeCount2 .\",\n    \"  FILTER (?episodeCount1 < ?episodeCount2) \",\n    \"}\"\n  ]\n}\n        "}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q237072 is Battlestar Galactica\nwdt:P1113 is number of episodes\nwd:Q2367132 is Battlestar Galactica\nwdt:P1113 is number of episodes", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?newSeries wdt:P1113 ?newEpisodes ; wdt:P3450 wd:Q237072 . }\",\n\t\t \t\t\t\"{ ?oldSeries wdt:P1113 ?oldEpisodes ; wdt:P3450 wd:Q2367132 . }\",\n\t\t \t\t\t\"?newEpisodes ?comparison ?oldEpisodes\"\n\t\t \t\t]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3093 is Battlestar Galactica\nkg:3046 is number of episodes\nkg:8797 is Battlestar Galactica\nkg:3046 is number of episodes", "response": "{\n  \"query\" : [\n    \"SELECT ?newSeriesEpisodes ?oldSeriesEpisodes WHERE {\",\n    \"  kg:8797 kg:3046 ?newSeriesEpisodes .\",\n    \"  kg:3093 kg:3046 ?oldSeriesEpisodes .\"\n    ]}\n  "}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P457 wd:Q836899. }\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P162 wd:Q72792 }\"\n \t\t \t\t ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3534 is instance of\nkg:9460 is film\nkg:9880 is producer\nkg:6697 is Hal Roach", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:9880 kg:6697 .\",\n\t\t    \t\t\"?x kg:3534 kg:9460 .\"\n\t\t    \t]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { wd:Q28516 wdt:P161 wd:Q93407 . wd:Q93407 wdt:P1056 ?actor }\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83495 is The Matrix\np:P161 is cast member\npq:P453 is character role\nwd:Q2085488 is Agent Smith\nps:P161 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?actor WHERE { wd:Q83495 ps:P161/?pq:P453/wd:Q2085488 . }\"\n \t]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3604 is The Matrix\nkg:8155 is cast member\nkg:5723 is character role\nkg:2878 is Agent Smith\nkg:8583 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:2878 kg:5723 ?resource . kg:resource kg:8155 kg:3604 }\"\n  \t    \t\t]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?party WHERE {\",\n    \"  ?party wdt:P31 wd:Q40897; \",\n    \"         wdt:P469 wd:Q25962; \",\n    \"         wdt:P426 ?position. \",\n    \"  ?position wikibase:directClaim wd:P469; \",\n    \"             schema:value ?value. \",\n    \"  FILTER (CONTAINS(?value, \\\"pro-European\\\") || CONTAINS(?value, \\\"pro-EU\\\")).\",\n    \"}\",\n    \"SERVICE <https://query.wikidata.org/sparql> { }\"\n  ]\n  }\n       \t\t\t\t\t\t\t\t\t  \t "}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7278 is political party\nwdt:P17 is country\nwd:Q41 is Greece\nwdt:P1142 is political ideology\nwd:Q3781399 is pro-Europeanism", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?party WHERE {\"\n     \t\t,\"?party wdt:P31 wd:Q7278 .\"\n     \t\t,\"?party wdt:P17 wd:Q41 .\"\n     \t\t,\"?party wdt:P1142 wd:Q3781399 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is instance of\nkg:9450 is political party\nkg:2994 is country\nkg:5177 is Greece\nkg:0782 is political ideology\nkg:4101 is pro-Europeanism", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 a kg:9450}\",\n      \t\t\t\"?x0 kg:0782 kg:4101\",\n      \t\t\t\"?x0 kg:5368 kg:5177\"\n      \t]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?bandleader WHERE {\",\n    \"  ?bandleader wdt:P3456 wd:Q201987 .\", \"><!-- P3456 is 'leader of music group', Q201987 is 'jazz band' as an example, adjust as necessary --><!-- Note: The exact property for bandleader might need to be adjusted based on the specific relationship in Wikidata. Also, the type of musical group should be specified correctly. If it's not a jazz band but another kind of music group, replace Q201987 with the appropriate item. -->\",\n    \"  ?bandleader wdt:P418 wd:Q15638 .\", \"><!-- P418 is 'instrument', Q15638 is 'trumpet' --><!-- This assumes that there's a direct property for being a bandleader and playing an instrument. If not, this might need to be adjusted based on the actual properties in Wikidata. -->\",\n    \"}\",\n    \"ORDER BY ?bandleader\"\n  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q806349 is bandleader\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?bandleader WHERE {\"\n \t\t  \t   \t\t,\"?bandleader wdt:P106 wd:Q806349 .\"\n \t\t  \t   \t\t,\"?bandleader wdt:P1303 wd:Q8338 .\"\n \t\t  \t\t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2407 is occupation\nkg:6431 is bandleader\nkg:4690 is instrument\nkg:9014 is trumpet", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{?X kg:2407/kg:6431/kg:4690/kg:9014 ?Y.}\"\n\t\t    \t  ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t   \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q2750936 ; wdt:P166 wd:Q486802 . }\"]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P30 is continent\nwdt:P361 is part of\nwd:Q2 is Earth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?mountain WHERE {\"\n     \t\t,\"?mountain wdt:P31 wd:Q8502 .\"\n     \t\t,\"?mountain wdt:P361* wd:Q2 .\"\n     \t\t,\"?mountain wdt:P2044 ?elevation .\"\n     \t\t,\"{ SELECT ?mountain (MAX(?elevation) AS ?maxElevation) WHERE {\"\n     \t\t,\"?mountain wdt:P31 wd:Q8502 .\"\n     \t\t,\"?mountain wdt:P361* wd:Q2 .\"\n     \t\t,\"?mountain wdt:P2044 ?elevation .\"\n     \t\t,\"} GROUP BY ?mountain ORDER BY DESC(?maxElevation) LIMIT 2 OFFSET 1\"\n     \t\t,\"}\"\n     \t\t,\"FILTER (?elevation = ?maxElevation)\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is instance of\nkg:6903 is subclass of\nkg:7953 is mountain\nkg:5532 is elevation above sea level\nkg:4491 is continent\nkg:7525 is part of\nkg:1867 is Earth", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?mountain WHERE {\",\n\t\t\t\"?mountain kg:0141 kg:7953 .\",\n\t\t\t\"?mountain kg:5532 ?elevation .\",\n\t\t\t\"?earth kg:7525 ?mountain .\",\n\t\t\t\"?earth kg:0141 kg:1867 .\",\n\t\t\t\"FILTER (?elevation < (8849))\" ,\n\t\t\t\"ORDER BY DESC(?elevation)\",\n\t\t\t\"LIMIT 1\"\n\t\t\t]}\n\t\t"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { \"\n \t  \t    \t \t,\"?city wdt:P31 wd:Q515; \" ,\"\\twikibase:snakgroup0/ps:P17 ?country; \" ,\"\\twikibase:snakgroup0/snom:P1084 ?population; \" ,\"\\twdt:P36 ?capital. \"\n \t  \t    \t \t,\"?country wdt:P361 wd:Q259. \"\n \t  \t    \t \t,\"FILTER (?city = ?capital). \"\n \t  \t    \t \t,\"{ SELECT ?city (MAX(?population) AS ?maxPopulation) WHERE { \" ,\"\\t?city wdt:P31 wd:Q515; \" ,\"\\twikibase:snakgroup0/ps:P17 ?country; \" ,\"\\twikibase:snakgroup0/snom:P1084 ?population. \" ,\"\\t?country wdt:P361 wd:Q259. \" ,\"\\tFILTER(?population != -1). \" ,\"\\tVALUES ?country { wd:Q259 }\" ,\"\\t} GROUP BY ?city \"\n \t  \t    \t \t,\"HAVING (COUNT(?capital) = 1) }\"\n \t  \t    \t \t,\"BIND(?city AS ?resource)}\"\n \t  \t    \t\t]}\n    \t\t \t\t \t\t\t "}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q79 is Egypt\nwdt:P1082 is population\nwd:Q79 is Egypt\nwdt:P36 is capital", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?city wdt:P31 wd:Q515. ?city wdt:P1082 ?population. ?city wdt:P17 wd:Q79. ?capital wdt:P36 wd:Q79.}\",\n     \t\t\"FILTER (?population >= (MAX(?maxPop)) && ?city = ?capital)\",\n     \t\t\"?maxPop = {SELECT MAX(?pop) WHERE {?city wdt:P31 wd:Q515. ?city wdt:P1082 ?pop. ?city wdt:P17 wd:Q79.}}\",\n     \t\t\"SERVICE wikibase:<http://wikiba.se/ontology#label> { bd:serviceParam wikibase:language \\\"en\\\". }\"\n     \t\t\t]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is instance of\nkg:5282 is city\nkg:2922 is country\nkg:1631 is Egypt\nkg:6034 is population\nkg:1631 is Egypt\nkg:6024 is capital", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"  kg:1631 kg:5282 ?largestCity .\",\n\t\t\t\"  kg:1631 kg:6024 ?capital .\",\n\t\t\t\"  FILTER(?largestCity = ?capital)\",\n\t\t\t\"  ?resource ?p ?q .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?rocket WHERE { ?launch wdt:P31 wd:Q26054; wdt:P973 ?rocket . }\"\n  ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q41291 is rocket\nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?rocket WHERE { ?launch wdt:P1427 wd:Q177477 . ?launch wdt:P31/wdt:P279* wd:Q41291 . ?launch wdt:P856 ?rocket }\"\n     \t\t ]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9918 is subclass of\nkg:8403 is rocket\nkg:3908 is start point\nkg:9674 is Baikonur Cosmodrome", "response": "{\n \t\t\"query\": [\n  \t\t\"{?x kg:3908 kg:9674}\",\n  \t\t\"?x kg:8403 ?y\"\n  \t]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { ?language wdt:P31 wd:Q207958. }\"\n  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q9143 is programming language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?language WHERE { ?language wdt:P31 wd:Q9143. }\"\n \t\t \t  ]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1662 is instance of\nkg:0743 is subclass of\nkg:6439 is programming language", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?language WHERE { ?language a kg:6439 }\"\n\t\t]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 ;\", \"># instance of human\",\n    \"         wdt:P106 wd:Q758499 ;\", \"># occupation chess player\",\n    \"         wdt:P19 ?birthPlace ;\", \"># place of birth\"\n   \t,\"         wdt:P20 ?deathPlace .\", \"># place of death\"\n   \t,\"  FILTER(?birthPlace = ?deathPlace) }\" ,\n    \"} LIMIT 100\"\n  ]\n \t}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P20 is place of death\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q10873124 is chess player", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n   \t\t\t,\"?resource wdt:P106 wd:Q10873124 .\"\n   \t\t\t,\"?resource wdt:P19 ?placeOfBirth .\"\n   \t\t\t,\"?resource wdt:P20 ?placeOfDeath .\"\n   \t\t\t,\"?placeOfBirth wdt:P625 ?coordinateOfBirth .\"\n   \t\t\t,\"?placeOfDeath wdt:P625 ?coordinateOfDeath .\"\n   \t\t\t,\"FILTER(?coordinateOfBirth = ?coordinateOfDeath)\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3982 is place of birth\nkg:3798 is place of death\nkg:1280 is occupation\nkg:0314 is subclass of\nkg:0871 is chess player", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?x kg:3982 ?y . ?x kg:3798 ?y . ?x kg:1280 kg:0871 .}\"\n  \t    \t\t]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?owner WHERE { wd:Q7490 wdt:P162 wd:?owner . }\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q380 is Meta Platforms\nwdt:P127 is owned by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?owner WHERE { wd:Q380 wdt:P127 ?owner . }\"\n    \t]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8912 is Meta Platforms\nkg:3251 is owned by", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?owner WHERE { kg:8912 kg:3251 ?owner . }\"\n \t]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P161 wd:Q50336. }\"\n  ]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?movie WHERE { ?movie wdt:P161 wd:Q37079. }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4878 is cast member\nkg:0773 is Tom Cruise", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4878 kg:0773\"\n\t\t    \t  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ ?state wdt:P625 ?location . ?fort wdtn:P17 ?state . ?fort rdfs:label ?label . FILTER (LANG(?label) = 'en') . FILTER (?label = 'Fort Knox')\"]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q983650 is Fort Knox\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q35657 is U.S. state", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?state WHERE { wd:Q983650 wdt:P131 ?state . ?state wdt:P31 wd:Q35657 }\"\n    \t]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2138 is Fort Knox\nkg:3236 is located in the administrative territorial entity\nkg:5211 is instance of\nkg:3368 is U.S. state", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?kg:2138 kg:3236 ?state}\",\n     \t\t\"?state kg:5211 kg:3368\"\n     \t\t ]\n}"}
{"question": "Which mountains are higher than the Nanga Parbat?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which mountains are higher than the Nanga Parbat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q47069;              \",\n    \"            wdt:P2044 ?height;                \",\n    \"            wdt:P1895 wd:Q1563;               \",\n    \"            wdt:P2045 ?nangaParbatHeight.     \",\n    \"  FILTER (?height > ?nangaParbatHeight)       \",\n    \"} ORDER BY DESC(?height)\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?bSide WHERE { ?song wdt:P348 wd:Q123 ; wdt:P6745 ?bSide . }\"\n  ]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"?work wdt:P175 wd:Q483407 ; p:P1433 ?statement .\"\n     \t\t,\"?statement pq:P2868 wd:Q13432985 .\"\n     \t\t]\n} "}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1681 is performer\nkg:6316 is Ramones\nkg:4288 is published in\nkg:4608 is subject has role\nkg:0022 is B-side", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:0022 kg:6316 .\"\n      \t  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t   \t\"query\": [\"$label\"] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t "}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53713 is Olof Palme\np:P570 is date of death", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"SELECT ?resource WHERE { wd:Q53713 p:P570 ?statement . ?statement ps:P570 ?resource }\"\n \t]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7630 is Olof Palme\nkg:4997 is date of death", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:7630 kg:4997 ?resource . }\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P31 wd:Q5 .\", \"># P31 is 'instance of', Q5 is human\",\n    \"  ?king wdt:P6 wp:P1374 .\", \"># P6 is a custom property to filter Roman kings, assuming there's a specific property for this purpose\",\n    \"  ?king wdt:P361 wd:Q28908 .\", \"># P361 is 'part of', Q28908 is Rome (city)\",\n    \"  ?king wdt:P1745 wd:Q7009 .\", \"># P1745 is 'reign end', Q7009 is Roman Kingdom\",\n    \"  FILTER (CONTAINS(LANG(?label), \\\"en\\\"))\",\n    \"} ORDER BY ?king\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q55375123 is King of Rome", "response": "{\n  \"query\" : [\n    \"SELECT ?king WHERE { ?king wdt:P39 wd:Q55375123. }\"\n  ]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is position held\nkg:5425 is King of Rome", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?king WHERE { ?king kg:9266 kg:5425 }\"\n\t\t]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t    \t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person \\nWHERE {\\n  ?person wdt:P19 wd:Q275; \\n          wdt:P569 ?birthDate;\\n          wdt:P20 wd:Q438;\\n          wdt:P570 ?deathDate.\\n}\\n\"]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwd:Q64 is Berlin\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin\nwdt:P19 is place of birth\nwd:Q1741 is Vienna\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin", "response": "{\n  \"query\" : [\n    \"SELECT ?person\",\n    \"{\",\n    \"  ?person wdt:P19 wd:Q1741 .\", \"># Born in Vienna (Q1741)\"\n   \t,\n    \"  ?person wdt:P20 wd:Q64 .\", \"># Died in Berlin (Q64)\"\n   \t,\n    \"}\"]\n} "}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4248 is Berlin\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin\nkg:6565 is place of birth\nkg:5207 is Vienna\nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\t\"?person kg:6565 kg:5207 .\", \"@comment: born in Vienna\",\n \t\t\t\"?person kg:4789 kg:4248 .\", \"@comment: died in Berlin\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"struct\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t\"nil\",\n  \t                \t"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12206942 is Darth Vader\nwdt:P40 is child\nwd:Q51746 is Luke Skywalker", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?father WHERE { wd:Q51746 wdt:P40 ?father . ?father rdfs:label \\\"Darth Vader\\\"@en. }\"\n     \t\t ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1984 is Darth Vader\nkg:1692 is child\nkg:5502 is Luke Skywalker", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:5502 kg:1692 ?resource . ?resource <http://example.org/hasParent> kg:1984 }\"\n \t]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?brewery WHERE {\",\n    \"  ?brewery wdt:P31 wd:Q24987;\",\n    \"           wdk:p571/wikibase:timeValue ?inceptionTime .\",\n    \"  FILTER (wdt:P17 ?brewery wd:Q94).\",\n    \"}\",\n    \"ORDER BY ?brewery\"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131734 is brewery\nwdt:P17 is country\nwd:Q408 is Australia", "response": "{\n  \"query\" : [\n    \"SELECT ?brewery WHERE {\",\n      \"?brewery wdt:P31 wd:Q131734 .\",\n      \"?brewery wdt:P17 wd:Q408 .\"\n   \t,\"} \"\n  ]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2155 is instance of\nkg:5909 is brewery\nkg:1368 is country\nkg:6518 is Australia", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:2155 kg:5909 .\",\n\t\t    \t\t\"?resource kg:1368 kg:6518 .\"\n\t\t    \t]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q21190. # directed by Steven Spielberg (Q21190)\",\n    \"  ?film wdt:P1565 ?budget. # production company budget in US dollars\",\n    \"  FILTER (?budget >= 80000000).\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q8877 is Steven Spielberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P2130 is cost", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?film WHERE {\"\n     \t\t,\"?film wdt:P31 wd:Q11424 .\"\n     \t\t,\"?film wdt:P162 wd:Q8877 .\"\n     \t\t,\"?film wdt:P2130 ?budget .\"\n     \t\t,\"FILTER (xsd:integer(?budget) >= 80000000)\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2377 is producer\nkg:7786 is Steven Spielberg\nkg:2955 is instance of\nkg:5774 is subclass of\nkg:1418 is film\nkg:0495 is cost", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:2377 kg:7786}\",\n      \t\t\"{?x kg:0495 ?y . ?y kg:2955 kg:1418 . ?y kg:5774 kg:1418 . FILTER (?y >= 80000000)}\"\n      \t]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q475698; \",\n    \"        wdt:P105 wd:Q9265225; \",\n    \"        wdt:P17 wd:Q13;\",\n    \"}\",\n    \"]\"\n  ]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P17 is country\nwd:Q29 is Spain", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?club WHERE {\",\n \t\t\t\"?club wdt:P31 wd:Q476028 .\",\n \t\t\t\"?club wdt:P17 wd:Q29 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1869 is instance of\nkg:7742 is association football club\nkg:9070 is country\nkg:2172 is Spain", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?var1 kg:1869 kg:7742 .\",\n\t\t    \t\t\"?var1 kg:9070 kg:2172\"\n\t\t    \t]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer WHERE { ?film wdt:P1699 wd:Q75842 ; wdt:P1303 ?producer . }\"\n  ]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q37876 is Natalie Portman\nwdt:P162 is producer", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?x wdt:P31 wd:Q11424 .\"\n     \t\t]\n     \t\t\t}\n     \t\t\t\t\t \t\t\t\t \t\t"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5819 is instance of\nkg:0320 is film\nkg:8271 is cast member\nkg:1332 is Natalie Portman\nkg:6761 is producer", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?producer WHERE {\",\n\t\t\t\" kg:1332 kg:8271 ?film .\",\n\t\t\t\"?film kg:5819 kg:0320 .\",\n\t\t\t\"?film kg:6761 ?producer .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?breed WHERE {\",\n    \"  ?breed wdt:P31 wd:Q43958; \",\n    \"         wdt:P172 wd:Q8320. }\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q38280 is German Shepherd\nwd:Q38280 is German Shepherd", "response": "{\n  \"query\" : [\n    \"SELECT ?breed WHERE { ?breed wdt:P279 wd:Q38280. }\"\n  ]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1311 is subclass of\nkg:3722 is German Shepherd\nkg:3722 is German Shepherd", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:1311 kg:3722\"\n\t\t    \t  ]\n}"}
{"question": "Who is the heaviest player of the Chicago Bulls?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the heaviest player of the Chicago Bulls?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE { ?player wdt:P31 wd:Q5 ; wdt:P509 wd:Q241187 . ?player wdt:P2069 ?weight } ORDER BY DESC(?weight) LIMIT 1\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q183 wdt:P30 ?country . ?country wdt:P36 ?language }\"\n  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?language WHERE { wd:Q191 wdt:P2936 ?language . }\"\n \t\t \t  ]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6317 is Estonia\nkg:3495 is language used", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?language WHERE { kg:6317 kg:3495 ?language . }\"\n \t]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 ; wdt:P2008 ?area . FILTER(MAX(?area)) } LIMIT 1\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3624078 is sovereign state\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?country WHERE {\"\n \t\t\t\t\t\t,\"?country wdt:P31 wd:Q3624078 .\"\n \t\t\t\t\t\t, \"?country wdt:P2046 ?area .\"\n \t\t\t\t\t\t, \"?largestCountry wdt:P2046 ?largestArea .\"\n \t\t\t\t\t\t, \"FILTER(?area <= ?largestArea)\"\n \t\t\t\t\t\t, \"{?country} MINUS {?largestCountry}\"\n \t\t\t\t\t\t,\"}\"\n \t\t \t\t\t]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5506 is instance of\nkg:9393 is subclass of\nkg:1310 is sovereign state\nkg:0702 is area", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n            \"?country kg:9393/kg:5506 kg:1310 .\",\n            \"?country kg:9393/kg:5506/kg:0702 ?area .\",\n            \"FILTER (isLiteral(?area) && !isURI(?area))\",\n\t\t\t\"ORDER BY DESC(xsd:float(?area))\",\n\t\t\t\"LIMIT 1\"\n\t\t]\n\t}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?city WHERE { ?city wdt:P31 wd:Q5154 ; wdt:P17 wd:Q30 ; wikibase:sitelink ?sitelink . SERVICE <https://query.wikidata.org/sparql> { SELECT ?city (COUNT(?pop) AS ?population) WHERE { ?city wdt:P31 wd:Q5154 ; wdt:P17 wd:Q30 ; wdt:P1082 ?pop } GROUP BY ?city ORDER BY DESC(?population) LIMIT 1 } }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q30 is United States of America\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?city WHERE {\"\n     \t\t\t,\"?city wdt:P31 wd:Q515 .\"\n     \t\t,\"?city wdt:P17 wd:Q30 .\"\n     \t\t,\"?city wdt:P1082 ?population .\"\n     \t\t,\"FILTER ( ?population = (SELECT MAX(?pop) WHERE { ?city1 wdt:P17 wd:Q30. ?city1 wdt:P1082 ?pop } ) )\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0643 is country\nkg:9284 is United States of America\nkg:3777 is instance of\nkg:9906 is subclass of\nkg:5230 is city\nkg:0522 is population", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?city kg:3777 kg:5230.\",\n      \t\t\"?city kg:0643 kg:9284.\",\n      \t\t\"?city kg:0522 ?population.\"\n      \t  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?pope ?popeLabel WHERE {\",\n\t\t \t\t\t\"?pope wdt:P31 wd:Q36180; \",\n\t\t \t\t\t\"wdt:P1492 wd:Q75835. \",\n\t\t \t\t\t\"SERVICE wikibase:<http://wikiba.se/ontology#label> { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t\t \t\t\t\"}\"\n\t\t \t\t]\n\t\t \t\t}\n\t\t \t\t\t\t\t\t\t\t\t  \t\t\t\t \t"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1471987 is Vatican Media\nwdt:P571 is inception\nwdt:P39 is position held\nwd:Q19546 is pope\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { \"\n     \t\t,\"?resource wdt:P39 wd:Q19546 .\"\n     \t\t,\"?resource wdt:P571 ?inception .\"\n     \t\t,\"wd:Q1471987 wdt:P39 ?resource .\"\n     \t\t,\"OPTIONAL { ?resource pq:P580 ?starttime } . \"\n     \t\t,\"OPTIONAL { ?resource pq:P582 ?endtime } . \"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4965 is Vatican Media\nkg:9396 is inception\nkg:5157 is position held\nkg:4968 is pope\nkg:9086 is position held\nkg:2915 is position held\nkg:4968 is pope\nkg:3118 is start time\nkg:1891 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"?entity kg:5157 kg:4965 .\",\n\t\t \t\t\t\"?entity kg:3118 ?startTime .\",\n\t\t \t\t\t\"?entity kg:1891 ?endTime .\",\n\t\t \t\t\t\"?entity kg:9086 kg:4968\"\n\t\t \t\t]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?discovery WHERE { ?discovery wdt:P31 wd:Q1874 ; wdt:P62 wd:Q27344 . }\"\n  ]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q596 is Ceres\nwdt:P61 is discoverer or inventor", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?discoverer WHERE { wd:Q596 wdt:P61 ?discoverer . }\"\n \t]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0356 is Ceres\nkg:8941 is discoverer or inventor", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?x WHERE { kg:0356 kg:8941 ?x }\"\n \t]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?king WHERE { ?king wdt:P39 wd:Q786 }\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55 is Netherlands\nwdt:P35 is head of state\nwdt:P39 is position held\nwd:Q2045066 is King of the Netherlands", "response": "{\n  \"query\" : [\n    \"SELECT ?king WHERE { wd:Q55 wdt:P35 ?king . }\"\n  ]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7804 is Netherlands\nkg:9773 is head of state\nkg:8977 is position held\nkg:8219 is King of the Netherlands", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:7804 kg:8977 ?resource . FILTER(?resource = kg:8219) }\"\n \t  \t    ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { wd:Q7864 wdt:P31 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q134041 is cola\nwdt:P279 is subclass of\nwd:Q40050 is drink", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q134041 wdt:P279* ?resource . FILTER(?resource = wd:Q40050) }\"\n \t\t \t\t ]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3198 is cola\nkg:1933 is subclass of\nkg:6616 is drink", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?cola kg:1933 kg:6616\"\n      \t]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?university\\nWHERE {\\nwd:Q9142 wdt:P69 ?university.\\n}\"]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?university WHERE {\"\n     \t\t,\"wd:Q567 wdt:P30 wd:Q4110 .\"\n     \t\t,\"wd:Q567 wdt:P69 ?university.\"\n     \t\t,\"?university wdt:P31 wd:Q3918.\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5316 is Angela Merkel\nkg:7545 is educated at\nkg:7553 is instance of\nkg:6836 is subclass of\nkg:2365 is university", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x ?y <kg:5316> .\",\n     \t\t\"?x <kg:7545> ?z .\",\n     \t\t\"?z <kg:7553> <kg:2365>\"\n    \t]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { \",\n      \"?work wdt:P31 wd:Q571 ;\", \"# Instance of 'written work'\",\n      \"wd:Q204896 wdt:P50 ?author . }\", \">#Piliers de la terre written by ?author\"\n    ]}\n    \t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is The Pillars of the Earth\nkg:5137 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?author WHERE { kg:0606 kg:5137 ?author }\"\n \t  \t \t\t]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?airport WHERE { ?airline wdt:P31 wd:Q7895 ; wdt:P642 ?airport . }\"\n  \t\t\t\t\t]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1480118 is Yeti Airlines\nwdt:P113 is airline hub", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?airport WHERE { wd:Q1480118 wdt:P113 ?airport . }\"\n \t\t \t\t\t]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2721 is Yeti Airlines\nkg:4798 is airline hub", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?airport WHERE { kg:2721 <http://example.com/serves> ?airport . }\"\n \t  \t    ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?birthplace WHERE { wd:Q173 wdt:P19 ?birthplace . }\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5879 is Johann Wolfgang von Goethe\nwdt:P19 is place of birth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?birthplace WHERE { wd:Q5879 wdt:P19 ?birthplace . }\"\n    \t]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8492 is Johann Wolfgang von Goethe\nkg:1815 is place of birth", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:8492 kg:1815 ?resource . }\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?crisis ?invasion WHERE {\",\n \t\t  \t\t\"?crisis wdt:P31 wd:Q5072 ;\", \">// instance of military incident/crisis\",\n \t\t  \t\t\"wdt:P1364 wd:Q187959 ;\", \">// Cuban Missile Crisis\"\n \t\t  \t\t,\"?invasion wdt:P31 wd:Q5072 ;\", \">// instance of military incident/invasion\",\n \t\t  \t\t\"wdt:P1364 wd:Q15669 .}\", \">// Bay of Pigs Invasion\"\n \t\t  \t\t]\n} "}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128160 is Cuban Missile Crisis\nwdt:P582 is end time\nwd:Q191721 is Bay of Pigs invasion\nwdt:P580 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?crisis ?invasion WHERE {\"\n     \t\t\t,\"wd:Q128160 wdt:P580 ?crisisStart .\"\n     \t\t\t,\"wd:Q191721 wdt:P580 ?invasionStart .\"\n     \t\t\t,\"FILTER (?crisisStart < ?invasionStart)\"\n     \t\t,\"}\" ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is Cuban Missile Crisis\nkg:0497 is end time\nkg:0984 is Bay of Pigs invasion\nkg:5449 is start time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?crisis_start ?bay_of_pigs_end WHERE {\",\n \t\t\t\"?crisis rdf:type kg:6047 .\",\n \t\t\t\"?crisis kgi:start_time ?crisis_start .\",\n \t\t\t\"?invasion rdf:type kg:0984 .\",\n \t\t\t\"?invasion kgi:end_time ?bay_of_pigs_end .\"\n \t\t,\"}\"]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"  ?recipe wdt:P31 wd:Q1287495 ;\", \"># recipe instance of food recipe\",\n    \"         wdt:P179 wd:Q206529 .\", \"># has ingredient\"\n   \t,\n    \"  ?ingredient p:P179 [ ps:P179 wd:Q206529 ; pqv:[] ] .\", \"># the ingredient of carrot cake\",\n    \"}\",\n    \"LIMIT 10\" ]\n  }\n      "}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q656071 is carrot cake\nwdt:P527 is has part(s)", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?item wdt:P527 wd:Q656071. }\"\n\t\t \t\t]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4040 is carrot cake\nkg:6712 is has part(s)", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x ?y kg:4040.\"\n   \t\t\t \t\t]\n   \t\t \t\t}\n   \t\t \t \t\t\t\t\t\t      "}
{"question": "Who created Wikipedia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?creator WHERE { wd:Q25070 ?p ?creator . }\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P112 is founded by", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?founder WHERE {\\nwd:Q52 wdt:P112 ?founder.\\n}\"]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2440 is Wikipedia\nkg:0699 is founded by", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:0699 kg:2440 .\"\n\t\t    \t]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q7890 wdt:P30 $x . $x wdt:P344 $y\"] }\n    \t\t\t\t\t\t\t\t  \t \t"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P131 is located in the administrative territorial entity\nwd:Q1202 is Saxony\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?mountain WHERE {\"\n     \t\t,\"?mountain wdt:P31 wd:Q8502 .\"\n     \t\t,\"?mountain wdt:P131 wd:Q1202 .\"\n     \t\t,\"?mountain wdt:P2044 ?height.\"\n     \t\t,\"?highest filter(?highest < ?height) { SELECT ?mountain (MAX(?height) as ?highest) WHERE {\"\n     \t\t,\"?mountain wdt:P31 wd:Q8502 .\"\n     \t\t,\"?mountain wdt:P131 wd:Q1202 .\"\n     \t\t,\"?mountain wdt:P2044 ?height.\"\n     \t\t,\"} GROUP BY ?mountain }\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8166 is instance of\nkg:8572 is mountain\nkg:6404 is located in the administrative territorial entity\nkg:7885 is Saxony\nkg:5619 is elevation above sea level", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource a kg:8572 .\", \"># kg:8572 is mountain\",\n \t\t\"?resource kg:6404 kg:7885 .\", \"># kg:6404 is located in the administrative territorial entity, kg:7885 is Saxony\",\n \t\t\"?resource kg:5619 ?maxElevation .\", \"># kg:5619 is elevation above sea level\",\n \t\t\"FILTER ( ?maxElevation = (SELECT MAX(?elevation) WHERE {\",\n \t\t\"?mountain a kg:8572 .\",\n \t\t\"?mountain kg:6404 kg:7885 .\",\n \t\t\"?mountain kg:5619 ?elevation .\",\n \t\t\"}))\",\n \t\t\"}\"\n \t]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ ?country wdt:P31 wd:Q6256; wdt:P17 ?country.\"]\n \t\t\t\t\t\t\t\t\t\t \t}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t "}
{"question": "In which country is Mecca located?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5806 is Mecca\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE { wd:Q5806 wdt:P131* ?administrativeEntity . ?administrativeEntity wdt:P31+ wd:Q6256. }\"\n     \t\t\t]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9593 is Mecca\nkg:2857 is located in the administrative territorial entity\nkg:3525 is instance of\nkg:9937 is country", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?country WHERE { kg:9593 kg:2857 ?country . kg:9937 rdf:type ?country }\"\n \t]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { \",\n      \"?actor p:P106/ps:P106 wd:Q28389|wd:Q75417; \",\n      \"p:P161/ps:P161/wd:Q2119779. \"\n   \t]}\n \t\t"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5620660 is Gus Fring\npq:P453 is character role\nps:P161 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?actor WHERE { wd:Q5620660 pq:P453 ?role . ?role ps:P161 ?actor }\"\n    \t]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3702 is Gus Fring\nkg:1248 is character role\nkg:8170 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:3702 kg:1248 ?resource . ?resource kg:8170 ?actor }\"\n \t              ]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?startCountry WHERE {\\n  wd:Q40 wdt:P138 ?startRiver .\\n  ?startRiver wdt:P625 ?coordinate .\\n  ?startRiver wdt:P17 ?startCountry .\\n}\\n\"]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3392 is Nile\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?startPoint WHERE { wd:Q3392 wdt:P885 ?startPoint . }\"\n    \t]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0768 is Nile\nkg:2584 is origin of the watercourse\nkg:0470 is country", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?startCountry WHERE { kg:0768 kg:2584 ?startCountry . ?startCountry rdf:type kg:0470 }\"\n\t\t]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?stadium WHERE { ?stadium wdt:P31 wd:Q20548967 ; p:P131 ?statement . ?statement ps:P131 wd:Q130068 . } LIMIT 1\"\n  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q483110 is stadium\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q483110 is stadium\nwdt:P17 is country\nwd:Q29 is Spain\nwdt:P1083 is maximum capacity", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P31 wd:Q483110 . ?item wdt:P17 wd:Q29 . ?item wdt:P1083 ?capacity . } ORDER BY DESC(?capacity) LIMIT 1\"\n \t\t \t  ]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3639 is instance of\nkg:6981 is stadium\nkg:3639 is instance of\nkg:3018 is subclass of\nkg:6981 is stadium\nkg:4997 is country\nkg:8158 is Spain\nkg:4254 is maximum capacity", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?stadium WHERE {\",\n \t\t\"  kg:8158 kg:3018 ?country .\",\n \t\t\"  ?stadium kg:6981 ?instance .\",\n \t\t\"  ?stadium kg:4254 ?capacity .\",\n \t\t\"  FILTER(?country = kg:4997) \",\n \t\t\"} ORDER BY DESC(?capacity) LIMIT 1\"\n \t]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"structural\",\n  \t                \t\":[-358-1-20--3s-4e--2e---W-2e-4e-6e-],\"\n  \t                \t]}\n  \t                \t"}
{"question": "How large is the area of UK?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q145 is United Kingdom\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?area WHERE { wd:Q145 wdt:P2046 ?area . }\"\n  \t    \t\t]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0895 is United Kingdom\nkg:6864 is area", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"?entity kg:6864 ?area .\",\n       \t\t\"?entity owl:sameAs kg:0895 .\"\n    \t]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?creator WHERE { ?batman wdt:P31 wd:Q83450. ?batman wdt:P178 ?creator. }\"\n  ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P170 is creator", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?creator WHERE { wd:Q2695156 wdt:P170 ?creator . }\"\n \t\t \t\t ]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4262 is Batman\nkg:4214 is creator", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?creator WHERE { kg:4262 kg:4214 ?creator }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { wd:Q68 P1067 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9215 is Sigmund Freud\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q9215 wdt:P26 ?resource . }\"\n    \t]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0071 is Sigmund Freud\nkg:1379 is spouse", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:1379 kg:0071 .\"\n\t\t    \t]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?developer WHERE { ?dbpedia wd:Q25167904 <http://www.wikidata.org/prop/direct/P710> ?developer . }\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q465 is DBpedia\nwdt:P112 is founded by", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?developer WHERE {\\nwd:Q465 wdt:P112 ?developer.\\n}\"]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is DBpedia\nkg:9957 is founded by", "response": "{\n \t    \t\t\"query\" : [\n                \"SELECT ?developers WHERE { kg:0141 kg:9957 ?developers . }\"\n            ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P345 wd:Q2897. }\"\n  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q56094 is Francis Ford Coppola", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?movie\",\n \t  \t\t\"WHERE {\",\n \t  \t\t\" wd:Q56094 wdt:P57 ?movie .\",\n \t  \t\t\"?movie wdt:P31 wd:Q11424 .\",\n \t  \t\t\"}\"\n \t\t \t  ]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4264 is instance of\nkg:1346 is subclass of\nkg:9775 is film\nkg:2196 is director\nkg:2738 is Francis Ford Coppola", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"{?x0 kg:2196 kg:2738}\",\n\t\t    \t\t\"?x0 kg:1346 kg:9775\"\n\t\t    \t]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q165872 rdfs:subClassOf* wd:Q43229 }\"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53696 is Hylidae\nwdt:P171 is parent taxon\nwd:Q10908 is Amphibia", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q53696 wdt:P171* wd:Q10908 }\"\n    \t]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4906 is Hylidae\nkg:8693 is parent taxon\nkg:5304 is Amphibia", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:4906 kg:8693 kg:5304 . }\"\n \t]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?location WHERE { wd:Q84 wikibase:directClaim <http://www.wikidata.org/prop/direct/P131> . wd:Q84 wdt:P131 ?location }\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q62408 is Palace of Westminster\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?location WHERE { wd:Q62408 wdt:P131 ?location . }\"\n\t\t \t\t]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3314 is Palace of Westminster\nkg:3899 is located in the administrative territorial entity", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?location WHERE { kg:3314 kg:3899 ?location . }\"\n \t]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?elevation WHERE { wd:Q1065492 p:P2044 ?statement . ?statement ps:P2044 ?elevation }\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q58226 is Düsseldorf Airport\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?elevation WHERE { wd:Q58226 wdt:P2044 ?elevation . }\"\n \t\t \t\t ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is Düsseldorf Airport\nkg:7050 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?kg:3463 kg:7050 ?elevation.\"\n \t  \t    ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE { wd:Q7892 wdt:P1082 ?population . }\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1489 is Mexico City\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?population WHERE { wd:Q1489 wdt:P1082 ?population . }\"\n\t\t \t\t]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8330 is Mexico City\nkg:3405 is population", "response": "{\n \t\"query\" : [\n  \t\t\"SELECT ?population WHERE { kg:8330 kg:3405 ?population . }\"\n  \t]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?date WHERE { wd:Q307 wdt:P569 ?date . }\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q200686 is French Fifth Republic\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?resource WHERE { wd:Q200686 wdt:P571 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0429 is French Fifth Republic\nkg:8176 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?entity kg:8176 kg:0429 .\"\n      \t  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?king WHERE { ?king wdt:P361 wd:Q42889 ; wdt:P35 wd:Q7003 . }\"\n  ]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q18810062 is monarch of England\np:P39 is position held\npq:P580 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { ?resource wdt:P39 wd:Q18810062. }\"\n    \t]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9064 is position held\nkg:5324 is monarch of England\nkg:4854 is position held\nkg:6181 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { ?entity kg:9064 kg:5324 . ?entity kg:4854 ?resource . ?entity kg:6181 ?startTime } ORDER BY ?startTime LIMIT 1\"\n  \t    \t\t]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$prefixes\\nSELECT ?editor WHERE {\\n?forbes wdt:P31 wd:Q405948; wdt:P108 ?editor.\\n}\",\n \t\t\t\t\t\t\t\t\t\t \t\"params\\\": {}  ]  }  -> Translated directly into a SPARQL query without the wrapper structure as requested, here is the query you need for Wikidata:\\n\\n```\\nPREFIX wd: <http://www.wikidata.org/entity/>\\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\\nSELECT ?editor \\nWHERE {\\n  wd:Q405948 wdt:P108 ?editor.\\n}\\n```<|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|><|im_start|>"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P98 is editor", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?editor WHERE { wd:Q25161472 wdt:P98 ?editor . }\"\n \t\t \t\t ]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4567 is Forbes\nkg:7693 is editor", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:hasEditor ?y .\",\n\t\t    \t\t\t\"?y rdf:type kg:7693 .\",\n\t\t    \t\t\t\"?x rdf:type kg:4567\"\n\t\t    \t\t]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?award WHERE { wd:Q158692 wikibase:claim <http://wikiba.se/ontology#P161> . wd:Q158692 <http://wikiba.se/ontology#P161> ?award . }\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q319308 is Douglas Hofstadtesr\nwdt:P166 is award received", "response": "{\n  \"query\" : [\n    \"SELECT ?award WHERE { wd:Q319308 wdt:P166 ?award. }\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8441 is Douglas Hofstadtesr\nkg:7848 is award received", "response": "{\n  \"query\" : [\n    \"SELECT ?award WHERE { kg:8441 kg:7848 ?award . }\"\n  ]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE { ?player wdt:P31 wd:Q5 .\"\n      ]\n} "}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q18574233 is darts player\nwdt:P569 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?player WHERE {\"\n \t\t  \t   \t\t,\"?player wdt:P106 wd:Q18574233 .\"\n \t\t  \t   \t\t,\"?player wdt:P569 ?dob .\"\n \t\t  \t   \t\t,\"FILTER NOT EXISTS {?player wdt:P570 ?deathDate}\"\n \t\t  \t\t,\"} ORDER BY ASC(?dob) LIMIT 1\"\n \t  \t\t]}\n    \t\t\t \t\t\t\t\t\t\t\t\t  "}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9867 is occupation\nkg:7203 is darts player\nkg:4047 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { ?resource kg:9867 kg:7203. ?resource kg:4047 ?dob . } ORDER BY ASC(?dob) LIMIT 1\"\n \t  \t\t\t\t]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?sport WHERE {\\nwd:Q296 wdt:P31 ?sport.\\n?sport rdfs:label \\\"sport\\\"@en.\\n}\"]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187916 is horse racing\nwdt:P279 is subclass of\nwd:Q349 is sport", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?sport WHERE { wd:Q187916 wdt:P279* wd:Q349 . }\"\n \t\t \t\t ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2533 is horse racing\nkg:7442 is subclass of\nkg:8983 is sport", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?res kg:7442 kg:2533 .\",\n\t\t    \t\t\t\"?res kg:7442 kg:8983\"\n\t\t\t   ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?river WHERE { wd:Q2567 wdt:P149 ?brooklyn_bridge . ?brooklyn_bridge wdt:P148 ?river }\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P177 is crosses", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?river WHERE { wd:Q125006 wdt:P177 ?river . }\"\n  \t    \t\t]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3474 is Brooklyn Bridge\nkg:2218 is crosses", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:2218 kg:3474\"\n\t\t    \t]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?population WHERE { wd:Q380 wiki:data176 ?population . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q36 is Poland\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?population WHERE { wd:Q36 wdt:P1082 ?population . }\"\n \t\t \t  ]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5126 is Poland\nkg:4536 is population", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?population WHERE { kg:5126 kg:4536 ?population . }\"\n \t]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?episode WHERE { ?series wdt:P179 wd:Q208584 ; wdt:P179 ?seriesStatement . ?seriesStatement psv:P179 wd:Q208584 ; pqv:P582 ?lastAiredDate . ?episode wdt:P179 ?series ; wdt:P364 ?lastAiredDate }\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79784 is Friends\nwdt:P582 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?resource WHERE { wd:Q79784 wdt:P582 ?resource . }\"\n\t\t \t\t]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3659 is Friends\nkg:4666 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?endTime WHERE { <http://kg.example/resource/3659> <http://kg.example/property/end_time> ?endTime . }\"\n   \t\t \t\t\t]\n}"}
{"question": "Is the wife of president Obama called Michelle?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is the wife of president Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q41769 wdt:P26 ?resource.\\n}\\n\"]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?president WHERE { ?president wdt:P30 (Q44) ; wdt:P35 wd:Qn , wd:Qnn . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n} "}
{"question": "Who is 8th president of US?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30 is United States of America\np:P6 is head of government\npq:P580 is start time\nps:P6 is head of government", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?resource WHERE { wd:Q30 wdt:P6 ?resource . ?resource wdt:P34 wd:Q80 } LIMIT 1 OFFSET 7\"\n  \t\t]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7329 is United States of America\nkg:8425 is head of government\nkg:0279 is start time\nkg:3879 is head of government", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8425 kg:0279 ?resource . }\"\n \t]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?population WHERE { wd:Q28883 wdt:P1082 ?population . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?population WHERE { wd:Q458 wdt:P1082 ?population . }\"\n  \t    \t\t]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is European Union\nkg:6799 is population", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?resource kg:6799 ?population .\" ,\n      \t\t \"?resource owl:sameAs kg:0953 .\"\n       ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?launchpad WHERE { ?launchpad wdt:P31 wd:Q2695804 ; wdt:P479 wd:Q186 . }\"\n  ]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q194188 is spaceport\nwdt:P137 is operator\nwd:Q23548 is National Aeronautics and Space Administration", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?launchpad WHERE { ?launchpad wdt:P31 wd:Q194188. ?launchpad wdt:P137 wd:Q23548. }\"\n \t]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is instance of\nkg:9497 is spaceport\nkg:1707 is operator\nkg:0090 is National Aeronautics and Space Administration", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?launchpad WHERE {\",\n            \"?launchpad kg:8521 kg:9497 .\",\n            \"?launchpad kg:1707 kg:0090 .}\",\n\t\t\t\"LIMIT 10\"\n\t\t]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?developer WHERE {\\n  wd:Q8362 wdt:P1417 ?developer.\\n}\"\n]}\n\t\t\t \t\t"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131007 is World of Warcraft\nwdt:P178 is developer", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?developer WHERE { wd:Q131007 wdt:P178 ?developer . }\"\n \t\t \t\t\t]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4175 is World of Warcraft\nkg:2911 is developer", "response": "{\n \t\t\"query\": [\n\t\t\t\"?developer kg:2911 kg:4175\"\n\t\t]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label = \"]} "}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23215 is Adele\nwdt:P1477 is birth name", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$entity:Adele\", \"wdt:P1477\"]\n} "}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8007 is Adele\nkg:3664 is birth name", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?resource \\nWHERE {\\n   kg:8007 kg:3664 ?resource .\\n}\"]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q84\", \"?population\"]\n \t\t\t\t\t\t\t\t\t  \t\t}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85 is Cairo\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?population WHERE { wd:Q85 wdt:P1082 ?population . }\"\n \t\t \t  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4167 is Cairo\nkg:8338 is population", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?population WHERE { kg:4167 kg:8338 ?population . }\"\n  \t    \t\t]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 ; wdt:P570 ?death . }\"\n  ]\n}\n\t\t\t\t\t\t\t      \t\t\t \t  "}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P570 is date of death", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nASK WHERE { wd:Q7934 wdt:P570 ?deathDate. }\"]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6191 is Frank Herbert\nkg:7183 is date of death", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:6191 kg:7183 ?resource . }\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { ?author wdt:P106 wd:Q249862 ; wdt:P50 wd:Q76114 ; wikibase:sitelink \\\"Dan_Brown\\\" . ?work wdt:P50 wd:Q76114 ; wdt:P31 wd:Q571 ; p:P582 ?statement . ?statement ps:P582 ?date . FILTER (STR(?date) != '') } ORDER BY DESC(xsd:dateTime(?date)) LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q7345 is Dan Brown\nwdt:P577 is publication date", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q7345 wdt:P50 ?author . ?work wdt:P50 wd:Q7345. ?work wdt:P577 ?date. FILTER(LANG(?work)=\\\"en\\\"). } ORDER BY DESC(xsd:dateTime(?date)) LIMIT 1\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8899 is author\nkg:6077 is Dan Brown\nkg:9624 is publication date", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { kg:6077 kg:8899 ?work . ?work kg:9624 ?date . FILTER (STRAFTER(str(?work), \\\"literature/work/\\\")) } ORDER BY DESC(xsd:dateTime(?date)) LIMIT 1\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?university WHERE { wd:Q2479638 p:P1716 ?statement . ?statement ps:P1716 ?university . }\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwdt:P276 is location\nwdt:P131 is located in the administrative territorial entity\nwd:Q41085 is Sungkyunkwan University", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q41085 wdt:P17|wdt:P276|wdt:P131 ?resource . }\"\n     \t\t ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0470 is country\nkg:8946 is location\nkg:2192 is located in the administrative territorial entity\nkg:9035 is Sungkyunkwan University", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:9035 kg:2192 ?resource . }\"\n \t]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { ?book wdt:P31 wd:Q571 ; wdt:P89 ?author . }\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q726382 is Die Traumdeutung\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?author WHERE { wd:Q726382 wdt:P50 ?author . }\"\n    \t]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1167 is Die Traumdeutung\nkg:3300 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?author WHERE { kg:1167 kg:3300 ?author }\"\n \t  \t    ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?death WHERE { wd:Q80 wikibase:statements ?death . ?death p:P570 ?statement . }\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q692 is William Shakespeare\nwdt:P570 is date of death", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?death WHERE {\\nwd:Q692 wdt:P570 ?death .\\n}\"]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5991 is William Shakespeare\nkg:8176 is date of death", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\\n\\nSELECT ?deathDate WHERE {\\n\\tkg:5991 kg:8176 ?deathDate.\\n}\"]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?developer WHERE { wd:Q26097485 wdt:P178 ?developer . }\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1056 is product or material produced or service provided\nwd:Q17130715 is Slack", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?developer WHERE { wd:Q17130715 wdt:P1056 ?developer . }\"\n    \t]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0014 is product or material produced or service provided\nkg:0492 is Slack", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"?kg_0014 kg:0492 ?kg_object .\"\n\t\t \t\t]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?birthYear WHERE { wd:Q209467 wdt:P361 ?person . ?person wdt:P569 ?birthDate . BIND(YEAR(?birthDate) AS ?birthYear) }\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth", "response": "{\n  \"query\" : [\n    \"SELECT ?birthYear WHERE { wd:Q241665 wdt:P569 ?dob . BIND(YEAR(xsd:dateTime(?dob)) AS ?birthYear) }\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Rachel Stevens\nkg:8397 is date of birth", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:8473 kg:8397 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?marriageCount WHERE {\",\n    \"  ?person wdt:P22 wd:Q7584 .\",\n    \"  ?person wikibase:directClaim wd:P1960 .\",\n    \"  ?person rdfs:label ?name FILTER (LANG(?name) = 'en') .\",\n    \"  ?person p:P1960 ?statement .\",\n    \"  ?statement ps:P1960 ?spouse .\",\n    \"  ?statement pq:P1438 ?marriageEvent .\",\n    \"  ?marriageEvent wdt:P2957 ?count .\",\n    \"  FILTER (?name = 'Jane Fonda')\",\n    \"  BIND(?count AS ?marriageCount)\",\n    \"}\",\n    \"GROUP BY ?marriageCount\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41142 is Jane Fonda\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?marriageCount WHERE {\"\n     \t\t,\" wd:Q41142 wdt:P26 ?spouse .\"\n     \t\t,\" ?spouse wdt:P26 wd:Q41142 .\"\n     \t\t,\"}\"\n     \t\t,\"GROUP BY ?marriageCount\"]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3295 is Jane Fonda\nkg:1321 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:3295 kg:1321 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was the wife of president Lincoln called Mary?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was the wife of president Lincoln called Mary?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"structural\",\n  \t            \t\t\"SELECT ?resource \",\n  \t            \t\t\"WHERE { \",\n  \t              \t\t\t\"?resource rdfs:label \\\"Mary Lincoln\\\"@en. \",\n  \t              \t\t\t\"OPTIONAL {?resource wdt:P106 wd:Q3247895}. \"\n  \t            \t\t\t,\"?resource wdk:P26 ?president.\",\n  \t            \t\t\t\"?president wdk:P31 wd:Q1008.\"\n  \t            \t\t,\"}\"\n  \t            \t]\n} "}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q6507 wdt:P1082 ?language . }\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8038 is GIMP\nwdt:P277 is programmed in", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?language WHERE { wd:Q8038 wdt:P277 ?language . }\"\n\t\t \t\t]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6582 is GIMP\nkg:7415 is programmed in", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?language WHERE { kg:6582 kg:7415 ?language . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?university WHERE { wd:Q650894 wdt:P646 ?studyLocation . ?university wdt:P1713 ?studyLocation }\"\n  ]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3918 is university\nwd:Q875538 is public university\nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n     \"SELECT ?university WHERE { wd:Q567 wdt:P69 ?university . }\"\n]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5654 is university\nkg:4459 is public university\nkg:0182 is Angela Merkel\nkg:0579 is educated at\nkg:4931 is instance of", "response": "{\n \t\t\t \t    \t\t\t\t\t\t\t\"query\": [\n  \t\t\"SELECT ?university WHERE { kg:0182 kg:0579 ?university . }\"\n  \t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?musical WHERE {\",\n      \"?musical wdt:P31 wd:Q24981.;\",\n      \"?musical wdt:P86 wd:Q50337.}\",\n      \"ORDER BY ?musical\"\n  ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q58483083 is dramatico-musical work\nwdt:P86 is composer\nwd:Q2808 is Elton John", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?musical WHERE { \"\n     \t\t,\"?musical wdt:P31 wd:Q58483083 .\"\n     \t\t,\"?musical wdt:P86 wd:Q2808 .\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9424 is instance of\nkg:1957 is subclass of\nkg:3671 is dramatico-musical work\nkg:9607 is composer\nkg:2686 is Elton John", "response": "{\n \t\t\"query\": [\n    \t\t\"{ ?resource kg:9607 kg:2686 . }\",\n    \t\t\"?resource kg:1957 kg:3671 .\"\n  \t\t]\n}"}
{"question": "What is the longest river in the world?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the longest river in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 ; wdt:P625 ?coordinate . } ORDER BY DESC (wdt:P421) LIMIT 1\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\" : [\n \t  \t\t\"SELECT ?birth WHERE { wd:Q1687 wdt:P569 ?birth . }\"\n \t\t\t\t\t\t\t\t\t  \t \t]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11806 is John Adams\nwdt:P569 is date of birth", "response": "{\n  \"query\" : [\n    \"SELECT ?birth WHERE { wd:Q11806 wdt:P569 ?birth . }\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5247 is John Adams\nkg:0188 is date of birth", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:0188 kg:5247 .\"\n\t\t    \t  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?company WHERE { ?company wdt:P31 wd:Q47958; wdt:P106 wd:Q26090877. }\"\n  ]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q185757 is hovercraft\nwdt:P176 is manufacturer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P31/wdt:P279 wd:Q185757. ?item wdt:P176 ?manufacturer. SERVICE wikibaseInsnardatatypeUrlQuery { bd:serviceParam wikibase:datavalueType wd:Q832. } ?manufacturer wikibase:alias ?result . }\"\n     \t\t\t]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8283 is instance of\nkg:6744 is subclass of\nkg:6957 is hovercraft\nkg:1305 is manufacturer", "response": "{\n \t\t\"query\": [\n    \t\t\"?manufacturer ?instanceOf kg:1305 .\",\n    \t\t\"?hovercraft ?subclassOf kg:6957 .\",\n    \t\t\"?hovercraft ?producedBy ?manufacturer .\"\n    \t]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$prefixes SELECT ?wife WHERE { wd:Q8326 wdt:P26 ?wife . }\"] }\n     \t\t\t\t\t\t\t\t\t\t  \t"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?wife WHERE { wd:Q91 wdt:P26 ?wife . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1470 is Abraham Lincoln\nkg:1740 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?x kg:1740 kg:1470 .\"\n \t  \t    ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?species WHERE { wd:Q184 wdt:P105 ?species . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7378 is elephant\nwdt:P279 is subclass of", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q7378 wdt:P279* ?resource . }\"\n \t\t \t  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5477 is elephant\nkg:6250 is subclass of", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:5477 kg:6250 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?population WHERE { wd:Q16 Canberra wikibase:statements ?statement . ?statement pq:P1082 ?population }\"\n  ]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q408 is Australia\nwdt:P36 is capital\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?population WHERE { wd:Q408 wdt:P36 ?capital . ?capital wdt:P1082 ?population }\"\n    \t]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1226 is Australia\nkg:4676 is capital\nkg:8292 is population", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?capital kg:4676 kg:1226 .\",\n\t\t    \t\t\t\"?capital kg:8292 ?population .\"\n\t\t    \t\t]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?empire WHERE {\\n  ?empire wdt:P361 wd:Q170842 ; # part of the instance of ancient empires\\n  ?currency wdt:P3015 wd:Q962 . # currency used is cocoa beans\\n}\\n\"]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q208008 is cocoa bean", "response": "{\n \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE { ?entity wdt:P38 wd:Q208008. BIND(?entity AS ?resource) }\"\n  \t]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7522 is currency\nkg:2855 is cocoa bean", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?empire WHERE { kg:2855 kg:7522 ?empire . }\"\n\t\t]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?theory WHERE {\",\n    \"  ?theory wdt:P1433 wd:Q681442 .\", \"># P1433 is 'discoverer or inventor' and Q681442 is Albert Einstein's Wikidata ID\",\n    \"}\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P800 is notable work", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q937 wdt:P800 ?work.\\n}\"]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is Albert Einstein\nkg:7047 is notable work", "response": "{\n \t\t\t\t       \t\t\"query\": [\"@prefix : {PREFIXES}\\nSELECT ?work \\nWHERE {\\n kg:9081 :kg_has_notable_work ?work .\\n}\"]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?composer WHERE { wd:Q5964 wdt:P89 ?composer . }\"\n  \t    \t\t]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44578 is Titanic\nwdt:P86 is composer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE { wd:Q44578 wdt:P86 ?composer . }\"\n    \t]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0524 is Titanic\nkg:2249 is composer", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?composer WHERE { kg:0524 <http://example.com/composedBy> ?composer . }\"\n \t]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?runtime WHERE { wd:Q23015 wdt:P943 ?runtime . }\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171048 is Toy Story\nwdt:P2047 is duration", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime . }\"\n \t\t \t\t\t]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1514 is Toy Story\nkg:2430 is duration", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?duration WHERE { kg:1514 kg:2430 ?duration . }\"\n  \t\t\t]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"structural\",\n  \t                \t\":[-318],\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\",\","}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q794 is Iran\nwdt:P47 is shares border with", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?borderCountry WHERE { wd:Q794 wdt:P47 ?borderCountry . }\"\n \t\t \t  ]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7701 is Iran\nkg:4645 is shares border with", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\": [\"@prefix kg:<http://www.example.org/kg/> .\\n\\nSELECT ?resource WHERE {\\n\\t?resource rdf:type kg:7701 .\\nkge:sharesBorderWith ?resource kg:4645 .\\n}\"]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q45270 ;\", \"# Instance of company (Q45270)\",\n    \"           wdt:P17 wd:Q98 ;\", \"# Located in the country China (Q98)\",\n    \"           wdkn:industryInClassOfBusiness wd:Q36181 .\", \"# Electronics industry (Q36181)\"\n   \t,\"?company wdt:P159 ?beijing.\", \"# Headquarter located in Beijing\"\n   \t,\"?beijing wdt:P17 wd:Q98.\" ,\"# Beijing is a city in China\"\n   \t,\"}\",\n    \"}\"\n  ]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P452 is industry\nwd:Q581105 is consumer electronics\nwdt:P740 is location of formation\nwd:Q956 is Beijing", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?company WHERE {\"\n     \t\t,\"?company wdt:P452 wd:Q581105 .\"\n     \t\t,\"?company wdt:P740 wd:Q956 .\"\n     \t\t,\"}\"\n \t  \t\t]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is industry\nkg:1205 is consumer electronics\nkg:3857 is location of formation\nkg:1374 is Beijing", "response": "{\n \t\t\"query\": [\n  \t\t\"{?x a <http://www.example.com/kg:industry> ;\",\n  \t\t\"<http://www.example.com/kg:3857> <http://www.example.com/kg:1374> ;\",\n  \t\t\"?y ?z}\",\n  \t\t\"OPTIONAL {?x <http://www.example.com/kg:consumer electronics> ?w}\",\n  \t\t\"}\"\n  \t]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?successor WHERE { wd:Q5086 wikibase:directClaim <http://wikiba.se/ontology#succession> ?succession . ?succession p:P2391 [ ps:P2391 wd:Q470 ; pq:P582 ?endTime ] . ?succession ps:P2391 ?successor . }\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?successor WHERE { wd:Q9696 p:P39/ps:P39 wd:Q11696 ; pq:P1366 ?successor . }\"\n \t]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2479 is John F. Kennedy\nkg:8778 is position held\nkg:5867 is position held\nkg:9343 is President of the United States\nkg:6563 is replaced by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"?x kg:6563 kg:2479 .\"\n \t           ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { ?mayor wdt:P30 wd:Q84 }\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { wd:Q90 wdt:P6 ?mayor . }\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6166 is Paris\nkg:8306 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?mayor WHERE { kg:6166 kg:8306 ?mayor . }\"\n \t  \t    ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?university WHERE { wd:Q24867 wdt:P69 ?university . }\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2685 is Arnold Schwarzenegger\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P69 wd:Q3918. ?item wdt:P31 wd:Q2685}\"\n    \t]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7308 is Arnold Schwarzenegger\nkg:8876 is educated at\nkg:0688 is instance of\nkg:7030 is subclass of\nkg:3125 is university", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?entity kg:8876 kg:3125 .\",\n      \t\t\t\"?entity kg:7030 kg:7308 .\"\n      \t]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q25314 wdt:P26 ?resource . }\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2009573 is James Bond\nwdt:P26 is spouse", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?spouse \\nWHERE {\\nwd:Q2009573 wdt:P26 ?spouse.\\n}\"]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6381 is James Bond\nkg:3800 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?subject <http://example.org/hasSpouse> ?object .\",\n\t\t    \t\t\t\"?subject <http://example.org/is> <kg:6381> .\"\n\t\t    \t\t]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { wd:Q253 wdt:P488 ?resource . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q106588 is Isar\nwdt:P403 is mouth of the watercourse\nwdt:P31 is instance of\nwd:Q23397 is lake", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q106588 wdt:P403 ?resource . ?resource wdt:P31 wd:Q23397 }\"\n \t]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5036 is Isar\nkg:9120 is mouth of the watercourse\nkg:4891 is instance of\nkg:5402 is lake", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:5036 kg:9120 ?resource . ?resource kg:4891 kg:5402 }\"\n \t]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?company WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?company wdt:P31 wd:Q47562; wdt:P108 wd:Q9151; wdt:P1104 ?employeeCount. \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"FILTER(?employeeCount >= (MAX(?employeeCount) - 100000)).\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"} ORDER BY DESC(?employeeCount) LIMIT 1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n} "}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P17 is country\nwd:Q668 is India\nwdt:P1128 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?company wdt:P31 wd:Q4830453 . ?company wdt:P17 wd:Q668 . ?company wdt:P1128 ?employeeCount . ?otherCompany wdt:P31 wd:Q4830453 . ?otherCompany wdt:P17 wd:Q668 . ?otherCompany wdt:P1128 ?otherEmployeeCount . FILTER(?company != ?otherCompany) . FILTER (?employeeCount > ?otherEmployeeCount) .}\"\n    \t]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9039 is instance of\nkg:8788 is business\nkg:3619 is country\nkg:2811 is India\nkg:7645 is employees", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:instanceOf/kg:business kg:8788}\",\n      \t\t\t\"?x kg:country/kg:2811 kg:3619.\",\n      \t\t\t\"?x kg:employees ?y\"\n      \t  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q1530$ wd:P792 ?VicePresident.\"]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P580 is start time\npq:P582 is end time\np:P39 is position held\nps:P39 is position held\nwd:Q11699 is Vice President of the United States\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?vp WHERE { wd:Q9696 p:P39 ?positionStatement .\",\n     \t\t\"?positionStatement ps:P39 wd:Q11699 .\",\n     \t\t\"?positionStatement pq:P580 ?startTime . \",\n     \t\t\"?positionStatement pq:P582 ?endTime . \",\n     \t\t\"?positionStatement ps:P39 ?vp . }\"\n     \t\t\t]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3069 is John F. Kennedy\nkg:4508 is position held\nkg:8952 is position held\nkg:0773 is President of the United States\nkg:0995 is start time\nkg:5626 is end time\nkg:4508 is position held\nkg:8952 is position held\nkg:0526 is Vice President of the United States\nkg:0995 is start time\nkg:5626 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x a kg:0526}\",\n      \t\t\"?x kg:4508 ?y\",\n      \t\t\"?y kg:0995 ?start\",\n      \t\t\"?y kg:5626 ?end\",\n      \t\t\"?z a kg:0773\",\n      \t\t\"?z kg:4508 ?y\",\n      \t\t\"?z kg:0995 ?start\",\n      \t\t\"?z kg:5626 ?end\",\n      \t\t\"?z owl:sameAs kg:3069\"\n      \t]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\"\n     \t\t,\"wd:Q169450 wdt:P27 ?country\"\n\t\t\t,\"}\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1501505 is Miffy\nwdt:P170 is creator\nwdt:P27 is country of citizenship", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE { wd:Q1501505 wdt:P170 ?creator . ?creator wdt:P27 ?country }\"\n    \t]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1126 is Miffy\nkg:0332 is creator\nkg:1594 is country of citizenship", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:0332 kg:1126 .\",\n\t\t    \t\t\t\"?x kg:1594 ?y\"\n\t\t    \t\t]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?city WHERE {\\nwd:Q1223647 wdt:P131 ?city.\\n}\"]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854383 is Heineken\nwdt:P176 is manufacturer\nwdt:P159 is headquarters location", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?city WHERE { wd:Q854383 wdt:P159 ?city . }\"\n    \t]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2645 is Heineken\nkg:1943 is manufacturer\nkg:0447 is headquarters location", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:0447 kg:2645 .\"\n   \t\t\t \t\t]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q9076 wdt:P102 ?resource . }\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P102 is member of political party\nwd:Q29552 is Democratic Party", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?party WHERE { wd:Q76 wdt:P102 ?party . }\"\n   \t\t\t]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6237 is Barack Obama\nkg:0077 is member of political party\nkg:9901 is Democratic Party", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?party WHERE { kg:6237 kg:0077 ?party . FILTER ( STR(?party) = \\\"kg:9901\\\" ) }\"\n \t]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?child WHERE { wd:Q2486 wdt:P40 ?child . }\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P40 is child", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?child WHERE { wd:Q7416 wdt:P40 ?child }\"\n \t]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1671 is Margaret Thatcher\nkg:9715 is child", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?child WHERE { kg:1671 kg:9715 ?child }\"\n \t\t\t\t]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?area WHERE { wd:Q259 hasPart/wdt:P2046 ?area . }\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1198 is North Rhine-Westphalia\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?area WHERE { wd:Q1198 wdt:P2046 ?area . }\"\n    \t]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2319 is North Rhine-Westphalia\nkg:6965 is area", "response": "{\n \t\t\"query\" : [\n  \t\t\"SELECT ?area WHERE { kg:2319 kg:6965 ?area . }\"\n  \t]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?city WHERE { ?city wdt:P31 wd:Q515 ; wdt:P1082 ?population . FILTER ( ?population > 0 ) } ORDER BY DESC(?population) LIMIT 1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?city WHERE {\"\n \t\t  \t   \t\t,\"?city wdt:P31 wd:Q515 .\"\n \t\t  \t   \t\t,\"?city wdt:P1082 ?population .\"\n \t\t  \t   \t\t,\"?maxCity (wdt:P1082/max) ?maxPopulation .\"\n \t\t  \t\t,\"FILTER(?population = ?maxPopulation)\"\n \t\t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0594 is instance of\nkg:1015 is subclass of\nkg:4012 is city\nkg:0154 is population", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?city WHERE {\",\n            \"?city kg:instance_of kg:4012 .\",\n            \"?city kg:0154 ?population .\",\n            \"{ SELECT ?city (MAX(?population) AS ?maxPopulation) WHERE {\",\n                \"?city kg:instance_of kg:4012 .\",\n                \"?city kg:0154 ?population .\"\n           \t\t,\"} GROUP BY ?city }\",\n            \"?city kg:0154 ?maxPopulation .\"\n          \t,\"}\" ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"structural\",\n  \t                \t\":[-3,\" ]}\n  \t                \t"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P488 is chairperson\nwd:Q22686 is Donald Trump\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?entity wdt:P488 wd:Q22686 . ?entity wdt:P31 wd:Q4830453}\"\n     \t\t ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4832 is chairperson\nkg:2038 is Donald Trump\nkg:0886 is instance of\nkg:5264 is subclass of\nkg:3913 is business\nkg:3936 is dissolved, abolished or demolished date", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?resource kg:4832 kg:2038 .\",\n      \t\t\t\"?resource kg:0886 kg:3913 .\"\n      \t\t\t ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?match WHERE { ?match wdt:P31 wd:Q2476958 ; wdt:P129 wd:Q7073; wdt:P585 ?date . }\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170645 is 2018 FIFA World Cup\nwdt:P3967 is final event\nwdt:P580 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?start WHERE { wd:Q170645 wdt:P3967 ?finalEvent . ?finalEvent wdt:P580 ?start }\"\n \t\t \t\t ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7606 is 2018 FIFA World Cup\nkg:2755 is final event\nkg:9531 is start time", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?startTime WHERE { kg:7606 kg:2755 ?finalEvent . ?finalEvent kg:9531 ?startTime }\"\n \t]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P345 wd:Q21198. }\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2001 is Stanley Kubrick", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?film WHERE { wd:Q2001 wdt:P57 ?film }\"\n    \t]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7961 is director\nkg:1127 is Stanley Kubrick", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { kg:1127 kg:7961 ?film . }\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?population WHERE { wd:Q35 wikibase:quantityAmount ?population . }\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q796 is Iraq\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?population WHERE { wd:Q796 wdt:P1082 ?population . }\"\n \t\t \t  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9047 is Iraq\nkg:6595 is population", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?resource kg:typeOf kg:9047 .\",\n      \t\t\t\"?resource kg:hasProperty kg:6595 ?population .\"\n      \t]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?population WHERE { \"\n     \t\t,\"?city wdt:P31 wd:Q515;\"\n     \t,\"wdt:P1082 wd:Q6256; \"\n     \t,\"wdt:P17 wd:Q176. \"\n     \t,\"?city wdt:P1082 ?population. \"\n     \t,\"{ SELECT ?city (MAX(?pop) as ?maxPop) WHERE {\"\n     \t\t,\"?city wdt:P31 wd:Q515;\"\n     \t\t,\"wdt:P1082 ?pop; \"\n     \t\t,\"wdt:P17 wd:Q176. \"\n     \t\t,\"} GROUP BY ?city\"\n     \t,\"}\"\n     \t,\"?city wdt:P1082 ?population.\"\n     \t,\"FILTER(?population = ?maxPop)\"\n   \t,\"}\" ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q16 is Canada\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?city ?population WHERE {\"\n     \t\t\t,\"?city wdt:P31 wd:Q515 .\"\n     \t\t,\"?city wdt:P17 wd:Q16 .\"\n     \t\t,\"?city wdt:P1082 ?population .\"\n     \t\t,\"{ SELECT ?city (MAX(?pop) AS ?maxPop) WHERE { \"\n     \t\t\t,\"?city wdt:P31 wd:Q515 .\"\n     \t\t\t,\"?city wdt:P17 wd:Q16 .\"\n     \t\t\t,\"?city wdt:P1082 ?pop .\"\n     \t\t,\"} GROUP BY ?city }\"\n     \t\t,\"FILTER(?population = ?maxPop)\"\n     \t\t,\"}\"\n     \t\t\t,\"ORDER BY DESC(?population)\"\n     \t\t,\"LIMIT 1\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2883 is country\nkg:0179 is Canada\nkg:5210 is instance of\nkg:9923 is subclass of\nkg:1418 is city\nkg:1232 is population", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"{?x kg:5210 kg:1418}\",\n       \t\t\"?x kg:9923 kg:1232 ?y\",\n       \t\t\"?z kg:5210 kg:2883\",\n       \t\t\"?z kg:9923 kg:0179\",\n       \t\t\"?x kg:9923 ?z\"\n       \t \t]\n       \t \t}\n       \t \t\t\t \t\t"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?mayor WHERE {\\n wd:Q176849 wdt:P6 wikiDataIDOfCurrentMayor.\\n wikiDataIDOfCurrentMayor wdt:P31 wd:Q5 .\\n wikiDataIDOfCurrentMayor wdt:P39 wd:Q420791 .\\n}\"]\n} "}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30971 is French Polynesia\nwdt:P36 is capital\nwdt:P6 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?mayor WHERE {\"\n \t\t  \t   \t\t,\"wd:Q30971 wdt:P36 ?capital .\"\n \t\t  \t   \t\t,\"?capital wdt:P6 ?mayor.\"\n \t  \t\t\t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6320 is French Polynesia\nkg:6865 is capital\nkg:4430 is head of government", "response": "{\n \t\"query\" : [\n  \t\t\"SELECT ?resource WHERE { kg:6865 kg:4430 ?resource . }\"\n  \t]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?movie wdt:P345 wd:William_Shatner. # directed by William Shatner\",\n    \"  ?movie wdt:P161 ?actor. # starring actor\",\n    \"}\",\n    \"MINUS { ?movie wdt:P345 wd:William_Shatner }\", \"Attracts only movies with the correct director, though this line is redundant and kept for clarity.\"\n    ]\n}\n           \t\t\t\t\t\t\t\t "}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?actor WHERE {\"\n     \t\t,\"?movie wdt:P31 wd:Q11424 .\"\n     \t\t,\"?movie wdt:P57 wd:Q16297 .\"\n     \t\t,\"?movie wdt:P161 ?actor .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3780 is instance of\nkg:4610 is film\nkg:8975 is director\nkg:8436 is William Shatner\nkg:3866 is cast member", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:8975 kg:8436 .\",\n\t\t    \t\t\"?x kg:3780 kg:4610 .\",\n\t\t    \t\t\"?x kg:3866 ?y\"\n\t\t    \t] }\n    \t\t\t\t\t\t\t\t\t"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?height WHERE { wd:Q75190 wdt:P2044 ?height . }\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76717 is Claudia Schiffer\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?height WHERE { wd:Q76717 wdt:P2048 ?height . }\"\n    \t]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9771 is Claudia Schiffer\nkg:7932 is height", "response": "{\n \t    \t\t\"query\": [\n\t        \"PREFIX kg: <http://example.org/kg#> SELECT ?height WHERE { kg:9771 kg:7932 ?height . }\"\n\t    \t  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?rank WHERE { wd:Q183 p:P1086 ?populationStatement . ?populationStatement ps:P1086 ?populationValue ; pq:P1695 ?rank . }\"\n \t\t \t  ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P1082 is population\nwdt:P2046 is area\nwd:Q183 is Germany\nwdt:P1082 is population\nwd:Q183 is Germany\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?rank WHERE {\"\n     \t\t,\"?germany wdt:P31 wd:Q6256 .\"\n     \t\t,\"?germany rdfs:label ?germanyLabel.\"\n     \t\t,\"FILTER(LANG(?germanyLabel) = 'en').\"\n     \t\t,\"?germany wdt:P1082 ?population.\"\n     \t\t,\"?germany wdt:P2046 ?area.\"\n     \t\t,\"BIND((?population / ?area) AS ?density).\"\n     \t\t,\"SERVICE <https://query.wikidata.org/sparql> { \"\n     \t\t,\"{ SELECT (COUNT(?country) as ?rank) WHERE {\"\n     \t\t,\"?country wdt:P31 wd:Q6256 .\"\n     \t\t,\"?country wdt:P1082 ?pop.\"\n     \t\t,\"?country wdt:P2046 ?areaC.\"\n     \t\t,\"FILTER(?pop / ?areaC > ?density).\"\n     \t\t,\"} }\"\n     \t\t,\"}\"\n     \t\t,\"}\"\n      ]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1872 is instance of\nkg:6284 is country\nkg:2685 is population\nkg:5831 is area\nkg:7906 is Germany\nkg:2685 is population\nkg:7906 is Germany\nkg:5831 is area", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:instanceOf/kg:6284 ?y .\",\n  \t\t\t\t         \"?x kg:2685 ?pop .\",\n  \t\t            \t \"?x kg:5831 ?area .\",\n  \t\t            \t \"?x kg:7906 kg:7906 .\",\n  \t\t            \t \"bind((?pop / ?area) as ?density)\",\n  \t\t            \t \"order by desc(?density)\"\n  \t\t\t\t        ]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q35\", \"?mountain\"]\n \t\t\t\t\t\t\t\t\t  \t\t}\n \t\t\t\t\t\t\t\t\t  \t\t\t\t \t\t\t"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P17 is country\nwd:Q38 is Italy\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?mountain WHERE {\"\n     \t\t,\"?mountain wdt:P31 wd:Q8502 .\"\n     \t\t,\"?mountain wdt:P17 wd:Q38 .\"\n     \t\t,\"?mountain wdt:P2044 ?elevation.\"\n     \t\t,\"?highest filter(?highest < ?elevation)}\"\n     \t\t,\"{ ?mountain wdt:P2044 ?highest }}\"\n     \t\t,\"ORDER BY DESC(?highest)\"\n     \t\t,\"LIMIT 1\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0462 is instance of\nkg:4464 is mountain\nkg:5176 is country\nkg:5061 is Italy\nkg:4947 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?mountain kg:0462 kg:4464 .\",\n\t\t    \t\t\t\"?mountain kg:0462 kg:5176 kg:5061 .\",\n\t\t    \t\t\t\"?mountain kg:0462 kg:4947 ?elevation .\"\n\t\t    \t\t]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?game WHERE { ?game wdt:P31 wd:Q7889 . }\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11410 is game\nwdt:P123 is publisher\nwd:Q928726 is GMT Games", "response": "{\n  \"query\" : [\n    \"SELECT ?game WHERE {\",\n      \"?game wdt:P31 wd:Q11410 .\",\n      \"?game wdt:P123 wd:Q928726 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9566 is instance of\nkg:6944 is subclass of\nkg:8759 is game\nkg:9432 is publisher\nkg:2847 is GMT Games", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?game WHERE {\",\n\t\t    \t\t\" kg:2847 <http://example.org/publishes> ?game .\",\n\t\t    \t\t\"?game a kg:8759 .\",\n\t\t    \t\t\"}\"\n\t\t    \t]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q860 wdt:P37 ?language . }\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q730 is Suriname\nwdt:P37 is official language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?language WHERE { wd:Q730 wdt:P37 ?language . }\"\n \t\t \t  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4116 is Suriname\nkg:0803 is official language", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?language WHERE { kg:4116 kg:0803 ?language . }\"\n \t]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t  \t\"query\": [\"$label$SERVICE $sparql$wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". } SELECT ?city WHERE { wd:Q76120 wdt:P20 wikipediaUrl ?url . ?item <http://www.wikidata.org/prop/direct/P20> ?city . ?city rdfs:label ?cityLabel FILTER (LANG(?cityLabel) = 'en'). }\"]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214622 is Nikos Kazantzakis\nwdt:P20 is place of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?placeOfDeath WHERE { wd:Q214622 wdt:P20 ?placeOfDeath . }\"\n \t\t \t  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2723 is Nikos Kazantzakis\nkg:5439 is place of death", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?placeOfDeath WHERE { kg:2723 kg:5439 ?placeOfDeath . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { wd:Q123456 p:P31 [ ps:P31 wd:Q43210 ; pq:P131 wd:Q789012 ] . wd:Q789012 wdt:P17 ?country }\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6386177 is Limerick Lake\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?country WHERE { wd:Q6386177 wdt:P17 ?country . }\"\n  \t    \t\t]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7230 is Limerick Lake\nkg:3882 is country", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:7230 <http://example.com/locatedIn> ?resource . FILTER (isURI(?resource)) }\"\n\t\t]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?member WHERE { ?group wdt:P361 ?member . FILTER(?group = wd:Q25980) }\"\n  ]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P463 is member of\nwd:Q7256860 is The Prodigy", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?member \\nWHERE {\\nwd:Q7256860 wdt:P463 ?member.\\n}\\n\"]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2552 is member of\nkg:5036 is The Prodigy", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?member WHERE { kg:5036 kg:2552 ?member . }\"\n\t\t    \t]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?timeZone WHERE { wd:Q467 wdt:P3095 ?timeZone . }\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q220 is Rome\nwdt:P421 is located in time zone", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?timeZone WHERE { wd:Q220 wdt:P421 ?timeZone . }\"\n    \t]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1360 is Rome\nkg:1359 is located in time zone", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?timeZone WHERE { kg:1360 kg:1359 ?timeZone . }\"\n \t  \t    ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?writer WHERE { \"\n     \t\t,\"wd:Q104289 wikibase:statementProperty wd:P57 ;\"\n     \t, \"?statement wikibase:directClaim ?role .\"\n     \t, \"?statement prov:wasDerivedFrom ?source .\"\n     \t, \"?source pr:P854 ?url .\"\n     \t, \"?role ps:P570 ?writer .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q151114 is The Wall\nwdt:P658 is tracklist\nwdt:P162 is producer", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?writer WHERE { wd:Q151114 wdt:P658 ?albumTrack . ?albumTrack wdt:P162 ?writer. }\"\n\t\t \t\t]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2920 is The Wall\nkg:8526 is tracklist\nkg:1210 is producer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?writer WHERE { kg:2920 kg:8526 ?albumTrack . ?albumTrack kg:1210 ?writer }\"\n \t]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { ?rotterdam wdt:P6 pdx:Q14395 ; wdt:P102 ?mayor . }\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34370 is Rotterdam\nwdt:P6 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?mayor WHERE { wd:Q34370 wdt:P6 ?mayor . }\"\n    \t]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9506 is Rotterdam\nkg:5120 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?mayor WHERE { kg:9506 kg:5120 ?mayor }\"\n \t  \t \t\t]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?city WHERE { ?city wdt:P31 wd:Q5154 ; wdt:P17 wd:Q83 . FILTER ( ?city wdt:P1082 MAX ) }\"\n  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t\t,\"?resource wdt:P31 wd:Q515 .\"\n     \t\t,\"?resource wdt:P17 wd:Q408 .\"\n     \t\t,\"?resource wdt:P1082 ?population .\"\n     \t\t,\"FILTER ( ?population = MAX(?population) )\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5863 is instance of\nkg:8388 is subclass of\nkg:7831 is city\nkg:3186 is country\nkg:6561 is Australia\nkg:6373 is population", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"{?x kg:8388 kg:7831}\",\n       \t\t\"{?x kg:8388 kg:3188}\", \"@comment('city')\",\n       \t\t\"{?x kg:6561 kg:6340}\", \"@comment('located in the country')\",\n       \t\t\"?y kg:6561 kg:6379\", \"@comment('country name')\",\n       \t\t\"?y rdfs:label 'Australia'\",\n       \t\t\"{?x kg:6373 ?z}\",\n       \t\t\"?w kg:8388 kg:7831\",\n       \t\t\"?w kg:6561 kg:6340\",\n       \t\t\"?w kg:6373 ?v\",\n       \t\t\"FILTER (?z > ?v)\",\n       \t\t\"@where([?x, ?y])\"\n       ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?spouse WHERE { wd:Q2086 wdt:P1945 ?spouse . }\"\n  \t    \t\t]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2105 is Jacques Chirac\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?spouse WHERE { wd:Q2105 wdt:P26 ?spouse . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9082 is Jacques Chirac\nkg:5189 is spouse", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:9082 kg:5189 ?resource . }\"\n \t]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\t\t\t\"SELECT ?government WHERE { wd:Q1782 wdt:P31 ?government . }\"\n  \t\t\t\t]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q258 is South Africa\nwdt:P122 is basic form of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?government WHERE { wd:Q258 wdt:P122 ?government . }\"\n \t\t \t  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is South Africa\nkg:3788 is basic form of government", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n \t\t\"SELECT ?formOfGovernment WHERE { kg:5595 kg:3788 ?formOfGovernment . }\"\n \t]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd :Q196247 $pq:P2044 ?height .\", \"?height\"]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1207989 is Yokohama Marine Tower\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?height WHERE { wd:Q1207989 wdt:P2048 ?height . }\"\n\t\t \t\t]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8468 is Yokohama Marine Tower\nkg:6687 is height", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:6687 kg:8468 .\"\n   \t\t\t \t\t]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE { ?player wdt:P31 wd:Q5 ; wdt:P570 ?death ; wdt:P106 wd:Q40194 ; wdt:P2048 ?height . FILTER (lang(?player) = ''@en) } ORDER BY DESC (?height) LIMIT 1\"\n  ]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646. ?player wdt:P2048 ?height. } ORDER BY DESC(?height) LIMIT 1\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8059 is occupation\nkg:4937 is basketball player\nkg:1141 is height", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8059 kg:4937 .\",\n    \"  ?resource kg:1141 ?height .\",\n    \"}\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q8697 wdt:P349 ?language . }\"\n  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q874 is Turkmenistan\nwdt:P2936 is language used", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?language WHERE { wd:Q874 wdt:P2936 ?language . }\"\n \t\t \t  ]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8750 is Turkmenistan\nkg:5009 is language used", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?language WHERE { kg:8750 kg:5009 ?language . }\"\n \t]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label(Che Guevara) ?person .\", \"?person wdt:P40 ?child .\", \"[]\"]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5809 is Che Guevara\nwdt:P40 is child", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?child WHERE { wd:Q5809 wdt:P40 ?child }\"\n    \t]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4932 is Che Guevara\nkg:0068 is child", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?child WHERE { kg:4932 kg:0068 ?child . }\"\n \t]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { \"\n     \t\t\t \t\t,\"?filmDirector wd:Q162973 wdt:P161 ?prize .\"\n     \t\t \t\t,\"?prize wdt:P31 wd:Q188054 .\"\n     \t\t \t\t,\"?prize wdt:P1629 wd:Q3340 .\"\n     \t\t \t\t,\"?filmDirector wdt:P1477 ?directorName .\"\n     \t\t \t\t,\"FILTER (LANG(?directorName) = 'en') .\"\n     \t\t \t\t,\"FILTER (?directorName = \\\"Aki Kaurismäki\\\"@en) .\"\n     \t\t \t\t,\"?resource wdt:P31 wd:Q5 .\"\n     \t\t \t\t,\"?filmDirector wdt:P2704 ?resource .\"\n   \t\t\t \t\t,\"}\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q276186 is Aki Kaurismäki\nwdt:P166 is award received\nwd:Q844804 is Cannes Film Festival Grand Prix", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?award WHERE { wd:Q276186 wdt:P166 ?award . ?award wds:Q844804 wikibase:SameAs ?cannesGrandPrix }\"\n     \t\t\t]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8458 is Aki Kaurismäki\nkg:1315 is award received\nkg:1066 is Cannes Film Festival Grand Prix", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?person kg:1315 ?award.\",\n \t\t    \t\t\"?award rdf:type kg:1066.\"\n\t\t    \t\t]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?party WHERE { wd:Q426 wdt:P102 ?party . }\"\n  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government\nwdt:P102 is member of political party", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?party WHERE { wd:Q90 wdt:P6 ?mayor . ?mayor wdt:P102 ?party }\"\n \t\t \t  ]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2333 is Paris\nkg:5416 is head of government\nkg:5588 is member of political party", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?mayor kg:5416 <http://www.wikidata.org/entity/Q2333> .\",\n                \t \"?mayor kg:5588 ?party .\",\n                \t \"{ ?party <http://schema.org/name> ?partyName . } UNION { ?party rdfs:label ?partyName. }\"\n                \t ]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?driver WHERE {\",\n    \"  ?driver wdt:P106 wd:Q7285; wdtn:instanceOf wd:Q5; p:P438 ?statement.\",\n    \"  ?statement ps:P438 ?raceCount.\",\n    \"  FILTER (STR(?raceCount) = (SELECT STR(MAX(?maxRaceCount)) WHERE {\",\n    \"    ?driver p:P438 ?raceStatement.\",\n    \"    ?raceStatement ps:P438 ?maxRaceCount.\"\n    \t\t\t\t\t\t   \t,\"  }\"\n    \t\t\t\t\t\t   \t,\"  )\"\n    \t\t\t\t\t\t   \t,\")\"\n    \t\t\t\t\t\t   \t,\"}\"\n    ]\n  }\n \t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t  "}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10841764 is Formula One driver\nwdt:P1350 is number of matches played/races/starts", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?driver WHERE {\"\n     \t\t\t,\"?driver wdt:P106 wd:Q10841764 .\"\n     \t\t,\"?driver wdt:P1350 ?raceCount .\"\n     \t\t,\"?maxDriver (wdt:P1350/max) ?maxRaces .\"\n     \t\t,\"{ SELECT ?driver (MAX(?raceCount) as ?maxRaces) { ?driver wdt:P1350 ?raceCount } GROUP BY ?driver }\"\n     \t\t,\"FILTER (?raceCount = ?maxRaces)\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6894 is occupation\nkg:7521 is Formula One driver\nkg:6339 is number of matches played/races/starts", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?entity kg:6894/kg:7521 ?type .}\",\n\t\t    \t\t\t\"?entity kg:6339 ?raceCount .\",\n\t\t    \t\t\t\"{?maxEntity kg:6894/kg:7521 ?type .}\",\n\t\t    \t\t\t\"?maxEntity kg:6339 ?maxRaceCount .}\",\n\t\t    \t\t\t\"OPTIONAL {?maxEntity <http://www.w3.org/2000/01/rdf-schema#label> ?name .}\",\n\t\t    \t\t\t\"{SELECT ?maxRaceCount WHERE\",\n\t\t    \t\t\t\"{{?entity kg:6894/kg:7521 ?type .}\",\n\t\t    \t\t\t\"?entity kg:6339 ?raceCount .}\",\n\t\t    \t\t\t\"} ORDER BY DESC(?raceCount) LIMIT 1}\"\n\t\t    \t\t]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { wd:Q169542 wdt:P17 ?country . }\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2663195 is Sitecore\nwdt:P17 is country", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { wd:Q2663195 wdt:P17 ?country . }\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9915 is Sitecore\nkg:9456 is country", "response": "{\n  \"query\" : [\n    \"PREFIX kg: <http://example.org/kg#> SELECT ?country WHERE { kg:9915 kg:hasHeadquartersInCountry ?country . }\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?birthPlace WHERE { wd:Q31149 wdt:P19 ?birthPlace . }\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40912 is Frank Sinatra\nwdt:P19 is place of birth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?birthPlace WHERE { wd:Q40912 wdt:P19 ?birthPlace . }\"\n \t\t \t\t\t]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4574 is Frank Sinatra\nkg:3148 is place of birth", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?birthPlace WHERE { kg:4574 kg:3148 ?birthPlace . }\"\n \t]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { wd:Q275963 wdt:P161 wd:Q46108 . }\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1481540 is Velvet Goldmine\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q1481540 wdt:P161 wd:Q45772 . }\"\n    \t]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1837 is Velvet Goldmine\nkg:2378 is cast member\nkg:2302 is Christian Bale", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:2378 kg:2302 .\",\n           \t\t\t \"?x kg:1837 ?y .\"\n\t\t       ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?son WHERE { wd:Q2539 wdt:P40 ?son . }\"\n  ]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P22 is father\nwd:Q179150 is Sonny Bono\nwdt:P25 is mother\nwd:Q12003 is Cher", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?son WHERE { wd:Q179150 wdt:P22 ?son . wd:Q12003 wdt:P25 ?son }\"\n    \t]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8319 is father\nkg:6328 is Sonny Bono\nkg:8679 is mother\nkg:7963 is Cher", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?son WHERE { kg:6328 kg:8319 ?son . kg:7963 kg:8679 ?son }\"\n \t]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label = \"]\n}\n\t\t\t\t\t      \t \t"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1009 is Cameroon\nwdt:P36 is capital", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q1009 wdt:P36 ?resource . }\"\n \t\t \t  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9619 is Cameroon\nkg:9141 is capital", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:9619 <http://example.org/capitalOf> ?resource . }\"\n \t]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label$ wd:Q25386 gcpedia:P31 wd:Q5 ; gcpedia:P19 ?placeOfBirth . ?placeOfBirth gcpedia:P17 wd:Q30 .\"] }\n    \t\t\t\t\t\t\t\t  \t \t"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37876 is Natalie Portman\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?birthPlace WHERE { wd:Q37876 wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q30 }\"\n    \t]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2400 is Natalie Portman\nkg:5100 is place of birth\nkg:6353 is country\nkg:1050 is United States of America", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?x kg:5100/kg:6353 kg:1050}\",\n\t\t    \t\t\t\"?x kg:2400 kg:2400\"\n\t\t    \t\t]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t  \t\"query\": [\"$label(?child)\"] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q873 is Meryl Streep\nwdt:P40 is child\nwdt:P569 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?child WHERE {\"\n \t\t  \t,\"wd:Q873 wdt:P40 ?child.\"\n \t\t  \t,\"?child wdt:P569 ?birthdate.\"\n \t\t  \t,\"FILTER NOT EXISTS {?child wdt:P569 ?otherBirthdate FILTER (?birthdate < ?otherBirthdate)}\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9386 is Meryl Streep\nkg:7223 is child\nkg:3308 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?child kg:hasParent kg:9386 .\",\n      \t\t\t\"?child kg:isChild kg:7223 .\",\n      \t\t\t\"?child kg:dateOfBirth kg:3308 .\"\n      \t\t\t]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?show WHERE { ?show wdt:P31 wd:Q5383934 ; wdt:P178 wd:Q26050 . }\"\n  ]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7725310 is series of creative works\nwdt:P170 is creator\nwd:Q8704 is Walt Disney", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?show WHERE { ?show wdt:P170 wd:Q8704 . ?show wdt:P31 wd:Q7725310 }\"\n    \t]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is instance of\nkg:2217 is subclass of\nkg:4357 is series of creative works\nkg:2797 is creator\nkg:6368 is Walt Disney", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <kg:4357>}\",\n      \t\t\"{?x0 <kg:2797> <kg:6368>}\"\n      \t  ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"?president wdt:P31 wd:Q5 .\"\n     \t, \"?presidency p:P106 ?positionStatement . \"\n     \t, \"?positionStatement ps:P106 wd:Q24987 . \"\n     \t, \"?positionStatement pq:P580 ?startDate . \"\n     \t, \"?president wdt:P39 wd:Q7005 .\"\n     \t, \"?war wdt:P139 ?president .\"\n     \t, \"?resource wikibase:directClaim ?statement .\"\n     \t, \"?statement psv:P139 ?positionStatement .\"\n     \t, \"?president rdfs:label ?name FILTER (LANG(?name) = 'en') .\"\n     \t, \"FILTER (?name = \\\"Andrew Jackson\\\"@en).\"\n   \t,\"}\" ]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11817 is Andrew Jackson\nwdt:P607 is conflict", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q11817 wdt:P607 ?resource . }\"\n    \t]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is Andrew Jackson\nkg:6744 is conflict", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?res kg:typeOf kg:6744 .\",\n\t\t    \t\t\t\"?res kg:involved kg:1132 .\"\n\t\t    \t\t]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?completion WHERE { wd:Q9264 wdt:P585 ?completion . }\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25173 is Titanic\nwdt:P729 is service entry", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q25173 wdt:P729 ?resource . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2084 is Titanic\nkg:4238 is service entry", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4238 kg:2084 .\"\n\t\t    \t  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { \"\n     \t\t,\"wd:Q3164 wdt:P161 wd:Q7009 .\"\n     \t,\"OPTIONAL { wd:Q3164 wdt:P161 ?resource }\"\n     \t,\"FILTER (!isBlank(?resource))\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9036 is Nikola Tesla\nwdt:P166 is award received\nwd:Q38104 is Nobel Prize in Physics", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q9036 wdt:P166 wd:Q38104. }\"\n \t\t \t\t\t]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9199 is Nikola Tesla\nkg:2395 is award received\nkg:3285 is Nobel Prize in Physics", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?entity kg:2395 kg:3285 .\",\n\t\t    \t\t\t\"?entity kg:1006 kg:9199 .\"\n\t\t    \t\t]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE { ?state wdt:P31 wd:Q3564795 ; wdt:P17 wd:Q2 .\" ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q15149663 is state of Mexico", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?state WHERE { ?state wdt:P31 wd:Q15149663. }\"\n \t\t \t\t ]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1188 is instance of\nkg:8553 is state of Mexico", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?state WHERE { ?state kg:typeOf kg:8553 }\"]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?cost WHERE { wd:Q21697843 wdt:P3153 ?cost . }\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2608065 is The Lego Movie\nwdt:P2130 is cost", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?cost WHERE { wd:Q2608065 wdt:P2130 ?cost . }\"\n  \t    \t\t]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7174 is The Lego Movie\nkg:4576 is cost", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4576 kg:7174 .\"\n\t\t    \t]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE { \"\n     \t\t,\"wd:Q265498 wd:P86 ?composer\"\n     \t\t,\"?composer wdt:P31 wd:Q5\"\n     \t\t,\"?composer rdfs:label ?composerLabel\"\n     \t\t,\"FILTER (LANG(?composerLabel) = 'en')\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q368577 is Harold and Maude\nwdt:P86 is composer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE { wd:Q368577 wdt:P86 ?composer . }\"\n    \t]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5213 is Harold and Maude\nkg:9296 is composer", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?composer WHERE { kg:5213 <http://example.com/composedBy> ?composer . kg:?composer a kg:9296 }\"\n\t\t]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?city WHERE { ?city wdt:P31 wd:Q5154 ; wdt:P1082 ?population . FILTER (MIN(?population)) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?city WHERE {\"\n \t\t  \t   \t\t,\"?city wdt:P31 wd:Q515. \"\n \t\t  \t   \t\t,\"?city wdt:P1082 ?population. \"\n \t\t  \t   \t\t,\"FILTER (MIN(?population)) .\"\n \t\t  \t   \t\t,\"}\"\n \t\t \t  ]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3143 is instance of\nkg:9876 is city\nkg:4366 is population", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?city WHERE {\",\n            \"?city kg:instance_of kg:9876 .\",\n            \"?city kg:population kg:4366 .\",\n            \"{ SELECT ?city (MIN(?popValue) AS ?minPop) WHERE {\",\n                \"?city kg:population/kg:value ?popValue .\",\n            \"} GROUP BY ?city}\",\n\t\t\t\"?city kg:population/kg:value ?minPop .\"\n\t\t\t,\"} ORDER BY ASC(?minPop)\"\n\t\t]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ ?entity wdt:P106 wd:Q75849; wdt:P19 wd:Q239; wdt:P570 ?deathDate; wdt:P119 ?burialPlace.\", \"?burialPlace\"]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171684 is Syngman Rhee\nwdt:P119 is place of burial", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?burialPlace WHERE { wd:Q171684 wdt:P119 ?burialPlace . }\"\n \t \t \t    ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3345 is Syngman Rhee\nkg:9861 is place of burial", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?burialPlace WHERE { kg:3345 kg:9861 ?burialPlace . }\"\n \t  \t    ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?team WHERE {\\nwd:Q15826 wdt:P54 ?team.\\n}\"]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q142794 is Neymar\nwdt:P54 is member of sports team\nwd:Q8682 is Real Madrid CF", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?team WHERE { wd:Q142794 wdt:P54 ?team . FILTER(?team = wd:Q8682) }\"\n \t\t \t\t ]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8232 is Neymar\nkg:5537 is member of sports team\nkg:7777 is Real Madrid CF", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:5537 kg:8232 .\",\n\t\t    \t\t\t\"?x kg:5537 kg:7777\"\n\t\t    \t\t]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { \",\n      \"?work wdt:P31 wd:Q571 ;\", \"# Instance of 'written work'\",\n      \"wd:Q204469 wdt:P50 ?author .\", \"# The Pillars of the Earth (item) written by (?author)\"\n   \t,\"?work rdfs:label ?title. FILTER(LANG(?title) = '' || LANGMATCHES(LANG(?title), 'en'))\"\n     \t,\"FILTER(?title = \\\"The Pillars of the Earth\\\")\"\n  \t,\"}\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author . }\"\n \t\t \t  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7222 is The Pillars of the Earth\nkg:7844 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?author WHERE { kg:7222 kg:7844 ?author . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parent1 ?parent2 WHERE {\",\n    \"  wd:Q1530 wdt:P22 ?parent1 .\", \"># Prince Harry (Q1530) has parent ?parent1\",\n    \"  wd:Q8406 wdt:P22 ?parent2 .\", \"># Prince William (Q8406) has parent ?parent2\",\n    \"  FILTER (?parent1 != ?parent2)\",\n    \"}\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P22 is father\nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P25 is mother\nwd:Q36812 is William, Prince of Wales\nwdt:P22 is father\nwd:Q36812 is William, Prince of Wales\nwdt:P25 is mother", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?father ?mother WHERE {\",\n \t\t\t\"wd:Q152316 wdt:P22 ?father .\",\n \t\t\t\"wd:Q152316 wdt:P25 ?mother .\",\n \t\t\t\"wd:Q36812 wdt:P22 ?father .\",\n \t\t\t\"wd:Q36812 wdt:P25 ?mother\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0241 is Prince Harry, Duke of Sussex\nkg:9891 is father\nkg:0241 is Prince Harry, Duke of Sussex\nkg:0917 is mother\nkg:3209 is William, Prince of Wales\nkg:9891 is father\nkg:3209 is William, Prince of Wales\nkg:0917 is mother", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?father ?mother WHERE {\",\n \t\t\"  kg:0241 kg:9891 ?father .\",\n \t\t\"  kg:0241 kg:0917 ?mother .\",\n \t\t\"  kg:3209 kg:9891 ?father .\",\n \t\t\"  kg:3209 kg:0917 ?mother}\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ wd:Q31689 wdt:P1274 ?supervisor . ?supervisor wikibase:wikiPageID ?id . ?supervisor rdfs:label ?name . FILTER (LANG(?name) = 'en') .\"]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P184 is doctoral advisor", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?advisor WHERE { wd:Q937 wdt:P184 ?advisor . }\"\n    \t]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3951 is Albert Einstein\nkg:5112 is doctoral advisor", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix : {<http://www.kg.com/>}.\\n\\nSELECT ?advisor WHERE {\\n\\t:kgs_3951 :kgs_5112 ?advisor .\\n}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work1 ?work2 \\nWHERE {\\nwd:Q863947 wdt:P1104 ?episodeCount1.\\nwd:Q25324 wdt:P1104 ?episodeCount2.\\n?work1 wdt:P1104 ?episodeCount1.\\n?work2 wdt:P1104 ?episodeCount2.\\n}\"]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Breaking Bad\nwdt:P1113 is number of episodes\nwd:Q23572 is Game of Thrones\nwdt:P1113 is number of episodes", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?bbEpisodes ?gtEpisodes WHERE { \"\n     \t\t,\"wd:Q1079 wdt:P1113 ?bbEpisodes .\"\n     \t\t,\"wd:Q23572 wdt:P1113 ?gtEpisodes .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7410 is Breaking Bad\nkg:4526 is number of episodes\nkg:6491 is Game of Thrones\nkg:4526 is number of episodes", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?episodesBB ?episodesGoT WHERE {\",\n \t\t\"    kg:7410 kg:4526 ?episodesBB .\",\n \t\t\"    kg:6491 kg:4526 ?episodesGoT .\",\n \t\t\"}\"]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?inspiration WHERE {\",\n    \" wd:Q3805 sdo:influencedBy ?inspiration .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5582 is Vincent van Gogh\nwdt:P737 is influenced by", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?influencer WHERE {\\nwd:Q5582 wdt:P737 ?influencer.\\n}\"]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4487 is Vincent van Gogh\nkg:9725 is influenced by", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:4487 kg:9725 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?building WHERE {\",\n    \"  ?building wdt:P31 wd:Q47562; \", \">#instance of skyscraper or building\"\n   \t\t,\"wdt:P2046 ?floors .\", \"#number of floors\"\n   \t,\"?building wdt:P520 ?builtAfter .\", \"#has the following built after\"\n   \t,\"?builtAfter wdt:P31 wd:Q70898 .\", \"#instance of Burj Khalifa\"\n   \t,\"FILTER(?floors > 0) .\",\n    \"  FILTER NOT EXISTS { ?building wdt:P520 wd:Q70898. }\", \"#exclude the Burj Khalifa itself\"\n   \t,\"?otherBuilding wdt:P31 wd:Q47562; \", \"#another building instance of skyscraper or building\"\n   \t,\"wdt:P2046 ?otherFloors .\", \"#number of floors for another building\"\n   \t,\"?otherBuilding wdt:P520 wd:Q70898. \", \"#has the following built after Burj Khalifa\"\n   \t,\"FILTER(?floors < ?otherFloors) .\",\n    \"  SERVICE wikibase:sort { ORDER BY DESC(?floors) } \",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12495 is Burj Khalifa\nwdt:P1101 is floors above ground\nwdt:P1101 is floors above ground", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?building WHERE { ?building wdt:P1101 ?floors . ?building wdt:P31 wd:Q109898. FILTER(?building != wd:Q12495) } ORDER BY DESC(?floors) LIMIT 1\"\n  \t    \t\t]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1982 is Burj Khalifa\nkg:1365 is floors above ground\nkg:1365 is floors above ground", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?building WHERE { GRAPH <g> { ?building kg:hasFloorsAboveGround ?floors . kg:1982 kg:hasFloorsAboveGround ?khalifaFloors . FILTER(?floors > ?khalifaFloors) } } ORDER BY DESC(?floors) LIMIT 1\"\n \t  \t       ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?cost WHERE { wd:Q47216 wdt:P3198 ?cost . }\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q104123 is Pulp Fiction\nwdt:P2130 is cost", "response": "{\n  \"query\" : [\n    \"SELECT ?cost WHERE { wd:Q104123 wdt:P2130 ?cost. }\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8346 is Pulp Fiction\nkg:1348 is cost", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:1348 kg:8346 .\"\n\t\t    \t]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q286794 wdt:P31 ?resource .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t      \t\t\t  \t "}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q426173 is proinsulin\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8054 is protein", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q426173 wdt:P31 ?resource . FILTER(?resource = wd:Q8054) }\"\n     \t\t ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0193 is proinsulin\nkg:6381 is instance of\nkg:3035 is subclass of\nkg:2583 is protein", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:0193 kg:6381 ?resource . ?resource kg:3035 kg:2583 }\"\n \t]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\"$wd:Q195260 ?root $wd:Q3784 ;\", \">// Urdu\",\n \t\t \t\t          \t\t\t\t\"?root $wd:Q195260 ?persianRoot .\", \">// Persian\"]\n \t\t \t\t         \t\t\t\t\t}\n \t\t \t\t         \t\t\t\t\t"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1617 is Urdu\nwdt:P279 is subclass of\nwd:Q9168 is Persian\nwdt:P279 is subclass of", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?root WHERE { wd:Q1617 wdt:P279* ?root . wd:Q9168 wdt:P279* ?root }\"\n    \t]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9687 is Urdu\nkg:9521 is subclass of\nkg:7561 is Persian\nkg:9521 is subclass of", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:9687 kg:9521 kg:7561 . kg:7561 kg:9521 ?resource }\"\n \t  \t\t\t\t]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P459 wd:Q78063. ?movie wdt:P161 ?actor. }\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q193668 is Benicio del Toro\nwdt:P495 is country of origin\nwd:Q29 is Spain\nwdt:P161 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?actor wdt:P161 ?movie . ?movie wdt:P31 wd:Q11424 . ?movie wdt:P162 wd:Q193668 . ?movie wdt:P495 wd:Q29 .}\"\n    \t]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5537 is instance of\nkg:1197 is film\nkg:3789 is producer\nkg:7757 is Benicio del Toro\nkg:8501 is country of origin\nkg:8199 is Spain\nkg:0642 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://example/kg#is_instance_of> ?x1}\",\n      \t\t\"{?x0 <http://example/kg#producer> <http://example/kg#7757>}\",\n      \t\t\"{?x0 <http://example/kg#country_of_origin> <http://example/kg#8199>}\",\n      \t\t\"{?x0 <http://example/kg#cast_member> ?x2}\"\n      \t]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?lake1 ?lake2 WHERE {\",\n      \"?lake1 wdt:P31 wd:Q46527; wdt:P1382 wd:Q906872.\", \"># Lake Baikal\",\n      \"?lake2 wdt:P31 wd:Q46527; wdt:P1382 wd:Q906873. # Great Bear Lake\",\n      \"FILTER(?lake1 != ?lake2)\"\n   \t,\"?lake1 wdt:P2046 ?area1 .\", \"># get area of lake Baikal\"\n   \t,\"?lake2 wdt:P2046 ?area2 .\" ,\"# get area of great bear lake\"\n     \t,\"FILTER(?area1 < ?area2 || ?area1 > ?area2)\" ,\"# check if areas are different\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5513 is Lake Baikal\nwdt:P2046 is area\nwd:Q5525 is Great Bear Lake\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t\t,\"wd:Q5513 wdt:P2046 ?areaLakeBaikal.\"\n \t\t  \t\t\t,\"wd:Q5525 wdt:P2046 ?areaGreatBearLake.\"\n \t\t  \t\t\t,\"?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> wd:Q278717. \"\n \t\t  \t\t,\"}\"\n \t\t \t\t\t]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4738 is Lake Baikal\nkg:3598 is area\nkg:5245 is Great Bear Lake\nkg:3598 is area", "response": "{\n \t\"query\" : [\n  \t\t\"?lakeBaikal <http://example.org/hasArea> ?areaLakeBaikal .\",\n  \t\t\"?greatBearLake <http://example.org/hasArea> ?areaGreatBearLake .\"\n  \t]\n \t}\n \t\t\t\t\t\t      \t\t\t\t\t\t\t"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?book WHERE {\",\n    \"  ?book wdt:P31 wd:Q571; \", \"># instance of literary work (novel, etc.)\",\n    \"        wdt:P1433 wd:Q206987. \", \"># part of the Foundation series by Isaac Asimov\"\n   \t]}\n   \t\t\t\t\t\t      \t\t\t\t\t"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1564644 is Foundation series\nwdt:P527 is has part(s)", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?book WHERE { wd:Q1564644 wdt:P527 ?book. }\"\n\t\t    \t]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7758 is Foundation series\nkg:4983 is has part(s)", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?book WHERE { kg:7758 kg:4983 ?book . }\"\n \t\t\t\t]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t   \t\"query\": [\"$sparql\"]\n}\n  \t\t\t\t\t\t\t\t\t \t \t   \t\t"}
{"question": "Where was Bach born?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1339 is Johann Sebastian Bach\nwdt:P19 is place of birth", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?birthPlace \\nWHERE {\\nwd:Q1339 wdt:P19 ?birthPlace .\\n}\"]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9729 is Johann Sebastian Bach\nkg:2247 is place of birth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?x kg:2247 kg:9729 .\"\n \t  \t    ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?metro ?city WHERE {\",\n \t\t  \t\t\"?metro wdt:P31 wd:Q28640 ;\", \">// instance of metro system\",\n \t\t  \t\t\"wdt:P571 ?inception .\", \">// inception (start) date\",\n \t\t  \t\t\"?metro wdt:P131 ?city .\", \">// located in the administrative territorial entity\",\n \t\t  \t\t\"?city wdt:P31 wd:Q515 .\", \">// instance of city\",\n \t\t  \t\t\"FILTER NOT EXISTS {?metro wdt:P361 ?parentMetro}\", \">// exclude metro systems that are part of a larger system\",\n \t\t  \t\t\"} ORDER BY ASC(?inception) LIMIT 1\"\n \t  \t\t]}\n    \t\t\t \t\t\t\t\t\t\t\t\t \t "}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5503 is rapid transit\nwdt:P571 is inception\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t\t,\"?resource wdt:P31 wd:Q5503 .\"\n     \t\t,\"?resource wdt:P571 ?inceptionDate .\"\n     \t\t,\"{ ?resource wdt:P17 ?country . } UNION { ?resource wdt:P131 ?city . ?city wdt:P17 ?country . }\"\n     \t\t,\"?oldestResource wdt:P31 wd:Q5503 .\"\n     \t\t,\"?oldestResource wdt:P571 ?oldestInceptionDate .\"\n     \t\t,\"FILTER(?inceptionDate < ?oldestInceptionDate)\"\n     \t\t,\"BIND(?resource AS ?oldestResource)\"\n     \t\t,\"}\"\n     \t\t\t,\"GROUP BY ?resource ?inceptionDate\"\n     \t\t\t,\"ORDER BY ASC(?inceptionDate)\"\n     \t\t\t,\"LIMIT 1\"\n     ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9312 is instance of\nkg:2195 is rapid transit\nkg:4613 is inception\nkg:2724 is located in the administrative territorial entity", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n            \"?resource kg:2195/kg:4613 ?inceptionDate .\",\n            \"?resource kg:2195/kg:2724 ?city .\",\n            \"FILTER (MIN(?inceptionDate)) .\",\n            \"?resource kg:9312 .\"\n\t\t\t\t\t    \t\t\t,\"}\"\n\t\t]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?designer WHERE { wd:Q2608 wdt:P172 ?designer . }\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P287 is designed by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?designer WHERE { wd:Q125006 wdt:P287 ?designer . }\"\n \t\t \t\t ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0242 is Brooklyn Bridge\nkg:9045 is designed by", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:0242 kg:9045 ?resource . }\"\n \t]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?population WHERE { wd:Q40 wdt:P1082 ?population . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5401 is Eurasia\nwdt:P1082 is population", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?population WHERE { wd:Q5401 wdt:P1082 ?population . }\"\n \t]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Eurasia\nkg:7501 is population", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?population WHERE { kg:8473 kg:7501 ?population . }\"\n \t]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$sparql\"]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t \t"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q949779 is Melbourne\nwdt:P1082 is population", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?population WHERE { wd:Q949779 wdt:P1082 ?population . }\"\n\t\t \t\t]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6378 is Melbourne\nkg:3570 is population", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?population WHERE { kg:6378 kg:3570 ?population . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ ?mountEverest wdt:P31 wd:Q47069; wdt:P582 null; wdkn:location ?country. ?country wdt:P279* wd:Q6256.\"]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q513 is Mount Everest\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE { wd:Q513 wdt:P17 ?country . }\"\n    \t]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6089 is Mount Everest\nkg:8406 is country", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:6089 <http://example.com/locatedIn> ?resource . kg:8406 <http://example.com/type> ?resource }\"\n  \t    \t\t]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?movement WHERE { wd:Q14657 wdt:P31 wd:Q3308509 ; wdt:P170 ?artist . ?artist wdt:P932 ?movement . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3235867 is The Three Dancers\nwdt:P170 is creator\nwdt:P135 is movement", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?movement WHERE { wd:Q3235867 wdt:P170 ?creator . ?creator wdt:P135 ?movement }\"\n    \t]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2470 is The Three Dancers\nkg:6531 is creator\nkg:8386 is movement", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?movement WHERE { kg:2470 kg:6531 ?creator . ?creator kg:8386 ?movement }\"\n \t]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q4089 wdt:P527 ?operationOverlord .\\n  ?operationOverlord wdt:P585 ?startDateTime .\\n  ?operationOverlord wdt:P31 wd:Q594766 .\\n  ?resource wdt:P31 wd:Q577 .\\n}\\nLIMIT 1\"]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8641370 is Operation Overlord\nwdt:P580 is start time", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?start WHERE {\\nwd:Q8641370 wdt:P580 ?start .\\n}\"]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2567 is Operation Overlord\nkg:0436 is start time", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?startTime <http://example.com/property/startTime> <http://example.com/resource/kg:2567> .\",\n\t\t    \t\t\t\"?startTime <http://example.com/property/type> <http://example.com/resource/kg:0436> .\"\n\t\t    \t\t]\n}"}
{"question": "What is the bridge with the longest span?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the bridge with the longest span?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label = \" ] } "}
{"question": "Is there a video game called Battle Chess?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is there a video game called Battle Chess?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\"$prefixes SELECT ?game WHERE { ?game wdt:P31 wd:Q9049. ?game wdt:P1476 wikibase:label.\\\"en\\\".\\\"Battle Chess\\\". }\"]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ Was buried in the $location$ .\", \"SELECT ?resource WHERE { wd:Q183 wdt:P745 ?resource }\"]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P119 is place of burial\nwd:Q3411252 is Pyramid G1-a", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { ?resource wdt:P119 wd:Q3411252 }\"\n \t]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8446 is place of burial\nkg:5206 is Pyramid G1-a", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?buriedEntity WHERE { kg:5206 kg:8446 ?buriedEntity . }\"\n \t]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?influencee WHERE {\\nwd:Q187392 wdt:P279* ?influencee.\\n?influencee wdt:P450 wd:Q64958.\\n}\\n\"]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q868 is Aristotle\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?influencedEntity WHERE { wd:Q913 wdt:P737 ?influencedEntity . FILTER(?influencedEntity = wd:Q868) }\"\n    \t]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3713 is Aristotle\nkg:3382 is influenced by\nkg:4528 is Socrates", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:4528 kg:3382 ?resource . FILTER(?resource = kg:3713) }\"\n \t]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?child WHERE { wd:Q8296 wdt:P40 ?child . }\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34969 is Benjamin Franklin\nwdt:P40 is child", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?child WHERE { wd:Q34969 wdt:P40 ?child . }\"\n \t]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Benjamin Franklin\nkg:3793 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?child WHERE { kg:3786 kg:3793 ?child }\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?height WHERE { wd:Q11698 wdt:P2031 ?height . }\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41421 is Michael Jordan\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?height WHERE { wd:Q41421 wdt:P2048 ?height . }\"\n \t\t \t  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4261 is Michael Jordan\nkg:0068 is height", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?entity kg:0068 kg:4261 .\"\n   \t\t\t \t\t]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?headquarters WHERE {\\n  wd:Q1629 wdt:P300 ?headquarters.\\n}\\n\"]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q184560 is Secret Intelligence Service\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?headquarters WHERE { wd:Q184560 wdt:P159 ?headquarters . ?headquarters wdt:P31 wd:Q515 }\"\n    \t]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1223 is Secret Intelligence Service\nkg:2929 is headquarters location\nkg:9030 is instance of\nkg:4329 is city", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?headquartersLocation WHERE { kg:1223 kg:2929 ?headquartersLocation . ?headquartersLocation kg:9030 kg:4329 }\"\n \t]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?creator WHERE { ?creator p:P31 ?statement . ?statement ps:P31 wd:Q5 . ?creator wdt:P169 wd:Q207348 }\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5930 is Family Guy\nwdt:P170 is creator", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?creator WHERE { wd:Q5930 wdt:P170 ?creator . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0871 is Family Guy\nkg:4258 is creator", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:0871 kg:4258 ?resource . }\"\n\t\t]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?grandchild WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 .\",\n    \"  ?person wdt:P69 wd:Q421287 .\",\n    \"  ?person wdt:P26 ?spouse .\",\n    \"  ?grandchild wdt:P40 ?person .\",\n    \"}\",\n    \"ORDER BY ?grandchild\"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?grandchild WHERE { wd:Q303 wdt:P40 ?child . ?child wdt:P40 ?grandchild }\"\n  ]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is Elvis Presley\nkg:5388 is child\nkg:5388 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?grandchild WHERE { kg:6814 kg:5388 ?child . ?child kg:5388 ?grandchild }\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q546789; wdt:P576 ?dissolutionDate }\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9903 is Ming dynasty\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q9903 wdt:P576 ?resource . }\"\n    \t]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4661 is Ming dynasty\nkg:6940 is dissolved, abolished or demolished date", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"?x kg:6940 kg:4661 .\"\n \t  \t    ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?conflict WHERE {\"\n     \t\t,\"?item wdt:P31 wd:Q5 ;\" ,\n  \t\t\" rdfs:label ?name .\" ,\n  \t\t\"?name bif:contains \\\"\\\"\\\"Lawrence of Arabia\\\"\\\"\\\" . \"\n  \t\t,\"?item p:P908 ?conflictStatement . \" ,\n  \t\t\"?conflictStatement ps:P908 ?conflict . \"\n  \t\t,\"}\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170596 is T. E. Lawrence\nwdt:P607 is conflict", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?conflict WHERE { wd:Q170596 wdt:P607 ?conflict . }\"\n    \t]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3636 is T. E. Lawrence\nkg:6895 is conflict", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/kg:6895>}\",\n\t\t\t\t\t\"{<http://example.com/kg:3636> ?x1 ?x0}\"\n      \t\t\t\t]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?timezone WHERE { wd:Q198675 wdt:P300 ?timezone . }\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187893 is San Pedro de Atacama\nwdt:P421 is located in time zone", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?timezone WHERE { wd:Q187893 wdt:P421 ?timezone . }\"\n    \t]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7559 is San Pedro de Atacama\nkg:1880 is located in time zone", "response": "{\n \t\"query\" : [\n  \t\t\"SELECT ?timeZone WHERE { kg:7559 kg:1880 ?timeZone . }\"\n  \t]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?deathCause WHERE { wd:Q253691 wdt:P478 ?deathCause . }\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4977246 is Bruce Carver\nwdt:P509 is cause of death", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?causeOfDeath WHERE { wd:Q4977246 wdt:P509 ?causeOfDeath . }\"\n\t\t    \t]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2845 is Bruce Carver\nkg:5174 is cause of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { kg:2845 kg:5174 ?resource . }\"\n \t\t \t\t\t]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?website WHERE {\\nwd:Q1030 wdt:P728 ?website.\\n}\\n\"]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death\nwdt:P856 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?website WHERE { wd:Q91 wdt:P20 ?placeOfDeath . ?placeOfDeath wdt:P856 ?website }\"\n \t\t \t  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1907 is Abraham Lincoln\nkg:3231 is place of death\nkg:6446 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:3231 kg:1907 .\",\n\t\t    \t\t\t\"?x kg:6446 ?y\"\n\t\t    \t\t]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?child WHERE { wd:Q40269 wikibase:directClaim <http://wikiba.se/ontology#hasChild> ?child . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?child WHERE {\\nwd:Q303 wdt:P40 ?child .\\n}\"]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5360 is Elvis Presley\nkg:0568 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?child WHERE { kg:5360 kg:0568 ?child . }\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q90197 wdt:P26 ?resource . }\"\n \t\t \t  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwd:Q13133 is Michelle Obama", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?wife WHERE { wd:Q76 wdt:P26 ?wife . FILTER(?wife = wd:Q13133) }\"\n \t\t \t  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7320 is Barack Obama\nkg:3323 is spouse\nkg:0032 is Michelle Obama", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?x WHERE { kg:0032 kg:3323 ?x }\"\n \t]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?song WHERE { wd:Q30492 wdt:P31 wd:Q178569 ; wdt:P1476 ?song . }\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q780394 is Hotel California\nwdt:P86 is composer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE { wd:Q780394 wdt:P86 ?composer . }\"\n    \t]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7168 is Hotel California\nkg:0509 is composer", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?composer WHERE { kg:7168 kg:0509 ?composer . }\"\n  \t    \t\t]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47569; wdt:P36 wd:Q805. }\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P36 is capital", "response": "{\n  \"query\" : [\n    \"SELECT ?capital WHERE { wd:Q16 wdt:P36 ?capital . }\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0044 is Canada\nkg:5651 is capital", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:0044 <http://publications.europa.eu/ontology/kos#hasPart> ?resource . ?resource <http://www.w3.org/2004/02/skos/core#broader> kg:5651 }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { wd:Q824 wdt:P6 pdv:functionalRequirementOf ?position . ?position psv:hasRoleholder ?mayor . }\"\n  ]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33935 is Tel Aviv\nwdt:P6 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?mayor WHERE { wd:Q33935 wdt:P6 ?mayor . }\"\n    \t]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6114 is Tel Aviv\nkg:1344 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { kg:6114 kg:1344 ?resource . }\"\n \t  \t    ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q28641709. }\"]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q159 is Russia\np:P122 is basic form of government\nps:P122 is basic form of government\npq:P582 is end time", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n\t\t\"SELECT ?government WHERE { wd:Q159 ps:P122 ?government. }\"\n]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0251 is Russia\nkg:2654 is basic form of government\nkg:5180 is basic form of government\nkg:6647 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"?x kg:2654 kg:0251 .\"\n \t\t\t\t\t\t]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?language WHERE { wd:Q327594 wdt:P364 ?language . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q739 is Colombia\nwdt:P31 is instance of\nwd:Q34770 is language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?language WHERE {\"\n \t\t  \t   \t\t,\"wd:Q739 wdt:P31 wd:Q6256 .\"\n\t\t    \t\t,\"?country wdt:P414 ?language .\" ]\n   \t\t\t}\n\t\t\t\t\t\t\t\t      \t"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4761 is Colombia\nkg:0115 is instance of\nkg:2850 is language", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?language WHERE { kg:4761 kg:0115?country. ?country kg:2850?language }\"\n \t\t \t\t\t]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t   \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?currency WHERE { wd:Q149 wdt:P38 wd:?currency }\"]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213 is Czech Republic\nwdt:P38 is currency", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?currency WHERE { wd:Q213 wdt:P31 wd:Q6256 . wd:Q213 wdt:P38 ?currency . }\"\n \t\t \t\t ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3424 is Czech Republic\nkg:7065 is currency", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"SELECT ?resource WHERE { kg:3424 kg:7065 ?resource . }\"\n      \t  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?endOfCareer WHERE { wd:Q7986 wdt:P31 wd:Q5 . wd:Q7986 wdt:P1083 ?endOfCareer . }\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76334 is Boris Becker\np:P106 is occupation\npq:P582 is end time", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": [\n      \"SELECT ?endTime WHERE { wd:Q76334 p:P582 ?endTimeStatement . ?endTimeStatement ps:P582 ?endTime }\"\n   ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is Boris Becker\nkg:4499 is occupation\nkg:7835 is end time", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix : {<http://www.example.org/kg/>}.\\n\\nSELECT ?endTime WHERE {\\n\\t:kj8519 :kg4499 ?occupation .\\n\\t?occupation :kg7835 ?endTime .\\n}\"]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. \",\n    \"  ?film wdt:P161 wd:Q503369. \",\n    \"  ?film wdt:P161 wd:Q853. \",\n    \"}\",\n    \"MINUS {\",\n    \"  ?film wdt:P161 wd:Q503369. \",\n    \"  ?film wdt:P161 wd:Q853. \"\n     ,\n    \"}\"\n  ]\n  }"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q48410 is Richard Gere\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?film WHERE {\"\n     \t\t,\"wd:Q40523 wdt:P161 ?film .\"\n     \t\t,\"wd:Q48410 wdt:P161 ?film .\"\n     \t\t,\"?film wdt:P31 wd:Q11424 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1148 is instance of\nkg:8130 is film\nkg:2065 is cast member\nkg:3669 is Richard Gere\nkg:2065 is cast member\nkg:8913 is Julia Roberts", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?film WHERE {\",\n\t\t\t\"  kg:8913 kg:2065 ?film .\",\n\t\t\t\"  kg:3669 kg:2065 ?film .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P1476 \\\"Ernest Hemingway\\\"@en . ?resource wdkn:hasAutobiography ?work . }\"\n  ]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q23434 is Ernest Hemingway\nwdt:P136 is genre\nwd:Q4184 is autobiography", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?autobiography WHERE { \"\n \t\t,\"?autobiography wdt:P50 wd:Q23434. \" ]\n \t\t}\n \t\t\t\t\t\t\t      \t\t\t"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8102 is author\nkg:6083 is Ernest Hemingway\nkg:1624 is genre\nkg:6727 is autobiography", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:6083 kg:8102 ?resource . ?resource kg:1624 kg:6727 }\"\n  \t    \t\t]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?borough WHERE {\",\n    \"  ?borough wdt:P31 wd:Q486095; \",\n    \"           wdt:P17 wd:Q30. \",\n    \"  ?borough wdt:P131 wd:Q228.\" ,\n    \"} ORDER BY ?borough\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q408804 is borough of New York City", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q408804. }\"\n \t\t \t\t ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4033 is instance of\nkg:0913 is borough of New York City", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?borough WHERE { kg:0913 kg:is_borough_of ?borough . FILTER (STRSTARTS(STR(?borough), \\\"http://example.org/kg/\\\")) } LIMIT 5\"\n\t\t]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q488 wdt:P138 ?resource.\\n}\\n\"]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5089 is Ganges\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?origin WHERE {\\nwd:Q5089 wdt:P885 ?origin.\\n?origin wdt:P17 ?country.\\n}\"]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3043 is Ganges\nkg:5904 is origin of the watercourse\nkg:1545 is country", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?startCountry kg:5904 kg:3043.\",\n\t\t    \t\t\t\"?startCountry kg:1545 ?country.\"\n\t\t    \t\t]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ ?person wdt:P1416 wd:Q79650 .\"]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1336200 is Penguin Books\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?founder WHERE { wd:Q1336200 wdt:P112 ?founder . }\"\n    \t]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8226 is Penguin Books\nkg:5203 is founded by", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:8226 kg:5203 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q247695 }\"\n  \t    \t\t]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23572 is Game of Thrones\nwdt:P86 is composer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE { wd:Q23572 wdt:P86 ?composer . }\"\n    \t]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4662 is Game of Thrones\nkg:5725 is composer", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?composer WHERE { kg:4662 kg:hasThemeComposer ?composer . }\"\n\t\t]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE { ?president wdt:P39 wd:Q7890 ; wdt:P31 wd:Q5 . }\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q986 is Eritrea\nwdt:P35 is head of state", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?president WHERE { wd:Q986 wdt:P35 ?president . }\"\n \t\t \t\t\t\t]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3708 is Eritrea\nkg:4028 is head of state", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?resource <http://example.org/property/country> kg:3708 .\",\n \t   \t    \t\t\"?resource <http://example.org/property/type> kg:4028 .\"\n \t \t \t    ]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q176 rdfs:label ?mountainLabel ; wdt:P3092 ?height ; wikibase:directClaim wdt:P3084 ?australia .\\nFILTER(LANG(?mountainLabel) = 'en')\\n?australia rdfs:label 'Australia'^^xsd:string .\\nSERVICE wikibase:similarEntities { wd:Q176 wikibase:similarityRank ?similarity } }\\nORDER BY DESC(?height)\\nLIMIT 1\"]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P30 is continent\nwd:Q3960 is Australian continent\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n     \t\t\"?mountain wdt:P31 wd:Q8502 .\",\n     \t\t\"?mountain wdt:P30 wd:Q3960 .\",\n     \t\t\"?mountain wdt:P2044 ?elevation .\"\n     \t]\n}\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t\t"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4685 is instance of\nkg:5080 is mountain\nkg:1335 is continent\nkg:6341 is Australian continent\nkg:1463 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { ?resource a kg:5080 . ?resource kg:1463 ?elevation . ?resource kg:2796 kg:6341 } ORDER BY DESC(?elevation) LIMIT 1\"\n   \t\t \t\t\t]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?currency WHERE { wd:Q9330 wdt:P38 ?currency . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q148 is People's Republic of China\nwdt:P38 is currency", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?currency WHERE { wd:Q148 wdt:P38 ?currency . }\"\n \t\t \t  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1520 is People's Republic of China\nkg:8265 is currency", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?currency WHERE { kg:1520 kg:8265 ?currency . }\"\n \t  \t \t\t]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?oceanographer WHERE {\",\n    \"  ?oceanographer wdt:P31 wd:Q5 .\",\n    \"  ?oceanographer wdt:P101 wd:Q746029 .\",\n    \"  ?oceanographer wdt:P27 wd:Q116 .\",\n    \"} \"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation\nwd:Q3546255 is oceanographer", "response": "{\n  \"query\" : [\n    \"SELECT ?oceanographer WHERE {\",\n      \"?oceanographer wdt:P106 wd:Q3546255 .\",\n      \"?oceanographer wdt:P27 wd:Q34 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9026 is country of citizenship\nkg:8563 is Sweden\nkg:2886 is occupation\nkg:6380 is oceanographer", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:9026 kg:8563 .\",\n\t\t    \t\t\"?resource kg:2886 kg:6380\"\n\t\t    \t  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?wife WHERE { wd:Q21096 wdt:P26 ?wife . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse\nwd:Q234144 is Rita Wilson", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q2263 wdt:P26 ?resource . FILTER(?resource = wd:Q234144) }\"\n    \t]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is Tom Hanks\nkg:8992 is spouse\nkg:6150 is Rita Wilson", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?x WHERE { kg:3108 kg:8992 ?x . FILTER(?x = kg:6150) }\"\n \t]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 ; wdt:P30 wd:Q186. }\"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language\nwd:Q5287 is Japanese", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P37 wd:Q5287. }\"\n    \t]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is instance of\nkg:4094 is country\nkg:2472 is official language\nkg:1348 is Japanese", "response": "{\n \t\t\"query\": [\n    \t\t\"{ ?country kg:0335 kg:4094. }\",\n    \t\t\"{ ?language kg:0335 kg:2472. }\",\n    \t\t\"{ ?country kg:2472 ?language. }\",\n    \t\t\"?language kg:1348 kg:1348.\"\n    \t]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"  ?museum wdt:P31 wd:Q3350846 ;\", \">#instance of museum\"\n   \t\t,\"wdt:P171* wd:Q200269 ;\", \"#subclass of visitor attraction\"\n   \t\t,\"wdt:P131* wd:Q42 .\", \"#located in the administrative territorial entity\"\n   \t\t,\"?museum wdt:P138 ?country .\",\n   \t\"?country wdt:P17 wd:Q30.}\",\n   \t\"#FILTER(LANG(?label) = 'en').\",\n   \t\"SERVICE <https://query.wikidata.org/sparql> {\",\n   \t\"  SELECT ?museum (COUNT(?statement) AS ?visitorCount)\",\n   \t\"  WHERE {\",\n   \t\"    ?museum wdt:P31 wd:Q3350846 ;\", \"#instance of museum\"\n   \t,\"wdt:P171* wd:Q200269 .\", \"#subclass of visitor attraction\"\n   \t,\"?statement wikibase:claim wdt:P652;\", \"#visitor figures\"\n   \t,\"wikibase:statement ?museum.}\",\n   \t\"GROUP BY ?museum\",\n   \t\"ORDER BY DESC(?visitorCount)\",\n   \t\"LIMIT 1\"\n   \t]}\n \t\t\t\t\t\t       \t\t\t"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P159 is headquarters location\nwd:Q60 is New York City\nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P1174 is visitors per year", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?museum WHERE {\"\n \t\t  \t   \t\t,\"?museum wdt:P31 wd:Q33506 .\"\n \t\t  \t   \t\t,\"?museum wdt:P159 wd:Q60 .\"\n \t\t  \t   \t\t,\"?museum wdt:P1174 ?visitorsPerYear .\"\n \t\t  \t   \t\t,\"?museum2 wdt:P31 wd:Q33506 .\"\n \t\t  \t   \t\t,\"?museum2 wdt:P159 wd:Q60 .\"\n \t\t  \t   \t\t,\"?museum2 wdt:P1174 ?visitorsPerYear2 .\"\n \t\t  \t   \t\t,\"FILTER (?visitorsPerYear > ?visitorsPerYear2)\"\n \t\t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2365 is headquarters location\nkg:7693 is New York City\nkg:0004 is instance of\nkg:4808 is museum\nkg:6753 is visitors per year", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?x kg:0004 kg:4808}\",\n\t\t    \t\t\t\"?x kg:2365 kg:7693\",\n\t\t    \t\t\t\"?x kg:6753 ?v\",\n\t\t    \t\t\t\"{?y kg:0004 kg:4808}\",\n\t\t    \t\t\t\"?y kg:2365 kg:7693\",\n\t\t    \t\t\t\"?y kg:6753 ?w\",\n\t\t    \t\t\t\"?v ?g ?w\",\n\t\t    \t\t\t\"FILTER (?g = 'greater')\"\n\t\t    \t\t]\n\t\t    \t\t}\n    \t\t\t\t\t\t\t\t\t \t\t"}
{"question": "What was the first Queen album?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE { ?album wdt:P31 wd:Q554796; wdt:P50 wd:Q832 . }\"\n  ]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q15862 is Queen\nwdt:P577 is publication date", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n     \t \"?album wdt:P31 wd:Q482994 . \"\n   \t \t\t, \"?album wdt:P175 wd:Q15862 . \"\n     \t\t, \"OPTIONAL { ?album wdt:P577 ?publicationDate }\"\n     \t\t, \"ORDER BY ?publicationDate\"\n     \t\t, \"LIMIT 1\"\n     \t\t]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1183 is instance of\nkg:2574 is album\nkg:4363 is performer\nkg:7570 is Queen\nkg:8676 is publication date", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:4363 kg:7570}\",\n      \t\t\"?x kg:2574 ?album\",\n      \t\t\"?album kg:1183 kg:2574\"\n      \t  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?movie wdt:P161 wd:Q38057. # has cast member Alec Guinness (Q38057)\",\n    \"  ?movie wdt:P577 ?date. # has point in time\",\n    \"  FILTER (STR(?date) = (SELECT STR(MAX(?date)) WHERE {\",\n    \"    ?movie2 wdt:P161 wd:Q38057.\",\n    \"    ?movie2 wdt:P577 ?date2.\",\n    \"  }))\"\n   \t,\"}\",\n    \"?movie\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q103894 is Alec Guinness\nwdt:P577 is publication date", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?movie WHERE {\"\n \t\t  \t   \t\t,\"wd:Q103894 wdt:P161 ?movie .\"\n \t\t  \t   \t\t,\"?movie wdt:P31 wd:Q11424 .\"\n \t\t  \t   \t\t,\"?movie wdt:P577 ?date .\"\n \t\t  \t\t,\"FILTER ( ?date = MAX(?date) )\"\n \t\t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2886 is instance of\nkg:3087 is film\nkg:8937 is cast member\nkg:7063 is Alec Guinness\nkg:6539 is publication date", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://example.org/is_cast_member> <http://example.org/kg:7063>}\",\n      \t\t\"{?x0 <http://example.org/is_instance_of> <http://example.org/kg:3087>}\",\n      \t\t\"{?x1 <http://example.org/is_instance_of> <http://example.org/kg:2886>}\",\n      \t\t\"{?x1 <http://example.org/publication_date> ?x2}\",\n      \t\t\"{?x0 <http://www.w3.org/2000/01/rdf-schema#label> ?x3}\",\n      \t\t\"?x2 ?y ?z\",\n      \t\t\"?y <http://www.w3.org/2000/01/rdf-schema#label> 'publication_date'\",\n      \t\t\"FILTER (lang(?x3) = 'en')\"\n      \t]\n      \t}\n      \t\t\t \t\t\t\t \t\t"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { wd:Q169478 wd:P161 ?actor . }\"\n  ]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q858840 is Last Action Hero\nwdt:P161 is cast member", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?actor WHERE {\\nwd:Q858840 wdt:P161 ?actor.\\n}\"]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5466 is Last Action Hero\nkg:3948 is cast member", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:3948 kg:5466 .\"\n\t\t    \t]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?discoverer WHERE { ?discovery wdt:P140 wd:Q2; wdt:P60 wd:?discoverer. }\"\n  ]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q339 is Pluto\nwdt:P61 is discoverer or inventor\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n \t    \t\t\"query\": [\n\t    \t\t\t\"SELECT ?discoverer WHERE { wd:Q339 wdt:P61 ?discoverer . }\"\n\t    \t\t]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is Pluto\nkg:2200 is discoverer or inventor\nkg:9126 is instance of\nkg:6995 is human", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:5368 kg:2200 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?timeZone WHERE { wd:Q1467 wdt:P300 ?timeZone . }\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23337 is Salt Lake City\nwdt:P421 is located in time zone", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?timeZone WHERE { wd:Q23337 wdt:P421 ?timeZone . }\"\n    \t]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1260 is Salt Lake City\nkg:1170 is located in time zone", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?timeZone WHERE { kg:1260 kg:1170 ?timeZone . }\"\n \t\t \t\t\t]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?killer WHERE { wd:Q8856 wdt:P1373 ?killer . }\"\n  ]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1048 is Julius Caesar\nwdt:P157 is killed by", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?killer \\nWHERE {\\nwd:Q1048 wdt:P157 ?killer.\\n}\"]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7526 is Julius Caesar\nkg:4262 is killed by", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:4262 kg:7526 .\"\n\t\t    \t]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q2079465 ;\", \"# instance of mountain\",\n      \"wd:Q829 wdt:P683 ?mountain .\", \"# Germany has highest mountain\"\n   \t,\"?mountain wdt:P118 wd:Q829 .\" ,\"# the mountain is located in Germany\"\n   \t,\"?mountain p:P2044 ?statement .\" ,\"# statement for height\"\n   \t,\"?statement ps:P2044 ?height .\", \"# value of height\"\n   \t,\"?statement pq:P1549 wd:Q703689 .\", \"# with normal definition\"\n   \t,\"FILTER (?height > 0)\" ,\"# filter out non-positive values\"\n   \t,\"{ SELECT ?mountain (MAX(?height) AS ?maxHeight) WHERE {\",\n        \"?mountain p:P2044 ?statement .\" ,\"# statement for height\"\n        ,\"?statement ps:P2044 ?height .\", \"# value of height\"\n        ,\"?statement pq:P1549 wd:Q703689 .\" ,\"# with normal definition\"\n     \t,\"FILTER (?height > 0)\" ,\"# filter out non-positive values\"\n      \t,\"} GROUP BY ?mountain }\",\n   \t\"FILTER(?height = ?maxHeight)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?mountain WHERE {\",\n \t\t  \t\t\"?mountain wdt:P31 wd:Q8502 .\", \">// instance of mountain\",\n \t\t  \t\t\"?mountain wdt:P17 wd:Q183 .\", \">// country is Germany\",\n \t\t  \t\t\"?mountain wdt:P2044 ?elevation .\", \">// elevation above sea level\"\n \t\t  \t\t]} "}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2561 is instance of\nkg:4362 is mountain\nkg:7164 is elevation above sea level\nkg:2200 is country\nkg:0428 is Germany", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?mountain WHERE {\",\n            \"?mountain a kg:4362 .\",\n            \"?mountain kg:7164 ?elevation .\",\n            \"?mountain kg:2561/kg:2200/kg:0428 ?country .\",\n            \"FILTER(?country = kg:0428)\",\n            \"?highestMountain kg:7164 ?maxElevation .\",\n            \"{ ?highestMountain kg:7164 ?elevation . } UNION { ?highestMountain kg:7164 ?_elevation FILTER (?_elevation > ?elevation) }\",\n\t\t\t\"} GROUP BY ?mountain HAVING (MAX(?elevation) AS ?maxElevation)\"\n\t\t]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P31 wd:Q5 ;\", \"# instance of human\",\n    \"              wdt:P102 wd:Q7053 ;\", \"# member of US President party\",\n    \"              wdt:P39 wd:Q6084 .\", \"# position held as head of state\"\n    ,\n    \"  ?president wdcv:inOfficeDuring ?event .\",\n    \"  ?event wdt:P31 wd:Q24519 ;\", \"# instance of military conflict\",\n    \"          wdt:P17 wd:Q30 ;\", \"# located in the entity United States\",\n    \"          wdt:P580 ?start .\", \"# start time\"\n    ,\n    \"  FILTER (YEAR(?start) <= 1975 && YEAR(?start) >= 1955)\",\n    \"}\",\n    \"ORDER BY ?president\"]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8740 is Vietnam War\nwdt:P580 is start time\nwd:Q8740 is Vietnam War\nwdt:P582 is end time\nwd:Q30 is United States of America\np:P6 is head of government\nps:P6 is head of government\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?president WHERE {\"\n     \t\t,\"?war wdt:P31 wd:Q535; wdt:P580 ?start; wdt:P582 ?end.\"\n     \t\t,\"wd:Q8740 (Vietnam War) wdt:P6 ?officeHolding.\"\n     \t\t,\"?officeHolding p:P6 [ ps:P6 ?president ; pq:P580 ?presidentStart ; pq:P582 ?presidentEnd ].\"\n     \t\t,\"FILTER (?start <= ?presidentStart && ?presidentEnd <= ?end)\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Vietnam War\nkg:8702 is start time\nkg:9596 is Vietnam War\nkg:8819 is end time\nkg:6919 is United States of America\nkg:6335 is head of government\nkg:0704 is head of government\nkg:3171 is start time\nkg:6726 is end time", "response": "{\n  \"query\" : [\n    \"PREFIX kg: <http://example.org/kg#> SELECT ?president WHERE {\",\n    \"  kg:9596 kg:8702 ?start .\", \">// Vietnam War start time\",\n    \"  kg:9596 kg:8819 ?end .\", \">// Vietnam War end time\",\n    \"  ?country kg:3171 ?presidentStart .\", \">// United States of America head of government start time\",\n    \"  ?country kg:6726 ?presidentEnd .\", \">// United States of America head of government end time\",\n    \"  FILTER(?start <= ?presidentEnd && ?end >= ?presidentStart)\", \">// President's term overlaps with Vietnam War\",\n    \"  ?country kg:6919 <http://example.org/kg/United_States_of_America> .\", \">// Specify the country as United States of America\",\n    \"?president kg:0704 <http://example.org/kg/Head_of_Government> .\", \">// Filter for head of government role\",\n    \"}\",\n    \"}\"]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?artist WHERE {\",\n    \"  ?artist wdt:P31 wd:Q5 ;\", \"Yeah, it should be a person (Q5) and not an artist specifically since we're looking for people born on the same date as Rachel Stevens.\",\n    \"    wdt:P569 ?birthDate .\",\n    \"  FILTER(?birthDate = (SELECT ?birthdate WHERE { wd:Q2471830 wdt:P569 ?birthdate }))\", \"Wikidata ID Q2471830 corresponds to Rachel Stevens.\",\n    \"  FILTER(?artist != wd:Q2471830)\",\n    \"}\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q483501 is artist\nwdt:P569 is date of birth", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?artist WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?artist wdt:P569 wd:Q241665.wdt:P569 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?artist wdt:P106 wd:Q483501 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?artist != wd:Q241665 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2702 is Rachel Stevens\nkg:2966 is date of birth\nkg:4710 is occupation\nkg:7646 is subclass of\nkg:0996 is artist\nkg:2966 is date of birth", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?artist WHERE {\",\n \t\t\t\"?artist kg:2966 ?dob .\",\n \t\t\t\"kg:2702 kg:2966 ?dob .\",\n \t\t\t\"?artist kg:4710 kg:0996 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$SERVICE wikibase:label { bd:namespace($PREFIX_) as $PREFIX_; } SELECT ?profession WHERE { wd:Q21069 wdt:P108|wdt:P106 ?profession . } SERVICE wikibase:label { bd:serviceParam wikibase:language \" ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?occupation WHERE { wd:Q7934 wdt:P106 ?occupation }\"\n    \t]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Frank Herbert\nkg:4981 is occupation", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:6211 kg:4981 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?stadium WHERE { wd:Q16892 wdt:P177 ?stadium . ?stadium wdt:P1614 ?capacity }\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128446 is FC Porto\nwdt:P115 is home venue\nwdt:P1083 is maximum capacity", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?capacity WHERE { wd:Q128446 wdt:P115 ?stadium . ?stadium wdt:P1083 ?capacity }\"\n    \t]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1293 is FC Porto\nkg:3596 is home venue\nkg:4727 is maximum capacity", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?capacity WHERE { kg:1293 kg:3596 ?venue . ?venue kg:4727 ?capacity }\"\n \t]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?program WHERE {\",\n    \"  ?program wdt:P31 wd:Q25076984 .\", \"># Instance of frequent flyer program (assuming Q25076984 is the correct Wikidata ID for this concept)\",\n    \"  ?program wdt:P1384 ?airlinesCount .\", \"># Property representing number of airlines associated with the program\",\n    \"  ?otherProgram wdt:P31 wd:Q25076984 .\",\n    \"  ?otherProgram wdt:P1384 ?otherAirlinesCount .\",\n    \"  FILTER (?airlinesCount > ?otherAirlinesCount)\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t      \t   \t\t"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline\np:P4446 is reward program\nps:P4446 is reward program", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?program WHERE {\"\n     \t\t,\"?program wdt:P31 wd:Q8529; p:P4446 [ ps:P4446 ?airline ].\"\n     \t\t,\"?airline wdt:P31 wd:Q46970.\"\n     \t\t,\"}\"\n     \t\t,\"GROUP BY ?program\"\n     \t\t,\"ORDER BY DESC(COUNT(?airline))\"\n     \t\t,\"LIMIT 1\"\n     \t\t ]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7931 is instance of\nkg:8697 is airline\nkg:6223 is reward program\nkg:4848 is reward program", "response": "{\n \t\t\"query\": [\n    \t\t\"?reward_program kg:hasMostParticipatingEntities ?count .\",\n    \t\t\"{ ?airline rdf:type kg:8697 . } GROUP BY ?reward_program ORDER BY DESC(?count) LIMIT 1\"\n    \t]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q34529.\", \"># instance of country\",\n    \"  ?country wdt:P35 wd:*.\", \"># has official capital or seat of government (to filter for European countries)\",\n    \"  ?country wdt:P479 wd:Q1068879.\" ,\"\\n># form of government is constitutional monarchy\",\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P122 is basic form of government\nwd:Q41614 is constitutional monarchy", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE {\"\n     \t\t,\"?country wdt:P31 wd:Q625694.\" ,\"% Wikidata class for countries\"\n     \t\t,\"?country wdt:P30 wd:Q458.\" ,\"% part of the European Union\"\n     \t\t,\"?country wdt:P122 wd:Q41614.\" ,\"% has a constitutional monarchy form of government\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4311 is European Union\nkg:4161 is contains the administrative territorial entity\nkg:0520 is basic form of government\nkg:5768 is constitutional monarchy", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n\t\t\t\"    ?country kg:4311 kg:4161 .\",\n\t\t\t\"    ?country kg:0520 kg:5768 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?place wdt:P31 wd:Q47098; wdt:P625 ?coordinates; rdfs:label ?label.\",\n    \"  ?cave wdt:P31 wd:Q200688; wdt:P131 ?place.\",\n    \"  ?country wdt:P1376 ?place.\",\n    \"  FILTER (LANG(?label) = 'en').\",\n    \"  GROUP BY ?country HAVING (COUNT(DISTINCT ?cave) > 2)\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35509 is cave\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?country WHERE {\"\n \t\t  \t   \t\t,\"?place wdt:P31 wd:Q8625458. \" ,\"%PLACE_INSTANCE%\"\n \t\t  \t\t,\"?place wdt:P31 wd:Q35509. \" ,\"%CAVE_INSTANCE%\"\n \t\t  \t\t,\"?country wdt:P17 ?place. \"\n \t\t  \t\t,\"?country wdt:P31 wd:Q6256. \" ,\"%COUNTRY_INSTANCE%\"\n \t\t  \t\t,\"FILTER (COUNT(?cave) > 2)\"\n \t\t  \t\t,\"}\"\n \t  \t\t]}\n     \t\t\t\t\t \t\t\t\t \t\t"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9167 is instance of\nkg:4381 is cave\nkg:1762 is country", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n\t\t\t\" {?place kg:9167 kg:4381.}\",\n\t\t\t\" {?place kg:1762 ?country.}\",\n\t\t\t\" {?country kg:9167 ?caveCount.}\",\n\t\t\t\" FILTER (?caveCount > 2)}\"\n\t\t\t]}\n\t\t"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label(?item)\"]}\n \t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t "}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?birthName WHERE { wd:Q567 wdt:P1477 ?birthName . }\"\n    \t]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7741 is Angela Merkel\nkg:3407 is birth name", "response": "{\n  \"query\" : [\n    \"SELECT ?birthName WHERE { kg:7741 kg:3407 ?birthName . }\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { ?mayor wdt:P39 wd:Q648801 . }\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P6 is head of government", "response": "{\n  \"query\" : [\n    \"SELECT ?mayor WHERE { wd:Q64 wdt:P6 ?mayor . }\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5823 is Berlin\nkg:5984 is head of government", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?mayor WHERE { kg:5823 kg:5984 ?mayor }\"\n \t  \t    ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P306 wd:Q289; wdt:P479 wd:Q704.\",\n    \"?country wdt:P31 wd:Q30.\" ,\n    \"}\",\n    \"MINUS { ?country wdt:P571 ?date. }\"\n  ]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE {\"\n     \t\t,\"?country wdt:P31 wd:Q6256 .\"\n     \t\t,\"?country wdt:P30 wd:Q458 .\"\n     \t\t,\"?country wdt:P38 wd:Q4916 .}\"\n     \t\t]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4396 is European Union\nkg:1934 is contains the administrative territorial entity\nkg:4547 is currency\nkg:6859 is euro", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?country WHERE { kg:4396 kg:1934 ?country . ?country kg:4547 kg:6859 }\"\n \t]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label(?country)\"]\n \t\t\t\t\t\t\t\t\t } "}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5284 is Bill Gates\nwdt:P19 is place of birth\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?birthPlace WHERE { wd:Q5284 wdt:P19 ?birthPlace . ?birthPlace wdt:P17 ?country }\"\n    \t]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4141 is Bill Gates\nkg:4973 is place of birth\nkg:6146 is country", "response": "{\n \t\t\"query\": [\n  \t\t\"{?kg:4141 kg:4973 ?placeOfBirth . ?placeOfBirth kg:6146 ?country}\"\n  \t]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$prefixes SELECT ?grandChild WHERE { wd:Q7926 wdt:P40 ?child . ?child wdt:P40 ?grandChild }\"]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83233 is Jacques Cousteau\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?grandchild WHERE {\"\n     \t,\"wd:Q83233 wdt:P40 ?child .\"\n     \t,\"?child wdt:P40 ?grandchild .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3588 is Jacques Cousteau\nkg:1573 is child\nkg:1573 is child", "response": "{\n  \"query\" : [\n    \"SELECT ?grandchild WHERE { kg:3588 <http://publications.eduonix.com/ontology#hasGrandChild> ?grandchild . }\"\n  ]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?skateboarder WHERE {\",\n \t\t  \t\t\"?skateboarder wdt:P106 wd:Q7389; \",\n \t\t  \t\t\"wdt:P402 ?proSkaterCode .\",\n \t\t  \t\t\"?skateboarder wdk:p1059 ?countryClaim .\",\n \t\t  \t\t\"?countryClaim wdk:snak主句谓语 { 'snaks' : { 'wikibase-entityid': [ {'entity-type': 'item', 'id': 'Q36'} ] } } .\",\n \t\t  \t\t\"FILTER(?proSkaterCode = \\\"swedish\\\"@en)\"\n \t  \t\t,\"}\"]\n}\n  \t\t \t\t \t\t"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P641 is sport\nwd:Q842284 is skateboarding\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q34 is Sweden", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P641 wd:Q842284 . ?item wdt:P19/wdt:P131 wd:Q34 .}\"\n      \t]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3199 is sport\nkg:2295 is skateboarding\nkg:5284 is place of birth\nkg:2937 is located in the administrative territorial entity\nkg:3100 is Sweden", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?skateboarder WHERE {\",\n \t\t\t\"?skateboarder kg:3199 kg:2295 .\", \"># ?skateboarder is a professional skateboarder (sport is skateboarding)\",\n \t\t\t\"?skateboarder kg:5284 ?birthPlace .\", \"># place of birth of the skateboarder\",\n \t\t\t\"?birthPlace kg:2937 kg:3100 .\" ]} "}
{"question": "Give me all Argentine films.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P30 wd:Q3299. }\"\n  ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q414 is Argentina", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P495 wd:Q414 . }\"\n \t\t \t\t ]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4916 is instance of\nkg:9085 is film\nkg:6012 is country of origin\nkg:6146 is Argentina", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:6012 kg:6146 .\",\n\t\t    \t\t\"?resource kg:4916 kg:9085 .\"\n\t\t    \t]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?death WHERE {\\nwd:Q83407 wdt:P669 ?death.\\n}\\n\"]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P509 is cause of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?causeOfDeath WHERE { wd:Q2831 wdt:P509 ?causeOfDeath . }\"\n \t\t \t  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3927 is Michael Jackson\nkg:0761 is cause of death", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:3927 kg:0761 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q3564792 ;\",\n    \"         wdt:P17 wd:Q30 .\",\n    \"  ?admissionEvent wikibase:directClaim ?latestAdmissionEvent .\",\n    \"  ?admissionEvent ps:P575 ?date ;\",\n    \"                   pq:P1886 wd:Q2496798 ;\",\n    \"                   psv:P575 ?state .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?laterAdmissionEvent wikibase:directClaim ?admissionEvent .\",\n    \"    ?laterAdmissionEvent ps:P575 ?laterDate .\",\n    \"    FILTER (?date < ?laterDate)\",\n    \"  }\"\n   \t,\"}\",\n    \"ORDER BY DESC(?date)\"\n    ,\"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\t\t\t\"{\",\n    \t\t\t\t\t\"SELECT ?state\",\n    \t\t\t\t\t\"WHERE {\",\n    \t\t\t\t\t\t\"?state wdt:P31 wd:Q35657 .\", \">// ?state is an instance of U.S. state\",\n    \t\t\t\t\t\t\"?state wdt:P571 ?inception .\", \">// ?state has inception date\"\n    \t\t\t\t\t,\"?latestState ?latestInception wdt:P571 .\",\n    \t\t\t\t\t\"FILTER (?inception > ?latestInception)\",\n    \t\t\t\t\t\"}\",\n    \t\t\t\t\t\"ORDER BY DESC(?inception)\",\n    \t\t\t\t\t\"LIMIT 1\"\n  \t\t\t\t\t,\n  \t\t\t\t\t\"}\"\n  \t\t\t\t]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0265 is instance of\nkg:2557 is U.S. state\nkg:1837 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"{?x kg:1837 ?date . ?x kg:2557 kg:0265 . } ORDER BY DESC(?date) LIMIT 1\"\n       ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?class WHERE { wd:Q16572438 wdt:P31 ?class . }\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11185669 is millipede\nwdt:P279 is subclass of", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\": [\"SELECT ?class WHERE { wd:Q11185669 wdt:P279* ?class . }\"]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0355 is millipede\nkg:4290 is subclass of", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\" : [\n  \t\t\"SELECT ?class WHERE { kg:0355 kg:4290 ?class }\"\n  \t\t\t\t\t\t\t]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?homepage WHERE { wd:Q38672 wdt:P856 ?homepage . }\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P856 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?homepage WHERE { wd:Q25161472 wdt:P856 ?homepage. }\"\n \t \t \t \t  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2247 is Forbes\nkg:2521 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?resource kg:hasProperty kg:2521.\",\n\t\t    \t\t\t\"?resource kg:hasValue kg:2247.\"\n\t\t    \t\t]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?husband WHERE { wd:Q27096438 wdt:P26 ?husband . }\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q240377 is Amanda Palmer", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?husband WHERE { wd:Q240377 wdt:P26 ?husband . }\"\n \t]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7753 is spouse\nkg:5663 is Amanda Palmer", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:5663 kg:7753 ?resource . }\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?painter WHERE { ?painting wdt:P31 wd:Q3308948 ; wdt:P170 ?painter ; wdt:P186 wd:Q154297 . }\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2246489 is The Storm on the Sea of Galilee\nwdt:P170 is creator", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?artist WHERE { wd:Q2246489 wdt:P170 ?artist . }\"\n    \t]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9947 is The Storm on the Sea of Galilee\nkg:9480 is creator", "response": "{\n \t\t\"query\": [\"@prefix : <http://example.org/> .\\n\\nSELECT ?x WHERE { kg:9947 kg:9480 ?x }\"]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?place WHERE { ?place wdt:P31 wd:Q5174 ; wdt:P625 ?coordinate . } ORDER BY DESC(?coordinate) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5469 is Karakoram\nwdt:P610 is highest point", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?highestPoint WHERE { wd:Q5469 wdt:P610 ?highestPoint . }\"\n \t]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1348 is Karakoram\nkg:5338 is highest point", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:1348 kg:hasHighestPoint ?resource . } LIMIT 1\"]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1074 wdt:P361 ?resource . ?resource wdt:P570 wd:Q59398 }\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33 is Finland\np:P463 is member of\npq:P580 is start time\nps:P463 is member of\nwd:Q458 is European Union", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q33 ps:P463 ?membership . ?membership pq:P580 ?startTime . ?membership wdt:P279* wd:Q458 }\"\n \t]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2680 is Finland\nkg:1277 is member of\nkg:1675 is start time\nkg:8680 is member of\nkg:6217 is European Union", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:1675 kg:2680 .\",\n      \t\t\t\"?x kg:1277 kg:6217 .\"\n      \t\t\t ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?actor p:P1485/ps:P1485 wd:Q207963 ; wdt:P106 wd:Q33999 }\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8539 is The Big Bang Theory\nwdt:P161 is cast member", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { wd:Q8539 wdt:P161 ?actor. }\"\n  ]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1737 is The Big Bang Theory\nkg:7599 is cast member", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:1737 kg:7599 ?resource . }\"\n\t\t]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?scientist WHERE {\",\n    \"  ?scientist wdt:P101 wd:Q919889 ;\", \"># P101 is occupation, Q919889 is computer scientist\",\n    \"  ?scientist wdt:P6082 ?oscar .\", \"># P6082 is awarded oscar award\"\n   \t]}\n   \t\t\t\t\t       \t\t\t"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82594 is computer scientist\nwdt:P166 is award received\nwdt:P31 is instance of\nwd:Q19020 is Academy Awards", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P106 wd:Q82594 . ?item wdt:P166 wd:Q19020 .}\"\n    \t]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1794 is occupation\nkg:0345 is computer scientist\nkg:5117 is award received\nkg:5645 is instance of\nkg:6613 is Academy Awards", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"{?entity kg:1794 'computer scientist'; kg:5117 kg:6613. ?entity}\"\n   \t\t \t  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?author WHERE { ?book wdt:P1433 wd:Q286; wdt:P50 ?author. }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8337 is Harry Potter\nwdt:P50 is author", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?author WHERE { wd:Q8337 wdt:P50 ?author . }\"\n \t\t \t  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7554 is Harry Potter\nkg:8440 is author", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?author WHERE { kg:7554 kg:8440 ?author . }\"\n \t]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { ?movie rdfs:label \\\"Lovesick\\\"@en . ?movie wdtn:starring ?actor . ?actor wdt:P27 wd:Q142 }\"\n  ]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12125895 is Lovesick\nwdt:P161 is cast member\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q145 is United Kingdom", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?actor WHERE { wd:Q12125895 wdt:P161 ?actor . ?actor wdt:P19 ?placeOfBirth . ?placeOfBirth wdt:P17 wd:Q145 }\"\n     \t\t\t]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5043 is Lovesick\nkg:7156 is cast member\nkg:3179 is place of birth\nkg:8637 is country\nkg:3447 is United Kingdom", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:7156 kg:5043 .\",\n\t\t    \t\t\"?x kg:3179 ?y .\",\n\t\t    \t\t\"?y kg:8637 kg:3447 .\"\n\t\t    \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?city \\nWHERE {\\n wd:Q7196 wdt:P19 ?city.\\n}\"] }\n     \t\t\t\t\t\t\t\t  \t\t\t\t"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q236 is Montenegro\nwdt:P35 is head of state\nwdt:P19 is place of birth\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?birthCity WHERE {\"\n     \t\t,\"?president wdt:P31 wd:Q28340. \"\n     \t\t,\"?president wdt:P35 wd:Q236. \"\n     \t\t,\"?president wdt:P19 ?birthCity. \"\n     \t\t,\"wdt:P31 ?birthCity wd:Q515.\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6244 is Montenegro\nkg:0839 is head of state\nkg:4651 is place of birth\nkg:0895 is instance of\nkg:0321 is city", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?X kg:0839 kg:6244}\",\n      \t\t\t\"?X kg:0895 ?Y\",\n      \t\t\t\"?Z kg:4651 ?X\",\n      \t\t\t\"?Z kg:0321 ?Y\"\n      \t\t\t\t]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q35658; \",\n    \"         wdt:P17 wd:Q30; \",\n    \"         wdt:P1082 ?population; \",\n    \"         wdt:P1409 ?area. \",\n    \"  BIND((?population / ?area) AS ?density). \",\n    \"}\",\n    \"ORDER BY DESC(?density)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1082 is population\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?state WHERE {\"\n \t\t  \t   \t\t,\"?state wdt:P31 wd:Q35657 .\"\n \t\t  \t   \t\t,\"?state wdt:P1082 ?population .\"\n \t\t  \t   \t\t,\"?state wdt:P2046 ?area .\"\n \t\t  \t\t,\"BIND((?population / ?area) AS ?density)\"\n \t\t  \t\t,\"{ SELECT (MAX(?density) as ?maxDensity) { ?x wdt:P31 wd:Q35657. ?x wdt:P1082 ?pop. ?x wdt:P2046 ?area. BIND((?pop / ?area) AS ?density) }}\"\n \t\t  \t\t,\"FILTER(?density = ?maxDensity)\"\n \t\t  \t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6804 is instance of\nkg:6879 is U.S. state\nkg:9633 is population\nkg:4555 is area", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?state WHERE {\",\n            \"?state kg:6879 ?us_state .\",\n            \"?state kg:9633 ?population .\",\n            \"?state kg:4555 ?area .\",\n            \"BIND(?population / ?area AS ?density)\",\n            \"FILTER (SAMPLE(?density, MAX(?density)))\"\n\t\t\t\t\t    \t\t\t]}\n\t\t"}
{"question": "What is the longest river in China?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$wd:Q480126 rdfs:label ?label . FILTER (lang(?label) = 'en') . ?river wdt:P31 wd:Q480126 . ?river wdt:P31 wd:Q5007 . ?river wdt:P625 ?coordinate . ?river wdt:P402 ?alias . FILTER(CONTAINS(?alias, 'longest river')). BIND(?river AS ?resource)\"]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P17 is country\nwd:Q148 is People's Republic of China\nwdt:P2043 is length", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?river WHERE {\"\n \t\t  \t\t\t,\"?river wdt:P31 wd:Q4022 .\"\n \t\t  \t\t\t,\"?river wdt:P17 wd:Q148 .\"\n \t\t  \t\t\t,\"?river wdt:P2043 ?length .\"\n \t\t  \t\t\t,\"FILTER ( ?length = (SELECT MAX(?length) WHERE { ?r wdt:P17 wd:Q148; wdt:P2043 ?l. } ) )\"\n \t  \t\t,\"}\" ]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0268 is instance of\nkg:7764 is river\nkg:6821 is country\nkg:4374 is People's Republic of China\nkg:9050 is length", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:0268 kg:7764 .\",\n\t\t    \t\t\t\"?x kg:0268 kg:6821 .\",\n\t\t    \t\t\t\"?x kg:0268 kg:9050 ?length .\",\n\t\t    \t\t\t\"?y kg:0268 kg:7764 .\",\n\t\t    \t\t\t\"?y kg:0268 kg:6821 .\",\n\t\t    \t\t\t\"?y kg:0268 kg:9050 ?otherLength .\",\n\t\t    \t\t\t\"?x kg:0268 kg:4374 .\",\n\t\t    \t\t\t\"?y kg:0268 kg:4374 .\",\n\t\t    \t\t\t\"FILTER (?length > ?otherLength)\"\n\t\t    \t\t]\n\t\t    \t\t}\n\t\t\t    \t\t\t \t\t\t\t \t\t"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?code WHERE { wd:Q47 wdt:P297 ?code . }\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P473 is local dialing code", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?code WHERE { wd:Q64 wdt:P473 ?code . }\"\n \t\t \t  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1562 is Berlin\nkg:0879 is local dialing code", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?code WHERE { kg:1562 <http://public舆domain/property/areaCode> ?code . }\"\n \t\t \t  ]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?scientist WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?scientist wdt:P101 wd:Q47539; wdt:P646 ?identifier .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?university wdt:P279* wd:Q4835784; wdcv:almaMater ?scientist .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"]\n} "}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q901 is scientist\nwdt:P69 is educated at\nwd:Q49113 is Ivy League\nwdt:P527 is has part(s)", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P106 wd:Q901 . ?item wdt:P69 ?university . ?university wdt:P31/wdt:P279* wd:Q49113}\",\n      \t\t\t\"?university wdt:P527 ?part\"\n      \t]\n} "}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1048 is occupation\nkg:6101 is scientist\nkg:2513 is educated at\nkg:4279 is Ivy League\nkg:2228 is has part(s)", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:1048 kg:6101 .\",\n\t\t    \t\t\"?resource kg:2513 ?university .\",\n\t\t    \t\t\"?university kg:2228 kg:4279\"\n\t\t    \t]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?surfer WHERE {\",\n    \"  ?surfer wdt:P31 wd:Q5 ;\", \"# instance of human\",\n    \"          wdt:P106 wd:Q24987 ;\", \"# profession is surfer (example ID, may need to be adjusted)\",\n    \"          wdt:P19 wd:Q83 ;\", \"# place of birth is Australia\",\n    \"}\",\n    \"MINUS { ?surfer wdt:P106 wd:Q5024 . }\", \"# exclude people whose profession is not surfer (example ID, may need to be adjusted)\",\n    \"}\"\n  ]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P106 is occupation\nwd:Q13561328 is surfer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?surfer WHERE {\"\n     \t\t,\"?surfer wdt:P106 wd:Q13561328 .\"\n     \t\t,\"?birthPlace wdt:P17 wd:Q408 .\"\n     \t\t,\"?surfer wdt:P19 ?birthPlace .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4767 is place of birth\nkg:7914 is country\nkg:1900 is Australia\nkg:2462 is occupation\nkg:6340 is surfer", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?surfer WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?surfer kg:2462 kg:6340 .\", \"@comment This states that the subject (?surfer) has occupation (kg:2462) as surfer (kg:6340).\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?surfer kg:4767 ?placeOfBirth .\", \"@comment This links the surfer to their place of birth.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?placeOfBirth kg:7914 kg:1900 .\", \"@comment This states that the place of birth is a country (kg:7914) and it is Australia (kg:1900).\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n   \t\t\t\t\t\t\t\t\t"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?party WHERE { ?party wdt:P31 wd:Q3407628 ; wikibase:sitelink ?sitelink . FILTER (LANG(?sitelink) = 'nl') }\"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q7278 is political party", "response": "{\n  \"query\" : [\n    \"SELECT ?party WHERE {\",\n      \"?party wdt:P31 wd:Q7278 .\",\n      \"?party wdt:P17 wd:Q55 .\"\n   \t,\"} \"\n  ]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1972 is country\nkg:1749 is Netherlands\nkg:3085 is instance of\nkg:4788 is political party", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?party WHERE { ?party kg:3085 kg:4788. ?party kg:1972 kg:1749 }\"\n\t\t    \t]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?moon WHERE { ?planet p:P31/ps:P31 wd:Q952 ; p:P684 [ ps:P684 ?moonCount ; pq:P1115 ?moon ] . ?moon wikibase:quantityAmount ?count . FILTER(?count = 2) }\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111 is Mars\nwdt:P398 is child astronomical body", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?moon WHERE { wd:Q111 wdt:P398 ?moon . }\"\n \t\t \t  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5773 is Mars\nkg:8511 is child astronomical body", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?moon WHERE { kg:5773 kg:8511 ?moon }\"\n   \t\t \t  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?person WHERE { wd:Q81069 wdt:P2547 ?person . }\"\n  ]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P460 is said to be the same as", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?name WHERE { wd:Q2695156 wdt:P460 ?name. }\"\n \t]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8690 is Batman\nkg:9050 is said to be the same as", "response": "{\n  \"query\" : [\n    \"SELECT ?name WHERE { kg:8690 kg:9050 ?name . }\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?author WHERE { ?wikiwikileaks wdt:P50 ?author . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q359 is WikiLeaks\nwdt:P50 is author", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?author WHERE {\\n  wd:Q359 wdt:P50 ?author .\\n}\"]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2318 is WikiLeaks\nkg:3776 is author", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix : {PREFIXES}\\nSELECT ?author \\nWHERE {{kg:2318 kg:3776 ?author}}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q148697 wikibase:statements ?resource . ?resource schema:mentions ?mention . ?mention offset:word \\\"shot\\\" }\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q164791 is Carlo Giuliani\nwdt:P570 is date of death", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource \\nWHERE {\\nwd:Q164791 wdt:P570 ?resource.\\n}\"]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5393 is Carlo Giuliani\nkg:1019 is date of death", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:1019 kg:5393 .\"\n\t\t    \t]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?wife WHERE {\\n  wd:Q105479 wdt:P26 ?wife.\\n}\\n\"]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?wife WHERE { wd:Q91 wdt:P26 ?wife . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0844 is Abraham Lincoln\nkg:0994 is spouse", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?wife WHERE { kg:0844 kg:0994 ?wife }\"\n \t]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?award WHERE { wd:Q4287 wdt:P166 ?award . }\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33760 is Bertrand Russell\nwdt:P166 is award received", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?award WHERE {\\nwd:Q33760 wdt:P166 ?award.\\n}\"]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2307 is Bertrand Russell\nkg:0557 is award received", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:0557 kg:2307 .\"\n\t\t    \t]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q203897 wdt:P1865 ?person .\", \"># Assuming Q203897 is Pamela Anderson's Wikidata ID and P1865 is the property for veganism, which might not be accurate as properties need to be correctly identified from Wikidata documentation or exploration.\",\n    \"  ?person wdt:P479 wd:Q11200 .\", \"># Assuming Q11200 is the Wikidata ID for Veganism under P479 (lifestyle), which might also require verification.\"\n   \t]} "}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83325 is Pamela Anderson\nwdt:P1576 is lifestyle\nwd:Q83364 is vegetarianism", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q83325 wdt:P1576 ?resource . FILTER(?resource = wd:Q83364) }\"\n     \t\t ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5099 is Pamela Anderson\nkg:1327 is lifestyle\nkg:6354 is vegetarianism", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:5099 kg:1327 kg:6354 . }\"\n  \t    \t\t]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?probe WHERE { ?probe wdt:P31 wd:Q25097 ; wdt:P884 wd:Q1806 . }\"\n  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P522 is type of orbit\nwd:Q737809 is heliocentric orbit", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?probe WHERE { ?probe wdt:P522 wd:Q737809. }\"\n \t\t \t  ]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3989 is type of orbit\nkg:2459 is heliocentric orbit", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?probe WHERE {\",\n\t\t\t\"?probe kg:typeOf kg:2459 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?spouse WHERE { wd:Q120679 wdt:P40 ?daughter . ?daughter wdt:P26 ?spouse }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25310 is Robert F. Kennedy\nwdt:P40 is child\nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?daughter wdt:P40 wd:Q25310; wdt:P21 wd:Q6581072. ?daughter wdt:P26 ?spouse. ?spouse wdt:P21 ?gender. }\"\n     \t\t\t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5083 is Robert F. Kennedy\nkg:1582 is child\nkg:5789 is sex or gender\nkg:3234 is female\nkg:0173 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE { kg:5083 kg:1582 ?child . ?child kg:5789 kg:3234 . ?child kg:0173 ?spouse }\"\n \t]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?studentCount WHERE { \"\n     \t\t,\"wd:Q162987 ?property ?studentCount .\"\n     \t\t,\"?property wikibase:directClaim wd:P1158 .\"\n     \t\t,\"FILTER (isLiteral(?studentCount)) }\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214341 is University of Amsterdam\nwdt:P2196 is students count", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { wd:Q214341 wdt:P2196 ?resource . }\"\n \t \t \t    ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4066 is University of Amsterdam\nkg:8357 is students count", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?studentsCount WHERE { kg:4066 kg:8357 ?studentsCount . }\"\n \t]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q31 WolrdBankIndicators:revenue ?resource . }\"\n  ]\n}\n\t\t\t\t\t\t      \t\t\t\t \t  "}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P2139 is total revenue", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q37156 wdt:P2139 ?resource . }\"\n    \t]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8611 is IBM\nkg:4561 is total revenue", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:4561 kg:8611 .\"\n   \t\t\t \t\t]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P166 wd:Q7890. }\"\n  ]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwd:Q2009573 is James Bond\nwdt:P144 is based on\nwdt:P674 is characters", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?movie WHERE {\"\n     \t\t\t,\"?movie wdt:P31 wd:Q11424 .\"\n     \t\t,\"?movie wdt:P674 wd:Q2009573 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7008 is instance of\nkg:7673 is film\nkg:9402 is James Bond\nkg:9593 is based on\nkg:2301 is characters", "response": "{\n \t\t\"query\": [\n  \t\t\"{?x kg:instanceOf/kg:film kg:7673}\",\n  \t\t\"?x kg:basedOn/kg:characters kg:2301\",\n  \t\t\"?x kg:basedOn/kg:9402 kg:9593\"\n  \t]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?voiceActor WHERE { ?character rdfs:label \\\"Bart Simpson\\\"@en . ?character wdt:P6421 ?voiceActor . }\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5480 is Bart Simpson\nwdt:P725 is voice actor", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?voiceActor WHERE { wd:Q5480 wdt:P725 ?voiceActor . }\"\n\t\t \t\t]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0013 is Bart Simpson\nkg:9734 is voice actor", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:0013 kg:9734 ?resource . }\"\n \t  \t    ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?spouse WHERE { wd:Q40 HELPSPARQL-human-readable-to-sparql TomHanks.marriedTo -> ?spouse } HELPSPARQL-fix-query\"\n  ]\n}\n\t\t\t\t\t\t      \t\t\t\t \t  "}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse WHERE {\\nwd:Q2263 wdt:P26 ?spouse .\\n}\"]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4790 is Tom Hanks\nkg:1852 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?spouse WHERE { kg:4790 kg:1852 ?spouse . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?country WHERE { wd:Q906 p:P31 ?statement . ?statement ps:P31 wd:Q47588 . ?statement pq:P17 wd:Q? . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n} "}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q78707 is Yenisey\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?country WHERE { wd:Q78707 wdt:P17 ?country . }\"\n \t\t \t  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4880 is Yenisey\nkg:6798 is country", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?country WHERE { kg:4880 kg:6798 ?country . }\"\n \t]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?car WHERE { ?car wdt:P31 wd:Q11064; wdcnt:P17 wd:Q183. }\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q59773381 is automobile model series\nwdt:P176 is manufacturer\nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwd:Q786820 is automobile manufacturer", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?car WHERE {\",\n \t\t\t\"?car wdt:P31 wd:Q59773381 .\", \"@ en automobile model series\"\n \t\t\t,\"?car wdt:P176 ?manufacturer .\", \"@ en is manufacturer\"\n \t\t\t,\"?manufacturer wdt:P17 wd:Q183 .\", \"@ en Germany\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4758 is instance of\nkg:4232 is automobile model series\nkg:9437 is manufacturer\nkg:8414 is country\nkg:9406 is Germany\nkg:4758 is instance of\nkg:2448 is automobile manufacturer", "response": "{\n \t\t\t\t\t\t\t\t\t\t  \t\t\t\"query\" : [\n \t\t\"SELECT ?car WHERE {\",\n \t\t\t\"?car a kg:4232. \",\n \t\t\t\"?car kg:9437 ?manufacturer. \",\n \t\t\t\"?manufacturer a kg:2448. \",\n \t\t\t\"?manufacturer kg:8414 kg:9406. \"\n \t\t,\"}\"]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?death WHERE { wd:Q83409 wdt:P570 ?death . }\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P570 is date of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?death WHERE { wd:Q2831 wdt:P570 ?death . }\"\n \t\t \t  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1405 is Michael Jackson\nkg:3025 is date of death", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:3025 kg:1405 .\"\n\t\t    \t]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?volcano WHERE { ?volcano wdt:P31 wd:Q8506; wdt:P6862 ?height . FILTER (lang(?volcano) = '' || lang(?volcano) = 'en') } ORDER BY DESC (?height) LIMIT 1\"\n  ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P2044 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?volcano WHERE {\"\n     \t\t,\"?volcano wdt:P31 wd:Q8072 .\"\n     \t\t,\"?country wdt:P30 wd:Q15 .\"\n     \t\t,\"?volcano wdt:P625 ?coordinate.\"\n     \t\t,\"?volcano wdt:P2044 ?elevation.\"\n     \t\t,\"{ SELECT ?volcano (MAX(?elevation) as ?maxElevation) WHERE {\"\n     \t\t,\"?volcano wdt:P31 wd:Q8072 .\"\n     \t\t,\"?country wdt:P30 wd:Q15 .\"\n     \t\t,\"?volcano wdt:P625 ?coordinate.\"\n     \t\t,\"?volcano wdt:P2044 ?elevation.\"\n     \t\t,\"} GROUP BY ?volcano}\"\n     \t\t,\"?volcano wdt:P2044 ?maxElevation.\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2785 is continent\nkg:0205 is Africa\nkg:3352 is instance of\nkg:5941 is subclass of\nkg:4262 is volcano\nkg:0560 is elevation above sea level", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?resource kg:5941 kg:4262 .\",\n      \t\t\t\"?resource kg:3352 ?instanceOf .\",\n      \t\t\t\"?instanceOf kg:5941 kg:0205 .\",\n      \t\t\t\"?resource kg:0560 ?elevation .\"\n      \t]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?spacecraft WHERE {\",\n    \"  ?spacecraft wdt:P31 wd:Q26054; wdtn:P341 wd:Q9528.\", \"Yeah, let's correct and clarify the query for accuracy:\",\n    \"  ?spacecraft wdt:P31 wd:Q26054. # instance of spacecraft\",\n    \"  ?mission wdt:P31 wd:Q748179; # instance of space mission\",\n    \"            wdt:P39 wd:Q9528.   # to Mars\",\n    \"  ?spacecraft wdt:P174 ?mission. # participated in the mission\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q389459 is Mars rover", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?spacecraft WHERE { ?spacecraft wdt:P31 wd:Q389459 . }\"\n\t\t]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4000 is instance of\nkg:9758 is Mars rover", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?spacecraft WHERE { ?spacecraft kg:typeOf+ <http://example/kg/4000> . ?mission <http://example/kg:toPlanet>* ?planet . ?mission <http://example/kg:hasSpacecraft> ?spacecraft . ?planet <http://example/kg:name> \\\"Mars\\\" }\"\n\t    \t\t]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11420. ?movie wdt:P469 wd:Q8057. }\"\n  ]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q213 is Czech Republic\nwdt:P495 is country of origin\nwd:Q33946 is Czechoslovakia", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?movie WHERE {\",\n \t\t\t\"?movie wdt:P31 wd:Q11424 .\", \"@en\"\n \t\t\t,\"?movie wdt:P495 wd:Q213 .\", \"@en\"\n \t\t\t,\"?movie wdt:P495 wd:Q33946 .\" , \"@en\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2993 is instance of\nkg:6480 is film\nkg:2995 is country of origin\nkg:1556 is Czech Republic\nkg:2995 is country of origin\nkg:0212 is Czechoslovakia", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:2995 kg:1556 .\",\n\t\t    \t\t\"?x kg:6480 ?y .\"\n\t\t    \t]\n\t\t    \t}\n\t\t    \t\t\t \t    \t\t"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?taikonaut WHERE { ?taikonaut wdt:P31 wd:Q5 . ?taikonaut wdt:P102 wd:Q748699 }\"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q148 is People's Republic of China", "response": "{\n  \"query\" : [\n    \"SELECT ?taikonaut WHERE {\",\n      \"?taikonaut wdt:P106 wd:Q11631 .\",\n      \"?taikonaut wdt:P27 wd:Q148 .\"\n   \t,\"} \"\n  ]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4503 is occupation\nkg:9378 is astronaut\nkg:3941 is country of citizenship\nkg:8528 is People's Republic of China", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?subject kg:4503 kg:9378 .\",\n\t\t    \t\t\"?subject kg:3941 kg:8528 .\"\n\t\t    \t]\n\t\t    \t}\n\t\t    \t\t\t \t    \t\t"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P3007 ?volcanoCount .\", \"><!-- P3007 is a placeholder for the actual property that links countries to their volcano count, which needs to be identified in Wikidata. --><!-- The correct property might not exist directly; you may need to use a combination of properties and SERVICE queries to calculate or retrieve this information indirectly. For example: ?country wdt:P3003 ?volcano . --> <!-- P3003 is a placeholder for the country-volcano relation, which would be something like 'located in the administrative territorial entity'. --><!-- Then you might need to count volcanoes per country and filter by that number. --><!-- A more accurate query would look into how Wikidata structures this information specifically. -->\" ,\n    \"  FILTER(?volcanoCount > 10) .\",\n    \"}\"\n  ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8072 is volcano\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P17 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE {\"\n     \t\t,\"?volcano wdt:P31 wd:Q8072 .\"\n     \t\t,\"?volcano wdt:P17 ?country .\"\n     \t\t,\"?country wdt:P31 wd:Q6256 .\"\n     \t\t,\"{ SELECT ?country (COUNT(?volcano) AS ?count) WHERE {\"\n     \t\t,\"?volcano wdt:P31 wd:Q8072 .\"\n     \t\t,\"?volcano wdt:P17 ?country .\"\n     \t\t,\"} GROUP BY ?country}\"\n     \t\t,\"FILTER (?count > 10)\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1994 is instance of\nkg:7112 is volcano\nkg:1994 is instance of\nkg:0630 is subclass of\nkg:7112 is volcano\nkg:3464 is country", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?country WHERE {\",\n\t\t\t\"?country kg:7112 ?volcanoCount .\",\n\t\t\t\"?volcanoCount kg:0630 \\\"more than ten\\\"^^<http://www.w3.org/2001/XMLSchema#integer> .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?death WHERE { \"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?dracula wdt:P31 wd:Q57804 .\" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?dracula wdt:P170 ?creator .\" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?creator wdt:P570 ?death .\" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3266236 is Count Dracula\nwdt:P170 is creator\nwdt:P570 is date of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?death WHERE { wd:Q3266236 wdt:P170 ?creator . ?creator wdt:P570 ?death }\"\n \t\t \t\t\t\t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is Count Dracula\nkg:7234 is creator\nkg:3219 is date of death", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:7234 kg:7006 .\",\n\t\t    \t\t\t\"?x kg:3219 ?y .\"\n\t\t    \t\t]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?creator WHERE { wd:Q25070 ?property ?creator . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P170 is creator\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?creator WHERE { wd:Q6084 _:_a wdt:P170 ?creator . }\"\n    \t]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8535 is Wikipedia\nkg:0687 is creator\nkg:4965 is instance of\nkg:7883 is human", "response": "{\n \t\t\t \t\t\"query\": [\n       \t\t\"{?x kg:0687 kg:8535. ?x kg:4965 kg:7883}\",\n\t\t        \"?x\"\n\t\t     ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"              wdt:P27 wd:Q142 ;\", \">// citizen of Germany\",\n    \"              wdt:P102 wd:Q60984 ;\", \">// member of Social Democratic Party of Germany or any other relevant political party/organization\",\n    \"              wdt:P39 wd:Q5879 ;\", \">// held position of Chancellor of Germany\"\n   \t\t\t\t\t,\n    \"              wdt:P21 wd:Q6581072 .\", \">// gender is female\"\n   \t\t,\n    \"} ORDER BY ?chancellor\"\n  ]\n \t}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\" : [\n    \"SELECT ?chancellor WHERE {\",\n      \"?chancellor wdt:P21 wd:Q6581072 ;\", \"# is female\",\n      \"wdt:P39 wd:Q4970706 .}\", \"# holds the position of Federal Chancellor of Germany\"\n  ]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3087 is sex or gender\nkg:5264 is female\nkg:4281 is position held\nkg:0263 is Federal Chancellor of Germany", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { ?resource kg:3087 kg:5264 . ?resource kg:4281 kg:0263 }\"\n \t]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?owner WHERE { wd:Q167459 wdt:P127 ?owner . }\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125054 is Aldi\nwdt:P355 is has subsidiary", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?owner WHERE { wd:Q125054 wdt:P355 ?owner . }\"\n    \t]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2823 is Aldi\nkg:3490 is has subsidiary", "response": "{\n \t\t\"query\": [\n    \t\t\"?x kg:2823 ?y\"\n    \t]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?influenced WHERE { ?influenced wdt:P2784 wd:Q890561 . }\"\n  ]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?influencedEntity WHERE { ?influencedEntity wdt:P737 wd:Q913. }\"\n    \t]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7202 is instance of\nkg:2379 is human\nkg:1789 is influenced by\nkg:7075 is Socrates", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { ?resource kg:1789 kg:7075. }\"\n \t\t \t  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?depth WHERE { wd:Q16957 p:P2044 ?statement . ?statement ps:P2044 ?depth }\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4138 is Chiemsee\nwdt:P4511 is vertical depth", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?depth WHERE { wd:Q4138 wdt:P4511 ?depth . }\"\n  \t    \t\t]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0491 is Chiemsee\nkg:7474 is vertical depth", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:0491 kg:7474 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t \t  \t\t\t\t\t\t     \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wds: <http://www.wikidata.org/entity/statement/> .\\n@prefix wikibase: <http://wikiba.se/ontology#> .\\n@prefix p: <http://www.wikidata.org/prop/> .\\n@prefix ps: <http://www.wikidata.org/prop/statement/> .\\n@prefix pq: <http://www.wikidata.org/prop/qualifier/> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n\\nSELECT ?parent WHERE {\\n  wd:Q8974 p:P106 ?statement . # Queen Victoria's ID is Q8974, P106 for occupation but we need parent relation\\n  ?statement ps:P22 ?father . # P22 for father\\n  ?statement ps:P25 ?mother . # P25 for mother\\n  UNION { wd:Q8974 p:P22 ?parentStatement .\\n         ?parentStatement ps:P22|P25 ?parent . } # Directly get parents using P22 and P25 properties\\n}\\n\"]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9439 is Victoria\nwdt:P22 is father\nwdt:P25 is mother", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?father ?mother WHERE { wd:Q9439 wdt:P22 ?father . wd:Q9439 wdt:P25 ?mother }\"\n    \t]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9270 is Victoria\nkg:8401 is father\nkg:9007 is mother", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?mother ?father WHERE { kg:9270 <http://www.w3.org/2000/01/rdf-schema#label> \\\"Victoria\\\". kg:9270 <http://example.com/hasMother> ?mother. kg:9270 <http://example.com/hasFather> ?father. }\"\n \t]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?castle WHERE { ?castle wdt:P31 wd:Q80254; wdt:P17 wd:Q30. }\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23413 is castle\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23413 is castle\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?castle WHERE {\",\n \t\t  \t\t\"?castle wdt:P31 wd:Q23413 .\",\n \t\t  \t\t\"?castle wdt:P17 wd:Q30 .\",\n \t\t  \t\t\"}\"\n \t\t \t\t ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2659 is instance of\nkg:9811 is castle\nkg:2659 is instance of\nkg:0624 is subclass of\nkg:9811 is castle\nkg:6840 is country\nkg:2187 is United States of America", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"  kg:2187 kg:0624+ ?resource .\",\n\t\t\t\"  ?resource kg:9811 kg:2659 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?bird WHERE {\",\n    \"  ?bird wdt:P31 wd:Q6502; \",\n    \"        wdt:P1028 wd:Q947.\", \"That line specifies the property P1028 (Threat Status) with a value of Q947 which represents critically endangered.\",\n    \"}\"]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t  \t\t"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P171 is parent taxon\nwd:Q5113 is bird\nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\" : [\n    \"SELECT ?bird WHERE {\",\n      \"?bird wdt:P171* wd:Q5113 .\", \"@comment: bird is of taxon bird\",\n      \"?bird wdt:P141 wd:Q219127 .\", \"@comment: conservation status is Critically Endangered\",\n    \"}\"\n  ]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7081 is parent taxon\nkg:9693 is bird\nkg:6932 is IUCN conservation status\nkg:4268 is Critically Endangered", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?bird WHERE {\",\n \t\t\t\"?bird kg:7081 kg:9693 .\",\n \t\t\t\"?bird kg:6932 kg:4268 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?country WHERE {\",\n    \"  ?river wdt:P31 wd:Q4022 ;\", \"># river instance of river\",\n    \"         wdt:P469 wd:Q7885 .\", \"># Rhine\"\n   \t,\n    \"  ?border1 wdt:P625 ?geo1 ;\", \"># has geo coordinate\"\n   \t,\n    \"           wdt:P30 ?river .\", \"# border is connected to river\"\n   \t,\n    \"  ?border2 wdt:P625 ?geo2 ;\",\n    \"           wdt:P30 ?river .\",\n   \t\"  FILTER(?geo1 != ?geo2)\",\n   \t\"  { ?border1 wdt:P47 ?country } UNION { ?border2 wdt:P47 ?country }\",\n   \t\"}\"\n  ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q584 is Rhine\nwdt:P17 is country\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?country WHERE { wd:Q584 wdt:P621 ?crossing . ?crossing wdt:P17 ?country }\"\n     \t\t ]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7366 is Rhine\nkg:2020 is country\nkg:7795 is instance of\nkg:4041 is country", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?country WHERE { kg:7366 kg:7795 ?connection . ?connection kg:4041 ?country . }\"\n \t]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?father WHERE { wd:Q2905 father:P106 ?father . }\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9682 is Elizabeth II\nwdt:P22 is father", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?father WHERE { wd:Q9682 wdt:P22 ?father . }\"\n    \t]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1364 is Elizabeth II\nkg:0150 is father", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?father WHERE { kg:1364 kg:0150 ?father }\"\n  \t        \t\t\t\t]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?element WHERE { ?element wdt:P31 wd:Q11173. }\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11344 is chemical element", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource \\nWHERE {\\n?resource wdt:P31 wd:Q11344.\\n}\"]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6296 is instance of\nkg:3198 is chemical element", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?var1 kg:6296 kg:3198\"\n\t\t    \t]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"             wdt:P39 wd:Q7054 ;\", \">// position held is head of government (US President)\",\n    \"             wdt:P1028 ?startDate .\", \">// start date of office\"\n   \t\t,\n    \"  FILTER(?startDate >= \\\"1993-01-01T00:00:00Z\\\"^^xsd:dateTime)\", \">// filter for the last 20 years\"\n   \t\t,\n    \"  ?president wdt:P569 ?birthDate .\", \">// birth date of president\"\n   \t\t,\n    \"  FILTER(?birthDate < \\\"1973-01-01T00:00:00Z\\\"^^xsd:dateTime)\", \">// filter for presidents born before the last 20 years start\"\n   \t\t,\n    \"} ORDER BY ?startDate\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P582 is end time", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE {\",\n      \"?president ps:P39 wd:Q11696 .\", \"# The position held is President of the United States\",\n      \"?president pq:P582 ?endTime .\", \"# Get the end time of the presidency\",\n      \"FILTER(?endTime >= \\\"2004-01-01T00:00:00Z\\\"^^xsd:dateTime)\", \"># Filter for presidents in the last 20 years\",\n      \"?president wdt:P39 wd:Q11696 .\", \"# Ensure the position held is President of the United States\"\n   \t\t,\"}\"\n  ]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3971 is position held\nkg:3124 is position held\nkg:4794 is President of the United States\nkg:9895 is end time", "response": "{\n  \"query\" : [\n    \"PREFIX kg: <http://example.org/kg#> SELECT ?president WHERE {\",\n    \"  ?president a kg:4794 ;\", \"Yeah, it seems there was an error in the structure of the SPARQL query provided. Let's correct and complete the query to properly retrieve American presidents from the last 20 years using the given entities and properties.\",\n    \"  kg:3124 ?president kg:3971 ;\",\n    \"  ?president kg:9895 ?endTime .\",\n    \"  FILTER(?endTime >= \\\"2003-01-01T00:00:00Z\\\"^^xsd:dateTime)\",\n    \"}\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424. \",\n    \"  ?movie wdt:P577 ?releaseDate. \",\n    \"  ?movie rdfs:label ?title. \",\n    \"  FILTER(LANG(?title) = 'en'). \",\n    \"  FILTER(CONTAINS(?title, \\\"Worst Case Scenario\\\"@en)). \",\n    \"  ?movie wdt:P401 ?country. \",\n    \"  ?country wdt:P297 \\\"NL\\\"^^xsd:string. \",\n    \"  ?movie p:P345 ?statement. \",\n    \"  ?statement ps:P345 ?cinemaReleaseDate. \",\n    \"  ?statement pq:P580 ?plannedReleaseDate. \",\n    \"}\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6667101 is Worst Case Scenario\nwdt:P577 is publication date", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q6667101 wdt:P577 ?resource. }\"\n    \t]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7286 is Worst Case Scenario\nkg:0465 is publication date", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:7286 kg:0465 ?resource . }\"\n \t]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?spouse WHERE { wd:Q25369 wdt:P26 ?spouse . }\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q443120 is Lance Bass\nwdt:P26 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse WHERE {\\nwd:Q443120 wdt:P26 ?spouse .\\n}\"]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6052 is Lance Bass\nkg:2399 is spouse", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?spouse WHERE { kg:6052 kg:2399 ?spouse . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?language WHERE { wd:Q245 wiki:item_language ?language . }\"\n  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q843 is Pakistan\nwdt:P2936 is language used", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?language WHERE { wd:Q843 wdt:P2936 ?language . }\"\n \t\t \t  ]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6648 is Pakistan\nkg:4682 is language used", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?language WHERE { kg:6648 kg:4682 ?language . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse\\nWHERE {\\nwd:Q42836 wdt:P40 ?daughter .\\n?daughter wdt:P26 ?spouse .\\n}\\n\"]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124 is Bill Clinton\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?spouse WHERE { wd:Q1124 wdt:P40 ?daughter . ?daughter wdt:P26 ?spouse }\"\n     \t\t\t]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9068 is Bill Clinton\nkg:6665 is child\nkg:3317 is spouse", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE { kg:9068 kg:6665 ?daughter . ?daughter kg:3317 ?spouse }\"\n \t]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?person WHERE { ?mission p:P31/ps:P31 wd:Q25567 ; wdt:P980 wd:Q4939; p:P141 ?positionStatement . ?positionStatement ps:P141 ?person . }\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43653 is Apollo 11\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?person WHERE { wd:Q43653 wdt:P1029 ?person. }\"\n  ]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4688 is Apollo 11\nkg:5941 is crew member(s)", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:4688 kg:5941 ?resource . }\"\n  ]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$label$ was called Scarface.\"]\n} "}
{"question": "Who was called Scarface?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1449 is nickname", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n      \t\t\"?entity ?p ?o .\",\n      \t\t\"?entity wdt:P1449 ?nickname .\",\n      \t\t\"?nickname bif:contains '\\\"Scarface\\\"' .\"\n      \t]\n} "}
{"question": "Who was called Scarface?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6080 is nickname", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { ?subject <http://example/kg#is_nickname> \\\"Scarface\\\" . ?subject <http://example/kg#6080> ?resource }\"\n \t\t \t \t]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 ; wdt:P469 wd:Q85769 }\"\n  ]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P403 is mouth of the watercourse\nwd:Q1693 is North Sea", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P403 wd:Q1693 . }\"\n \t]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4180 is instance of\nkg:3859 is river\nkg:2573 is mouth of the watercourse\nkg:7040 is North Sea", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?river WHERE {\",\n            \"?river kg:instance_of kg:3859 .\",\n            \"?river kg:2573 kg:7040 .\"\n          \t\t,\"}\"\n\t\t]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?location WHERE { wd:Q201673 wdt:P625 ?location . }\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8962067 is Fort Knox\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?resource WHERE { wd:Q8962067 wdt:P131 ?resource . }\"\n\t\t \t\t]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5049 is Fort Knox\nkg:8699 is located in the administrative territorial entity", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"?x kg:8699 kg:5049 .\"\n \t\t \t\t\t]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?emperor WHERE { ?emperor wdt:P31 wd:Q28390. }\"\n  ]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q268218 is Emperor of China", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?emperor WHERE { ?emperor wdt:P39 wd:Q268218. }\"\n    \t]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6554 is position held\nkg:0781 is Emperor of China", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?emperor WHERE { ?emperor kg:6554 kg:0781 }\"\n\t\t]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?turtle WHERE { ?turtle wdt:P31 wd:Q604982 ; wikibase:sitelink ?sitelink . FILTER (CONTAINS(?sitelink, 'Teenage_Mutant_Ninja_Turtles')) }\"\n  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q1381762 is Teenage Mutant Ninja Turtles", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?turtle WHERE { ?turtle wdt:P31 wd:Q1381762. }\"\n \t\t \t  ]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0588 is part of\nkg:3896 is Teenage Mutant Ninja Turtles", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?turtle WHERE { kg:3896 ?p ?turtle . }\"\n\t\t]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?start WHERE { wd:Q164793 wdt:P1083 ?start . }\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124023 is Piccadilly\nwdt:P559 is terminus", "response": "{\n  \"query\" : [\n    \"SELECT ?start WHERE { wd:Q1124023 wdt:P559 ?start . }\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5579 is Piccadilly\nkg:8836 is terminus", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?start WHERE { kg:5579 kg:8836 ?start . }\"\n\t\t]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t \t\"query\": [\"$sparql\"]\n}\n    \t\t\t\t\t\t\t\t\t\t     \t"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwdt:P69 is educated at\nwdt:P361 is part of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?university wdt:P69 ?person. ?person wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q76.}\",\n     \t\t\"?university wdt:P31 wd:Q3918.\"\n     \t  ]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4581 is Barack Obama\nkg:1069 is spouse\nkg:3662 is educated at\nkg:9515 is part of\nkg:6870 is instance of\nkg:9045 is subclass of\nkg:8505 is university", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:3662/kg:9515/kg:1069/kg:9515/kg:6870/kg:9045/kg:8505 kg:4581.}\",\n      \t\t\t\"?x\"\n      \t]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5719826 ; wdt:P571 ?independenceDate . }\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q733 is Paraguay\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q733 wdt:P571 ?resource . }\"\n \t\t \t  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7772 is Paraguay\nkg:2115 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:type/kg:7772 ?y} UNION {?y kg:type/kg:7772 ?x}\",\n      \t\t\"?x kg:inception/kg:2115 ?z\"\n      \t  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q5 ;\", \"# instance of human\",\n    \"  wdt:P106 wd:Q40194 ;\", \"# occupation is basketball player\",\n    \"  wdt:P102 wd:Q8776 ;\", \"# member of NBA league\",\n    \"  wdt:P2044 ?height .\", \"# has height\"\n    ,\n    \"  FILTER(?height < (SELECT MIN(?h) WHERE {\",\n    \"    ?player2 wdt:P31 wd:Q5 ;\",\n    \"             wdt:P106 wd:Q40194 ;\",\n    \"             wdt:P102 wd:Q8776 .\",\n    \"    ?player2 wdt:P2044 ?h .\",\n    \"  }))\",\n    \"}\"\n  ]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P54 is member of sports team\nwdt:P118 is league\nwd:Q155223 is National Basketball Association\np:P54 is member of sports team\npq:P582 is end time\nwdt:P2048 is height", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{ ?item wdt:P106 wd:Q3665646 . }\",\n      \t\t\"{ ?item p:P54 ?membershipStatement . }\",\n      \t\t\"{ ?membershipStatement ps:P54 wd:Q155223 . }\",\n      \t\t\"{ OPTIONAL { ?membershipStatement pq:P582 ?endTime . FILTER(!BOUND(?endTime)) } }\",\n      \t\t\"{ ?item wdt:P2048 ?heightValue . }\",\n      \t\t\"ORDER BY ASC(?heightValue)\",\n      \t\t\"LIMIT 1\"\n      \t]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is occupation\nkg:7892 is basketball player\nkg:5833 is member of sports team\nkg:9646 is league\nkg:3977 is National Basketball Association\nkg:2614 is member of sports team\nkg:5985 is end time\nkg:4026 is height", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?player kg:2614 ?team .\",\n\t\t    \t\t\t\"?team kg:2623 kg:3977 .\",\n\t\t    \t\t\t\"?player kg:4026 ?height .\"\n\t\t    \t\t]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q40897; wdt:P571 ?foundDate }\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q536133 is Jack Wolfskin\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q536133 wdt:P571 ?resource . }\"\n \t\t \t\t\t]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is Jack Wolfskin\nkg:3303 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { kg:5071 kg:3303 ?resource . }\"\n \t  \t    ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?headquarter WHERE { wd:Q786 wdt:P152 ?headquarter . }\"\n \t  \t    ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P159 is headquarters location", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?headquarter WHERE { wd:Q51747 wdt:P159 ?headquarter . }\"\n \t\t \t\t\t]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7473 is Air China\nkg:7154 is headquarters location", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?headquarterCity WHERE { kg:7473 kg:7154 ?headquarterCity . }\"\n \t]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?year \",\n    \"WHERE {\",\n    \"  wd:Q126970 wdt:P570 ?year .\",\n    \"} \"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q948831 is Plzeňský Prazdroj\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q948831 wdt:P571 ?resource. }\"\n    \t]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7689 is Plzeňský Prazdroj\nkg:3236 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?inception WHERE { kg:7689 kg:3236 ?inception . }\"\n     \t\t\t]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?event WHERE { ?event wdt:P31 wd:Q28570 ; wdt:P1469 wd:Q16177 . }\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19024 is Boston Tea Party\nwdt:P585 is point in time", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?resource WHERE { wd:Q19024 wdt:P585 ?resource . }\"\n  \t    \t\t]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3929 is Boston Tea Party\nkg:0565 is point in time", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?x WHERE { kg:3929 kg:0565 ?x . }\"\n \t  \t    ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q6; wdt:P1001 wd:Q83284. }\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P141 wd:Q219127. }\"\n  ]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7101 is IUCN conservation status\nkg:9298 is Critically Endangered", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?resource kg:7101 ?status .\",\n\t\t    \t\t\t\"?status skos:exactMatch <http://www.iucnredlist.org/ref/glossary#CR> .\"\n\t\t    \t\t]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P31 wd:Q5 ;\", \"Yeah, let's correct and complete that SPARQL query for you to accurately reflect the request of finding politicians who were married to a German person. Here is the corrected version of your query:\",\n    \"?politician wdt:P31 wd:Q5 ;\",\n    \"           wdt:P26 ?spouse .\",\n    \"?spouse wdt:P27 wd:Q32 .\", \"After ensuring that we're looking for politicians (instance of Q5) who have a spouse (P26) and the spouse is from Germany (country of citizenship P27 to Germany, Q32), here's the complete query:\",\n    \"}\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?politician WHERE {\"\n     \t\t,\"?politician wdt:P106 wd:Q82955 .\"\n     \t\t,\"?politician wdt:P26 ?spouse .\"\n     \t\t,\"?spouse wdt:P27 wd:Q183 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5848 is occupation\nkg:1708 is politician\nkg:0863 is spouse\nkg:5898 is country of citizenship\nkg:7899 is Germany\nkg:6832 is place of birth\nkg:5012 is country\nkg:7899 is Germany", "response": "{\n \t\t\"query\": [\n\t\t\t\"?subject ?p ?object.\"\n\t\t]\n\t\t}\n\t\t\t\t\t\t       \t\t\t\t\t\t\t"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t   \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?diameter WHERE { wd:Q2025 wdt:P2043 ?diameter . }\"]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2 is Earth\nwdt:P2386 is diameter", "response": "{\n  \"query\" : [\n    \"SELECT ?diameter WHERE { wd:Q2 wdt:P2386 ?diameter . }\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8706 is Earth\nkg:1993 is diameter", "response": "{\n \t\t\t\t\t\t\t\t\t  \t\"query\": [\"@prefix kg:<http://www.example.com/kg/>.\\n\\nSELECT ?diameter \\nWHERE {\\n\\tkg:8706 kg:1993 ?diameter .\\n}\"]\n}"}
{"question": "Is the wife of President Obama called Michelle?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is the wife of President Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q946 wdt:P26 ?resource . }\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE { ?state wdt:P297 'MN' }\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1813 is short name", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"?state wdt:P31 wd:Q35657 .\",\n  \t\t\"?state wdt:P1813 \\\"MN\\\"@en .\"\n  \t]\n  \t}\n  \t\t\t \t\t\t\t \t\t\t\t \t\t\t"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3306 is instance of\nkg:9063 is U.S. state\nkg:3554 is short name", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?state WHERE { kg:3554 kg:3306 kg:9063.?state . FILTER (STR(?state) = \\\"MN\\\") }\"\n\t\t]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?death WHERE { wd:Q3449 deathDate ?death . }\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9458 is Muhammad\nwdt:P570 is date of death", "response": "{\n \t    \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?death WHERE {\\nwd:Q9458 wdt:P570 ?death .\\n}\"]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is Muhammad\nkg:4086 is date of death", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { kg:4901 kg:4086 ?resource . }\"\n \t  \t    ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?governor WHERE { ?governor p1059 ?statement . ?statement ps1059 wd:Q28673 }\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1439 is Texas\nwdt:P1313 is office held by head of government\nwd:Q5589725 is Governor of Texas\nwd:Q5589725 is Governor of Texas\nwdt:P1308 is officeholder", "response": "{\n  \"query\" : [\n    \"SELECT ?governor WHERE { wd:Q1439 wdt:P1313 ?office . ?office wdt:P1308 ?governor . }\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5711 is Texas\nkg:0217 is office held by head of government\nkg:9831 is Governor of Texas\nkg:9831 is Governor of Texas\nkg:6636 is officeholder", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?kg:6636 kg:0217/kg:5711 ?}\",\n      \t\t\t\"?kg:6636 rdf:type foaf:Person\",\n      \t\t\t\"?kg:9831 rdfs:label 'Governor of Texas'\",\n      \t\t\t\"?kg:6636 rdf:type ?kg:9831\"\n      \t  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P345 wd:Q76260. }\"\n  ]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q8006 is Akira Kurosawa", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?movie WHERE { wd:Q8006 wdt:P57 ?movie . }\"\n    \t]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6393 is director\nkg:4441 is Akira Kurosawa", "response": "{\n  \"query\" : [\n    \"SELECT ?movie WHERE { kg:4441 kg:6393 ?movie . }\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?website WHERE {\"\n     \t\t,\"?actor wdt:P31 wd:Q5 .\"\n     \t, \"?actor wdt:P106 wd:Q21194 .\"\n     \t, \"?actor wdt:P178 wd:Q266207 .\"\n     \t, \"?actor wdt:P856 ?website .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\np:P161 is cast member\nps:P161 is cast member\nwdt:P856 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?actorWebsite WHERE {\",\n \t\t  \t\t\"wd:Q162371 wdt:P161 ?actor .\",\n \t\t  \t\t\"?actor wdt:P856 ?actorWebsite .\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7013 is Charmed\nkg:2103 is cast member\nkg:1343 is cast member\nkg:2499 is official website", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?website WHERE {\",\n \t\t\t\"?show <http://example.org/is> <http://example.org/Charmed> .\",\n \t\t\t\"?actor1 <http://example.org/cast_member_of> ?show .\",\n \t\t\t\"?actor2 <http://example.org/cast_member_of> ?show .\",\n \t\t\t\"?actor1 <http://example.org/official_website> ?website .\",\n \t\t\t\"?actor2 <http://example.org/official_website> ?website .\",\n \t\t\t\"?actor1 <http://example.org/is> kg:2103 .\",\n \t\t\t\"?actor2 <http://example.org/is> kg:1343 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?library WHERE {\"\n     \t,\"?library wdt:P31 wd:Q47569; \"\n     \t,\"wdt:P571 ?establishmentDate. \"\n     \t,\"FILTER(?establishmentDate < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n  \"query\" : [\n    \"SELECT ?library WHERE {\"\n     \t,\"?library wdt:P31 wd:Q7075 .\"\n     \t,\"?library wdt:P571 ?inception .\"\n     \t,\"?inception <http://www.w3.org/2001/XMLSchema#year> ?year .\"\n     \t,\"FILTER(?year < 1400)\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is instance of\nkg:6349 is subclass of\nkg:3669 is library\nkg:4653 is inception", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"SELECT ?lib WHERE { ?lib a kg:3669. ?lib kg:4653 ?year. FILTER(?year < 1400) }\"\n\t\t    \t]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?island WHERE {\",\n    \"  ?island wdt:P31 wd:Q47958; \",\n    \"          wdt:P17 wd:Q55.\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwdt:P361 is part of\nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q23442 is island", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?island WHERE {\",\n \t\t  \t\t\"wd:Q76936 wdt:P361 ?frisianIslandsGroup .\",\n \t\t  \t\t\"?frisianIslandsGroup wdt:P527+ ?island .\",\n \t\t  \t\t\"?island wdt:P31 wd:Q23442 .\", \">// instance of island\",\n \t\t  \t\t\"?island wdt:P17 wd:Q55 .}\", \">// country is Netherlands\"\n \t  \t\t]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:7181 is part of\nkg:9177 is country\nkg:0464 is Netherlands\nkg:6116 is instance of\nkg:9691 is island", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?island WHERE {\",\n \t\t\t\"?island kg:7181 kg:0335 .\", \"@comment \\\"?island is a part of Frisian Islands\\\"\",\n \t\t\t\"?island kg:9177 kg:0464 .\", \"@comment \\\"?island belongs to the Netherlands\\\"\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?museum WHERE { \"\n     \t\t,\"?painting wdt:P31 wd:Q3305213 .\"\n     \t, \"?painting rdfs:label ?titleFilter .\"\n     \t, \"FILTER (lang(?titleFilter) = 'en') .\"\n     \t, \"?painting wdk:P186 ?museum .\"\n     \t, \"FILTER regex(str(?titleFilter), \\\"The Scream\\\", \\\"i\\\") .\"\n     \t, \"?painting wdt:P170 wd:Q24513 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471379 is The Scream\nwdt:P527 is has part(s)\nwdt:P276 is location\nwdt:P31 is instance of\nwd:Q207694 is art museum", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P527 wd:Q471379; wdt:P276 ?location. ?location wdt:P31 wd:Q207694. ?location wdt:P17 wd:Q41}.\"\n     \t\t ]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3794 is The Scream\nkg:7898 is has part(s)\nkg:1678 is location\nkg:3411 is instance of\nkg:9154 is art museum", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:7898 kg:3794}\",\n      \t\t\"?x kg:3411 kg:9154\"\n      \t  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label_en\", \"?company\"] }\n \t\t\t\t\t\t\t\t\t  \t\t\t\t \t\t"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471891 is De Beers\nwdt:P571 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?resource WHERE { wd:Q471891 wdt:P571 ?resource . }\"\n \t\t \t\t\t]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5562 is De Beers\nkg:9354 is inception", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { kg:5562 kg:9354 ?resource . }\"\n   \t\t \t  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?president WHERE { ?president wdt:P36 wd:Q98; wdt:P31 wd:Q5; p:P20 wd:Q76. }\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?successor WHERE { wd:Q9696 p:P39 ?positionStatement . ?positionStatement ps:P39 wd:Q11696. ?positionStatement pq:P1366 ?successor }\"\n     \t\t ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9891 is John F. Kennedy\nkg:7907 is position held\nkg:3493 is position held\nkg:8998 is President of the United States\nkg:8421 is replaced by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:9891 kg:8421 ?resource . ?resource kg:7907 kg:8998 }\"\n \t  \t    ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?parentOfWife WHERE { wd:Q214679 wdt:P3950 ?wife . ?wife wdt:P22 ?mother . ?wife wdt:P25 ?father . ?mother wikibase:externalId ?parentOfWifeMother. ?father wikibase:externalId ?parentOfWifeFather. }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19943 is Juan Carlos I of Spain\nwdt:P26 is spouse\nwdt:P40 is child", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?parentOfWife WHERE {\"\n \t\t  \t\t,\"wd:Q19943 wdt:P26 ?wife .\"\n \t\t  \t\t,\"?wife wdt:P40 ?childOfWife .\"\n \t\t  \t\t,\"?childOfWife wdt:P22 ?parentOfWife .\"\n \t\t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7309 is Juan Carlos I of Spain\nkg:9505 is spouse\nkg:1329 is child", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?parent1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> .\",\n  \t                \t\"?parent2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> .\",\n  \t                \t\"kg:7309 kg:9505 ?wife .\",\n  \t                \t\"?wife <http://data.viaf.org/viaf/terms#/parent> ?parent1 .\",\n  \t                \t\"?wife <http://data.viaf.org/viaf/terms#/parent> ?parent2 .\",\n  \t                \t\"{ ?parent1 <http://www.w3.org/2000/01/rdf-schema#label> ?parentName1. } UNION { ?parent2 <http://www.w3.org/2000/01/rdf-schema#label> ?parentName2. }\",\n  \t                \t\"?parent1 <http://xmlns.com/foaf/0.1/name> ?parentName1.\",\n  \t                \t\"?parent2 <http://xmlns.com/foaf/0.1/name> ?parentName2.\"\n  \t\t            ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t\t \t\"query\": [\"$prefixes\\nSELECT ?author WHERE {\\n wd:Q110479 wdt:P50 ?author .\\n}\"] }\n     \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45875 is A Song of Ice and Fire\nwdt:P106 is occupation\nwd:Q6625963 is novelist", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?author WHERE { wd:Q45875 wdt:P106 wd:Q6625963 }\"\n    \t]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2137 is A Song of Ice and Fire\nkg:0038 is occupation\nkg:9798 is novelist", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?novelist WHERE { kg:2137 kg:0038 ?novelist . ?novelist kg:0038 kg:9798 }\"\n \t]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?studio WHERE { wd:Q104276 wdt:P918 ?studio . }\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q1299 is The Beatles\nwdt:P577 is publication date\nwdt:P483 is recorded at studio or venue", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?studio wdt:P483/wikibase:claim ?recording_statement . \"\n     \t\t,\"?recording_statement wikibase:statementPid wd:Q482994 . \"\n     \t\t,\"?recording_statement ps:P175 wd:Q1299 . \"\n     \t\t,\"FILTER NOT EXISTS {?recording_statement pq:P577 ?date }\"\n     \t\t,\"}\"\n     \t]\n     \t}\n    \t\t\t\t\t\t      \t\t \t"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2481 is instance of\nkg:0784 is album\nkg:2791 is performer\nkg:1100 is The Beatles\nkg:7038 is publication date\nkg:1938 is recorded at studio or venue", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?studio WHERE { kg:1100 kg:1938 ?studio . }\"\n \t]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?death WHERE { wd:Q8456 wdt:P570 ?death . }\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9685 is Diana, Princess of Wales\nwdt:P570 is date of death", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t    \t\t\t\"SELECT ?death WHERE { wd:Q9685 wdt:P570 ?death . }\"\n  \t    \t\t]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8027 is Diana, Princess of Wales\nkg:4930 is date of death", "response": "{\n  \"query\" : [\n    \"SELECT ?deathDate WHERE { kg:8027 kg:4930 ?deathDate . }\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$ -> SELECT ?founder WHERE { ?organization wdt:P1742 wd:Q30869 ; wdt:P166 ?founder }\"]\n}\n\t\t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t "}
{"question": "Who founded Intel?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q248 is Intel\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q248 wdt:P112 ?resource . }\"\n \t\t \t  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5687 is Intel\nkg:2695 is founded by", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"?founder kg:2695 kg:5687 .\"\n\t\t \t\t]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?player WHERE { ?player p:P106 [ ps:P106 wd:Q283974 ; pq:P527 wd:Q100867 ]. ?player wdt:P569 ?dob. FILTER NOT EXISTS {?player wdt:P570 ?dod} SERVICE wikibase:(snaks?ps:P106) { ?player p:P106 [ ps:P106 wd:Q283974 ; pq:P527 ?team ]. ?team wdt:P31 wd:Q11046. } FILTER (YEAR(?dob) = YEAR(NOW())) ORDER BY ASC(YEAR(?dob)) LIMIT 1}\"\n  ]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P118 is league\nwd:Q9448 is Premier League\nwdt:P54 is member of sports team\nwdt:P569 is date of birth", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item wdt:P118 wd:Q9448; wdt:P54 ?team. ?item wdt:P569 ?dob. }\"\n      \t\t\t]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8065 is league\nkg:5247 is Premier League\nkg:7482 is member of sports team\nkg:9621 is date of birth", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?player WHERE {\",\n            \"?player kg:7482 ?team .\", \"><!-- member of sports team -->\\n\",\n            \"?team kg:8065 kg:5247 .\", \"><!-- league is Premier League -->\\n\",\n            \"?player kg:9621 ?dob .\", \"><!-- date of birth -->\\n\",\n            \"}\",\n            \"ORDER BY ASC(?dob)\",\n            \"LIMIT 1\"\n\t\t]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q4022 ;\", \"># Instance of river or lake\",\n    \"           wdk:p625 ?coordinate .\", \"># Has coordinate location\"\n   \t,\"  ?resource wdt:P625 ?coordinate ;\", \"# Filter by geographic coordinates\"\n   \t,\"           wdt:P131* wd:Q7894 .\", \"# Located in South Carolina, USA\"\n   \t,\"}\",\n    \"GROUP BY ?resource\",\n    \"}\"\n  ]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P131 is located in the administrative territorial entity\nwd:Q1456 is South Carolina\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23397 is lake", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?riverlake WHERE {\",\n \t\t\t\"?riverlake wdt:P31/wdt:P279 wd:Q23397 .\",\n \t\t\t\"?riverlake wdt:P131 wd:Q1456 .\"\n \t\t,\"FILTER (wdt:P31(?riverlake) || wdt:P279(?riverlake))\" ,\n \t\t\"} GROUP BY ?riverlake\"\n \t]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6192 is located in the administrative territorial entity\nkg:4355 is South Carolina\nkg:5420 is instance of\nkg:6123 is subclass of\nkg:6328 is lake", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:5420 kg:6192 .\",\n      \t\t\t\"kg:6192 kg:6123 kg:4355 .\",\n      \t\t\t\"{ ?x kg:5420 kg:6328 }\"\n      \t\t\t ]\n}"}
{"question": "Who was called Rodzilla?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was called Rodzilla?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label = \"]} "}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?capital WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256 ;\", \"># instance of country\",\n    \"           wdt:P479 ?capital .\", \"># has capital\"\n   \t\t,\n    \"  ?country wdt:P30 wd:Q5085 .\", \"># located on continent Africa\"\n   \t,\n    \"} ORDER BY ?country\"\n  ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P36 is capital", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?capital WHERE {\",\n \t\t\t\"?country wdt:P31 wd:Q6256 .\",\n \t\t\t\"?country wdt:P30 wd:Q15 .\",\n \t\t\t\"?country wdt:P36 ?capital .\"\n \t\t,\"?capital wdt:P31 wd:Q515 .\"\n \t,\"}\" ]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1721 is instance of\nkg:6700 is country\nkg:7478 is continent\nkg:8902 is Africa\nkg:0430 is capital", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?capital WHERE {\",\n \t\t\t\"?country kg:1721 kg:6700 .\",\n \t\t\t\"?country kg:1721 ?continent .\",\n \t\t\t\"?continent kg:1721 kg:8902 .\",\n \t\t\t\"?country kg:1721 ?capital .\",\n \t\t\t\"?capital kg:1721 kg:0430 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?bridge WHERE { \"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?manhattanBridge wdt:P31 wd:Q28095; wdt:P1867 ?type .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?bridge wdt:P31 wd:Q28095; wdt:P1867 ?type .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?bridge != wd:Q28095)\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125050 is Manhattan Bridge\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q12280 is bridge\nwd:Q12280 is bridge", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?bridge WHERE { wd:Q125050 wdt:P31 ?type . ?bridge wdt:P31 ?type }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3760 is Manhattan Bridge\nkg:4675 is instance of\nkg:4675 is instance of\nkg:4675 is instance of\nkg:6359 is subclass of\nkg:6633 is bridge\nkg:6633 is bridge", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource kg:4675 kg:6633. \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"FILTER(?resource != kg:3760) .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?company WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?mark Zuckerburg.wditem .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?mark p:P3457 ?statement .\" ,\"%=P3457%= founding of an organization or company\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?statement ps:P3457 ?company .\" ,\"%=ps:P3457%= the subject of a statement about founding\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q36215 is Mark Zuckerberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q783794 is company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?company \",\n \t\t\"WHERE {\",\n \t\t\" wd:Q36215 wdt:P112 ?company .\",\n \t\t\"?company wdt:P31/wdt:P279* wd:Q783794 .\",\n \t\t\"}\"]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1526 is founded by\nkg:1376 is Mark Zuckerberg\nkg:1343 is instance of\nkg:0834 is subclass of\nkg:8594 is company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:1526 ?y .\",\n      \t\t\t\"?y kg:1376 kg:1343 .\",\n      \t\t\t\"?x kg:1343 kg:8594\"\n      \t\t\t ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?book WHERE { ?book wdt:P31 wd:Q571 ; wdt:P952 ?pageCount . } ORDER BY DESC(?pageCount) LIMIT 1\"\n  ]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q571 is book\nwdt:P1104 is number of pages", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\t\t\t\"SELECT ?book WHERE {\"\n \t\t\t\t\t\t,\"?book wdt:P31 wd:Q571 .\"\n \t\t\t\t\t\t,\"?book wdt:P1104 ?pages.\"\n \t\t\t\t\t\t,\"?maxBook (wdt:P1104/max) ?maxPages .\"\n \t\t\t\t\t\t,\"FILTER(?pages = ?maxPages)\"\n \t\t\t\t\t\t,\"}\"\n \t\t \t\t\t]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2272 is instance of\nkg:1916 is subclass of\nkg:8797 is book\nkg:6305 is number of pages", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?book WHERE { ?book a kg:8797. ?book kg:6305 ?pages. } ORDER BY DESC(?pages) LIMIT 1\"\n\t\t]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?state WHERE { ?state wdt:P31 wd:Q35658; wdt:P2046 ?area . FILTER (MAX(?area)) }\"\n  ]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\t\t\t\"{?item wdt:P31 wd:Q35657 . ?item wdt:P2046 ?area . } ORDER BY DESC(?area) LIMIT 1\"\n  \t\t\t\t]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1426 is instance of\nkg:7930 is U.S. state\nkg:5830 is area", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"SELECT ?resource WHERE { ?resource a kg:7930 . }\"\n  \t    \t\t]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?company ?website WHERE {\",\n    \"  ?company wdt:P31 wd:Q43229;              \",\n    \"           wdt:P1568 ?employeeCount;        \",\n    \"           wdk:P856 ?website.               \",\n    \"  FILTER(?employeeCount > 500000)          \",\n    \"} ORDER BY DESC(?employeeCount)\"\n  ]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P1128 is employees\nwdt:P856 is official website", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?company wdt:P31 wd:Q4830453 . ?company wdt:P1128 ?employeeCount . ?employeeCount rdf:type wikibase:QuantityValue . ?employeeCount wikibase:quantityAmount ?amount . FILTER(?amount > 500000) . ?company wdt:P856 ?website .}\"\n      \t]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1735 is instance of\nkg:2392 is subclass of\nkg:4264 is business\nkg:0996 is employees\nkg:7595 is official website", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?x kg:0996 ?y .\",\n\t\t    \t\t\"?y xsd:int > 500000 .\",\n\t\t    \t\t\"?x kg:7595 ?z\"\n\t\t    \t] }\n    \t\t\t\t\t\t    \t\t\t\t\t\t"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?ship WHERE { ?ship wdt:P31 wd:Q47069; wdt:P179 wd:Q80526. }\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11446 is ship\nwdt:P1344 is participant in\nwdt:P710 is participant\nwd:Q7322 is Christopher Columbus", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?ship WHERE { wd:Q7322 wdt:P1344 ?voyage . ?voyage wdt:P710 ?ship . ?ship wdt:P31 wd:Q11446 }\"\n \t]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8261 is instance of\nkg:5995 is subclass of\nkg:5241 is ship\nkg:4451 is participant in\nkg:1337 is participant\nkg:5802 is Christopher Columbus", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?ship WHERE { kg:5802 kg:4451 ?voyage . ?voyage kg:1337 ?trip . ?trip kg:4451 ?ship . FILTER (isLiteral(?ship) || kg:5241 != []) }\"\n\t\t]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q7896 ;\",\n \t\t\"wdt:P1110 ?gmtLabel .\"\n \t]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131436 is board game", "response": "{\n \t\"query\": [\n \t\t\"?game wdt:P31 wd:Q131436 .\",\n \t\t\"?game wdt:P170 wd:Q285956 .\" ]\n}"}
{"question": "List all boardgames by GMT.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8694 is instance of\nkg:9432 is board game", "response": "{\n \t\"query\": [\n \t\t\"?game kg:9432 ?type .\",\n \t\t\"?game kg:8694 <http://example.org/GMT> .\"\n \t]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?developer wdt:P856 wd:Q29374.\"\n  ]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40984 is Skype\nwdt:P178 is developer", "response": "{\n \t\"query\": [\n \t\t\"?developer wdt:P178 wd:Q40984.\"\n \t]\n}"}
{"question": "Who developed Skype?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Skype\nkg:1548 is developer", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?developer WHERE { kg:6211 kg:1548 ?developer . }\"] }"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P19 wd:Q675842.\"\n \t]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwd:Q160544 is Heraklion", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P19 wd:Q160544 .\"\n \t]\n}"}
{"question": "Which people were born in Heraklion?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9471 is place of birth\nkg:4255 is Heraklion", "response": "{\n \t\"query\": [\n \t\t\"?person kg:9471 kg:4255 .\"\n \t]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?area51 wdt:P131 ?state.\",\n    \"?state wdt:P31 wd:Q4908.\",\n    \"FILTER(?area51 = wd:Q26785)\"\n  ]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q177397 is Area 51\nwdt:P131 is located in the administrative territorial entity\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"?area51 wdt:P131 ?state .\",\n \t\t\"FILTER (?area51 = wd:Q177397)\"\n \t]\n}"}
{"question": "In which U.S. state is Area 51 located?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6216 is Area 51\nkg:5375 is located in the administrative territorial entity\nkg:5375 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"?area51 kg:5375 ?state .\",\n    \"?area51 kg:6216 \\\"Area 51\\\" .\"\n  ]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P159 wd:Q60;\",\n \t\t\"wdt:P39 wd:Q842765.\"\n \t]\n}"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q60 is New York City\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P39 wd:Q60; wdt:P31 wd:Q5.\",\n \t\t\"?item p:P39 ?statement.\",\n \t\t\"?statement ps:P39 wd:Q60;\",\n \t\t\"pq:P39.1 wd:Q82757.\"\n \t]\n}\n  \t\t\t\t\t  \t      \t\t\t\t"}
{"question": "Who is the mayor of New York City?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2848 is New York City\nkg:9377 is head of government", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?mayor WHERE {\\n    kg:2848 kg:9377 ?mayor .\\n}\"] }"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?lincoln wdt:P31 wd:Q21045896.\",\n    \"?deathPlace wdt:P20 ?lincoln.\"\n  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"?placeOfDeath\",\n    \"WHERE\",\n    \"{\",\n    \"  wd:Q91 wdt:P20 ?placeOfDeath .\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Abraham Lincoln die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9211 is Abraham Lincoln\nkg:6252 is place of death", "response": "{\n  \"query\": [\n    \"?place\",\n    \"WHERE\",\n    \"{\",\n    \"  kg:9211 kg:6252 ?place .\",\n    \"}\"\n  ]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P31 wd:Q20760948 ;\",\n \t\t\"wdt:P158 ?airport .\"\n \t]\n}\n    "}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P113 is airline hub", "response": "{\n \t\"query\": [\n \t\t\"?airport wdt:P113 wd:Q51747 .\"\n \t]\n}"}
{"question": "Which airports does Air China serve?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3523 is Air China\nkg:2174 is airline hub", "response": "{\n  \"query\": [\n    \"?airport\",\n    \"WHERE\",\n    \"{\",\n    \"  kg:3523 kg:2174 ?airport .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 ?williamShatner; \\n\",\n \t\t\"wdt:P161 ?actor.\\n\",\n \t\t\"?williamShatner wdt:P31 wd:Q5; \\n\",\n \t\t\"wdt:P453 ?directorPosition.\\n\",\n \t\t\"?directorPosition wdt:P1028 wd:Q760920.\\n\"\n \t]\n}\n   \t   \t \t \t  \t \t   "}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 wd:Q16297;\",\n \t\t\"?movie wdt:P161 ?actor.\",\n \t\t\"?movie wdt:P57 wd:Q16297.\"\n \t]\n}"}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3840 is director\nkg:6889 is William Shatner\nkg:7140 is cast member\nkg:6889 is William Shatner\nkg:7140 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:3840 kg:6889 .\",\n \t\t\"?movie kg:7140 ?actor .\",\n \t\t\"?movie kg:7140 kg:6889 .\"\n \t]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?philippines wdt:P31 wd:Q35044 .\",\n \t\t\"?philippines wdt:P37 ?language .\",\n \t\t\"?language wdt:P31 wd:Q3624078 .\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q928 is Philippines\nwdt:P37 is official language", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P37 ?language .\",\n \t\t\"?item wikibase:sense wd:Q928\"\n \t]\n}"}
{"question": "What are the official languages of the Philippines?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5866 is Philippines\nkg:9978 is official language", "response": "{\n  \"query\": [\n    \"?x\",\n    \"kg:5866\",\n    \"kg:9978\"\n  ]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; # instance of film\\n\",\n \t\t\"wdt:P495 wd:Q90. # country of origin is Denmark\"\n \t]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P495 wd:Q35.\"\n \t]\n}"}
{"question": "Give me all Danish films.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8808 is subclass of\nkg:6517 is film\nkg:8359 is instance of\nkg:1180 is country of origin\nkg:5463 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?film kg:8359 kg:6517 .\",\n \t\t\"?film kg:1180 kg:5463 .\"\n \t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q207589.\",\n \t\t\"?movie wdt:P57 wd:Q34305.\"\n \t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q35332 is Brad Pitt\nwdt:P57 is director\nwd:Q192990 is Guy Ritchie", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424.\",\n \t\t\"?movie wdt:P161 wd:Q35332.\",\n \t\t\"?movie wdt:P57 wd:Q192990.\"\n \t]\n}"}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5285 is subclass of\nkg:4255 is film\nkg:0188 is instance of\nkg:3943 is cast member\nkg:8245 is Brad Pitt\nkg:6493 is director\nkg:1627 is Guy Ritchie", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:0188 kg:4255 .\",\n \t\t\"?movie kg:3943 kg:8245 .\",\n \t\t\"?movie kg:6493 kg:1627 .\"\n \t]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?designer wdt:P1303 wd:Q46825;\", \">// Q46825 is the Wikidata ID for Uzi (submachine gun), P1303 indicates the property 'designed' or 'invented'. This line finds the designer of the Uzi. \\n\",\n \t\t\"?designer wdt:P1303 ?otherWeapons.\", \">// Finds other weapons designed by the same person.\\n\",\n \t\t\"FILTER (?otherWeapons != wd:Q46825)\" ,\">// Excludes the Uzi from the results to only return other weapons developed by the designer.\\n\",\n \t\t\"?otherWeapons wdt:P31/wdt:P279* wd:Q11270;\", \">// Ensures that ?otherWeapons are instances or subclasses of 'weapon'.\\n\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q728 is weapon\nwd:Q155644 is Uzi\nwdt:P287 is designed by\nwdt:P279 is subclass of\nwdt:P287 is designed by\nwd:Q155644 is Uzi", "response": "{\n \t\"query\": [\n \t\t\"?weapon wdt:P287 ?designer.\",\n \t\t\"wd:Q155644 wdt:P287 ?designer;\",\n \t\t\"wdt:P279* wd:Q728.\",\n \t\t\"?weapon wdt:P279* wd:Q728.\"\n \t]\n}"}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2838 is subclass of\nkg:7386 is weapon\nkg:6166 is Uzi\nkg:5784 is designed by\nkg:2838 is subclass of\nkg:5784 is designed by\nkg:6166 is Uzi", "response": "{\n \t\"query\": [\n \t\t\"?designer kg:5784 kg:6166 .\",\n \t\t\"?weapon kg:5784 ?designer ;\",\n \t\t\"kg:7386 true .\"\n \t]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?owner wdt:P127 wd:Q40856.\"\n  ]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168383 is Universal Pictures\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"?owner wdt:P127 wd:Q168383 .\"\n  ]\n}"}
{"question": "Who is the owner of Universal Studios?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1265 is Universal Pictures\nkg:8712 is owned by", "response": "{ \"query\": [\"SELECT ?owner WHERE { kg:1265 kg:8712 ?owner . }\"] }"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35684 .\",\n \t\t\"?state wdt:P2046 ?populationDensity .\",\n \t\t\"OPTIONAL { ?maxState wdt:P31 wd:Q35684 ; wdt:P2046 ?maxPopulationDensity } .\",\n \t\t\"FILTER (!bound(?maxPopulationDensity) || ?populationDensity >= ?maxPopulationDensity) .\"\n \t]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657.\",\n \t\t\"?state wdt:P1082 ?population.\",\n \t\t\"?state wdt:P2046 ?area.\"\n \t]\n}"}
{"question": "Which state of the USA has the highest population density?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is instance of\nkg:1730 is U.S. state\nkg:4667 is area\nkg:4199 is population", "response": "{\n \t\"query\": [\n \t\t\"?state kg:1730 ?usState.\",\n \t\t\"?state kg:4199 ?population.\",\n \t\t\"?state kg:4667 ?area.\",\n \t\t\"?density = (?population / ?area).\"\n \t]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?monarch wdt:P31 wd:Q6581092; \", \"><!-- Q6581092 is the Wikidata ID for \" ,\"Monarch\" ,\", and P31 denotes instance of. The semicolon indicates that another predicate follows for the same subject. -->\"\n \t\t, \"?monarch wdt:P26 ?spouse.\", \"><!-- P26 represents the spouse property in Wikidata. -->\"\n \t\t, \"?spouse wdt:P27 wd:Q183.\", \"><!-- Q183 is the Wikidata ID for \" ,\"Germany\" ,\", and P27 denotes country of citizenship. This line filters spouses who are German citizens. -->\"\n \t\t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\"<!-- This part ensures that labels are returned in English. However, since the instruction specifies to return only resources, this might be omitted or adjusted as per the exact requirement of resource identification without labels. -->\"\n \t]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q116 is monarch\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?monarch wdt:P106 wd:Q116.\",\n \t\t\"?monarch wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P27 wd:Q183.\"\n \t]\n}"}
{"question": "Which monarchs were married to a German?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9875 is occupation\nkg:9875 is monarch\nkg:7072 is spouse\nkg:1801 is country of citizenship\nkg:2266 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?monarch kg:9875 kg:9875 .\",\n \t\t\"?monarch kg:7072 ?spouse .\",\n \t\t\"?spouse kg:1801 kg:2266 .\"\n \t]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P170 wd:Q42635.\",\n    \"{\",\n    \"  ?comic wdt:P800 ?creator;\",\n    \"         rdfs:label ?title.\",\n    \"  FILTER(LANG(?title) = 'en')\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q42635 wdt:P170 ?creator.\",\n    \"}\",\n    \"?creator wdt:P31/wdt:P279* wd:Q5.\"\n  ]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q190679 is Captain America\nwdt:P170 is creator", "response": "{\n \t\"query\": [\n \t\t\"?comic wdt:P170 ?creator .\",\n \t\t\"?comic wd:Q190679\"\n \t]\n}"}
{"question": "Who created the comic Captain America?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2488 is Captain America\nkg:1582 is creator", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1582 kg:2488 .\"\n \t]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?apollo14 wdt:P31 wd:Q4115189;\",\n \t\t\"?apollo14 wdt:P642 ?astronaut.\",\n \t\t\"?mission wdt:P180 ?apollo14.\"\n \t]\n}\n   \t"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n \t\"query\": [\n \t\t\"?astronaut wdt:P1029 wd:Q178871.\"\n \t]\n}"}
{"question": "Give me the Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9400 is Apollo 14\nkg:6757 is crew member(s)", "response": "{\n \t\"query\": [\"$astronauts\"]\n \t}\n \t                \t\t"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?book wdt:P1476 \\\"The Pillars of the Earth\\\";\",\n    \"?book wdt:P50 ?author.\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"?book wdt:P50 ?author .\",\n    \"?book wikibase:sameAs wd:Q1163227 .\"\n  ]\n}"}
{"question": "Who wrote the book The pillars of the Earth?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3489 is The Pillars of the Earth\nkg:7086 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?author WHERE {\\n    kg:3489 kg:7086 ?author .\\n}\"] }"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?state wdt:P31 wd:Q35684 . # The state is an instance of U.S. states (Q35684) \\n\",\n \t \"?state wdt:P2250 ?density . # Get the population density of the state\\n\"\n \t\t]\n \t}"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657 .\",\n \t\t\"?state wdt:P2046 ?area .\",\n \t\t\"?state wdt:P1082 ?population .\",\n \t\t\"{?state wdt:P31 wd:Q35657} UNION {?state wdt:P31/wdt:P279* wd:Q35657} .\"\n \t]\n}\n  \t\t\t\t\t  \t      \t\t\t\t"}
{"question": "Which state of the United States of America has the highest density?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1504 is instance of\nkg:4691 is U.S. state\nkg:6036 is area\nkg:6748 is population", "response": "{\n \t\"query\": [\n \t\t\"?state a kg:4691 .\",\n \t\t\"?state kg:6748 ?population .\",\n \t\t\"?state kg:6036 ?area .\",\n \t\t\"{?density bind((?population / ?area) as ?density)}\",\n \t\t\"optional{?maxState kg:6748 ?maxPopulation . ?maxState kg:6036 ?maxArea . bind((?maxPopulation / ?maxArea) as ?maxDensity)}\",\n \t\t\"?state kg:1504 ?maxDensity\"\n \t]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?spaceflight wdt:P449 wd:Q168523.\"\n \t]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n \t\"query\": [\n \t\t\"?spaceflight wdt:P1427 wd:Q177477 .\"\n \t]\n}"}
{"question": "Which spaceflights were launched from Baikonur?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3950 is start point\nkg:1434 is Baikonur Cosmodrome", "response": "{\n \t\"query\": [\n \t\t\"?spaceflight kg:3950 kg:1434 .\"\n \t]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P106 wd:Q24789555;\",\n \t\t\"wdt:P106 wd:Q119245;\",\n \t\t\"wdt:P361 wd:Q119245.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158852 is conductor\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q158852 ;\",\n \t\t\"?person wdt:P1303 wd:Q8338 .\"\n \t]\n}"}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9126 is occupation\nkg:5599 is conductor\nkg:3375 is instrument\nkg:5858 is trumpet", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3375 kg:5858 .\",\n \t\t\"?x kg:9126 kg:5599 .\"\n \t]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?utah wdt:P150 ?timezone.\",\n \t\t\"?state wdt:P31 wd:Q35658; \",\n \t\t\"wdt:P150 ?timezone.\"\n \t]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657.\",\n \t\t\"?state wdt:P421 ?timezone.\",\n \t\t\"wd:Q829 wdt:P421 ?timezone.\"\n \t]\n}"}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0110 is Utah\nkg:3176 is located in time zone\nkg:7966 is instance of\nkg:4285 is U.S. state\nkg:3176 is located in time zone\nkg:0110 is Utah", "response": "{\n \t\"query\": [\n \t\t\"?state kg:7966 kg:4285 .\",\n \t\t\"?state kg:3176 ?timezone .\",\n \t\t\"kg:0110 kg:3176 ?timezone .\"\n \t]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?daughter wdt:P25 wd:Q8190 . # Find the daughter of Ingrid Bergman (Q8190) via P25 (parent)\\n\",\n \t \"?daughter wdt:P26 ?husband. # Find who is married to the daughter via P26 (spouse)\\n\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43247 is Ingrid Bergman\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"?daughter wdt:P26 ?spouse .\",\n \t\t\"?daughter wdt:P40 wd:Q43247 .\"\n \t]\n}"}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1029 is Ingrid Bergman\nkg:6032 is child\nkg:4891 is spouse", "response": "{\n \t\"query\": [\"$child\" ]\n \t}\n \t            \t\t  \t\t"}
{"question": "Show me all museums in London.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?museum WHERE { ?museum wdt:P31 wd:Q502847 ; wdt:P17 wd:Q145 ; wdt:P131 wd:Q84 . }\"]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P276 is location\nwd:Q84 is London", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q33506 ;\",\n \t\t\"wdt:P276 wd:Q84 .\"\n \t]\n}"}
{"question": "Show me all museums in London.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2426 is instance of\nkg:8333 is museum\nkg:0559 is location\nkg:8155 is London", "response": "{\n \t\"query\": [\"$museum\"]\n \t}\n \t                \t\t"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P31 wd:Q5; \", \">// Instance of human (to filter players who are humans, as Q5 represents human in Wikidata) \\n\",\n \t\t\"?player wdt:P106 wd:Q209740;\", \">// Occupation is athlete (football player)\\n\",\n \t\t\"?team wdt:P31 wd:Q5328812; \", \">// Instance of sports team\\n\",\n \t\t\"?team rdfs:label \\\"Atlanta Falcons\\\"@en; \", \">// Label for the Atlanta Falcons in English\\n\",\n \t\t\"?player wdt:P54 ?team; \", \">// Player is member of the team (Atlanta Falcons)\\n\",\n \t\t\"OPTIONAL { ?player wdt:P2048 ?height. }\", \">// Optional height property to find tallest player\\n\",\n \t\t\"FILTER NOT EXISTS { ?otherPlayer wdt:P54 ?team; wdt:P2048 ?otherHeight . FILTER (?otherHeight > ?height) }.\" , \">// Filter to ensure the returned player is the tallest on the team\\n\"\n \t]\n}"}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P54 is member of sports team\nwd:Q272059 is Atlanta Falcons\nwdt:P2048 is height", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P54 wd:Q272059 .\",\n \t\t\"?player wdt:P2048 ?height .\"\n \t]\n}\n    "}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1796 is member of sports team\nkg:3447 is Atlanta Falcons\nkg:1244 is height", "response": "{\n \t\"query\": [\"$player\"]\n \t}\n \t                \t\t"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P1346 wd:Q7058; # Nobel Prize in Literature winner\\n\",\n \t\t\"\\twdt:P31 wd:Q5.\\t\\t\\t\\t# Human\\n\",\n \t\t\"?writer\"\n \t]\n}"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P166 is award received\nwd:Q37922 is Nobel Prize in Literature", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P106 wd:Q36180.\",\n \t\t\"?writer wdt:P166 wd:Q37922.\"\n \t]\n}"}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3248 is occupation\nkg:6280 is writer\nkg:9080 is award received\nkg:4831 is Nobel Prize in Literature", "response": "{\n \t\"query\": [\n \t\t\"?writer kg:3248 kg:6280 .\",\n \t\t\"?writer kg:9080 kg:4831 .\"\n \t]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"] }\n   \t            \t \t\t"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P106 wd:Q3665646 ;\",\n \t\t\"?player wdt:P2048 ?height .\",\n \t\t\"FILTER (?height > 2) .\"\n \t]\n}"}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7450 is occupation\nkg:6446 is basketball player\nkg:6984 is height", "response": "{\n \t\"query\": [\"$player\"]\n \t}\n \t                \t\t"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?statue_of_liberty wdt:P31 wd:Q480259.\",\n    \"?statue_of_liberty wdt:P512 ?construction_start_date.\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9202 is Statue of Liberty\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"?statue wdt:P571 ?inception .\",\n    \"FILTER (?statue = wd:Q9202)\"\n  ]\n}"}
{"question": "When was the Statue of Liberty built?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9932 is Statue of Liberty\nkg:2835 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:9932 kg:2835 ?resource . \\n}\"] }"}
{"question": "Which states border Illinois?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?Illinois wdt:P47 ?borderingState .\",\n \t\t\"?Illinois rdfs:label ?name .\",\n \t\t\"FILTER(LANG(?name) = 'en') .\",\n \t\t\"FILTER(CONTAINS(LCASE(?name), 'illinois')) .\"\n \t]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1204 is Illinois\nwdt:P47 is shares border with", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P47 wd:Q1204 .\"\n \t]\n}"}
{"question": "Which states border Illinois?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0369 is Illinois\nkg:2142 is shares border with", "response": "{\n \t\"query\": [\n \t\t\"?state kg:2142 kg:0369 .\"\n \t]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?developer wdt:P85 wd:Q9401.\",\n    \"{?game wdt:P170 ?developer.}\",\n    \"{?game rdfs:label \\\"Minecraft\\\"@en.}\"\n  ]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q49740 is Minecraft\nwdt:P178 is developer", "response": "{\n \t\"query\": [\n \t\t\"?developer wdt:P178 wd:Q49740.\"\n \t]\n}"}
{"question": "Who developed Minecraft?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is Minecraft\nkg:0620 is developer", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?developer WHERE { kg:5174 kg:0620 ?developer . }\"] }"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?hillelSlovak wdt:P31 wd:Q5; # Hillel Slovak is an instance of human (Q5, for filtering purposes if needed in broader queries, not directly used here but good practice to ensure we're querying a person entity)\\n\",\n    \"wdt:P729 ?hillelSlovakMusicBrainzID; # Linking Wikidata ID with MusicBrainz ID\\n\",\n    \"?deathPlace wdt:P20 ?hillelSlovak. # P20 is the property for place of death\"\n  ]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q186924 is Hillel Slovak\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"?placeOfDeath\",\n    \"WHERE\",\n    \"{\",\n    \"  wd:Q186924 wdt:P20 ?placeOfDeath .\",\n    \"}\"\n  ]\n}"}
{"question": "Where did Hillel Slovak die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8632 is Hillel Slovak\nkg:3889 is place of death", "response": "{\n  \"query\": [\n    \"?resource kg:3889 ?place .\",\n    \"?resource kg:8632 kg:Hillel_Slovak .\"\n  ]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P725 ?movie .\",\n \t\t\"?person rdfs:label \\\"Jesse Eisenberg\\\"@en .\"\n \t]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q219512 is Jesse Eisenberg", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q219512 .\"\n \t]\n}"}
{"question": "What movies does Jesse Eisenberg play in?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4329 is cast member\nkg:1690 is Jesse Eisenberg", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:4329 kg:1690 .\"\n \t]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?swimmer wdt:P31 wd:Q485701.\",\n \t\t\"?swimmer wdt:P19/wd:P131* wd:Q462.\",\n \t\t\"?swimmer wdt:P106 wd:Q10867456.\"\n \t]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10843402 is swimmer\nwdt:P19 is place of birth\nwd:Q649 is Moscow", "response": "{\n \t\"query\": [\n \t\t\"?swimmer wdt:P106 wd:Q10843402 .\",\n \t\t\"?swimmer wdt:P19 wd:Q649 .\"\n \t]\n}"}
{"question": "Give all swimmers that were born in Moscow.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5904 is occupation\nkg:1103 is swimmer\nkg:7585 is place of birth\nkg:8931 is Moscow", "response": "{\n \t\"query\": [\n \t\t\"?swimmer kg:7585 kg:8931 .\",\n \t\t\"?swimmer kg:5904 kg:1103 .\"\n \t]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". } SELECT ?cosmonaut WHERE { ?cosmonaut wdt:P103 wd:Q210954. }\"]\n}"}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q15180 is Soviet Union\nwdt:P27 is country of citizenship\nwd:Q159 is Russia", "response": "{\n \t\"query\": [\n \t\t\"?cosmonaut wdt:P106 wd:Q11631 .\",\n \t\t\"{?cosmonaut wdt:P27 wd:Q15180.} UNION {?cosmonaut wdt:P27 wd:Q159.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Give me all cosmonauts.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1826 is occupation\nkg:1573 is astronaut\nkg:9428 is country of citizenship\nkg:0187 is Soviet Union\nkg:9428 is country of citizenship\nkg:4328 is Russia", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\"\n \t\t,\"?resource kg:1826 kg:1573 .\"\n \t\t,\"{?resource kg:9428 kg:0187.} UNION {?resource kg:9428 kg:4328.}\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q4520869; # Instance of non-profit organization\",\n \t\t\"wdt:P17 wd:Q214.\" ,\", # Country is Switzerland\"\n \t\t,\"?org\"\n \t]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwd:Q39 is Switzerland\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q70208 is municipality of Switzerland", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q163740 ;\",\n \t\t\"wdt:P159 ?headquarters .\",\n \t\t\"?headquarters wdt:P159/wdt:P31* wd:Q39 .\"\n \t]\n}"}
{"question": "Give me all Swiss non-profit organizations.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0996 is instance of\nkg:6895 is nonprofit organization\nkg:0121 is headquarters location\nkg:3997 is Switzerland\nkg:0121 is headquarters location\nkg:0996 is instance of\nkg:0663 is municipality of Switzerland", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  ?resource kg:0996 kg:6895 ;\", \">// is instance of nonprofit organization (kg:6895) and a resource (?resource) is an entity that has this property as its type. The semicolon (;) allows us to chain another predicate-object pair for the same subject without repeating it. In this case, we're chaining the headquarters location predicate with Switzerland as the object value, which means the nonprofit organization's headquarters are located in Switzerland. This effectively filters out non-Swiss organizations from our results.\",\n \t\t\"  ?resource kg:0121/kg:3997 .\", \">// is headquartered in Switzerland (kg:3997). The forward slash (/) here implies a path expression, but given the structure of the provided properties and entities, it's more likely that we directly link headquarters location to Switzerland without needing a path. However, for clarity and sticking strictly with the provided entities and their relationships, this line is constructed as such to indicate the relationship between the resource (nonprofit organization) and its headquarters being in Switzerland.\"\n \t\t,\n \t\t\"}\"\n \t]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P31 wd:Q385;\",\n \t\t\"?president wdt:P569 ?birthDate.\",\n \t\t\"FILTER(YEAR(?birthDate) = 1945)\"\n \t]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwdt:P279 is subclass of\nwd:Q30461 is president\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q30461 .\",\n \t\t\"?president wdt:P569 \\\"1945-01-01T00:00:00Z\\\"^^xsd:dateTime .\"\n \t]\n}"}
{"question": "Which presidents were born in 1945?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9721 is position held\nkg:7772 is subclass of\nkg:4201 is president\nkg:9072 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?president kg:9721 kg:4201 .\",\n \t\t\"?president kg:9072 \\\"1945-01-01\\\"^^<http://www.w3.org/2001/XMLSchema#date> .\"\n \t]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?louReed wdt:P31 wd:Q5; \",\n    \"wdt:P136 ?musicGenre .\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q189080 is Lou Reed\nwdt:P136 is genre", "response": "{\n  \"query\": [\n    \"?item wdt:P136 ?genre .\",\n    \"?item wd:Q189080\"\n  ]\n}"}
{"question": "What kind of music did Lou Reed play?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5974 is Lou Reed\nkg:2540 is genre", "response": "{\n  \"query\": [\n    \"?musicGenre kg:2540 kg:5974 .\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?team wdt:P31 wd:Q5240896; # Identify that ?team is an instance of a baseball team (Red Sox in this context)\\n\",\n    \"wdt:P131 wd:Q30; # The team is located in the United States\\n\",\n    \"?team wdt:P118 ?stadium. # Find the stadium where the team plays\\n\",\n    \"{?stadium wdt:P31/wdt:P279* wd:Q546827} # Ensure that ?stadium is an instance of a stadium or sports venue\\n\"\n  ]\n}\n    "}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213959 is Boston Red Sox\nwdt:P115 is home venue", "response": "{\n  \"query\": [\n    \"?team wdt:P115 ?venue .\",\n    \"?team wikibase:sense wd:Q213959 .\"\n  ]\n}"}
{"question": "Where do the Red Sox play?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is Boston Red Sox\nkg:3920 is home venue", "response": "{\n  \"query\": [\n    \"?team kg:isBostonRedSox kg:4308 .\",\n    \"?team kg:homeVenue ?venue .\"\n  ]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q416025.\",\n \t\t\"?club wdt:P1189 wd:Q10757.\"\n \t]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q82595 is Bundesliga", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q476028 ;\",\n \t\t\"wdt:P118 wd:Q82595 .\"\n \t]\n}"}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7599 is instance of\nkg:6882 is association football club\nkg:9691 is league\nkg:5778 is Bundesliga", "response": "{\n \t\"query\": [\n \t\t\"?club a kg:6882 ;\",\n \t\t\"kg:9691 kg:5778 .\"\n \t]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?bridge wdt:P1376 wd:Q250.\"\n \t]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q12280 is bridge\nwdt:P177 is crosses\nwd:Q1471 is Seine", "response": "{\n \t\"query\": [\n \t\t\"?bridge wdt:P31 wd:Q12280.\",\n \t\t\"?bridge wdt:P177 wd:Q1471.\"\n \t]\n}"}
{"question": "Which bridges cross the Seine?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5104 is instance of\nkg:3688 is bridge\nkg:6698 is crosses\nkg:3188 is Seine", "response": "{\n \t\"query\": [\"$bridge\"]\n \t}\n \t                \t\t"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?halRoach wdt:P31 wd:Q5 ;\",\n    \"wdt:P155 ?film .\"\n  ]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P162 wd:Q72792.\"\n \t]\n}"}
{"question": "How many films did Hal Roach produce?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7838 is producer\nkg:2222 is Hal Roach", "response": "{\n  \"query\": [\n    \"?film kg:is producer kg:2222.\"\n  ]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; # instance of film/movie\\n\",\n \t\t\"wdt:P495 wd:Q90. # country of origin is Denmark\"\n \t]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424.\",\n \t\t\"?movie wdt:P495 wd:Q35.\"\n \t]\n}"}
{"question": "Give me all Danish movies.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7611 is subclass of\nkg:0455 is film\nkg:5857 is instance of\nkg:5175 is country of origin\nkg:4426 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:5857 kg:0455 .\",\n \t\t\"?movie kg:5175 ?country .\",\n \t\t\"?country kg:5857 kg:4426 .\"\n \t]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cause wdt:P580 wd:Q8072, # Start time of the cause (instance of) with entity 'death' (Q8072)\\n\",\n    \"?cause wdt:P31 wd:Q12142; . # Instance of the cause is a disease/disorder/condition (Q12142)\\n\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\n    \"{?cause wdt:P856 ?frequency} UNION {?cause wdt:P2290 ?frequency}. # Frequency of the cause, using properties for frequency or number of cases\\n\"\n  ]\n}\n   "}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"?cause wdt:P509 ?entity .\"\n  ]\n}"}
{"question": "What is the most frequent cause of death?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4613 is cause of death", "response": "{\n  \"query\": [\n    \"?resource kg:4613 ?causeOfDeath .\"\n  ]\n}"}
{"question": "Who are the four youngest MVP basketball players?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who are the four youngest MVP basketball players?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?player wdt:P31 wd:Q5; # Instance of human\\n\",\n \t \"        wdt:P166 wd:Q742058; # Won award (NBA MVP)\\n\",\n \t \"        wdt:P569 ?birthDate. # Date of birth\\n\",\n \t \"FILTER(?award = wd:Q742058) # Filter for NBA MVP award\\n\",\n \t \"OPTIONAL { ?player wdt:P166 ?awardYear. } # Year of the award\\n\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\\n\"\n \t]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453; # instance of company\\n\",\n \t\t\"wdt:P17 wd:Q36; # country Germany\\n\",\n \t\t\"wdt:P131 wd:Q238. # located in Munich\\n\",\n \t\t\"?company\"\n \t]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P159 is headquarters location\nwd:Q1726 is Munich", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453;\",\n \t\t\"?company wdt:P159 wd:Q1726.\"\n \t]\n}"}
{"question": "Give me all companies in Munich.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7379 is subclass of\nkg:3056 is business\nkg:3902 is instance of\nkg:9118 is headquarters location\nkg:4859 is Munich", "response": "{\n \t\"query\": [\"$company\"]\n \t}\n \t                \t\t"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P17 ?country .\",\n \t\t\"?mountain rdfs:label \\\"Himalayas\\\"@en .\",\n \t\t\"?country wdt:P36 ?capital .\"\n \t]\n}"}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country\nwdt:P36 is capital", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P17 wd:Q5451.\",\n \t\t\"?capital wdt:P36 ?country.\"\n \t]\n}\n    "}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3281 is Himalayas\nkg:7625 is country\nkg:0169 is capital", "response": "{\n \t\"query\": [\"$capital\"]\n \t}\n \t                \t\t"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"?director rdfs:label \\\"Park Chan-wook\\\"@en.\"\n  ]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q315484 is Park Chan-wook", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 wd:Q315484 .\"\n \t]\n}"}
{"question": "How many movies did Park Chan-wook direct?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6511 is director\nkg:3320 is Park Chan-wook", "response": "{\n  \"query\": [\n    \"?movie kg:6511 kg:3320\"\n  ]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT DISTINCT ?airline WHERE {\",\n \t\t\"  ?airline wdt:P31 wd:Q24280.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P31 wd:Q46970.\"\n \t]\n}"}
{"question": "How many airlines are there?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6911 is instance of\nkg:8786 is airline", "response": "{\n \t\"query\": [\"$airline\"]\n \t}\n \t                \t\t"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?island wdt:P31 wd:Q4908256; # Instance of island\\n\",\n \t\t\"wdt:P17 wd:Q17.\", \"># Country is Japan\\n\"\n \t]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23442 is island\nwdt:P17 is country\nwd:Q17 is Japan", "response": "{\n \t\"query\": [\n \t\t\"?island wdt:P31 wd:Q23442 ;\",\n \t\t\"wdt:P17 wd:Q17 .\"\n \t]\n}"}
{"question": "Give me all islands that belong to Japan.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7714 is instance of\nkg:7851 is island\nkg:2897 is country\nkg:2425 is Japan", "response": "{\n \t\"query\": [\n \t\t\"?island kg:7851 ?islandNode .\",\n \t\t\"?island kg:7714 kg:2425 .\"\n \t]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?city wdt:P31 wd:Q51068472.\",\n    \"?city rdfs:label \\\"Maribor\\\"@en;\",\n    \"?city wdt:P1082 ?population.\"\n  ]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1010 is Maribor\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P1082 ?population .\",\n \t\t\"?item wikibase:sense wd:Q1010.\"\n \t]\n}"}
{"question": "How many inhabitants does Maribor have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8389 is Maribor\nkg:2929 is population", "response": "{\n  \"query\": [\n    \"?resource kg:2929 ?population .\",\n    \"?resource kg:8389 kg:Maribor .\"\n  ]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?apollo14 wdt:P31 wd:Q41867059; # Apollo 14 mission instance of spaceflight operation (Q41867059) and has astronauts as participants (P1552)\"\n \t\t, \"?astronauts wdt:P1552 ?apollo14.\"\n \t\t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n    "}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n \t\"query\": [\n \t\t\"?astronaut wdt:P1029 wd:Q178871.\"\n \t]\n}"}
{"question": "Give me all Apollo 14 astronauts.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3406 is Apollo 14\nkg:0698 is crew member(s)", "response": "{\n \t\"query\": [\"$astronauts\"]\n \t}\n \t                \t\t"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q739852;\",\n \t\t\"?company wdt:P2044 ?employees.\",\n \t\t\"FILTER(?employees > 1000000)\"\n \t]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P1128 is employees", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453 .\",\n \t\t\"?company wdt:P1128 ?employees .\",\n \t\t\"FILTER(?employees > 1000000)\"\n \t]\n}"}
{"question": "Which companies have more than 1 million employees?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4170 is subclass of\nkg:5338 is business\nkg:1104 is instance of\nkg:8891 is employees", "response": "{\n \t\"query\": [\n \t\t\"?company kg:1104 kg:5338 . \"\n \t\t,\"?company kg:8891 ?employees . \"\n \t\t,\"FILTER (?employees > 1000000) .\"\n \t]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P361 wd:Q40827 ;\", \">// Q40827 is Garry Marshall's ID in Wikidata, P361 indicates director relationship but it might not be the exact predicate for directors. The correct one should be checked from the latest Wikidata documentation or SPARQL endpoint for precision. For this example, we assume a direct property for simplicity and correctness would require validation against current Wikidata schema. \",\n \t\t\"?film wdt:P161 wd:Q47535 .\" ,\">// Q47535 is Julia Roberts's ID in Wikidata, P161 indicates actor relationship with the film.\"\n \t\t,\n \t\t\"SELECT ?film\"\n \t]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q315087 is Garry Marshall\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P57 wd:Q315087.\",\n \t\t\"?film wdt:P161 wd:Q40523.\"\n \t]\n}"}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5953 is instance of\nkg:4237 is film\nkg:9816 is director\nkg:6470 is Garry Marshall\nkg:4262 is cast member\nkg:2003 is Julia Roberts", "response": "{\n \t\"query\": [\n \t\t\"?film kg:5953 kg:4237 .\",\n \t\t\"?film kg:9816 kg:6470 .\",\n \t\t\"?film kg:4262 kg:2003 .\"\n \t]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q416025.\",\n \t\t\"?club wdt:P1189 wd:Q1007112.\"\n \t]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q9448 is Premier League", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q476028 ;\",\n \t\t\"wdt:P118 wd:Q9448 .\"\n \t]\n}"}
{"question": "Give me all soccer clubs in the Premier League.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8917 is instance of\nkg:9198 is association football club\nkg:7069 is league\nkg:5830 is Premier League", "response": "{\n \t\"query\": [\n \t\t\"?club kg:8917 kg:9198 .\",\n \t\t\"?club kg:7069 kg:5830 .\"\n \t]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?place wdt:P171 wd:Q208956; # Q208956 is Urals as a geographical entity, P171 denotes instance of or subclass of relation but needs adjustment for correct property to find highest place in the Urals specifically. A more accurate approach would be needed focusing on elevation and location within Urals range directly which might involve additional qualifiers or properties not directly provided here without further specific Wikidata item for 'highest place in the Urals'.\"\n \t\t]\n }"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q35600 is Ural Mountains\nwdt:P610 is highest point", "response": "{\n \t\"query\": [\n \t\t\"?highestPlace wdt:P610 wd:Q35600.\"\n \t]\n}"}
{"question": "What is the highest place of the Urals?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4847 is Ural Mountains\nkg:1765 is highest point", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1765 kg:4847 .\"\n \t]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?governor wdt:P39 wd:Q142875 . \"\n \t ]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1214 is Wyoming\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?governor wdt:P6 wd:Q1214 .\"\n \t]\n}"}
{"question": "Who is the governor of Wyoming?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1605 is Wyoming\nkg:5742 is head of government", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?governor WHERE {\\n  kg:1605 kg:5742 ?governor .\\n}\"] }"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?eiffelTower wdt:P180 ?architect.\",\n    \"?architect wdt:P66 ?studyLocation.\"\n  ]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243 is Eiffel Tower\nwdt:P84 is architect\nwdt:P69 is educated at", "response": "{\n \t\"query\": [\n \t\t\"?architect wdt:P84 wd:Q243;\",\n \t\t\"wdt:P69 ?educatedAt.\"\n \t]\n}"}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8697 is Eiffel Tower\nkg:0724 is architect\nkg:7890 is educated at", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:8697 kg:0724 ?architect . ?architect kg:7890 ?resource . }\"] }"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P31 wd:Q5; # instance of human\",\n \t\t\"wdt:P106 wd:Q33995; # occupation actor\",\n \t\t\"wdt:P19 wd:Q251; # place of birth Paris\",\n \t\t\"wdt:P569 ?dateOfBirth. # date of birth\",\n \t\t\"?dateOfBirth > \\\"1950-01-01\\\"^^xsd:dateTime.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q90 is Paris\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P106 wd:Q33999 .\",\n \t\t\"?actor wdt:P19 wd:Q90 .\",\n \t\t\"?actor wdt:P569 ?dateOfBirth .\",\n \t\t\"FILTER(?dateOfBirth > \\\"1950-01-01\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2117 is occupation\nkg:6645 is actor\nkg:4144 is place of birth\nkg:5863 is Paris\nkg:5702 is date of birth", "response": "{\n \t\"query\": [\"$actor\"]\n \t}\n \t                \t\t"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q308 . # Liz Taylor is an actor of the movie ?movie (Q308 for Liz Taylor) \",\n \t\t\"?movie wdt:P161 wd:Q47952 . # Richard Burton is also an actor of the same movie ?movie (Q47952 for Richard Burton)\"\n \t]\n}\n  \t"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q34851 is Elizabeth Taylor\nwdt:P161 is cast member\nwd:Q151973 is Richard Burton", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q34851 ;\",\n \t\t\"wdt:P161 wd:Q151973 .\"\n \t]\n}"}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3549 is cast member\nkg:8585 is Elizabeth Taylor\nkg:3549 is cast member\nkg:7795 is Richard Burton", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:3549 kg:8585 .\",\n \t\t\"?movie kg:3549 kg:7795 .\"\n \t]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q4520869; # Instance of Nonprofit organization\",\n \t\t\"?org wdt:P17 wd:Q408; # Country is Australia\"\n \t\t]\n }"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P159 is headquarters location\nwdt:P17 is country\nwdt:P159 is headquarters location\nwd:Q408 is Australia", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q163740 ;\",\n \t\t\"?org wdt:P17 wd:Q408 .\"\n \t]\n}"}
{"question": "Give me all Australian nonprofit organizations.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4777 is instance of\nkg:7142 is nonprofit organization\nkg:9739 is headquarters location\nkg:5338 is country\nkg:0600 is Australia\nkg:9739 is headquarters location\nkg:5338 is country\nkg:9739 is headquarters location\nkg:0600 is Australia", "response": "{\n \t\"query\": [\"$resource kg:4777 ?orgType .\",\n               \"?orgType kg:7142 true .\",\n               \"$resource kg:9739 ?headquarters .\",\n               \"?headquarters kg:5338 kg:0600 .\"]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?pope wdt:P39 wd:Q47821 ;\",\n    \"wdt:P39 ?succession .\",\n    \"?succession wdt:P155 wd:Q6705 .\"\n  ]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q989 is John Paul II\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P1366 is replaced by", "response": "{\n \t\"query\": [\n \t\t\"?succeededBy ps:P39 wd:Q19546; pq:P1366 wd:Q989.\"\n \t]\n}"}
{"question": "Which pope succeeded John Paul II?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4431 is John Paul II\nkg:3917 is position held\nkg:8695 is position held\nkg:5502 is pope\nkg:5825 is replaced by", "response": "{\n \t\"query\": [\n \t\t\"?s kg:5825 kg:4431 .\"\n \t]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?item p:P39 ?statement . \"\n \t\t\t,\n \t \"OPTIONAL { ?statement ps:P39 wd:Q11696 } \" ,\n \t \"OPTIONAL { ?statement pq:P580 ?termStart } \" ,\n \t \"OPTIONAL { ?statement pq:P582 ?termEnd } \" ,\n \t \"?item wdt:P31 wd:Q3306212 . \"\n \t\t,\n \t \"FILTER (YEAR(?termStart) <= 1978 && (YEAR(?termEnd) >= 1978 || !BOUND(?termEnd)))\"\n \t]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q473984 is President of Pakistan\np:P39 is position held\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39/wdt:P31 wd:Q473984.\",\n \t\t\"?president p:P39 ?positionHeld.\",\n \t\t\"?positionHeld ps:P39 wd:Q473984;\",\n \t\t\"pq:P580 ?startTime;\",\n \t\t\"pq:P582 ?endTime.\",\n \t\t\"FILTER(?startTime <= 1978-01-01 && (?endTime >= 1978-12-31 || !bound(?endTime)))\"\n \t]\n}"}
{"question": "Who was president of Pakistan in 1978?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8206 is position held\nkg:4349 is President of Pakistan\nkg:3509 is position held\nkg:2536 is start time\nkg:0612 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president kg:8206 kg:4349 .\",\n \t\t\"?president kg:2536 ?startTime .\",\n \t\t\"?president kg:0612 ?endTime .\",\n \t\t\"FILTER(?startTime <= 1978 && ?endTime >= 1978)\"\n \t]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?owner wdt:P127 wd:Q483506.\"\n  ]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243278 is Rolls-Royce\nwdt:P127 is owned by", "response": "{\n \t\"query\": [\n \t\t\"?owner wdt:P127 wd:Q243278.\"\n \t]\n}"}
{"question": "Who is the owner of Rolls-Royce?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5136 is Rolls-Royce\nkg:4524 is owned by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?owner \\nWHERE {\\n    kg:5136 kg:4524 ?owner .\\n}\"] }"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?museum wdt:P31 wd:Q5827406.\",\n \t\t\"?museum wdt:P131 wd:Q90.\",\n \t\t\"{?museum wdt:P31/wdt:P279* wd:Q1147014.} UNION {?museum wdt:P31/wdt:P279* wd:Q6581098.}\"\n \t]\n}\n  \t"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P131 is located in the administrative territorial entity\nwd:Q90 is Paris", "response": "{\n \t\"query\": [\n \t\t\"?museum wdt:P31 wd:Q33506 .\",\n \t\t\"?museum wdt:P131* wd:Q90 .\"\n \t]\n}"}
{"question": "How many museums does Paris have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8603 is instance of\nkg:3705 is museum\nkg:5581 is located in the administrative territorial entity\nkg:2715 is Paris", "response": "{\n \t\"query\": [\n \t\t\"?museum kg:3705 ?type .\",\n \t\t\"?museum kg:5581 kg:2715 .\"\n \t]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?jfk wdt:P31 wd:Q768; # JFK is an instance of human (for disambiguation purposes, though not strictly necessary for this specific query as JFK is unique enough without it)\\n\",\n    \"wdt:P20 ?place_of_death. # property P20 denotes the place of death\\n\",\n    \"?place_of_death wdt:P17 wd:Q30. # The place of death is located in the United States (Q30)\\n\"\n  ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"?place wdt:P20 wd:Q9696 .\"\n  ]\n}"}
{"question": "Where was JFK assassinated?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0170 is John F. Kennedy\nkg:4823 is place of death", "response": "{\n  \"query\": [\n    \"?placeOfDeath kg:4823 kg:0170 .\"\n  ]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?chancellor wdt:P39 wd:Q467528 .\",\n \t\t\"?chancellor wdt:P27 wd:Q183 .\"\n \t]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n \t\"query\": [\n \t\t\"?chancellor wdt:P39 wd:Q4970706.\"\n \t]\n}"}
{"question": "Give me all federal chancellors of Germany.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0430 is position held\nkg:8057 is Federal Chancellor of Germany", "response": "{\n \t\"query\": [\"$chancellor kg:0430 kg:8057 .\"]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?beer wdt:P31 wd:Q11458; # Instance of beer\\n\",\n \t \"wdt:P495 wd:Q27. # Country of origin is Ireland\"\n \t ]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44 is beer\nwd:Q15075508 is beer brand\nwdt:P31 is instance of\nwdt:P17 is country\nwd:Q27 is Republic of Ireland", "response": "{\n \t\"query\": [\n \t\t\"?beer wdt:P31 wd:Q44.\",\n \t\t\"?beer wdt:P17 wd:Q27.\"\n \t]\n}"}
{"question": "Which beer originated in Ireland?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6618 is beer\nkg:6574 is beer brand\nkg:0525 is instance of\nkg:3428 is country\nkg:7048 is Republic of Ireland", "response": "{\n \t\"query\": [\n \t\t\"?beer kg:0525 kg:6618 .\",\n \t\t\"?beer kg:3428 kg:7048 .\"\n \t]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?himalaya wdt:P1785 ?mountain_system .\",\n \t\t\"?mountain_system wdt:P131* ?country .\",\n \t\t\"?country wdt:P31 wd:Q6256 .\"\n \t]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P17 ?country .\",\n \t\t\"?item wdt:P361 wd:Q5451 .\"\n \t]\n}"}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Himalayas\nkg:4276 is country", "response": "{\n  \"query\": [\n    \"?country wdt:P171* kg:0335 .\",\n    \"{?country a kg:4276.}\"\n  ]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P31 wd:Q5; # instance of human\",\n \t\t\"wdt:P106 wd:Q33995; # occupation actor\",\n \t\t\"wdt:P19 wd:Q40. # place of birth Germany\"\n \t]\n}\n    "}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10800557 is film actor\nwdt:P19 is place of birth\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P106 wd:Q10800557 .\",\n \t\t\"?actor wdt:P19 ?birthPlace .\",\n \t\t\"?birthPlace wdt:P17 wd:Q183 .\"\n \t]\n}"}
{"question": "Which actors were born in Germany?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9522 is occupation\nkg:1808 is film actor\nkg:0224 is place of birth\nkg:5013 is Germany\nkg:0224 is place of birth\nkg:2561 is country\nkg:5013 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:9522 kg:1808 .\",\n \t\t\"?actor kg:0224 ?birthPlace .\",\n \t\t\"?birthPlace kg:2561 kg:5013 .\"\n \t]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; # Instance of human (Q5 represents humans in Wikidata) \\n\",\n \t\t\"wdt:P86 ?film.\\n\",\n \t\t\"{?film wdt:P162 ?person} UNION {?film wdt:P174 ?person}. # P162 and P174 represent producer of the work\\n\",\n \t\t\"OPTIONAL { ?person wdt:P1560 ?numFilms. } # P1560 is for number of produced films, but this property does not exist in Wikidata.\\n\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\\n\"\n \t]\n}\n    "}
{"question": "Who produced the most films?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"?producer (wdt:P162)/(wdt:P31/wd:Q11424)+ ?film.\",\n    \"GROUP BY ?producer\",\n    \"ORDER BY DESC(COUNT(?film))\"\n  ]\n}"}
{"question": "Who produced the most films?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is instance of\nkg:0983 is film\nkg:9722 is producer", "response": "{\n  \"query\": [\n    \"?producer kg:9722 ?filmCount .\",\n    \"FILTER(?filmCount = (SELECT MAX(?count) WHERE { ?p kg:9722 ?count }))\",\n    \"{?film kg:0983 true. ?producer kg:9722 ?film}\",\n    \"VALUES ?type { kg:8519 }\"\n  ]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q9580 wdt:P1031 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q95 is Google\nwdt:P1128 is employees", "response": "{\n \t\"query\": [\n \t\t\"?google wdt:P1128 ?employees .\",\n \t\t\"FILTER (?google = wd:Q95)\"\n \t]\n}"}
{"question": "How many employees does Google have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1346 is Google\nkg:0226 is employees", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1346 kg:0226 ?resource . }\"] }"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P31 wd:Q5; # instance of human\",\n \t\t\"        wdt:P19 wd:Q64;.\", \"># place of birth is Berlin\"\n \t]\n}\n    "}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q64 is Berlin", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P106 wd:Q33999 .\",\n \t\t\"?actor wdt:P19 wd:Q64 .\"\n \t]\n}"}
{"question": "Give me all actors who were born in Berlin.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is occupation\nkg:4298 is actor\nkg:3614 is place of birth\nkg:5337 is Berlin", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:3614 kg:5337 .\",\n \t\t\"?actor kg:5174 kg:4298 .\"\n \t]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P178 wd:Q203596.\"\n  ]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111135 is Goofy\nwdt:P170 is creator", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P170 wd:Q111135.\"\n \t]\n}"}
{"question": "Who created Goofy?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9459 is Goofy\nkg:7536 is creator", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7536 kg:9459 .\"\n \t]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?alberta wdt:P31 wd:Q35643; # Alberta is an instance of province/territory of Canada\\n\",\n    \"wdt:P571 ?admissionDate.\" ]\n}\n   \t            \t \t\t"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1951 is Alberta\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?alberta wdt:P571 ?inception .\",\n \t\t\"FILTER (?alberta = wd:Q1951)\"\n \t]\n}"}
{"question": "When was Alberta admitted as province?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8461 is Alberta\nkg:3974 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:8461 kg:3974 ?resource . \\n}\"] }"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?soyuz wdt:P31 wd:Q105964 .\",\n    \"?mission wdt:P398 ?soyuz .\"\n  ]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q207329 is Soyuz programme", "response": "{\n \t\"query\": [\n \t\t\"?mission wdt:P361 wd:Q207329.\"\n \t]\n}"}
{"question": "How many missions does the Soyuz programme have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4715 is part of\nkg:9205 is Soyuz programme", "response": "{ \"query\": [\"SELECT ?missions WHERE { kg:9205 kg:4715 ?missions . }\"] }"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tvShow wdt:P31 wd:Q5389246; # Instance of TV show/series\\n\",\n \t\t\"wdt:P161 wd:Q42700. # Has cast member Neil Patrick Harris\"\n \t]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q15416 is television program\nwdt:P161 is cast member\nwd:Q485310 is Neil Patrick Harris\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?tvShow wdt:P31 wd:Q15416 ;\",\n \t\t\"wdt:P161 wd:Q485310 .\"\n \t]\n}"}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2058 is subclass of\nkg:5497 is television program\nkg:8214 is cast member\nkg:9534 is Neil Patrick Harris\nkg:3632 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?tvShow kg:8214 kg:9534 .\",\n \t\t\"?tvShow kg:5497 kg:3632 .\"\n \t]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?hells_angel ?founding_date .\",\n    \"?hells_angel rdfs:label \\\"Hells Angels\\\"@en;\",\n    \"?founding_date wdt:P31 wd:Q572694 // instance of start time (organisation)\"\n  ]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q622188 is Hells Angels\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P571 ?inception .\",\n \t\t\"FILTER (?item = wd:Q622188)\"\n \t]\n}"}
{"question": "When were the Hells Angels founded?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6885 is Hells Angels\nkg:8843 is inception", "response": "{\n  \"query\": [\n    \"?entity kg:8843 ?inception .\",\n    \"?entity kg:hasName \\\"Hells Angels\\\"@en .\"\n  ]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q4830453 ;\", \">// Q4830453 is the Wikidata ID for 'Net income (account)' and P31 denotes instance of, but this structure might not directly apply as it's complex to pinpoint net income with a direct query due to variability in reporting and lack of standardized quarterly/yearly tags. A more accurate approach would involve knowing specific time frames or using claims that link to financial reports which is beyond the scope without additional context or data structuring on Wikidata for such queries.\",\n    \"  wdt:P1790 ?netIncomeValue .\", \">// P1790 denotes 'Net income' but direct linking from Apple entity might not be available due to the reasons mentioned above. This line assumes a direct link which may not exist in current Wikidata structure without specifying time frame or report instance.\",\n    \"  wd:Q38 is ?resource .\" , \">// Q38 represents Apple Inc., but this part of the query needs adjustment as it doesn't logically connect to retrieve net income directly due to the complexity and variability in financial data representation on Wikidata.\"\n   ,\n    \"} LIMIT 1\"\n  ]\n}\n  "}
{"question": "What is the net income of Apple?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q312 is Apple\nwdt:P2295 is net profit", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P2295 ?netIncome .\",\n \t\t\"FILTER (?item = wd:Q312)\"\n \t]\n}"}
{"question": "What is the net income of Apple?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9309 is Apple\nkg:5852 is net profit", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9309 kg:5852 ?resource . }\"] }"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?holiday wdt:P31 wd:Q6584052.\",\n \t\t\"?holiday wdt:P412 wd:Q9905;\",\n \t\t\"FILTER NOT EXISTS {?holiday wdt:P31 wd:Q7582580}\"\n \t]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q1401522 is public holidays in Sweden", "response": "{\n \t\"query\": [\n \t\t\"?holiday wdt:P31 wd:Q1401522.\"\n \t]\n}"}
{"question": "Give me all Swedish holidays.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5437 is instance of\nkg:1431 is public holidays in Sweden", "response": "{\n \t\"query\": [\n \t\t\"?holiday kg:5437 kg:1431 .\"\n \t]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?queen wdt:P31 wd:Q6470528.\",\n    \"?queen rdfs:label \\\"Juliana of the Netherlands\\\"@en.\",\n    \"?burialPlace wdt:P1120 ?queen.\"\n  ]\n}"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154946 is Juliana of the Netherlands\nwdt:P119 is place of burial", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?city WHERE {\\n    wd:Q154946 wdt:P119 ?city.\\n}\"] }"}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7722 is Juliana of the Netherlands\nkg:1563 is place of burial", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:7722 kg:1563 ?resource . \\n}\"] }"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453.\"\n \t]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P452 is industry\nwd:Q39809 is marketing", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453 .\",\n \t\t\"?company wdt:P452 wd:Q39809 .\"\n \t]\n}"}
{"question": "Give me all companies in the advertising industry.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6959 is instance of\nkg:4237 is business\nkg:0680 is industry\nkg:5161 is marketing", "response": "{\n \t\"query\": [\n \t\t\"?company kg:6959/kg:4237/kg:0680/kg:5161 ?advertisingIndustry .\"\n \t]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5 ;\",\n    \"wdt:P937 wd:Q41028 .\"\n  ]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1203 is John Lennon\nwdt:P157 is killed by", "response": "{\n \t\"query\": [\n \t\t\"?killer wdt:P157 wd:Q1203.\"\n \t]\n}"}
{"question": "Who killed John Lennon?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2917 is John Lennon\nkg:5682 is killed by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2917 kg:5682 ?resource . }\"] }"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P31 wd:Q5; # instance of human\\n\",\n \t\t\"        wdt:P106 wd:Q188429; # occupation writer\\n\",\n \t\t\"        wdt:P66 wd:Q107408. # studied at Istanbul University or institutions in Istanbul\"\n \t]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P69 is educated at\nwdt:P131 is located in the administrative territorial entity\nwd:Q406 is Istanbul", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P106 wd:Q36180.\",\n \t\t\"?writer wdt:P69 ?institution.\",\n \t\t\"?institution wdt:P131* wd:Q406.\"\n \t]\n}"}
{"question": "Which writers studied in Istanbul?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5704 is occupation\nkg:0260 is writer\nkg:7091 is educated at\nkg:8154 is located in the administrative territorial entity\nkg:9339 is Istanbul", "response": "{\n \t\"query\": [\n \t\t\"?writer kg:5704 kg:0260 .\",\n \t\t\"?writer kg:7091 ?educationPlace .\",\n \t\t\"?educationPlace kg:8154 kg:9339 .\"\n \t]\n}"}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?band wdt:P31 wd:Q470586.\",\n \t\t\"?band wdt:P136 wd:Q29657.\",\n \t\t\"?band wdt:P17 wd:Q408.\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q215380 is musical group\nwdt:P495 is country of origin\nwd:Q408 is Australia\nwdt:P136 is genre\nwd:Q183862 is metalcore", "response": "{\n \t\"query\": [\n \t\t\"?band wdt:P31 wd:Q215380.\",\n \t\t\"?band wdt:P495 wd:Q408.\",\n \t\t\"?band wdt:P136 wd:Q183862.\"\n \t]\n}\n    "}
{"question": "Give me all Australian metalcore bands.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2057 is instance of\nkg:5941 is musical group\nkg:6595 is country of origin\nkg:4070 is Australia\nkg:5506 is genre\nkg:6845 is metalcore", "response": "{\n \t\"query\": [\n \t\t\"?band kg:2057 kg:5941 .\",\n \t\t\"?band kg:6595 kg:4070 .\",\n \t\t\"?band kg:5506 kg:6845 .\"\n \t]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ;\",\n \t\t\"wdt:P451 ?currency .\",\n \t\t\"?currency wdt:P31 wd:Q487850 ;\",\n \t\t\"rdfs:label ?currencyLabel .\",\n \t\t\"FILTER (LANG(?currencyLabel) = 'en') .\",\n \t\t\"FILTER (?currency = wd:Q982) .\" ,\n \t\t\"?country rdfs:label ?countryLabel .\",\n \t\t\"FILTER (LANG(?countryLabel) = 'en')\"\n \t]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256.\",\n \t\t\"?country wdt:P38 wd:Q4916.\"\n \t]\n}"}
{"question": "Which countries adopted the Euro?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4911 is instance of\nkg:8401 is country\nkg:8909 is currency\nkg:8143 is euro", "response": "{\n \t\"query\": [\n \t\t\"?country kg:8909 kg:8143 .\",\n \t\t\"?country kg:8401 kg:4911 .\"\n \t]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q12784 .\"\n \t]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q373822 is eating disorder", "response": "{\n \t\"query\": [\n \t\t\"?type wdt:P279* wd:Q373822.\"\n \t]\n}"}
{"question": "Give me all types of eating disorders.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6601 is subclass of\nkg:7808 is eating disorder", "response": "{\n \t\"query\": [\n \t\t\"?type kg:6601 ?eatingDisorder .\",\n \t\t\"?eatingDisorder kg:7808 true .\"\n \t]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q40182;\", \">// Q40182 is the Wikidata ID for Marc Chagall, P735 indicates religion or religious order\\n    \" , \"wdt:P31 wd:Q5.\", \">// P31 indicates instance of, and Q5 represents human\\n    \" , \"?person wdt:P140 ?religion.\" , \">// P140 indicates the religion of a person\\n    \" , \"?religion rdfs:label ?religionLabel .\", \">// Get label for the religion\\n    \" , \"FILTER(LANG(?religionLabel) = 'en') .\" , \">// Filter to get English labels\\n    \" , \"{SELECT ?person WHERE { ?person wdt:P735 wd:Q40182. } LIMIT 1}\" , \">// Ensure only Marc Chagall is considered\\n    \" , \"} \"\n  ]\n}\n  "}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q93284 is Marc Chagall\nwdt:P172 is ethnic group\nwd:Q7325 is Jewish people", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q93284\",\n    \"wdt:P172\",\n    \"wd:Q7325\"\n  ]\n}"}
{"question": "Was Marc Chagall a jew?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3776 is Marc Chagall\nkg:7566 is ethnic group\nkg:9691 is Jewish people", "response": "{\n  \"query\": [\n    \"?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example/kg:7566> .\",\n    \"<http://example/kg:3776> <http://example/hasEthnicGroup> ?x .\",\n    \"?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example/kg:9691>\"\n  ]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?brazil wdt:P31 wd:Q3504278; # Brazil is an instance of national football team of Brazil (Q3504278) \\n\",\n \t \"wdt:P6252 ?rank. # has a FIFA world ranking\\n\",\n \t \"FILTER NOT EXISTS {[] wdt:P6252 ?otherRank . # Filter to find the lowest rank\\n\",\n \t \"?brazil wdt:P6252 ?lowestRank .\\n\",\n \t \"?lowestRank < http://www.w3.org/2001/XMLSchema#integer ?rank .\\n\",\n \t \"FILTER(?otherRank < ?rank)} .\"\n \t]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83459 is Brazil national football team\np:P1352 is ranking\npq:P459 is determination method\nwd:Q180825 is FIFA World Rankings\nps:P1352 is ranking", "response": "{\n  \"query\": [\n    \"?team wdt:P31 wd:Q83459;\",\n    \"?team p:P1352 ?rankingStatement.\",\n    \"?rankingStatement ps:P1352 ?rankValue;\",\n    \"pq:P459 wd:Q180825.\"\n  ]\n}"}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1028 is Brazil national football team\nkg:5752 is ranking\nkg:7102 is determination method\nkg:1734 is FIFA World Rankings\nkg:0187 is ranking", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1028 kg:5752 ?resource . ?resource kg:7102 kg:1734 . }\"] }"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P161 wd:Q307148.\"\n  ]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q38111 is Leonardo DiCaprio", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P161 wd:Q38111 .\"\n \t]\n}"}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2490 is instance of\nkg:5000 is film\nkg:4337 is cast member\nkg:0455 is Leonardo DiCaprio", "response": "{\n \t\"query\": [\n \t\t\"?film kg:4337 kg:0455 .\",\n \t\t\"?film kg:2490 kg:5000 .\"\n \t]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Human (instance of human, Q5 is the entity ID for human in Wikidata) \\n\",\n \t\t\"wdt:P90 wd:Q842672; \", \">// Chemist (occupation as chemist)\\n\",\n \t\t\"rdfs:label \\\"Margaret Thatcher\\\"@en. \" , \">// Label is Margaret Thatcher in English\\n\"\n \t]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P106 is occupation\nwd:Q593644 is chemist", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P106 wd:Q593644 .\",\n \t\t\"?item wikibase:sameAs wd:Q7416.\"\n \t]\n}"}
{"question": "Was Margaret Thatcher a chemist?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1806 is Margaret Thatcher\nkg:4297 is occupation\nkg:0500 is chemist", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?utah wdt:P150 ?timezone.\",\n \t\t\"?state wdt:P31 wd:Q35658; \",\n \t\t\"wdt:P150 ?timezone.\"\n \t]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657.\",\n \t\t\"?state wdt:P421 ?timezone.\",\n \t\t\"wd:Q829 wdt:P421 ?timezone.\"\n \t]\n}"}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2386 is Utah\nkg:4838 is located in time zone\nkg:9877 is instance of\nkg:7634 is U.S. state\nkg:4838 is located in time zone\nkg:2386 is Utah", "response": "{\n \t\"query\": [\n \t\t\"?state kg:9877 kg:7634 .\",\n \t\t\"?state kg:4838 ?timeZone .\",\n \t\t\"kg:2386 kg:4838 ?timeZone .\"\n \t]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ; # instance of country\",\n \t\t\"?country wdt:P2980 ?numLanguages . # number of official languages\",\n \t\t\"SERVICE wikibase:sample { # get the one with most official languages\",\n \t\t\"?country (wdt:P2980) ?numLanguages .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 .\",\n \t\t\"?country wdt:P37 ?language .\"\n \t]\n}"}
{"question": "Which country has the most official languages?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8689 is instance of\nkg:9409 is country\nkg:1656 is official language", "response": "{\n \t\"query\": [\n \t\t\"?country kg:9409 ?instance .\",\n \t\t\"?country kg:1656 ?language .\"\n \t]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?chewbaccaActor wdt:P1425 wd:Q30876;\",\n \t\t\"wdt:P31 wd:Q5.\"\n \t]\n}\n    "}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51803 is Chewbacca\nwdt:P175 is performer", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P175 wd:Q51803 .\"\n \t]\n}"}
{"question": "Which actor played Chewbacca?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5480 is Chewbacca\nkg:2106 is performer", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:2106 kg:5480.\"\n \t]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?library wdt:P31 wd:Q252897 ; # instance of library\\n\",\n \t\t\"wdt:P571 ?inception . # has inception date\\n\",\n \t\t\"FILTER(?inception < \\\"1400-01-01\\\"^^xsd:dateTime) .\"\n \t]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?library wdt:P31 wd:Q7075 .\",\n \t\t\"?library wdt:P571 ?inception .\",\n \t\t\"FILTER(?inception < \\\"1400-01-01\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Give me all libraries established earlier than 1400.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is instance of\nkg:8682 is library\nkg:1036 is inception", "response": "{\n \t\"query\": [\"$library\" ]\n \t}\n \t                \t\t"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?language wdt:P279* wd:Q108534; # Q108534 is Perl's item ID in Wikidata, P279 denotes subclass of relation which can be used to find languages influenced by Perl (subclasses or types of it in a broad sense for this context) \\n\",\n \t\t\"wdt:P31 wd:Q206508. # Q206508 is the item ID for 'programming language' in Wikidata, ensuring that only programming languages are returned\"\n \t]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q9143 is programming language\nwdt:P737 is influenced by\nwd:Q42478 is Perl", "response": "{\n \t\"query\": [\n \t\t\"?influencedLanguage wdt:P31 wd:Q9143.\",\n \t\t\"?influencedLanguage wdt:P737 wd:Q42478.\"\n \t]\n}"}
{"question": "Which programming languages were influenced by Perl?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1023 is instance of\nkg:5919 is programming language\nkg:3304 is influenced by\nkg:2765 is Perl", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:3304 kg:2765 .\",\n \t\t\"?resource kg:5919 ?type .\"\n \t]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P17 ?state ;\",\n \t\t\"wdt:P1408 wd:Q26359 .\"\n \t]\n}"}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q130018 is Denali\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P131 ?state . \",\n \t\t\"?mountain rdfs:label \\\"Mount McKinley\\\"@en . \"\n \t]\n}\n    "}
{"question": "In which U.S. state is Mount McKinley located?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5195 is Denali\nkg:2752 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:2752 ?state . \",\n \t\t\"?mountain kg:owl_sameAs kg:5195 .\"\n \t]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P32 ?skyteam .\",\n \t\t\"?skyteam rdfs:label 'SkyTeam'@en.\"\n \t]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q212282 is SkyTeam", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P114 wd:Q212282.\"\n \t]\n}"}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2866 is airline alliance\nkg:2419 is SkyTeam", "response": "{\n \t\"query\": [\n \t\t\"?airline kg:2866 kg:2419 .\"\n \t]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P39 wd:Q10248576; # Position held - Methodist politician (This is a simplification, as there's no direct item for 'Methodist Politician', you might need to adjust based on actual data structure in Wikidata)\\n\",\n \t\t\"wdt:P31 wd:Q5.\" ,\"\\n\",\n \t\t\"?resource wdt:P140 wd:Q72896.\" ,\"\\n\",\n \t\t\"\\n\",\n \t\t\"{\\n\",\n \t\t\"SELECT ?resource\\n\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P140 is religion or worldview\nwd:Q33203 is Methodism", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P140 wd:Q33203 ;\",\n \t\t\"wdt:P106 wd:Q82955 .\"\n \t]\n}"}
{"question": "Give me all Methodist politicians.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8888 is occupation\nkg:9878 is politician\nkg:3778 is religion or worldview\nkg:3252 is Methodism", "response": "{\n \t\"query\": [\"$resource kg:3778 $religion.\", \"$resource kg:8888 kg:9878.\", \"$religion kg:3252 .\"]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?author wdt:P50 wd:Q761342.\",\n    \"?book wdt:P50 ?author.\",\n    \"?book wdt:P31 wd:Q571.\",\n    \"FILTER(?book != wd:Q761342)\"\n  ]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658375 is The Fault in Our Stars\nwdt:P50 is author\nwdt:P50 is author\nwd:Q658375 is The Fault in Our Stars", "response": "{\n \t\"query\": [\n \t\t\"?book wdt:P50 ?author.\",\n \t\t\"wd:Q658375 wdt:P50 ?author.\"\n \t]\n}"}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5896 is The Fault in Our Stars\nkg:1268 is author\nkg:1268 is author\nkg:5896 is The Fault in Our Stars", "response": "{\n \t\"query\": [\n \t\t\"?book kg:1268 ?author .\",\n \t\t\"kg:5896 kg:1268 ?author .\"\n \t]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?highestMountain wdt:P31 wd:Q8502 ; # Instance of mountain or volcano (to cover all types of mountains in Wikidata, Q8502 is for mountain range but you might want to use a more specific type like single mountain which could be represented by another item ID) \\n\",\n \t\t\"wdt:P2044 ?elevation . # Has elevation\\n\",\n \t\t\"FILTER NOT EXISTS {[] wdt:P31 wd:Q8502 ; wdt:P2044 ?higherElevation . FILTER(?higherElevation > ?elevation)}\" ,\n \t\t\"?highestMountain\"\n \t]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 .\",\n \t\t\"?mountain wdt:P2044 ?elevation .\",\n \t\t\"OPTIONAL {\",\n \t\t\t\"?otherMountain wdt:P31 wd:Q8502 ;\",\n \t\t\t\"wdt:P2044 ?otherElevation .\",\n \t\t\t\"FILTER (?otherElevation > ?elevation) }\",\n \t\t\"FILTER (!BOUND(?otherElevation))\"\n \t]\n}"}
{"question": "What is the highest mountain?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is instance of\nkg:3850 is mountain\nkg:9375 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:3850 ?mountainEntity .\",\n \t\t\"?mountain kg:9375 ?elevation .\",\n \t\t\"OPTIONAL {\",\n \t\t\t\"?otherMountain kg:3850 ?otherMountainEntity .\",\n \t\t\t\"?otherMountain kg:9375 ?otherElevation .\",\n \t\t\t\"FILTER (?elevation >= ?otherElevation) .\"\n \t\t,\"}\",\n \t\t\"FILTER NOT EXISTS {\",\n \t\t\t\"?higherMountain kg:3850 ?higherMountainEntity .\",\n \t\t\t\"?higherMountain kg:9375 ?higherElevation .\",\n \t\t\t\"FILTER (?higherElevation > ?elevation) .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?poet (wdt:P31/wdt:P279*) wd:Q82794; # Instance of poet or subclass thereof\\n\",\n    \"(wdt:P50 ?book)^.+\", \"># The poet is the author (?P50) of books (?book)\\n\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q49757 is poet\nwdt:P50 is author\nwdt:P31 is instance of\nwd:Q571 is book", "response": "{\n \t\"query\": [\n \t\t\"?poet wdt:P106 wd:Q49757;\",\n \t\t\"?book wdt:P31 wd:Q571;\",\n \t\t\"?book wdt:P50 ?poet.\"\n \t]\n}"}
{"question": "Which poet wrote the most books?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0120 is occupation\nkg:2954 is poet\nkg:1704 is author\nkg:0061 is instance of\nkg:7243 is book", "response": "{\n  \"query\": [\n    \"?poet kg:0120 kg:2954 .\",\n    \"?book kg:0061 kg:7243 .\",\n    \"?book kg:1704 ?poet .\"\n  ]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?javascript wdt:P31 wd:Q28865; wdt:P749 ?influencedBy.\",\n \t\t\"?influencedBy rdfs:label ?languageName.\",\n \t\t\"FILTER (LANG(?languageName) = 'en')\",\n \t\t\"{SELECT ?javascript WHERE { ?javascript wdt:P31 wd:Q28865 }} LIMIT 1\"\n \t]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2005 is JavaScript\nwdt:P737 is influenced by", "response": "{\n \t\"query\": [\n \t\t\"?influencedBy wdt:P737 wd:Q2005.\"\n \t]\n}"}
{"question": "Which programming languages influenced Javascript?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5218 is JavaScript\nkg:8409 is influenced by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\"\n \t\t,\"WHERE {\"\n \t\t,\" kg:5218 kg:8409 ?resource .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?musician\",\n    \"(COUNT(?book) AS ?bookCount)\"\n  ] } "}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q639669 is musician\nwdt:P31 is instance of\nwd:Q571 is book\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"?person wdt:P106 wd:Q639669 ;\",\n    \"?book wdt:P50 ?person ;\",\n    \"wdt:P31 wd:Q571 .\"\n  ]\n}"}
{"question": "Which musician wrote the most books?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4826 is occupation\nkg:0324 is musician\nkg:0683 is instance of\nkg:5954 is book\nkg:5686 is author", "response": "{\n  \"query\": [\n    \"?person kg:0683 kg:5686 .\",\n    \"?person kg:4826 kg:0324 .\",\n    \"{?book kg:5954 ?person.} GROUP BY ?person ORDER BY DESC(COUNT(?book)) LIMIT 1\"\n  ]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; \", \">// Q11424 is the Wikidata ID for \" ,\"movie\"\n \t\t\t, \"?film wdt:P161 wd:Q4549. \", \">// Q4549 is the Wikidata ID for Clint Eastwood as an actor\",\", \"\n \t\t, \"?film wdt:P57 wd:Q4549.\", \">// Q4549 is also used here to denote Clint Eastwood as a director\"\n \t\t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q43203 is Clint Eastwood\nwdt:P161 is cast member\nwd:Q43203 is Clint Eastwood", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P161 wd:Q43203 ;\",\n \t\t\"wdt:P57 wd:Q43203 .\"\n \t]\n}"}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7571 is director\nkg:1404 is Clint Eastwood\nkg:2987 is cast member\nkg:1404 is Clint Eastwood", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2987 kg:1404 .\",\n \t\t\"?film kg:7571 kg:1404 .\"\n \t]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?catStevens wdt:P31 wd:Q5.\",\n    \"?catStevens rdfs:label \\\"Cat Stevens\\\"@en.\",\n    \"?catStevens wdt:P276 ?instrument.\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154216 is Cat Stevens\nwdt:P1303 is instrument", "response": "{\n  \"query\": [\n    \"?instrument wdt:P1303 wd:Q154216 .\"\n  ]\n}"}
{"question": "Which instruments does Cat Stevens play?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9496 is Cat Stevens\nkg:7890 is instrument", "response": "{\n  \"query\": [\n    \"?instrument\",\n    \"WHERE\",\n    \"{\",\n    \"  kg:9496 kg:7890 ?instrument .\",\n    \"}\"\n  ]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P31 wd:Q20767859; # Instance of airline company\\n\",\n \t\t\"wdt:P448 wd:Q107808. # Member of Star Alliance\"\n \t]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q189709 is Star Alliance", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P114 wd:Q189709.\"\n \t]\n}"}
{"question": "How many airlines are members of the Star Alliance?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1615 is airline alliance\nkg:9546 is Star Alliance", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?airline\",\n \t\t\"WHERE {\",\n \t\t\"  ?airline kg:1615 kg:9546 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?work wdt:P800 wd:Q2439761 .\",\n    \"?author wdt:P50 ?work .\"\n] }"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11679 is The Hunger Games\nwdt:P50 is author", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P50 ?author .\",\n \t\t\"?work wikibase:sense wd:Q11679 .\"\n \t]\n}"}
{"question": "Who wrote The Hunger Games?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0284 is The Hunger Games\nkg:4529 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?author WHERE { kg:0284 kg:4529 ?author . }\"] }"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?elvis wdt:P31 wd:Q46852;\",\n    \"?elvis wdt:P800 ?firstAlbum.\",\n    \"?firstAlbum wdt:P175 ?elvis;\",\n    \"?firstAlbum wdt:P1779 ?recordLabel.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q59150527 is Elvis Presley's albums in chronological order\nwdt:P527 is has part(s)\nwdt:P577 is publication date\nwdt:P264 is record label", "response": "{\n  \"query\": [\n    \"?album wdt:P527 wd:Q59150527 .\",\n    \"?album wdt:P264 ?recordLabel .\"\n  ]\n}"}
{"question": "For which label did Elvis record his first album?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1729 is Elvis Presley's albums in chronological order\nkg:4335 is has part(s)\nkg:9322 is publication date\nkg:4784 is record label", "response": "{\n \t\"query\": [\"$album\"]\n \t}\n \t                \t\t"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; # Instance of film\\n\",\n \t\t\"wdt:P161 ?actor; # Cast member\\n\",\n \t\t\"schema:name \\\"Batman Begins\\\"@en. # Title of the movie\\n\",\n \t\t\"?actor rdfs:label \\\"Christian Bale\\\"@en.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q166262 is Batman Begins\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q45772 .\",\n \t\t\"?movie = wd:Q166262\"\n \t]\n}"}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2663 is Batman Begins\nkg:2232 is cast member\nkg:6261 is Christian Bale", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  kg:2663 kg:2232 ?resource .\",\n \t\t\"  FILTER (?resource = kg:6261)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?primeMinister wdt:P39 wd:Q11694 ;\",\n    \"wdt:P800 ?residence .\"\n  ]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q844587 is Prime Minister of Spain\nwdt:P263 is official residence", "response": "{\n \t\"query\": [\n \t\t\"?primeMinister wdt:P39 wd:Q844587 .\",\n \t\t\"?primeMinister wdt:P263 ?residence .\"\n \t]\n}"}
{"question": "Where is the residence of the prime minister of Spain?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6526 is Prime Minister of Spain\nkg:7770 is official residence", "response": "{ \"query\": [\"SELECT ?residence WHERE { kg:6526 kg:7770 ?residence . }\"] }"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?actor (wdt:P31/wdt:P279*) wd:Q5; # Find instances of humans (or subclasses, which are also humans in this context) identified as actors or actresses.\\n\",\n    \"  wdt:P161 ?movie . # Link the actor to movies they have been cast in via the 'cast member' property.\\n\",\n    \"OPTIONAL { ?actor wdt:P161 ?otherMovie } # Optional block for counting all movies an actor has been casted in, including duplicates.\\n\",\n    \"BIND(COUNT(?otherMovie) AS ?movieCount) # Count the number of movies per actor and bind it to a variable named movieCount.\\n\",\n    \"} GROUP BY ?actor # Group results by each actor\\n\",\n    \"ORDER BY DESC(?movieCount) # Order actors by their movie count in descending order, so the one with the most appearances is first.\\n\",\n    \"LIMIT 1\" ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"?actor (wdt:P106/wdt:P31*) wd:Q33999 .\",\n    \"?movie wdt:P161 ?actor .\"\n  ]\n}"}
{"question": "Which actor was casted in the most movies?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0813 is occupation\nkg:4987 is actor\nkg:5950 is cast member", "response": "{\n  \"query\": [\n    \"?actor (kg:0813/kg:4987) .\",\n    \"?movie kg:5950 ?actor .\"\n  ]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ;\",\n \t\t\"wdt:P2978 ?number_of_languages .\",\n \t\t\"FILTER(?number_of_languages > 2)\"\n \t]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 .\",\n \t\t\"{?country wdt:P37 ?lang1 .}\",\n \t\t\"UNION\",\n \t\t\"{?country wdt:P37 ?lang2 .}\",\n \t\t\"FILTER (?lang1 != ?lang2)\"\n \t]\n}"}
{"question": "Which countries have more than two official languages?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1484 is instance of\nkg:4940 is country\nkg:4371 is official language", "response": "{\n \t\"query\": [\n \t\t\"?country kg:4940 ?instance .\",\n \t\t\"?country kg:4371 ?language1 .\",\n \t\t\"?country kg:4371 ?language2 .\",\n \t\t\"?country kg:4371 ?language3 .\",\n \t\t\"FILTER (?language1 != ?language2 && ?language1 != ?language3 && ?language2 != ?language3)\"\n \t]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?song wdt:P31 wd:Q7546; \",\n \t\t\"?song wdt:P800 wd:Q221868;\",\n \t\t\"?song wdt:P577 ?date.\",\n \t\t\"FILTER (YEAR(?date) >= 1980 && YEAR(?date) <= 1990)\"\n \t]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7366 is song\nwdt:P577 is publication date\nwdt:P175 is performer\nwd:Q1225 is Bruce Springsteen", "response": "{\n \t\"query\": [\n \t\t\"?song wdt:P31 wd:Q7366;\",\n \t\t\"?song wdt:P577 ?publicationDate;\",\n \t\t\"?song wdt:P175 wd:Q1225.\",\n \t\t\"FILTER(?publicationDate >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime && ?publicationDate <= \\\"1990-12-31T23:59:59Z\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is instance of\nkg:4316 is song\nkg:3779 is publication date\nkg:4925 is performer\nkg:3345 is Bruce Springsteen", "response": "{\n \t\"query\": [\"$song\"]\n \t}\n \t                \t\t"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tvShow wdt:P31 wd:Q5389246; # Instance of TV show/series\\n\",\n \t\t\"        wdt:P92 wd:Q107376.\" ,\"# Created by John Cleese\"\n \t]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5398426 is television series\nwdt:P170 is creator\nwd:Q25014 is John Cleese\nwdt:P170 is creator\nwdt:P527 is has part(s)\nwd:Q25014 is John Cleese", "response": "{\n \t\"query\": [\n \t\t\"?tvShow wdt:P31 wd:Q5398426 ;\",\n \t\t\"wdt:P170 wd:Q25014 .\"\n \t]\n}"}
{"question": "Which television shows were created by John Cleese?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is instance of\nkg:1395 is television series\nkg:4844 is creator\nkg:3811 is John Cleese\nkg:4844 is creator\nkg:4191 is has part(s)\nkg:3811 is John Cleese", "response": "{\n \t\"query\": [\n \t\t\"?tvShow kg:4844 kg:3811 .\",\n \t\t\"?tvShow kg:2623 kg:1395 .\"\n \t]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?latvia wdt:P31 wd:Q38.\",\n    \"?latvia p:P462 ?statement.\",\n    \"?statement ps:P462 wd:Q457.\",\n    \"?statement pq:P580 ?date.\"\n] }"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q211 is Latvia\np:P463 is member of\nps:P463 is member of\nwd:Q458 is European Union\npq:P580 is start time", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q211\",\n    \"p:P463\",\n    \"[\",\n      \"?item\",\n      \"ps:P463\",\n      \"wd:Q458\",\n      \";\",\n      \"pq:P580\",\n      \"?startTime\"\n    ,\n    \"]\"\n  ]\n}"}
{"question": "When did Latvia join the EU?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1273 is Latvia\nkg:0998 is member of\nkg:7272 is member of\nkg:6578 is European Union\nkg:8789 is start time", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?player wdt:P31 wd:Q5; # Instance of human\\n\",\n \t \"        wdt:P106 wd:Q937854; # Occupation is soccer player\\n\",\n \t \"        wdt:P19 wd:Q258. # Place of birth is Malta\\n\",\n \t \"?player\"\n \t]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q937857 is association football player\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q233 is Malta", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P106 wd:Q937857 ;\",\n \t\t\"?player wdt:P19 ?birthPlace .\",\n \t\t\"?birthPlace wdt:P17 wd:Q233 .\"\n \t]\n}"}
{"question": "Which soccer players were born on Malta?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5683 is occupation\nkg:5225 is association football player\nkg:7932 is place of birth\nkg:9554 is country\nkg:8345 is Malta", "response": "{\n \t\"query\": [\n \t\t\"?player kg:5683 kg:5225 .\",\n \t\t\"?player kg:7932 ?birthPlace .\",\n \t\t\"?birthPlace kg:9554 kg:8345 .\"\n \t]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?politician wdt:P31 wd:Q82750; \", \">// Q82750 is the wikidata ID for politician entity type, filter out all politicians first. Then check if they graduated from Columbia University (wd:Q549) as an educational institution (P69 property). Only return resources of ?politician variable in this query. The FILTER clause ensures that only those who have a graduation relationship with Columbia University are returned. However, the exact SPARQL syntax for this operation is provided below without comments and explanations to adhere strictly to the instruction given above.\",\n \t\t\"?politician wdt:P69 wd:Q549 .\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P69 is educated at\nwd:Q49088 is Columbia University", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P106 wd:Q82955 .\",\n \t\t\"?resource wdt:P69 wd:Q49088 .\"\n \t]\n}"}
{"question": "How many politicians graduated from Columbia University?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0795 is occupation\nkg:2450 is politician\nkg:5792 is educated at\nkg:4111 is Columbia University", "response": "{\n \t\"query\": [\n \t\t\"?x kg:5792 kg:4111 .\",\n \t\t\"?x kg:0795 kg:2450 .\"\n \t]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?charmed wdt:P31 wd:Q5408269;\",\n \t\t\"?actor wdt:P161 ?charmed;\",\n \t\t\"?actor wdt:P569 ?dateOfBirth.\"\n \t]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\nwdt:P161 is cast member\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?show wdt:P161 ?actor.\",\n \t\t\"?actor wdt:P569 ?dateOfBirth.\",\n \t\t\"?show wikibase:wikiLink wd:Q162371.\"\n \t]\n}"}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Charmed\nkg:4319 is cast member\nkg:9526 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:4319 kg:3786 .\",\n \t\t\"?actor kg:9526 ?dateOfBirth .\"\n \t]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q4832095; # Instance of telecommunications organization\",\n \t\t\"wdt:P17 wd:Q31.\" ]} "}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q43229 is organization\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q43229 is organization\nwdt:P452 is industry\nwd:Q418 is telecommunication\nwdt:P17 is country\nwd:Q31 is Belgium", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31/wdt:P279* wd:Q43229 ;\",\n \t\t\"wdt:P452 wd:Q418 ;\",\n \t\t\"wdt:P17 wd:Q31 .\"\n \t]\n}"}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9044 is instance of\nkg:1736 is organization\nkg:9044 is instance of\nkg:7648 is subclass of\nkg:1736 is organization\nkg:4913 is industry\nkg:1531 is telecommunication\nkg:8115 is country\nkg:9094 is Belgium", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1736 ?organizationType .\",\n \t\t\"?resource kg:4913 kg:1531 .\", \">// Telecommunication industry organizations only, assuming a direct link to telecommunication as its industry type is not specified in the given properties list but implied by the question context. Adjust if necessary based on actual KG structure and available predicates for more precise querying of organization's industry affiliation related to telecommunications.\",\n \t\t\"?resource kg:8115 kg:9094 .\" ,\n \t\t\"FILTER (?organizationType = kg:1736)\"\n \t]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?lake wdt:P31 wd:Q2486579; wdt:P17 wd:Q40.\",\n \t\t\"?lake\"\n \t]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23397 is lake\nwdt:P17 is country\nwd:Q35 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?lake wdt:P31 wd:Q23397 .\",\n \t\t\"?lake wdt:P17 wd:Q35 .\"\n \t]\n}"}
{"question": "Give me a list of all lakes in Denmark.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1420 is instance of\nkg:5783 is lake\nkg:3411 is country\nkg:8492 is Denmark", "response": "{\n \t\"query\": [\n \t\t\"?lake kg:1420 kg:5783 .\",\n \t\t\"?lake kg:3411 kg:8492 .\"\n \t]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?eddieMurphy wdt:P31 wd:Q5.\",\n    \"?eddieMurphy rdfs:label \\\"Eddie Murphy\\\"@en.\",\n    \"?child wdt:P40 ?eddieMurphy.\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43874 is Eddie Murphy\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"?child wdt:P40 wd:Q43874 .\"\n  ]\n}"}
{"question": "How many children does Eddie Murphy have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1572 is Eddie Murphy\nkg:3910 is child", "response": "{\n  \"query\": [\n    \"?child kg:3910 kg:1572 .\"\n  ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?building WHERE { ?building wdt:P301 wd:Q278549. ?building wdt:P131 wd:Q695. }\"]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q176483 is Gothic architecture\nwdt:P149 is architectural style\nwdt:P7959 is historic county\nwd:Q67479626 is Kent", "response": "{\n \t\"query\": [\n        \"?building wdt:P149/wdt:P279* wd:Q176483 ;\",\n        \"wdt:P7959 wd:Q67479626 .\"\n    ]\n}"}
{"question": "Show me all English Gothic buildings in Kent.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5143 is subclass of\nkg:8740 is Gothic architecture\nkg:5026 is architectural style\nkg:8611 is historic county\nkg:6316 is Kent", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ;\",\n \t\t\"wdt:P457 wd:Q8907 .\"\n \t]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q861690 is West African CFA franc", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P38 wd:Q861690.\"\n \t]\n}"}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9173 is currency\nkg:9648 is West African CFA franc", "response": "{\n \t\"query\": [\n \t\t\"?country kg:is_currency kg:9648 .\"\n \t]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?holiday wdt:P31 wd:Q7889 ; # Instance of holiday/event/celebration/etc., Q7889 is a placeholder for the specific item class you might want to use, like Q658205 (commemoration) or Q8630 (religious festival), adjust as needed for specificity.\",\n \t\t\"?holiday wdt:P585 ?date . # Point in time, if you wanted to specify a date range or get the dates of celebration\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n  \t"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q1445650 is holiday\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?holiday wdt:P31 wd:Q1445650 .\",\n \t\t\"?holiday wdt:P279* wd:Q1445650 .\"\n \t]\n}"}
{"question": "Which holidays are celebrated around the world?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2965 is subclass of\nkg:6347 is holiday\nkg:9668 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?holiday kg:9668 kg:6347 .\"\n \t]\n}"}
{"question": "What is the longest river?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the longest river?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?longestRiver wdt:P31 wd:Q4022, ?longestRiver wdt:P2043 ?length .\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n     \t\t\t\t\t         \t"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?organization wdt:P31 wd:Q43229 ; # instance of organization\",\n \t\t\"wdt:P571 ?inception .\", \"># point in time when this organization was founded or established\",\n \t\t\"FILTER(YEAR(?inception) = 1930).\"\n \t]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P571 is inception\nwdt:P31 is instance of\nwdt:P131 is located in the administrative territorial entity\nwd:Q43229 is organization", "response": "{\n \t\"query\": [\n \t\t\"?org wdt:P31 wd:Q43229 ;\",\n \t\t\"wdt:P571 ?inception .\",\n \t\t\"FILTER(YEAR(?inception) = 1930)\"\n \t]\n}"}
{"question": "Which organizations were founded in 1930?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is inception\nkg:5779 is instance of\nkg:9493 is located in the administrative territorial entity\nkg:3317 is organization", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:5779 kg:3317 .\",\n \t\t\"?resource kg:9081 \\\"1930\\\" .\"\n \t]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?merkel wdt:P1477 ?birthName .\",\n    \"wd:Q25983 wdt:P1477 ?birthName\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"?resource wdt:P1477 ?birthName .\",\n    \"wd:Q567 ?p ?resource .\"\n  ]\n}"}
{"question": "What is the birth name of Angela Merkel?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7977 is Angela Merkel\nkg:7333 is birth name", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE { kg:7977 kg:7333 ?resource .}\"] }"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?tomCruise wdt:P31 wd:Q45027; # Tom Cruise is an instance of human\\n\",\n    \"wdt:P345 ?imdbCode; # Get IMDb code for identification\\n\",\n    \"wdt:P26 ?spouse. # Find spouses of Tom Cruise\\n\",\n    \"?spouse wdt:P31 wd:Q5. # Ensure spouse is also an instance of human\\n\"\n  ]\n}\n    "}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37079 is Tom Cruise\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q37079 .\"\n \t]\n}"}
{"question": "Who has Tom Cruise been married to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1550 is Tom Cruise\nkg:9184 is spouse", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"<http://example/kg/1550> <http://example/kg/9184> ?x .\"\n    ]}\n    "}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?weapon wdt:P178 wd:Q426503.\"\n \t]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P176 is manufacturer\nwd:Q152815 is Heckler & Koch\nwdt:P279 is subclass of\nwdt:P31 is instance of\nwd:Q15142889 is weapon family", "response": "{\n \t\"query\": [\n \t\t\"?weapon wdt:P176 wd:Q152815 .\",\n \t\t\"?weapon wdt:P31/wdt:P279* wd:Q15142889.\"\n \t]\n}"}
{"question": "Which weapons did Heckler & Koch develop?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5256 is manufacturer\nkg:4371 is Heckler & Koch\nkg:4662 is subclass of\nkg:6302 is instance of\nkg:5753 is weapon family", "response": "{\n \t\"query\": [\n \t\t\"?weapon kg:5256 kg:4371 .\",\n \t\t\"?weapon kg:6302 kg:5753 .\"\n \t]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q510684; # instance of city\",\n \t\t\"wdt:P30 wd:Q183; # located in Germany\",\n \t\t\"wdt:P2046 ?area.\",\n \t\t\"{SELECT ?city WHERE { ?city wdt:P31 wd:Q510684; wdt:P30 wd:Q183; wdt:P2046 ?area. } ORDER BY ASC(?area) LIMIT 1}\"\n \t]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q515;\",\n \t\t\"?city wdt:P17 wd:Q183;\",\n \t\t\"?city wdt:P2046 ?area.\",\n \t\t\"ORDER BY ASC(?area)\",\n \t\t\"LIMIT 1\"\n \t]\n}"}
{"question": "What is the smallest city by area in Germany?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2369 is country\nkg:2341 is Germany\nkg:0421 is instance of\nkg:6572 is subclass of\nkg:7298 is city\nkg:7495 is population", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?city WHERE {\",\n \t\t\"  ?city kg:0421 kg:7298 ;\", \">// instance of city\",\n \t\t\"  kg:2369 kg:2341 ;\", \">// country is Germany\",\n \t\t\"  kg:7495 ?population .\", \">// has population\"\n \t\t,\"}\",\n \t\t\"ORDER BY ASC(?population)\"\n \t\t,\"LIMIT 1\"\n \t]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?london wdt:P31 wd:Q486972; # Lisbon is an instance of city (to ensure we're talking about the correct entity, though Q486972 is not actually Lisbon but used for structure demonstration purposes here. The correct ID for Lisbon should be used instead in a real query scenario) \\n\",\n \t\t\"wdt:P361 ?governingBody; # governing body of Lisbon\\n\",\n \t\t\"?governingBody wdt:P31 wd:Q727534.\" ,\"\\n\"\n \t\t]\n }"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\np:P39 is position held\nps:P39 is position held\nwd:Q43185970 is Mayor of Lisbon\npq:P580 is start time\nwdt:P102 is member of political party", "response": "{\n \t\"query\": [\n        \"?mayor wdt:P31 wd:Q5.\",\n        \"?mayor p:P39 ?positionStatement.\",\n        \"?positionStatement ps:P39 wd:Q43185970;\",\n        \"pq:P580 ?startTime.\",\n        \"?mayor wdt:P102 ?party.\"\n    ]\n}"}
{"question": "What is the ruling party in Lisbon?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4480 is instance of\nkg:1012 is human\nkg:3232 is position held\nkg:0592 is position held\nkg:0692 is Mayor of Lisbon\nkg:7694 is start time\nkg:7386 is member of political party", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3232/kg:0692 ?mayor.\",\n \t\t\"?mayor kg:7386 ?party.\"\n \t]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?jupiterLightestMoon wdt:P31 wd:Q26980457; # instance of moon of Jupiter\\n\",\n \t \"wdt:P2067 ?mass.\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q61702557 is moon of Jupiter\nwdt:P2067 is mass", "response": "{\n \t\"query\": [\n \t\t\"?moon wdt:P31 wd:Q61702557 .\",\n \t\t\"?moon wdt:P2067 ?mass .\"\n \t]\n}"}
{"question": "How heavy is Jupiter's lightest moon?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8904 is instance of\nkg:5838 is moon of Jupiter\nkg:6958 is mass", "response": "{\n \t\"query\": [\n \t\t\"?moon kg:5838 [] .\",\n \t\t\"?moon kg:6958 ?mass .\"\n \t]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q758490 ;\", \">// Find an instance of company (IBM in this case, but generalized here for structure purposes) using Wikidata's item Q758490 which represents IBM Corporation. However, to directly query IBM, we would use wd:Q9231 instead of the general class Q758490 for a more accurate representation in the actual SPARQL query below.\",\n    \"?company wdt:P1128 ?employees .\" ,\n    \"FILTER(?company = wd:Q9231)\" ,\n    \"{\",\n      \"?company wdt:P1128 ?employees .\", \">// P1128 is the property for number of employees (total) in Wikidata. This line retrieves the total number of employees for IBM.\",\n    \"}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "How many employees does IBM have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P1128 is employees", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P1128 ?employees .\",\n \t\t\"?company wikibase:wikiLink wd:Q37156 .\"\n \t]\n}"}
{"question": "How many employees does IBM have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1608 is IBM\nkg:9125 is employees", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1608 kg:9125 ?resource . }\"] }"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?series wdt:P31 wd:Q5240896; # The Sopranos is an instance of a television series (Q5240896 represents 'The Sopranos' in Wikidata) \\n\",\n \t\t\"wdt:P495 wd:Q37. # The Sopranos originates from the United States (Q37)\\n\",\n \t\t\"?episode wdt:P179 ?series; # Episode is part of the series\\n\",\n \t\t\"wdt:P2338 ?seasonNumber; # Season number\\n\",\n \t\t\"wdt:P136 wd:Q40541. # The Sopranos genre is crime drama (Q40541)\\n\",\n \t\t\"FILTER(?seasonNumber = 1) # Filter for the first season\\n\"\n \t\t]\n }"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P4908 is season\nwd:Q5274359 is The Sopranos, season 1", "response": "{\n \t\"query\": [\n \t\t\"?episode wdt:P4908 wd:Q5274359.\"\n \t]\n}"}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8906 is season\nkg:9900 is The Sopranos, season 1", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?episode WHERE {\",\n \t\t\"  ?episode kg:8906 kg:9900 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?newSeries wdt:P1476 \\\"Battlestar Galactica (2004 TV series)\\\";\",\n    \"?oldSeries wdt:P1476 \\\"Battlestar Galactica (1978 TV series)\\\";\",\n    \"?newSeries wdt:P5131 ?newEpisodesCount;\",\n    \"?oldSeries wdt:P5131 ?oldEpisodesCount.\",\n    \"FILTER(?newEpisodesCount > ?oldEpisodesCount)\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q237072 is Battlestar Galactica\nwdt:P1113 is number of episodes\nwd:Q2367132 is Battlestar Galactica\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"?oldSeries wdt:P1113 ?oldEpisodes .\",\n    \"?newSeries wdt:P1113 ?newEpisodes .\",\n    \"{BIND(wd:Q237072 AS ?oldSeries)}\",\n    \"{BIND(wd:Q2367132 AS ?newSeries)}\",\n    \"FILTER(?newEpisodes > ?oldEpisodes)\"\n  ]\n}"}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3093 is Battlestar Galactica\nkg:3046 is number of episodes\nkg:8797 is Battlestar Galactica\nkg:3046 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?newEpisodes ?oldEpisodes WHERE {\",\n    \"  kg:3093 kg:3046 ?newEpisodes ;\",\n    \"  kg:8797 kg:3046 ?oldEpisodes .\"\n   ,\"}\"\n  ]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P136 wd:Q245798 .\",\n \t\t\"?film wdt:P162 ?producer .\",\n \t\t\"?producer rdfs:label \\\"Hal Roach\\\"@en.\"\n \t]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P162 wd:Q72792 .\"\n \t]\n}"}
{"question": "Give me all films produced by Hal Roach.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3534 is instance of\nkg:9460 is film\nkg:9880 is producer\nkg:6697 is Hal Roach", "response": "{\n \t\"query\": [\n \t\t\"?film kg:9880/kg:6697 .\",\n \t\t\"?film kg:3534 kg:9460 .\"\n \t]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?agentSmith wdt:P161 ?matrixCharacter.\",\n    \"?matrixCharacter rdfs:label \\\"Agent Smith\\\"@en.\",\n    \"?movie wdt:P31 wd:Q11424.\",\n    \"?movie wdt:P161 ?agentSmith.\"\n  ]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83495 is The Matrix\np:P161 is cast member\npq:P453 is character role\nwd:Q2085488 is Agent Smith\nps:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q83495;\",\n \t\t\"?actor p:P161 ?castStmt.\",\n \t\t\"?castStmt ps:P161 ?actor;\",\n \t\t\"\\t\\t\\tpq:P453 wd:Q2085488.\"\n \t]\n}"}
{"question": "Who played Agent Smith in Matrix?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3604 is The Matrix\nkg:8155 is cast member\nkg:5723 is character role\nkg:2878 is Agent Smith\nkg:8583 is cast member", "response": "{\n \t\"query\": [\"$actor\"]\n \t}\n \t                \t\t"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?party wdt:P31 wd:Q729845; # instance of political party in Greece (assuming Q729845 is for Greek political parties, please verify this ID as it might be different based on the latest Wikidata structure and content) \\n\",\n \t \"wdt:P1106 ?europeanUnion; . # has position pro-European Union\\n\",\n \t \"?party wdt:P17 wd:Q395 .\" ] }\n \t"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7278 is political party\nwdt:P17 is country\nwd:Q41 is Greece\nwdt:P1142 is political ideology\nwd:Q3781399 is pro-Europeanism", "response": "{\n \t\"query\": [\n \t\t\"?party wdt:P31 wd:Q7278.\",\n \t\t\"?party wdt:P17 wd:Q41.\",\n \t\t\"?party wdt:P1142 wd:Q3781399.\"\n \t]\n}"}
{"question": "Which Greek parties are pro-European?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is instance of\nkg:9450 is political party\nkg:2994 is country\nkg:5177 is Greece\nkg:0782 is political ideology\nkg:4101 is pro-Europeanism", "response": "{\n \t\"query\": [\n \t\t\"?party kg:9450 ?politicalParty.\",\n \t\t\"?party kg:5368 kg:4101.\",\n \t\t\"?party kg:2994 kg:5177.\"\n \t]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?bandLeader wdt:P31 wd:Q5.\",\n \t\t\"?bandLeader wdt:P106 wd:Q27485.\",\n \t\t\"?bandLeader wdt:P269 wd:Q13954.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q806349 is bandleader\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n \t\"query\": [\n \t\t\"?bandLeader wdt:P106 wd:Q806349 ;\",\n \t\t\"?bandLeader wdt:P1303 wd:Q8338 .\"\n \t]\n}"}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2407 is occupation\nkg:6431 is bandleader\nkg:4690 is instrument\nkg:9014 is trumpet", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2407 kg:6431 .\",\n \t\t\"?x kg:4690 kg:9014 .\"\n \t]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ; # Instance of mountain or volcano etc., which are subclasses of Q8502 (mountain) is preferred for specificity but can be adjusted based on exact class needed from Wikidata entities related to mountains\",\n \t\t\"?mountain wdt:P2049 ?elevation . # Elevation above the sea level\",\n \t\t\"FILTER NOT EXISTS {[] wdt:P31 wd:Q8502 ; wdt:P2049 ?higherElevation . FILTER(?higherElevation > ?elevation)}\", \"math:secondHighest = math:max(?elevation) - (math:max(?elevation) / 100000)\", \"math:secondHighest != math:max(?elevation)\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P30 is continent\nwdt:P361 is part of\nwd:Q2 is Earth", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 .\",\n \t\t\"?mountain wdt:P2044 ?elevation .\",\n \t\t\"?mountain wdt:P361 wd:Q2 .\",\n \t\t\"{SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 ; wdt:P2044 ?elevation } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1}\"\n \t]\n}"}
{"question": "What is the second highest mountain on Earth?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is instance of\nkg:6903 is subclass of\nkg:7953 is mountain\nkg:5532 is elevation above sea level\nkg:4491 is continent\nkg:7525 is part of\nkg:1867 is Earth", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:7953 kg:7953 .\",\n \t\t\"?mountain kg:5532 ?elevation .\",\n \t\t\"?mountain kg:4491/kg:7525* kg:1867 .\"\n \t]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?egypt wdt:P31 wd:Q30;\",\n \t\t\"?capital wdt:P36 ?egypt;\",\n \t\t\"?largestCity wdt:P1505 ?egypt.\",\n \t\t\"?capital wdt:P361 ?egypt;\",\n \t\t\"?largestCity wdt:P31 wd:Q5107.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q79 is Egypt\nwdt:P1082 is population\nwd:Q79 is Egypt\nwdt:P36 is capital", "response": "{\n \t\"query\": [\n        \"?city wdt:P31 wd:Q515 ;\",\n        \"?city wdt:P17 wd:Q79 ;\",\n        \"OPTIONAL { ?capital wdt:P36 wd:Q79 } .\",\n        \"FILTER(?city = ?capital)\"\n    ]\n}"}
{"question": "Is Egypts largest city also its capital?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is instance of\nkg:5282 is city\nkg:2922 is country\nkg:1631 is Egypt\nkg:6034 is population\nkg:1631 is Egypt\nkg:6024 is capital", "response": "{\n \t\"query\": [\n \t\t\"?city kg:5282 ?population .\",\n \t\t\"?city kg:9757 kg:1631 .\",\n \t\t\"?capital kg:6024 kg:1631 .\",\n \t\t\"{SELECT ?city WHERE { ?city kg:5282 ?pop . } ORDER BY DESC(?pop) LIMIT 1}\"\n \t]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?rocket wdt:P1545 wd:Q39078;\",\n \t\t\"wdt:P31/wdt:P279* wd:Q4115189.\"\n \t]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q41291 is rocket\nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n \t\"query\": [\n \t\t\"?rocket wdt:P279* wd:Q41291.\",\n \t\t\"?rocket wdt:P1427 wd:Q177477.\"\n \t]\n}"}
{"question": "Which rockets were launched from Baikonur?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9918 is subclass of\nkg:8403 is rocket\nkg:3908 is start point\nkg:9674 is Baikonur Cosmodrome", "response": "{\n \t\"query\": [\n \t\t\"?rocket kg:8403 ?type .\",\n \t\t\"?rocket kg:3908 kg:9674 .\"\n \t]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT DISTINCT ?language WHERE {\",\n \t\t\"  ?language wdt:P31 wd:Q28865. \",\n \t\t\"}\"\n \t]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q9143 is programming language", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P279* wd:Q9143.\"\n \t]\n}"}
{"question": "How many programming languages are there?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1662 is instance of\nkg:0743 is subclass of\nkg:6439 is programming language", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  ?resource kg:6439 true .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Human (instance of human, Q5 is the entity ID for humans in Wikidata) \\n\",\n \t\t\"?person wdt:P106 wd:Q10824379; \", \">// Chess player (occupation, Q10824379 is the entity ID for chess players)\\n\",\n \t\t\"?person wdt:P19 ?birthPlace; \", \">// Place of birth\\n\",\n \t\t\"?person wdt:P20 ?deathPlace. \", \">// Place of death\\n\",\n \t\t\"FILTER (?birthPlace = ?deathPlace) .\" ,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P20 is place of death\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q10873124 is chess player", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P106 wd:Q10873124 ;\",\n \t\t\"wdt:P19 ?place ;\",\n \t\t\"wdt:P20 ?place .\"\n \t]\n}"}
{"question": "Which Chess players died in the same place they were born in?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3982 is place of birth\nkg:3798 is place of death\nkg:1280 is occupation\nkg:0314 is subclass of\nkg:0871 is chess player", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1280 kg:0871 .\",\n \t\t\"?x kg:3982 ?place .\",\n \t\t\"?x kg:3798 ?place\"\n \t]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?owner wdt:P856 wd:Q220951.\"\n  ]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q380 is Meta Platforms\nwdt:P127 is owned by", "response": "{\n \t\"query\": [\n \t\t\"?owner wdt:P127 wd:Q380 .\"\n \t]\n}"}
{"question": "Who is the owner of Facebook?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8912 is Meta Platforms\nkg:3251 is owned by", "response": "{ \"query\": [\"SELECT ?owner WHERE { kg:8912 kg:3251 ?owner . }\"] }"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?movie WHERE { ?movie wdt:P161 wd:Q207589. }\"]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q37079 .\"\n \t]\n}"}
{"question": "Give me all movies with Tom Cruise.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4878 is cast member\nkg:0773 is Tom Cruise", "response": "{\n \t\"query\": [\"$movie\" ]\n \t}\n \t                \t\t"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?fortKnox wdt:P131 ?state.\",\n    \"?fortKnox rdfs:label \\\"Fort Knox\\\"@en.\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q983650 is Fort Knox\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q35657 is U.S. state", "response": "{\n  \"query\": [\n    \"?state wdt:P31 wd:Q35657 .\",\n    \"wd:Q983650 wdt:P131 ?state .\"\n  ]\n}"}
{"question": "In which U.S. state is Fort Knox located?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2138 is Fort Knox\nkg:3236 is located in the administrative territorial entity\nkg:5211 is instance of\nkg:3368 is U.S. state", "response": "{\n \t\"query\": [\"$FortKnox$ $locatedIn$ ?state . ?state $instanceOf$ $USState$.\"] }\n  \t\t  \t      \t      "}
{"question": "Which mountains are higher than the Nanga Parbat?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which mountains are higher than the Nanga Parbat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ;\",\n \t\t\"wdt:P2048 ?elevation .\",\n \t\t\"FILTER (?elevation > 8126) .\"\n \t]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q47502869; \",\n \t\t\"wdt:P828 ?ramones_album; \",\n \t\t\"wdt:P361 ?b_side_track. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P175 wd:Q483407 .\",\n \t\t\"?item p:P1433/ps:P1433 ?publication .\",\n \t\t\"?publication pq:P2868 wd:Q13432985 .\"\n \t]\n}"}
{"question": "Give me all B-sides of the Ramones.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1681 is performer\nkg:6316 is Ramones\nkg:4288 is published in\nkg:4608 is subject has role\nkg:0022 is B-side", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4608 kg:0022 .\",\n \t\t\"?x kg:1681 ?performer.\",\n \t\t\"?performer kg:4288 kg:6316.\"\n \t]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\"SELECT ?date WHERE { wd:Q46587 wdt:P1280 ?date }\"] }"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53713 is Olof Palme\np:P570 is date of death", "response": "{\n  \"query\": [\n    \"?palme wdt:P570 ?deathStatement .\",\n    \"?deathStatement ps:P570 ?dateOfDeath .\"\n  ]\n}"}
{"question": "When was Olof Palme shot?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7630 is Olof Palme\nkg:4997 is date of death", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:7630 kg:4997 ?resource . \\n}\"] }"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?king wdt:P31 wd:Q5; \",\n \t\t\"wdt:P39 wd:Q208476; \",\n \t\t\"wdt:P17 wd:Q208466.\"\n \t]\n}\n    "}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q55375123 is King of Rome", "response": "{\n \t\"query\": [\n \t\t\"?king wdt:P39 wd:Q55375123 .\"\n \t]\n}"}
{"question": "List the seven kings of Rome.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is position held\nkg:5425 is King of Rome", "response": "{\n \t\"query\": [\n \t\t\"?king kg:9266/kg:5425 .\"\n \t]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$HUMAN:resource$ VALUES ?deathPlace { wd:Q61 } VALUES ?birthPlace { wd:Q8720 } ?HUMAN wdt:P19 ?birthPlace; wdt:P20 ?deathPlace.\"]\n}"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwd:Q64 is Berlin\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin\nwdt:P19 is place of birth\nwd:Q1741 is Vienna\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin", "response": "{\n \t\"query\": [\"$person\"]\n \t}\n \t                \t\t"}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4248 is Berlin\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin\nkg:6565 is place of birth\nkg:5207 is Vienna\nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin", "response": "{\n \t\"query\": [\"$person\"]\n \t}\n \t                \t\t"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?darth_vader wdt:P25 ?luke_skywalker .\",\n    \"?darth_vader wdt:P1403 wd:Q78996 ;\",\n    \"?luke_skywalker wdt:P1403 wd:Q203383 .\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12206942 is Darth Vader\nwdt:P40 is child\nwd:Q51746 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"?vader wdt:P40 ?child .\",\n    \"?child wd:Q51746 .\",\n    \"?vader wd:Q12206942 .\"\n  ]\n}"}
{"question": "Is Darth Vader Luke’s father?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1984 is Darth Vader\nkg:1692 is child\nkg:5502 is Luke Skywalker", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5502 kg:1692 ?resource . FILTER (?resource = kg:1984) }\"] }"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?brewery WHERE { ?brewery wdt:P31 wd:Q11675; wdt:P17 wd:Q408. }\"]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131734 is brewery\nwdt:P17 is country\nwd:Q408 is Australia", "response": "{\n \t\"query\": [\n \t\t\"?brewery wdt:P31 wd:Q131734 .\",\n \t\t\"?brewery wdt:P17 wd:Q408 .\"\n \t]\n}"}
{"question": "Show me all the breweries in Australia.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2155 is instance of\nkg:5909 is brewery\nkg:1368 is country\nkg:6518 is Australia", "response": "{\n \t\"query\": [\"$brewery\"]\n \t}\n \t                \t\t"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; \", \">// Q11424 is the Wikidata ID for \" ,\"movie\"\n \t\t\t\t, \"?film wdt:P57 wd:Q902; \", \">// Q902 is the Wikidata ID for Steven Spielberg\", \">// Filter by budget greater than or equal to $80 million (in USD)\"\n \t\t, \"FILTER(?budget >= 80000000) .\"\n \t\t, \"?film p:P2157 [psn:P2157 ?budget] .\" ]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q8877 is Steven Spielberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P2130 is cost", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31/wdt:P279* wd:Q11424.\",\n \t\t\"?film wdt:P162 wd:Q8877.\",\n \t\t\"?film wdt:P2130 ?budget.\",\n \t\t\"FILTER(?budget >= 80000000)\"\n \t]\n}"}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2377 is producer\nkg:7786 is Steven Spielberg\nkg:2955 is instance of\nkg:5774 is subclass of\nkg:1418 is film\nkg:0495 is cost", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2377 kg:7786 .\",\n \t\t\"?film kg:2955 kg:1418 .\",\n \t\t\"?film kg:0495 ?cost .\",\n \t\t\"FILTER (?cost >= 80000000)\"\n \t]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q485270.\",\n \t\t\"?club wdt:P17 wd:Q29.\"\n \t]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P17 is country\nwd:Q29 is Spain", "response": "{\n \t\"query\": [\n \t\t\"?club wdt:P31 wd:Q476028 ;\",\n \t\t\"wdt:P17 wd:Q29 .\"\n \t]\n}"}
{"question": "Give me all soccer clubs in Spain.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1869 is instance of\nkg:7742 is association football club\nkg:9070 is country\nkg:2172 is Spain", "response": "{\n \t\"query\": [\n \t\t\"?club a kg:7742 ;\",\n \t\t\"kg:1869/kg:9070 kg:2172 .\"\n \t]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P161 wd:Q205384.\",\n \t\t\"?film wdt:P57 ?producer.\"\n \t]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q37876 is Natalie Portman\nwdt:P162 is producer", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P161 wd:Q37876 .\",\n \t\t\"?film wdt:P162 ?producer .\"\n \t]\n}"}
{"question": "Who produced films starring Natalie Portman?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5819 is instance of\nkg:0320 is film\nkg:8271 is cast member\nkg:1332 is Natalie Portman\nkg:6761 is producer", "response": "{\n \t\"query\": [\n \t\t\"?film kg:0320 ?resource .\",\n \t\t\"?film kg:8271 kg:1332 .\",\n \t\t\"?film kg:6761 ?producer .\"\n \t]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q14782.\",\n \t\t\"?item wdt:P460 ?breed.\"\n \t]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q38280 is German Shepherd\nwd:Q38280 is German Shepherd", "response": "{\n \t\"query\": [\n \t\t\"?breed wdt:P279* wd:Q38280.\"\n \t]\n}"}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1311 is subclass of\nkg:3722 is German Shepherd\nkg:3722 is German Shepherd", "response": "{\n \t\"query\": [\"$breed\" ]\n \t}\n \t                \t\t"}
{"question": "Who is the heaviest player of the Chicago Bulls?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the heaviest player of the Chicago Bulls?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?player wdt:P31 wd:Q5; \\n\",\n \t \"wdt:P54 wd:Q107869; \\n\",\n \t \"wdt:P2067 ?weight . \\n\",\n \t \"OPTIONAL { ?player wdt:P1891 ?heightFeet . } \\n\",\n \t \"OPTIONAL { ?player wdt:P1892 ?heightInches . } \\n\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?estonia wdt:P31 wd:Q35274; \",\n \t\t\"wdt:P37 ?language.\",\n \t\t\"?language wdt:P31/wdt:P279* wd:Q318052.\"\n \t]\n}\n   \t\t\t\t\t \t  \t      \t"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n \t\"query\": [\n \t\t\"?language wdt:P2936 wd:Q191.\"\n \t]\n}"}
{"question": "Which languages are spoken in Estonia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6317 is Estonia\nkg:3495 is language used", "response": "{\n  \"query\": [\n    \"?language kg:3495 kg:6317 .\"\n  ]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q38; # instance of country\",\n \t\t\"?country wdt:P2046 ?area.\",\n \t\t\"OPTIONAL { ?largestCountry wdt:P31 wd:Q38; wdt:P2046 ?largestArea FILTER(?largestArea >= ?area). }\",\n \t\t\"FILTER(!bound(?largestArea) || ?largestArea = ?area)\",\n \t\t\"?country\"\n \t]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3624078 is sovereign state\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q3624078 .\",\n \t\t\"?country wdt:P2046 ?area .\",\n \t\t\"OPTIONAL { ?largestCountry wdt:P31 wd:Q3624078 . ?largestCountry wdt:P2046 ?largestArea . FILTER(?largestArea > ?area) }\",\n \t\t\"FILTER(!bound(?largestArea))\"\n \t]\n}"}
{"question": "What is the largest country in the world?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5506 is instance of\nkg:9393 is subclass of\nkg:1310 is sovereign state\nkg:0702 is area", "response": "{\n \t\"query\": [\n \t\t\"?country kg:1310 ?state .\",\n \t\t\"?country kg:0702 ?area .\",\n \t\t\"OPTIONAL { ?otherCountry kg:1310 ?otherState . ?otherCountry kg:0702 ?otherArea . FILTER (?area < ?otherArea) }\",\n \t\t\"FILTER (!BOUND(?otherArea))\",\n \t\t\"{?country}\"\n \t]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q510748;\",\n \t\t\"?city wdt:P625 ?location.\",\n \t\t\"?city wdt:P1082 ?population.\",\n \t\t\"FILTER(?city = wd:Q6198)\",\n \t\t\"{\",\n \t\t\"?otherCity wdt:P31 wd:Q510748;\",\n \t\t\"?otherCity wdt:P1082 ?otherPopulation.\",\n \t\t\"}\",\n \t\t\"OPTIONAL {\",\n \t\t\"?city wdt:P1001 ?rank.\",\n \t\t\"}\",\n \t\t\"FILTER(?population >= ?otherPopulation)\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q30 is United States of America\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q515.\",\n \t\t\"?city wdt:P17 wd:Q30.\",\n \t\t\"?city wdt:P1082 ?population.\"\n \t]\n}"}
{"question": "What is the largest city in america?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0643 is country\nkg:9284 is United States of America\nkg:3777 is instance of\nkg:9906 is subclass of\nkg:5230 is city\nkg:0522 is population", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  ?resource kg:3777 kg:5230 ;\",\n \t\t\"            kg:0643 kg:9284 ;\",\n \t\t\"            kg:0522 ?population .\",\n \t\t\"  FILTER NOT EXISTS {\",\n \t\t\"    ?otherCity kg:3777 kg:5230 ;\",\n \t\t\"               kg:0643 kg:9284 ;\",\n \t\t\"               kg:0522 ?otherPopulation .\",\n \t\t\"    FILTER (?otherPopulation > ?population) }\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?pope wdt:P31 wd:Q5; # The pope is an instance of human (Q5, for filtering out non-human entities like fictional characters or organizations that might have similar roles or titles by name coincidence only) \\n\",\n \t \"wdt:P39 wd:Q20846765; # had the position of pope\\n\",\n \t \"?founded wdt:P1353 ?vatican_tv. # founded Vatican Television (Vatican TV)\\n\",\n \t \"?vatican_tv rdfs:label \\\"Vatican Television\\\"@en.\\n\"\n \t]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1471987 is Vatican Media\nwdt:P571 is inception\nwdt:P39 is position held\nwd:Q19546 is pope\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"?entity p:P39/ps:P39/wd:Q19546.\",\n \t\t\"?entity p:P39 ?positionHeld.\",\n \t\t\"?positionHeld pq:P580 ?startTime.\",\n \t\t\"?positionHeld pq:P582 ?endTime.\",\n \t\t\"wd:Q1471987 wdt:P571 ?inceptionTime.\",\n \t\t\"{\",\n \t\t\t\"?entity p:P39/ps:P39/wd:Q19546.\",\n \t\t\t\"?entity wdt:P571 ?popeInceptionTime.\",\n \t\t\t\"FILTER(?popeInceptionTime < ?inceptionTime && ?startTime < ?inceptionTime && ?endTime > ?inceptionTime)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was the pope that founded the Vatican Television?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4965 is Vatican Media\nkg:9396 is inception\nkg:5157 is position held\nkg:4968 is pope\nkg:9086 is position held\nkg:2915 is position held\nkg:4968 is pope\nkg:3118 is start time\nkg:1891 is end time", "response": "{\n \t\"query\": [\n \t\t\"?x kg:5157 kg:4968 .\",\n \t\t\"?x kg:2915 kg:4965 .\",\n \t\t\"?x kg:3118 ?startTime .\"\n \t]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?discovery wdt:P921 ?object .\",\n \t\t\"?object rdfs:label \\\"Ceres\\\"@en .\",\n \t\t\"?discovery wdt:P937 wd:Q5 .\"\n \t]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q596 is Ceres\nwdt:P61 is discoverer or inventor", "response": "{\n \t\"query\": [\n \t\t\"?discoverer wdt:P61 wd:Q596.\"\n \t]\n}"}
{"question": "Who discovered Ceres?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0356 is Ceres\nkg:8941 is discoverer or inventor", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?discoverer WHERE { kg:0356 kg:8941 ?discoverer . }\"] }"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?netherlands wdt:P31 wd:Q3624078.\",\n    \"?king wdt:P39 wd:Q154578.\"\n  ]\n}\n    "}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55 is Netherlands\nwdt:P35 is head of state\nwdt:P39 is position held\nwd:Q2045066 is King of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?king wdt:P39 wd:Q2045066 .\"\n \t]\n}"}
{"question": "Who is the king of the Netherlands?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7804 is Netherlands\nkg:9773 is head of state\nkg:8977 is position held\nkg:8219 is King of the Netherlands", "response": "{\n \t\"query\": [\"$king\"]\n \t}\n \t                \t\t"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cola wdt:P31 wd:Q49028; # Q49028 is the Wikidata ID for 'beverage'\"\n   ,\n    \"wd:Q51763\" ] }\n   \t\t"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q134041 is cola\nwdt:P279 is subclass of\nwd:Q40050 is drink", "response": "{\n \t\"query\": [\n \t\t\"?cola wdt:P279* wd:Q40050 .\",\n \t\t\"?cola wdt:P31 wd:Q134041 .\"\n \t]\n}"}
{"question": "Is Cola a beverage?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3198 is cola\nkg:1933 is subclass of\nkg:6616 is drink", "response": "{\n  \"query\": [\n    \"?x kg:1933 kg:6616 .\",\n    \"?y kg:1933 ?x .\",\n    \"FILTER (?y = kg:3198)\"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?merkel wdt:P39 wd:Q11696 .\",\n    \"?merkel wdt:P69 ?almaMater .\"\n  ]\n}"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"?almaMater\"\n  ]\n  }\n \t            \t\t"}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5316 is Angela Merkel\nkg:7545 is educated at\nkg:7553 is instance of\nkg:6836 is subclass of\nkg:2365 is university", "response": "{\n  \"query\": [\n    \"?almaMater\"\n  ]\n  }\n  \t\t\t\t\t\t  \t\t\t\t\t\t  \t\t"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q15479326.\",\n    \"?work wdt:P50 ?author.\"\n  ]\n}"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?author WHERE {\\n  wd:Q1163227 wdt:P50 ?author .\\n}\"] }"}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is The Pillars of the Earth\nkg:5137 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?author WHERE {\\n    kg:0606 kg:5137 ?author .\\n}\"] }"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?airline wdt:P180 ?airport; wikibase:sense/wikibase:directClaim/wdt:P31 wd:Q452967.\",\n \t\t\"?airline rdfs:label ?airlineLabel .\",\n \t\t\"FILTER(LANG(?airlineLabel) = 'en') .\",\n \t\t\"FILTER(CONTAINS(LCASE(?airlineLabel), 'yeti airlines')) .\"\n \t]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1480118 is Yeti Airlines\nwdt:P113 is airline hub", "response": "{\n \t\"query\": [\n \t\t\"?airport wdt:P113 wd:Q1480118 .\"\n \t]\n}"}
{"question": "Which airports does Yeti Airlines serve?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2721 is Yeti Airlines\nkg:4798 is airline hub", "response": "{\n  \"query\": [\n    \"?airport kg:serves* kg:2721 .\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?goethe wdt:P31 wd:Q21549867.\",\n    \"?goethe wdt:P19 ?birthplace.\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5879 is Johann Wolfgang von Goethe\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"?goethe wdt:P19 ?birthplace .\",\n    \"BIND(wd:Q5879 AS ?goethe)\"\n  ]\n}"}
{"question": "Where is the birthplace of Goethe?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8492 is Johann Wolfgang von Goethe\nkg:1815 is place of birth", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:8492 kg:1815 ?resource . \\n}\"] }"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cubanMissileCrisis wdt:P31 wd:Q186047 .\",\n    \"?bayOfPigsInvasion wdt:P31 wd:Q203950 .\",\n    \"?cubanMissileCrisis wdt:P585 ?dateCubanMissileCrisis .\",\n    \"?bayOfPigsInvasion wdt:P585 ?dateBayOfPigsInvasion .\",\n    \"FILTER(?dateCubanMissileCrisis < ?dateBayOfPigsInvasion)\"\n  ]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128160 is Cuban Missile Crisis\nwdt:P582 is end time\nwd:Q191721 is Bay of Pigs invasion\nwdt:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  wd:Q128160 wdt:P580 ?cmCrisisStartTime .\",\n \t\t\"  wd:Q191721 wdt:P580 ?bayOfPigsStartTime .\",\n \t\t\"  FILTER(?cmCrisisStartTime < ?bayOfPigsStartTime) .\",\n \t\t\"  VALUES ?resource { wd:Q128160 wd:Q191721 }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is Cuban Missile Crisis\nkg:0497 is end time\nkg:0984 is Bay of Pigs invasion\nkg:5449 is start time", "response": "{\n  \"query\": [\n    \"?cmCrisis kg:0497 ?cmEndTime .\",\n    \"?bayPigs kg:5449 ?bayPigsStartTime .\",\n    \"{SELECT ?cmCrisis WHERE { ?cmCrisis <http://www.wikidata.org/entity/kg> '6047' }}\",\n    \"{SELECT ?bayPigs WHERE { ?bayPigs <http://www.wikidata.org/entity/kg> '0984' }}\",\n    \"FILTER(?cmEndTime < ?bayPigsStartTime)\"\n  ]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?recipe wdt:P31 wd:Q2469058; \", \">// Find items that are instances of recipes (carrot cake recipe in this case, Q2469058 is a placeholder for the specific carrot cake recipe item which needs to be identified correctly from Wikidata) and have ingredients (?ingredient). The query structure below needs adjustment based on the actual property used for ingredients in Wikidata. For demonstration purposes, wdt:P527 (has part) is used as an example but may not directly apply to recipes/ingredients relation.\",\n    \"?recipe wdt:P527 ?ingredient.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q656071 is carrot cake\nwdt:P527 is has part(s)", "response": "{\n \t\"query\": [\n \t\t\"?ingredient wdt:P527 wd:Q656071.\"\n \t]\n}"}
{"question": "Which ingredients do I need for carrot cake?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4040 is carrot cake\nkg:6712 is has part(s)", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?ingredients\\nWHERE {\\n    kg:4040 kg:6712 ?ingredients .\\n}\"] }"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P138 wd:Q41579.\"\n  ]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P112 wd:Q52 .\"\n \t]\n}"}
{"question": "Who created Wikipedia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2440 is Wikipedia\nkg:0699 is founded by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?creator WHERE { kg:2440 kg:0699 ?creator . }\"] }"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q854672 ;\", \">// Instance of mountain or peak (Q854672 is the Wikidata ID for \"]}\n"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P131 is located in the administrative territorial entity\nwd:Q1202 is Saxony\nwdt:P2044 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ;\",\n \t\t\"?mountain wdt:P131 wd:Q1202 ;\",\n \t\t\"?mountain wdt:P2044 ?elevation .\"\n \t]\n}"}
{"question": "What is the highest mountain in Saxony Germany?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8166 is instance of\nkg:8572 is mountain\nkg:6404 is located in the administrative territorial entity\nkg:7885 is Saxony\nkg:5619 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:8572 kg:8166 .\",\n \t\t\"?mountain kg:6404 kg:7885 .\",\n \t\t\"{?mountain kg:5619 ?elevation} .\"\n \t]\n}\n  \t\t\t\t\t  \t      \t\t\t\t"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mecca wdt:P31 wd:Q532.\",\n    \"?mecca wdt:P17 ?country.\"\n  ]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5806 is Mecca\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P131 ?country . \",\n \t\t\"?country wdt:P31 wd:Q6256 .\",\n \t\t\"wd:Q5806 wdt:P131* ?item .\"\n \t]\n}"}
{"question": "In which country is Mecca located?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9593 is Mecca\nkg:2857 is located in the administrative territorial entity\nkg:3525 is instance of\nkg:9937 is country", "response": "{\n  \"query\": [\n    \"?mecca kg:2857 ?country .\",\n    \"?country kg:3525 kg:9937 .\",\n    \"{?mecca kg:9593 true.}\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?gusFringsPlayer wdt:P161 wd:Q20758493.\"\n  ]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5620660 is Gus Fring\npq:P453 is character role\nps:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?actor ps:P161 wd:Q5620660 .\",\n \t\t\"?actor pq:P453 wd:Q5620660 .\"\n \t]\n}"}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3702 is Gus Fring\nkg:1248 is character role\nkg:8170 is cast member", "response": "{\n \t\"query\": [\"$actor\"]\n \t}\n \t                \t\t"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?Nile wdt:P250 ?sourceCountry.\"\n \t]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3392 is Nile\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?origin wdt:P885 wd:Q3392;\",\n \t\t\"?origin wdt:P17 ?country.\"\n \t]\n}"}
{"question": "In which country does the Nile start?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0768 is Nile\nkg:2584 is origin of the watercourse\nkg:0470 is country", "response": "{\n \t\"query\": [\"$origin\"]\n \t}\n \t                \t\t"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?stadium wdt:P31 wd:Q24076985; # Instance of stadium or arena in Spain (Q24076985 is a placeholder for the specific category of stadiums/arenas in Spain, adjust as necessary based on actual Wikidata structure) \\n\",\n \t \"wdt:P17 wd:Q29; # Located in Spain\\n\",\n \t \"?stadium wdt:P2040 ?capacity. # Has capacity\\n\",\n \t \"{SELECT ?stadium (MAX(?capacity) AS ?maxCapacity) WHERE { ?stadium wdt:P31 wd:Q24076985; wdt:P17 wd:Q29; wdt:P2040 ?capacity. } GROUP BY ?stadium}\"\n \t]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q483110 is stadium\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q483110 is stadium\nwdt:P17 is country\nwd:Q29 is Spain\nwdt:P1083 is maximum capacity", "response": "{\n \t\"query\": [\n \t\t\"?stadium wdt:P31 wd:Q483110 ;\",\n \t\t\"?stadium wdt:P17 wd:Q29 ;\",\n \t\t\"?stadium wdt:P1083 ?capacity .\"\n \t]\n}"}
{"question": "What is the biggest stadium in Spain?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3639 is instance of\nkg:6981 is stadium\nkg:3639 is instance of\nkg:3018 is subclass of\nkg:6981 is stadium\nkg:4997 is country\nkg:8158 is Spain\nkg:4254 is maximum capacity", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  ?resource kg:6981 kg:3018 .\", \">// Assuming there's a typo and it should be checking for stadium instances or subclasses, but given the options, this line might not directly translate to the question. A more accurate property for 'instance of' is needed which isn't provided in the exact form here but assumed as part of kg:6981 for demonstration purposes only. In a real scenario, we would use something like \" , \"?resource rdf:type kg:Stadium .\"\n \t\t,\n \t\t\"  ?resource kg:4997 kg:8158 .\", \">// Assuming the property connecting stadium to its country is correct and provided as kg:4997 for demonstration purposes only. In a real scenario, we would use something like \" ,\"?resource kg:locatedInCountry kg:Spain .\"\n \t\t,\n \t\t\"  ?resource kg:4254 ?capacity .\",\n \t\t\"  FILTER NOT EXISTS {\",\n \t\t\"    ?otherStadium kg:4997 kg:8158 .\", \">// Assuming the property connecting stadium to its country is correct and provided as kg:4997 for demonstration purposes only. In a real scenario, we would use something like \" ,\"?otherStadium kg:locatedInCountry kg:Spain .\"\n \t\t,\n \t\t\"    ?otherStadium kg:4254 ?otherCapacity .\",\n \t\t\"    FILTER (?capacity < ?otherCapacity)\",\n \t\t\"  }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?uk wdt:P31 wd:Q35658; # Instance of country (UK specifically, identified by Q35658 for United Kingdom)\\n\",\n    \"?uk wdt:P2046 ?area.\\n\"\n  ]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q145 is United Kingdom\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"?uk wdt:P2046 ?area .\",\n \t\t\"FILTER(?uk = wd:Q145)\"\n \t]\n}"}
{"question": "How large is the area of UK?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0895 is United Kingdom\nkg:6864 is area", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0895 kg:6864 ?resource }\"] }"}
{"question": "Who created Batman?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?batman wdt:P351 ?creator .\",\n \t\t\"FILTER (?batman = wd:Q42809)\"\n \t]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P170 is creator", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P170 wd:Q2695156 .\"\n \t]\n}"}
{"question": "Who created Batman?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4262 is Batman\nkg:4214 is creator", "response": "{\n \t\"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?creator WHERE { kg:4262 kg:4214 ?creator }\"]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?freud wdt:P31 wd:Q5.\",\n    \"?freud rdfs:label \\\"Sigmund Freud\\\"@en.\",\n    \"?freud wdt:P26 ?spouse.\"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9215 is Sigmund Freud\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?resource wdt:P26 wd:Q9215 .\"\n  ]\n}"}
{"question": "Was Sigmund Freud married?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0071 is Sigmund Freud\nkg:1379 is spouse", "response": "{\n  \"query\": [\n    \"?resource kg:1379 kg:0071 .\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?developer wdt:P178 wd:Q290546.\"\n  ]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q465 is DBpedia\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?developer wdt:P112 wd:Q465 .\"\n \t]\n}"}
{"question": "Who are the developers of DBpedia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is DBpedia\nkg:9957 is founded by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?developers WHERE { kg:0141 kg:9957 ?developers . }\"] }"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; # instance of movie\\n\",\n \t\t\"wdt:P57 wd:Q9806. # directed by Francis Ford Coppola\\n\"\n \t]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q56094 is Francis Ford Coppola", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424 .\",\n \t\t\"?movie wdt:P57 wd:Q56094 .\"\n \t]\n}"}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4264 is instance of\nkg:1346 is subclass of\nkg:9775 is film\nkg:2196 is director\nkg:2738 is Francis Ford Coppola", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:2196 kg:2738 .\",\n \t\t\"?movie kg:9775 ?film .\"\n \t]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tree_frog wdt:P31 ?frog_type .\",\n \t\t\"?frog_type wdt:P279* wd:Q80456 ; # Q80456 is the Wikidata ID for amphibians\",\n \t\t\"wdt:P105 wd:Q16521 . # Q16521 is the Wikidata ID for class (taxonomic rank)\"\n \t]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53696 is Hylidae\nwdt:P171 is parent taxon\nwd:Q10908 is Amphibia", "response": "{\n  \"query\": [\n    \"?treeFrog wdt:P171* wd:Q53696 .\",\n    \"?amphibian wdt:P171* wd:Q10908 .\",\n    \"{ ?treeFrog wdt:P171* ?amphibian } UNION { wd:Q10908 wdt:P171* ?treeFrog }\"\n  ]\n}"}
{"question": "Are tree frogs a type of amphibian?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4906 is Hylidae\nkg:8693 is parent taxon\nkg:5304 is Amphibia", "response": "{\n  \"query\": [\n    \"?x kg:8693 kg:5304 .\",\n    \"?y kg:8693 ?x .\",\n    \"{?y kg:4906 kg:Hylidae.}\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?parliament wdt:P31 wd:Q5084;\", \">// Identify the subject as an instance of Houses of Parliament (Q5084 for example, actual Qid might vary based on specific context or country's parliament being referred to like UK Houses of Parliament which is Q267905 in Wikidata) \\n\",\n    \"?parliament wdt:P625 ?location.\" ,\">// Get the location (coordinates) of the subject\\n\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q62408 is Palace of Westminster\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"?parliament wdt:P31 wd:Q62408 ;\",\n    \"wdt:P131 ?location .\"\n  ]\n}"}
{"question": "What is the location of the Houses of Parliament?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3314 is Palace of Westminster\nkg:3899 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"?parliament wdt:P3314 ?westminster;\",\n               \"?westminster kg:3899 ?location.\"\n  ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?dusseldorfAirport wdt:P131 wd:Q678; # Düsseldorf Airport is located in Düsseldorf (for disambiguation if needed, adjust accordingly for specificity or remove if not necessary for your case as the airport can be directly referenced by its Wikidata ID below), P131 means 'located in territory of' but you might need to use a direct identifier for the airport\",\n    \"?dusseldorfAirport wdt:P2045 ?elevation.\",\n    \"VALUES ?dusseldorfAirport { wd:Q9867 }\" ]\n}"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q58226 is Düsseldorf Airport\nwdt:P2044 is elevation above sea level", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?elevation \\nWHERE {\\n wd:Q58226 wdt:P2044 ?elevation .\\n}\"] }"}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is Düsseldorf Airport\nkg:7050 is elevation above sea level", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n  kg:3463 kg:7050 ?resource .\\n}\"] }"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mexicoCity wdt:P1082 ?population .\",\n    \"?mexicoCity rdfs:label \\\"Mexico City\\\"@en\"\n  ]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1489 is Mexico City\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?population\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"wd:Q1489 wdt:P1082 ?population .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "How much is the population of mexico city ?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8330 is Mexico City\nkg:3405 is population", "response": "{\n  \"query\": [\n    \"?population\",\n    \"WHERE\",\n    \"{\",\n    \"  kg:8330 kg:3405 ?population .\",\n    \"}\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?frenchRepublic wdt:P31 wd:Q3029485 ;\",\n    \"wdt:P576 ?foundingDate .\"\n  ]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q200686 is French Fifth Republic\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P571 ?inception .\",\n \t\t\"FILTER (?item = wd:Q200686)\"\n \t]\n}"}
{"question": "when was the founding date of french fifth republic?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0429 is French Fifth Republic\nkg:8176 is inception", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:0429 kg:8176 ?resource . }\"] }"}
{"question": "Who was the first King of England?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?item wdt:P31 wd:Q5; # instance of human\\n\",\n \t \"       wdt:P937 ?reign; # position held (monarch)\\n\",\n \t \"       wdt:P27 wd:Q145. # country of citizenship (England)\\n\",\n \t \"?reign wdt:P189 wd:Q6023. # reign has the role of King\\n\",\n \t \"optional { ?item wdt:P172 ?dynasty }.\\n\",\n \t \"optional { ?item wdt:P1552 ?order }\\n\",\n \t \"service wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\\n\",\n \t \"}\\n\",\n \t \"ORDER BY ASC(?order)\\n\",\n \t \"LIMIT 1\"\n \t]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q18810062 is monarch of England\np:P39 is position held\npq:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"?entity p:P39/ps:P39 wd:Q18810062 .\",\n \t\t\"?entity p:P39/pq:P580 ?startTime .\"\n \t]\n}"}
{"question": "Who was the first King of England?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9064 is position held\nkg:5324 is monarch of England\nkg:4854 is position held\nkg:6181 is start time", "response": "{\n \t\"query\": [\n \t\t\"?x kg:5324 kg:9064 .\",\n \t\t\"?x kg:6181 ?time .\"\n \t]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?forbes wdt:P30 ?editor .\",\n \t\t\"FILTER (str(?forbes) = \\\"Forbes\\\")\"\n \t]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P98 is editor", "response": "{\n \t\"query\": [\n \t\t\"?editor wdt:P98 wd:Q25161472.\"\n \t]\n}"}
{"question": "Who is the editor of Forbes?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4567 is Forbes\nkg:7693 is editor", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:7693 kg:4567 . }\"] }"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?douglas_hofstadter wdt:P166 ?award.\",\n    \"{\",\n      \"?douglas_hofstadter wd:Q902. \",\n    \"}\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q319308 is Douglas Hofstadtesr\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"?award\",\n    \"WHERE\",\n    \"{\",\n    \"wd:Q319308\",\n    \"wdt:P166\",\n    \"?award\",\n    \".\"\n  ]\n}"}
{"question": "Which awards did Douglas Hofstadter win?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8441 is Douglas Hofstadtesr\nkg:7848 is award received", "response": "{\n  \"query\": [\n    \"?award\",\n    \"WHERE\",\n    \"{\",\n    \"kg:8441 kg:7848 ?award .\"\n    ]}\n   "}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?youngestPlayer\"\n \t]\n \t}\n \t                \t\t"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q18574233 is darts player\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q18574233 .\",\n \t\t\"?person wdt:P569 ?dateOfBirth .\"\n \t]\n}"}
{"question": "Who is the youngest Darts player?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9867 is occupation\nkg:7203 is darts player\nkg:4047 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?player kg:9867 kg:7203 .\",\n \t\t\"?player kg:4047 ?dob .\"\n \t]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q7397.\",\n    \"?item wdt:P2495 wd:Q202486.\"\n  ]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187916 is horse racing\nwdt:P279 is subclass of\nwd:Q349 is sport", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P279* wd:Q349 .\",\n \t\t\"?item wdt:P279* wd:Q187916 .\"\n \t]\n}"}
{"question": "Is horse racing a sport?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2533 is horse racing\nkg:7442 is subclass of\nkg:8983 is sport", "response": "{\n  \"query\": [\n    \"?x kg:2533 ?horse_racing.\",\n    \"?sport kg:8983 ?x.\",\n    \"?horse_racing kg:7442 ?sport.\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?brooklynBridge wdt:P1376 ?river . \",\n \t\t\"?brooklynBridge rdfs:label \\\"Brooklyn Bridge\\\"@en . \"\n \t]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P177 is crosses", "response": "{\n  \"query\": [\n    \"?river\",\n    \"wd:Q125006\",\n    \"wdt:P177\",\n    \"?river\"\n  ]\n}"}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3474 is Brooklyn Bridge\nkg:2218 is crosses", "response": "{ \"query\": [\"SELECT ?river WHERE { kg:3474 kg:2218 ?river . }\"] }"}
{"question": "How many people live in Poland?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?poland wdt:P1082 ?population .\",\n \t\t\"?poland rdfs:label \\\"Poland\\\"@en .\"\n \t]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q36 is Poland\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?poland wdt:P1082 ?population .\",\n \t\t\"FILTER(?poland = wd:Q36)\"\n \t]\n}"}
{"question": "How many people live in Poland?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5126 is Poland\nkg:4536 is population", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5126 kg:4536 ?resource . }\"] }"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?tvSeries wdt:P31 wd:Q5240896 ;\",\n    \"wdt:P1476 ?seriesName ;\",\n    \"wdt:P136 wd:Q203716 ;\",\n    \"wdt:P2140 ?episodeNumber .\",\n    \"?lastEpisode wdt:P1785 ?episodeNumber ;\",\n    \"wdt:P580 ?airDate .\",\n    \"{\",\n      \"?tvSeries rdfs:label \\\"Friends\\\"@en .\",\n    \"} UNION {\",\n      \"?seriesName rdf:value \\\"Friends\\\"@en .\",\n    \"}\",\n    \"FILTER(?episodeNumber = 100) # Assuming the last episode is numbered as 100 for example, adjust based on actual data.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n  ]\n}\n  \t\t            \t \t\t"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79784 is Friends\nwdt:P582 is end time", "response": "{\n  \"query\": [\n    \"?lastEpisode wdt:P582 ?endTime .\",\n    \"?lastEpisode wdt:P31 wd:Q55044865 ;\",\n    \"wdt:P4972 wd:Q79784\"\n  ]\n}"}
{"question": "When was the last episode of the TV series Friends aired?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3659 is Friends\nkg:4666 is end time", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:3659 kg:4666 ?resource . }\"] }"}
{"question": "Is the wife of president Obama called Michelle?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is the wife of president Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?president wdt:P39 wd:Q11696 ;\",\n    \"wdt:P26 ?wife .\",\n    \"?wife rdfs:label \\\"Michelle Obama\\\"@en.\"\n  ]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?president wdt:P39 wd:Q11696 ; # presidency position of United States of America (Q11696) in wdt:P39 (position held property) is ?president (the person who was president). \\n\",\n \t \"  wdt:P155 [ wd:P155* wd:Q23894 ; # The 8th president (wd:Q23894, Martin Van Buren) in the sequence of presidents (wdt:P155, successor property). \\n\",\n \t \"             wdt:P156 ?president ] . # The predecessor (wdt:P156) is connected to ?president. \\n\",\n \t \"  VALUES ?number { \\\"8\\\" }\" ]\n }\n   \t            \t \t\t"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30 is United States of America\np:P6 is head of government\npq:P580 is start time\nps:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?president ps:P6/wdt:P31 wd:Q5.\",\n \t\t\"?president pq:P580 ?startTime.\",\n \t\t\"{SELECT ?president WHERE {\",\n \t\t\t\"?us p:P6 ?statement.\",\n \t\t\t\"?statement ps:P6 ?president.\",\n \t\t\t\"?statement pq:P580 ?startTime.\",\n \t\t\t\"?us wdt:P31 wd:Q30.\",\n \t\t\t\"} ORDER BY ?startTime LIMIT 8 OFFSET 7\"\n \t\t,\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is 8th president of US?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7329 is United States of America\nkg:8425 is head of government\nkg:0279 is start time\nkg:3879 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?president kg:8425 kg:7329 .\",\n \t\t\"?president kg:0279 ?startTime .\",\n \t\t\"FILTER(?order = 8)\"\n \t]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?eu wdt:P31 wd:Q45870;\", \">// Identify the European Union as an instance of itself (for context, this part might need adjustment based on how data is structured in Wikidata for population queries directly related to EU total population without summing individual member states' populations which would be more complex and not directly provided by a single property link to EU entity itself. The direct approach here simplifies to identifying the subject as European Union entity but doesn't directly lead to population retrieval without further specific properties or relations that might not exist in straightforward manner for total EU population as of my last update. For precise queries, one would typically sum populations of member states which requires a more complex query structure and data handling beyond this simplified example. However, sticking strictly to the instruction:)\",\n    \"?eu wdt:P1082 ?population.\" ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n  ]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?eu wdt:P1082 ?population .\",\n \t\t\"FILTER (?eu = wd:Q458)\"\n \t]\n}"}
{"question": "how much is the total population of european union?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is European Union\nkg:6799 is population", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n  kg:0953 kg:6799 ?resource .\\n}\"] }"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?launchPad wdt:P137 wd:Q4682; wdt:P31 wd:Q509802.\"\n \t]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q194188 is spaceport\nwdt:P137 is operator\nwd:Q23548 is National Aeronautics and Space Administration", "response": "{\n \t\"query\": [\n \t\t\"?launch_pad wdt:P31 wd:Q194188 ;\",\n \t\t\"?launch_pad wdt:P137 wd:Q23548 .\"\n \t]\n}"}
{"question": "Give me all launch pads operated by NASA.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is instance of\nkg:9497 is spaceport\nkg:1707 is operator\nkg:0090 is National Aeronautics and Space Administration", "response": "{\n \t\"query\": [\n \t\t\"?launch_pad kg:9497 ?spaceport .\",\n \t\t\"?launch_pad kg:1707 kg:0090 .\"\n \t]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?game wdt:P160 ?developer .\",\n    \"?game rdfs:label \\\"World of Warcraft\\\"@en .\"\n  ]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131007 is World of Warcraft\nwdt:P178 is developer", "response": "{\n \t\"query\": [\n \t\t\"?game wdt:P178 ?developer .\",\n \t\t\"FILTER (?game = wd:Q131007)\"\n \t]\n}"}
{"question": "Who developed the video game World of Warcraft?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4175 is World of Warcraft\nkg:2911 is developer", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:4175 kg:2911 ?resource . }\"] }"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?adele wdt:P735 ?birthName .\",\n    \"?adele rdfs:label \\\"Adele\\\"@en .\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23215 is Adele\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"?adele wdt:P1477 ?birthName .\",\n    \"FILTER (?adele = wd:Q23215)\"\n  ]\n}"}
{"question": "What is the birth name of Adele?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8007 is Adele\nkg:3664 is birth name", "response": "{\n  \"query\": [\n    \"?x\",\n    \"kg:8007\",\n    \"kg:3664\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cairo wdt:P31 wd:Q5106.\",\n    \"?cairo wdt:P1082 ?population.\"\n  ]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85 is Cairo\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?population\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"wd:Q85 wdt:P1082 ?population .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the population of Cairo?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4167 is Cairo\nkg:8338 is population", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:4167 kg:8338 ?resource . \\n}\"] }"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P735 wd:Q72460; # P735 is 'given name', Q72460 is Frank (name) \\n\",\n \t\t\"wdt:P734 wd:Q1981556. # P734 is 'family name', Q1981556 is Herbert (name)\\n\",\n \t\t\"?person wdt:P570 ?dateOfDeath . # Check if there's a date of death\\n\",\n \t\t\"FILTER(!BOUND(?dateOfDeath))\" ]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P570 is date of death", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P570 ?dateOfDeath .\",\n \t\t\"FILTER (?item = wd:Q7934)\"\n \t]\n}"}
{"question": "Is Frank Herbert still alive?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6191 is Frank Herbert\nkg:7183 is date of death", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?dan_brown wdt:P31 wd:Q5.\",\n    \"?dan_brown rdfs:label \\\"Dan Brown\\\"@en.\",\n    \"?work wdt:P50 ?dan_brown.\",\n    \"?work wdt:P31 wd:Q7725684.\",\n    \"OPTIONAL {\",\n      \"?later_work wdt:P50 ?dan_brown;\",\n                  \"wdt:P31 wd:Q7725684;\",\n                  \"p:P577 [pq:P577 ?date].\",\n    \"}\",\n    \"FILTER NOT EXISTS {\",\n      \"?work p:P577/psv:P577/wikibase:rank ?rank_work.\",\n      \"?later_work p:P577/psv:P577/wikibase:rank ?rank_later_work.\",\n      \"?rank_work wikibase:rankValue 'normal'.\",\n      \"?rank_later_work wikibase:rankValue 'preferred'.\",\n    \"}\",\n    \"FILTER NOT EXISTS {\",\n      \"?work wdt:P577 ?date_work.\",\n      \"?later_work wdt:P577 ?date_later_work.\",\n      \"?date_later_work > ?date_work.\",\n    \"}\"\n  ]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q7345 is Dan Brown\nwdt:P577 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P50 wd:Q7345 .\",\n \t\t\"?work wdt:P577 ?publicationDate .\"\n \t]\n}"}
{"question": "What is the last work of Dan Brown?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8899 is author\nkg:6077 is Dan Brown\nkg:9624 is publication date", "response": "{\n \t\"query\": [\"$work\"]\n \t}\n \t                \t\t"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?university wdt:P31 wd:Q39108542.\",\n    \"?university rdfs:label \\\"Sungkyunkwan University\\\"@en.\"\n  ]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwdt:P276 is location\nwdt:P131 is located in the administrative territorial entity\nwd:Q41085 is Sungkyunkwan University", "response": "{\n \t\"query\": [\n \t\t\"?university wdt:P276 ?location .\",\n \t\t\"?university wdt:P131 ?administrativeEntity .\",\n \t\t\"?university wdt:P17 ?country .\",\n \t\t\"?university wikibase:sense wd:Q41085 .\"\n \t]\n}"}
{"question": "Where is Sungkyunkwan University?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0470 is country\nkg:8946 is location\nkg:2192 is located in the administrative territorial entity\nkg:9035 is Sungkyunkwan University", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:9035 kg:Sungkyunkwan_University .\",\n \t\t\"?resource kg:8946 ?location .\"\n \t]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P1476 \\\"The Interpretation of Dreams\\\";\",\n    \"?work wdt:P50 ?author.\"\n  ]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q726382 is Die Traumdeutung\nwdt:P50 is author", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P50 ?author .\",\n \t\t\"?resource wdt:P495 wd:Q726382 .\"\n \t]\n}"}
{"question": "Who is the author of the interpretation of dreams?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1167 is Die Traumdeutung\nkg:3300 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?author WHERE { kg:1167 kg:3300 ?author . }\"] }"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\"SELECT ?date WHERE { wd:Q8607 wdt:P570 ?date }\"] }"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q692 is William Shakespeare\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"?shakespeare wdt:P570 ?deathDate .\",\n    \"FILTER(?shakespeare = wd:Q692)\"\n  ]\n}"}
{"question": "When was the death of Shakespeare?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5991 is William Shakespeare\nkg:8176 is date of death", "response": "{\n  \"query\": [\n    \"?resource kg:8176 ?date .\",\n    \"?resource kg:5991 <http://dbpedia.org/resource/William_Shakespeare> .\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?developer wdt:P138 wd:Q20754965.\",\n    \"{?developer rdfs:label ?name. FILTER (LANG(?name) = \\\"en\\\") }\"\n  ]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1056 is product or material produced or service provided\nwd:Q17130715 is Slack", "response": "{\n \t\"query\": [\n \t\t\"?developer wdt:P1056 wd:Q17130715.\"\n \t]\n}"}
{"question": "Who developed Slack?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0014 is product or material produced or service provided\nkg:0492 is Slack", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?developer WHERE { kg:0492 kg:0014 ?developer . }\"] }"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?yearOfBirth\",\n    \"{\",\n    \"  wd:Q135748 wdt:P569 ?dateOfBirth .\",\n    \"  BIND(YEAR(?dateOfBirth) AS ?yearOfBirth)\",\n    \"}\"\n] }"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"?resource wdt:P569 ?dateOfBirth .\",\n    \"FILTER (?resource = wd:Q241665)\"\n  ]\n}"}
{"question": "In which year was Rachel Stevens born?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Rachel Stevens\nkg:8397 is date of birth", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:8473 kg:8397 ?resource . \\n}\"] }"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P721 wd:Q908435.\",\n    \"?person p:P345 ?statement.\",\n    \"?statement ps:P345 ?marriageCount.\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41142 is Jane Fonda\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?marriageCount (COUNT) {\",\n      \"SELECT ?spouse WHERE {\",\n        \"wd:Q41142 wdt:P26 ?spouse .\",\n      \"}\"\n   ,\"}\"\n  ]\n}"}
{"question": "How often did Jane Fonda marry?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3295 is Jane Fonda\nkg:1321 is spouse", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"  kg:3295 kg:1321 ?x .\"\n    \t]\n}"}
{"question": "Was the wife of president Lincoln called Mary?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was the wife of president Lincoln called Mary?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q25648.\",\n \t\t\"?president wdt:P26 ?wife.\",\n \t\t\"?wife rdfs:label ?nameFilter.\",\n \t\t\"FILTER(LANG(?nameFilter) = 'en').\",\n \t\t\"FILTER(CONTAINS(LCASE(?nameFilter), 'Mary'))\"\n \t]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q179085 p:P31/psn:P31 [ wikibase:directClaim wd:Q179085 ;\",\n    \"    schema:programmingLanguageUsed ?language ] .\",\n    \"}\"\n  ]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8038 is GIMP\nwdt:P277 is programmed in", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P277 ?language .\",\n \t\t\"?item wikibase:sense wd:Q8038.\"\n \t]\n}"}
{"question": "In which programming language is GIMP written?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6582 is GIMP\nkg:7415 is programmed in", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:6582 kg:7415 ?resource . }\"] }"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?angela_merkel wdt:P31 wd:Q41578; # Angela Merkel is an instance of human\\n    wdt:P69 ?university.\",\n    \"?university wdt:P31/wdt:P279* wd:Q3918; # The university is an instance or subclass of educational institution\\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n    "}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3918 is university\nwd:Q875538 is public university\nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?university wdt:P31 wd:Q3918; wdt:P69 wd:Q567.\"\n \t]\n}"}
{"question": "Which university did Angela Merkel attend?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5654 is university\nkg:4459 is public university\nkg:0182 is Angela Merkel\nkg:0579 is educated at\nkg:4931 is instance of", "response": "{\n \t\"query\": [\"$university\"]\n \t}\n \t                \t\t"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P86 wd:Q214305.\"\n \t]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q58483083 is dramatico-musical work\nwdt:P86 is composer\nwd:Q2808 is Elton John", "response": "{\n \t\"query\": [\n \t\t\"?musical wdt:P31 wd:Q58483083.\",\n \t\t\"?musical wdt:P86 wd:Q2808.\"\n \t]\n}"}
{"question": "List all the musicals with music by Elton John.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9424 is instance of\nkg:1957 is subclass of\nkg:3671 is dramatico-musical work\nkg:9607 is composer\nkg:2686 is Elton John", "response": "{\n \t\"query\": [\n \t\t\"?musical kg:9424 kg:3671 .\",\n \t\t\"?musical kg:9607 kg:2686 .\"\n \t]\n}"}
{"question": "What is the longest river in the world?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the longest river in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P31 wd:Q4022; # instance of river\",\n \t\t\"?river wdt:P5198 ?length.\",\n \t\t\"OPTIONAL { ?otherRiver wdt:P31 wd:Q4022; wdt:P5198 ?otherLength . FILTER (?otherLength > ?length) }\",\n \t\t\"FILTER (!BOUND(?otherLength))\",\n \t\t\"?river\"\n \t]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\"SELECT ?date WHERE { wd:Q9807 p:P569 [ psv:P569 [ wikibase:timeValue ?date ] ] }\"] }"}
{"question": "When was John Adams born?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11806 is John Adams\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"?resource wdt:P569 ?dateOfBirth .\",\n    \"?resource wikibase:sense wd:Q11806\"\n  ]\n}"}
{"question": "When was John Adams born?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5247 is John Adams\nkg:0188 is date of birth", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:5247 kg:0188 ?resource . \\n}\"] }"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830456; # Instance of hovercraft manufacturer (Q4830456 is the Wikidata ID for \"]}\n"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q185757 is hovercraft\nwdt:P176 is manufacturer", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P176 ?hovercraft .\",\n \t\t\"?hovercraft wdt:P31/wdt:P279* wd:Q185757 .\"\n \t]\n}"}
{"question": "Which companies produce hovercrafts?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8283 is instance of\nkg:6744 is subclass of\nkg:6957 is hovercraft\nkg:1305 is manufacturer", "response": "{\n \t\"query\": [\n \t\t\"?company kg:1305 ?hovercraft.\",\n \t\t\"?hovercraft kg:8283 kg:6957.\"\n \t]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?president wdt:P39 wd:Q25648.\",\n    \"?president wdt:P26 ?wife.\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?wife wdt:P26 wd:Q91 .\"\n  ]\n}"}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1470 is Abraham Lincoln\nkg:1740 is spouse", "response": "{\n  \"query\": [\n    \"?wife kg:1740 kg:1470 .\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?elephant wdt:P105 ?species .\",\n    \"?elephant rdfs:label \\\"elephant\\\"@en .\"\n  ]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7378 is elephant\nwdt:P279 is subclass of", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P279* wd:Q7378.\"\n \t]\n}"}
{"question": "Which species does an elephant belong?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5477 is elephant\nkg:6250 is subclass of", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?species WHERE { kg:5477 kg:6250 ?species . }\"] }"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?capital wdt:P31 wd:Q486972; % Capital is an instance of national capital of Australia (wd:Q486972, which refers to \"] }\n \t      \t\t\t"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q408 is Australia\nwdt:P36 is capital\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?capital wdt:P36 wd:Q408 ;\",\n \t\t\"wdt:P1082 ?population .\"\n \t]\n}"}
{"question": "How many people live in the capital of Australia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1226 is Australia\nkg:4676 is capital\nkg:8292 is population", "response": "{\n  \"query\": [\n    \"?capital kg:4676 kg:1226 .\",\n    \"?capital kg:8292 ?population .\"\n  ]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?empire wdt:P39 / wdt:P2415 wd:Q206875.\",\n \t\t\"?empire wdt:P31/wdt:P279* wd:Q15918585.\"\n \t]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q208008 is cocoa bean", "response": "{\n \t\"query\": [\n \t\t\"?empire wdt:P38 wd:Q208008 .\"\n \t]\n}"}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7522 is currency\nkg:2855 is cocoa bean", "response": "{\n \t\"query\": [\n \t\t\"?empire kg:is_currency kg:2855 .\"\n \t]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?einstein wdt:P31 wd:Q2045796.\",\n    \"?theory wdt:P864 ?einstein.\"\n  ]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P800 is notable work", "response": "{\n \t\"query\": [\n \t\t\"?theory wdt:P800 wd:Q937.\"\n \t]\n}"}
{"question": "How many theories did Albert Einstein come up with?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is Albert Einstein\nkg:7047 is notable work", "response": "{\n  \"query\": [\n    \"?theory kg:7047 kg:9081 .\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie rdfs:label \\\"Titanic (1997 film)\\\"@en;\",\n            \"?movie wdt:P811 ?soundtrack.\",\n            \"?soundtrack wdt:P86 ?composer.\"\n  ]\n}"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44578 is Titanic\nwdt:P86 is composer", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?composer WHERE {\\n wd:Q44578 wdt:P86 ?composer.\\n}\"] }"}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0524 is Titanic\nkg:2249 is composer", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0524 kg:2249 ?resource . }\"] }"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P345 \\\"tt0114709\\\";\",\n    \"?movie p:P2136 ?runtime.\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171048 is Toy Story\nwdt:P2047 is duration", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q171048 .\",\n    \"?movie wdt:P2047 ?runtime\"\n  ]\n}"}
{"question": "Give me the runtime of Toy Story.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1514 is Toy Story\nkg:2430 is duration", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?runtime\\nWHERE {\\n    kg:1514 kg:2430 ?runtime .\\n}\"] }"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?iran wdt:P47 ?borderCountry .\",\n \t\t\"?iran rdfs:label \\\"Iran\\\"@en .\"\n \t]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q794 is Iran\nwdt:P47 is shares border with", "response": "{\n \t\"query\": [\n \t\t\"?borderCountry wdt:P47 wd:Q794.\"\n \t]\n}"}
{"question": "With how many countries Iran has borders?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7701 is Iran\nkg:4645 is shares border with", "response": "{\n \t\"query\": [\n \t\t\"?country kg:4645 kg:7701 .\"\n \t]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q7546.\",\n \t\t\"?company wdt:P17 wd:Q959.\",\n \t\t\"?company wdt:P1813 ?name.\"\n \t]\n}\n    "}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P452 is industry\nwd:Q581105 is consumer electronics\nwdt:P740 is location of formation\nwd:Q956 is Beijing", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P452 wd:Q581105 ;\",\n \t\t\"wdt:P740 wd:Q956 .\"\n \t]\n}"}
{"question": "Which electronics companies were founded in Beijing?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is industry\nkg:1205 is consumer electronics\nkg:3857 is location of formation\nkg:1374 is Beijing", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?john_f_kennedy wdt:P39 wd:Q11696 .\",\n    \"?successor wdt:P39 ?presidency .\",\n    \"?presidency wdt:P155 ?john_f_kennedy\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"?successor\",\n    \"WHERE\",\n    \"{\",\n    \"wd:Q9696\",\n    \"p:P39/\",\n    \"ps:P39\",\n    \"wd:Q11696;\",\n    \"p:P39/\",\n    \"pq:P1366\",\n    \"?successor\",\n    \"}\"\n  ]\n}"}
{"question": "Who was the successor of John F. Kennedy?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2479 is John F. Kennedy\nkg:8778 is position held\nkg:5867 is position held\nkg:9343 is President of the United States\nkg:6563 is replaced by", "response": "{\n \t\"query\": [\"$successor\"]\n \t}\n \t                \t\t"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mayor wdt:P39 wd:Q24; \",\n    \"wdt:P31 wd:Q5.\"\n  ]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?mayor wdt:P6 wd:Q90 .\"\n \t]\n}"}
{"question": "Who is the mayor of Paris?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6166 is Paris\nkg:8306 is head of government", "response": "{\n \t\"query\": [\"SELECT ?resource WHERE { kg:6166 kg:8306 ?resource . }\"]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q467850; # instance of human\",\n \t\t\"wdt:P1559 wd:Q2925788.\" ,\"# has alias Arnold Schwarzenegger\"\n \t\t,\n \t\t\"?person wdt:P69 ?university.\"\n \t]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2685 is Arnold Schwarzenegger\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"?university wdt:P31 wd:Q3918 .\",\n    \"wd:Q2685 wdt:P69 ?university .\"\n  ]\n}"}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7308 is Arnold Schwarzenegger\nkg:8876 is educated at\nkg:0688 is instance of\nkg:7030 is subclass of\nkg:3125 is university", "response": "{\n  \"query\": [\n    \"?university a kg:3125 .\",\n    \"kg:7308 kg:8876 ?university.\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?bond wdt:P31 wd:Q42;\",\n    \"?bond wdt:P40 ?spouse.\"\n  ]\n}\n\t\t            \t    \t"}
{"question": "Is James Bond married?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2009573 is James Bond\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?item wdt:P26 ?spouse .\",\n    \"FILTER (?item = wd:Q2009573)\"\n  ]\n}"}
{"question": "Is James Bond married?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6381 is James Bond\nkg:3800 is spouse", "response": "{\n  \"query\": [\n    \"?entity kg:3800 kg:6381 .\"\n  ]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?isar wdt:P361 ?lake .\",\n \t\t\"?isar rdfs:label ?isarLabel filter (lang(?isarLabel) = \" ,\"en\" ,\") .\",\n \t\t\"?lake rdfs:label ?lakeLabel filter (lang(?lakeLabel) = \" ,\"en\" ,\") .\"\n \t]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q106588 is Isar\nwdt:P403 is mouth of the watercourse\nwdt:P31 is instance of\nwd:Q23397 is lake", "response": "{\n \t\"query\": [\n \t\t\"?isar wdt:P403 ?mouth .\",\n \t\t\"?mouth wdt:P31/wdt:P279* wd:Q23397 .\",\n \t\t\"FILTER(?isar = wd:Q106588)\"\n \t]\n}"}
{"question": "Does the Isar flow into a lake?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5036 is Isar\nkg:9120 is mouth of the watercourse\nkg:4891 is instance of\nkg:5402 is lake", "response": "{\n  \"query\": [\n    \"?isar kg:9120 ?mouth.\",\n    \"?mouth kg:4891 kg:5402.\"\n  ]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?company wdt:P31 wd:Q7594850; # instance of company (restricted to Indian companies with an additional filter if necessary for precision, not directly shown here as Wikidata does not have a direct property for country of origin in the query without further exploration or using labels which is less precise) \\n\",\n \t \"?company wdt:P1128 ?employees; # has number of employees\\n\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\n \t \"ORDER BY DESC(?employees)\",\n \t \"LIMIT 1\"\n \t]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P17 is country\nwd:Q668 is India\nwdt:P1128 is employees", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453;\",\n \t\t\"?company wdt:P17 wd:Q668;\",\n \t\t\"?company wdt:P1128 ?employees.\",\n \t\t\"ORDER BY DESC(?employees)\",\n \t\t\"LIMIT 1\"\n \t]\n}"}
{"question": "Which Indian company has the most employees?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9039 is instance of\nkg:8788 is business\nkg:3619 is country\nkg:2811 is India\nkg:7645 is employees", "response": "{\n \t\"query\": [\n \t\t\"?company kg:9039 kg:8788 .\",\n \t\t\"?company kg:3619 kg:2811 .\",\n \t\t\"?company kg:7645 ?employees .\"\n \t]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?john_f_kennedy wdt:P39 wd:Q11696 .\",\n    \"?vice_presidency wdt:P361 wd:Q15824 ;\",\n    \"wdt:P39 ?john_f_kennedy ;\",\n    \"wdt:P1076 ?vice_president .\"\n  ]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P580 is start time\npq:P582 is end time\np:P39 is position held\nps:P39 is position held\nwd:Q11699 is Vice President of the United States\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"?vicePresident ps:P39 wd:Q11699 .\",\n \t\t\"?president p:P39 [ps:P39 wd:Q11696; pq:P580 ?startTime; pq:P582 ?endTime] .\",\n \t\t\"?vicePresident p:P39 [ps:P39 wd:Q11699; pq:P580 ?vpStartTime; pq:P582 ?vpEndTime] .\",\n \t\t\"FILTER(?vpStartTime <= ?endTime && ?vpEndTime >= ?startTime)\"\n \t]\n}"}
{"question": "Who was John F. Kennedy's vice president?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3069 is John F. Kennedy\nkg:4508 is position held\nkg:8952 is position held\nkg:0773 is President of the United States\nkg:0995 is start time\nkg:5626 is end time\nkg:4508 is position held\nkg:8952 is position held\nkg:0526 is Vice President of the United States\nkg:0995 is start time\nkg:5626 is end time", "response": "{\n \t\"query\": [\"$v\"]\n \t}\n \t                \t\t"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P147 wd:Q40826;\",\n    \"?creator wdt:P27 ?country.\"\n  ]\n}\n\t\t            \t    \t"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1501505 is Miffy\nwdt:P170 is creator\nwdt:P27 is country of citizenship", "response": "{\n  \"query\": [\n    \"?creator wdt:P170 wd:Q1501505 ;\",\n    \"wdt:P27 ?country .\"\n  ]\n}"}
{"question": "Which country does the creator of Miffy come from?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1126 is Miffy\nkg:0332 is creator\nkg:1594 is country of citizenship", "response": "{\n \t\"query\": [\n \t\t\"?creator kg:0332 kg:1126 .\",\n \t\t\"?creator kg:1594 ?country .\"\n \t]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?heineken_brewery wdt:P131* ?city ;\\n\",\n \t\t\"             rdfs:label ?breweryLabel .\\n\",\n \t\t\"?company wdt:P127 ?heineken_brewery ;\\n\",\n \t\t\"         rdfs:label ?companyLabel .\\n\",\n \t\t\"FILTER(LANG(?breweryLabel) = 'en') .\\n\",\n \t\t\"FILTER(LANG(?companyLabel) = 'en') .\\n\",\n \t\t\"FILTER(CONTAINS(LCASE(?companyLabel), \\\"heineken\\\")) .\"\n \t]\n}"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854383 is Heineken\nwdt:P176 is manufacturer\nwdt:P159 is headquarters location", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q854383 wdt:P159 ?resource . }\"] }"}
{"question": "In what city is the Heineken brewery?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2645 is Heineken\nkg:1943 is manufacturer\nkg:0447 is headquarters location", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?city \\nWHERE {\\n    kg:2645 kg:1943 ?brewery ;\\n             kg:0447 ?city.\\n}\"] }"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?barackObama wdt:P39 wd:Q11696 .\",\n    \"?barackObama wdt:P571 ?birthDate .\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P102 is member of political party\nwd:Q29552 is Democratic Party", "response": "{\n  \"query\": [\n    \"?item wdt:P102 wd:Q29552 .\",\n    \"?item wikibase:sameAs wd:Q76 .\"\n  ]\n}"}
{"question": "Is Barack Obama a democrat?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6237 is Barack Obama\nkg:0077 is member of political party\nkg:9901 is Democratic Party", "response": "{\n  \"query\": [\n    \"?x kg:0077 kg:9901 .\",\n    \"FILTER (?x = kg:6237)\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5;\",\n    \"wdt:P26 wd:Q90847.\",\n    \"?person wdt:P40 ?child.\"\n  ]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"?child wdt:P40 wd:Q7416.\"\n \t]\n}"}
{"question": "List the children of Margaret Thatcher.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1671 is Margaret Thatcher\nkg:9715 is child", "response": "{\n \t\"query\": [\"$child\"]\n \t}\n \t                \t\t"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?nrw wdt:P31 wd:Q78.\",\n    \"?nrw wdt:P2046 ?area.\"\n  ]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1198 is North Rhine-Westphalia\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?area WHERE {\",\n \t\t\"  wd:Q1198 wdt:P2046 ?area .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2319 is North Rhine-Westphalia\nkg:6965 is area", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n    kg:2319 kg:6965 ?resource .\\n}\"] }"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P1096 ?population ;\",\n \t\t\"wdt:P31 wd:Q515 .\",\n \t\t\"ORDER BY DESC(?population)\",\n \t\t\"LIMIT 1\"\n \t]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q515 ;\",\n \t\t\"wdt:P1082 ?population .\"\n \t]\n}"}
{"question": "Which city has the most inhabitants?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0594 is instance of\nkg:1015 is subclass of\nkg:4012 is city\nkg:0154 is population", "response": "{\n \t\"query\": [\n \t\t\"?city a kg:4012 ;\",\n \t\t\"kg:0154 ?population .\"\n \t]\n}\n          "}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?trump wdt:P31 wd:Q24065897.\",\n    \"?trump wdt:P27 wd:Q30.\",\n    \"?trump wdt:P1315 ?business.\"\n  ]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P488 is chairperson\nwd:Q22686 is Donald Trump\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n \t\"query\": [\n \t\t\"?business wdt:P31 wd:Q4830453;\",\n \t\t\"wd:Q22686 wdt:P488 ?business.\"\n \t]\n}"}
{"question": "What is Donald Trump's main business?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4832 is chairperson\nkg:2038 is Donald Trump\nkg:0886 is instance of\nkg:5264 is subclass of\nkg:3913 is business\nkg:3936 is dissolved, abolished or demolished date", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2038 kg:4832 ?business . ?business kg:0886 kg:3913 . }\"] }"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?world_cup_match wdt:P31 wd:Q4957692.\",\n    \"?world_cup_match p:P768 ?statement.\",\n    \"?statement ps:P768 wd:Q20008166.\",\n    \"?world_cup_match wdt:P585 ?point_in_time.\"\n  ]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170645 is 2018 FIFA World Cup\nwdt:P3967 is final event\nwdt:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"?match wdt:P3967 wd:Q170645;\",\n \t\t\"?match wdt:P580 ?startTime.\"\n \t]\n}"}
{"question": "When will start the final match of the football world cup 2018?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7606 is 2018 FIFA World Cup\nkg:2755 is final event\nkg:9531 is start time", "response": "{\n  \"query\": [\n    \"?match kg:2755 kg:7606 .\",\n    \"?match kg:9531 ?startTime .\"\n  ]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q11424; \",\n \t\t\"wdt:P86 wd:Q902. \"\n \t]\n}\n    "}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2001 is Stanley Kubrick", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P57 wd:Q2001 .\"\n \t]\n}"}
{"question": "Which films did Stanley Kubrick direct?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7961 is director\nkg:1127 is Stanley Kubrick", "response": "{\n \t\"query\": [\n \t\t\"?film kg:7961 kg:1127 .\"\n \t]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?Iraq wdt:P1082 ?population .\",\n    \"?Iraq rdfs:label \\\"Iraq\\\"@en .\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q796 is Iraq\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"?resource wdt:P1082 ?population .\",\n    \"?resource wdt:P31 wd:Q796 .\"\n  ]\n}"}
{"question": "how much is the population Iraq?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9047 is Iraq\nkg:6595 is population", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n  kg:9047 kg:6595 ?resource .\\n}\"] }"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q510738; # instance of city\",\n \t\t\"wdt:P1001 ?population;\",\n \t\t\"wdt:P625 ?coordinates.\",\n \t\t\"?country wdt:P36 ?city.\",\n \t\t\"?country wdt:P29 ?provinceState.\",\n \t\t\"FILTER(?country = wd:Q16)\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n    "}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q16 is Canada\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q515;\",\n \t\t\"?city wdt:P17 wd:Q16;\",\n \t\t\"?city wdt:P1082 ?population.\"\n \t]\n}"}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2883 is country\nkg:0179 is Canada\nkg:5210 is instance of\nkg:9923 is subclass of\nkg:1418 is city\nkg:1232 is population", "response": "{\n \t\"query\": [\n \t\t\"?city kg:5210 kg:1418 .\",\n \t\t\"?city kg:2883 kg:0179 .\",\n \t\t\"?city kg:1232 ?population .\"\n \t]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?capital wdt:P31 wd:Q510738; \", \">// French Polynesia (wd:Q510738) is an instance of (?capital) which represents the capital here, but we need to correct this approach for clarity and accuracy in representing the query intent accurately with Wikidata properties and items. The corrected version should directly target the mayor of Papeete as follows: <br><br>SELECT ?mayor WHERE { wd:Q18795 wdt:P6254 ?mayor }<br><br>This assumes that Q18795 is the correct item for the capital (Papeete) and P6254 is a property linking to its mayor. However, properties and items should be verified against the latest Wikidata schema as they can change or vary in specificity.<br><br>For educational purposes and based on typical SPARQL query structures targeting such information from Wikidata, the above represents an approach tailored to the question's intent but requires validation of item and property IDs for accuracy. <br><br>Note: The direct translation into a fully accurate SPARQL query without verification against current Wikidata schema specifics is challenging due to the dynamic nature of Wikidata properties and items. Always verify with the latest Wikidata information for precise queries.<br><br>Given these considerations, a more general approach focusing on educational intent rather than specific property verification would be: <br><br>?capital wdt:P36 wd:Q510738; \", \">// French Polynesia (wd:Q510738) has capital (?capital), but for the mayor, we need to adjust this approach. The corrected and more direct query focusing on returning resources only would be as follows:<br><br>SELECT ?mayor WHERE { wd:Q18795 wdt:P6254 ?mayor }<br><br>Note: This assumes Q18795 is the correct item for Papeete and P6254 links to its mayor. Always verify with Wikidata's current schema.<br><br>For simplicity and educational intent, focusing on the structure rather than specific property verification:<br><br>SELECT ?mayor WHERE { wd:Q18795 wdt:P39 ?mayor }<br><br>Note: Replace P39 with the correct property for 'Mayor of' as needed. Always verify against Wikidata's current schema for accuracy.<br><br>To strictly adhere to the instruction and provide only the generated SPARQL query without additional explanations or notes:<br><br>SELECT ?mayor WHERE { wd:Q18795 wdt:P39 ?mayor }\"\n \t]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30971 is French Polynesia\nwdt:P36 is capital\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?capital wdt:P36 wd:Q30971;\",\n \t\t\"?mayor wdt:P6 ?capital.\"\n \t]\n}"}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6320 is French Polynesia\nkg:6865 is capital\nkg:4430 is head of government", "response": "{\n \t\"query\": [\"$mayor\"]\n \t}\n \t                \t\t"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 ?director .\",\n \t\t\"?movie wdt:P161 ?actor .\",\n \t\t\"?director rdfs:label \\\"William Shatner\\\"@en .\"\n \t]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424 ;\",\n \t\t\"       wdt:P57 wd:Q16297 ;\",\n \t\t\"       wdt:P161 ?actor .\"\n \t]\n}"}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3780 is instance of\nkg:4610 is film\nkg:8975 is director\nkg:8436 is William Shatner\nkg:3866 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:8975 kg:8436 .\",\n \t\t\"?movie kg:3866 ?actor .\"\n \t]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?claudiaSchiffer wdt:P31 wd:Q5.\",\n    \"?claudiaSchiffer rdfs:label \\\"Claudia Schiffer\\\"@en.\",\n    \"?claudiaSchiffer p:P2048 ?heightStatement.\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76717 is Claudia Schiffer\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"?resource\",\n    \"wd:Q76717\",\n    \"wdt:P2048\",\n    \"?height\"\n  ]\n}"}
{"question": "How tall is Claudia Schiffer?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9771 is Claudia Schiffer\nkg:7932 is height", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n    kg:9771 kg:7932 ?resource .\\n}\"] }"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ; # instance of country\",\n \t\t\"wdt:P298 ?rank . # population density rank\",\n \t\t\"FILTER (?country = wd:Q183) # Germany\"\n \t]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P1082 is population\nwdt:P2046 is area\nwd:Q183 is Germany\nwdt:P1082 is population\nwd:Q183 is Germany\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256;\",\n \t\t\"?country wdt:P1082 ?population;\",\n \t\t\"?country wdt:P2046 ?area.\",\n \t\t\"{wd:Q183 wdt:P1082 ?germanyPopulation; wdt:P2046 ?germanyArea.}\",\n \t\t\"bind((?population / ?area) as ?density)\",\n \t\t\"bind((?germanyPopulation / ?germanyArea) as ?germanyDensity)\"\n \t]\n}"}
{"question": "how much is the population densty rank of germany?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1872 is instance of\nkg:6284 is country\nkg:2685 is population\nkg:5831 is area\nkg:7906 is Germany\nkg:2685 is population\nkg:7906 is Germany\nkg:5831 is area", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    kg:7906 kg:2685 ?population ;\\n             kg:5831 ?area .\\n    BIND((?population / ?area) AS ?density)\\n}\"] }"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?mountain wdt:P31 wd:Q8502 ; # instance of mountain or volcano etc. in Italy (wd:Q46) and highest peak (wd:Q179645)\\n\",\n \t \"?mountain wdt:P361 wd:Q46 ;\\n\",\n \t \"?mountain wdt:P2044 ?elevation . # elevation\\n\",\n \t \"OPTIONAL { ?mountain wdt:P2858 ?highest_peak_of } # highest peak of\\n\",\n \t \"{ SELECT ?mountain (MAX(?elevation) AS ?maxElevation)\\n\",\n \t \"WHERE {\\n\",\n \t \"?mountain wdt:P31 wd:Q8502 ;\\n\",\n \t \"?mountain wdt:P361 wd:Q46 ;\\n\",\n \t \"?mountain wdt:P2044 ?elevation .\\n\",\n \t \"}\\n\",\n \t \"GROUP BY ?mountain\\n\",\n \t \"}\\n\",\n \t \"FILTER (?elevation = ?maxElevation)\\n\"\n \t]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P17 is country\nwd:Q38 is Italy\nwdt:P2044 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ;\",\n \t\t\"?mountain wdt:P17 wd:Q38 ;\",\n \t\t\"?mountain wdt:P2044 ?elevation .\"\n \t]\n}"}
{"question": "What is the highest mountain in Italy?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0462 is instance of\nkg:4464 is mountain\nkg:5176 is country\nkg:5061 is Italy\nkg:4947 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:4464 ?type .\",\n \t\t\"?mountain kg:0462 kg:5061 .\",\n \t\t\"?mountain kg:4947 ?elevation .\"\n \t]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?game wdt:P178 wd:Q205634.\"\n \t]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11410 is game\nwdt:P123 is publisher\nwd:Q928726 is GMT Games", "response": "{\n \t\"query\": [\n\t  \"?game wdt:P31/wdt:P279* wd:Q11410 .\",\n      \"?game wdt:P123 wd:Q928726 .\"\n\t]\n}"}
{"question": "List all games by GMT.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9566 is instance of\nkg:6944 is subclass of\nkg:8759 is game\nkg:9432 is publisher\nkg:2847 is GMT Games", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?game WHERE {\",\n \t\t\"  ?game kg:8759 true ;\",\n \t\t\"        kg:9432/kg:2847 true .\"\n \t\t]}\n"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?suriname wdt:P31 wd:Q38.\",\n    \"?suriname wdt:P37 ?official_language.\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q730 is Suriname\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"?language wdt:P37 wd:Q730 .\"\n  ]\n}"}
{"question": "What is the official language of Suriname?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4116 is Suriname\nkg:0803 is official language", "response": "{\n  \"query\": [\n    \"?x\",\n    \"kg:4116\",\n    \"kg:0803\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?person wdt:P31 wd:Q5; # instance of human\\n\",\n    \"wdt:P1477 wd:Q208369; # Greek writer Nikos Kazantzakis\\n\",\n    \"wdt:P20 ?city. # place of death\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214622 is Nikos Kazantzakis\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"?resource wdt:P20 ?placeOfDeath .\",\n    \"?resource wdt:P214622 wd:Q214622 .\"\n  ]\n}"}
{"question": "In which city did Nikos Kazantzakis die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2723 is Nikos Kazantzakis\nkg:5439 is place of death", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:2723 kg:5439 ?resource . \\n}\"] }"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?lake wdt:P1325 wd:Q40968; # Limerick Lake\\n\",\n \t\t\"\\twdt:P17 ?country.\"\n \t]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6386177 is Limerick Lake\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P17 ?country .\",\n \t\t\"?item wdt:P17 wd:Q6386177\"\n \t]\n}"}
{"question": "In which country is the Limerick Lake?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7230 is Limerick Lake\nkg:3882 is country", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:7230 ?limerickLake .\",\n \t\t\"?resource kg:3882 ?country .\"\n \t]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?prodigy wdt:P361 ?member .\",\n \t\t\"wd:Q729054 wdt:P361 ?prodigy .\"\n \t]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P463 is member of\nwd:Q7256860 is The Prodigy", "response": "{\n \t\"query\": [\n \t\t\"?member wdt:P463 wd:Q7256860.\"\n \t]\n}"}
{"question": "Give me all members of Prodigy.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2552 is member of\nkg:5036 is The Prodigy", "response": "{\n \t\"query\": [\"$member\" ]\n \t}\n \t            \t\t"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?rome wdt:P31 wd:Q51064829.\",\n    \"?rome wdt:P421 ?timezone.\"\n  ]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q220 is Rome\nwdt:P421 is located in time zone", "response": "{\n \t\"query\": [\n \t\t\"?timeZone wdt:P421 wd:Q220.\"\n \t]\n}"}
{"question": "In which time zone is Rome?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1360 is Rome\nkg:1359 is located in time zone", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?timeZoneResource WHERE {\\n    kg:1360 kg:1359 ?timeZoneResource .\\n}\"] }"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?wall_album wdt:P361 wd:Q294580.\",\n    \"?wall_album wdt:P50 ?writers.\"\n  ]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q151114 is The Wall\nwdt:P658 is tracklist\nwdt:P162 is producer", "response": "{\n \t\"query\": [\n \t\t\"?album wdt:P162 ?writer.\",\n \t\t\"?album wdt:P658 wd:Q151114.\"\n \t]\n}"}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2920 is The Wall\nkg:8526 is tracklist\nkg:1210 is producer", "response": "{\n  \"query\": [\n    \"?album kg:id kg:2920 .\",\n    \"?album kg:tracklist ?tracklist .\",\n    \"?tracklist kg:producer ?writer .\"\n  ]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?rotterdam wdt:P31 wd:Q515;\",\n \t\t\"wdt:P625 ?coords.\",\n \t\t\"?mayor wdt:P39 wd:Q840755;\",\n \t\t\"wdt:P570 ?endTime;\",\n \t\t\"wdt:P27/wdt:P31 wd:Q159.\",\n \t\t\"FILTER NOT EXISTS {?mayor wdt:P576 ?endTime.}\",\n \t\t\"?rotterdam p:P6428/ps:P6428 ?mayor.\"\n \t]\n}\n   \t"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34370 is Rotterdam\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?mayor wdt:P6 wd:Q34370 .\"\n \t]\n}"}
{"question": "Who is the mayor of Rotterdam?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9506 is Rotterdam\nkg:5120 is head of government", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?mayor WHERE {\\n  kg:9506 kg:5120 ?mayor .\\n}\"] }"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?city wdt:P31 wd:Q510748; # instance of city/town/urban area/etc in Australia (wd:Q40226) and population quantity (wdt:P1082) should be maximized but for simplicity, we are just fetching cities without comparing their sizes directly as per the instruction to return only resources. For exact largest by size or population, additional filtering would be required which is beyond current scope based on provided instructions.\"\n \t\t]\n }"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n        \"?city wdt:P31 wd:Q515 ;\",\n        \"?city wdt:P17 wd:Q408 ;\",\n        \"?city wdt:P1082 ?population .\"\n    ]\n}"}
{"question": "What is the largest city in Australia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5863 is instance of\nkg:8388 is subclass of\nkg:7831 is city\nkg:3186 is country\nkg:6561 is Australia\nkg:6373 is population", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?city WHERE {\",\n \t\t\"  ?city kg:7831 true .\",\n \t\t\"  ?city kg:3186 kg:6561 .\",\n \t\t\"  OPTIONAL { ?city kg:6373 ?pop . }\",\n \t\t\"  FILTER NOT EXISTS {\",\n \t\t\"    ?otherCity kg:7831 true .\",\n \t\t\"    ?otherCity kg:3186 kg:6561 .\",\n \t\t\"    OPTIONAL { ?otherCity kg:6373 ?otherPop . }\",\n \t\t\"    FILTER (?otherPop > ?pop) \",\n \t\t\"  }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?chirac wdt:P39 wd:Q15760 ;\",\n    \"wdt:P26 ?spouse .\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2105 is Jacques Chirac\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?spouse wdt:P26 wd:Q2105 .\"\n  ]\n}"}
{"question": "Who was married to president Chirac?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9082 is Jacques Chirac\nkg:5189 is spouse", "response": "{\n  \"query\": [\n    \"?spouse kg:5189 kg:9082 .\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?south_africa wdt:P31 wd:Q38.\",\n    \"?south_africa wdt:P36 ?government_form.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q258 is South Africa\nwdt:P122 is basic form of government", "response": "{\n  \"query\": [\n    \"?government wdt:P122 wd:Q258 .\"\n  ]\n}"}
{"question": "What form of government is found in South Africa?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is South Africa\nkg:3788 is basic form of government", "response": "{\n  \"query\": [\n    \"?x <http://www.example.org/kg/property/3788> <http://www.example.org/kg/5595> .\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?yokohamaMarineTower wdt:P1619 ?height .\",\n    \"?yokohamaMarineTower rdfs:label \\\"Yokohama Marine Tower\\\"@en .\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1207989 is Yokohama Marine Tower\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q1207989\",\n    \"wdt:P2048\"\n  ]\n}"}
{"question": "How high is the Yokohama Marine Tower?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8468 is Yokohama Marine Tower\nkg:6687 is height", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n    kg:8468 kg:6687 ?resource .\\n}\"] }"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?player\"\n \t]\n \t}\n \t                \t\t"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P106 wd:Q3665646 .\",\n \t\t\"?player wdt:P2048 ?height .\"\n \t]\n}"}
{"question": "Who is the tallest basketball player?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8059 is occupation\nkg:4937 is basketball player\nkg:1141 is height", "response": "{\n \t\"query\": [\"$player\"]\n \t}\n \t                \t\t"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q38; # Find an item that is an instance of country (Q38) and has Turkmenistan as its label in English (en).\",\n \t\t\"wdt:P297 ?isoCode.\", \"># Use the ISO 3166-1 alpha-2 code to uniquely identify Turkmenistan.\",\n \t\t\"?language wdt:P301 wd:Q48531;\", \"># Find languages that are spoken in the country identified by the ISO code of Turkmenistan.\",\n \t\t\"wdt:P17 ?country.\" ,\"FILTER (LANG(?country) = 'en' && ?isoCode = 'TM')\",\n \t\t\"?language wdt:P297 ?isoCode.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q874 is Turkmenistan\nwdt:P2936 is language used", "response": "{\n \t\"query\": [\n \t\t\"?language wdt:P2936 wd:Q874.\"\n \t]\n}"}
{"question": "How many languages are spoken in Turkmenistan?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8750 is Turkmenistan\nkg:5009 is language used", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n  kg:8750 kg:5009 ?resource .\\n}\"] }"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cheGuevara wdt:P49 ?child .\",\n    \"wd:Q185607 ?label \\\"Che Guevara\\\"@en ;\",\n    \"?cheGuevara wdt:P31 wd:Q5 .\"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5809 is Che Guevara\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"?child wdt:P40 wd:Q5809 .\"\n  ]\n}"}
{"question": "Did Che Guevara have children?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4932 is Che Guevara\nkg:0068 is child", "response": "{\n  \"query\": [\n    \"?child kg:0068 kg:4932 .\"\n  ]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?kaurismaki wdt:P166 ?cannes_award .\",\n \t\t\"?cannes_award wdt:P856 wd:Q24397 .\"\n \t]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q276186 is Aki Kaurismäki\nwdt:P166 is award received\nwd:Q844804 is Cannes Film Festival Grand Prix", "response": "{\n \t\"query\": [\n \t\t\"?kaurismaki wdt:P166 ?award .\",\n \t\t\"?award wdt:P31 wd:Q844804 .\",\n \t\t\"?kaurismaki wikibase:sense wd:Q276186 .\"\n \t]\n}"}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8458 is Aki Kaurismäki\nkg:1315 is award received\nkg:1066 is Cannes Film Festival Grand Prix", "response": "{\n \t\"query\": [\n \t\t\"?entity kg:1315 kg:1066 .\",\n \t\t\"FILTER(?entity = kg:8458)\"\n \t]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mayor wdt:P31 wd:Q5; \",\n    \"wdt:P39 wd:Q7602;\",\n    \"wdt:P4100 ?party.\"\n  ]\n}\n    "}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government\nwdt:P102 is member of political party", "response": "{\n \t\"query\": [\n \t\t\"?mayor wdt:P6 wd:Q90;\",\n \t\t\"?mayor wdt:P102 ?party.\"\n \t]\n}"}
{"question": "To which party does the mayor of Paris belong?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2333 is Paris\nkg:5416 is head of government\nkg:5588 is member of political party", "response": "{\n \t\"query\": [\"$mayorParty\"] }\n \t \t   \t \t   \t\t \t   "}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P106 wd:Q482789;\",\n \t\t\"wdt:P1100 ?racesCount.\",\n \t\t\"OPTIONAL{?person wdt:P570 ?deathDate.}\",\n \t\t\"FILTER(!BOUND(?deathDate))\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10841764 is Formula One driver\nwdt:P1350 is number of matches played/races/starts", "response": "{\n \t\"query\": [\n \t\t\"?driver wdt:P106 wd:Q10841764 .\",\n \t\t\"?driver wdt:P1350 ?races .\"\n \t]\n}"}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6894 is occupation\nkg:7521 is Formula One driver\nkg:6339 is number of matches played/races/starts", "response": "{\n \t\"query\": [\"$driver\"]\n \t}\n \t                \t\t"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?sitecore wdt:P31 wd:Q7584902.\",\n    \"?sitecore wdt:P17 ?country.\"\n  ]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2663195 is Sitecore\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P17 ?country .\",\n \t\t\"?item wikibase:sense wd:Q2663195\"\n \t]\n}"}
{"question": "What country is Sitecore from?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9915 is Sitecore\nkg:9456 is country", "response": "{\n  \"query\": [\n    \"?entity kg:9915 ?sitecore.\",\n    \"?sitecore kg:9456 ?country.\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?frankSinatra wdt:P31 wd:Q5; # Frank Sinatra is a human\",\n    \"wdt:P735 ?birthPlace.\",\n    \"{?frankSinatra rdfs:label \\\"Frank Sinatra\\\"@en.} # Label filter for Frank Sinatra\"\n  ]\n}\n    "}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40912 is Frank Sinatra\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"?resource wdt:P19 ?birthPlace .\",\n    \"FILTER (?resource = wd:Q40912)\"\n  ]\n}"}
{"question": "Give me the birth place of Frank Sinatra.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4574 is Frank Sinatra\nkg:3148 is place of birth", "response": "{\n  \"query\": [\n    \"?resource kg:3148 kg:4574 .\"\n  ]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; # instance of film\\n\",\n \t\t\"wdt:P161 ?actor; # cast member\\n\",\n \t\t\"?actor rdfs:label \\\"Christian Bale\\\"@en. # actor's name in English\"\n \t]\n}\n   \t   \t\t          \t"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1481540 is Velvet Goldmine\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 wd:Q45772 .\",\n \t\t\"?movie = wd:Q1481540\"\n \t]\n}"}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1837 is Velvet Goldmine\nkg:2378 is cast member\nkg:2302 is Christian Bale", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource \",\n \t\t\"WHERE {\",\n \t\t\"  kg:1837 kg:2378 ?resource .\",\n \t\t\"  FILTER (?resource = kg:2302) \",\n \t\t\"}\"\n \t]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?son wdt:P22 ?father .\",\n \t \"?son wdt:P25 wd:Q104796 .\", \">// Cher's Wikidata ID is Q104796, assuming the father's ID or another way to identify Sonny needs to be specified similarly or through another property for accuracy. For demonstration, I've only included Cher here as an example since direct IDs for \"]}\n"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P22 is father\nwd:Q179150 is Sonny Bono\nwdt:P25 is mother\nwd:Q12003 is Cher", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?son wdt:P22 wd:Q179150 ;\",\n \t    \t        \t\t\"?son wdt:P25 wd:Q12003 .\"\n \t    \t        \t]\n}"}
{"question": "Who is the son of Sonny and Cher?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8319 is father\nkg:6328 is Sonny Bono\nkg:8679 is mother\nkg:7963 is Cher", "response": "{\n \t\"query\": [\n \t\t\"?son kg:8319 kg:6328 .\",\n \t\t\"?son kg:8679 kg:7963 .\"\n \t]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?capital wdt:P36 wd:Q281;\", \">// Q281 is the Wikidata ID for Cameroon, P36 denotes capital of a country or administrative territorial entity in Wikidata's schema, and ?capital will be bound to the resource representing the capital city of Cameroon. However, this format needs to be adjusted into proper SPARQL syntax as follows: \"\n    ]\n}\n    "}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1009 is Cameroon\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"?capital wdt:P36 wd:Q1009 .\"\n  ]\n}"}
{"question": "What is the capital of Cameroon?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9619 is Cameroon\nkg:9141 is capital", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:9619 kg:9141 ?resource . \\n}\"] }"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5 ;\", \">// ?person is an instance of human (Q5 in Wikidata represents 'human' entity type) \\n\",\n    \"wdt:P1569 wd:Q207478 ;\", \">// Natalie Portman's Wikidata ID is Q207478\\n\",\n    \"wdt:P19 ?birthPlace .\", \">// P19 property represents 'place of birth'\\n\",\n    \"?birthPlace wdt:P31 wd:Q30 .\" , \">// Check if the place of birth (Q30 in Wikidata represents 'United States')\\n\"\n  ]\n}\n    "}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37876 is Natalie Portman\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"?portman wdt:P19 ?birthPlace .\",\n    \"?birthPlace wdt:P17 ?country .\",\n    \"?portman wikibase:sense wd:Q37876 .\",\n    \"?country wikibase:sense wd:Q30 .\"\n  ]\n}"}
{"question": "Was Natalie Portman born in the United States?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2400 is Natalie Portman\nkg:5100 is place of birth\nkg:6353 is country\nkg:1050 is United States of America", "response": "{\n  \"query\": [\n    \"?x <http://www.example.org/kg/5100> ?y .\",\n    \"?y <http://www.example.org/kg/6353> <http://www.example.org/kg/1050> .\",\n    \"<http://www.example.org/kg/2400> <http://www.example.org/kg/5100> ?y\"\n  ]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?merylStreep wdt:P31 wd:Q5; \",\n \t\t\"wdt:P40 ?child.\",\n \t\t\"?child wdt:P706 ?order.\",\n \t\t\"FILTER(wdt:P2048 ?merylStreep = \\\"Meryl Streep\\\")\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n     \t\t\t\t\t  \t      \t"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q873 is Meryl Streep\nwdt:P40 is child\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?child wdt:P40 wd:Q873 ; wdt:P569 ?dob .\"\n \t]\n}"}
{"question": "Who is the oldest child of Meryl Streep?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9386 is Meryl Streep\nkg:7223 is child\nkg:3308 is date of birth", "response": "{\n \t\"query\": [\"$child\"]\n \t}\n \t                \t\t"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?show wdt:P31 wd:Q5240896; # instance of television show or series\\n\",\n \t\t\"wdt:P178 wd:Q84535.\" ,\"\\n\"\n \t\t,\"VALUES ?P31 { wd:Q5240896 }\" ,\"\\n\"\n \t\t,\"VALUES ?P178 { wd:Q84535 }\"\n \t]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7725310 is series of creative works\nwdt:P170 is creator\nwd:Q8704 is Walt Disney", "response": "{\n \t\"query\": [\n \t\t\"?tvShow wdt:P31 wd:Q7725310.\",\n \t\t\"?tvShow wdt:P170 wd:Q8704.\"\n \t]\n}"}
{"question": "Which television shows were created by Walt Disney?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is instance of\nkg:2217 is subclass of\nkg:4357 is series of creative works\nkg:2797 is creator\nkg:6368 is Walt Disney", "response": "{\n \t\"query\": [\n \t\t\"?show kg:2797 kg:6368 .\",\n \t\t\"?show kg:4357 ?series .\"\n \t]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q168527.\",\n \t\t\"?president p:P108 ?positionStatement.\",\n \t\t\"?positionStatement ps:P108/wdt:P31 wd:Q14152.\",\n \t\t\"?positionStatement pq:P2937 ?war.\"\n \t]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11817 is Andrew Jackson\nwdt:P607 is conflict", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q11817; wdt:P607 ?conflict.\"\n \t]\n}"}
{"question": "Was U.S. president Jackson involved in a war?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is Andrew Jackson\nkg:6744 is conflict", "response": "{\n  \"query\": [\n    \"?president kg:isPresidentOf kg:UnitedStates .\",\n    \"?president kg:id kg:1132 .\",\n    \"?conflict kg:involvedPerson ?president .\",\n    \"?conflict kg:id kg:6744\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q11485.\", \">// Q11485 is the Wikidata ID for ships, but we need to refine this to specifically target Titanic and its completion date. The correct approach would be to directly query the Titanic entity (wd:Q140) and then find the property that corresponds to its completion date (P2793 - completion date).\",\n    \"?resource wdt:P2793 ?date.\",\n    \"FILTER(?resource = wd:Q140)\" ]}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25173 is Titanic\nwdt:P729 is service entry", "response": "{\n  \"query\": [\n    \"?resource wdt:P512 wd:Q25173.\"\n  ]\n}"}
{"question": "When was the Titanic completed?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2084 is Titanic\nkg:4238 is service entry", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:2084 kg:4238 ?resource . \\n}\"] }"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tesla wdt:P166 ?nobelPrize .\",\n \t\t\"?nobelPrize wdt:P1359 wd:Q208247 .\"\n \t]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9036 is Nikola Tesla\nwdt:P166 is award received\nwd:Q38104 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"?resource wdt:P166 wd:Q38104 .\",\n    \"?resource rdfs:label ?name .\",\n    \"FILTER(?resource = wd:Q9036)\"\n  ]\n}"}
{"question": "Did Tesla win a nobel prize in physics?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9199 is Nikola Tesla\nkg:2395 is award received\nkg:3285 is Nobel Prize in Physics", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9199 kg:2395 ?resource . FILTER (?resource = kg:3285) }\"] }"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q4022758.\"\n \t]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q15149663 is state of Mexico", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q15149663.\"\n \t]\n}"}
{"question": "How many states are in Mexico?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1188 is instance of\nkg:8553 is state of Mexico", "response": "{\n \t\"query\": [\n \t\t\"?state kg:8553 ?mexico.\"\n \t]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P345 \\\"8a6f7d10\\\";\",\n    \"?movie p:P2159 ?production_cost.\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2608065 is The Lego Movie\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"?movie wdt:P2130 ?cost .\",\n    \"?movie wikibase:sense wd:Q2608065 .\"\n  ]\n}"}
{"question": "How much did the Lego Movie cost?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7174 is The Lego Movie\nkg:4576 is cost", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:7174 kg:4576 ?resource }\"] }"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"?item wdt:P86 wd:Q754302.\"\n] }"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q368577 is Harold and Maude\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"?item wdt:P86 ?composer.\",\n    \"?item wdt:P31 wd:Q368577.\"\n  ]\n}"}
{"question": "Who composed the music for Harold and Maude?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5213 is Harold and Maude\nkg:9296 is composer", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?composer WHERE { kg:5213 kg:9296 ?composer . }\"] }"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?city wdt:P1096 ?population; wdt:P31 wd:Q515.\",\n \t \"OPTIONAL { ?otherCity wdt:P1096 ?otherPopulation; wdt:P31 wd:Q515. }\",\n \t \"FILTER (?otherPopulation < ?population || !BOUND(?otherPopulation))\",\n \t \"MINUS { ?otherCity wdt:P1096 ?otherPopulation2 . FILTER (?otherPopulation2 < ?population) }\"\n \t]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?city wdt:P31 wd:Q515 .\",\n \t\t\"?city wdt:P1082 ?population .\"\n \t]\n}"}
{"question": "Which city has the least inhabitants?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3143 is instance of\nkg:9876 is city\nkg:4366 is population", "response": "{\n  \"query\": [\n    \"?city a kg:9876 ;\",\n    \"kg:4366 ?population .\"\n  ]\n} "}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?rhee wdt:P31 wd:Q45286.\",\n    \"?rhee wdt:P20 ?burialPlace.\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171684 is Syngman Rhee\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"?item wdt:P119 ?burialPlace .\",\n    \"?item wdt:P31 wd:Q5 .\",\n    \"?item wdt:P1705 wd:Q171684 .\"\n  ]\n}"}
{"question": "Where is Syngman Rhee buried?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3345 is Syngman Rhee\nkg:9861 is place of burial", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:3345 kg:9861 ?resource . }\"] }"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?neymar wdt:P31 wd:Q4839062.\",\n \t\t\"?neymar wdt:P108 ?team.\",\n \t\t\"?team rdfs:label \\\"Real Madrid\\\"@en.\"\n \t]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q142794 is Neymar\nwdt:P54 is member of sports team\nwd:Q8682 is Real Madrid CF", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P54 wd:Q8682 .\",\n \t\t\"?item wdt:P54 ?team .\",\n \t\t\"FILTER(?item = wd:Q142794)\"\n \t]\n}"}
{"question": "Does Neymar play for Real Madrid?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8232 is Neymar\nkg:5537 is member of sports team\nkg:7777 is Real Madrid CF", "response": "{\n \t\"query\": [\"$neymar\"]\n}\n   \t            \t \t\t"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?book wdt:P1476 \\\"The Pillars of the Earth\\\";\",\n    \"?book wdt:P50 ?author.\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"?book wdt:P50 ?author .\",\n    \"?book wikibase:sameAs wd:Q1163227 .\"\n  ]\n}"}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7222 is The Pillars of the Earth\nkg:7844 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?author WHERE { kg:7222 kg:7844 ?author . }\"] }"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?william wdt:P17,P22 ?parent .\",\n    \"?harry wdt:P17,P22 ?parent .\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P22 is father\nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P25 is mother\nwd:Q36812 is William, Prince of Wales\nwdt:P22 is father\nwd:Q36812 is William, Prince of Wales\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"?williamFather wdt:P22 wd:Q36812 ;\",\n    \"?williamMother wdt:P25 wd:Q36812 ;\",\n    \"?harryFather wdt:P22 wd:Q152316 ;\",\n    \"?harryMother wdt:P25 wd:Q152316 .\"\n  ]\n}"}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0241 is Prince Harry, Duke of Sussex\nkg:9891 is father\nkg:0241 is Prince Harry, Duke of Sussex\nkg:0917 is mother\nkg:3209 is William, Prince of Wales\nkg:9891 is father\nkg:3209 is William, Prince of Wales\nkg:0917 is mother", "response": "{\n  \"query\": [\n    \"?fatherOfHarry kg:9891 kg:0241 .\",\n    \"?motherOfHarry kg:0917 kg:0241 .\",\n    \"?fatherOfWilliam kg:9891 kg:3209 .\",\n    \"?motherOfWilliam kg:0917 kg:3209 .\"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?einstein wdt:P31 wd:Q901. \",\n    \"?einstein wdt:P184 ?doctoral_supervisor. \"\n  ]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P184 is doctoral advisor", "response": "{\n \t\"query\": [\n \t\t\"?supervisor wdt:P184 wd:Q937.\"\n \t]\n}"}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3951 is Albert Einstein\nkg:5112 is doctoral advisor", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?supervisor WHERE { kg:3951 kg:5112 ?supervisor }\"] }"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?breakingBad wdt:P31 wd:Q5320489.\",\n    \"?gameOfThrones wdt:P31 wd:Q5320489.\",\n    \"?breakingBad wdt:P495 ?episodesBreakingBad.\",\n    \"?gameOfThrones wdt:P495 ?episodesGameOfThrones.\",\n    \"FILTER(?episodesBreakingBad > ?episodesGameOfThrones)\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Breaking Bad\nwdt:P1113 is number of episodes\nwd:Q23572 is Game of Thrones\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"?breakingBad wdt:P1113 ?bbEpisodes .\",\n    \"?gameOfThrones wdt:P1113 ?gotEpisodes .\",\n    \"{?bbEpisodes > ?gotEpisodes}\",\n    \"FILTER(?breakingBad = wd:Q1079 && ?gameOfThrones = wd:Q23572)\"\n  ]\n}"}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7410 is Breaking Bad\nkg:4526 is number of episodes\nkg:6491 is Game of Thrones\nkg:4526 is number of episodes", "response": "{\n  \"query\": [\n    \"?breakingBad kg:4526 ?bbEpisodes .\",\n    \"?gameOfThrones kg:4526 ?gotEpisodes .\",\n    \"{?bbEpisodes xsd:int(?bbEpisodes) > xsd:int(?gotEpisodes)}\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?vanGogh wdt:P1358 ?inspiration .\",\n    \"?vanGogh rdfs:label \\\"Vincent van Gogh\\\"@en .\"\n  ]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5582 is Vincent van Gogh\nwdt:P737 is influenced by", "response": "{\n \t\"query\": [\n \t\t\"?influence wdt:P737 wd:Q5582.\"\n \t]\n}"}
{"question": "Who was Vincent van Gogh inspired by?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4487 is Vincent van Gogh\nkg:9725 is influenced by", "response": "{\n  \"query\": [\n    \"?influencer kg:9725 kg:4487 .\"\n  ]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?building wdt:P31 wd:Q41176852; # Instance of building/skyscraper/etc., adjust as necessary for specificity\",\n \t\t\"wdt:P2039 ?floorsCount;\",\n \t\t\"FILTER(?floorsCount > 163)\", \"># Burj Khalifa has 163 floors, so we filter buildings with more floors. Adjust the class and property if needed based on Wikidata's actual structure.\"\n \t\t,\n \t\t\"MINUS {\",\n \t\t\"?building wdt:P1509 wd:Q178124.\",\"># Exclude Burj Khalifa itself\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12495 is Burj Khalifa\nwdt:P1101 is floors above ground\nwdt:P1101 is floors above ground", "response": "{\n \t\"query\": [\n \t\t\"?building wdt:P1101 ?floors .\",\n \t\t\"?building wdt:P361 wd:Q12495 ;\",\n \t\t\"FILTER(?floors > 0) .\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1982 is Burj Khalifa\nkg:1365 is floors above ground\nkg:1365 is floors above ground", "response": "{\n \t\"query\": [\"$building\"]\n \t}\n \t                \t\t"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?pulp_fiction wdt:P1477 ?title .\",\n    \"FILTER(CONTAINS(?title, \\\"Pulp Fiction\\\")) .\",\n    \"?pulp_fiction p:P2158/psn:P2158 ?production_cost .\"\n  ]\n}"}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q104123 is Pulp Fiction\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n    \"?movie wdt:P2130 ?cost.\",\n    \"{?movie rdfs:label \\\"Pulp Fiction\\\"@en.} UNION\",\n    \"{?movie wdtn:P1476 \\\"Pulp Fiction\\\"@en.} UNION\",\n    \"{?movie wdt:P1476 wd:Q104123.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "How much did Pulp Fiction cost?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8346 is Pulp Fiction\nkg:1348 is cost", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:8346 kg:1348 ?resource . }\"] }"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?proinsulin wdt:P31 wd:Q8054.\",\n    \"?proinsulin wdt:P703 wd:Q15978631.\"\n  ]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q426173 is proinsulin\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8054 is protein", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31/wdt:P279* wd:Q8054 .\",\n \t\t\"?item wdt:P279* wd:Q426173 .\"\n \t]\n}"}
{"question": "Is proinsulin a protein?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0193 is proinsulin\nkg:6381 is instance of\nkg:3035 is subclass of\nkg:2583 is protein", "response": "{\n  \"query\": [\n    \"?x kg:0193 ?proinsulin.\",\n    \"?protein kg:2583 ?x.\",\n    \"{?proinsulin kg:6381 ?protein.} UNION {?proinsulin kg:3035+ ?protein.}\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?urdu wdt:P2186 ?commonRoot .\",\n    \"?persian wdt:P2186 ?commonRoot .\"\n  ]\n}"}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1617 is Urdu\nwdt:P279 is subclass of\nwd:Q9168 is Persian\nwdt:P279 is subclass of", "response": "{\n \t\"query\": [\n \t\t\"?urdu wdt:P279* ?commonRoot .\",\n \t\t\"?persian wdt:P279* ?commonRoot .\"\n \t]\n}\n  \t\t\t\t\t  \t      \t \t "}
{"question": "Do Urdu and Persian have a common root?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9687 is Urdu\nkg:9521 is subclass of\nkg:7561 is Persian\nkg:9521 is subclass of", "response": "{\n  \"query\": [\n    \"?x kg:subclass_of kg:9687 .\",\n    \"?x kg:subclass_of kg:7561\"\n  ]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P161 ?star.\",\n \t\t\"?movie wdt:P57 ?producer.\",\n \t\t\"?producer rdfs:label 'Benicio del Toro'@en.\",\n \t\t\"?movie wdt:P364 wd:Q29888. # Q29888 is the Wikidata ID for Spanish language\"\n \t]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q193668 is Benicio del Toro\nwdt:P495 is country of origin\nwd:Q29 is Spain\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424;\",\n \t\t\"?movie wdt:P162 wd:Q193668;\",\n \t\t\"?movie wdt:P495 wd:Q29;\",\n \t\t\"?movie wdt:P161 ?star.\"\n \t]\n}"}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5537 is instance of\nkg:1197 is film\nkg:3789 is producer\nkg:7757 is Benicio del Toro\nkg:8501 is country of origin\nkg:8199 is Spain\nkg:0642 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:3789 kg:7757 .\",\n \t\t\"?movie kg:8501 kg:8199 .\",\n \t\t\"?movie a kg:1197 .\",\n \t\t\"?star kg:0642 ?movie .\"\n \t]\n}"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?baikal wdt:P31 wd:Q2340896; # Instance of lake, Lake Baikal\\n\",\n    \"?greatBearLake wdt:P31 wd:Q2340896; # Instance of lake, Great Bear Lake\\n\",\n    \"?baikal wdt:P2046 ?areaBaikal; # Area of Lake Baikal\\n\",\n    \"?greatBearLake wdt:P2046 ?areaGreatBearLake. # Area of Great Bear Lake\\n\"\n  ]\n}\n    \t\t\t\t\t\t  \t\t\t\t\t\t \t"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5513 is Lake Baikal\nwdt:P2046 is area\nwd:Q5525 is Great Bear Lake\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"?baikalArea\",\n    \"?greatBearLakeArea\"\n  ]\n  }\n \t            \t \t  \t"}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4738 is Lake Baikal\nkg:3598 is area\nkg:5245 is Great Bear Lake\nkg:3598 is area", "response": "{\n  \"query\": [\n    \"?areaBaikal <- kg:4738 kg:3598 ?areaBaikal .\",\n    \"?areaBear <- kg:5245 kg:3598 ?areaBear .\",\n    \"{?areaBaikal > ?areaBear}\"\n  ]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?book wdt:P800 wd:Q7105;\", \">// Q7105 is the Wikidata ID for Asimov's Foundation series, P800 indicates it is part of a series or collection of works. However, please note that this property might not be accurate for all cases and should be verified against the latest Wikidata schema or properties used for literary series representation. For more precise queries, additional qualifiers or properties may need to be considered based on how data is structured in Wikidata at the time of query execution.\"\n \t\t,\"?book a wd:Q4730912\" , \">// Q4730912 represents 'Book' as an entity type in Wikidata. This line ensures that only books are returned.\"\n \t\t,\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1564644 is Foundation series\nwdt:P527 is has part(s)", "response": "{\n \t\"query\": [\n \t\t\"?series wdt:P31 wd:Q1564644.\",\n \t\t\"?book wdt:P527 ?series.\"\n \t]\n}"}
{"question": "Show me all books in Asimov's Foundation series.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7758 is Foundation series\nkg:4983 is has part(s)", "response": "{\n \t\"query\": [\"$book\"]\n \t}\n \t                \t\t"}
{"question": "Where was Bach born?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?subject wdt:P31 wd:Q5.\",\n    \"?subject rdfs:label \\\"Johann Sebastian Bach\\\"@en.\",\n    \"?subject wdt:P19 ?birthPlace.\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1339 is Johann Sebastian Bach\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"?placeOfBirth wdt:P19 wd:Q1339 .\"\n  ]\n}"}
{"question": "Where was Bach born?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9729 is Johann Sebastian Bach\nkg:2247 is place of birth", "response": "{\n  \"query\": [\n    \"?resource kg:2247 kg:9729 .\"\n  ]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?city wdt:P31 wd:Q51074; # instance of city or town (metro systems are associated with cities/towns) \\n\",\n \t \"wdt:P241 ?metro; # has metro system\\n\",\n \t \"?metro wdt:P571 ?inception. # inception date of the metro\\n\",\n \t \"OPTIONAL { ?otherCity wdt:P31 wd:Q51074; # other city or town\\n\",\n \t \"wdt:P241 ?otherMetro;\\n\",\n \t \"?otherMetro wdt:P571 ?otherInception. }\\n\",\n \t \"FILTER (?inception < ?otherInception || !BOUND(?otherInception))\\n\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5503 is rapid transit\nwdt:P571 is inception\nwdt:P131 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"?metro wdt:P31 wd:Q5503.\",\n \t\t\"?metro wdt:P571 ?inception.\",\n \t\t\"?metro wdt:P131 ?city.\"\n \t]\n}"}
{"question": "Which city has the oldest running metro?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9312 is instance of\nkg:2195 is rapid transit\nkg:4613 is inception\nkg:2724 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\n \t\t\"?metro kg:9312 kg:2195 .\",\n \t\t\"?metro kg:4613 ?inception .\",\n \t\t\"?city kg:2724 ?metro .\"\n \t]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?brooklynBridge wdt:P1365 wd:Q42879;\",\n    \"?brooklynBridge wdt:P170 ?designer.\"\n  ]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P287 is designed by", "response": "{\n \t\"query\": [\n \t\t\"?designer wdt:P287 wd:Q125006.\"\n \t]\n}"}
{"question": "Who designed the Brooklyn Bridge?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0242 is Brooklyn Bridge\nkg:9045 is designed by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?designer WHERE { kg:0242 kg:9045 ?designer . }\"] }"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P1082 ?population ;\",\n \t\t\"wdt:P31 wd:Q510704.\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5401 is Eurasia\nwdt:P1082 is population", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P1082 ?population .\",\n \t\t\"?resource wdt:P31 wd:Q5401 .\"\n \t]\n}"}
{"question": "How many people live in Eurasia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Eurasia\nkg:7501 is population", "response": "{\n  \"query\": [\n    \"?resource kg:7501 ?population .\",\n    \"?resource kg:8473 kg:Eurasia .\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?melbourne wdt:P18 ?population ;\",\n    \"wdt:P131 wd:Q29756 .\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q949779 is Melbourne\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"?melbourne wdt:P1082 ?population .\",\n    \"FILTER(?melbourne = wd:Q949779)\"\n  ]\n}"}
{"question": "What is the total population of Melbourne, Florida?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6378 is Melbourne\nkg:3570 is population", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:6378 kg:3570 ?resource . }\"] }"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P17 ?country .\",\n \t\t\"?mountain rdfs:label \\\"Mount Everest\\\"@en .\"\n \t]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q513 is Mount Everest\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P17 ?country .\",\n \t\t\"?item wdt:P625 wd:Q513 .\"\n \t]\n}"}
{"question": "What country is Mount Everest in?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6089 is Mount Everest\nkg:8406 is country", "response": "{\n  \"query\": [\n    \"?mountEverest kg:8406 ?country .\",\n    \"FILTER (?mountEverest = kg:6089)\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?painting wdt:P180 wd:Q46592;\",\n              \"?painting wdt:P170 ?artist.\",\n              \"?artist wdt:P108 ?artisticMovement.\"\n  ]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3235867 is The Three Dancers\nwdt:P170 is creator\nwdt:P135 is movement", "response": "{\n \t\"query\": [\n \t\t\"?painting wdt:P170 ?artist.\",\n \t\t\"?artist wdt:P135 ?movement.\",\n \t\t\"?painting wikibase:exactMatch wd:Q3235867.\"\n \t]\n}"}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2470 is The Three Dancers\nkg:6531 is creator\nkg:8386 is movement", "response": "{\n \t\"query\": [\"$painter\"]\n \t}\n \t                \t\t"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?operationOverlord wdt:P31 wd:Q827540 ;\",\n    \"wdt:P39 ?commencementDate .\"\n  ]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8641370 is Operation Overlord\nwdt:P580 is start time", "response": "{\n \t\"query\": [\n \t\t\"?operationOverlord wdt:P580 ?startTime .\",\n \t\t\"?operationOverlord wikibase:wikiLink wd:Q8641370 .\"\n \t]\n}"}
{"question": "When did Operation Overlord commence?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2567 is Operation Overlord\nkg:0436 is start time", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    ?resource kg:0436 ?startTime . \\n    FILTER (?resource = kg:2567) \\n}\"] }"}
{"question": "What is the bridge with the longest span?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the bridge with the longest span?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?bridge wdt:P31 wd:Q4802567; # Instance of bridge\\n\",\n \t\t\"wdt:P2049 ?spanLength.\\n\", \"># Has longest span length\\n\",\n \t\t\"OPTIONAL {\\n\",\n \t\t\"  ?otherBridge wdt:P31 wd:Q4802567;\\n\",\n \t\t\"              wdt:P2049 ?otherSpanLength .\\n\",\n \t\t\"}\\n\",\n \t\t\"FILTER (?spanLength > ?otherSpanLength || !BOUND(?otherSpanLength))\\n\",\n \t\t\"?bridge\"\n \t]\n}"}
{"question": "Is there a video game called Battle Chess?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is there a video game called Battle Chess?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource\"\n \t]\n }\n \t            \t \t  \t"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?pyramid wdt:P186 ?buried.\",\n \t\t\"?pyramid rdfs:label \\\"Great Pyramid of Giza\\\"@en.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P119 is place of burial\nwd:Q3411252 is Pyramid G1-a", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P119 wd:Q3411252 .\"\n \t]\n}"}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8446 is place of burial\nkg:5206 is Pyramid G1-a", "response": "{ \"query\": [\"@subject kg:8446 kg:5206 .\"] }"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?socrates wdt:P854 ?aristotle .\",\n    \"?socrates rdfs:label ?socratesLabel .\",\n    \"?aristotle rdfs:label ?aristotleLabel .\",\n    \"FILTER (LANG(?socratesLabel) = 'en') .\",\n    \"FILTER (LANG(?aristotleLabel) = 'en') .\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q868 is Aristotle\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"?influence wdt:P737 wd:Q913 .\",\n    \"?influence wdt:P2860 wd:Q868\"\n  ]\n}"}
{"question": "Did Socrates influence Aristotle?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3713 is Aristotle\nkg:3382 is influenced by\nkg:4528 is Socrates", "response": "{\n  \"query\": [\n    \"?influence\",\n    \"WHERE\",\n    \"{\",\n    \"kg:3713 kg:3382 ?influence .\",\n    \"FILTER(?influence = kg:4528)\",\n    \"}\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?benjaminFranklin wdt:P31 wd:Q4839027.\",\n    \"?benjaminFranklin wdt:P40 ?child.\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34969 is Benjamin Franklin\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"?child wdt:P40 wd:Q34969 .\"\n  ]\n}"}
{"question": "How many children did Benjamin Franklin have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Benjamin Franklin\nkg:3793 is child", "response": "{\n  \"query\": [\n    \"?child kg:3793 kg:3786 .\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P184 wd:Q23095; # Michael Jordan's entity ID is Q23095, P184 indicates the property of 'height of a person' but for accuracy in Wikidata, we use P2048 which stands for height\"\n    ,\n    \"?person wdt:P2048 ?height.\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41421 is Michael Jordan\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q41421\",\n    \"wdt:P2048\"\n  ]\n}"}
{"question": "How tall is Michael Jordan?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4261 is Michael Jordan\nkg:0068 is height", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:4261 kg:0068 ?resource . \\n}\"] }"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mi6 wdt:P31 wd:Q482570.\",\n \t\t\"?mi6 wdt:P196 ?headquarters.\",\n \t\t\"?headquarters wdt:P131* ?ukCity.\"\n \t]\n}\n   \t\t\t\t\t \t  \t      "}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q184560 is Secret Intelligence Service\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\"query\": [\n \t\t\"?mi6 wdt:P159 ?headquartersLocation .\",\n \t\t\"?mi6 wdt:P31 wd:Q184560 .\",\n \t\t\"?headquartersLocation wdt:P31 wd:Q515 .\"\n \t]\n}"}
{"question": "In which UK city are the headquarters of the MI6?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1223 is Secret Intelligence Service\nkg:2929 is headquarters location\nkg:9030 is instance of\nkg:4329 is city", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1223 kg:2929 ?resource . ?resource kg:9030 kg:4329 . }\"] }"}
{"question": "Who created Family Guy?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P278 wd:Q130956.\",\n    \"{?creator rdfs:label ?label. FILTER (LANG(?label) = \\\"en\\\") }\"\n  ]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5930 is Family Guy\nwdt:P170 is creator", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P170 wd:Q5930.\"\n \t]\n}"}
{"question": "Who created Family Guy?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0871 is Family Guy\nkg:4258 is creator", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?creator WHERE { kg:0871 kg:4258 ?creator . }\"] }"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?elvis wdt:P4 Parents ?child .\",\n \t\t\"?child wdt:P4 Parents ?grandchild .\",\n \t\t\"?elvis rdfs:label \\\"Elvis Presley\\\"@en .\"\n \t]\n}\n    "}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"?grandchild wdt:P40 ?child.\",\n \t\t\"?child wdt:P40 wd:Q303.\"\n \t]\n}"}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is Elvis Presley\nkg:5388 is child\nkg:5388 is child", "response": "{\n \t\"query\": [\"$grandchild\"]\n \t}\n \t                \t\t"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mingDynasty wdt:P31 wd:Q5298; # Identify the Ming Dynasty as an instance of dynasty (Q5298 is a placeholder for demonstration purposes, actual ID may vary based on Wikidata's structure at the time of query execution)\\n\",\n    \"wdt:P576 ?dissolutionDate.\" ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9903 is Ming dynasty\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"?resource wdt:P576 ?date .\",\n    \"?resource wdt:P31 wd:Q9903 .\"\n  ]\n}"}
{"question": "When did the Ming dynasty dissolve?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4661 is Ming dynasty\nkg:6940 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"?resource kg:6940 ?date .\",\n    \"?resource kg:id 'kg:4661' .\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?lawrence_of_arabia wdt:P31 wd:Q5.\",\n    \"?lawrence_of_arabia rdfs:label \\\"T.E. Lawrence\\\"@en.\",\n    \"?lawrence_of_arabia p:P87 ?military_conflict_statement.\",\n    \"?military_conflict_statement ps:P87 ?conflict_resource.\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170596 is T. E. Lawrence\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"?conflict wdt:P607 wd:Q170596 .\"\n  ]\n}"}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3636 is T. E. Lawrence\nkg:6895 is conflict", "response": "{\n  \"query\": [\n    \"?participation kg:6895 ?conflict .\",\n    \"kg:3636 ?participation ?conflict .\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?sanPedroAtacama wdt:P17 wd:Q5489; # Country is Chile (as an example to specify the location, since San Pedro de Atacama is in Chile but this might not be enough for timezone determination alone without more specific properties available on Wikidata at the moment) \",\n    \"?sanPedroAtacama wdt:P421 ?timezoneResource.\"\n  ]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187893 is San Pedro de Atacama\nwdt:P421 is located in time zone", "response": "{\n \t\"query\": [\n \t\t\"?timezone wdt:P421 wd:Q187893.\"\n \t]\n}"}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7559 is San Pedro de Atacama\nkg:1880 is located in time zone", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    kg:7559 kg:1880 ?resource .\\n}\"] }"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?bruce_carver wdt:P31 wd:Q5; \",\n    \"wdt:P1287 ?cause_of_death.\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4977246 is Bruce Carver\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"?causeOfDeath\",\n    \"WHERE\",\n    \"{\",\n    \"  wd:Q4977246 wdt:P509 ?causeOfDeath .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Bruce Carver die from?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2845 is Bruce Carver\nkg:5174 is cause of death", "response": "{\n  \"query\": [\n    \"?resource kg:p5174 kg:2845 .\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?deathPlace wdt:P20 wd:Q94 ;\",\n    \"wdt:P856 ?website .\"\n  ]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"?deathPlace wdt:P856 ?website .\",\n \t\t\"wd:Q91 wdt:P20 ?deathPlace .\"\n \t]\n}"}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1907 is Abraham Lincoln\nkg:3231 is place of death\nkg:6446 is official website", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?website WHERE { kg:1907 kg:3231 ?deathPlace . ?deathPlace kg:6446 ?website . }\"] }"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?elvis_presley wdt:P31 wd:Q5; \",\n    \"wdt:P725 ?children .\"\n  ]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"?child wdt:P40 wd:Q303.\"\n \t]\n}"}
{"question": "Did Elvis Presley have children?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5360 is Elvis Presley\nkg:0568 is child", "response": "{\n \t\"query\": [\"$child\" ]\n \t}\n \t"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?michelle wdt:P26 ?barack .\",\n    \"?barack rdfs:label ?name .\",\n    \"FILTER(LANG(?name) = 'en') .\",\n    \"FILTER(CONTAINS(LCASE(?name), 'barack obama')) .\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwd:Q13133 is Michelle Obama", "response": "{\n  \"query\": [\n    \"?item wdt:P26 wd:Q13133 .\",\n    \"?item wdt:P31 wd:Q5 .\", \">// Ensure the item is a human for more specificity, though not explicitly asked in the question transformation to SPARQL query context might imply this as useful information for filtering relevant spouses (Michelle Obama being a person/spouse of Barack Obama). However, strictly based on provided instruction and without additional assumptions beyond given entities and properties, it would be simplified as below. Corrected version focusing solely on the relationship as per instructions is directly below next line comment. \",\n    \"// Simplified strictly based on provided instruction: ?item wdt:P26 wd:Q13133 .\"\n  ]\n}"}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7320 is Barack Obama\nkg:3323 is spouse\nkg:0032 is Michelle Obama", "response": "{\n  \"query\": [\n    \"?x ?p kg:7320 .\",\n    \"FILTER (?p = kg:3323)\",\n    \"?y ?q ?x .\",\n    \"FILTER (?q = kg:3323)\",\n    \"FILTER (?y = kg:0032)\"\n  ]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?song wdt:P31 wd:Q570892;\", \">// Q570892 is the Wikidata ID for 'Song' (item type for songs in Wikidata). This line checks if the entity is a song. However, to directly find the song \" ,\n    \"  ?song rdfs:label \\\"Hotel California\\\"@en;\",\n    \"  ?song wdt:P57 ?resource.\",\n    \"}\"\n] }"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q780394 is Hotel California\nwdt:P86 is composer", "response": "{\n \t\"query\": [\n \t\t\"?song wdt:P86 ?composer .\",\n \t\t\"?song wikibase:sense wd:Q780394 .\"\n \t]\n}"}
{"question": "Who wrote the song Hotel California?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7168 is Hotel California\nkg:0509 is composer", "response": "{ \"query\": [\"SELECT ?composer WHERE { kg:7168 kg:0509 ?composer . }\"] }"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q16 wd:P36 ?capital .\",\n    \"}\"]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"?capital wdt:P36 wd:Q16 .\"\n  ]\n}"}
{"question": "What is the capital of Canada?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0044 is Canada\nkg:5651 is capital", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:0044 kg:5651 ?resource . \\n}\"] }"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tel_aviv wdt:P31 wd:Q5104; # Q5104 is the ID for Tel Aviv-Yafo in Wikidata\\n\",\n \t\t\"wdt:P6257 ?mayor.\" ,\n \t\t\"?mayor wdt:P31 wd:Q5 .\" ,\n \t\t\"{SELECT ?tel_aviv WHERE { ?tel_aviv wdt:P31 wd:Q5104 }} \"\n \t]\n}\n   \t"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33935 is Tel Aviv\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?mayor wdt:P6 wd:Q33935 .\"\n \t]\n}"}
{"question": "Who is the mayor of Tel Aviv?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6114 is Tel Aviv\nkg:1344 is head of government", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?mayor WHERE {\\n  kg:6114 kg:1344 ?mayor .\\n}\"] }"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?russia wdt:P31 wd:Q159; \",\n    \"wdt:P37 ?governmentForm.\",\n    \"?governmentForm wdt:P279* wd:Q40863.\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q159 is Russia\np:P122 is basic form of government\nps:P122 is basic form of government\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"?item p:P122 ?statement .\",\n    \"?statement ps:P122 ?governmentForm .\",\n    \"?statement pq:P582 ?endTime .\",\n    \"wd:Q159 wdt:P31 wd:Q6256 .\"\n  ]\n}"}
{"question": "What form of government does Russia have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0251 is Russia\nkg:2654 is basic form of government\nkg:5180 is basic form of government\nkg:6647 is end time", "response": "{\n  \"query\": [\n    \"?x <http://www.example.org/kg/2654> <http://www.example.org/kg/0251> .\"\n  ]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?colombia wdt:P31 wd:Q6256 ; # Identify Colombia as an instance of country (Q6256 represents Country in Wikidata) \\n\",\n \t\t\"wdt:P37 ?language . # Find languages spoken in Colombia (P37 is the property for national language)\\n\",\n \t\t\"?language wdt:P31 wd:Q30488. # Ensure that the found items are instances of Languages (Q30488 represents Language in Wikidata)\"\n \t]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q739 is Colombia\nwdt:P31 is instance of\nwd:Q34770 is language", "response": "{\n \t\"query\": [\n \t\t\"?language wdt:P31 wd:Q34770 .\",\n \t\t\"?language wdt:P2958 wd:Q739 .\"\n \t]\n}"}
{"question": "How many languages are spoken in Colombia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4761 is Colombia\nkg:0115 is instance of\nkg:2850 is language", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n    kg:4761 kg:0115 kg:2850 ;\\n             ?predicate ?resource.\\n}\"] }"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?czechRepublic wdt:P31 wd:Q35294 .\",\n    \"?czechRepublic wdt:P38 ?currency .\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213 is Czech Republic\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"?currency wdt:P38 wd:Q213 .\"\n  ]\n}"}
{"question": "What is the currency of the Czech Republic?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3424 is Czech Republic\nkg:7065 is currency", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:3424 kg:7065 ?resource . \\n}\"] }"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?becker wdt:P31 wd:Q5; # Boris Becker is an instance of human\",\n    \"       rdfs:label ?name过滤掉; # Label for name, but we don't need to return this\",\n    \"       wdt:P1647 ?endOfCareer.\" ]\n  }\n  "}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76334 is Boris Becker\np:P106 is occupation\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"?end_time\",\n    \"WHERE\",\n    \"{\",\n    \"  wd:Q76334 p:P106 ?statement .\",\n    \"  ?statement pq:P582 ?end_time .\",\n    \"}\"\n  ]\n}"}
{"question": "When did Boris Becker end his active career?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is Boris Becker\nkg:4499 is occupation\nkg:7835 is end time", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"<http://example.org/kg/8519> <http://example.org/kg/7835> ?x .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?film wdt:P161 wd:Q25084; # Julia Roberts in film\\n\",\n \t \"wdt:P161 wd:Q37999.\" ,\"\\n\"\n \t\t]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q48410 is Richard Gere\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P161 wd:Q48410.\",\n \t\t\"?film wdt:P161 wd:Q40523.\"\n \t]\n}"}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1148 is instance of\nkg:8130 is film\nkg:2065 is cast member\nkg:3669 is Richard Gere\nkg:2065 is cast member\nkg:8913 is Julia Roberts", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2065 kg:3669 .\",\n \t\t\"?film kg:2065 kg:8913 .\",\n \t\t\"?film kg:8130 ?type .\"\n \t]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$autobiography$\"] }\n   \t \t\t\t\t\t  \t      \t"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q23434 is Ernest Hemingway\nwdt:P136 is genre\nwd:Q4184 is autobiography", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P50 wd:Q23434 .\",\n \t\t\"?resource wdt:P136 wd:Q4184 .\"\n \t]\n}"}
{"question": "Show me Hemingway's autobiography.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8102 is author\nkg:6083 is Ernest Hemingway\nkg:1624 is genre\nkg:6727 is autobiography", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?borough wdt:P131 wd:Q60 ;\",\n    \"wdt:P31/wdt:P279* wd:Q515 .\"\n  ]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q408804 is borough of New York City", "response": "{\n \t\"query\": [\n \t\t\"?borough wdt:P31 wd:Q408804.\"\n \t]\n}"}
{"question": "What are the five boroughs of New York?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4033 is instance of\nkg:0913 is borough of New York City", "response": "{\n \t\"query\": [\n \t\t\"?borough kg:0913 <http://dbpedia.org/resource/New_York_City> .\"\n \t]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?ganges wdt:P927 ?sourceCountry.\"\n \t]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5089 is Ganges\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?origin wdt:P885 wd:Q5089;\",\n \t\t\"?origin wdt:P17 ?country.\"\n \t]\n}"}
{"question": "In which country does the Ganges start?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3043 is Ganges\nkg:5904 is origin of the watercourse\nkg:1545 is country", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> . SELECT ?country WHERE { kg:3043 kg:5904 ?origin . ?origin kg:1545 ?country . }\"] }"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?penguinBooks wdt:P31 wd:Q4832056.\",\n    \"?founder wdt:P108 ?penguinBooks.\",\n    \"{?founder wdt:P31 wd:Q5.} UNION {?founder wdt:P31 wd:Q721.\"\n  ]\n}\n  \t\t            \t \t\t"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1336200 is Penguin Books\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q1336200.\"\n \t]\n}"}
{"question": "Who is the founder of Penguin Books?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8226 is Penguin Books\nkg:5203 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?x kg:5203 kg:8226 .\"\n \t]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?theme wdt:P86 wd:Q207504.\",\n    \"?theme wdt:P31 wd:Q728911.\"\n  ]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23572 is Game of Thrones\nwdt:P86 is composer", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P86 wd:Q23572.\"\n \t]\n}"}
{"question": "Who wrote the Game of Thrones theme?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4662 is Game of Thrones\nkg:5725 is composer", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:4662 kg:5725 ?resource . }\"] }"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?president wdt:P39 wd:Q11694 ;\",\n    \"wdt:P31 wd:Q5 .\"\n  ]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q986 is Eritrea\nwdt:P35 is head of state", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P35 wd:Q986 .\"\n \t]\n}"}
{"question": "Who is the president of Eritrea?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3708 is Eritrea\nkg:4028 is head of state", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?president WHERE {\\n  kg:3708 kg:4028 ?president .\\n}\"] }"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ; # Instance of mountain or peak (Q8502 is the Wikidata ID for \"]}\n"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P30 is continent\nwd:Q3960 is Australian continent\nwdt:P2044 is elevation above sea level", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?mountain wdt:P31 wd:Q8502 ;\",\n \t    \t        \t\t\"?mountain wdt:P30 wd:Q3960 ;\",\n \t    \t        \t\t\"?mountain wdt:P2044 ?elevation .\"\n \t                \t]\n}"}
{"question": "What is the highest mountain in Australia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4685 is instance of\nkg:5080 is mountain\nkg:1335 is continent\nkg:6341 is Australian continent\nkg:1463 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:5080 ?type .\",\n \t\t\"?mountain kg:4685 kg:5080 .\",\n \t\t\"?mountain kg:1463 ?elevation .\",\n \t\t\"?mountain kg:6341 kg:1335 .\",\n \t\t\"FILTER (kg:6341 = kg:1335)\"\n \t]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q486972; # instance of currency\\n\",\n    \"wdt:P17 wd:Q148 .\" ,\"\\n\",\n    \"?resource rdfs:label ?label .\\n\",\n    \"{ hint:Prior hint:rangeSafe true }\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q148 is People's Republic of China\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"?currency\",\n    \"WHERE\",\n    \"{\",\n    \"  wd:Q148 wdt:P38 ?currency .\",\n    \"}\"\n  ]\n}"}
{"question": "Give me the currency of China.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1520 is People's Republic of China\nkg:8265 is currency", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:1520 kg:8265 ?resource . \\n}\"] }"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n             \t\t,\"SELECT ?resource WHERE {\"\n             \t\t\t,\"?resource wdt:P106 wd:Q239458 .\"\n             \t\t\t,\"?resource wdt:P27 wd:Q34 .\" ]}\n \t\t"}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation\nwd:Q3546255 is oceanographer", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P27 wd:Q34 .\",\n \t\t\"?person wdt:P106 wd:Q3546255 .\"\n \t]\n}\n    "}
{"question": "Give me all Swedish oceanographers.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9026 is country of citizenship\nkg:8563 is Sweden\nkg:2886 is occupation\nkg:6380 is oceanographer", "response": "{\n \t\"query\": [\n \t\t\"?person kg:2886 kg:6380 .\",\n \t\t\"?person kg:9026 kg:8563 .\"\n \t]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?tomHanks wdt:P26 ?ritaWilson .\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse\nwd:Q234144 is Rita Wilson", "response": "{\n  \"query\": [\n    \"?item wdt:P26 wd:Q234144 .\",\n    \"FILTER (?item = wd:Q2263)\"\n  ]\n}"}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is Tom Hanks\nkg:8992 is spouse\nkg:6150 is Rita Wilson", "response": "{\n  \"query\": [\n    \"?x kg:8992 kg:6150 .\",\n    \"kg:3108 kg:8992 ?x .\"\n  ]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P361 ?language .\",\n \t\t\"?language rdfs:label \\\"Japanese\\\"@en .\"\n \t]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language\nwd:Q5287 is Japanese", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256.\",\n \t\t\"?country wdt:P37 wd:Q5287.\"\n \t]\n}"}
{"question": "In which countries do people speak Japanese?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is instance of\nkg:4094 is country\nkg:2472 is official language\nkg:1348 is Japanese", "response": "{\n \t\"query\": [\n \t\t\"?country kg:2472 kg:1348 .\",\n \t\t\"?country kg:0335 kg:4094 .\"\n \t]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?museum wdt:P31 wd:Q5892476; # Instance of museum in New York, Q5892476 is the Wikidata ID for 'Museum in New York City' but you might need to adjust this based on actual data structure or use a more general approach and filter by location. \\n\",\n \t \"?museum wdt:P151 wd:Q60; # Located in New York, Q60 is the Wikidata ID for 'New York'\\n\",\n \t \"?museum wdt:P1364 ?visitors; # Number of visitors\\n\",\n \t \"OPTIONAL { ?otherMuseum wdt:P31 wd:Q5892476; \\n\",\n \t \"wdt:P151 wd:Q60;\\n\",\n \t \"wdt:P1364 ?otherVisitors .\\n\",\n \t \"?visitors wdt:P2192 ?otherVisitors } # Greater than or equal to the number of visitors for other museums\\n\",\n \t \"}\\n\"\n \t]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P159 is headquarters location\nwd:Q60 is New York City\nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P1174 is visitors per year", "response": "{\n \t\"query\": [\n \t\t\"?museum wdt:P31 wd:Q33506 ;\",\n \t\t\"wdt:P159 wd:Q60 ;\",\n \t\t\"wdt:P1174 ?visitors .\"\n \t]\n}"}
{"question": "Which museum in New York has the most visitors?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2365 is headquarters location\nkg:7693 is New York City\nkg:0004 is instance of\nkg:4808 is museum\nkg:6753 is visitors per year", "response": "{\n \t\"query\": [\n \t\t\"?museum kg:0004 kg:4808; \",\n \t\t\"?museum kg:2365 kg:7693; \",\n \t\t\"?museum kg:6753 ?visitors .\"\n \t]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?album wdt:P800 wd:Q14596. ?album wdt:P31 wd:Q10842379.\"\n \t]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q15862 is Queen\nwdt:P577 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?album wdt:P31 wd:Q482994 ;\",\n \t\t\"?album wdt:P175 wd:Q15862 ;\",\n \t\t\"?album wdt:P577 ?date .\"\n \t]\n}"}
{"question": "What was the first Queen album?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1183 is instance of\nkg:2574 is album\nkg:4363 is performer\nkg:7570 is Queen\nkg:8676 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?album kg:4363 kg:7570 .\",\n \t\t\"?album kg:2574 ?albumName .\",\n \t\t\"?album kg:8676 ?publicationDate .\"\n \t]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P161 wd:Q23085.\",\n    \"?movie wdt:P577 ?releaseDate.\",\n    \"OPTIONAL {\",\n      \"?laterMovie wdt:P161 wd:Q23085;\",\n                  \"wdt:P577 ?laterReleaseDate.\",\n      \"FILTER(?laterReleaseDate > ?releaseDate)\",\n    \"}\",\n    \"FILTER(!BOUND(?laterReleaseDate))\",\n    \"{?movie}\"\n  ]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q103894 is Alec Guinness\nwdt:P577 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424 .\",\n \t\t\"?movie wdt:P161 wd:Q103894 .\",\n \t\t\"?movie wdt:P577 ?publicationDate .\"\n \t]\n}"}
{"question": "What was the last movie with Alec Guinness?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2886 is instance of\nkg:3087 is film\nkg:8937 is cast member\nkg:7063 is Alec Guinness\nkg:6539 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:8937 kg:7063 .\",\n \t\t\"?movie kg:2886 kg:3087 .\",\n \t\t\"OPTIONAL { ?movie kg:6539 ?date } .\",\n \t\t\"FILTER NOT EXISTS {\",\n \t\t\"  ?otherMovie kg:8937 kg:7063 ;\",\n \t\t\"                kg:2886 kg:3087 ;\",\n \t\t\"                kg:6539 ?otherDate .\",\n \t\t\"  FILTER (?date < ?otherDate)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; # Instance of film\\n\",\n \t\t\"wdt:P155 wd:Q1078962.\" ,\"# Title (name) Last Action Hero\\n\",\n \t\t\"?movie wdt:P161 ?actor .\" ,\"# Find actors starring in the movie\\n\",\n \t\t\"FILTER NOT EXISTS { ?movie wdt:P31 wd:Q11424. }\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q858840 is Last Action Hero\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q858840.\",\n \t\t\"?actor wdt:P161 ?movie.\"\n \t]\n}\n   \t   \t\t          \t"}
{"question": "Give me all actors starring in Last Action Hero.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5466 is Last Action Hero\nkg:3948 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:5466 kg:3948 ?actor.\"\n \t]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?discovery wdt:P921 ?discoverer .\",\n \t\t\"?celestialBody rdfs:label \\\"Pluto\\\"@en;\",\n \t\t\"wdt:P31/wdt:P279* wd:Q105186488;\",\n \t\t\"wdt:P611 ?discovery.\"\n \t]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q339 is Pluto\nwdt:P61 is discoverer or inventor\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n \t\"query\": [\n \t\t\"?discoverer wdt:P61 wd:Q339 .\",\n \t\t\"?discoverer wdt:P31 wd:Q5\"\n \t]\n}"}
{"question": "Who discovered Pluto?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is Pluto\nkg:2200 is discoverer or inventor\nkg:9126 is instance of\nkg:6995 is human", "response": "{\n \t\"query\": [\"$discoverer\"]\n \t}\n \t                \t\t"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?saltLakeCity wdt:P18 <http://www.wikidata.org/entity/Q2359> .\",\n    \"?saltLakeCity wdt:P421 ?timeZoneResource .\",\n    \"{?timeZoneResource wdt:P361 wd:Q1070895.}\"\n  ]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23337 is Salt Lake City\nwdt:P421 is located in time zone", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P421 wd:Q23337.\"\n \t]\n}"}
{"question": "What is the time zone of Salt Lake City?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1260 is Salt Lake City\nkg:1170 is located in time zone", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    kg:1260 kg:1170 ?resource .\\n}\"] }"}
{"question": "Who killed Caesar?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?caesar wdt:P31 wd:Q725; # Caesar is an instance of human (for context, not directly used in the final query but helps to define subject clearly if needed in complex queries).\\n\",\n    \"?killer wdt:P937 ?caesar. # P937 indicates 'killed' relation\\n\",\n    \"{?killer rdfs:label ?name. FILTER(LANG(?name) = \\\"en\\\")} # Optional, for getting the name of the killer in English.\\n\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who killed Caesar?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1048 is Julius Caesar\nwdt:P157 is killed by", "response": "{\n \t\"query\": [\n \t\t\"?killer wdt:P157 wd:Q1048 .\"\n \t]\n}"}
{"question": "Who killed Caesar?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7526 is Julius Caesar\nkg:4262 is killed by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:7526 kg:4262 ?resource . }\"] }"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502 ; # Instance of mountain or similar feature\\n\",\n \t\t\"wdt:P625 ?coordinate ; # Has coordinate location\\n\",\n \t\t\"wdt:P17 wd:Q183 ; # Country is Germany\\n\",\n \t\t\"wdt:P2044 ?elevation . # Has elevation above the sea level\\n\",\n \t\t\"{\\n\",\n \t\t\"  SELECT ?mountain (MAX(?elevation) AS ?maxElevation)\\n\",\n \t\t\"  WHERE {\\n\",\n \t\t\"    ?mountain wdt:P31 wd:Q8502 ; # Instance of mountain or similar feature\\n\",\n \t\t\"             wdt:P17 wd:Q183 ; # Country is Germany\\n\",\n \t\t\"             wdt:P2044 ?elevation . # Has elevation above the sea level\\n\",\n \t\t\"  }\\n\",\n \t\t\"}\\n\",\n \t\t\"FILTER (?elevation = ?maxElevation)\\n\"\n \t]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?mountain wdt:P31 wd:Q8502.\",\n \t\t\"?mountain wdt:P2044 ?elevation.\",\n \t\t\"?mountain wdt:P17 wd:Q183.\"\n \t]\n}"}
{"question": "What is the highest mountain in Germany?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2561 is instance of\nkg:4362 is mountain\nkg:7164 is elevation above sea level\nkg:2200 is country\nkg:0428 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?mountain kg:4362 ?type .\",\n \t\t\"?mountain kg:7164 ?elevation .\",\n \t\t\"?mountain kg:2200 kg:0428 .\",\n \t\t\"{?maxElevation kg:7164 ?maxValue .} UNION {?maxValue = ?elevation}\",\n \t\t\"FILTER NOT EXISTS { ?otherMountain kg:7164 ?otherElevation . ?otherMountain kg:2200 kg:0428 . FILTER (?otherElevation > ?maxValue) }\"\n \t]\n}\n    "}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q11696 . \",\n \t\t\"?president p:P39 ?termOfOffice .\",\n \t\t\"?termOfOffice ps:P39 wd:Q11696 .\",\n \t\t\"?termOfOffice pq:P580 ?startOfTerm .\",\n \t\t\"?termOfOffice pq:P582 ?endOfTerm .\",\n \t\t\"FILTER(?endOfTerm > \\\"1955-11-01\\\"^^xsd:dateTime && ?startOfTerm < \\\"1975-04-30\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8740 is Vietnam War\nwdt:P580 is start time\nwd:Q8740 is Vietnam War\nwdt:P582 is end time\nwd:Q30 is United States of America\np:P6 is head of government\nps:P6 is head of government\npq:P580 is start time\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 ?position.\",\n \t\t\"?position ps:P6 wd:Q30.\",\n \t\t\"?position pq:P580 ?presidentStart.\",\n \t\t\"?position pq:P582 ?presidentEnd.\",\n \t\t\"wd:Q8740 wdt:P580 ?warStart.\",\n \t\t\"wd:Q8740 wdt:P582 ?warEnd.\",\n \t\t\"FILTER(?presidentStart <= ?warEnd && ?presidentEnd >= ?warStart)\"\n \t]\n}"}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Vietnam War\nkg:8702 is start time\nkg:9596 is Vietnam War\nkg:8819 is end time\nkg:6919 is United States of America\nkg:6335 is head of government\nkg:0704 is head of government\nkg:3171 is start time\nkg:6726 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president kg:6335 ?startTime;\",\n \t\t\"?president kg:6726 ?endTime;\",\n \t\t\"kg:9596 kg:8702 ?warStartTime;\",\n \t\t\"kg:9596 kg:8819 ?warEndTime.\",\n \t\t\"FILTER(?startTime <= ?warEndTime && ?endTime >= ?warStartTime)\"\n \t]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?artist wdt:P31 wd:Q5.\",\n    \"?artist wdt:P569 ?birthDate.\",\n    \"wd:Q208748 wdt:P569 ?rachelBirthDate.\",\n    \"FILTER (?birthDate = ?rachelBirthDate)\"\n  ]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q483501 is artist\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?artist wdt:P569 ?dob.\",\n \t\t\"wd:Q241665 wdt:P569 ?dob.\",\n \t\t\"?artist wdt:P106/wdt:P279* wd:Q483501.\"\n \t]\n}"}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2702 is Rachel Stevens\nkg:2966 is date of birth\nkg:4710 is occupation\nkg:7646 is subclass of\nkg:0996 is artist\nkg:2966 is date of birth", "response": "{\n  \"query\": [\n    \"?artist kg:2966 ?dob .\",\n    \"?artist kg:4710 kg:0996 .\",\n    \"kg:2702 kg:2966 ?dob .\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?frankHerbert wdt:P106 ?profession .\",\n    \"FILTER(?frankHerbert = wd:Q7289)\"\n  ]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P106 ?occupation .\",\n \t\t\"?item wikibase:sense wd:Q7934.\"\n \t]\n}"}
{"question": "What is the profession of Frank Herbert?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Frank Herbert\nkg:4981 is occupation", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?occupation WHERE { kg:6211 kg:4981 ?occupation . }\"] }"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?portoStadium wdt:P131 wd:Q298456 .\",\n    \"?portoStadium wdt:P127 wd:Q1004529 .\",\n    \"?portoStadium wdt:P1813 ?stadiumName .\",\n    \"?portoStadium wdt:P227 ?seats .\"\n  ]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128446 is FC Porto\nwdt:P115 is home venue\nwdt:P1083 is maximum capacity", "response": "{\n \t\"query\": [\n \t\t\"?porto wdt:P115 ?stadium .\",\n \t\t\"?stadium wdt:P1083 ?capacity .\",\n \t\t\"?porto wikibase:wikiLink wd:Q128446 .\"\n \t]\n}"}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1293 is FC Porto\nkg:3596 is home venue\nkg:4727 is maximum capacity", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource WHERE {\\n    kg:1293 kg:3596 ?venue .\\n    ?venue kg:4727 ?resource .\\n}\"] }"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?program wdt:P31 wd:Q24058679; # Instance of frequent flyer program\\n\",\n \t \"wdt:P856 ?airline.\" ,\n \t \"MINUS { ?program wdt:P576 [] }\" ,\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline\np:P4446 is reward program\nps:P4446 is reward program", "response": "{\n \t\"query\": [\n \t\t\"?program wdt:P31 ps:P4446.\",\n \t\t\"?airline p:P4446 ?program.\",\n \t\t\"?airline wdt:P31 wd:Q46970.\"\n \t]\n}"}
{"question": "Which frequent flyer program has the most airlines?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7931 is instance of\nkg:8697 is airline\nkg:6223 is reward program\nkg:4848 is reward program", "response": "{\n \t\"query\": [\n \t\t\"?program kg:6223 ?rewardProgram .\",\n \t\t\"?rewardProgram kg:8697 ?airline .\"\n \t]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q3624078.\",\n \t\t\"?country wdt:P391 ?constitution.\"\n \t]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P122 is basic form of government\nwd:Q41614 is constitutional monarchy", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P122 wd:Q41614 .\",\n \t\t\"?eu wdt:P150 ?country .\",\n \t\t\"?eu wikibase:sense/wdt:P31 wd:Q458.\"\n \t]\n}"}
{"question": "Which European countries have a constitutional monarchy?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4311 is European Union\nkg:4161 is contains the administrative territorial entity\nkg:0520 is basic form of government\nkg:5768 is constitutional monarchy", "response": "{\n \t\"query\": [\n \t\t\"?country kg:4161 kg:4311 .\",\n \t\t\"?country kg:0520 kg:5768 .\"\n \t]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?place wdt:P17 ?country; wdt:P680 ?cave .\",\n \t\t\"FILTER(?cave > 2)\"\n \t]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35509 is cave\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?place wdt:P31 wd:Q35509;\",\n \t\t\"?place wdt:P17 ?country.\",\n \t\t\"GROUP BY ?country\",\n \t\t\"HAVING(COUNT(?place) > 2)\"\n \t]\n}"}
{"question": "Which countries have places with more than two caves?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9167 is instance of\nkg:4381 is cave\nkg:1762 is country", "response": "{\n \t\"query\": [\n \t\t\"?place kg:4381 ?cave .\",\n \t\t\"FILTER (COUNT(?cave) > 2) .\",\n \t\t\"?country kg:1762 ?place .\"\n \t]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?merkel wdt:P1477 ?birthName .\",\n    \"?merkel rdfs:label \\\"Angela Merkel\\\"@en .\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"?resource wdt:P1477 ?birthName .\",\n    \"wd:Q567 ?p ?resource .\"\n  ]\n}"}
{"question": "What is Angela Merkel’s birth name?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7741 is Angela Merkel\nkg:3407 is birth name", "response": "{\n  \"query\": [\n    \"?resource kg:3407 ?birthName .\",\n    \"kg:7741 ?predicate ?resource .\"\n  ]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P39 wd:Q206847;\",\n \t\t\"wdt:P131 wd:Q64; .\"\n \t]\n}\n    "}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P6 is head of government", "response": "{\n \t\"query\": [\n \t\t\"?mayor wdt:P6 wd:Q64 .\"\n \t]\n}"}
{"question": "Who is the mayor of Berlin?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5823 is Berlin\nkg:5984 is head of government", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?mayor WHERE {\\n  kg:5823 kg:5984 ?mayor .\\n}\"] }"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q42506798; \", \">// Q42506798 is the Wikidata ID for European Union member states, and P31 denotes instance of relation. However, to directly answer which countries adopted Euro, we need to use a property that links to the currency used by the country, which is P38 (currency), and then filter it with Q4205 (Euro). Thus, the correct query should be adjusted accordingly as below: \"\n \t\t\t,\n \t\t\"?country wdt:P31 wd:Q3624078; \", \">// Q3624078 is for countries that are members of the European Union. However, to directly answer which countries adopted Euro, we need to use a property that links to the currency used by the country, which is P38 (currency), and then filter it with Q4205 (Euro). Thus, the correct query should be adjusted accordingly as below: \"\n \t\t,\n \t\t\"?country wdt:P38 wd:Q4205. \" ,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n \t"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P38 wd:Q4916.\",\n \t\t\"?country wdt:P150* wd:Q458.\"\n \t]\n}"}
{"question": "Which countries in the European Union adopted the Euro?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4396 is European Union\nkg:1934 is contains the administrative territorial entity\nkg:4547 is currency\nkg:6859 is euro", "response": "{\n \t\"query\": [\n \t\t\"?country kg:1934 kg:4396 .\",\n \t\t\"?country kg:4547 kg:6859 .\"\n \t]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q6503128; \",\n    \"wdt:P19 ?birthPlace.\",\n    \"{?birthPlace wdt:P17 ?country.} UNION\",\n    \"{?birthPlace wdt:P131/wdt:P17 ?country.}\"\n  ]\n}\n    "}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5284 is Bill Gates\nwdt:P19 is place of birth\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"?placeOfBirth wdt:P19 wd:Q5284 .\",\n    \"?country wdt:P17 ?placeOfBirth\"\n  ]\n}"}
{"question": "Which country was Bill Gates born in?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4141 is Bill Gates\nkg:4973 is place of birth\nkg:6146 is country", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"kg:4141\",\n    \"kg:4973\",\n    \"?y.\",\n    \"?y\",\n    \"kg:6146\",\n    \"?x\",\n    \"}\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cousteau wdt:P31 wd:Q5; \",\n    \"wdt:P734 wd:Q208691;\",\n    \"wdt:P40 ?child.\",\n    \"?child wdt:P40|wdt:P41 ?grandchild\"\n  ]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83233 is Jacques Cousteau\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"?grandchild wdt:P40 ?child.\",\n \t\t\"?child wdt:P40 wd:Q83233.\"\n \t]\n}"}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3588 is Jacques Cousteau\nkg:1573 is child\nkg:1573 is child", "response": "{\n \t\"query\": [\"$grandchild\"]\n \t}\n \t                \t\t"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q539482 ; # occupation is professional skateboarder\\n\",\n \t\t\"wdt:P27 wd:Q34 .\" ,\"\\n\", \"# country of citizenship is Sweden\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P641 is sport\nwd:Q842284 is skateboarding\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q34 is Sweden", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P641 wd:Q842284 ;\",\n \t\t\"?person wdt:P19/wdt:P131* wd:Q34 .\"\n \t]\n}"}
{"question": "Give me all professional skateboarders from Sweden.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3199 is sport\nkg:2295 is skateboarding\nkg:5284 is place of birth\nkg:2937 is located in the administrative territorial entity\nkg:3100 is Sweden", "response": "{\n \t\"query\": [\n \t\t\"?skateboarder a kg:2295 ;\",\n \t\t\"kg:5284 ?placeOfBirth .\",\n \t\t\"?placeOfBirth kg:2937 kg:3100 .\"\n \t]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; # instance of film\\n\",\n \t\t\"wdt:P495 wd:Q414. # country of origin is Argentina\"\n \t]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q414 is Argentina", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P495 wd:Q414.\"\n \t]\n}"}
{"question": "Give me all Argentine films.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4916 is instance of\nkg:9085 is film\nkg:6012 is country of origin\nkg:6146 is Argentina", "response": "{\n \t\"query\": [\n \t\t\"?film kg:4916 kg:9085 .\",\n \t\t\"?film kg:6012 kg:6146 .\"\n \t]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?michaelJackson wdt:P31 wd:Q5; # Michael Jackson is an instance of human (Q5, for filtering purposes if needed, though not directly used in this context)\\n\",\n    \"wdt:P21 wd:Q6581072; # Gender is male\\n\",\n    \"rdfs:label ?michaelLabel .\\n\",\n    \"?causeOfDeath wdt:P39.4 ?michaelJackson.\\n\",\n    \"{?causeOfDeath rdfs:label ?deathCauseLabel .}\\n\",\n    \"FILTER(LANG(?michaelLabel) = 'en')\\n\",\n    \"FILTER(LANG(?deathCauseLabel) = 'en')\\n\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q2831\",\n    \"wdt:P509\",\n    \"?cause_of_death\"\n  ]\n}"}
{"question": "How did Michael Jackson die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3927 is Michael Jackson\nkg:0761 is cause of death", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"<http://example/kg/3927> <http://example/kg/0761> ?x .\"\n    ]}\n    "}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?state wdt:P31 wd:Q35665; # instance of U.S. state (wd:Q35665 is the Wikidata ID for U.S. states, and P31 indicates \"] }\n \t\t"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657 .\",\n \t\t\"?state wdt:P571 ?inception .\"\n \t]\n}"}
{"question": "Which U.S. state has been admitted latest?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0265 is instance of\nkg:2557 is U.S. state\nkg:1837 is inception", "response": "{\n \t\"query\": [\n \t\t\"?state a kg:2557;\",\n \t\t\"?state kg:1837 ?inception;\"\n \t]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?millepede wdt:P171* ?class .\",\n    \"?millepede rdfs:label ?millepedeLabel filter (lang(?millepedeLabel) = \\\"en\\\") .\",\n    \"filter regex(?millepedeLabel, \\\"Millipede\\\", \\\"i\\\") .\"\n  ]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11185669 is millipede\nwdt:P279 is subclass of", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P279* wd:Q11185669.\"\n \t]\n}"}
{"question": "Which classes does the Millepede belong to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0355 is millipede\nkg:4290 is subclass of", "response": "{\n \t\"query\": [\"$class\" ]\n \t}\n \t                \t\t"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q508394 wdt:P856 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"?forbes wdt:P856 ?homepage .\",\n    \"?forbes wikibase:sense wd:Q25161472 .\"\n  ]\n}"}
{"question": "Give me the homepage of Forbes.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2247 is Forbes\nkg:2521 is official website", "response": "{\n  \"query\": [\n    \"?resource kg:2521 kg:2247 .\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?amandaPalmer wdt:P31 wd:Q5.\",\n    \"?amandaPalmer wdt:P26 ?husband.\"\n  ]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q240377 is Amanda Palmer", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q240377 .\"\n \t]\n}"}
{"question": "Who is the husband of Amanda Palmer?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7753 is spouse\nkg:5663 is Amanda Palmer", "response": "{\n \t\"query\": [\"$husband\"]\n \t}\n \t                \t\t"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?painting wdt:P180 wd:Q187523.\",\n    \"?painting wdt:P170 ?artist.\"\n  ]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2246489 is The Storm on the Sea of Galilee\nwdt:P170 is creator", "response": "{\n \t\"query\": [\n \t\t\"?painting wdt:P170 ?creator .\",\n \t\t\"?painting wikibase:sense wd:Q2246489.\"\n \t]\n}"}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9947 is The Storm on the Sea of Galilee\nkg:9480 is creator", "response": "{\n  \"query\": [\n    \"?painting kg:9480 ?creator .\",\n    \"?painting <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:9947 .\"\n  ]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?highestPlace wdt:P1714 wd:Q206835.\"\n \t]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5469 is Karakoram\nwdt:P610 is highest point", "response": "{\n \t\"query\": [\n \t\t\"?highestPlace wdt:P610 wd:Q5469.\"\n \t]\n}"}
{"question": "What is the highest place of Karakoram?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1348 is Karakoram\nkg:5338 is highest point", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:5338 ?highestPoint .\",\n \t\t\"?resource kg:1348 kg:Karakoram .\"\n \t]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?finland wdt:P31 wd:Q30;\",\n    \"?finland wdt:P462 ?euJoinDate.\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33 is Finland\np:P463 is member of\npq:P580 is start time\nps:P463 is member of\nwd:Q458 is European Union", "response": "{\n  \"query\": [\n    \"?finland p:P463 ?statement .\",\n    \"?statement ps:P463 wd:Q458 .\",\n    \"?statement pq:P580 ?startTime .\"\n  ]\n}"}
{"question": "When did Finland join the EU?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2680 is Finland\nkg:1277 is member of\nkg:1675 is start time\nkg:8680 is member of\nkg:6217 is European Union", "response": "{\n \t\"query\": [\"$Finland\" ]\n \t}\n \t                \t\t"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q5240896; \",\n \t\t\"wdt:P161 ?actor.\",\n \t\t\"?movie rdfs:label \\\"The Big Bang Theory\\\"@en.\"\n \t]\n}\n    "}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8539 is The Big Bang Theory\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P161 wd:Q8539.\"\n \t]\n}"}
{"question": "Which actors play in Big Bang Theory?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1737 is The Big Bang Theory\nkg:7599 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7599 kg:1737.\"\n \t]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P106 wd:Q24985378; # occupation is computer scientist (Q24985378) \\n\",\n \t \"wdt:P166 wd:Q43180. # has won award Oscar (Q43180)\"\n \t]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82594 is computer scientist\nwdt:P166 is award received\nwdt:P31 is instance of\nwd:Q19020 is Academy Awards", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P106 wd:Q82594 .\",\n \t\t\"?resource wdt:P166 wd:Q19020 .\"\n \t]\n}"}
{"question": "Which computer scientist won an oscar?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1794 is occupation\nkg:0345 is computer scientist\nkg:5117 is award received\nkg:5645 is instance of\nkg:6613 is Academy Awards", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?author wdt:P50 wd:Q25713.\"\n  ]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8337 is Harry Potter\nwdt:P50 is author", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 ?author .\",\n \t\t\"?item rdfs:label \\\"Harry Potter\\\"@en .\"\n \t]\n}"}
{"question": "Who wrote Harry Potter?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7554 is Harry Potter\nkg:8440 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?author WHERE { kg:7554 kg:8440 ?author . }\"] }"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P31 wd:Q11424; # instance of work\\n\",\n \t\t\"       rdfs:label ?workLabel过滤.\\n\",\n \t\t\"FILTER (LANG(?workLabel) = 'en')\\n\",\n \t\t\"?work rdfs:label \\\"Lovesick\\\"@en.\\n\",\n \t\t\"?actor wdt:P161 ?work; # actor in the work\\n\",\n \t\t\"        wdt:P27 wd:Q145. # nationality is England\\n\",\n \t\t\"?actor wdt:P31 wd:Q5. # instance of human\\n\",\n \t\t\"?actor rdfs:label ?actorLabel过滤.\\n\",\n \t\t\"FILTER (LANG(?actorLabel) = 'en')\\n\"\n \t]\n}\n    "}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12125895 is Lovesick\nwdt:P161 is cast member\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q145 is United Kingdom", "response": "{\n \t\"query\": [\n \t\t\"?actor wdt:P161 wd:Q12125895 ;\",\n \t\t\"wdt:P19 ?birthPlace .\",\n \t\t\"?birthPlace wdt:P17 wd:Q145 .\"\n \t]\n}"}
{"question": "Give me English actors starring in Lovesick.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5043 is Lovesick\nkg:7156 is cast member\nkg:3179 is place of birth\nkg:8637 is country\nkg:3447 is United Kingdom", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:7156 kg:5043 .\",\n \t\t\"?actor kg:3179 ?birthPlace .\",\n \t\t\"?birthPlace kg:8637 kg:3447 .\"\n \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P31 wd:Q385470.\",\n \t\t\"?president wdt:P19 ?birthPlace.\"\n \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q236 is Montenegro\nwdt:P35 is head of state\nwdt:P19 is place of birth\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P35 wd:Q236 .\",\n \t\t\"?president wdt:P19 ?birthPlace .\",\n \t\t\"?birthPlace wdt:P31 wd:Q515 .\"\n \t]\n}"}
{"question": "In which city was the president of Montenegro born?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6244 is Montenegro\nkg:0839 is head of state\nkg:4651 is place of birth\nkg:0895 is instance of\nkg:0321 is city", "response": "{\n \t\"query\": [\"$president\" ,\"$city\"] }\n   \t \t    \t \t"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35684 .\",\n \t\t\"?state wdt:P225 ?populationDensity .\",\n \t\t\"OPTIONAL {\",\n \t\t\"?otherState wdt:P31 wd:Q35684 ;\",\n \t\t\"wdt:P225 ?otherPopulationDensity .\",\n \t\t\"}\",\n \t\t\"FILTER (?populationDensity >= ?otherPopulationDensity)\",\n \t\t\"{\",\n \t\t\"SELECT ?state (MAX(?populationDensity) AS ?maxDensity) {\",\n \t\t\"?state wdt:P31 wd:Q35684 ;\",\n \t\t\"wdt:P225 ?populationDensity .\",\n \t\t\"} GROUP BY ?state\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1082 is population\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657.\",\n \t\t\"?state wdt:P1082 ?population.\",\n \t\t\"?state wdt:P2046 ?area.\"\n \t]\n}"}
{"question": "Which U.S. state has the highest population density?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6804 is instance of\nkg:6879 is U.S. state\nkg:9633 is population\nkg:4555 is area", "response": "{\n \t\"query\": [\n \t\t\"?state a kg:6879;\",\n \t\t\"?state kg:9633 ?population;\",\n \t\t\"?state kg:4555 ?area.\",\n \t\t\"{?density bind((?population / ?area) as ?density)}\",\n \t\t\"optional{?maxState kg:9633 ?maxPopulation;kg:4555 ?maxArea.{?maxDensity bind((?maxPopulation / ?maxArea) as ?maxDensity)}}\",\n \t\t\"?density > ?maxDensity.\"\n \t]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P31 wd:Q4022; # instance of river\",\n \t\t\"wdt:P669 ?length;\",\n \t\t\"wdt:P17 wd:Q96.\",\n \t\t\"{?river wdt:P518 wd:Q96.} UNION {?river wdt:P361 wd:Q96.}\",\n \t\t\"?river wdt:P2046 ?lengthValue.\",\n \t\t\"FILTER NOT EXISTS {[] wdt:P2046 ?longerLength . [] wdt:P17 wd:Q96 . FILTER(?longerLength > ?lengthValue)}\"\n \t]\n}\n    "}
{"question": "What is the longest river in China?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P17 is country\nwd:Q148 is People's Republic of China\nwdt:P2043 is length", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P31 wd:Q4022 ;\",\n \t\t\"?river wdt:P17 wd:Q148 ;\",\n \t\t\"?river wdt:P2043 ?length .\"\n \t]\n}"}
{"question": "What is the longest river in China?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0268 is instance of\nkg:7764 is river\nkg:6821 is country\nkg:4374 is People's Republic of China\nkg:9050 is length", "response": "{\n \t\"query\": [\n \t\t\"?river kg:7764 ?riverEntity .\",\n \t\t\"?river kg:6821 kg:4374 .\",\n \t\t\"?river kg:9050 ?length .\",\n \t\t\"{?river2 kg:7764 ?riverEntity2 . ?river2 kg:6821 kg:4374 . ?river2 kg:9050 ?length2 . FILTER(?length < ?length2)} UNION {SELECT ?river ?length WHERE {?river kg:7764 ?riverEntity . ?river kg:6821 kg:4374 . ?river kg:9050 ?length} ORDER BY DESC(?length) LIMIT 1}\"\n \t]\n}\n   "}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?areaCode wdt:P31 wd:Q486975.\",\n    \"?berlin wdt:P31 wd:Q5106.\",\n    \"?berlin wdt:P1428 ?areaCode.\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P473 is local dialing code", "response": "{\n  \"query\": [\n    \"?areaCode wdt:P473 wd:Q64 .\"\n  ]\n}"}
{"question": "What is the area code of Berlin?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1562 is Berlin\nkg:0879 is local dialing code", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:1562 kg:0879 ?resource .\\n}\"] }"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q588734; \", \">// P106 is occupation, Q588734 is scientist profession identifier in Wikidata\"\n \t\t,\"?person wdt:P69 ?university .\", \">// P69 represents the alma mater of a person\"\n \t\t,\"?university wdt:P2950 wd:Q100951 .\" ,\">// P2950 is for the list of Ivy League universities in Wikidata\"\n \t\t,\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\n \t\t\"?person\"\n \t]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q901 is scientist\nwdt:P69 is educated at\nwd:Q49113 is Ivy League\nwdt:P527 is has part(s)", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P106 wd:Q901 .\",\n \t\t\"?resource wdt:P69 ?university .\",\n \t\t\"{?university wdt:P527 wd:Q49113.} UNION {?university wdt:P31 wd:Q49113.}\"\n \t]\n}"}
{"question": "How many scientists graduated from an Ivy League university?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1048 is occupation\nkg:6101 is scientist\nkg:2513 is educated at\nkg:4279 is Ivy League\nkg:2228 is has part(s)", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Human (instance of human, Q5 is the entity ID for humans in Wikidata) \\n\",\n \t\t\"?person wdt:P106 wd:Q1651482; \", \">// Occupation as surfer (professional surfer, Q1651482)\\n\",\n \t\t\"?person wdt:P19 wd:Q794; \" ,\",// Place of birth in Australia (Australia, Q794 is the entity ID for Australia)\\n\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P106 is occupation\nwd:Q13561328 is surfer", "response": "{\n \t\"query\": [\n \t\t\"?surfer wdt:P106 wd:Q13561328 .\",\n \t\t\"?surfer wdt:P19 ?birthPlace .\",\n \t\t\"?birthPlace wdt:P17 wd:Q408 .\"\n \t]\n}"}
{"question": "Which professional surfers were born in Australia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4767 is place of birth\nkg:7914 is country\nkg:1900 is Australia\nkg:2462 is occupation\nkg:6340 is surfer", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2462 kg:6340 .\",\n \t\t\"?x kg:4767 ?birthPlace .\",\n \t\t\"?birthPlace kg:7914 kg:1900 .\"\n \t]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?party wdt:P31 wd:Q7275 .\"\n \t]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q7278 is political party", "response": "{\n \t\"query\": [\n \t\t\"?party wdt:P31 wd:Q7278 .\",\n \t\t\"?party wdt:P17 wd:Q55 .\"\n \t]\n}"}
{"question": "Give me all Dutch parties.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1972 is country\nkg:1749 is Netherlands\nkg:3085 is instance of\nkg:4788 is political party", "response": "{\n \t\"query\": [\"$party\"]\n \t}\n \t                \t\t"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mars wdt:P66,P1082 ?moons .\",\n \t\t\"?mars rdfs:label ?label .\",\n \t\t\"FILTER(LANG(?label) = 'en') .\",\n \t\t\"{SELECT ?mars WHERE { ?mars rdfs:label \\\"Mars\\\"@en } LIMIT 1}\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111 is Mars\nwdt:P398 is child astronomical body", "response": "{\n  \"query\": [\n    \"?moon wdt:P398 wd:Q111 .\"\n  ]\n}"}
{"question": "How many moons does Mars have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5773 is Mars\nkg:8511 is child astronomical body", "response": "{\n \t\"query\": [\"$moon\"]\n \t}\n \t                \t\t"}
{"question": "What is Batman's real name?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?batman wdt:P140 wd:Q46523;\",\n \t\t\"?batman wdt:P180 ?realNameResource.\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What is Batman's real name?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P460 is said to be the same as", "response": "{\n \t\"query\": [\n \t\t\"?realName wdt:P460 wd:Q2695156.\"\n \t]\n}"}
{"question": "What is Batman's real name?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8690 is Batman\nkg:9050 is said to be the same as", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?realName WHERE {\\n    kg:8690 kg:9050 ?realName .\\n}\"] }"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P2064 wd:Q453189.\"\n  ]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q359 is WikiLeaks\nwdt:P50 is author", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 ?author .\",\n \t\t\"?item wikibase:sense wd:Q359 .\"\n \t]\n}"}
{"question": "Who is the author of WikiLeaks?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2318 is WikiLeaks\nkg:3776 is author", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2318 kg:3776 ?resource . }\"] }"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?carloGiuliani (wdt:P1415|wdt:P937) ?event .\",\n    \"?event wdt:P20 ?date .\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q164791 is Carlo Giuliani\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"?resource wdt:P570 ?date .\",\n    \"?resource wd:Q164791\"\n  ]\n}"}
{"question": "When was Carlo Giuliani shot?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5393 is Carlo Giuliani\nkg:1019 is date of death", "response": "{\n  \"query\": [\n    \"?entity kg:1019 ?date .\",\n    \"FILTER (?entity = kg:5393)\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?president wdt:P39 wd:Q167085.\",\n    \"?president wdt:P26 ?wife.\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?wife wdt:P26 wd:Q91 .\"\n  ]\n}"}
{"question": "Who was the wife of President Lincoln?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0844 is Abraham Lincoln\nkg:0994 is spouse", "response": "{\n  \"query\": [\n    \"?wife kg:0994 kg:0844 .\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?rwd \",\n    \"WHERE\",\n    \"{\",\n    \" wd:Q40835 wdt:P166 ?rwd .\",\n    \"}\"\n  ]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33760 is Bertrand Russell\nwdt:P166 is award received", "response": "{\n \t\"query\": [\n \t\t\"?award\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"wd:Q33760 wdt:P166 ?award.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "How many awards has Bertrand Russell?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2307 is Bertrand Russell\nkg:0557 is award received", "response": "{\n  \"query\": [\n    \"?award kg:0557 kg:2307 .\"\n  ]\n}"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P735 wd:Q40816; \", \">// Pamela Anderson's ID in Wikidata is Q40816, P735 indicates given name to filter for specificity since there could be other people named Pamela Anderson. However, this approach might not directly answer the vegan question without additional predicates or properties that denote dietary preferences or lifestyle choices related to being a vegan. A more accurate query would require specific property for veganism if available in Wikidata's schema at the time of querying. As of my last update, there isn't a direct property for \" ]}\n"}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83325 is Pamela Anderson\nwdt:P1576 is lifestyle\nwd:Q83364 is vegetarianism", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; # Instance of human\",\n \t\t\"wd:Q83325; # Pamela Anderson\",\n \t\t\"wdt:P1576 ?lifestyle . # Lifestyle\"\n \t]\n}\n   \t  \t \t  \t \t  \t \t "}
{"question": "Is Pamela Anderson a vegan?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5099 is Pamela Anderson\nkg:1327 is lifestyle\nkg:6354 is vegetarianism", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"kg:5099 kg:1327 ?x .\",\n    \"FILTER (?x = kg:6354)\"\n    ]}\n   "}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?probe wdt:P625 wd:Q30 ;\", \">// Q30 is for Sun, but P625 isn't correct property to use here as it's for coordinates. The correct approach would be different and more complex since there's no direct orbit relation in Wikidata specifically for solar orbits of space probes. However, for the sake of structure, we'll assume a hypothetical property or approach that could lead us to such information indirectly or through categories/entities known to orbit the Sun with space probes as one category/entity type.\",\n \t\t\"?probe wdt:P31 wd:Q405276 .\" , \">// Q405276 is for Space probe. This line would identify items that are instances of space probes. The first line's logic needs adjustment to correctly address the orbit around the Sun aspect.\"\n \t]\n}\n  \t"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P522 is type of orbit\nwd:Q737809 is heliocentric orbit", "response": "{\n \t\"query\": [\n \t\t\"?probe wdt:P522 wd:Q737809.\"\n \t]\n}"}
{"question": "Which space probes were sent into orbit around the sun?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3989 is type of orbit\nkg:2459 is heliocentric orbit", "response": "{\n \t\"query\": [\n \t\t\"?probe kg:3989/kg:2459 .\"\n \t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?daughter wdt:P22 ?robertKennedy .\",\n \t \"?daughter wdt:P40 ?husband .\",\n \t \"FILTER(?robertKennedy = wd:Q8396)\"\n \t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25310 is Robert F. Kennedy\nwdt:P40 is child\nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"?daughter wdt:P21 wd:Q6581072 .\",\n \t\t\"?daughter wdt:P40 wd:Q25310 .\",\n \t\t\"?spouse wdt:P26 ?daughter.\"\n \t]\n}"}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5083 is Robert F. Kennedy\nkg:1582 is child\nkg:5789 is sex or gender\nkg:3234 is female\nkg:0173 is spouse", "response": "{\n \t\"query\": [\"$spouse\"]\n \t}\n \t                \t\t"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?university wdt:P31 wd:Q39108542 ;\",\n    \"wdt:P793 ?studentCount .\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214341 is University of Amsterdam\nwdt:P2196 is students count", "response": "{\n  \"query\": [\n    \"?university wdt:P2196 ?studentsCount .\",\n    \"FILTER (?university = wd:Q214341)\"\n  ]\n}"}
{"question": "How many students does the Free University of Amsterdam have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4066 is University of Amsterdam\nkg:8357 is students count", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?studentsCount WHERE {\\n    kg:4066 kg:8357 ?studentsCount .\\n}\"] }"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?ibm wdt:P31 wd:Q4830453.\",\n    \"?ibm wdt:P2179 ?revenue.\"\n  ]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P2139 is total revenue", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P2139 ?revenue .\",\n \t\t\"?item wikibase:sense wd:Q37156 .\"\n \t]\n}"}
{"question": "What is the revenue of IBM?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8611 is IBM\nkg:4561 is total revenue", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:8611 kg:4561 ?resource . }\"] }"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; \",\n \t\t\"wdt:P161 ?actor.\",\n \t\t\"?actor rdfs:label \\\"James Bond\\\"@en.\"\n \t]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwd:Q2009573 is James Bond\nwdt:P144 is based on\nwdt:P674 is characters", "response": "{\n \t\"query\": [\n \t\t\"?bond_film wdt:P31 wd:Q11424.\",\n \t\t\"?bond_film wdt:P144 wd:Q2009573.\"\n \t]\n}"}
{"question": "How many James Bond movies do exist?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7008 is instance of\nkg:7673 is film\nkg:9402 is James Bond\nkg:9593 is based on\nkg:2301 is characters", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:7673 ?film.\",\n \t\t\"?movie kg:9593/kg:9402 ?bondCharacter.\",\n \t\t\"?movie kg:2301 ?characters.\"\n \t]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?bart_simpson wdt:P1550 ?voice_actor.\",\n    \"?voice_actor wdt:P31 wd:Q5.\"\n  ]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5480 is Bart Simpson\nwdt:P725 is voice actor", "response": "{\n \t\"query\": [\n \t\t\"?voiceActor wdt:P725 wd:Q5480.\"\n \t]\n}"}
{"question": "Who does the voice of Bart Simpson?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0013 is Bart Simpson\nkg:9734 is voice actor", "response": "{\n  \"query\": [\n    \"?voiceActor kg:property/voiced ?character .\",\n    \"?character kg:property/name kg:0013 .\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?tomHanks wdt:P31 wd:Q45286; # Tom Hanks is an instance of human (for disambiguation purposes, though not strictly necessary for this query)\\n\",\n    \"wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q5.\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?spouse (wdt:P26/wdt:P26*) wd:Q2263.\"\n  ]\n}"}
{"question": "Who was Tom Hanks married to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4790 is Tom Hanks\nkg:1852 is spouse", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?spouse WHERE { kg:4790 kg:1852 ?spouse . }\"] }"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?Yenisei wdt:P1376 ?country .\",\n \t\t\"?Yenisei rdfs:label ?label .\",\n \t\t\"FILTER (LANG(?label) = 'en') .\",\n \t\t\"FILTER (?label = 'Yenisei River'@en)\"\n \t]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q78707 is Yenisey\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"?river wdt:P17 ?country .\",\n    \"FILTER (?river = wd:Q78707) .\"\n  ]\n}"}
{"question": "Through which countries does the Yenisei river flow?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4880 is Yenisey\nkg:6798 is country", "response": "{\n  \"query\": [\n    \"?river kg:4880 .\",\n    \"?country kg:6798 ?river .\"\n  ]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?car wdt:P31 wd:Q7424; # instance of car\\n\",\n \t\t\"wdt:P17 wd:Q183; # country Germany\\n\",\n \t\t\"wdt:P105 wd:Q186008. # production\\n\"\n \t]\n}\n    "}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q59773381 is automobile model series\nwdt:P176 is manufacturer\nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwd:Q786820 is automobile manufacturer", "response": "{\n \t\"query\": [\n \t\t\"?car wdt:P31 wd:Q59773381.\",\n \t\t\"?car wdt:P176 ?manufacturer.\",\n \t\t\"?manufacturer wdt:P17 wd:Q183.\"\n \t]\n}"}
{"question": "Give me all cars that are produced in Germany.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4758 is instance of\nkg:4232 is automobile model series\nkg:9437 is manufacturer\nkg:8414 is country\nkg:9406 is Germany\nkg:4758 is instance of\nkg:2448 is automobile manufacturer", "response": "{\n \t\"query\": [\"$car\"]\n \t}\n \t                \t\t"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\"SELECT ?date WHERE { wd:Q207345 wdt:P570 ?date . }\"] }"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q2831\",\n    \"wdt:P570\",\n    \"?dateOfDeath\"\n  ]\n}"}
{"question": "When did Michael Jackson die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1405 is Michael Jackson\nkg:3025 is date of death", "response": "{\n  \"query\": [\n    \"?x\",\n    \"WHERE\",\n    \"{\",\n    \"<http://example/kg/1405> <http://example/kg/3025> ?x .\"\n    ]}\n    "}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?volcano wdt:P31 wd:Q228804 . # instance of volcano\",\n \t\t\"?volcano wdt:P495 wd:Q356 . # country is Africa (continent)\",\n \t\t\"?volcano p:P2048 ?elevationStatement . # has elevation statement\",\n \t\t\"?elevationStatement psn:P2048 ?elevationValue . # the elevation value\",\n \t\t\"OPTIONAL { ?volcano wdt:P1566 ?name }\", \"math:MAX(?elevationValue) as ?maxElevation\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P2044 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?volcano wdt:P31/wdt:P279* wd:Q8072 ;\",\n \t\t\"wdt:P2044 ?elevation ;\",\n \t\t\"wdt:P30 wd:Q15 .\"\n \t]\n}"}
{"question": "What is the highest volcano in Africa?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2785 is continent\nkg:0205 is Africa\nkg:3352 is instance of\nkg:5941 is subclass of\nkg:4262 is volcano\nkg:0560 is elevation above sea level", "response": "{\n \t\"query\": [\n \t\t\"?volcano kg:3352 kg:4262 .\",\n \t\t\"?volcano kg:0560 ?elevation .\",\n \t\t\"?volcano kg:2785 kg:0205 .\"\n \t]\n}"}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?spacecraft wdt:P39 / wd:Q40525; \",\n \t\t\"wdt:P628 wd:Q1078.\"\n \t]\n}\n    "}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q389459 is Mars rover", "response": "{\n \t\"query\": [\n \t\t\"?spacecraft wdt:P31 ?instance.\",\n \t\t\"?spacecraft wdt:P621 wd:Q389459.\"\n \t]\n}\n    "}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4000 is instance of\nkg:9758 is Mars rover", "response": "{\n \t\"query\": [\"$ spacecraft $\"]\n \t}\n \t\t    \t\t \t  \t    \t\t"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424; wdt:P495 wd:Q246. }\"]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q213 is Czech Republic\nwdt:P495 is country of origin\nwd:Q33946 is Czechoslovakia", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424 ;\",\n \t\t\"?movie wdt:P495 wd:Q213 .\"\n \t]\n}"}
{"question": "Show me all Czech movies.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2993 is instance of\nkg:6480 is film\nkg:2995 is country of origin\nkg:1556 is Czech Republic\nkg:2995 is country of origin\nkg:0212 is Czechoslovakia", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:2993 kg:6480 .\",\n \t\t\"?movie kg:2995 kg:1556 .\"\n \t]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?taikonaut wdt:P31 wd:Q105782 .\"\n \t]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q148 is People's Republic of China", "response": "{\n \t\"query\": [\n \t\t\"?taikonaut wdt:P106 wd:Q11631 .\",\n \t\t\"?taikonaut wdt:P27 wd:Q148 .\"\n \t]\n}"}
{"question": "Give me all taikonauts.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4503 is occupation\nkg:9378 is astronaut\nkg:3941 is country of citizenship\nkg:8528 is People's Republic of China", "response": "{\n \t\"query\": [\n \t\t\"?taikonaut kg:4503 kg:9378 .\",\n \t\t\"?taikonaut kg:3941 kg:8528 .\"\n \t]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256 ; # instance of country/entity with geographical location\\n\",\n \t\t\"wdt:P786 ?volcano . # has part volcano\\n\",\n \t\t\"{SELECT ?country (COUNT(?volcano) AS ?volcanoCount) WHERE { ?country wdt:P786 ?volcano. } GROUP BY ?country HAVING (?volcanoCount > 10)}\\n\"\n \t]\n}"}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8072 is volcano\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P17 is country", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P17 ?volcano .\",\n \t\t\"?volcano wdt:P31 wd:Q8072 .\"\n \t]\n}\n    "}
{"question": "Which countries have more than ten volcanoes?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1994 is instance of\nkg:7112 is volcano\nkg:1994 is instance of\nkg:0630 is subclass of\nkg:7112 is volcano\nkg:3464 is country", "response": "{\n \t\"query\": [\n \t\t\"?country kg:3464 ?volcanos .\",\n \t\t\"FILTER (strlen(strafter(str(?volcanos), 'kg:')) > 10) .\"\n \t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P800 wd:Q85194;\",\n    \"?creator wdt:P570 ?deathDate.\"\n  ]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3266236 is Count Dracula\nwdt:P170 is creator\nwdt:P570 is date of death", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P170 wd:Q3266236;\",\n \t\t\"wdt:P570 ?dateOfDeath.\"\n \t]\n}"}
{"question": "When did Dracula's creator die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is Count Dracula\nkg:7234 is creator\nkg:3219 is date of death", "response": "{\n \t\"query\": [\"$creator\" ]\n \t}\n \t\t\t\t\t           \t \t"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?creator wdt:P138 wd:Q940526.\",\n    \"{?creator}\"\n  ]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P170 is creator\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n \t\"query\": [\n \t\t\"?creator wdt:P170 wd:Q52 .\",\n \t\t\"?creator wdt:P31 wd:Q5 .\"\n \t]\n}"}
{"question": "Who created English Wikipedia?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8535 is Wikipedia\nkg:0687 is creator\nkg:4965 is instance of\nkg:7883 is human", "response": "{ \"query\": [\"@subject kg:0687 kg:8535 . @subject kg:4965 kg:7883 .\"] }"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P39 wd:Q46752; # position held is Chancellor of Germany\\n\",\n \t\t\"wdt:P21 wd:Q6581072; # sex or gender is female\\n\",\n \t\t\"wdt:P31 wd:Q5. # instance of human\\n\"\n \t]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P39 wd:Q4970706 ;\",\n \t\t\"wdt:P21 wd:Q6581072 .\"\n \t]\n}"}
{"question": "Give me all female German chancellors.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3087 is sex or gender\nkg:5264 is female\nkg:4281 is position held\nkg:0263 is Federal Chancellor of Germany", "response": "{\n \t\"query\": [\"$femaleChancellor\"]\n \t}\n \t                \t\t"}
{"question": "Who owns Aldi?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?aldi wdt:P31 wd:Q4830453.\",\n    \"?owner wdt:P127 ?aldi\"\n  ]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125054 is Aldi\nwdt:P355 is has subsidiary", "response": "{\n \t\"query\": [\n \t\t\"?owner wdt:P749 wd:Q125054.\"\n \t]\n}"}
{"question": "Who owns Aldi?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2823 is Aldi\nkg:3490 is has subsidiary", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?owner \\nWHERE { \\n    ?owner kg:3490 kg:2823. \\n}\"] }"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?influenced wdt:P854 wd:Q213890 .\"\n \t]\n}\n  \t\t\t\t\t  \t      \t\t\t\t"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n \t\"query\": [\n \t\t\"?influenced wdt:P737 wd:Q913 .\",\n \t\t\"?influenced wdt:P31 wd:Q5.\"\n \t]\n}"}
{"question": "Who was influenced by Socrates?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7202 is instance of\nkg:2379 is human\nkg:1789 is influenced by\nkg:7075 is Socrates", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1789 kg:7075 .\",\n \t\t\"?resource kg:2379 ?human .\"\n \t]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q242907 .\",\n    \"?resource wdt:P2043 ?depth .\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4138 is Chiemsee\nwdt:P4511 is vertical depth", "response": "{\n  \"query\": [\n    \"?resource wdt:P4511 ?depth .\",\n    \"?resource wdt:P2886 wd:Q4138 .\"\n  ]\n}"}
{"question": "How deep is Lake Chiemsee?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0491 is Chiemsee\nkg:7474 is vertical depth", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:0491 kg:7474 ?resource . }\"] }"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?queen_victoria wdt:P31 wd:Q648.\",\n    \"?queen_victoria wdt:P25 ?mother.\",\n    \"?queen_victoria wdt:P27 ?father.\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9439 is Victoria\nwdt:P22 is father\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"?father wdt:P22 wd:Q9439.\",\n    \"?mother wdt:P25 wd:Q9439.\"\n  ]\n}"}
{"question": "Who were the parents of Queen Victoria?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9270 is Victoria\nkg:8401 is father\nkg:9007 is mother", "response": "{\n  \"query\": [\n    \"?father kg:8401 kg:9270 .\",\n    \"?mother kg:9007 kg:9270 .\"\n  ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?castle wdt:P31 wd:Q467250.\",\n \t\t\"?castle wdt:P17 wd:Q30.\"\n \t]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23413 is castle\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23413 is castle\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n \t\"query\": [\n        \"?castle wdt:P31/wdt:P279* wd:Q23413 ;\",\n        \"wdt:P17 wd:Q30 .\"\n    ]\n}"}
{"question": "Are there any castles in the United States?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2659 is instance of\nkg:9811 is castle\nkg:2659 is instance of\nkg:0624 is subclass of\nkg:9811 is castle\nkg:6840 is country\nkg:2187 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?castle kg:9811 ?instance .\",\n \t\t\"?castle kg:6840 kg:2187 .\"\n \t]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?bird wdt:P1057 wd:Q8459; # P1057 is the property for conservation status, Q8459 represents critically endangered species\\n\",\n \t\t\"wdt:P31 wd:Q644. # P31 denotes instance of, and Q644 stands for bird\"\n \t]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P171 is parent taxon\nwd:Q5113 is bird\nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n \t\"query\": [\n \t\t\"?bird wdt:P171* wd:Q5113 ;\",\n \t\t\"?bird wdt:P141 wd:Q219127 .\"\n \t]\n}"}
{"question": "Give me a list of all critically endangered birds.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7081 is parent taxon\nkg:9693 is bird\nkg:6932 is IUCN conservation status\nkg:4268 is Critically Endangered", "response": "{\n \t\"query\": [\n \t\t\"?bird kg:9693 ?isBird .\",\n \t\t\"?bird kg:6932/kg:7081* kg:4268 .\"\n \t]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P141 wd:Q39605;\", \">// Q39605 is the code for Rhine river in Wikidata, P141 indicates the instance of property to specify it's a river. However, this line might not be necessary if we directly query using Rhine's ID (wd:Q39605) and focus on its connections with countries through borders or shared rivers properties. A more direct approach would be as follows for clarity and correctness in addressing the question at hand regarding connected countries by the Rhine river.\",\n \t\t\"wd:Q39605 wdt:P418 ?country.\", \">// P418 is used to denote a country through which a river flows, but this property does not exist. The correct approach would be using properties like 'flows through' (P297) or similar that might connect the Rhine with countries it passes through. However, for simplicity and based on common SPARQL querying practices in Wikidata, we often use P1365 (river basin) to indirectly find such connections.\",\n \t\t\"?country wdt:P31 wd:Q3624078.\" ,\">// Q3624078 is the code for 'sovereign state' or country in Wikidata. This line ensures we're only returning countries.\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n   \t\t    \t\t        \t"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q584 is Rhine\nwdt:P17 is country\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P31 wd:Q584;\",\n \t\t\"?country1 wdt:P17 ?river,\",\n \t\t\"?country2 wdt:P17 ?river.\",\n \t\t\"?country1 wdt:P31 wd:Q6256;\",\n \t\t\"?country2 wdt:P31 wd:Q6256;\"\n \t]\n}"}
{"question": "Which countries are connected by the Rhine?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7366 is Rhine\nkg:2020 is country\nkg:7795 is instance of\nkg:4041 is country", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7795 kg:4041 .\",\n \t\t\"?y kg:7366 ?x .\"\n \t]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?elizabeth wdt:P31 wd:Q9682;\",\n      \"?elizabeth wdt:P1704 \\\"Elizabeth II\\\"@en;\",\n      \"?elizabeth wdt:P185 ?father.\",\n      \"{?father wdt:P31 wd:Q5.} UNION {?father wdt:P31 wd:Q1266502}\"\n  ]\n}\n    "}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9682 is Elizabeth II\nwdt:P22 is father", "response": "{\n  \"query\": [\n    \"?father wdt:P22 wd:Q9682 .\"\n  ]\n}"}
{"question": "Who was the father of Queen Elizabeth II?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1364 is Elizabeth II\nkg:0150 is father", "response": "{\n  \"query\": [\n    \"?father kg:0150 kg:1364 .\"\n  ]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?element wdt:P31 wd:Q66279;\",\n \t\t\"FILTER NOT EXISTS {?element wdt:P31 wd:Q41678;}\"\n \t]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11344 is chemical element", "response": "{\n \t\"query\": [\n \t\t\"?element wdt:P31 wd:Q11344.\"\n \t]\n}"}
{"question": "Give me all chemical elements.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6296 is instance of\nkg:3198 is chemical element", "response": "{\n \t\"query\": [\"$element\"]\n \t}\n \t                \t\t"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q11696 .\",\n \t\t\"?president p:P39/psn:P580 ?startDate .\",\n \t\t\"FILTER(?startDate >= \\\"2003-01-01\\\"^^xsd:dateTime) .\"\n \t]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P582 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president wdt:P39 wd:Q11696 .\",\n \t\t\"?president p:P39 ?statement .\",\n \t\t\"?statement ps:P39 wd:Q11696 .\",\n \t\t\"?statement pq:P582 ?endTime .\",\n \t\t\"FILTER(?endTime >= \\\"2003-01-01T00:00:00Z\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Give me all American presidents of the last 20 years.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3971 is position held\nkg:3124 is position held\nkg:4794 is President of the United States\nkg:9895 is end time", "response": "{\n \t\"query\": [\n \t\t\"?president kg:3971/kg:3124 kg:4794 .\",\n \t\t\"?president kg:9895 ?endTime .\",\n \t\t\"FILTER(?endTime >= \\\"2003-01-01\\\"^^xsd:date)\"\n \t]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424; # Instance of movie\\n\",\n    \"       rdfs:label ?movieLabel过滤掉。根据要求，只返回资源（即实体），以下是符合要求的SPARQL查询：\\n\\n```sparql\\nSELECT ?movie \\nWHERE { \\n  ?movie wdt:P31 wd:Q11424. # Instance of movie\\n  ?movie rdfs:label \",\"%20\" ,\"en\" ,\"%22.\" ,\"\\nFILTER(LANG(?movieLabel) = \" ,\"nl\" ,\"%22). # Label in Dutch\\n  ?release wdt:P345 ?movie; # Find the release event of the movie\\n         wdt:P580 ?date. # Release date\\n}\\n```\\n请注意，上述SPARQL查询需要根据实际的电影名称和语言标签进行调整，并且Wikidata中可能没有直接包含荷兰上映日期的信息。此外，由于问题的具体性，这个查询可能无法直接在Wikidata上找到确切的答案，因为电影上映信息通常不是以这种方式结构化的。因此，该查询提供了一个概念性的框架，而不是一个可以直接执行并返回结果的精确查询。根据实际数据结构调整和优化是必要的。但是，按照要求只返回资源（实体），上述查询仅包含`?movie`作为变量。请注意，原始请求中的电影名称“Worst Case Scenario”并未直接在SPARQL中使用，因为Wikidata查询可能需要更具体的信息或ID来定位特定的电影条目。如果知道具体的电影ID，可以进一步优化查询以匹配该电影。由于这些限制，提供的查询是概念性的，并且假设了某些结构的存在，这可能与实际数据模型不完全一致。因此，此查询主要用于展示如何构建一个只返回资源（实体）的SPARQL查询框架。对于特定电影的具体上映日期信息，建议直接访问相关电影数据库或官方网站获取最准确的信息。由于上述解释中的格式和内容超出了仅提供生成的SPARQL查询的要求，下面是根据要求简化后的、概念性的SPARQL查询，它只返回资源（实体），但请注意这可能需要进一步调整以适应实际数据结构：\\n\\n```sparql\\nSELECT ?movie \\nWHERE { \\n  ?movie wdt:P31 wd:Q11424. # Instance of movie\\n}\\n```\\n这个查询仅用于展示如何返回资源（实体），并不直接回答原始问题。对于特定电影的上映日期，需要更具体的数据和结构来构建准确的查询。\"\n  ]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6667101 is Worst Case Scenario\nwdt:P577 is publication date", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424; # movie instance of film\\n\",\n \t\t\"wdt:P1476 ?title; # has title\\n\",\n \t\t\"wdt:P577 ?releaseDate. # publication date\\n\",\n \t\t\"\\n\",\n \t\t\"?title rdfs:label \\\"Worst Case Scenario\\\"@en.\\n\"\n \t]\n}"}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7286 is Worst Case Scenario\nkg:0465 is publication date", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\"\n \t\t,\"WHERE {\"\n \t\t,\"?movie kg:id 'kg:7286' .\"\n \t\t,\"?event kg:movie ?movie .\"\n \t\t,\"?event kg:type 'cinema_release' .\"\n \t\t,\"?event kg:country 'Netherlands' .\"\n \t\t,\"?event kg:date ?resource .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?lance_bass wdt:P31 wd:Q5.\",\n    \"?lance_bass rdfs:label \\\"Lance Bass\\\"@en.\",\n    \"?lance_bass wdt:P26 ?spouse.\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q443120 is Lance Bass\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"?spouse wdt:P26 wd:Q443120 .\"\n  ]\n}"}
{"question": "Whom did Lance Bass marry?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6052 is Lance Bass\nkg:2399 is spouse", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?spouse WHERE { kg:6052 kg:2399 ?spouse . }\"] }"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q208549 .\",\n \t\t\"?country rdfs:label ?countryLabel .\",\n \t\t\"?language wdt:P37 wd:Q208549 .\",\n \t\t\"?language wdt:P361 ?country .\",\n \t\t\"FILTER (LANG(?countryLabel) = 'en')\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q843 is Pakistan\nwdt:P2936 is language used", "response": "{\n \t\"query\": [\n \t\t\"?language wdt:P2936 wd:Q843.\"\n \t]\n}"}
{"question": "What languages are spoken in Pakistan?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6648 is Pakistan\nkg:4682 is language used", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    kg:6648 kg:4682 ?resource .\\n}\"] }"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?billClinton wdt:P45 ?daughter .  \",\n \t\t\"?daughter wdt:P26 ?husband .\",\n \t\t\"?husband ?label ?name .\"\n \t]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124 is Bill Clinton\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n \t\"query\": [\n \t\t\"?daughter wdt:P40 wd:Q1124.\",\n \t\t\"?spouse wdt:P26 ?daughter.\"\n \t]\n}"}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9068 is Bill Clinton\nkg:6665 is child\nkg:3317 is spouse", "response": "{\n \t\"query\": [\n \t\t\"?daughter kg:6665 kg:9068 .\",\n \t\t\"?spouse kg:3317 ?daughter .\"\n \t]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?apollo11 wdt:P31 wd:Q41082;\",\n \t\t\"?apollo11 wdt:P937 ?astronaut.\",\n \t\t\"?astronaut wdt:P27 wd:Q30.\"\n \t]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43653 is Apollo 11\nwdt:P1029 is crew member(s)", "response": "{\n \t\"query\": [\n \t\t\"?crew wdt:P1029 wd:Q43653.\"\n \t]\n}"}
{"question": "Who was on the Apollo 11 mission?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4688 is Apollo 11\nkg:5941 is crew member(s)", "response": "{\n \t\"query\": [\"$crew\"]\n \t}\n \t                \t\t"}
{"question": "Who was called Scarface?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource rdfs:label ?name.\",\n \t \"?resource wdt:P1477 ?alternativeName.\",\n \t \"FILTER(LANG(?name) = 'en')\",\n \t \"FILTER(CONTAINS(LCASE(?alternativeName), \\\"scarface\\\"))\",\n \t \"{?resource wdt:P31 wd:Q5.} UNION {?resource wdt:P31 wd:Q210468.}\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n    "}
{"question": "Who was called Scarface?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1449 is nickname", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P1449 ?nickname .\",\n \t\t\"FILTER(?nickname = \\\"Scarface\\\")\"\n \t]\n}"}
{"question": "Who was called Scarface?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6080 is nickname", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:6080 ?nickname . \"\n \t\t] }\n \t\t            \t \t\t"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P297 wd:Q75;\"\n \t\t, \"?river wdt:P361/wdt:P131* ?northSea.\"\n \t\t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n    "}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P403 is mouth of the watercourse\nwd:Q1693 is North Sea", "response": "{\n \t\"query\": [\n \t\t\"?river wdt:P31 wd:Q4022 .\",\n \t\t\"?river wdt:P403 wd:Q1693 .\"\n \t]\n}"}
{"question": "Which rivers flow into the North Sea?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4180 is instance of\nkg:3859 is river\nkg:2573 is mouth of the watercourse\nkg:7040 is North Sea", "response": "{\n \t\"query\": [\n \t\t\"?river kg:3859 ?instance .\",\n \t\t\"?river kg:2573 kg:7040 .\"\n \t]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?fortKnox wdt:P131* ?location .\",\n    \"?fortKnox rdfs:label \\\"Fort Knox\\\"@en .\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8962067 is Fort Knox\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"?item wdt:P131 ?location .\",\n    \"FILTER (?item = wd:Q8962067)\"\n  ]\n}"}
{"question": "Where is Fort Knox located?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5049 is Fort Knox\nkg:8699 is located in the administrative territorial entity", "response": "{\n \t\"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5049 kg:8699 ?resource . }\"]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?emperor wdt:P31 wd:Q7504.\"\n \t]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q268218 is Emperor of China", "response": "{\n \t\"query\": [\n \t\t\"?emperor wdt:P39 wd:Q268218.\"\n \t]\n}"}
{"question": "How many emperors did China have?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6554 is position held\nkg:0781 is Emperor of China", "response": "{\n \t\"query\": [\n \t\t\"?emperor kg:6554/kg:0781 .\"\n \t]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?turtle wdt:P136 wd:Q208549 .\",\n    \"?turtle wdt:P140 wd:Q7105 .\",\n    \"{?turtle wdt:P140 wd:Q7105.} UNION {?turtle wdt:P140 wd:Q7105.}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n    "}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q1381762 is Teenage Mutant Ninja Turtles", "response": "{\n \t\"query\": [\n \t\t\"?turtle wdt:P361 wd:Q1381762 .\"\n \t]\n}"}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0588 is part of\nkg:3896 is Teenage Mutant Ninja Turtles", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\"\n \t\t,\"WHERE {\"\n \t\t,\"?resource kg:0588 kg:3896 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?piccadilly wdt:P131 ?start_point .\",\n    \"{\",\n    \"  wd:Q10875 wdt:P625 ?coords .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124023 is Piccadilly\nwdt:P559 is terminus", "response": "{\n \t\"query\": [\n \t\t\"?start wdt:P559 wd:Q1124023.\"\n \t]\n}"}
{"question": "Where does Piccadilly start?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5579 is Piccadilly\nkg:8836 is terminus", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?start WHERE {\",\n \t\t\"  kg:5579 kg:8836 ?start .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?obamaWife wdt:P31 wd:Q5; # Get human entities for Obama's wife (assuming a direct link from Obama to his wife is known or can be inferred in another step not shown here for simplicity) \\n\",\n \t\t\"wdt:P802 ?university.\" ,\n \t\t\"?university wdt:P31 wd:Q3961 # Filter to get only universities\"\n \t]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwdt:P69 is educated at\nwdt:P361 is part of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n \t\"query\": [\n \t\t\"?wife wdt:P26 wd:Q76.\",\n \t\t\"?university wdt:P69 ?wife.\",\n \t\t\"?university wdt:P31 wd:Q3918.\"\n \t]\n}"}
{"question": "What is the name of the university where Obama's wife studied?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4581 is Barack Obama\nkg:1069 is spouse\nkg:3662 is educated at\nkg:9515 is part of\nkg:6870 is instance of\nkg:9045 is subclass of\nkg:8505 is university", "response": "{\n \t\"query\": [\n \t\t\"?wife kg:1069 kg:4581.\",\n \t\t\"?university kg:3662 ?wife.\",\n \t\t\"?university kg:8505 kg:6870.\"\n \t]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?paraguay wdt:P31 wd:Q30; # Paraguay is an instance of country (Q30 for countries in general, but we use it to identify Paraguay by its label or other means if necessary since Q30 isn't specific to Paraguay itself but can be used as a filter alongside the name or identifier of Paraguay).\\n\",\n    \"?paraguay wdt:P576 ?independenceDate. # The independence date of Paraguay\\n\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q733 is Paraguay\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"?resource wdt:P571 ?date .\",\n    \"?resource wdt:P31 wd:Q733 .\"\n  ]\n}"}
{"question": "When did Paraguay proclaim its independence?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7772 is Paraguay\nkg:2115 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:7772 kg:2115 ?resource . \\n}\"] }"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?player ?shortestActivePlayer ?height .\",\n \t \"?player wdt:P106 wd:Q239534 .\" , \">// Occupation is basketball player (NBA players are a subset of this, but we use this for simplicity and broader coverage in Wikidata query context)\"\n \t\t,\n \t \"?player wdt:P577 ?debut .\", \">// First event as professional\"\n \t\t,\n \t \"OPTIONAL { ?player wdt:P1312 ?height . }\" , \">// Height of the player\"\n \t\t,\n \t \"FILTER NOT EXISTS { ?player wdt:P576 ?end. }\" ,\n \t \"} ORDER BY ASC(?height) LIMIT 1\"\n \t]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P54 is member of sports team\nwdt:P118 is league\nwd:Q155223 is National Basketball Association\np:P54 is member of sports team\npq:P582 is end time\nwdt:P2048 is height", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P106 wd:Q3665646 .\",\n \t\t\"?player p:P54 ?memberStatement .\",\n \t\t\"?memberStatement ps:P54/wdt:P118 wd:Q155223 .\",\n \t\t\"OPTIONAL { ?memberStatement pq:P582 [] } .\",\n \t\t\"?player wdt:P2048 ?height .\"\n \t]\n}"}
{"question": "How short is the shortest active NBA player?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is occupation\nkg:7892 is basketball player\nkg:5833 is member of sports team\nkg:9646 is league\nkg:3977 is National Basketball Association\nkg:2614 is member of sports team\nkg:5985 is end time\nkg:4026 is height", "response": "{\n \t\"query\": [\n \t\t\"?player kg:2623/kg:7892 ?occupation.\",\n \t\t\"?player kg:5833/kg:2614 ?team.\",\n \t\t\"?team kg:9646 ?league.\",\n \t\t\"?league kg:3977 ?nba.\",\n \t\t\"OPTIONAL{?player kg:5985 ?endTime.}\",\n \t\t\"?player kg:4026 ?height.\"\n \t]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P1411 wd:Q2058639.\",\n    \"?company wdt:P571 ?inception.\"\n  ]\n}"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q536133 is Jack Wolfskin\nwdt:P571 is inception", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n    wd:Q536133 wdt:P571 ?resource .\\n}\"] }"}
{"question": "When was Jack Wolfskin founded?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is Jack Wolfskin\nkg:3303 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:5071 kg:3303 ?resource . \\n}\"] }"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?airChina wdt:P31 wd:Q4117609; # Air China is an airline company\\n    wdt:P159 ?headquarterLocation. # P159 is for headquarters location\\n    ?headquarterLocation wdt:P31/wdt:P279* wd:Q515. # Filter to get city as the type of headquarter location\\n  \",\n    \"SELECT ?headquarterLocation\"\n  ]\n}"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P159 is headquarters location", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?headquarter WHERE {\\n  wd:Q51747 wdt:P159 ?headquarter .\\n}\"] }"}
{"question": "In which city is the headquarter of Air China?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7473 is Air China\nkg:7154 is headquarters location", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE {\\n    kg:7473 kg:7154 ?resource .\\n}\"] }"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?brewery wdt:P131+ wd:Q25084; # Find items that are located in Czech Republic (for context, though not strictly necessary for this specific query as Pilsner Urquell's brewery is uniquely identifiable by its product and property relationships)\\n\",\n    \"wdt:P1796 wd:Q38562;\", \"># Pilsner Urquell has the instance of ?brewery\\n\",\n    \"?brewery wdt:P571 ?foundingDate.\"\n  ]\n}"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q948831 is Plzeňský Prazdroj\nwdt:P571 is inception", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q948831 wdt:P571 ?resource . }\"] }"}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7689 is Plzeňský Prazdroj\nkg:3236 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE {\\n    kg:7689 kg:3236 ?resource .\\n}\"] }"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?event wdt:P31 wd:Q905842.\",\n    \"?event wdt:P793 wd:Q614853.\",\n    \"?event wdt:P585 ?pointInTime.\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19024 is Boston Tea Party\nwdt:P585 is point in time", "response": "{\n  \"query\": [\n    \"?event wdt:P31 wd:Q19024 .\",\n    \"?event wdt:P585 ?pointInTime\"\n  ]\n}"}
{"question": "When did the Boston Tea Party take place?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3929 is Boston Tea Party\nkg:0565 is point in time", "response": "{\n \t\"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:3929 kg:0565 ?resource }\"]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?animal wdt:P141 wd:Q83782 ;\",\n \t\t\"wdt:P31 wd:Q16521 .\"\n \t]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n \t\"query\": [\n \t\t\"?animal wdt:P141 wd:Q219127.\"\n \t]\n}"}
{"question": "Which animals are critically endangered?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7101 is IUCN conservation status\nkg:9298 is Critically Endangered", "response": "{\n \t\"query\": [\n \t\t\"?animal kg:7101 kg:9298 .\"\n \t]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?politician wdt:P31 wd:Q82750; \", \">// Q82750 is the wikidata ID for politician entity type, filter out those who are politicians first. Then check their spouses' nationality to be German (Q183) in next line. The query returns only resources of ?politician which match the criteria. However, this basic structure needs refinement as it doesn't directly link to spouse and then to nationality without additional predicates or qualifiers that might specify these relationships more accurately on Wikidata.\",\n \t\t\"?politician wdt:P26 ?spouse . \", \">// P26 is the property for 'spouse' in wikidata, linking politicians with their spouses. This line connects each politician to their spouse entity within the graph.\",\n \t\t\"?spouse wdt:P27 wd:Q183 .\" , \">// Q183 represents Germany as a country on Wikidata, and P27 is the property for 'country of citizenship'. This line checks if any spouse has Germany as their country of citizenship.\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n  \t"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?politician wdt:P106 wd:Q82955 .\",\n \t\t\"?politician wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P27 wd:Q183 .\"\n \t]\n}"}
{"question": "Which politicians were married to a German?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5848 is occupation\nkg:1708 is politician\nkg:0863 is spouse\nkg:5898 is country of citizenship\nkg:7899 is Germany\nkg:6832 is place of birth\nkg:5012 is country\nkg:7899 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?politician kg:0863 ?spouse .\",\n \t\t\"?spouse kg:5898 kg:7899 .\",\n \t\t\"?politician kg:5848 kg:1708 .\"\n \t]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?earth wdt:P518 ?diameter .\",\n \t\t\"?earth rdfs:label ?label .\",\n \t\t\"FILTER(LANG(?label) = 'en') .\"\n \t]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2 is Earth\nwdt:P2386 is diameter", "response": "{\n  \"query\": [\n    \"?earth wdt:P2386 ?diameter .\",\n    \"FILTER(?earth = wd:Q2)\"\n  ]\n}"}
{"question": "How big is the earth's diameter?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8706 is Earth\nkg:1993 is diameter", "response": "{\n  \"query\": [\n    \"?resource kg:1993 kg:8706 .\"\n  ]\n}"}
{"question": "Is the wife of President Obama called Michelle?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is the wife of President Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?president wdt:P39 wd:Q11696 ;\",\n    \"wdt:P26 ?wife .\",\n    \"?wife rdfs:label \\\"Michelle Obama\\\"@en.\"\n  ]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P1564 \\\"MN\\\"; \",\n \t\t\"wdt:P31 wd:Q35665. \"\n \t]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1813 is short name", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q35657 .\",\n \t\t\"?resource wdt:P1813 \\\"MN\\\".\"\n \t]\n}"}
{"question": "Which U.S. state has the abbreviation MN?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3306 is instance of\nkg:9063 is U.S. state\nkg:3554 is short name", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:9063 kg:3306 ; kg:3554 \\\"MN\\\" . }\"] }"}
{"question": "When did Muhammad die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?muhammad wdt:P570 ?deathDate .\",\n    \"wd:Q23449 sdmx-dimension:refArea wd:Q23449 ;\",\n    \"wdt:P31 wd:Q5 ;\",\n    \"rdfs:label \\\"Muhammad\\\"@en .\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9458 is Muhammad\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"?muhammad wdt:P570 ?dateOfDeath .\",\n    \"FILTER(?muhammad = wd:Q9458)\"\n  ]\n}"}
{"question": "When did Muhammad die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is Muhammad\nkg:4086 is date of death", "response": "{\n  \"query\": [\n    \"?resource kg:4086 ?date .\",\n    \"?resource kg:isSameAs kg:4901 .\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?governor wdt:P39 wd:Q1048752 .\",\n    \"?governor wdt:P31 wd:Q5 .\"\n  ]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1439 is Texas\nwdt:P1313 is office held by head of government\nwd:Q5589725 is Governor of Texas\nwd:Q5589725 is Governor of Texas\nwdt:P1308 is officeholder", "response": "{\n \t\"query\": [\n \t\t\"?governor wdt:P1308 wd:Q5589725.\"\n \t]\n}"}
{"question": "Who is the governor of Texas?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5711 is Texas\nkg:0217 is office held by head of government\nkg:9831 is Governor of Texas\nkg:9831 is Governor of Texas\nkg:6636 is officeholder", "response": "{\n \t\"query\": [\"$officeHolder\"]\n \t}\n \t                \t\t"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?kurosawa wdt:P31 wd:Q5; \",\n \t\t\"wdt:P147 wd:Q902; \",\n \t\t\"wdt:P86 ?movies .\",\n \t\t\"?movies wdt:P31 wd:Q11424. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q8006 is Akira Kurosawa", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 wd:Q8006 .\"\n \t]\n}"}
{"question": "Which movies did Kurosawa direct?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6393 is director\nkg:4441 is Akira Kurosawa", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:6393 kg:4441 .\"\n \t]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?charmed wdt:P31 wd:Q2456879; # Charmed is an instance of television series (Q2456879) \\n\",\n \t\t\"wdt:P161 ?actor. # ?actor is cast member of Charmed\\n\",\n \t\t\"?actor wdt:P856 ?website.\" ]\n }"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\np:P161 is cast member\nps:P161 is cast member\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"?show wdt:P31 wd:Q162371.\",\n \t\t\"?show p:P161 ?castMemberStatement.\",\n \t\t\"?castMemberStatement ps:P161 ?actor.\",\n \t\t\"?actor wdt:P856 ?website.\"\n \t]\n}"}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7013 is Charmed\nkg:2103 is cast member\nkg:1343 is cast member\nkg:2499 is official website", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:2103 kg:7013 .\",\n \t\t\"?actor kg:1343 ?castMember .\",\n \t\t\"?castMember kg:2499 ?website .\"\n \t]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$prefix wd: <http://www.wikidata.org/entity/> $prefix wdt: <http://www.wikidata.org/prop/direct/> SELECT ?library WHERE { ?library wdt:P31 wd:Q250847 ; wdt:P571 ?inception . FILTER(?inception < \\\"1400-01-01\\\"^^xsd:gYear) }\"]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n \t\"query\": [\n \t\t\"?library wdt:P31 wd:Q7075.\",\n \t\t\"?library wdt:P571 ?inception.\",\n \t\t\"FILTER(?inception < \\\"1400-01-01\\\"^^xsd:dateTime)\"\n \t]\n}"}
{"question": "Give me all libraries established before 1400.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is instance of\nkg:6349 is subclass of\nkg:3669 is library\nkg:4653 is inception", "response": "{\n \t\"query\": [\n \t\t\"?library kg:3669 ?type .\",\n \t\t\"?library kg:4653 ?inception .\",\n \t\t\"FILTER(?inception < 1400)\"\n \t]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?island wdt:P31 wd:Q4908256; # Instance of island\\n\",\n \t\t\"wdt:P17 wd:Q55; # Country is Netherlands\\n\",\n \t\t\"wdt:P402 wd:Q150. # Part of Frisian Islands\\n\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwdt:P361 is part of\nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q23442 is island", "response": "{\n \t\"query\": [\n \t\t\"?island wdt:P31 wd:Q23442;\",\n \t\t\"?island wdt:P361 wd:Q76936;\",\n \t\t\"?island wdt:P17 wd:Q55.\"\n \t]\n}"}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:7181 is part of\nkg:9177 is country\nkg:0464 is Netherlands\nkg:6116 is instance of\nkg:9691 is island", "response": "{\n \t\"query\": [\"$island\"]\n \t}\n \t                \t\t"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?museum wdt:P180 wd:Q263495.\"\n \t]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471379 is The Scream\nwdt:P527 is has part(s)\nwdt:P276 is location\nwdt:P31 is instance of\nwd:Q207694 is art museum", "response": "{\n \t\"query\": [\n \t\t\"?museum wdt:P527 wd:Q471379 ;\",\n \t\t\"wdt:P31 wd:Q207694 .\"\n \t]\n}"}
{"question": "Which museum exhibits The Scream by Munch?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3794 is The Scream\nkg:7898 is has part(s)\nkg:1678 is location\nkg:3411 is instance of\nkg:9154 is art museum", "response": "{\n \t\"query\": [\"$museum\"]\n \t}\n \t                \t\t"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?de_beers wdt:P31 wd:Q4830453.\",\n    \"?de_beers wdt:P571 ?inception.\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471891 is De Beers\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"?de_beers wdt:P571 ?inception .\",\n    \"FILTER (?de_beers = wd:Q471891)\"\n  ]\n}"}
{"question": "When was the De Beers company founded?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5562 is De Beers\nkg:9354 is inception", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE {\\n    kg:5562 kg:9354 ?resource .\\n}\"] }"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?president wdt:P39 wd:Q11696 ; # Position held is President of the United States\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"?replacedBy wdt:P39 wd:Q11696 .\",\n    \"?item p:P39/ps:P39 wd:Q11696 ;\",\n    \"p:P39 ?statement .\",\n    \"?statement pq:P580 ?startDate ;\",\n    \"pq:P582 ?endDate ;\",\n    \"pq:P1366 ?replacedBy .\",\n    \"{\",\n      \"?item wdt:P570 ?deathDate .\",\n      \"FILTER(?deathDate < ?endDate)\",\n      \"{\",\n        \"SELECT ?item (MAX(?startDate) AS ?maxStartDate) {\",\n          \"?item p:P39/ps:P39 wd:Q11696 ;\",\n          \"p:P39 ?statement .\",\n          \"?statement pq:P580 ?startDate .\",\n          \"FILTER NOT EXISTS {?item wdt:P570 ?deathDate .}\",\n          \"UNION {\",\n            \"?item wdt:P570 ?deathDate .\",\n            \"FILTER(?deathDate < ?endDate)\"\n          \t,\n        \"} GROUP BY ?item\",\n      \"}\",\n    \"}\",\n    \"FILTER(?startDate = ?maxStartDate)\",\n    \"{\",\n      \"SELECT ?replacedBy (MIN(?replaceDate) AS ?minReplaceDate) {\",\n        \"?item p:P39/ps:P39 wd:Q11696 ;\",\n        \"p:P39 ?statement .\",\n        \"?statement pq:P580 ?startDate ;\",\n        \"pq:P582 ?endDate ;\",\n        \"pq:P1366 ?replacedBy .\",\n        \"{\",\n          \"?item wdt:P570 ?deathDate .\",\n          \"FILTER(?deathDate < ?endDate)\",\n        \"}\",\n      \"} GROUP BY ?replacedBy\",\n    \"}\",\n    \"FILTER(?endDate = ?minReplaceDate)\"\n  ]\n}"}
{"question": "Who became president after JFK died?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9891 is John F. Kennedy\nkg:7907 is position held\nkg:3493 is position held\nkg:8998 is President of the United States\nkg:8421 is replaced by", "response": "{\n  \"query\": [\n    \"?president kg:8421 ?replacedBy.\",\n    \"?president kg:7907 kg:8998.\",\n    \"kg:9891 kg:7907 kg:8998.\"\n  ]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?juan_carlos_i wdt:P31 wd:Q7605;\",\n    \"?juan_carlos_i wdt:P26 ?wife_of_juan_carlos_i.\",\n    \"?wife_of_juan_carlos_i wdt:P24 ?mother.\",\n    \"?wife_of_juan_carlos_i wdt:P25 ?father.\"\n  ]\n}\n    "}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19943 is Juan Carlos I of Spain\nwdt:P26 is spouse\nwdt:P40 is child", "response": "{\n \t\"query\": [\n \t\t\"?juan_carlos wdt:P26 ?spouse.\",\n \t\t\"?parent wdt:P40 ?spouse.\"\n \t]\n}"}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7309 is Juan Carlos I of Spain\nkg:9505 is spouse\nkg:1329 is child", "response": "{\n \t\"query\": [\"$parent1\", \"$parent2\"]\n \t}\n \t            \t\t"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q325976.\",\n    \"?work wdt:P50 ?author.\"\n  ]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45875 is A Song of Ice and Fire\nwdt:P106 is occupation\nwd:Q6625963 is novelist", "response": "{\n \t\"query\": [\n \t\t\"?novelist wdt:P106 wd:Q6625963 .\",\n \t\t\"?work wdt:P50 ?novelist .\",\n \t\t\"?work wikibase:sense wd:Q45875\"\n \t]\n}"}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2137 is A Song of Ice and Fire\nkg:0038 is occupation\nkg:9798 is novelist", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2137 kg:0038 ?resource . ?resource kg:9798 kg:9798 . }\"] }"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?beatles wdt:P31 wd:Q6581042.\",\n    \"?album wdt:P86 ?beatles;\",\n            \"wdt:P31 wd:Q3626498;\",\n            \"wdt:P449 wd:Q719580.\",\n    \"?studio wdt:P990 ?album.\"\n  ]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q1299 is The Beatles\nwdt:P577 is publication date\nwdt:P483 is recorded at studio or venue", "response": "{\n \t\"query\": [\n \t\t\"?album wdt:P31 wd:Q482994 ;\",\n \t\t\"?album wdt:P175 wd:Q1299 ;\",\n \t\t\"?album wdt:P483 ?studio .\"\n \t]\n}"}
{"question": "In which studio did the Beatles record their first album?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2481 is instance of\nkg:0784 is album\nkg:2791 is performer\nkg:1100 is The Beatles\nkg:7038 is publication date\nkg:1938 is recorded at studio or venue", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?studio WHERE { ?album kg:0784 ?isAlbum ; kg:2791 kg:1100 ; kg:7038 ?publicationDate ; kg:1938 ?studio . FILTER (?isAlbum = true) }\"] }"}
{"question": "When did princess Diana die?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?diana wdt:P31 wd:Q5; # is an instance of human (to ensure we're looking at a person, not something else with the same name or label)\"\n   ,\n    \"wdt:P1559 ?princessName; # has alternative name\"\n    ,\n    \"?princessName rdfs:label \\\"Princess Diana\\\"@en; # where one of those names is Princess Diana in English\"\n    ,\n    \"?diana wdt:P570 ?deathDate.\" ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9685 is Diana, Princess of Wales\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"?resource wdt:P570 ?date .\",\n    \"FILTER (?resource = wd:Q9685)\"\n  ]\n}"}
{"question": "When did princess Diana die?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8027 is Diana, Princess of Wales\nkg:4930 is date of death", "response": "{\n  \"query\": [\n    \"?resource kg:4930 ?date .\",\n    \"?resource kg:8027 kg:Diana,Princess_of_Wales .\"\n  ]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?intel wdt:P31 wd:Q4830453;\",\n    \"?intel wdt:P112 ?founder.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Who founded Intel?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q248 is Intel\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q248 .\"\n \t]\n}"}
{"question": "Who founded Intel?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5687 is Intel\nkg:2695 is founded by", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?founder WHERE {\\n  kg:5687 kg:2695 ?founder .\\n}\"] }"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?youngestPlayer\"\n \t]\n \t}\n \t                \t\t"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P118 is league\nwd:Q9448 is Premier League\nwdt:P54 is member of sports team\nwdt:P569 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?player wdt:P54 ?team; wdt:P569 ?dob; wdt:P118 wd:Q9448. \",\n \t\t\"FILTER NOT EXISTS {[] wdt:P54 ?team; wdt:P569 ?otherDob; wdt:P118 wd:Q9448. FILTER(?otherDob < ?dob)}\"\n \t]\n}"}
{"question": "Who is the youngest player in the Premier League?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8065 is league\nkg:5247 is Premier League\nkg:7482 is member of sports team\nkg:9621 is date of birth", "response": "{\n \t\"query\": [\n \t\t\"?player kg:7482 ?team.\",\n \t\t\"?team kg:8065 kg:5247.\",\n \t\t\"?player kg:9621 ?dob.\"\n \t]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P17 wd:Q3064; \", \">// United States (country code Q3064) and South Carolina is part of it, but this needs to be refined for specific state identification in SPARQL which might involve additional properties or qualifiers not directly apparent without detailed Wikidata exploration on states' unique identifiers. For the sake of this example, focusing on rivers and lakes generally within a country entity related query approach as direct state-specific property isn't straightforwardly provided here without more specific exploration into South Carolina's Q item for its geography specifics in Wikidata structure which might involve wdt:P1306 or similar for administrative divisions but requires exact Q code for SC to refine further accurately. Thus, focusing on rivers and lakes broadly within US as a conceptual approach with the understanding that refinement towards South Carolina specifically would require additional exploration into its unique Q item properties for geography specifics in Wikidata structure.\",\n \t\t\"{?resource wdt:P31 wd:Q402; } \", \">// Instance of river (Q402) or lake (wd:Q2325998), but here only rivers are directly queried due to the conceptual approach taken, lakes would similarly follow with their Q item for instance of a lake. The query structure is shown for rivers as an example, understanding that both should be included in a full query which would involve UNION or similar SPARQL constructs to include both categories accurately reflecting the question's intent on both rivers and lakes within South Carolina specifically which requires more detailed exploration into its unique Q item properties for geography specifics in Wikidata structure for accurate refinement beyond this conceptual example provided here focusing broadly on US with understanding of needed refinement towards SC specifically for full accuracy as per query request details. Thus, a direct SPARQL translation reflecting the exact resources for rivers and lakes within South Carolina would require more detailed exploration into its unique Q item properties for geography specifics in Wikidata structure for accurate refinement beyond this conceptual example provided here focusing broadly on US with understanding of needed refinement towards SC specifically for full accuracy as per query request details.\"\n \t\t,\"FILTER NOT EXISTS {?resource wdt:P31 wd:Q28640}.\" ]}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P131 is located in the administrative territorial entity\nwd:Q1456 is South Carolina\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23397 is lake", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31/wdt:P279* wd:Q23397 .\",\n \t\t\"?resource wdt:P131* wd:Q1456 .\"\n \t]\n}"}
{"question": "How many rivers and lakes are in South Carolina?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6192 is located in the administrative territorial entity\nkg:4355 is South Carolina\nkg:5420 is instance of\nkg:6123 is subclass of\nkg:6328 is lake", "response": "{\n \t\"query\": [\n \t\t\"?river_or_lake kg:5420 kg:6328 .\",\n \t\t\"?river_or_lake kg:6192 kg:4355 .\"\n \t]\n}"}
{"question": "Who was called Rodzilla?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was called Rodzilla?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource rdfs:label ?name.\",\n \t \"?resource wdt:P31 wd:Q5.\",\n \t \"FILTER(LANG(?name) = 'en')\",\n \t \"FILTER(CONTAINS(LCASE(?name), \\\"rodzilla\\\"))\"\n \t]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q3624078.\",\n \t\t\"?country wdt:P36 ?capital.\"\n \t]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P36 is capital", "response": "{\n \t\"query\": [\n \t\t\"?country wdt:P31 wd:Q6256.\",\n \t\t\"?country wdt:P30 wd:Q15.\",\n \t\t\"?country wdt:P36 ?capital.\"\n \t]\n}"}
{"question": "Give me the capitals of all countries in Africa.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1721 is instance of\nkg:6700 is country\nkg:7478 is continent\nkg:8902 is Africa\nkg:0430 is capital", "response": "{\n \t\"query\": [\n \t\t\"?country kg:6700 ?instance .\",\n \t\t\"?country kg:7478 kg:8902 .\",\n \t\t\"?country kg:0430 ?capital .\"\n \t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?manhattanBridge wdt:P31 ?type .\",\n \t\t\"?bridge wdt:P31 ?type .\",\n \t\t\"?bridge rdfs:label ?label .\",\n \t\t\"FILTER (?bridge != wd:Q90584)\" ,\"FILTER (LANG(?label) = 'en')}\"\n \t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125050 is Manhattan Bridge\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q12280 is bridge\nwd:Q12280 is bridge", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31/wdt:P279* wd:Q125050 .\",\n \t\t\"?item wdt:P31 wd:Q12280.\"\n \t]\n}"}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3760 is Manhattan Bridge\nkg:4675 is instance of\nkg:4675 is instance of\nkg:4675 is instance of\nkg:6359 is subclass of\nkg:6633 is bridge\nkg:6633 is bridge", "response": "{\n \t\"query\": [\n \t\t\"?bridge kg:4675 kg:6633 .\",\n \t\t\"?bridge kg:6359/kg:4675* kg:3760\"\n \t]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5;\",\n    \"wdt:P802 wd:Q46457.\",\n    \"?company wdt:P1416 ?person.\"\n  ]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q36215 is Mark Zuckerberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q783794 is company", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P112 wd:Q36215 .\",\n \t\t\"?company wdt:P31/wdt:P279* wd:Q783794 .\"\n \t]\n}"}
{"question": "How many companies were founded by the founder of Facebook?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1526 is founded by\nkg:1376 is Mark Zuckerberg\nkg:1343 is instance of\nkg:0834 is subclass of\nkg:8594 is company", "response": "{\n \t\"query\": [\"$company\"]\n \t}\n \t                \t\t"}
{"question": "Which book has the most pages?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?book WHERE {\",\n \t\t\"  ?book wdt:P31 wd:Q571084 .\", \">// Q571084 is the Wikidata ID for 'book', but this might not be specific enough as it doesn't directly address the page count. A more accurate query would require a property that denotes the number of pages, which isn't straightforwardly available in Wikidata's schema without additional qualifiers or statements about books.\",\n \t\t\"  ?book wdt:P1408 ?pageCount .\", \">// P1408 is for 'number of pages', but this assumes each book has a direct statement for its page count, which might not be the case for all entries in Wikidata. A more complex query would be needed to aggregate and compare these values.\",\n \t\t\"  SERVICE wikibase:sample {\",\n \t\t\"    ?book wdt:P1408 ?pageCount .\", \">// This part is illustrative; actual retrieval of 'most pages' requires aggregation functions not directly supported in this simple form. A more complex query involving subqueries or FILTERS would be needed to find the maximum value.\",\n \t\t\"  }\",\n \t\t\"}\"\n \t]\n}\n  \t"}
{"question": "Which book has the most pages?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q571 is book\nwdt:P1104 is number of pages", "response": "{\n \t\"query\": [\n \t\t\"?book wdt:P31 wd:Q571 ;\",\n \t\t\"wdt:P1104 ?pages .\"\n \t]\n}"}
{"question": "Which book has the most pages?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2272 is instance of\nkg:1916 is subclass of\nkg:8797 is book\nkg:6305 is number of pages", "response": "{\n \t\"query\": [\n \t\t\"?book kg:1916 kg:8797 ;\",\n \t\t\"?book kg:6305 ?pages .\"\n \t]\n}\n      "}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35684 .\",\n \t\t\"?state wdt:P2046 ?area .\",\n \t\t\"OPTIONAL { ?state wdt:P150 ?part. }\",\n \t\t\"FILTER NOT EXISTS { ?part wdt:P150 []. }\",\n \t\t\"SERVICE wikibase:maxAggregation { ?state ?areaMax ?area. }\"\n \t]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area", "response": "{\n \t\"query\": [\n \t\t\"?state wdt:P31 wd:Q35657 .\",\n \t\t\"?state wdt:P2046 ?area .\"\n \t]\n}"}
{"question": "What is the largest state in the United States?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1426 is instance of\nkg:7930 is U.S. state\nkg:5830 is area", "response": "{\n \t\"query\": [\n \t\t\"?state kg:7930 ?usState .\",\n \t\t\"?state kg:5830 ?area .\",\n \t\t\"{SELECT ?state WHERE { ?state kg:7930 ?usState. ?state kg:5830 ?area } ORDER BY DESC(?area) LIMIT 1}\"\n \t]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453.\",\n \t\t\"?company wdt:P2047 ?employees.\",\n \t\t\"FILTER(?employees > 500000).\",\n \t\t\"?company wdt:P856 ?website.\"\n \t]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P1128 is employees\nwdt:P856 is official website", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453 .\",\n \t\t\"?company wdt:P1128 ?employees .\",\n \t\t\"FILTER (?employees > 500000) .\",\n \t\t\"?company wdt:P856 ?website .\"\n \t]\n}"}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1735 is instance of\nkg:2392 is subclass of\nkg:4264 is business\nkg:0996 is employees\nkg:7595 is official website", "response": "{\n \t\"query\": [\"$company\"]\n \t}\n \t                \t\t"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?columbus_ships wdt:P180 wd:Q35.\",\n    \"?columbus_ships wdt:P31 wd:Q1652149.\"\n  ]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11446 is ship\nwdt:P1344 is participant in\nwdt:P710 is participant\nwd:Q7322 is Christopher Columbus", "response": "{\n \t\"query\": [\n \t\t\"?ship wdt:P31 wd:Q11446 .\",\n \t\t\"?expedition wdt:P710 wd:Q7322 ;\",\n \t\t\"wdt:P1344 ?ship .\"\n \t]\n}"}
{"question": "What were the names of the three ships by Columbus?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8261 is instance of\nkg:5995 is subclass of\nkg:5241 is ship\nkg:4451 is participant in\nkg:1337 is participant\nkg:5802 is Christopher Columbus", "response": "{ \"query\": [\n    \"?ship kg:4451 kg:1337 .\",\n    \"?ship kg:5995 kg:5241 .\"\n] }"}
