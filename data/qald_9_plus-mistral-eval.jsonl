{"question": "List all boardgames by GMT.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?boardgame WHERE {\",\n    \"  ?boardgame wdt:P31 wd:Q209578.\",\n    \"  ?boardgame wdt:P1460 wd:Q105966.\"\n    ]\n}", "normal_query": "SELECT ?boardgame WHERE { ?boardgame wdt:P31 wd:Q209578. ?boardgame wdt:P1460 wd:Q105966. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List all boardgames by GMT.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131436 is board game", "response": "{\n  \"query\": [\n    \"SELECT ?boardgame WHERE {\",\n      \"?boardgame wdt:P31 wd:Q131436.\",\n      \"?boardgame wdt:P175 wd:Q20896.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?boardgame WHERE { ?boardgame wdt:P31 wd:Q131436. ?boardgame wdt:P175 wd:Q20896. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List all boardgames by GMT.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List all boardgames by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8694 is instance of\nkg:9432 is board game", "response": "{\n    \"query\": [\n        \"SELECT ?boardgame\",\n        \"WHERE {\",\n            \"?boardgame kg:8694 kg:9432 .\",\n            \"?boardgame kg:10572 \\\"GMT\\\" .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?boardgame WHERE { ?boardgame wdt:P31 wd:Q131436 . ?boardgame kg:10572 \"GMT\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed Skype?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q1420 skos:exampleMatch ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q1420 skos:exampleMatch ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed Skype?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40984 is Skype\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n      \"wd:Q40984 wdt:P178 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q40984 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who developed Skype?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who developed Skype?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Skype\nkg:1548 is developer", "response": "{\n    \"query\": [\n        \"SELECT ?developer\",\n        \"WHERE {\",\n            \"kg:6211 kg:1548 ?developer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q40984 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which people were born in Heraklion?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P19 wd:Q2346.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19 wd:Q2346. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which people were born in Heraklion?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwd:Q160544 is Heraklion", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P19 wd:Q160544.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19 wd:Q160544. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which people were born in Heraklion?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which people were born in Heraklion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9471 is place of birth\nkg:4255 is Heraklion", "response": "{\n    \"query\": [\n        \"SELECT ?person\",\n        \"WHERE {\",\n            \"?person kg:9471 kg:4255.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19 wd:Q160544. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which U.S. state is Area 51 located?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n        \"  wd:Q206437 wdt:P17 ?state.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q206437 wdt:P17 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which U.S. state is Area 51 located?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q177397 is Area 51\nwdt:P131 is located in the administrative territorial entity\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"wd:Q177397 wdt:P131 ?state.\",\n      \"?state wdt:P31 wd:Q35657.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?state WHERE { wd:Q177397 wdt:P131 ?state. ?state wdt:P31 wd:Q35657. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which U.S. state is Area 51 located?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Area 51 located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6216 is Area 51\nkg:5375 is located in the administrative territorial entity\nkg:5375 is located in the administrative territorial entity", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n            \"kg:6216 kg:5375 ?state .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q177397 wdt:P131 ?state . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the mayor of New York City?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q60 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q60 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of New York City?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q60 is New York City\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q60 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q60 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of New York City?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of New York City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2848 is New York City\nkg:9377 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"<http://example.org/kg/2848> <http://example.org/kg/9377> ?mayor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mayor WHERE { <http://example.org/kg//2848> <http://example.org/kg//9377> ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where did Abraham Lincoln die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q2148 wdt:P570 ?date.\",\n    \"  wd:Q2148 wdt:P937 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q2148 wdt:P570 ?date. wd:Q2148 wdt:P937 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where did Abraham Lincoln die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q91 wdt:P20 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q91 wdt:P20 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where did Abraham Lincoln die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where did Abraham Lincoln die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9211 is Abraham Lincoln\nkg:6252 is place of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n        \"   kg:9211 kg:6252 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q91 wdt:P20 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which airports does Air China serve?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n    \"  wd:Q7642 P31 wd:Q8502.\",\n    \"  wd:Q7642 P137 ?airline.\",\n    \"  ?airline wdt:P296 ?airport.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airport WHERE { wd:Q7642 P31 wd:Q8502. wd:Q7642 P137 ?airline. ?airline wdt:P296 ?airport. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which airports does Air China serve?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P113 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n      \"wd:Q51747 wdt:P113 ?airport.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airport WHERE { wd:Q51747 wdt:P113 ?airport. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which airports does Air China serve?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which airports does Air China serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3523 is Air China\nkg:2174 is airline hub", "response": "{\n    \"query\": [\n        \"SELECT ?airport\",\n        \"WHERE {\",\n            \"kg:3523 kg:2174 ?airport.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?airport WHERE { wd:Q51747 wdt:P113 ?airport. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P57 wd:Q60896.\",\n    \"  ?movie wdt:P161 ?director.\",\n    \"  ?movie wdt:P175 ?actor.\",\n    \"  ?director wdt:P31 wd:Q2839547.\",\n    \"  ?director wdt:P106 wd:Q33988.\",\n    \"  ?director rdfs:label \\\"William Shatner\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q60896. ?movie wdt:P161 ?director. ?movie wdt:P175 ?actor. ?director wdt:P31 wd:Q2839547. ?director wdt:P106 wd:Q33988. ?director rdfs:label \"William Shatner\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?movie wdt:P57 wd:Q16297.\",\n      \"?movie wdt:P161 ?actor.\",\n      \"?movie wdt:P161 wd:Q16297.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P57 wd:Q16297. ?movie wdt:P161 ?actor. ?movie wdt:P161 wd:Q16297. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors starring in movies directed by and starring William Shatner.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by and starring William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3840 is director\nkg:6889 is William Shatner\nkg:7140 is cast member\nkg:6889 is William Shatner\nkg:7140 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?actor WHERE {\",\n            \"?movie kg:3840 kg:6889 .\",\n            \"?movie kg:7140 ?actor .\",\n            \"FILTER(?actor != kg:6889)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P57 wd:Q16297 . ?movie wdt:P161 ?actor . FILTER(?actor != wd:Q16297) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What are the official languages of the Philippines?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q845 Q1326397 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q845 Q1326397 ?language. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What are the official languages of the Philippines?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q928 is Philippines\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"wd:Q928 wdt:P37 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q928 wdt:P37 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What are the official languages of the Philippines?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the official languages of the Philippines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5866 is Philippines\nkg:9978 is official language", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/5866> <http://www.example.org/kg/9978> ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { <http://www.example.org/kg//5866> <http://www.example.org/kg//9978> ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Danish films.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P495 wd:Q35.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P495 wd:Q35. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Danish films.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P495 wd:Q35.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P495 wd:Q35. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Danish films.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Danish films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8808 is subclass of\nkg:6517 is film\nkg:8359 is instance of\nkg:1180 is country of origin\nkg:5463 is Denmark", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:8359 kg:6517 .\",\n            \"?film kg:1180 kg:5463 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P495 wd:Q35 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q10684 Q2839571 ?director.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?movie wdt:P175 wd:Q10684.\",\n    \"  ?movie wdt:P571 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q10684 Q2839571 ?director. ?director wdt:P31 wd:Q33999. ?movie wdt:P175 wd:Q10684. ?movie wdt:P571 ?director. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q35332 is Brad Pitt\nwdt:P57 is director\nwd:Q192990 is Guy Ritchie", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 .\", \"# The resource is a film\",\n      \"?movie wdt:P161 wd:Q35332 .\", \"# Brad Pitt is cast member of the movie\",\n      \"?movie wdt:P57 wd:Q192990 .\" ,\"# Guy Ritchie directed the movie\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P161 wd:Q35332 . ?movie wdt:P57 wd:Q192990 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which movies starring Brad Pitt were directed by Guy Ritchie?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which movies starring Brad Pitt were directed by Guy Ritchie?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5285 is subclass of\nkg:4255 is film\nkg:0188 is instance of\nkg:3943 is cast member\nkg:8245 is Brad Pitt\nkg:6493 is director\nkg:1627 is Guy Ritchie", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie kg:0188 kg:4255 .\",\n      \"?movie kg:3943 kg:8245 .\",\n      \"?movie kg:6493 kg:1627 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P161 wd:Q35332 . ?movie wdt:P57 wd:Q192990 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?weapon WHERE {\",\n    \"  wd:Q105346 P729 ?designer.\",\n    \"  ?designer P800 ?weapon.\",\n    \"  FILTER(?weapon != wd:Q105346)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?weapon WHERE { wd:Q105346 P729 ?designer. ?designer P800 ?weapon. FILTER(?weapon != wd:Q105346) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q728 is weapon\nwd:Q155644 is Uzi\nwdt:P287 is designed by\nwdt:P279 is subclass of\nwdt:P287 is designed by\nwd:Q155644 is Uzi", "response": "{\n  \"query\": [\n    \"SELECT ?weapon WHERE {\",\n    \"  wd:Q155644 wdt:P287 ?designer.\",\n    \"  ?designer wdt:P287 ?weapon.\",\n    \"  ?weapon wdt:P279 wd:Q728.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?weapon WHERE { wd:Q155644 wdt:P287 ?designer. ?designer wdt:P287 ?weapon. ?weapon wdt:P279 wd:Q728. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which other weapons did the designer of the Uzi develop?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which other weapons did the designer of the Uzi develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2838 is subclass of\nkg:7386 is weapon\nkg:6166 is Uzi\nkg:5784 is designed by\nkg:2838 is subclass of\nkg:5784 is designed by\nkg:6166 is Uzi", "response": "{\n  \"query\": [\n    \"SELECT ?weapon\",\n    \"WHERE {\",\n      \"?weapon kg:7386 is weapon .\",\n      \"?weapon kg:5784 is designed by kg:2838 .\",\n      \"FILTER(?weapon != kg:6166)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?weapon WHERE { ?weapon wd:Q728 is weapon . ?weapon wdt:P287 is designed by wdt:P279 . FILTER(?weapon != wd:Q155644) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the owner of Universal Studios?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q106482 wdt:P135 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q106482 wdt:P135 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the owner of Universal Studios?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168383 is Universal Pictures\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q168383 wdt:P127 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q168383 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the owner of Universal Studios?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Universal Studios?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1265 is Universal Pictures\nkg:8712 is owned by", "response": "{\n    \"query\": [\n        \"SELECT ?owner\",\n        \"WHERE {\",\n            \"kg:1265 kg:8712 ?owner.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q168383 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which state of the USA has the highest population density?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q3957.\",\n    \"  ?state wdt:P1082 ?populationDensity.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?populationDensity)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q3957. ?state wdt:P1082 ?populationDensity. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?populationDensity) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which state of the USA has the highest population density?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P2046 ?area.\",\n      \"?state wdt:P1082 ?population.\",\n      \"BIND(?population / ?area AS ?density).\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"} ORDER BY DESC(?density) LIMIT 1\"\n    ]\n  }\n ", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P2046 ?area. ?state wdt:P1082 ?population. BIND(?population / ?area AS ?density). SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?density) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which state of the USA has the highest population density?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which state of the USA has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is instance of\nkg:1730 is U.S. state\nkg:4667 is area\nkg:4199 is population", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"?state kg:0953 kg:1730 .\",\n            \"?state kg:4667 ?area .\",\n            \"?state kg:4199 ?population .\",\n            \"BIND((?population / ?area) AS ?density)\",\n            \"FILTER(?density = (SELECT MAX(?density2) WHERE {\",\n                \"?otherState kg:0953 kg:1730 .\",\n                \"?otherState kg:4667 ?otherArea .\",\n                \"?otherState kg:4199 ?otherPopulation .\",\n                \"BIND((?otherPopulation / ?otherArea) AS ?density2)\",\n            \"}))\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P2046 ?area . ?state wdt:P1082 ?population . BIND((?population / ?area) AS ?density) FILTER(?density = (SELECT MAX(?density2) WHERE { ?otherState wdt:P31 wd:Q35657 . ?otherState wdt:P2046 ?otherArea . ?otherState wdt:P1082 ?otherPopulation . BIND((?otherPopulation / ?otherArea) AS ?density2) })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which monarchs were married to a German?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?monarch WHERE {\",\n    \"  ?monarch wdt:P31 wd:Q6460975.\",\n    \"  ?monarch wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P27 wd:Q183.\"\n    ]\n}", "normal_query": "SELECT ?monarch WHERE { ?monarch wdt:P31 wd:Q6460975. ?monarch wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q183. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which monarchs were married to a German?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q116 is monarch\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?monarch WHERE {\",\n      \"?monarch wdt:P106 wd:Q116.\",\n      \"?monarch wdt:P26 ?spouse.\",\n      \"?spouse wdt:P27 wd:Q183.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?monarch WHERE { ?monarch wdt:P106 wd:Q116. ?monarch wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q183. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which monarchs were married to a German?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which monarchs were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9875 is occupation\nkg:9875 is monarch\nkg:7072 is spouse\nkg:1801 is country of citizenship\nkg:2266 is Germany", "response": "{\n    \"query\": [\n        \"SELECT ?monarch\",\n        \"WHERE {\",\n            \"?monarch kg:9875 \\\"monarch\\\".\",\n            \"?monarch kg:7072 ?spouse.\",\n            \"?spouse kg:1801 kg:2266.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?monarch WHERE { ?monarch wdt:P106 \"monarch\". ?monarch wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q183. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created the comic Captain America?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q106247 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q106247 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created the comic Captain America?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q190679 is Captain America\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n      \"wd:Q190679 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q190679 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created the comic Captain America?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created the comic Captain America?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2488 is Captain America\nkg:1582 is creator", "response": "{\n    \"query\": [\n        \"SELECT ?creator\",\n        \"WHERE {\",\n            \"kg:2488 kg:1582 ?creator.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q190679 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?astronaut WHERE {\",\n        \"  wd:Q20697 p:P31/ps:P31/wdt:P279* wd:Q548284.\",\n        \"  wd:Q20697 p:P1344 ?statement.\",\n        \"  ?statement ps:P1344 ?astronaut.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q20697 p:P31/ps:P31/wdt:P279* wd:Q548284. wd:Q20697 p:P1344 ?statement. ?statement ps:P1344 ?astronaut. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut WHERE {\",\n    \"  wd:Q178871 wdt:P1029 ?astronaut.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9400 is Apollo 14\nkg:6757 is crew member(s)", "response": "{\n    \"query\": [\n        \"SELECT ?astronaut WHERE {\",\n            \"kg:9400 kg:6757 ?astronaut .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote the book The pillars of the Earth?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bookAuthor WHERE {\",\n    \"  wd:Q156284 wdt:P50 ?bookAuthor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bookAuthor WHERE { wd:Q156284 wdt:P50 ?bookAuthor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the book The pillars of the Earth?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q1163227 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote the book The pillars of the Earth?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book The pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3489 is The Pillars of the Earth\nkg:7086 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"<http://example.org/kg/3489> <http://example.org/kg/7086> ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { <http://example.org/kg//3489> <http://example.org/kg//7086> ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which state of the United States of America has the highest density?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q3957.\",\n    \"  ?state wdt:P1082 ?populationDensity.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?populationDensity)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q3957. ?state wdt:P1082 ?populationDensity. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?populationDensity) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which state of the United States of America has the highest density?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P2046 ?area.\",\n      \"?state wdt:P1082 ?population.\",\n      \"BIND(?population / ?area AS ?density).\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"} ORDER BY DESC(?density) LIMIT 1\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P2046 ?area. ?state wdt:P1082 ?population. BIND(?population / ?area AS ?density). SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?density) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which state of the United States of America has the highest density?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which state of the United States of America has the highest density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1504 is instance of\nkg:4691 is U.S. state\nkg:6036 is area\nkg:6748 is population", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"?state kg:1504 kg:4691 .\",\n            \"?state kg:6036 ?area .\",\n            \"?state kg:6748 ?population .\",\n            \"BIND((?population / ?area) AS ?density)\",\n            \"}\",\n        \"ORDER BY DESC(?density)\",\n        \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P2046 ?area . ?state wdt:P1082 ?population . BIND((?population / ?area) AS ?density) } ORDER BY DESC(?density) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which spaceflights were launched from Baikonur?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spaceflight WHERE {\",\n    \"  ?spaceflight wdt:P31 wd:Q240678.\",\n    \"  ?spaceflight wdt:P59 wd:Q10000.\"\n    ]\n}", "normal_query": "SELECT ?spaceflight WHERE { ?spaceflight wdt:P31 wd:Q240678. ?spaceflight wdt:P59 wd:Q10000. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which spaceflights were launched from Baikonur?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?spaceflight WHERE {\",\n      \"?spaceflight wdt:P1427 wd:Q177477.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spaceflight WHERE { ?spaceflight wdt:P1427 wd:Q177477. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which spaceflights were launched from Baikonur?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which spaceflights were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3950 is start point\nkg:1434 is Baikonur Cosmodrome", "response": "{\n    \"query\": [\n        \"SELECT ?spaceflight\",\n        \"WHERE {\",\n            \"?spaceflight kg:3950 kg:1434.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spaceflight WHERE { ?spaceflight wdt:P1427 wd:Q177477. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?trumpetPlayer WHERE {\",\n    \"  ?trumpetPlayer wdt:P31 wd:Q640278.\",\n    \"  ?trumpetPlayer wdt:P106 wd:Q594652.\",\n    \"  ?trumpetPlayer wdt:P106 wd:Q177343.\"\n    ]\n}", "normal_query": "SELECT ?trumpetPlayer WHERE { ?trumpetPlayer wdt:P31 wd:Q640278. ?trumpetPlayer wdt:P106 wd:Q594652. ?trumpetPlayer wdt:P106 wd:Q177343. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158852 is conductor\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?trumpetPlayer WHERE {\",\n      \"?trumpetPlayer wdt:P106 wd:Q158852.\",\n      \"?trumpetPlayer wdt:P1303 wd:Q8338.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?trumpetPlayer WHERE { ?trumpetPlayer wdt:P106 wd:Q158852. ?trumpetPlayer wdt:P1303 wd:Q8338. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me a list of all trumpet players that were bandleaders.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all trumpet players that were bandleaders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9126 is occupation\nkg:5599 is conductor\nkg:3375 is instrument\nkg:5858 is trumpet", "response": "{\n    \"query\": [\n        \"SELECT ?trumpetPlayer\",\n        \"WHERE {\",\n            \"?trumpetPlayer kg:9126 kg:5599 .\",\n            \"?trumpetPlayer kg:3375 kg:5858 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?trumpetPlayer WHERE { ?trumpetPlayer wdt:P106 wd:Q158852 . ?trumpetPlayer wdt:P1303 wd:Q8338 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q1246 wdt:P30 ?timezone .\",\n    \"  ?state wdt:P30 ?timezone ;\",\n    \"         wdt:P31 wd:Q35657 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q1246 wdt:P30 ?timezone . ?state wdt:P30 ?timezone ; wdt:P31 wd:Q35657 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P421 ?timezone.\",\n      \"wd:Q829 wdt:P421 ?timezone.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P421 ?timezone. wd:Q829 wdt:P421 ?timezone. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which U.S. states are in the same timezone as Utah?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same timezone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0110 is Utah\nkg:3176 is located in time zone\nkg:7966 is instance of\nkg:4285 is U.S. state\nkg:3176 is located in time zone\nkg:0110 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state kg:7966 kg:4285 .\",\n      \"?state kg:3176 ?timezone .\",\n      \"kg:0110 kg:3176 ?timezone .\"\n    ]\n  }\n ", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P421 ?timezone . wd:Q829 wdt:P421 ?timezone . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q106428 p:P25 ?statement.\",\n    \"  ?statement ps:P25 wd:Q37964.\",\n    \"  ?statement pq:P26 wd:Q106428.\",\n    \"  ?spouse wdt:P26 wd:Q37964.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q106428 p:P25 ?statement. ?statement ps:P25 wd:Q37964. ?statement pq:P26 wd:Q106428. ?spouse wdt:P26 wd:Q37964. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43247 is Ingrid Bergman\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q43247 wdt:P40 ?daughter.\",\n      \"?daughter wdt:P26 ?spouse.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { wd:Q43247 wdt:P40 ?daughter. ?daughter wdt:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the daughter of Ingrid Bergman married to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Ingrid Bergman married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1029 is Ingrid Bergman\nkg:6032 is child\nkg:4891 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"kg:1029 kg:6032 ?daughter.\",\n            \"?daughter kg:4891 ?spouse.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q43247 wdt:P40 ?daughter. ?daughter wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me all museums in London.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"  ?museum wdt:P31 wd:Q33506.\",\n    \"  ?museum wdt:P17 wd:Q84.\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506. ?museum wdt:P17 wd:Q84. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all museums in London.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P276 is location\nwd:Q84 is London", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n      \"?museum wdt:P31 wd:Q33506.\",\n      \"?museum wdt:P276 wd:Q84.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506. ?museum wdt:P276 wd:Q84. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me all museums in London.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all museums in London.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2426 is instance of\nkg:8333 is museum\nkg:0559 is location\nkg:8155 is London", "response": "{\n    \"query\": [\n        \"SELECT ?museum\",\n        \"WHERE {\",\n            \"?museum kg:2426/kg:8333 .\",\n            \"?museum kg:0559/kg:8155 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31/wd:Q33506 . ?museum wdt:P276/wd:Q84 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q937857.\",\n    \"  ?player wdt:P2064 wd:Q153464.\",\n    \"  ?player wdt:P1080 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P31 wd:Q937857. ?player wdt:P2064 wd:Q153464. ?player wdt:P1080 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P54 is member of sports team\nwd:Q272059 is Atlanta Falcons\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P54 wd:Q272059.\",\n      \"?player wdt:P2048 ?height.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P54 wd:Q272059. ?player wdt:P2048 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the tallest player of the Atlanta Falcons?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the tallest player of the Atlanta Falcons?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1796 is member of sports team\nkg:3447 is Atlanta Falcons\nkg:1244 is height", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:1796 kg:3447.\",\n            \"?player kg:1244 ?height.\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherPlayer kg:1796 kg:3447.\",\n                \"?otherPlayer kg:1244 ?otherHeight.\",\n                \"FILTER (?otherHeight > ?height)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P54 wd:Q272059. ?player wdt:P2048 ?height. FILTER NOT EXISTS { ?otherPlayer wdt:P54 wd:Q272059. ?otherPlayer wdt:P2048 ?otherHeight. FILTER (?otherHeight > ?height) } } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P106 wd:Q36635.\",\n    \"  ?writer wdt:P1476 wd:Q28954.\"\n    ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106 wd:Q36635. ?writer wdt:P1476 wd:Q28954. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P166 is award received\nwd:Q37922 is Nobel Prize in Literature", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P106 wd:Q36180.\",\n      \"?writer wdt:P166 wd:Q37922.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106 wd:Q36180. ?writer wdt:P166 wd:Q37922. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all writers that won the Nobel Prize in literature.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all writers that won the Nobel Prize in literature.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3248 is occupation\nkg:6280 is writer\nkg:9080 is award received\nkg:4831 is Nobel Prize in Literature", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"?writer kg:3248 kg:6280 .\",\n            \"?writer kg:9080 kg:4831 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106 wd:Q36180 . ?writer wdt:P166 wd:Q37922 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?player WHERE {\",\n        \"?player wdt:P108 wd:Q345769.\",\n        \"?player wdt:P2049 ?height.\",\n        \"FILTER(?height > 2).\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P108 wd:Q345769. ?player wdt:P2049 ?height. FILTER(?height > 2). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q3665646.\",\n      \"?player wdt:P2048 ?height.\",\n      \"FILTER(?height > 2.0).\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646. ?player wdt:P2048 ?height. FILTER(?height > 2.0). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all basketball players that are higher than 2 meters.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all basketball players that are higher than 2 meters.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7450 is occupation\nkg:6446 is basketball player\nkg:6984 is height", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:7450 kg:6446 .\",\n            \"?player kg:6984 ?height .\",\n            \"FILTER(?height > 2) .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646 . ?player wdt:P2048 ?height . FILTER(?height > 2) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the Statue of Liberty built?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?statue WHERE {\",\n    \"  wd:Q350 wdt:P571 ?date.\",\n    \"  wd:Q350 rdfs:label ?statue FILTER (lang(?statue) = 'en')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?statue WHERE { wd:Q350 wdt:P571 ?date. wd:Q350 rdfs:label ?statue FILTER (lang(?statue) = 'en') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the Statue of Liberty built?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9202 is Statue of Liberty\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q9202 wdt:P571 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9202 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the Statue of Liberty built?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was the Statue of Liberty built?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9932 is Statue of Liberty\nkg:2835 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:9932 kg:2835 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9202 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which states border Illinois?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q120 wdt:P47 ?border.\",\n    \"  ?border wdt:P31 wd:Q39568.\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q120 wdt:P47 ?border. ?border wdt:P31 wd:Q39568. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which states border Illinois?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1204 is Illinois\nwdt:P47 is shares border with", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q1204 wdt:P47 ?state.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q1204 wdt:P47 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which states border Illinois?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which states border Illinois?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0369 is Illinois\nkg:2142 is shares border with", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"kg:0369 kg:2142 ?state.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q1204 wdt:P47 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who developed Minecraft?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q940518 p:P737 ?statement.\",\n    \"  ?statement ps:P737 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q940518 p:P737 ?statement. ?statement ps:P737 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed Minecraft?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q49740 is Minecraft\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n      \"wd:Q49740 wdt:P178 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q49740 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who developed Minecraft?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who developed Minecraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is Minecraft\nkg:0620 is developer", "response": "{\n    \"query\": [\n        \"SELECT ?developer\",\n        \"WHERE {\",\n            \"kg:5174 kg:0620 ?developer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q49740 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where did Hillel Slovak die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q156938 p:P570 ?statement.\",\n    \"  ?statement ps:P570 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q156938 p:P570 ?statement. ?statement ps:P570 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where did Hillel Slovak die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q186924 is Hillel Slovak\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q186924 wdt:P20 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q186924 wdt:P20 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where did Hillel Slovak die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where did Hillel Slovak die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8632 is Hillel Slovak\nkg:3889 is place of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8632 kg:3889 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q186924 wdt:P20 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What movies does Jesse Eisenberg play in?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q154267 wdt:P350 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q154267 wdt:P350 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What movies does Jesse Eisenberg play in?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q219512 is Jesse Eisenberg", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"wd:Q219512 wdt:P161 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q219512 wdt:P161 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What movies does Jesse Eisenberg play in?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What movies does Jesse Eisenberg play in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4329 is cast member\nkg:1690 is Jesse Eisenberg", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"kg:1690 kg:4329 ?movie.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q219512 wdt:P161 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give all swimmers that were born in Moscow.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?swimmer WHERE {\",\n    \"  ?swimmer wdt:P31 wd:Q95067.\",\n    \"  ?swimmer wdt:P19 wd:Q654.\"\n    ]\n}", "normal_query": "SELECT ?swimmer WHERE { ?swimmer wdt:P31 wd:Q95067. ?swimmer wdt:P19 wd:Q654. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give all swimmers that were born in Moscow.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10843402 is swimmer\nwdt:P19 is place of birth\nwd:Q649 is Moscow", "response": "{\n  \"query\": [\n    \"SELECT ?swimmer WHERE {\",\n      \"?swimmer wdt:P106 wd:Q10843402.\",\n      \"?swimmer wdt:P19 wd:Q649.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?swimmer WHERE { ?swimmer wdt:P106 wd:Q10843402. ?swimmer wdt:P19 wd:Q649. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give all swimmers that were born in Moscow.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give all swimmers that were born in Moscow.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5904 is occupation\nkg:1103 is swimmer\nkg:7585 is place of birth\nkg:8931 is Moscow", "response": "{\n    \"query\": [\n        \"SELECT ?swimmer\",\n        \"WHERE {\",\n            \"?swimmer kg:5904 kg:1103 .\",\n            \"?swimmer kg:7585 kg:8931 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?swimmer WHERE { ?swimmer wdt:P106 wd:Q10843402 . ?swimmer wdt:P19 wd:Q649 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all cosmonauts.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cosmonaut WHERE {\",\n    \"  ?cosmonaut wdt:P106 wd:Q34782.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cosmonaut WHERE { ?cosmonaut wdt:P106 wd:Q34782. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all cosmonauts.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q15180 is Soviet Union\nwdt:P27 is country of citizenship\nwd:Q159 is Russia", "response": "{\n  \"query\": [\n    \"SELECT ?cosmonaut WHERE {\",\n    \"?cosmonaut wdt:P106 wd:Q11631.\",\n    \"{ ?cosmonaut wdt:P27 wd:Q15180. } UNION { ?cosmonaut wdt:P27 wd:Q159. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cosmonaut WHERE { ?cosmonaut wdt:P106 wd:Q11631. { ?cosmonaut wdt:P27 wd:Q15180. } UNION { ?cosmonaut wdt:P27 wd:Q159. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all cosmonauts.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all cosmonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1826 is occupation\nkg:1573 is astronaut\nkg:9428 is country of citizenship\nkg:0187 is Soviet Union\nkg:9428 is country of citizenship\nkg:4328 is Russia", "response": "{\n    \"query\": [\n        \"SELECT ?cosmonaut\",\n        \"WHERE {\",\n            \"?cosmonaut kg:1573 kg:1826.\",\n            \"?cosmonaut kg:9428 kg:0187 .\",\n            \"UNION\",\n            \"?cosmonaut kg:1573 kg:1826.\",\n            \"?cosmonaut kg:9428 kg:4328.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?cosmonaut WHERE { ?cosmonaut wd:Q11631 wdt:P106. ?cosmonaut wdt:P27 wd:Q15180 . UNION ?cosmonaut wd:Q11631 wdt:P106. ?cosmonaut wdt:P27 wd:Q159. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Swiss non-profit organizations.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q752680.\",\n    \"  ?organization wdt:P17 wd:Q39.\"\n    ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q752680. ?organization wdt:P17 wd:Q39. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Swiss non-profit organizations.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwd:Q39 is Switzerland\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q70208 is municipality of Switzerland", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n      \"?organization wdt:P31 wd:Q163740.\",\n      \"?organization wdt:P159 wd:Q39.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q163740. ?organization wdt:P159 wd:Q39. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Swiss non-profit organizations.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Swiss non-profit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0996 is instance of\nkg:6895 is nonprofit organization\nkg:0121 is headquarters location\nkg:3997 is Switzerland\nkg:0121 is headquarters location\nkg:0996 is instance of\nkg:0663 is municipality of Switzerland", "response": "{\n  \"query\": [\n    \"SELECT ?org\",\n    \"WHERE {\",\n      \"?org kg:0996 kg:6895 .\",\n      \"?org kg:0121 kg:3997 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?org WHERE { ?org wdt:P31 wd:Q163740 . ?org wdt:P159 wd:Q39 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which presidents were born in 1945?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n        \"  ?president wdt:P31 wd:Q172690.\",\n        \"  ?president wdt:P569 ?birthDate.\",\n        \"  FILTER (YEAR(?birthDate) = 1945).\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P31 wd:Q172690. ?president wdt:P569 ?birthDate. FILTER (YEAR(?birthDate) = 1945). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which presidents were born in 1945?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwdt:P279 is subclass of\nwd:Q30461 is president\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president wdt:P39 wd:Q30461.\",\n      \"?president wdt:P569 \\\"1945-00-00\\\"^^xsd:dateTime.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P39 wd:Q30461. ?president wdt:P569 \"1945-00-00\"^^xsd:dateTime. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which presidents were born in 1945?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which presidents were born in 1945?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9721 is position held\nkg:7772 is subclass of\nkg:4201 is president\nkg:9072 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?president\",\n        \"WHERE {\",\n            \"?president kg:4201 kg:9721 .\",\n            \"?president kg:9072 \\\"1945-01-01\\\"^^xsd:dateTime .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { ?president wd:Q30461 wdt:P39 . ?president wdt:P569 \"1945-01-01\"^^xsd:dateTime . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What kind of music did Lou Reed play?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?music WHERE {\",\n    \"  wd:Q124697 wdt:P31 ?music.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?music WHERE { wd:Q124697 wdt:P31 ?music. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What kind of music did Lou Reed play?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q189080 is Lou Reed\nwdt:P136 is genre", "response": "{\n  \"query\": [\n    \"SELECT ?genre WHERE {\",\n    \"  wd:Q189080 wdt:P136 ?genre.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?genre WHERE { wd:Q189080 wdt:P136 ?genre. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What kind of music did Lou Reed play?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What kind of music did Lou Reed play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5974 is Lou Reed\nkg:2540 is genre", "response": "{\n    \"query\": [\n        \"SELECT ?genre\",\n        \"WHERE {\",\n            \"<http://example.org/kg/5974> <http://example.org/kg/2540> ?genre.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?genre WHERE { <http://example.org/kg//5974> <http://example.org/kg//2540> ?genre. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where do the Red Sox play?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?team WHERE {\",\n    \"  wd:Q429618 wdt:P305 ?team.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?team WHERE { wd:Q429618 wdt:P305 ?team. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where do the Red Sox play?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213959 is Boston Red Sox\nwdt:P115 is home venue", "response": "{\n  \"query\": [\n    \"SELECT ?venue WHERE {\",\n      \"wd:Q213959 wdt:P115 ?venue.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?venue WHERE { wd:Q213959 wdt:P115 ?venue. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where do the Red Sox play?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where do the Red Sox play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is Boston Red Sox\nkg:3920 is home venue", "response": "{\n    \"query\": [\n        \"SELECT ?venue\",\n        \"WHERE {\",\n            \"kg:4308 kg:homeVenue ?venue.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?venue WHERE { wd:Q213959 kg:homeVenue ?venue. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P652 wd:Q10438.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P652 wd:Q10438. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q82595 is Bundesliga", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n      \"?club wdt:P31 wd:Q476028.\",\n      \"?club wdt:P118 wd:Q82595.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q476028. ?club wdt:P118 wd:Q82595. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show a list of soccer clubs that play in the Bundesliga.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show a list of soccer clubs that play in the Bundesliga.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7599 is instance of\nkg:6882 is association football club\nkg:9691 is league\nkg:5778 is Bundesliga", "response": "{\n    \"query\": [\n        \"SELECT ?club\",\n        \"WHERE {\",\n            \"?club kg:7599 kg:6882 .\",\n            \"?club kg:9691 kg:5778 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q476028 . ?club wdt:P118 wd:Q82595 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which bridges cross the Seine?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  ?bridge wdt:P31 wd:Q495698.\",\n    \"  ?bridge wdt:P706 wd:Q236.\"\n    ]\n}", "normal_query": "SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q495698. ?bridge wdt:P706 wd:Q236. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which bridges cross the Seine?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q12280 is bridge\nwdt:P177 is crosses\nwd:Q1471 is Seine", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n      \"?bridge wdt:P31 wd:Q12280.\",\n      \"?bridge wdt:P177 wd:Q1471.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q12280. ?bridge wdt:P177 wd:Q1471. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which bridges cross the Seine?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which bridges cross the Seine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5104 is instance of\nkg:3688 is bridge\nkg:6698 is crosses\nkg:3188 is Seine", "response": "{\n    \"query\": [\n        \"SELECT ?bridge\",\n        \"WHERE {\",\n            \"?bridge kg:5104/kg:3688 .\",\n            \"?bridge kg:6698/kg:3188 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?bridge WHERE { ?bridge wdt:P31/wd:Q12280 . ?bridge wdt:P177/wd:Q1471 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many films did Hal Roach produce?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q134028 wdt:P162 ?film.\",\n    \"  ?film wdt:P31 wd:Q11424.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q134028 wdt:P162 ?film. ?film wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many films did Hal Roach produce?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q72792 wdt:P162 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q72792 wdt:P162 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many films did Hal Roach produce?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many films did Hal Roach produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7838 is producer\nkg:2222 is Hal Roach", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:7838 kg:2222.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q72792. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Danish movies.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P495 wd:Q35.\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P495 wd:Q35. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Danish movies.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P31 is instance of\nwdt:P495 is country of origin\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P495 wd:Q35.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P495 wd:Q35. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Danish movies.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Danish movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7611 is subclass of\nkg:0455 is film\nkg:5857 is instance of\nkg:5175 is country of origin\nkg:4426 is Denmark", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:5857 kg:0455 .\",\n            \"?movie kg:5175 kg:4426 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P495 wd:Q35 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the most frequent cause of death?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cause WHERE {\",\n    \"  wd:Q15632408 wdt:P508 ?cause.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cause WHERE { wd:Q15632408 wdt:P508 ?cause. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the most frequent cause of death?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?cause WHERE {\",\n      \"?cause wdt:P509 ?death.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n      \"ORDER BY DESC(?count)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?cause WHERE { ?cause wdt:P509 ?death. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?count) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the most frequent cause of death?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the most frequent cause of death?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4613 is cause of death", "response": "{\n    \"query\": [\n        \"SELECT ?cause\",\n        \"WHERE {\",\n            \"?cause kg:4613 ?death.\",\n            \"}\"\n    ]\n}", "normal_query": "SELECT ?cause WHERE { ?cause wdt:P509 ?death. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the four youngest MVP basketball players?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who are the four youngest MVP basketball players?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q937857.\",\n    \"  ?player wdt:P106 wd:Q242604.\",\n    \"  ?player wdt:P1080 ?mvpYear.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?mvpYear)\",\n    \"LIMIT 4\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P31 wd:Q937857. ?player wdt:P106 wd:Q242604. ?player wdt:P1080 ?mvpYear. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?mvpYear) LIMIT 4", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all companies in Munich.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P17 wd:Q164.\",\n    \"  ?company wdt:P31 wd:Q4830453.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P17 wd:Q164. ?company wdt:P31 wd:Q4830453. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all companies in Munich.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P159 is headquarters location\nwd:Q1726 is Munich", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P31 wd:Q4830453.\",\n      \"?company wdt:P159 wd:Q1726.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453. ?company wdt:P159 wd:Q1726. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all companies in Munich.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all companies in Munich.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7379 is subclass of\nkg:3056 is business\nkg:3902 is instance of\nkg:9118 is headquarters location\nkg:4859 is Munich", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:3902 kg:3056 .\",\n            \"?company kg:9118 ?location .\",\n            \"?location kg:7379 kg:4859 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P159 ?location . ?location wdt:P279 wd:Q1726 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P706 wd:Q8491.\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P706 wd:Q8491. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q5451 wdt:P17 ?country.\",\n    \"  ?country wdt:P36 ?capital.\"\n    ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q5451 wdt:P17 ?country. ?country wdt:P36 ?capital. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the capitals of all countries that the Himalayas run through.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries that the Himalayas run through.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3281 is Himalayas\nkg:7625 is country\nkg:0169 is capital", "response": "{\n    \"query\": [\n        \"SELECT ?capital\",\n        \"WHERE {\",\n            \"?country kg:0169 ?capital.\",\n            \"?country kg:7625 kg:3281.\"\n        ]\n    }\n ", "normal_query": "SELECT ?capital WHERE { ?country wdt:P36 ?capital. ?country wdt:P17 wd:Q5451. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many movies did Park Chan-wook direct?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q109247 wdt:P57 wd:Q33682.\",\n    \"  wd:Q109247 p:P57 ?statement.\",\n    \"  ?statement ps:P57 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q109247 wdt:P57 wd:Q33682. wd:Q109247 p:P57 ?statement. ?statement ps:P57 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many movies did Park Chan-wook direct?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q315484 is Park Chan-wook", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P57 wd:Q315484.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P57 wd:Q315484. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many movies did Park Chan-wook direct?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many movies did Park Chan-wook direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6511 is director\nkg:3320 is Park Chan-wook", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:6511 kg:3320.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P57 wd:Q315484. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many airlines are there?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n    \"  ?airline wdt:P31 wd:Q47578.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q47578. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many airlines are there?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n      \"?airline wdt:P31 wd:Q46970.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q46970. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many airlines are there?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many airlines are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6911 is instance of\nkg:8786 is airline", "response": "{\n    \"query\": [\n        \"SELECT ?airline\",\n        \"WHERE {\",\n            \"?airline kg:6911 kg:8786.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q46970. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all islands that belong to Japan.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"  ?island wdt:P17 wd:Q17.\",\n    \"  ?island wdt:P31 wd:Q5469082.\"\n    ]\n}", "normal_query": "SELECT ?island WHERE { ?island wdt:P17 wd:Q17. ?island wdt:P31 wd:Q5469082. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all islands that belong to Japan.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23442 is island\nwdt:P17 is country\nwd:Q17 is Japan", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n      \"?island wdt:P31 wd:Q23442 .\",\n      \"?island wdt:P17 wd:Q17 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?island WHERE { ?island wdt:P31 wd:Q23442 . ?island wdt:P17 wd:Q17 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all islands that belong to Japan.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all islands that belong to Japan.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7714 is instance of\nkg:7851 is island\nkg:2897 is country\nkg:2425 is Japan", "response": "{\n    \"query\": [\n        \"SELECT ?island\",\n        \"WHERE {\",\n            \"?island kg:7851 kg:7714 .\",\n            \"?island kg:2425 kg:2897 .\",\n            \"kg:2425 kg:2897 kg:2897 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?island WHERE { ?island wd:Q23442 wdt:P31 . ?island wd:Q17 wdt:P17 . wd:Q17 wdt:P17 wdt:P17 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many inhabitants does Maribor have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?inhabitants WHERE {\",\n    \"  wd:Q15294 wdt:P1082 ?inhabitants.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?inhabitants WHERE { wd:Q15294 wdt:P1082 ?inhabitants. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many inhabitants does Maribor have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1010 is Maribor\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q1010 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q1010 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many inhabitants does Maribor have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many inhabitants does Maribor have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8389 is Maribor\nkg:2929 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population\",\n        \"WHERE {\",\n            \"<http://example.org/kg/8389> <http://example.org/kg/2929> ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { <http://example.org/kg//8389> <http://example.org/kg//2929> ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?astronaut WHERE {\",\n        \"  wd:Q20697 p:P31/ps:P31/wdt:P279* wd:Q548284.\",\n        \"  wd:Q20697 p:P1344 ?statement.\",\n        \"  ?statement ps:P1344 ?astronaut.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q20697 p:P31/ps:P31/wdt:P279* wd:Q548284. wd:Q20697 p:P1344 ?statement. ?statement ps:P1344 ?astronaut. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q178871 is Apollo 14\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?astronaut WHERE {\",\n    \"  wd:Q178871 wdt:P1029 ?astronaut.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Apollo 14 astronauts.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Apollo 14 astronauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3406 is Apollo 14\nkg:0698 is crew member(s)", "response": "{\n    \"query\": [\n        \"SELECT ?astronaut\",\n        \"WHERE {\",\n            \"kg:3406 kg:0698 ?astronaut.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?astronaut WHERE { wd:Q178871 wdt:P1029 ?astronaut. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which companies have more than 1 million employees?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?company WHERE {\",\n        \"  ?company wdt:P1080 ?employees.\",\n        \"  FILTER (?employees > 1000000).\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P1080 ?employees. FILTER (?employees > 1000000). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which companies have more than 1 million employees?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P31 is instance of\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P31 wd:Q4830453.\",\n      \"?company wdt:P1128 ?employees.\",\n      \"FILTER (?employees > 1000000).\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453. ?company wdt:P1128 ?employees. FILTER (?employees > 1000000). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which companies have more than 1 million employees?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which companies have more than 1 million employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4170 is subclass of\nkg:5338 is business\nkg:1104 is instance of\nkg:8891 is employees", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:1104 kg:5338 .\",\n            \"?company kg:8891 ?numEmployees .\",\n            \"FILTER (?numEmployees > 1000000) .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P1128 ?numEmployees . FILTER (?numEmployees > 1000000) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q106794 wdt:P57 wd:Q2387.\",\n    \"  wd:Q106794 wdt:P1069 ?film.\",\n    \"  ?film wdt:P31 wd:Q11424.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q106794 wdt:P57 wd:Q2387. wd:Q106794 wdt:P1069 ?film. ?film wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q315087 is Garry Marshall\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q315087 .\",\n      \"?film wdt:P161 wd:Q40523 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q315087 . ?film wdt:P161 wd:Q40523 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which films directed by Garry Marshall was Julia Roberts starring?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which films directed by Garry Marshall was Julia Roberts starring?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5953 is instance of\nkg:4237 is film\nkg:9816 is director\nkg:6470 is Garry Marshall\nkg:4262 is cast member\nkg:2003 is Julia Roberts", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:5953 kg:4237 .\",\n            \"?film kg:9816 kg:6470 .\",\n            \"?film kg:4262 kg:2003 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q315087 . ?film wdt:P161 wd:Q40523 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all soccer clubs in the Premier League.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q937857.\",\n    \"  ?club wdt:P625 wd:Q4067.\"\n    ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q937857. ?club wdt:P625 wd:Q4067. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all soccer clubs in the Premier League.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P118 is league\nwd:Q9448 is Premier League", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n      \"?club wdt:P31 wd:Q476028.\",\n      \"?club wdt:P118 wd:Q9448.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q476028. ?club wdt:P118 wd:Q9448. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all soccer clubs in the Premier League.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in the Premier League.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8917 is instance of\nkg:9198 is association football club\nkg:7069 is league\nkg:5830 is Premier League", "response": "{\n    \"query\": [\n        \"SELECT ?club WHERE {\",\n            \"?club kg:8917/kg:9198 .\",\n            \"?club kg:5830/kg:7069 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?club WHERE { ?club wdt:P31/wd:Q476028 . ?club wd:Q9448/wdt:P118 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the highest place of the Urals?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?highestPlace WHERE {\",\n    \"  wd:Q469875 wdt:P31 ?highestPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?highestPlace WHERE { wd:Q469875 wdt:P31 ?highestPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest place of the Urals?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q35600 is Ural Mountains\nwdt:P610 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?highestPlace WHERE {\",\n      \"wd:Q35600 wdt:P610 ?highestPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?highestPlace WHERE { wd:Q35600 wdt:P610 ?highestPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest place of the Urals?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest place of the Urals?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4847 is Ural Mountains\nkg:1765 is highest point", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:1765 kg:4847.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P610 wd:Q35600. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the governor of Wyoming?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q1302 wdt:P6 wd:Q194758.\",\n    \"  wd:Q194758 wdt:P35 wd:Q1302.\",\n    \"  wd:Q194758 p:P6 ?statement.\",\n    \"  ?statement ps:P6 ?governor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?governor WHERE { wd:Q1302 wdt:P6 wd:Q194758. wd:Q194758 wdt:P35 wd:Q1302. wd:Q194758 p:P6 ?statement. ?statement ps:P6 ?governor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the governor of Wyoming?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1214 is Wyoming\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q1214 wdt:P6 ?governor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?governor WHERE { wd:Q1214 wdt:P6 ?governor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the governor of Wyoming?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the governor of Wyoming?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1605 is Wyoming\nkg:5742 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:1605 kg:5742 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1214 wdt:P6 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?architect ?education WHERE {\",\n    \"  wd:Q194 wdt:P58 ?architect.\",\n    \"  ?architect wdt:P69 ?education.\"\n    ]\n}", "normal_query": "SELECT ?architect ?education WHERE { wd:Q194 wdt:P58 ?architect. ?architect wdt:P69 ?education. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243 is Eiffel Tower\nwdt:P84 is architect\nwdt:P69 is educated at", "response": "{\n  \"query\": [\n    \"SELECT ?architect ?university WHERE {\",\n      \"wd:Q243 wdt:P84 ?architect.\",\n      \"?architect wdt:P69 ?university.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?architect ?university WHERE { wd:Q243 wdt:P84 ?architect. ?architect wdt:P69 ?university. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where did the architect of the Eiffel Tower study?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where did the architect of the Eiffel Tower study?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8697 is Eiffel Tower\nkg:0724 is architect\nkg:7890 is educated at", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8697 kg:0724 ?architect.\",\n            \"?architect kg:7890 ?resource.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q243 wdt:P84 ?architect. ?architect wdt:P69 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?actor WHERE {\",\n        \"  ?actor wdt:P31 wd:Q33999.\",\n        \"  ?actor wdt:P19 wd:Q142.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q33999. ?actor wdt:P19 wd:Q142. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q90 is Paris\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?actor wdt:P19 wd:Q90.\",\n      \"?actor wdt:P569 ?dateOfBirth.\",\n      \"FILTER (year(?dateOfBirth) > 1950)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P19 wd:Q90. ?actor wdt:P569 ?dateOfBirth. FILTER (year(?dateOfBirth) > 1950) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors who were born in Paris after 1950.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Paris after 1950.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2117 is occupation\nkg:6645 is actor\nkg:4144 is place of birth\nkg:5863 is Paris\nkg:5702 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"?actor kg:2117 kg:6645 .\",\n            \"?actor kg:4144 kg:5863 .\",\n            \"?actor kg:5702 ?dateOfBirth .\",\n            \"FILTER (xsd:date(?dateOfBirth) > \\\"1950-01-01\\\"^^xsd:date)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999 . ?actor wdt:P19 wd:Q90 . ?actor wdt:P569 ?dateOfBirth . FILTER (xsd:date(?dateOfBirth) > \"1950-01-01\"^^xsd:date) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P161 wd:Q20478.\",\n    \"  ?movie wdt:P161 wd:Q35967.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q20478. ?movie wdt:P161 wd:Q35967. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q34851 is Elizabeth Taylor\nwdt:P161 is cast member\nwd:Q151973 is Richard Burton", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P161 wd:Q34851.\",\n      \"?movie wdt:P161 wd:Q151973.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q34851. ?movie wdt:P161 wd:Q151973. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which movies star both Liz Taylor and Richard Burton?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which movies star both Liz Taylor and Richard Burton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3549 is cast member\nkg:8585 is Elizabeth Taylor\nkg:3549 is cast member\nkg:7795 is Richard Burton", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:3549 kg:8585.\",\n            \"?movie kg:3549 kg:7795.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q34851. ?movie wdt:P161 wd:Q151973. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Australian nonprofit organizations.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P31 wd:Q728406.\",\n    \"  ?organization wdt:P17 wd:Q408.\"\n    ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q728406. ?organization wdt:P17 wd:Q408. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Australian nonprofit organizations.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q163740 is nonprofit organization\nwdt:P159 is headquarters location\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P159 is headquarters location\nwdt:P17 is country\nwdt:P159 is headquarters location\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n      \"?organization wdt:P31 wd:Q163740.\",\n      \"?organization wdt:P17 wd:Q408.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q163740. ?organization wdt:P17 wd:Q408. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Australian nonprofit organizations.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Australian nonprofit organizations.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4777 is instance of\nkg:7142 is nonprofit organization\nkg:9739 is headquarters location\nkg:5338 is country\nkg:0600 is Australia\nkg:9739 is headquarters location\nkg:5338 is country\nkg:9739 is headquarters location\nkg:0600 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?org\",\n    \"WHERE {\",\n      \"?org kg:4777 kg:7142 .\",\n      \"?org kg:9739/kg:5338 kg:0600 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?org WHERE { ?org wdt:P31 wd:Q163740 . ?org wdt:P159/wdt:P17 wd:Q408 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which pope succeeded John Paul II?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?succeeded WHERE {\",\n    \"  wd:Q21954 wdt:P647 ?succeeded.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?succeeded WHERE { wd:Q21954 wdt:P647 ?succeeded. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which pope succeeded John Paul II?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q989 is John Paul II\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?succeeded WHERE {\",\n      \"wd:Q989 p:P39/ps:P39/wd:Q19546/pq:P1366 ?succeeded.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?succeeded WHERE { wd:Q989 p:P39/ps:P39/wd:Q19546/pq:P1366 ?succeeded. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which pope succeeded John Paul II?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which pope succeeded John Paul II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4431 is John Paul II\nkg:3917 is position held\nkg:8695 is position held\nkg:5502 is pope\nkg:5825 is replaced by", "response": "{\n    \"query\": [\n        \"SELECT ?succeeded WHERE {\",\n            \"kg:4431 kg:3917/kg:8695 ?succeeded.\",\n            \"?succeeded kg:5502 kg:5825 kg:4431.\"\n        ]\n    }\n ", "normal_query": "SELECT ?succeeded WHERE { wd:Q989 p:P39/ps:P39 ?succeeded. ?succeeded wd:Q19546 pq:P1366 wd:Q989. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was president of Pakistan in 1978?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n        \"  wd:Q843 wdt:P31 wd:Q6256.\",\n        \"  wd:Q843 p:P39 ?statement.\",\n        \"  ?statement ps:P39 ?president.\",\n        \"  ?statement pq:P580 \\\"+1978-01-01T00:00:00Z/\\\"^^xsd:dateTime.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q843 wdt:P31 wd:Q6256. wd:Q843 p:P39 ?statement. ?statement ps:P39 ?president. ?statement pq:P580 \"+1978-01-01T00:00:00Z/\"^^xsd:dateTime. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was president of Pakistan in 1978?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q473984 is President of Pakistan\np:P39 is position held\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president wdt:P39 wd:Q473984.\",\n      \"?position p:P39 ?statement.\",\n      \"?statement ps:P39 wd:Q473984.\",\n      \"?statement pq:P580 ?startTime.\",\n      \"?statement pq:P582 ?endTime.\",\n      \"FILTER(?startTime <= \\\"1978-12-31\\\"^^xsd:date && ?endTime >= \\\"1978-01-01\\\"^^xsd:date).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P39 wd:Q473984. ?position p:P39 ?statement. ?statement ps:P39 wd:Q473984. ?statement pq:P580 ?startTime. ?statement pq:P582 ?endTime. FILTER(?startTime <= \"1978-12-31\"^^xsd:date && ?endTime >= \"1978-01-01\"^^xsd:date). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was president of Pakistan in 1978?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was president of Pakistan in 1978?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8206 is position held\nkg:4349 is President of Pakistan\nkg:3509 is position held\nkg:2536 is start time\nkg:0612 is end time", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n            \"?president kg:8206 kg:4349 .\",\n            \"?position kg:3509 ?president .\",\n            \"?position kg:2536 \\\"1978-01-01\\\"^^xsd:dateTime .\",\n            \"FILTER(?position kg:0612 > \\\"1978-12-31\\\"^^xsd:dateTime)\"\n        ]\n    }\n ", "normal_query": "SELECT ?president WHERE { ?president wdt:P39 wd:Q473984 . ?position p:P39 ?president . ?position pq:P580 \"1978-01-01\"^^xsd:dateTime . FILTER(?position pq:P582 > \"1978-12-31\"^^xsd:dateTime) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the owner of Rolls-Royce?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q10742 wdt:P135 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q10742 wdt:P135 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the owner of Rolls-Royce?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q243278 is Rolls-Royce\nwdt:P127 is owned by", "response": "{\n    \"query\": [\n        \"SELECT ?owner WHERE {\",\n        \"  wd:Q243278 wdt:P127 ?owner.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q243278 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the owner of Rolls-Royce?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Rolls-Royce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5136 is Rolls-Royce\nkg:4524 is owned by", "response": "{\n    \"query\": [\n        \"SELECT ?owner\",\n        \"WHERE {\",\n            \"<http://example.org/kg/5136> <http://example.org/kg/4524> ?owner.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?owner WHERE { <http://example.org/kg//5136> <http://example.org/kg//4524> ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many museums does Paris have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"  ?museum wdt:P17 wd:Q142.\",\n    \"  ?museum wdt:P31 wd:Q33506.\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P17 wd:Q142. ?museum wdt:P31 wd:Q33506. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many museums does Paris have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P131 is located in the administrative territorial entity\nwd:Q90 is Paris", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n      \"?museum wdt:P31 wd:Q33506 .\",\n      \"?museum wdt:P131 wd:Q90 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506 . ?museum wdt:P131 wd:Q90 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many museums does Paris have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many museums does Paris have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8603 is instance of\nkg:3705 is museum\nkg:5581 is located in the administrative territorial entity\nkg:2715 is Paris", "response": "{\n    \"query\": [\n        \"SELECT ?museum\",\n        \"WHERE {\",\n            \"?museum kg:8603 kg:3705 .\",\n            \"?museum kg:5581 kg:2715 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506 . ?museum wdt:P131 wd:Q90 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where was JFK assassinated?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q3126 wdt:P1089 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q3126 wdt:P1089 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where was JFK assassinated?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q9696 wdt:P20 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q9696 wdt:P20 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where was JFK assassinated?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where was JFK assassinated?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0170 is John F. Kennedy\nkg:4823 is place of death", "response": "{\n    \"query\": [\n        \"SELECT ?place WHERE {\",\n            \"kg:0170 kg:4823 ?place.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q9696 wdt:P20 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all federal chancellors of Germany.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P31 wd:Q279568.\",\n    \"  ?chancellor wdt:P106 wd:Q48203.\"\n    ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P31 wd:Q279568. ?chancellor wdt:P106 wd:Q48203. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all federal chancellors of Germany.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n      \"?chancellor wdt:P39 wd:Q4970706.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P39 wd:Q4970706. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all federal chancellors of Germany.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all federal chancellors of Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0430 is position held\nkg:8057 is Federal Chancellor of Germany", "response": "{\n    \"query\": [\n        \"SELECT ?chancellor\",\n        \"WHERE {\",\n            \"?chancellor kg:0430 kg:8057.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P39 wd:Q4970706. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which beer originated in Ireland?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?beer WHERE {\",\n    \"  ?beer wdt:P31 wd:Q7659.\",\n    \"  ?beer wdt:P495 wd:Q2080.\"\n    ]\n}", "normal_query": "SELECT ?beer WHERE { ?beer wdt:P31 wd:Q7659. ?beer wdt:P495 wd:Q2080. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which beer originated in Ireland?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44 is beer\nwd:Q15075508 is beer brand\nwdt:P31 is instance of\nwdt:P17 is country\nwd:Q27 is Republic of Ireland", "response": "{\n  \"query\": [\n    \"SELECT ?beer WHERE {\",\n      \"?beer wdt:P31 wd:Q44.\",\n      \"?beer wdt:P17 wd:Q27.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?beer WHERE { ?beer wdt:P31 wd:Q44. ?beer wdt:P17 wd:Q27. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which beer originated in Ireland?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which beer originated in Ireland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6618 is beer\nkg:6574 is beer brand\nkg:0525 is instance of\nkg:3428 is country\nkg:7048 is Republic of Ireland", "response": "{\n    \"query\": [\n        \"SELECT ?beer\",\n        \"WHERE {\",\n            \"?beer kg:0525 kg:6618 .\",\n            \"?beer kg:6574 ?brand .\",\n            \"?brand kg:3428 kg:7048 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?beer WHERE { ?beer wdt:P31 wd:Q44 . ?beer wd:Q15075508 ?brand . ?brand wdt:P17 wd:Q27 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q10724 wdt:P361 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q10724 wdt:P361 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5451 is Himalayas\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"wd:Q5451 wdt:P36 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q5451 wdt:P36 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which countries does the Himalayan mountain system extend?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “To which countries does the Himalayan mountain system extend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Himalayas\nkg:4276 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:0335 kg:4276 ?country.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q5451 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which actors were born in Germany?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P31 wd:Q33999.\",\n    \"  ?actor wdt:P1082 wd:Q183.\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q33999. ?actor wdt:P1082 wd:Q183. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which actors were born in Germany?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10800557 is film actor\nwdt:P19 is place of birth\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q10800557.\",\n      \"?actor wdt:P19 wd:Q183.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q10800557. ?actor wdt:P19 wd:Q183. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which actors were born in Germany?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which actors were born in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9522 is occupation\nkg:1808 is film actor\nkg:0224 is place of birth\nkg:5013 is Germany\nkg:0224 is place of birth\nkg:2561 is country\nkg:5013 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor kg:9522 kg:1808 .\",\n      \"?actor kg:0224 ?birthPlace .\",\n      \"?birthPlace kg:2561 kg:5013 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q10800557 . ?actor wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q183 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who produced the most films?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P31 wd:Q28650.\",\n    \"  ?filmProducer wdt:P179 ?film.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?film)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P31 wd:Q28650. ?filmProducer wdt:P179 ?film. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?film) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Who produced the most films?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P162 ?producer.\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P162 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who produced the most films?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who produced the most films?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is instance of\nkg:0983 is film\nkg:9722 is producer", "response": "{\n    \"query\": [\n        \"SELECT ?producer\",\n        \"WHERE {\",\n            \"?film kg:8519/kg:0983 .\",\n            \"?film kg:9722 ?producer .\",\n            \"}\",\n            \"GROUP BY ?producer\",\n            \"ORDER BY DESC(COUNT(?film))\",\n            \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31/wd:Q11424 . ?film wdt:P162 ?producer . } GROUP BY ?producer ORDER BY DESC(COUNT(?film)) LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many employees does Google have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n    \"  wd:Q9531 Q2064782 ?employee.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employee WHERE { wd:Q9531 Q2064782 ?employee. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many employees does Google have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q95 is Google\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?employees WHERE {\",\n    \"  wd:Q95 wdt:P1128 ?employees.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employees WHERE { wd:Q95 wdt:P1128 ?employees. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many employees does Google have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many employees does Google have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1346 is Google\nkg:0226 is employees", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:1346 kg:0226 ?resource .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q95 wdt:P1128 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all actors who were born in Berlin.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P31 wd:Q33999.\",\n    \"  ?actor wdt:P19 wd:Q64.\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q33999. ?actor wdt:P19 wd:Q64. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all actors who were born in Berlin.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P19 is place of birth\nwd:Q64 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?actor wdt:P19 wd:Q64.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P19 wd:Q64. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors who were born in Berlin.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all actors who were born in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5174 is occupation\nkg:4298 is actor\nkg:3614 is place of birth\nkg:5337 is Berlin", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"?actor kg:5174 kg:4298 .\",\n            \"?actor kg:3614 kg:5337 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999 . ?actor wdt:P19 wd:Q64 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Goofy?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q106428 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q106428 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Goofy?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111135 is Goofy\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q111135 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q111135 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Goofy?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created Goofy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9459 is Goofy\nkg:7536 is creator", "response": "{\n    \"query\": [\n        \"SELECT ?creator\",\n        \"WHERE {\",\n            \"kg:9459 kg:7536 ?creator.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q111135 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was Alberta admitted as province?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?province WHERE {\",\n    \"  wd:Q81 wdt:P31 wd:Q20764.\",\n    \"  wd:Q81 wdt:P580 ?date.\",\n    \"  wd:Q81 wdt:P31 ?province.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?province WHERE { wd:Q81 wdt:P31 wd:Q20764. wd:Q81 wdt:P580 ?date. wd:Q81 wdt:P31 ?province. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was Alberta admitted as province?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1951 is Alberta\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?province WHERE {\",\n      \"wd:Q1951 wdt:P31 ?province.\",\n      \"?province wdt:P571 ?inception.\"\n    ]\n  }\n ", "normal_query": "SELECT ?province WHERE { wd:Q1951 wdt:P31 ?province. ?province wdt:P571 ?inception. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When was Alberta admitted as province?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was Alberta admitted as province?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8461 is Alberta\nkg:3974 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8461 kg:3974 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1951 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many missions does the Soyuz programme have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mission WHERE {\",\n    \"  wd:Q10642 wdt:P31 wd:Q57986.\",\n    \"  wd:Q10642 p:P179 ?statement.\",\n    \"  ?statement ps:P179 ?mission.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mission WHERE { wd:Q10642 wdt:P31 wd:Q57986. wd:Q10642 p:P179 ?statement. ?statement ps:P179 ?mission. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many missions does the Soyuz programme have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q207329 is Soyuz programme", "response": "{\n  \"query\": [\n    \"SELECT ?mission WHERE {\",\n      \"?mission wdt:P361 wd:Q207329.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mission WHERE { ?mission wdt:P361 wd:Q207329. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many missions does the Soyuz programme have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many missions does the Soyuz programme have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4715 is part of\nkg:9205 is Soyuz programme", "response": "{\n    \"query\": [\n        \"SELECT ?mission\",\n        \"WHERE {\",\n            \"?mission kg:4715 kg:9205.\",\n            \"}\"\n    ]\n}", "normal_query": "SELECT ?mission WHERE { ?mission wdt:P361 wd:Q207329. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?tvShow WHERE {\",\n    \"  wd:Q106487 wdt:P356 ?tvShow.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?tvShow WHERE { wd:Q106487 wdt:P356 ?tvShow. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q15416 is television program\nwdt:P161 is cast member\nwd:Q485310 is Neil Patrick Harris\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?tvShow WHERE {\",\n      \"?tvShow wdt:P31 wd:Q15416.\",\n      \"?tvShow wdt:P161 wd:Q485310.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?tvShow WHERE { ?tvShow wdt:P31 wd:Q15416. ?tvShow wdt:P161 wd:Q485310. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all the TV shows with Neil Patrick Harris.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all the TV shows with Neil Patrick Harris.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2058 is subclass of\nkg:5497 is television program\nkg:8214 is cast member\nkg:9534 is Neil Patrick Harris\nkg:3632 is instance of", "response": "{\n    \"query\": [\n        \"SELECT ?tvShow\",\n        \"WHERE {\",\n            \"?tvShow kg:2058/kg:5497 .\",\n            \"?tvShow kg:8214/kg:9534 .\",\n            \"FILTER NOT EXISTS { ?tvShow kg:3632/kg:5497 }\"\n        ]\n    }\n ", "normal_query": "SELECT ?tvShow WHERE { ?tvShow wdt:P279/wd:Q15416 . ?tvShow wdt:P161/wd:Q485310 . FILTER NOT EXISTS { ?tvShow wdt:P31/wd:Q15416 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When were the Hells Angels founded?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?foundationDate WHERE {\",\n    \"  wd:Q154268 wdt:P571 ?foundationDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?foundationDate WHERE { wd:Q154268 wdt:P571 ?foundationDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When were the Hells Angels founded?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q622188 is Hells Angels\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?foundation WHERE {\",\n      \"wd:Q622188 wdt:P571 ?foundation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?foundation WHERE { wd:Q622188 wdt:P571 ?foundation. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When were the Hells Angels founded?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When were the Hells Angels founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6885 is Hells Angels\nkg:8843 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:6885 kg:8843 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q622188 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the net income of Apple?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?netIncome WHERE {\",\n    \"  wd:Q312 Q647859 ?netIncome.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?netIncome WHERE { wd:Q312 Q647859 ?netIncome. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the net income of Apple?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q312 is Apple\nwdt:P2295 is net profit", "response": "{\n  \"query\": [\n    \"SELECT ?netIncome WHERE {\",\n      \"wd:Q312 wdt:P2295 ?netIncome.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?netIncome WHERE { wd:Q312 wdt:P2295 ?netIncome. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the net income of Apple?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the net income of Apple?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9309 is Apple\nkg:5852 is net profit", "response": "{\n    \"query\": [\n        \"SELECT ?net_income\",\n        \"WHERE {\",\n            \"<http://example.org/kg/9309> <http://example.org/kg/5852> ?net_income.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?net_income WHERE { <http://example.org/kg//9309> <http://example.org/kg//5852> ?net_income. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Swedish holidays.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31 wd:Q207695.\",\n    \"  ?holiday wdt:P495 wd:Q34868.\"\n    ]\n}", "normal_query": "SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q207695. ?holiday wdt:P495 wd:Q34868. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Swedish holidays.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q1401522 is public holidays in Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n      \"?holiday wdt:P31 wd:Q1401522.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q1401522. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Swedish holidays.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Swedish holidays.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5437 is instance of\nkg:1431 is public holidays in Sweden", "response": "{\n    \"query\": [\n        \"SELECT ?holiday\",\n        \"WHERE {\",\n            \"?holiday kg:1431 kg:5437.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?holiday WHERE { ?holiday wd:Q1401522 wdt:P31. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q216408 p:P31/ps:P31/wdt:P279* wd:Q5.\",\n    \"  wd:Q216408 wdt:P119 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q216408 p:P31/ps:P31/wdt:P279* wd:Q5. wd:Q216408 wdt:P119 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154946 is Juliana of the Netherlands\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q154946 wdt:P119 ?place.\",\n    \"  ?place wdt:P31 wd:Q515.\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q154946 wdt:P119 ?place. ?place wdt:P31 wd:Q515. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which city was the former Dutch queen Juliana buried?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which city was the former Dutch queen Juliana buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7722 is Juliana of the Netherlands\nkg:1563 is place of burial", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"kg:7722 kg:1563 ?city.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q154946 wdt:P119 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all companies in the advertising industry.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q482076.\",\n    \"  ?company wdt:P106 wd:Q59462.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q482076. ?company wdt:P106 wd:Q59462. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all companies in the advertising industry.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P452 is industry\nwd:Q39809 is marketing", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P31 wd:Q4830453.\",\n      \"?company wdt:P452 wd:Q39809.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453. ?company wdt:P452 wd:Q39809. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all companies in the advertising industry.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all companies in the advertising industry.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6959 is instance of\nkg:4237 is business\nkg:0680 is industry\nkg:5161 is marketing", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:6959 kg:4237 .\",\n            \"?company kg:0680 kg:5161 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P452 wd:Q39809 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who killed John Lennon?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P1344 wd:Q568.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1344 wd:Q568. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who killed John Lennon?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1203 is John Lennon\nwdt:P157 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?killer WHERE {\",\n    \"  wd:Q1203 wdt:P157 ?killer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?killer WHERE { wd:Q1203 wdt:P157 ?killer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who killed John Lennon?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who killed John Lennon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2917 is John Lennon\nkg:5682 is killed by", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://example.org/kg/2917> <http://example.org/kg/5682> ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://example.org/kg//2917> <http://example.org/kg//5682> ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writers studied in Istanbul?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P106 wd:Q33964.\",\n    \"  ?writer wdt:P275 wd:Q807.\"\n    ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106 wd:Q33964. ?writer wdt:P275 wd:Q807. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writers studied in Istanbul?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36180 is writer\nwdt:P69 is educated at\nwdt:P131 is located in the administrative territorial entity\nwd:Q406 is Istanbul", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P106 wd:Q36180.\",\n      \"?writer wdt:P69 ?institution.\",\n      \"?institution wdt:P131 wd:Q406.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106 wd:Q36180. ?writer wdt:P69 ?institution. ?institution wdt:P131 wd:Q406. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which writers studied in Istanbul?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which writers studied in Istanbul?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5704 is occupation\nkg:0260 is writer\nkg:7091 is educated at\nkg:8154 is located in the administrative territorial entity\nkg:9339 is Istanbul", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"?writer kg:5704/kg:0260 .\",\n            \"?writer kg:7091 ?education .\",\n            \"?education kg:8154/kg:9339 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P106/wd:Q36180 . ?writer wdt:P69 ?education . ?education wdt:P131/wd:Q406 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Australian metalcore bands.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?band WHERE {\",\n    \"  ?band wdt:P31 wd:Q206498.\",\n    \"  ?band wdt:P17 wd:Q408.\"\n    ]\n}", "normal_query": "SELECT ?band WHERE { ?band wdt:P31 wd:Q206498. ?band wdt:P17 wd:Q408. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Australian metalcore bands.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q215380 is musical group\nwdt:P495 is country of origin\nwd:Q408 is Australia\nwdt:P136 is genre\nwd:Q183862 is metalcore", "response": "{\n  \"query\": [\n    \"SELECT ?band WHERE {\",\n      \"?band wdt:P31 wd:Q215380.\",\n      \"?band wdt:P495 wd:Q408.\",\n      \"?band wdt:P136 wd:Q183862.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?band WHERE { ?band wdt:P31 wd:Q215380. ?band wdt:P495 wd:Q408. ?band wdt:P136 wd:Q183862. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Australian metalcore bands.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Australian metalcore bands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2057 is instance of\nkg:5941 is musical group\nkg:6595 is country of origin\nkg:4070 is Australia\nkg:5506 is genre\nkg:6845 is metalcore", "response": "{\n    \"query\": [\n        \"SELECT ?band\",\n        \"WHERE {\",\n            \"?band kg:2057/kg:5941 .\",\n            \"?band kg:6595/kg:4070 .\",\n            \"?band kg:5506/kg:6845 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?band WHERE { ?band wdt:P31/wd:Q215380 . ?band wdt:P495/wd:Q408 . ?band wdt:P136/wd:Q183862 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which countries adopted the Euro?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P374 ?currency.\",\n    \"  ?currency rdfs:label \\\"Euro\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P374 ?currency. ?currency rdfs:label \"Euro\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries adopted the Euro?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31 wd:Q6256.\",\n      \"?country wdt:P38 wd:Q4916.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P38 wd:Q4916. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which countries adopted the Euro?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4911 is instance of\nkg:8401 is country\nkg:8909 is currency\nkg:8143 is euro", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:4911 kg:8401 .\",\n            \"?country kg:8909 kg:8143 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P38 wd:Q4916 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all types of eating disorders.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?eatingDisorder WHERE {\",\n    \"  ?eatingDisorder wdt:P31 wd:Q209487.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?eatingDisorder WHERE { ?eatingDisorder wdt:P31 wd:Q209487. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all types of eating disorders.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q373822 is eating disorder", "response": "{\n  \"query\": [\n    \"SELECT ?eatingDisorder WHERE {\",\n      \"?eatingDisorder wdt:P279* wd:Q373822.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?eatingDisorder WHERE { ?eatingDisorder wdt:P279* wd:Q373822. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all types of eating disorders.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all types of eating disorders.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6601 is subclass of\nkg:7808 is eating disorder", "response": "{\n    \"query\": [\n        \"SELECT ?eatingDisorder\",\n        \"WHERE {\",\n            \"?eatingDisorder kg:6601 kg:7808.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?eatingDisorder WHERE { ?eatingDisorder wdt:P279 wd:Q373822. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Was Marc Chagall a jew?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q104267 wdt:P31 wd:Q5.\",\n    \"  wd:Q104267 wdt:P108 wd:Q9536.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q104267 wdt:P31 wd:Q5. wd:Q104267 wdt:P108 wd:Q9536. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Marc Chagall a jew?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q93284 is Marc Chagall\nwdt:P172 is ethnic group\nwd:Q7325 is Jewish people", "response": "{\n  \"query\": [\n    \"SELECT ?ethnicGroup WHERE {\",\n      \"wd:Q93284 wdt:P172 ?ethnicGroup.\",\n      \"FILTER(?ethnicGroup = wd:Q7325)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?ethnicGroup WHERE { wd:Q93284 wdt:P172 ?ethnicGroup. FILTER(?ethnicGroup = wd:Q7325) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Marc Chagall a jew?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Marc Chagall a jew?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3776 is Marc Chagall\nkg:7566 is ethnic group\nkg:9691 is Jewish people", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/3776> <http://www.example.org/kg/7566> ?resource .\",\n            \"?resource <http://www.example.org/kg/9691> ?jewish .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://www.example.org/kg//3776> <http://www.example.org/kg//7566> ?resource . ?resource <http://www.example.org/kg//9691> ?jewish . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?rank WHERE {\",\n    \"  wd:Q150 wdt:P2437 ?rank.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?rank WHERE { wd:Q150 wdt:P2437 ?rank. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83459 is Brazil national football team\np:P1352 is ranking\npq:P459 is determination method\nwd:Q180825 is FIFA World Rankings\nps:P1352 is ranking", "response": "{\n  \"query\": [\n    \"SELECT ?ranking WHERE {\",\n      \"wd:Q83459 p:P1352 ?statement.\",\n      \"?statement ps:P1352 ?ranking.\",\n      \"?statement pq:P459 wd:Q180825.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?ranking WHERE { wd:Q83459 p:P1352 ?statement. ?statement ps:P1352 ?ranking. ?statement pq:P459 wd:Q180825. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Brazil's lowest rank in the FIFA World Ranking?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was Brazil's lowest rank in the FIFA World Ranking?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1028 is Brazil national football team\nkg:5752 is ranking\nkg:7102 is determination method\nkg:1734 is FIFA World Rankings\nkg:0187 is ranking", "response": "{\n    \"query\": [\n        \"SELECT ?ranking\",\n        \"WHERE {\",\n            \"kg:1028 kg:0187 ?ranking.\",\n            \"?ranking kg:5752 ?rankValue.\",\n            \"FILTER(?rankValue = (SELECT MAX(?rankValue) WHERE { ?ranking kg:5752 ?rankValue. }))\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?ranking WHERE { wd:Q83459 ps:P1352 ?ranking. ?ranking p:P1352 ?rankValue. FILTER(?rankValue = (SELECT MAX(?rankValue) WHERE { ?ranking p:P1352 ?rankValue. })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q3769 wdt:P1444 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q3769 wdt:P1444 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q38111 is Leonardo DiCaprio", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"wd:Q38111 wdt:P161 ?film.\",\n      \"?film wdt:P31 wd:Q11424.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q38111 wdt:P161 ?film. ?film wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many films did Leonardo DiCaprio star in?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many films did Leonardo DiCaprio star in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2490 is instance of\nkg:5000 is film\nkg:4337 is cast member\nkg:0455 is Leonardo DiCaprio", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"kg:0455 kg:2490/kg:4337 ?film.\",\n            \"?film kg:2490/kg:5000.\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { wd:Q38111 wdt:P31/wdt:P161 ?film. ?film wdt:P31/wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Margaret Thatcher a chemist?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q82690.\",\n    \"  ?item rdfs:label \\\"Margaret Thatcher\\\"@en.\",\n    \"  ?item wdt:P106 wd:Q47574.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q82690. ?item rdfs:label \"Margaret Thatcher\"@en. ?item wdt:P106 wd:Q47574. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Margaret Thatcher a chemist?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P106 is occupation\nwd:Q593644 is chemist", "response": "{\n  \"query\": [\n    \"SELECT ?occupation WHERE {\",\n      \"wd:Q7416 wdt:P106 ?occupation.\",\n      \"FILTER(?occupation = wd:Q593644)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?occupation WHERE { wd:Q7416 wdt:P106 ?occupation. FILTER(?occupation = wd:Q593644) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Margaret Thatcher a chemist?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Margaret Thatcher a chemist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1806 is Margaret Thatcher\nkg:4297 is occupation\nkg:0500 is chemist", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1806> <http://example.org/kg/4297> ?occupation .\",\n            \"?occupation <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://example.org/kg/0500> .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://example.org/kg//1806> <http://example.org/kg//4297> ?occupation . ?occupation <http://www.w3.org/2000/01//rdf-schema> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q1246 wdt:P30 ?timeZone .\",\n    \"  ?state wdt:P30 ?timeZone ;\",\n    \"         wdt:P31 wd:Q35657 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q1246 wdt:P30 ?timeZone . ?state wdt:P30 ?timeZone ; wdt:P31 wd:Q35657 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q829 is Utah\nwdt:P421 is located in time zone\nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P421 is located in time zone\nwd:Q829 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657 .\",\n      \"?state wdt:P421 ?timeZone .\",\n      \"wd:Q829 wdt:P421 ?timeZone .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P421 ?timeZone . wd:Q829 wdt:P421 ?timeZone . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which U.S. states are in the same time zone as Utah?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which U.S. states are in the same time zone as Utah?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2386 is Utah\nkg:4838 is located in time zone\nkg:9877 is instance of\nkg:7634 is U.S. state\nkg:4838 is located in time zone\nkg:2386 is Utah", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state kg:9877 kg:7634 .\",\n      \"?state kg:4838 ?timeZone .\",\n      \"kg:2386 kg:4838 ?timeZone .\"\n    ]\n  }\n ", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P421 ?timeZone . wd:Q829 wdt:P421 ?timeZone . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which country has the most official languages?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P37 wd:Q186042.\",\n    \"  ?country p:P37 ?statement.\",\n    \"  ?statement ps:P37 ?languages.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?languages)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P37 wd:Q186042. ?country p:P37 ?statement. ?statement ps:P37 ?languages. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?languages) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which country has the most official languages?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31 wd:Q6256.\",\n      \"?country wdt:P37 ?language.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"GROUP BY ?country\",\n    \"ORDER BY DESC(COUNT(?language))\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P37 ?language. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } GROUP BY ?country ORDER BY DESC(COUNT(?language)) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which country has the most official languages?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which country has the most official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8689 is instance of\nkg:9409 is country\nkg:1656 is official language", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:8689 kg:9409 .\",\n            \"?country kg:1656 ?language .\",\n            \"FILTER NOT EXISTS { ?otherCountry kg:1656 ?language . FILTER (?otherCountry != ?country) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P37 ?language . FILTER NOT EXISTS { ?otherCountry wdt:P37 ?language . FILTER (?otherCountry != ?country) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which actor played Chewbacca?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q106295 wdt:P345 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q106295 wdt:P345 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which actor played Chewbacca?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51803 is Chewbacca\nwdt:P175 is performer", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q51803 wdt:P175 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q51803 wdt:P175 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which actor played Chewbacca?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which actor played Chewbacca?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5480 is Chewbacca\nkg:2106 is performer", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"kg:5480 kg:2106 ?actor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q51803 wdt:P175 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all libraries established earlier than 1400.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n    \"  ?library wdt:P31 wd:Q648072.\",\n    \"  ?library wdt:P571 ?date.\",\n    \"  FILTER(?date < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31 wd:Q648072. ?library wdt:P571 ?date. FILTER(?date < \"1400-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all libraries established earlier than 1400.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n      \"?library wdt:P31 wd:Q7075.\",\n      \"?library wdt:P571 ?inceptionDate.\",\n      \"FILTER(?inceptionDate < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31 wd:Q7075. ?library wdt:P571 ?inceptionDate. FILTER(?inceptionDate < \"1400-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all libraries established earlier than 1400.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all libraries established earlier than 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is instance of\nkg:8682 is library\nkg:1036 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?library\",\n        \"WHERE {\",\n            \"?library kg:0606/kg:8682 .\",\n            \"?library kg:1036 ?inceptionDate .\",\n            \"FILTER (?inceptionDate < 1400) \",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31/wd:Q7075 . ?library wdt:P571 ?inceptionDate . FILTER (?inceptionDate < 1400) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which programming languages were influenced by Perl?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P1480 wd:Q23976.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { ?language wdt:P1480 wd:Q23976. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which programming languages were influenced by Perl?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q9143 is programming language\nwdt:P737 is influenced by\nwd:Q42478 is Perl", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"?language wdt:P31 wd:Q9143.\",\n      \"?language wdt:P737 wd:Q42478.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { ?language wdt:P31 wd:Q9143. ?language wdt:P737 wd:Q42478. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which programming languages were influenced by Perl?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which programming languages were influenced by Perl?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1023 is instance of\nkg:5919 is programming language\nkg:3304 is influenced by\nkg:2765 is Perl", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:1023 kg:5919 .\",\n            \"?resource kg:3304 kg:2765 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q9143 . ?resource wdt:P737 wd:Q42478 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which U.S. state is Mount McKinley located?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q12469 wdt:P17 ?state.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q12469 wdt:P17 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which U.S. state is Mount McKinley located?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q130018 is Denali\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"wd:Q130018 wdt:P131 ?state.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q130018 wdt:P131 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which U.S. state is Mount McKinley located?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Mount McKinley located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5195 is Denali\nkg:2752 is located in the administrative territorial entity", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n            \"kg:5195 kg:2752 ?state.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q130018 wdt:P131 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n    \"  ?airline wdt:P452 wd:Q10637.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P452 wd:Q10637. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q212282 is SkyTeam", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n      \"?airline wdt:P31 wd:Q47579.\",\n      \"?airline wdt:P114 wd:Q212282.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q47579. ?airline wdt:P114 wd:Q212282. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What airlines are part of the SkyTeam alliance?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What airlines are part of the SkyTeam alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2866 is airline alliance\nkg:2419 is SkyTeam", "response": "{\n    \"query\": [\n        \"SELECT ?airline WHERE {\",\n            \"?airline kg:isPartOf kg:2866 .\",\n            \"kg:2866 kg:name \\\"SkyTeam\\\" .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?airline WHERE { ?airline kg:isPartOf wdt:P114 . wdt:P114 kg:name \"SkyTeam\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Methodist politicians.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P106 wd:Q82794;\",\n    \"            wdt:P140 wd:Q35657.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82794; wdt:P140 wd:Q35657. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Methodist politicians.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P140 is religion or worldview\nwd:Q33203 is Methodism", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n      \"?politician wdt:P106 wd:Q82955.\",\n      \"?politician wdt:P140 wd:Q33203.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955. ?politician wdt:P140 wd:Q33203. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Methodist politicians.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Methodist politicians.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8888 is occupation\nkg:9878 is politician\nkg:3778 is religion or worldview\nkg:3252 is Methodism", "response": "{\n    \"query\": [\n        \"SELECT ?politician\",\n        \"WHERE {\",\n            \"?politician kg:8888 kg:9878 .\",\n            \"?politician kg:3778 kg:3252 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955 . ?politician wdt:P140 wd:Q33203 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  wd:Q1064897 wdt:P50 ?author.\",\n    \"  ?book wdt:P50 ?author.\",\n    \"  FILTER(?book != wd:Q1064897)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q1064897 wdt:P50 ?author. ?book wdt:P50 ?author. FILTER(?book != wd:Q1064897) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658375 is The Fault in Our Stars\nwdt:P50 is author\nwdt:P50 is author\nwd:Q658375 is The Fault in Our Stars", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n      \"wd:Q658375 wdt:P50 ?author.\",\n      \"?author wdt:P50 ?book.\",\n      \"FILTER(?book != wd:Q658375)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q658375 wdt:P50 ?author. ?author wdt:P50 ?book. FILTER(?book != wd:Q658375) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What other books have been written by the author of The Fault in Our Stars?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What other books have been written by the author of The Fault in Our Stars?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5896 is The Fault in Our Stars\nkg:1268 is author\nkg:1268 is author\nkg:5896 is The Fault in Our Stars", "response": "{\n    \"query\": [\n        \"SELECT ?book\",\n        \"WHERE {\",\n            \"kg:5896 kg:1268 ?author.\",\n            \"?author kg:1268 ?book.\",\n            \"FILTER (?book != kg:5896)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q658375 wdt:P50 ?author. ?author wdt:P50 ?book. FILTER (?book != wd:Q658375) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P1793 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P1793 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?height) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q8502.\",\n      \"?mountain wdt:P2044 ?elevation.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P2044 ?elevation. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?elevation) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest mountain?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is instance of\nkg:3850 is mountain\nkg:9375 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?mountain\",\n        \"WHERE {\",\n            \"?mountain kg:1292 kg:3850 .\",\n            \"?mountain kg:9375 ?elevation .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMountain kg:1292 kg:3850 .\",\n                \"?otherMountain kg:9375 ?otherElevation .\",\n                \"FILTER (?otherElevation > ?elevation)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P2044 ?elevation . FILTER NOT EXISTS { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P2044 ?otherElevation . FILTER (?otherElevation > ?elevation) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which poet wrote the most books?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?poet WHERE {\",\n    \"  ?poet wdt:P31 wd:Q482076.\",\n    \"  ?book wdt:P50 ?poet.\",\n    \"  ?book wdt:P921 ?numberOfBooks.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?numberOfBooks)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?poet WHERE { ?poet wdt:P31 wd:Q482076. ?book wdt:P50 ?poet. ?book wdt:P921 ?numberOfBooks. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?numberOfBooks) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which poet wrote the most books?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q49757 is poet\nwdt:P50 is author\nwdt:P31 is instance of\nwd:Q571 is book", "response": "{\n  \"query\": [\n    \"SELECT ?poet WHERE {\",\n      \"?book wdt:P31 wd:Q571.\",\n      \"?book wdt:P50 ?author.\",\n      \"?author wdt:P31 wd:Q49757.\",\n      \"?author wdt:P106 wd:Q49757.\",\n      \"BIND(COUNT(?book) AS ?count)\",\n      \"}\",\n      \"GROUP BY ?author\",\n      \"ORDER BY DESC(?count)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?poet WHERE { ?book wdt:P31 wd:Q571. ?book wdt:P50 ?author. ?author wdt:P31 wd:Q49757. ?author wdt:P106 wd:Q49757. BIND(COUNT(?book) AS ?count) } GROUP BY ?author ORDER BY DESC(?count) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which poet wrote the most books?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which poet wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0120 is occupation\nkg:2954 is poet\nkg:1704 is author\nkg:0061 is instance of\nkg:7243 is book", "response": "{\n    \"query\": [\n        \"SELECT ?poet\",\n        \"WHERE {\",\n            \"?book kg:0061 kg:7243 .\",\n            \"?book kg:1704 ?author .\",\n            \"?author kg:0061 kg:2954 .\",\n            \"?author kg:0120 kg:0061 .\",\n            \"BIND(COUNT(?book) AS ?count)\",\n            \"}\",\n        \"GROUP BY ?author\",\n        \"ORDER BY DESC(?count)\",\n        \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?poet WHERE { ?book wdt:P31 wd:Q571 . ?book wdt:P50 ?author . ?author wdt:P31 wd:Q49757 . ?author wdt:P106 wdt:P31 . BIND(COUNT(?book) AS ?count) } GROUP BY ?author ORDER BY DESC(?count) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which programming languages influenced Javascript?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q28651 p:P34/wdt:P793 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q28651 p:P34/wdt:P793 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which programming languages influenced Javascript?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2005 is JavaScript\nwdt:P737 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?influencedBy WHERE {\",\n    \"  wd:Q2005 wdt:P737 ?influencedBy.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?influencedBy WHERE { wd:Q2005 wdt:P737 ?influencedBy. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which programming languages influenced Javascript?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which programming languages influenced Javascript?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5218 is JavaScript\nkg:8409 is influenced by", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://example.org/kg/5218> <http://example.org/kg/8409> ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://example.org/kg//5218> <http://example.org/kg//8409> ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which musician wrote the most books?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?musician WHERE {\",\n    \"  ?musician wdt:P106 wd:Q33967.\",\n    \"  ?book wdt:P50 ?musician.\",\n    \"  ?book wdt:P31 wd:Q571.\"\n    ]\n}", "normal_query": "SELECT ?musician WHERE { ?musician wdt:P106 wd:Q33967. ?book wdt:P50 ?musician. ?book wdt:P31 wd:Q571. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which musician wrote the most books?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q639669 is musician\nwdt:P31 is instance of\nwd:Q571 is book\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?musician WHERE {\",\n      \"?book wdt:P31 wd:Q571.\",\n      \"?book wdt:P50 ?author.\",\n      \"?author wdt:P31 wd:Q639669.\",\n      \"?author wdt:P106 wd:Q639669.\",\n      \"BIND(COUNT(?book) AS ?count)\",\n      \"}\",\n      \"GROUP BY ?author\",\n      \"ORDER BY DESC(?count)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?musician WHERE { ?book wdt:P31 wd:Q571. ?book wdt:P50 ?author. ?author wdt:P31 wd:Q639669. ?author wdt:P106 wd:Q639669. BIND(COUNT(?book) AS ?count) } GROUP BY ?author ORDER BY DESC(?count) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which musician wrote the most books?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which musician wrote the most books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4826 is occupation\nkg:0324 is musician\nkg:0683 is instance of\nkg:5954 is book\nkg:5686 is author", "response": "{\n    \"query\": [\n        \"SELECT ?musician\",\n        \"WHERE {\",\n            \"?book kg:5686 ?author.\",\n            \"?author kg:0324 kg:4826.\",\n            \"?author kg:0683 kg:0324.\",\n            \"VALUES ?occupation {kg:0324}\",\n            \"BIND (COUNT(?book) AS ?count)\",\n            \"GROUP BY ?author\",\n            \"ORDER BY DESC(?count)\",\n            \"LIMIT 1\"\n        ]\n    }\n   ", "normal_query": "SELECT ?musician WHERE { ?book wdt:P50 ?author. ?author wd:Q639669 wdt:P106. ?author wdt:P31 wd:Q639669. VALUES ?occupation {wd:Q639669} BIND (COUNT(?book) AS ?count) GROUP BY ?author ORDER BY DESC(?count) LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q6089.\",\n    \"  ?film wdt:P161 wd:Q1065.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q6089. ?film wdt:P161 wd:Q1065. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q43203 is Clint Eastwood\nwdt:P161 is cast member\nwd:Q43203 is Clint Eastwood", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q43203.\",\n      \"?film wdt:P161 wd:Q43203.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q43203. ?film wdt:P161 wd:Q43203. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which films starring Clint Eastwood did he direct himself?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which films starring Clint Eastwood did he direct himself?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7571 is director\nkg:1404 is Clint Eastwood\nkg:2987 is cast member\nkg:1404 is Clint Eastwood", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:7571 kg:1404.\",\n            \"?film kg:2987 kg:1404.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q43203. ?film wdt:P161 wd:Q43203. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which instruments does Cat Stevens play?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?instrument WHERE {\",\n    \"  wd:Q104697 wdt:P1303 ?instrument.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?instrument WHERE { wd:Q104697 wdt:P1303 ?instrument. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which instruments does Cat Stevens play?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q154216 is Cat Stevens\nwdt:P1303 is instrument", "response": "{\n  \"query\": [\n    \"SELECT ?instrument\",\n    \"WHERE {\",\n      \"wd:Q154216 wdt:P1303 ?instrument.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?instrument WHERE { wd:Q154216 wdt:P1303 ?instrument. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which instruments does Cat Stevens play?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which instruments does Cat Stevens play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9496 is Cat Stevens\nkg:7890 is instrument", "response": "{\n    \"query\": [\n        \"SELECT ?instrument\",\n        \"WHERE {\",\n            \"<http://example.org/kg/9496> <http://example.org/kg/7890> ?instrument.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?instrument WHERE { <http://example.org/kg//9496> <http://example.org/kg//7890> ?instrument. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many airlines are members of the Star Alliance?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n    \"  ?airline wdt:P31 wd:Q27649.\",\n    \"  ?airline wdt:P452 wd:Q8061.\"\n    ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q27649. ?airline wdt:P452 wd:Q8061. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many airlines are members of the Star Alliance?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P114 is airline alliance\nwd:Q189709 is Star Alliance", "response": "{\n  \"query\": [\n    \"SELECT ?airline WHERE {\",\n      \"?airline wdt:P31 wd:Q46525 .\",\n      \"?airline wdt:P114 wd:Q189709 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline wdt:P31 wd:Q46525 . ?airline wdt:P114 wd:Q189709 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many airlines are members of the Star Alliance?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many airlines are members of the Star Alliance?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1615 is airline alliance\nkg:9546 is Star Alliance", "response": "{\n    \"query\": [\n        \"SELECT ?airline WHERE {\",\n            \"?airline kg:isMemberOf kg:1615 .\",\n            \"kg:1615 kg:hasName \\\"Star Alliance\\\" .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?airline WHERE { ?airline kg:isMemberOf wdt:P114 . wdt:P114 kg:hasName \"Star Alliance\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote The Hunger Games?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q186472 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q186472 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote The Hunger Games?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11679 is The Hunger Games\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n      \"wd:Q11679 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q11679 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote The Hunger Games?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote The Hunger Games?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0284 is The Hunger Games\nkg:4529 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:0284 kg:4529 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q11679 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "For which label did Elvis record his first album?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?label WHERE {\",\n    \"  wd:Q37621 wdt:P451 ?album.\",\n    \"  ?album wdt:P179 ?label.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?label WHERE { wd:Q37621 wdt:P451 ?album. ?album wdt:P179 ?label. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "For which label did Elvis record his first album?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q59150527 is Elvis Presley's albums in chronological order\nwdt:P527 is has part(s)\nwdt:P577 is publication date\nwdt:P264 is record label", "response": "{\n  \"query\": [\n    \"SELECT ?label WHERE {\",\n      \"wd:Q59150527 wdt:P527 ?album.\",\n      \"?album wdt:P577 ?date.\",\n      \"?album wdt:P264 ?label.\",\n      \"FILTER (NOT EXISTS { ?album wdt:P577 ?earlierDate. FILTER (?earlierDate < ?date) })\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?label WHERE { wd:Q59150527 wdt:P527 ?album. ?album wdt:P577 ?date. ?album wdt:P264 ?label. FILTER (NOT EXISTS { ?album wdt:P577 ?earlierDate. FILTER (?earlierDate < ?date) }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "For which label did Elvis record his first album?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “For which label did Elvis record his first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1729 is Elvis Presley's albums in chronological order\nkg:4335 is has part(s)\nkg:9322 is publication date\nkg:4784 is record label", "response": "{\n    \"query\": [\n        \"SELECT ?label WHERE {\",\n            \"?album kg:4335 kg:1729 .\",\n            \"?album kg:4784 ?label .\",\n            \"FILTER NOT EXISTS { ?album kg:9322 ?date }\"\n        ]\n    }\n ", "normal_query": "SELECT ?label WHERE { ?album wdt:P527 wd:Q59150527 . ?album wdt:P264 ?label . FILTER NOT EXISTS { ?album wdt:P577 ?date } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q106247 wdt:P356 ?film.\",\n    \"  ?film wdt:P179 wd:Q8336.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q106247 wdt:P356 ?film. ?film wdt:P179 wd:Q8336. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q166262 is Batman Begins\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P161 wd:Q45772.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P161 wd:Q45772. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Christian Bale starring in Batman Begins?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Batman Begins?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2663 is Batman Begins\nkg:2232 is cast member\nkg:6261 is Christian Bale", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:2663 kg:2232 ?resource.\",\n            \"?resource kg:2232 kg:6261.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q166262 wdt:P161 ?resource. ?resource wdt:P161 wd:Q45772. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is the residence of the prime minister of Spain?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?residence WHERE {\",\n    \"  wd:Q2367154 wdt:P800 ?residence.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?residence WHERE { wd:Q2367154 wdt:P800 ?residence. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is the residence of the prime minister of Spain?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q844587 is Prime Minister of Spain\nwdt:P263 is official residence", "response": "{\n  \"query\": [\n    \"SELECT ?residence WHERE {\",\n      \"?primeMinister wdt:P263 ?residence.\",\n      \"?primeMinister wd:Q844587.\"\n    ]\n  }\n ", "normal_query": "SELECT ?residence WHERE { ?primeMinister wdt:P263 ?residence. ?primeMinister wd:Q844587. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Where is the residence of the prime minister of Spain?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where is the residence of the prime minister of Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6526 is Prime Minister of Spain\nkg:7770 is official residence", "response": "{\n    \"query\": [\n        \"SELECT ?residence\",\n        \"WHERE {\",\n            \"kg:6526 kg:official_residence ?residence.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?residence WHERE { wd:Q844587 kg:official_residence ?residence. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which actor was casted in the most movies?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P161 ?actor.\",\n    \"}\",\n    \"GROUP BY ?actor ORDER BY DESC(COUNT(?movie)) LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P161 ?actor. } GROUP BY ?actor ORDER BY DESC(COUNT(?movie)) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which actor was casted in the most movies?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q33999 is actor\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?movie wdt:P161 ?actor.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"GROUP BY ?actor ORDER BY DESC(COUNT(?movie)) LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?movie wdt:P161 ?actor. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } GROUP BY ?actor ORDER BY DESC(COUNT(?movie)) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which actor was casted in the most movies?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which actor was casted in the most movies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0813 is occupation\nkg:4987 is actor\nkg:5950 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"?movie kg:5950 ?castMember.\",\n            \"?castMember kg:0813 kg:4987.\",\n            \"?castMember kg:0813 ?actor.\",\n            \"}\",\n            \"GROUP BY ?actor\",\n            \"ORDER BY DESC(COUNT(?movie))\",\n            \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P161 ?castMember. ?castMember wdt:P106 wd:Q33999. ?castMember wdt:P106 ?actor. } GROUP BY ?actor ORDER BY DESC(COUNT(?movie)) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have more than two official languages?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P37 wd:Q1062548.\",\n    \"  ?country p:P37/ps:P37 ?languages.\",\n    \"  FILTER (COUNT(?languages) > 2).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P37 wd:Q1062548. ?country p:P37/ps:P37 ?languages. FILTER (COUNT(?languages) > 2). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have more than two official languages?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31 wd:Q6256.\",\n      \"?country wdt:P37 ?language1.\",\n      \"?country wdt:P37 ?language2.\",\n      \"?country wdt:P37 ?language3.\",\n      \"FILTER (?language1 != ?language2 && ?language1 != ?language3 && ?language2 != ?language3)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P37 ?language1. ?country wdt:P37 ?language2. ?country wdt:P37 ?language3. FILTER (?language1 != ?language2 && ?language1 != ?language3 && ?language2 != ?language3) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have more than two official languages?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries have more than two official languages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1484 is instance of\nkg:4940 is country\nkg:4371 is official language", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:1484 kg:4940 .\",\n            \"?country kg:4371 ?language .\",\n            \"FILTER (COUNT(?language) > 2)\",\n            \"}\",\n            \"GROUP BY ?country\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P37 ?language . FILTER (COUNT(?language) > 2) } GROUP BY ?country LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?song WHERE {\",\n        \"  ?song wdt:P31 wd:Q7366.\",\n        \"  ?song wdt:P175 wd:Q20849.\",\n        \"  ?song wdt:P577 ?date.\",\n        \"  FILTER(?date >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime && ?date < \\\"1990-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?song WHERE { ?song wdt:P31 wd:Q7366. ?song wdt:P175 wd:Q20849. ?song wdt:P577 ?date. FILTER(?date >= \"1980-01-01T00:00:00Z\"^^xsd:dateTime && ?date < \"1990-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7366 is song\nwdt:P577 is publication date\nwdt:P175 is performer\nwd:Q1225 is Bruce Springsteen", "response": "{\n  \"query\": [\n    \"SELECT ?song WHERE {\",\n      \"?song wdt:P31 wd:Q7366 .\",\n      \"?song wdt:P175 wd:Q1225 .\",\n      \"?song wdt:P577 ?date .\",\n      \"FILTER (year(?date) >= 1980 && year(?date) <= 1990)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?song WHERE { ?song wdt:P31 wd:Q7366 . ?song wdt:P175 wd:Q1225 . ?song wdt:P577 ?date . FILTER (year(?date) >= 1980 && year(?date) <= 1990) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me all songs from Bruce Springsteen released between 1980 and 1990.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all songs from Bruce Springsteen released between 1980 and 1990.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is instance of\nkg:4316 is song\nkg:3779 is publication date\nkg:4925 is performer\nkg:3345 is Bruce Springsteen", "response": "{\n    \"query\": [\n        \"SELECT ?song\",\n        \"WHERE {\",\n            \"?song kg:1132 kg:4316 .\",\n            \"?song kg:4925 kg:3345 .\",\n            \"?song kg:3779 ?date .\",\n            \"FILTER (xsd:integer(?date) >= 1980 && xsd:integer(?date) <= 1990)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?song WHERE { ?song wdt:P31 wd:Q7366 . ?song wdt:P175 wd:Q1225 . ?song wdt:P577 ?date . FILTER (xsd:integer(?date) >= 1980 && xsd:integer(?date) <= 1990) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which television shows were created by John Cleese?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"  wd:Q106547 wdt:P31 wd:Q28692.\",\n    \"  wd:Q106547 wdt:P170 ?show.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?show WHERE { wd:Q106547 wdt:P31 wd:Q28692. wd:Q106547 wdt:P170 ?show. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which television shows were created by John Cleese?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5398426 is television series\nwdt:P170 is creator\nwd:Q25014 is John Cleese\nwdt:P170 is creator\nwdt:P527 is has part(s)\nwd:Q25014 is John Cleese", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n      \"?show wdt:P31 wd:Q5398426.\",\n      \"?show wdt:P170 wd:Q25014.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?show WHERE { ?show wdt:P31 wd:Q5398426. ?show wdt:P170 wd:Q25014. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which television shows were created by John Cleese?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which television shows were created by John Cleese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is instance of\nkg:1395 is television series\nkg:4844 is creator\nkg:3811 is John Cleese\nkg:4844 is creator\nkg:4191 is has part(s)\nkg:3811 is John Cleese", "response": "{\n  \"query\": [\n    \"SELECT ?show\",\n    \"WHERE {\",\n      \"?show kg:2623 kg:1395 .\",\n      \"?show kg:4844 kg:3811 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?show WHERE { ?show wdt:P31 wd:Q5398426 . ?show wdt:P170 wd:Q25014 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Latvia join the EU?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n    \"  wd:Q210 wdt:P463 ?country.\",\n    \"  ?country wdt:P579 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q210 wdt:P463 ?country. ?country wdt:P579 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Latvia join the EU?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q211 is Latvia\np:P463 is member of\nps:P463 is member of\nwd:Q458 is European Union\npq:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n      \"?member p:P463/ps:P463 wd:Q458.\",\n      \"?member pq:P580 ?startTime.\",\n      \"FILTER(?member = wd:Q211)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?member WHERE { ?member p:P463/ps:P463 wd:Q458. ?member pq:P580 ?startTime. FILTER(?member = wd:Q211) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Latvia join the EU?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Latvia join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1273 is Latvia\nkg:0998 is member of\nkg:7272 is member of\nkg:6578 is European Union\nkg:8789 is start time", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:1273 kg:0998 ?resource .\",\n            \"?resource kg:7272 kg:6578 .\",\n            \"?resource kg:8789 ?startTime .\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { wd:Q211 p:P463 ?resource . ?resource ps:P463 wd:Q458 . ?resource pq:P580 ?startTime . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which soccer players were born on Malta?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P1082 wd:Q34679.\",\n    \"  ?player wdt:P106 wd:Q937857.\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P1082 wd:Q34679. ?player wdt:P106 wd:Q937857. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which soccer players were born on Malta?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q937857 is association football player\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q233 is Malta", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q937857.\",\n      \"?player wdt:P19 ?birthPlace.\",\n      \"?birthPlace wdt:P17 wd:Q233.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q937857. ?player wdt:P19 ?birthPlace. ?birthPlace wdt:P17 wd:Q233. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which soccer players were born on Malta?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which soccer players were born on Malta?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5683 is occupation\nkg:5225 is association football player\nkg:7932 is place of birth\nkg:9554 is country\nkg:8345 is Malta", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:5683 kg:5225 .\",\n            \"?player kg:7932 ?birthPlace .\",\n            \"?birthPlace kg:9554 kg:8345 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q937857 . ?player wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q233 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many politicians graduated from Columbia University?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P106 wd:Q82955.\",\n    \"  ?politician wdt:P69 wd:Q47396.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955. ?politician wdt:P69 wd:Q47396. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many politicians graduated from Columbia University?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P69 is educated at\nwd:Q49088 is Columbia University", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n      \"?politician wdt:P106 wd:Q82955.\",\n      \"?politician wdt:P69 wd:Q49088.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955. ?politician wdt:P69 wd:Q49088. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many politicians graduated from Columbia University?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many politicians graduated from Columbia University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0795 is occupation\nkg:2450 is politician\nkg:5792 is educated at\nkg:4111 is Columbia University", "response": "{\n    \"query\": [\n        \"SELECT ?politician\",\n        \"WHERE {\",\n            \"?politician kg:0795/kg:2450 .\",\n            \"?politician kg:5792 kg:4111 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106/wd:Q82955 . ?politician wdt:P69 wd:Q49088 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?show wdt:P31 wd:Q5764982.\",\n    \"  ?show rdfs:label \\\"Charmed\\\"@en.\",\n    \"  ?show p:P161 ?statement.\",\n    \"  ?statement ps:P161 ?actor.\",\n    \"  ?actor wdt:P31 wd:Q33999.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?show wdt:P31 wd:Q5764982. ?show rdfs:label \"Charmed\"@en. ?show p:P161 ?statement. ?statement ps:P161 ?actor. ?actor wdt:P31 wd:Q33999. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\nwdt:P161 is cast member\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P161 wd:Q162371.\",\n      \"?actor wdt:P569 ?birthday.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P161 wd:Q162371. ?actor wdt:P569 ?birthday. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the birthdays of all actors of the television show Charmed.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the birthdays of all actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Charmed\nkg:4319 is cast member\nkg:9526 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"kg:3786 kg:4319 ?actor.\",\n            \"?actor kg:9526 ?birthday.\"\n        ]\n    }\n ", "normal_query": "SELECT ?actor WHERE { wd:Q162371 wdt:P161 ?actor. ?actor wdt:P569 ?birthday. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P17 wd:Q31 Q31.\",\n    \"  ?organization wdt:P452 wd:Q6098.\"\n    ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P17 wd:Q31 Q31. ?organization wdt:P452 wd:Q6098. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q43229 is organization\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q43229 is organization\nwdt:P452 is industry\nwd:Q418 is telecommunication\nwdt:P17 is country\nwd:Q31 is Belgium", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n      \"?organization wdt:P31/wdt:P279* wd:Q43229 .\",\n      \"?organization wdt:P452 wd:Q418 .\",\n      \"?organization wdt:P17 wd:Q31 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31/wdt:P279* wd:Q43229 . ?organization wdt:P452 wd:Q418 . ?organization wdt:P17 wd:Q31 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which telecommunications organizations are located in Belgium?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which telecommunications organizations are located in Belgium?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9044 is instance of\nkg:1736 is organization\nkg:9044 is instance of\nkg:7648 is subclass of\nkg:1736 is organization\nkg:4913 is industry\nkg:1531 is telecommunication\nkg:8115 is country\nkg:9094 is Belgium", "response": "{\n  \"query\": [\n    \"SELECT ?org\",\n    \"WHERE {\",\n      \"?org kg:1736 is organization .\",\n      \"?org kg:4913 is industry kg:1531 is telecommunication .\",\n      \"?org kg:8115 is country kg:9094 is Belgium .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?org WHERE { ?org wd:Q43229 is organization . ?org wdt:P452 is industry wd:Q418 is telecommunication . ?org wdt:P17 is country wd:Q31 is Belgium . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all lakes in Denmark.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"  ?lake wdt:P31 wd:Q23442.\",\n    \"  ?lake wdt:P17 wd:Q35.\"\n    ]\n}", "normal_query": "SELECT ?lake WHERE { ?lake wdt:P31 wd:Q23442. ?lake wdt:P17 wd:Q35. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all lakes in Denmark.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23397 is lake\nwdt:P17 is country\nwd:Q35 is Denmark", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n      \"?lake wdt:P31 wd:Q23397.\",\n      \"?lake wdt:P17 wd:Q35.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?lake WHERE { ?lake wdt:P31 wd:Q23397. ?lake wdt:P17 wd:Q35. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me a list of all lakes in Denmark.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all lakes in Denmark.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1420 is instance of\nkg:5783 is lake\nkg:3411 is country\nkg:8492 is Denmark", "response": "{\n    \"query\": [\n        \"SELECT ?lake\",\n        \"WHERE {\",\n            \"?lake kg:1420/kg:5783 .\",\n            \"?lake kg:3411/kg:8492 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?lake WHERE { ?lake wdt:P31/wd:Q23397 . ?lake wdt:P17/wd:Q35 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many children does Eddie Murphy have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q109478 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q109478 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many children does Eddie Murphy have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43874 is Eddie Murphy\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n      \"wd:Q43874 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q43874 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many children does Eddie Murphy have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many children does Eddie Murphy have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1572 is Eddie Murphy\nkg:3910 is child", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1572> <http://example.org/kg/3910> ?child.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { <http://example.org/kg//1572> <http://example.org/kg//3910> ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all English Gothic buildings in Kent.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"  ?building wdt:P31 wd:Q486971.\",\n    \"  ?building wdt:P17 wd:Q2305.\",\n    \"  ?building wdt:P131* wd:Q2305.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?building WHERE { ?building wdt:P31 wd:Q486971. ?building wdt:P17 wd:Q2305. ?building wdt:P131* wd:Q2305. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all English Gothic buildings in Kent.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q176483 is Gothic architecture\nwdt:P149 is architectural style\nwdt:P7959 is historic county\nwd:Q67479626 is Kent", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n      \"?building wdt:P149 wd:Q176483.\",\n      \"?building wdt:P7959 wd:Q67479626.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?building WHERE { ?building wdt:P149 wd:Q176483. ?building wdt:P7959 wd:Q67479626. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all English Gothic buildings in Kent.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all English Gothic buildings in Kent.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5143 is subclass of\nkg:8740 is Gothic architecture\nkg:5026 is architectural style\nkg:8611 is historic county\nkg:6316 is Kent", "response": "{\n    \"query\": [\n        \"SELECT ?building WHERE {\",\n            \"?building kg:5143/kg:5026 kg:8740.\",\n            \"?building kg:8611 kg:6316.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?building WHERE { ?building wdt:P279/wdt:P149 wd:Q176483. ?building wdt:P7959 wd:Q67479626. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P374 wd:Q10265.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P374 wd:Q10265. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q861690 is West African CFA franc", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P38 wd:Q861690.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P38 wd:Q861690. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which countries can you pay using the West African CFA franc?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which countries can you pay using the West African CFA franc?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9173 is currency\nkg:9648 is West African CFA franc", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:9173 kg:9648.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P38 wd:Q861690. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which holidays are celebrated around the world?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n    \"  ?holiday wdt:P31 wd:Q486972.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q486972. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which holidays are celebrated around the world?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q1445650 is holiday\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?holiday WHERE {\",\n      \"?holiday wdt:P31 wd:Q1445650.\",\n      \"FILTER NOT EXISTS { ?holiday wdt:P279 wd:Q1445650 }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?holiday WHERE { ?holiday wdt:P31 wd:Q1445650. FILTER NOT EXISTS { ?holiday wdt:P279 wd:Q1445650 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which holidays are celebrated around the world?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which holidays are celebrated around the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2965 is subclass of\nkg:6347 is holiday\nkg:9668 is instance of", "response": "{\n    \"query\": [\n        \"SELECT ?holiday\",\n        \"WHERE {\",\n            \"?holiday kg:6347 ?holiday .\",\n            \"FILTER NOT EXISTS { ?holiday kg:2965 ?class }\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?holiday WHERE { ?holiday wd:Q1445650 ?holiday . FILTER NOT EXISTS { ?holiday wdt:P279 ?class } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the longest river?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the longest river?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  ?river wdt:P31 wd:Q4026.\",\n    \"  ?river wdt:P1795 ?length.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4026. ?river wdt:P1795 ?length. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?length) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which organizations were founded in 1930?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n    \"  ?organization wdt:P571 \\\"+1930-00-00T00:00:00Z/9\\\"^^xsd:dateTime.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P571 \"+1930-00-00T00:00:00Z/9\"^^xsd:dateTime. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which organizations were founded in 1930?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P571 is inception\nwdt:P31 is instance of\nwdt:P131 is located in the administrative territorial entity\nwd:Q43229 is organization", "response": "{\n  \"query\": [\n    \"SELECT ?organization WHERE {\",\n      \"?organization wdt:P31 wd:Q43229 .\",\n      \"?organization wdt:P571 \\\"+1930-00-00T00:00:00Z/9\\\"^^xsd:dateTime .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q43229 . ?organization wdt:P571 \"+1930-00-00T00:00:00Z/9\"^^xsd:dateTime . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which organizations were founded in 1930?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which organizations were founded in 1930?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is inception\nkg:5779 is instance of\nkg:9493 is located in the administrative territorial entity\nkg:3317 is organization", "response": "{\n    \"query\": [\n        \"SELECT ?organization\",\n        \"WHERE {\",\n            \"?organization kg:5779 kg:3317 .\",\n            \"?organization kg:9081 \\\"1930\\\"^^xsd:gYear .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?organization WHERE { ?organization wdt:P31 wd:Q43229 . ?organization wdt:P571 \"1930\"^^xsd:gYear . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the birth name of Angela Merkel?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"  wd:Q567 wdt:P1476 ?birthName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthName WHERE { wd:Q567 wdt:P1476 ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the birth name of Angela Merkel?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n      \"wd:Q567 wdt:P1477 ?birthName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthName WHERE { wd:Q567 wdt:P1477 ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the birth name of Angela Merkel?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the birth name of Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7977 is Angela Merkel\nkg:7333 is birth name", "response": "{\n    \"query\": [\n        \"SELECT ?birthName\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/7977> <http://www.example.org/kg/7333> ?birthName.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?birthName WHERE { <http://www.example.org/kg//7977> <http://www.example.org/kg//7333> ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who has Tom Cruise been married to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q23456 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q23456 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who has Tom Cruise been married to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37079 is Tom Cruise\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q37079 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q37079 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who has Tom Cruise been married to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who has Tom Cruise been married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1550 is Tom Cruise\nkg:9184 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1550> <http://example.org/kg/9184> ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { <http://example.org/kg//1550> <http://example.org/kg//9184> ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which weapons did Heckler & Koch develop?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?weapon WHERE {\",\n    \"  wd:Q156428 wdt:P31/wdt:P279* wd:Q10805.\",\n    \"  wd:Q156428 p:P170 ?statement.\",\n    \"  ?statement ps:P170 ?weapon.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?weapon WHERE { wd:Q156428 wdt:P31/wdt:P279* wd:Q10805. wd:Q156428 p:P170 ?statement. ?statement ps:P170 ?weapon. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which weapons did Heckler & Koch develop?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P176 is manufacturer\nwd:Q152815 is Heckler & Koch\nwdt:P279 is subclass of\nwdt:P31 is instance of\nwd:Q15142889 is weapon family", "response": "{\n  \"query\": [\n    \"SELECT ?weapon WHERE {\",\n      \"?weapon wdt:P176 wd:Q152815.\",\n      \"?weapon wdt:P31/wdt:P279* wd:Q15142889.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?weapon WHERE { ?weapon wdt:P176 wd:Q152815. ?weapon wdt:P31/wdt:P279* wd:Q15142889. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which weapons did Heckler & Koch develop?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which weapons did Heckler & Koch develop?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5256 is manufacturer\nkg:4371 is Heckler & Koch\nkg:4662 is subclass of\nkg:6302 is instance of\nkg:5753 is weapon family", "response": "{\n    \"query\": [\n        \"SELECT ?weapon\",\n        \"WHERE {\",\n            \"?weapon kg:6302 kg:5753 .\",\n            \"?weapon kg:5256 kg:4371 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?weapon WHERE { ?weapon wdt:P31 wd:Q15142889 . ?weapon wdt:P176 wd:Q152815 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the smallest city by area in Germany?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515.\",\n    \"  ?city wdt:P17 wd:Q183.\",\n    \"  SERVICE wikibase:around {\",\n    \"    ?city p:P625 ?statement.\",\n    \"    ?statement ps:P625 ?coordinate.\",\n    \"    bd:serviceParam wikibase:geoRadius \\\"100\\\".\",\n    \"  }\",\n    \"  BIND(geof:distance(?coordinate, point(rand())) AS ?distance).\",\n    \"  FILTER(?distance = (SELECT MIN(?dist) WHERE {\",\n    \"      ?city2 wdt:P31 wd:Q515.\",\n    \"      ?city2 wdt:P17 wd:Q183.\",\n    \"      SERVICE wikibase:around {\",\n    \"        ?city2 p:P625 ?statement2.\",\n    \"        ?statement2 ps:P625 ?coordinate2.\",\n    \"        bd:serviceParam wikibase:geoRadius \\\"100\\\".\",\n    \"      }\",\n    \"      BIND(geof:distance(?coordinate2, point(rand())) AS ?dist).\",\n    \"  }))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P17 wd:Q183. SERVICE wikibase:around { ?city p:P625 ?statement. ?statement ps:P625 ?coordinate. bd:serviceParam wikibase:geoRadius \"100\". } BIND(geof:distance(?coordinate, point(rand())) AS ?distance). FILTER(?distance = (SELECT MIN(?dist) WHERE { ?city2 wdt:P31 wd:Q515. ?city2 wdt:P17 wd:Q183. SERVICE wikibase:around { ?city2 p:P625 ?statement2. ?statement2 ps:P625 ?coordinate2. bd:serviceParam wikibase:geoRadius \"100\". } BIND(geof:distance(?coordinate2, point(rand())) AS ?dist). })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the smallest city by area in Germany?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P17 wd:Q183.\",\n      \"?city wdt:P31/wdt:P279* wd:Q515.\",\n      \"SERVICE wikibase:around {\",\n        \"bd:serviceParam wikibase:center ?city.\",\n        \"bd:serviceParam wikibase:radius \\\"10\\\".\",\n        \"?city wdt:P31/wdt:P279* wd:Q515.\",\n      \"}\",\n      \"MINUS { ?otherCity wdt:P17 wd:Q183. ?otherCity wdt:P31/wdt:P279* wd:Q515. ?city wdt:P1082 ?pop. ?otherCity wdt:P1082 ?otherPop. FILTER(?otherPop < ?pop) }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P17 wd:Q183. ?city wdt:P31/wdt:P279* wd:Q515. SERVICE wikibase:around { bd:serviceParam wikibase:center ?city. bd:serviceParam wikibase:radius \"10\". ?city wdt:P31/wdt:P279* wd:Q515. } MINUS { ?otherCity wdt:P17 wd:Q183. ?otherCity wdt:P31/wdt:P279* wd:Q515. ?city wdt:P1082 ?pop. ?otherCity wdt:P1082 ?otherPop. FILTER(?otherPop < ?pop) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the smallest city by area in Germany?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the smallest city by area in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2369 is country\nkg:2341 is Germany\nkg:0421 is instance of\nkg:6572 is subclass of\nkg:7298 is city\nkg:7495 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?city kg:0421 kg:7298 .\",\n            \"?city kg:6572 kg:2369 .\",\n            \"?country kg:0421 kg:2341 .\",\n            \"?city kg:6572 ?country .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P279 wdt:P17 . ?country wdt:P31 wd:Q183 . ?city wdt:P279 ?country . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the ruling party in Lisbon?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  wd:Q649 wdt:P35 ?party.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { wd:Q649 wdt:P35 ?party. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the ruling party in Lisbon?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\np:P39 is position held\nps:P39 is position held\nwd:Q43185970 is Mayor of Lisbon\npq:P580 is start time\nwdt:P102 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"?person wdt:P31 wd:Q5.\",\n      \"?person p:P39/ps:P39/wdt:P102 ?party.\",\n      \"?person p:P39/ps:P39/pq:P580 ?startTime.\",\n      \"?person p:P39/ps:P39 wd:Q43185970.\"\n    ]\n  }\n ", "normal_query": "SELECT ?party WHERE { ?person wdt:P31 wd:Q5. ?person p:P39/ps:P39/wdt:P102 ?party. ?person p:P39/ps:P39/pq:P580 ?startTime. ?person p:P39/ps:P39 wd:Q43185970. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the ruling party in Lisbon?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the ruling party in Lisbon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4480 is instance of\nkg:1012 is human\nkg:3232 is position held\nkg:0592 is position held\nkg:0692 is Mayor of Lisbon\nkg:7694 is start time\nkg:7386 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"?mayor kg:1012 .\",\n      \"?mayor kg:0592 kg:0692 .\",\n      \"?mayor kg:3232 ?position .\",\n      \"?position kg:7694 ?startTime .\",\n      \"?party kg:7386 ?member .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { ?mayor wd:Q5 . ?mayor ps:P39 wd:Q43185970 . ?mayor p:P39 ?position . ?position pq:P580 ?startTime . ?party wdt:P102 ?member . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How heavy is Jupiter's lightest moon?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"  wd:Q1084 Q236579 ?moon .\",\n    \"  ?moon wdt:P2046 ?mass .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?moon WHERE { wd:Q1084 Q236579 ?moon . ?moon wdt:P2046 ?mass . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How heavy is Jupiter's lightest moon?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q61702557 is moon of Jupiter\nwdt:P2067 is mass", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n      \"?moon wdt:P31 wd:Q4987.\",\n      \"?moon wdt:P2067 ?mass.\",\n      \"?moon wdt:P31 wd:Q61702557.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?moon WHERE { ?moon wdt:P31 wd:Q4987. ?moon wdt:P2067 ?mass. ?moon wdt:P31 wd:Q61702557. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How heavy is Jupiter's lightest moon?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How heavy is Jupiter's lightest moon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8904 is instance of\nkg:5838 is moon of Jupiter\nkg:6958 is mass", "response": "{\n    \"query\": [\n        \"SELECT ?moon\",\n        \"WHERE {\",\n            \"?moon kg:8904 kg:5838 .\",\n            \"?moon kg:6958 ?mass .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMoon kg:8904 kg:5838 .\",\n                \"?otherMoon kg:6958 ?otherMass .\",\n                \"FILTER (?otherMass < ?mass)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?moon WHERE { ?moon wdt:P31 wd:Q61702557 . ?moon wdt:P2067 ?mass . FILTER NOT EXISTS { ?otherMoon wdt:P31 wd:Q61702557 . ?otherMoon wdt:P2067 ?otherMass . FILTER (?otherMass < ?mass) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many employees does IBM have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n    \"  wd:Q1062 wdt:P1128 ?employee.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employee WHERE { wd:Q1062 wdt:P1128 ?employee. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many employees does IBM have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n    \"  wd:Q37156 wdt:P1128 ?employee.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employee WHERE { wd:Q37156 wdt:P1128 ?employee. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many employees does IBM have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many employees does IBM have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1608 is IBM\nkg:9125 is employees", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1608> <http://example.org/kg/9125> ?resource .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://example.org/kg//1608> <http://example.org/kg//9125> ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q14280 Q39657 ?season.\",\n    \"  ?season wdt:P179 ?episode.\",\n    \"  ?episode wdt:P31 wd:Q11424.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?episode WHERE { wd:Q14280 Q39657 ?season. ?season wdt:P179 ?episode. ?episode wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P4908 is season\nwd:Q5274359 is The Sopranos, season 1", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n      \"?episode wdt:P4908 wd:Q5274359.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?episode WHERE { ?episode wdt:P4908 wd:Q5274359. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List all episodes of the first season of the HBO television series The Sopranos!", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List all episodes of the first season of the HBO television series The Sopranos!” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8906 is season\nkg:9900 is The Sopranos, season 1", "response": "{\n    \"query\": [\n        \"SELECT ?episode\",\n        \"WHERE {\",\n            \"?episode kg:8906 kg:9900.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?episode WHERE { ?episode wdt:P4908 wd:Q5274359. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?newSeries ?oldSeries WHERE {\",\n    \"  ?newSeries wdt:P31 wd:Q2064985.\",\n    \"  ?newSeries wdt:P179 wd:Q1062664.\",\n    \"  ?oldSeries wdt:P31 wd:Q2064985.\",\n    \"  ?oldSeries wdt:P179 wd:Q1062664.\",\n    \"  ?newSeries wdt:P577 ?newReleaseDate.\",\n    \"  ?oldSeries wdt:P577 ?oldReleaseDate.\",\n    \"  FILTER(?newReleaseDate > ?oldReleaseDate).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?newSeries ?oldSeries WHERE { ?newSeries wdt:P31 wd:Q2064985. ?newSeries wdt:P179 wd:Q1062664. ?oldSeries wdt:P31 wd:Q2064985. ?oldSeries wdt:P179 wd:Q1062664. ?newSeries wdt:P577 ?newReleaseDate. ?oldSeries wdt:P577 ?oldReleaseDate. FILTER(?newReleaseDate > ?oldReleaseDate). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q237072 is Battlestar Galactica\nwdt:P1113 is number of episodes\nwd:Q2367132 is Battlestar Galactica\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?newSeries ?oldSeries WHERE {\",\n    \"  wd:Q237072 wdt:P1113 ?newEpisodes.\",\n    \"  wd:Q2367132 wdt:P1113 ?oldEpisodes.\",\n    \"  FILTER(?newEpisodes > ?oldEpisodes).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?newSeries ?oldSeries WHERE { wd:Q237072 wdt:P1113 ?newEpisodes. wd:Q2367132 wdt:P1113 ?oldEpisodes. FILTER(?newEpisodes > ?oldEpisodes). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does the new Battlestar Galactica series have more episodes than the old one?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Does the new Battlestar Galactica series have more episodes than the old one?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3093 is Battlestar Galactica\nkg:3046 is number of episodes\nkg:8797 is Battlestar Galactica\nkg:3046 is number of episodes", "response": "{\n    \"query\": [\n        \"SELECT ?newSeries ?oldSeries WHERE {\",\n        \"  kg:3093 kg:3046 ?newEpisodes.\",\n        \"  kg:8797 kg:3046 ?oldEpisodes.\",\n        \"  FILTER(?newEpisodes > ?oldEpisodes)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?newSeries ?oldSeries WHERE { wd:Q237072 wdt:P1113 ?newEpisodes. wd:Q2367132 wdt:P1113 ?oldEpisodes. FILTER(?newEpisodes > ?oldEpisodes) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all films produced by Hal Roach.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P175 wd:Q1048296. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all films produced by Hal Roach.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q72792 is Hal Roach", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P162 wd:Q72792.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P162 wd:Q72792. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all films produced by Hal Roach.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all films produced by Hal Roach.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3534 is instance of\nkg:9460 is film\nkg:9880 is producer\nkg:6697 is Hal Roach", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:3534 kg:9460 .\",\n            \"?film kg:9880 kg:6697 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P162 wd:Q72792 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who played Agent Smith in Matrix?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q1062978 wdt:P354 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q1062978 wdt:P354 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who played Agent Smith in Matrix?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83495 is The Matrix\np:P161 is cast member\npq:P453 is character role\nwd:Q2085488 is Agent Smith\nps:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"wd:Q83495 p:P161/ps:P161 ?cast.\",\n      \"?cast pq:P453 wd:Q2085488.\",\n      \"?cast ps:P161 ?actor.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { wd:Q83495 p:P161/ps:P161 ?cast. ?cast pq:P453 wd:Q2085488. ?cast ps:P161 ?actor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who played Agent Smith in Matrix?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who played Agent Smith in Matrix?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3604 is The Matrix\nkg:8155 is cast member\nkg:5723 is character role\nkg:2878 is Agent Smith\nkg:8583 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:3604 kg:8155 ?resource .\",\n            \"?resource kg:5723 kg:2878 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q83495 p:P161 ?resource . ?resource pq:P453 wd:Q2085488 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which Greek parties are pro-European?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  ?party wdt:P31 wd:Q286047.\",\n    \"  ?party wdt:P17 wd:Q419.\",\n    \"  ?party wdt:P155 wd:Q1062.\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P31 wd:Q286047. ?party wdt:P17 wd:Q419. ?party wdt:P155 wd:Q1062. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which Greek parties are pro-European?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q7278 is political party\nwdt:P17 is country\nwd:Q41 is Greece\nwdt:P1142 is political ideology\nwd:Q3781399 is pro-Europeanism", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"?party wdt:P31 wd:Q7278 .\", \"# The entity is a political party\",\n      \"?party wdt:P17 wd:Q41 .\", \"# The country of the party is Greece\",\n      \"?party wdt:P1142 wd:Q3781399 .\" ,\"# The ideology of the party is pro-Europeanism\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P31 wd:Q7278 . ?party wdt:P17 wd:Q41 . ?party wdt:P1142 wd:Q3781399 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which Greek parties are pro-European?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which Greek parties are pro-European?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is instance of\nkg:9450 is political party\nkg:2994 is country\nkg:5177 is Greece\nkg:0782 is political ideology\nkg:4101 is pro-Europeanism", "response": "{\n    \"query\": [\n        \"SELECT ?party\",\n        \"WHERE {\",\n            \"?party kg:5368/kg:9450 .\",\n            \"?party kg:2994/kg:5177 .\",\n            \"?party kg:0782/kg:4101 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P31/wd:Q7278 . ?party wdt:P17/wd:Q41 . ?party wdt:P1142/wd:Q3781399 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader WHERE {\",\n    \"  ?bandleader wdt:P106 wd:Q33949.\",\n    \"  ?bandleader wdt:P2868 wd:Q5724.\"\n    ]\n}", "normal_query": "SELECT ?bandleader WHERE { ?bandleader wdt:P106 wd:Q33949. ?bandleader wdt:P2868 wd:Q5724. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q806349 is bandleader\nwdt:P1303 is instrument\nwd:Q8338 is trumpet", "response": "{\n  \"query\": [\n    \"SELECT ?bandleader WHERE {\",\n      \"?bandleader wdt:P106 wd:Q806349.\",\n      \"?bandleader wdt:P1303 wd:Q8338.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bandleader WHERE { ?bandleader wdt:P106 wd:Q806349. ?bandleader wdt:P1303 wd:Q8338. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me a list of all bandleaders that play trumpet.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all bandleaders that play trumpet.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2407 is occupation\nkg:6431 is bandleader\nkg:4690 is instrument\nkg:9014 is trumpet", "response": "{\n    \"query\": [\n        \"SELECT ?bandleader\",\n        \"WHERE {\",\n            \"?bandleader kg:2407 kg:6431 .\",\n            \"?bandleader kg:4690 kg:9014 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?bandleader WHERE { ?bandleader wdt:P106 wd:Q806349 . ?bandleader wdt:P1303 wd:Q8338 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the second highest mountain on Earth?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P1796 ?height.\",\n    \"  FILTER(?height > 8000).\",\n    \"  MINUS { ?otherMountain wdt:P31 wd:Q8502; wdt:P1796 ?otherHeight. FILTER(?otherHeight > ?height) }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P1796 ?height. FILTER(?height > 8000). MINUS { ?otherMountain wdt:P31 wd:Q8502; wdt:P1796 ?otherHeight. FILTER(?otherHeight > ?height) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the second highest mountain on Earth?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P30 is continent\nwdt:P361 is part of\nwd:Q2 is Earth", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31/wdt:P279* wd:Q8502 .\",\n      \"?mountain wdt:P361 wd:Q2 .\",\n      \"?mountain wdt:P2044 ?elevation .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n      \"ORDER BY DESC(?elevation)\",\n      \"LIMIT 1 OFFSET 1\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31/wdt:P279* wd:Q8502 . ?mountain wdt:P361 wd:Q2 . ?mountain wdt:P2044 ?elevation . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the second highest mountain on Earth?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the second highest mountain on Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is instance of\nkg:6903 is subclass of\nkg:7953 is mountain\nkg:5532 is elevation above sea level\nkg:4491 is continent\nkg:7525 is part of\nkg:1867 is Earth", "response": "{\n  \"query\": [\n    \"SELECT ?mountain\",\n    \"WHERE {\",\n      \"?mountain kg:0141 kg:7953 .\",\n      \"?mountain kg:5532 ?elevation .\",\n      \"FILTER (?elevation < (SELECT MAX(?maxElev) WHERE { ?otherMountain kg:0141 kg:7953 . ?otherMountain kg:5532 ?maxElev }))\",\n      \"?mountain kg:7525 kg:1867 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P2044 ?elevation . FILTER (?elevation < (SELECT MAX(?maxElev) WHERE { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P2044 ?maxElev })) ?mountain wdt:P361 wd:Q2 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Egypts largest city also its capital?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q837 Q1420695 ?city.\",\n    \"  ?city wdt:P31 wd:Q515.\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q837 Q1420695 ?city. ?city wdt:P31 wd:Q515. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Egypts largest city also its capital?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q79 is Egypt\nwdt:P1082 is population\nwd:Q79 is Egypt\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P31 wd:Q515 .\", \"# city\",\n      \"?city wdt:P17 wd:Q79 .\", \"# Egypt\",\n      \"?city wdt:P1082 ?population .\", \"# population\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P17 wd:Q79 . ?city wdt:P1082 ?population . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Is Egypts largest city also its capital?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Egypts largest city also its capital?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is instance of\nkg:5282 is city\nkg:2922 is country\nkg:1631 is Egypt\nkg:6034 is population\nkg:1631 is Egypt\nkg:6024 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?city\",\n    \"WHERE {\",\n      \"?country kg:2922 kg:1631 .\",\n      \"?country kg:5282 ?city .\",\n      \"?city kg:6024 true .\",\n      \"?city kg:6034 ?population .\",\n      \"FILTER(?population = MAX(?population))\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?country wdt:P17 wd:Q79 . ?country wd:Q515 ?city . ?city wdt:P36 true . ?city wdt:P1082 ?population . FILTER(?population = MAX(?population)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which rockets were launched from Baikonur?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?rocket WHERE {\",\n    \"  ?launch wdt:P31 wd:Q240678.\",\n    \"  ?launch wdt:P159 wd:Q10000.\",\n    \"  ?launch wdt:P1705 ?rocket.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?rocket WHERE { ?launch wdt:P31 wd:Q240678. ?launch wdt:P159 wd:Q10000. ?launch wdt:P1705 ?rocket. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which rockets were launched from Baikonur?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q41291 is rocket\nwdt:P1427 is start point\nwd:Q177477 is Baikonur Cosmodrome", "response": "{\n  \"query\": [\n    \"SELECT ?rocket WHERE {\",\n      \"?rocket wdt:P279 wd:Q41291.\",\n      \"?rocket wdt:P1427 wd:Q177477.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?rocket WHERE { ?rocket wdt:P279 wd:Q41291. ?rocket wdt:P1427 wd:Q177477. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which rockets were launched from Baikonur?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which rockets were launched from Baikonur?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9918 is subclass of\nkg:8403 is rocket\nkg:3908 is start point\nkg:9674 is Baikonur Cosmodrome", "response": "{\n    \"query\": [\n        \"SELECT ?rocket\",\n        \"WHERE {\",\n            \"?rocket kg:8403 .\",\n            \"?rocket kg:3908 kg:9674 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?rocket WHERE { ?rocket wd:Q41291 . ?rocket wdt:P1427 wd:Q177477 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many programming languages are there?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P31 wd:Q9140.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { ?language wdt:P31 wd:Q9140. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many programming languages are there?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q9143 is programming language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"?language wdt:P31/wdt:P279* wd:Q9143.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { ?language wdt:P31/wdt:P279* wd:Q9143. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many programming languages are there?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many programming languages are there?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1662 is instance of\nkg:0743 is subclass of\nkg:6439 is programming language", "response": "{\n    \"query\": [\n        \"SELECT ?programmingLanguage WHERE {\",\n            \"?programmingLanguage kg:1662 kg:6439.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?programmingLanguage WHERE { ?programmingLanguage wdt:P31 wd:Q9143. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which Chess players died in the same place they were born in?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P106 wd:Q28947.\",\n    \"  ?person wdt:P19 wd:P19.\",\n    \"  ?person wdt:P19 ?birthPlace.\",\n    \"  ?person wdt:P570 ?deathDate.\",\n    \"  ?person wdt:P20 ?deathPlace.\",\n    \"  FILTER(?birthPlace = ?deathPlace)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P106 wd:Q28947. ?person wdt:P19 wd:P19. ?person wdt:P19 ?birthPlace. ?person wdt:P570 ?deathDate. ?person wdt:P20 ?deathPlace. FILTER(?birthPlace = ?deathPlace) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which Chess players died in the same place they were born in?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P20 is place of death\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q10873124 is chess player", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q10873124.\",\n      \"?player wdt:P19 ?birthPlace.\",\n      \"?player wdt:P20 ?deathPlace.\",\n      \"FILTER (?birthPlace = ?deathPlace)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q10873124. ?player wdt:P19 ?birthPlace. ?player wdt:P20 ?deathPlace. FILTER (?birthPlace = ?deathPlace) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which Chess players died in the same place they were born in?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which Chess players died in the same place they were born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3982 is place of birth\nkg:3798 is place of death\nkg:1280 is occupation\nkg:0314 is subclass of\nkg:0871 is chess player", "response": "{\n    \"query\": [\n        \"SELECT ?player WHERE {\",\n            \"?player kg:0871 \\\"chess player\\\".\",\n            \"?player kg:3982 ?birthPlace.\",\n            \"?player kg:3798 ?deathPlace.\",\n            \"FILTER (?birthPlace = ?deathPlace)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wd:Q10873124 \"chess player\". ?player wdt:P19 ?birthPlace. ?player wdt:P20 ?deathPlace. FILTER (?birthPlace = ?deathPlace) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the owner of Facebook?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q805 wdt:P127 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q805 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the owner of Facebook?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q380 is Meta Platforms\nwdt:P127 is owned by", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q380 wdt:P127 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q380 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the owner of Facebook?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the owner of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8912 is Meta Platforms\nkg:3251 is owned by", "response": "{\n    \"query\": [\n        \"SELECT ?owner\",\n        \"WHERE {\",\n            \"kg:8912 kg:3251 ?owner.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q380 wdt:P127 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all movies with Tom Cruise.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q103857 wdt:P463 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q103857 wdt:P463 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all movies with Tom Cruise.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P161 is cast member\nwd:Q37079 is Tom Cruise", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P161 wd:Q37079.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q37079. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all movies with Tom Cruise.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all movies with Tom Cruise.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4878 is cast member\nkg:0773 is Tom Cruise", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:4878 kg:0773.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q37079. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which U.S. state is Fort Knox located?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q180426 wdt:P17 ?state.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q180426 wdt:P17 ?state. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which U.S. state is Fort Knox located?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q983650 is Fort Knox\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q35657 is U.S. state", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"wd:Q983650 wdt:P131+ ?state.\",\n      \"?state wdt:P31 wd:Q35657.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q983650 wdt:P131+ ?state. ?state wdt:P31 wd:Q35657. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which U.S. state is Fort Knox located?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which U.S. state is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2138 is Fort Knox\nkg:3236 is located in the administrative territorial entity\nkg:5211 is instance of\nkg:3368 is U.S. state", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n            \"kg:2138 kg:3236 ?location .\",\n            \"?location kg:5211 kg:3368 .\",\n            \"?location kg:3236 ?state .\"\n        ]\n    }\n ", "normal_query": "SELECT ?state WHERE { wd:Q983650 wdt:P131 ?location . ?location wdt:P31 wd:Q35657 . ?location wdt:P131 ?state . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which mountains are higher than the Nanga Parbat?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which mountains are higher than the Nanga Parbat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  wd:Q18940 p:P31/ps:P31 wd:Q27566.\",\n    \"  ?mountain wdt:P31 wd:Q27566;\",\n    \"          wdt:P2044 ?height.\",\n    \"  FILTER(?height > 8126).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { wd:Q18940 p:P31/ps:P31 wd:Q27566. ?mountain wdt:P31 wd:Q27566; wdt:P2044 ?height. FILTER(?height > 8126). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all B-sides of the Ramones.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bSide WHERE {\",\n    \"  wd:Q105462 wdt:P31 wd:Q7366.\",\n    \"  wd:Q105462 wdt:P1793 ?album.\",\n    \"  ?album wdt:P1793 ?bSide.\",\n    \"  ?bSide wdt:P31 wd:Q189165.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?bSide WHERE { wd:Q105462 wdt:P31 wd:Q7366. wd:Q105462 wdt:P1793 ?album. ?album wdt:P1793 ?bSide. ?bSide wdt:P31 wd:Q189165. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all B-sides of the Ramones.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P175 is performer\nwd:Q483407 is Ramones\np:P1433 is published in\npq:P2868 is subject has role\nwd:Q13432985 is B-side", "response": "{\n  \"query\": [\n    \"SELECT ?bSide WHERE {\",\n      \"?bSide wdt:P175 wd:Q483407.\",\n      \"?bSide p:P1433 ?publicationStatement.\",\n      \"?publicationStatement pq:P2868 wd:Q13432985.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bSide WHERE { ?bSide wdt:P175 wd:Q483407. ?bSide p:P1433 ?publicationStatement. ?publicationStatement pq:P2868 wd:Q13432985. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all B-sides of the Ramones.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all B-sides of the Ramones.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1681 is performer\nkg:6316 is Ramones\nkg:4288 is published in\nkg:4608 is subject has role\nkg:0022 is B-side", "response": "{\n    \"query\": [\n        \"SELECT ?bSide\",\n        \"WHERE {\",\n            \"?bSide kg:4608 kg:0022 .\",\n            \"?bSide kg:1681 kg:6316 .\",\n            \"FILTER NOT EXISTS { ?bSide kg:4288 ?album . }\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?bSide WHERE { ?bSide pq:P2868 wd:Q13432985 . ?bSide wdt:P175 wd:Q483407 . FILTER NOT EXISTS { ?bSide p:P1433 ?album . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When was Olof Palme shot?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1234567 wdt:P54 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1234567 wdt:P54 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was Olof Palme shot?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53713 is Olof Palme\np:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathDate WHERE {\",\n      \"wd:Q53713 p:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathDate WHERE { wd:Q53713 p:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was Olof Palme shot?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was Olof Palme shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7630 is Olof Palme\nkg:4997 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:7630 kg:4997 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q53713 p:P570 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "List the seven kings of Rome.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P31 wd:Q648597.\",\n    \"  ?king wdt:P102 wd:Q108067.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?king WHERE { ?king wdt:P31 wd:Q648597. ?king wdt:P102 wd:Q108067. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List the seven kings of Rome.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q55375123 is King of Rome", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n      \"?king wdt:P39 wd:Q55375123.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?king WHERE { ?king wdt:P39 wd:Q55375123. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "List the seven kings of Rome.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List the seven kings of Rome.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is position held\nkg:5425 is King of Rome", "response": "{\n    \"query\": [\n        \"SELECT ?king\",\n        \"WHERE {\",\n            \"?king kg:5425 kg:9266.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?king WHERE { ?king wd:Q55375123 wdt:P39. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P19 wd:Q1583.\",\n    \"  ?person wdt:P20 wd:Q64.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19 wd:Q1583. ?person wdt:P20 wd:Q64. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwd:Q64 is Berlin\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin\nwdt:P19 is place of birth\nwd:Q1741 is Vienna\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q1741 is Vienna\nwdt:P20 is place of death\nwdt:P131 is located in the administrative territorial entity\nwd:Q64 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P19/wdt:P131 wd:Q1741.\",\n      \"?person wdt:P20/wdt:P131 wd:Q64.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19/wdt:P131 wd:Q1741. ?person wdt:P20/wdt:P131 wd:Q64. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all people that were born in Vienna and died in Berlin.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all people that were born in Vienna and died in Berlin.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4248 is Berlin\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin\nkg:6565 is place of birth\nkg:5207 is Vienna\nkg:6565 is place of birth\nkg:4988 is located in the administrative territorial entity\nkg:5207 is Vienna\nkg:4789 is place of death\nkg:4988 is located in the administrative territorial entity\nkg:4248 is Berlin", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:6565 ?birthPlace .\",\n      \"?birthPlace kg:4988 kg:5207 .\",\n      \"?person kg:4789 ?deathPlace .\",\n      \"?deathPlace kg:4988 kg:4248 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P19 ?birthPlace . ?birthPlace wdt:P131 wd:Q1741 . ?person wdt:P20 ?deathPlace . ?deathPlace wdt:P131 wd:Q64 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Darth Vader Luke’s father?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE {\",\n    \"  wd:Q106254 wdt:P22 wd:Q738.\",\n    \"  wd:Q738 wdt:P22 ?father.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father WHERE { wd:Q106254 wdt:P22 wd:Q738. wd:Q738 wdt:P22 ?father. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Darth Vader Luke’s father?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12206942 is Darth Vader\nwdt:P40 is child\nwd:Q51746 is Luke Skywalker", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE {\",\n      \"?child wdt:P40 ?father.\",\n      \"FILTER(?child = wd:Q51746)\",\n      \"VALUES ?father {wd:Q12206942}\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father WHERE { ?child wdt:P40 ?father. FILTER(?child = wd:Q51746) VALUES ?father {wd:Q12206942} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Darth Vader Luke’s father?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Darth Vader Luke’s father?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1984 is Darth Vader\nkg:1692 is child\nkg:5502 is Luke Skywalker", "response": "{\n    \"query\": [\n        \"SELECT ?father\",\n        \"WHERE {\",\n            \"?father kg:1692 kg:5502.\",\n            \"FILTER(?father = kg:1984)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?father WHERE { ?father wdt:P40 wd:Q51746. FILTER(?father = wd:Q12206942) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all the breweries in Australia.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"  ?brewery wdt:P31 wd:Q206497.\",\n    \"  ?brewery wdt:P17 wd:Q408.\"\n    ]\n}", "normal_query": "SELECT ?brewery WHERE { ?brewery wdt:P31 wd:Q206497. ?brewery wdt:P17 wd:Q408. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all the breweries in Australia.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q131734 is brewery\nwdt:P17 is country\nwd:Q408 is Australia", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n      \"?brewery wdt:P31 wd:Q131734.\",\n      \"?brewery wdt:P17 wd:Q408.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?brewery WHERE { ?brewery wdt:P31 wd:Q131734. ?brewery wdt:P17 wd:Q408. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me all the breweries in Australia.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all the breweries in Australia.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2155 is instance of\nkg:5909 is brewery\nkg:1368 is country\nkg:6518 is Australia", "response": "{\n    \"query\": [\n        \"SELECT ?breweries\",\n        \"WHERE {\",\n            \"?breweries kg:2155 kg:5909 .\",\n            \"?breweries kg:1368 kg:6518 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?breweries WHERE { ?breweries wdt:P31 wd:Q131734 . ?breweries wdt:P17 wd:Q408 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?releaseDate.\",\n    \"  ?film wdt:P1680 ?budget.\",\n    \"  ?film wdt:P179 ?director.\",\n    \"  ?director wdt:P31 wd:Q242608.\",\n    \"  ?director wdt:P571 ?birthDate.\",\n    \"  ?director wdt:P106 wd:Q3393466.\",\n    \"  FILTER(?budget >= 80000000).\",\n    \"  FILTER(?director = wd:Q29845).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?releaseDate. ?film wdt:P1680 ?budget. ?film wdt:P179 ?director. ?director wdt:P31 wd:Q242608. ?director wdt:P571 ?birthDate. ?director wdt:P106 wd:Q3393466. FILTER(?budget >= 80000000). FILTER(?director = wd:Q29845). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q8877 is Steven Spielberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424.\",\n      \"?film wdt:P162 wd:Q8877.\",\n      \"?film wdt:P2130 ?budget.\",\n      \"FILTER(?budget >= 80000000).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424. ?film wdt:P162 wd:Q8877. ?film wdt:P2130 ?budget. FILTER(?budget >= 80000000). } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all films produced by Steven Spielberg with a budget of at least $80 million.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2377 is producer\nkg:7786 is Steven Spielberg\nkg:2955 is instance of\nkg:5774 is subclass of\nkg:1418 is film\nkg:0495 is cost", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:2377 kg:7786 .\",\n            \"?film kg:2955 kg:1418 .\",\n            \"?film kg:0495 ?cost .\",\n            \"FILTER (?cost >= 80000000) .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q8877 . ?film wdt:P31 wd:Q11424 . ?film wdt:P2130 ?cost . FILTER (?cost >= 80000000) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all soccer clubs in Spain.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n    \"  ?club wdt:P31 wd:Q937857.\",\n    \"  ?club wdt:P17 wd:Q29.\"\n    ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q937857. ?club wdt:P17 wd:Q29. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all soccer clubs in Spain.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q476028 is association football club\nwdt:P17 is country\nwd:Q29 is Spain", "response": "{\n  \"query\": [\n    \"SELECT ?club WHERE {\",\n      \"?club wdt:P31 wd:Q476028.\",\n      \"?club wdt:P17 wd:Q29.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q476028. ?club wdt:P17 wd:Q29. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all soccer clubs in Spain.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all soccer clubs in Spain.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1869 is instance of\nkg:7742 is association football club\nkg:9070 is country\nkg:2172 is Spain", "response": "{\n    \"query\": [\n        \"SELECT ?club\",\n        \"WHERE {\",\n            \"?club kg:1869 kg:7742 .\",\n            \"?club kg:9070 kg:2172 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?club WHERE { ?club wdt:P31 wd:Q476028 . ?club wdt:P17 wd:Q29 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who produced films starring Natalie Portman?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q14209 Q1763385 ?film.\",\n    \"  ?film wdt:P175 wd:Q14209.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q14209 Q1763385 ?film. ?film wdt:P175 wd:Q14209. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who produced films starring Natalie Portman?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q37876 is Natalie Portman\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P161 wd:Q37876.\",\n      \"?film wdt:P162 ?producer.\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P161 wd:Q37876. ?film wdt:P162 ?producer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who produced films starring Natalie Portman?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who produced films starring Natalie Portman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5819 is instance of\nkg:0320 is film\nkg:8271 is cast member\nkg:1332 is Natalie Portman\nkg:6761 is producer", "response": "{\n    \"query\": [\n        \"SELECT ?producer\",\n        \"WHERE {\",\n            \"?film kg:5819 kg:0320 .\",\n            \"?film kg:8271 kg:1332 .\",\n            \"?film kg:6761 ?producer .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P161 wd:Q37876 . ?film wdt:P162 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"  wd:Q156748 wdt:P31 ?breed.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?breed WHERE { wd:Q156748 wdt:P31 ?breed. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P279 is subclass of\nwd:Q38280 is German Shepherd\nwd:Q38280 is German Shepherd", "response": "{\n  \"query\": [\n    \"SELECT ?breed WHERE {\",\n    \"  wd:Q38280 wdt:P279 ?breed.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?breed WHERE { wd:Q38280 wdt:P279 ?breed. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all breeds of the German Shepherd dog.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all breeds of the German Shepherd dog.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1311 is subclass of\nkg:3722 is German Shepherd\nkg:3722 is German Shepherd", "response": "{\n    \"query\": [\n        \"SELECT ?breed\",\n        \"WHERE {\",\n            \"?breed kg:1311 kg:3722.\",\n            \"?breed kg:3722 ?breed.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?breed WHERE { ?breed wdt:P279 wd:Q38280. ?breed wd:Q38280 ?breed. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the heaviest player of the Chicago Bulls?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the heaviest player of the Chicago Bulls?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P1080 wd:Q27346.\",\n    \"  ?player wdt:P2095 ?weight.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?weight)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P1080 wd:Q27346. ?player wdt:P2095 ?weight. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?weight) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which languages are spoken in Estonia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q186 wdt:P37 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q186 wdt:P37 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which languages are spoken in Estonia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q191 is Estonia\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q191 wdt:P2936 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q191 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which languages are spoken in Estonia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which languages are spoken in Estonia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6317 is Estonia\nkg:3495 is language used", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"kg:6317 kg:3495 ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q191 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the largest country in the world?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P1082 ?area.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P1082 ?area. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?area) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest country in the world?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3624078 is sovereign state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31/wdt:P279* wd:Q3624078.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31/wdt:P279* wd:Q3624078. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?area) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest country in the world?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the largest country in the world?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5506 is instance of\nkg:9393 is subclass of\nkg:1310 is sovereign state\nkg:0702 is area", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:5506 kg:1310 .\",\n            \"?country kg:0702 ?area .\",\n            \"FILTER NOT EXISTS { ?otherCountry kg:5506 kg:1310 . ?otherCountry kg:0702 ?otherArea . FILTER (?otherArea > ?area) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q3624078 . ?country wdt:P2046 ?area . FILTER NOT EXISTS { ?otherCountry wdt:P31 wd:Q3624078 . ?otherCountry wdt:P2046 ?otherArea . FILTER (?otherArea > ?area) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest city in america?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515.\",\n    \"  ?city wdt:P17 wd:Q30.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P17 wd:Q30. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest city in america?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q30 is United States of America\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P17 wd:Q30.\",\n      \"?city wdt:P31/wdt:P279* wd:Q515.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P17 wd:Q30. ?city wdt:P31/wdt:P279* wd:Q515. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest city in america?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the largest city in america?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0643 is country\nkg:9284 is United States of America\nkg:3777 is instance of\nkg:9906 is subclass of\nkg:5230 is city\nkg:0522 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?city kg:3777 kg:5230 .\",\n            \"?city kg:0643 kg:9284 .\",\n            \"?city kg:0522 ?population .\",\n            \"FILTER NOT EXISTS { ?otherCity kg:3777 kg:5230 . ?otherCity kg:0643 kg:9284 . ?otherCity kg:0522 ?otherPopulation . FILTER (?otherPopulation > ?population) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P17 wd:Q30 . ?city wdt:P1082 ?population . FILTER NOT EXISTS { ?otherCity wdt:P31 wd:Q515 . ?otherCity wdt:P17 wd:Q30 . ?otherCity wdt:P1082 ?otherPopulation . FILTER (?otherPopulation > ?population) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the pope that founded the Vatican Television?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?pope WHERE {\",\n    \"  ?pope wdt:P31 wd:Q5.\",\n    \"  ?pope wdt:P2868 wd:Q479064.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?pope WHERE { ?pope wdt:P31 wd:Q5. ?pope wdt:P2868 wd:Q479064. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the pope that founded the Vatican Television?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1471987 is Vatican Media\nwdt:P571 is inception\nwdt:P39 is position held\nwd:Q19546 is pope\np:P39 is position held\nps:P39 is position held\nwd:Q19546 is pope\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?pope WHERE {\",\n      \"?pope wdt:P39 wd:Q19546.\",\n      \"?pope p:P39 [ ps:P39 wd:Q19546; pq:P580 ?startTime; pq:P582 ?endTime ] .\",\n      \"?media wdt:P571 ?inception.\",\n      \"?pope wdt:P39 wd:Q19546.\",\n      \"?media wdt:P571 ?inception.\",\n      \"FILTER(?inception = ?startTime)\",\n      \"VALUES ?media {wd:Q1471987}\"\n    ]\n  }\n ", "normal_query": "SELECT ?pope WHERE { ?pope wdt:P39 wd:Q19546. ?pope p:P39 [ ps:P39 wd:Q19546; pq:P580 ?startTime; pq:P582 ?endTime ] . ?media wdt:P571 ?inception. ?pope wdt:P39 wd:Q19546. ?media wdt:P571 ?inception. FILTER(?inception = ?startTime) VALUES ?media {wd:Q1471987} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was the pope that founded the Vatican Television?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the pope that founded the Vatican Television?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4965 is Vatican Media\nkg:9396 is inception\nkg:5157 is position held\nkg:4968 is pope\nkg:9086 is position held\nkg:2915 is position held\nkg:4968 is pope\nkg:3118 is start time\nkg:1891 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?pope WHERE {\",\n      \"?pope kg:5157 kg:4968 .\",\n      \"?pope kg:2915 kg:4965 .\",\n      \"?pope kg:3118 ?inception .\",\n      \"FILTER(?inception = '1983-01-01')\"\n    ]\n  }\n ", "normal_query": "SELECT ?pope WHERE { ?pope wdt:P39 wd:Q19546 . ?pope ps:P39 wd:Q1471987 . ?pope pq:P580 ?inception . FILTER(?inception = '1983-01-01') LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who discovered Ceres?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n    \"  wd:Q1527 wdt:P648 ?discoverer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q1527 wdt:P648 ?discoverer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who discovered Ceres?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q596 is Ceres\nwdt:P61 is discoverer or inventor", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n      \"wd:Q596 wdt:P61 ?discoverer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q596 wdt:P61 ?discoverer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who discovered Ceres?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who discovered Ceres?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0356 is Ceres\nkg:8941 is discoverer or inventor", "response": "{\n    \"query\": [\n        \"SELECT ?discoverer\",\n        \"WHERE {\",\n            \"kg:0356 kg:8941 ?discoverer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q596 wdt:P61 ?discoverer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the king of the Netherlands?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  wd:Q55 wdt:P31 wd:Q6256.\",\n    \"  wd:Q55 wdt:P35 wd:Q48907.\",\n    \"  wd:Q55 wdt:P35 ?king.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?king WHERE { wd:Q55 wdt:P31 wd:Q6256. wd:Q55 wdt:P35 wd:Q48907. wd:Q55 wdt:P35 ?king. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the king of the Netherlands?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55 is Netherlands\nwdt:P35 is head of state\nwdt:P39 is position held\nwd:Q2045066 is King of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n      \"wd:Q55 wdt:P35 ?king.\",\n      \"?king wdt:P39 wd:Q2045066.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?king WHERE { wd:Q55 wdt:P35 ?king. ?king wdt:P39 wd:Q2045066. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the king of the Netherlands?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the king of the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7804 is Netherlands\nkg:9773 is head of state\nkg:8977 is position held\nkg:8219 is King of the Netherlands", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:7804 kg:9773 ?headOfState.\",\n            \"?headOfState kg:8977 kg:8219.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q55 wdt:P35 ?headOfState. ?headOfState wdt:P39 wd:Q2045066. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Cola a beverage?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q28640.\",\n    \"  ?item rdfs:label \\\"Cola\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q28640. ?item rdfs:label \"Cola\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Cola a beverage?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q134041 is cola\nwdt:P279 is subclass of\nwd:Q40050 is drink", "response": "{\n  \"query\": [\n    \"SELECT ?beverage WHERE {\",\n      \"wd:Q134041 wdt:P279* ?beverage.\",\n      \"?beverage wdt:P279 wd:Q40050.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?beverage WHERE { wd:Q134041 wdt:P279* ?beverage. ?beverage wdt:P279 wd:Q40050. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Cola a beverage?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Cola a beverage?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3198 is cola\nkg:1933 is subclass of\nkg:6616 is drink", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:3198 kg:1933 ?class.\",\n            \"?class kg:1933 kg:6616.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q134041 wdt:P279 ?class. ?class wdt:P279 wd:Q40050. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater WHERE {\",\n    \"  wd:Q567 wdt:P31 wd:Q28049.\",\n    \"  wd:Q567 wdt:P106 wd:Q844284.\",\n    \"  wd:Q567 wdt:P108 wd:Q106736.\",\n    \"  wd:Q567 wdt:P19 ?almaMater.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?almaMater WHERE { wd:Q567 wdt:P31 wd:Q28049. wd:Q567 wdt:P106 wd:Q844284. wd:Q567 wdt:P108 wd:Q106736. wd:Q567 wdt:P19 ?almaMater. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?almaMater WHERE {\",\n    \"  wd:Q567 wdt:P69 ?almaMater.\",\n    \"  ?almaMater wdt:P31/wdt:P279* wd:Q3918.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?almaMater WHERE { wd:Q567 wdt:P69 ?almaMater. ?almaMater wdt:P31/wdt:P279* wd:Q3918. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the alma mater of the chancellor of Germany Angela Merkel?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the alma mater of the chancellor of Germany Angela Merkel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5316 is Angela Merkel\nkg:7545 is educated at\nkg:7553 is instance of\nkg:6836 is subclass of\nkg:2365 is university", "response": "{\n    \"query\": [\n        \"SELECT ?almaMater\",\n        \"WHERE {\",\n            \"kg:5316 kg:7545 ?almaMater.\",\n            \"?almaMater kg:7553 kg:2365.\"\n        ]\n    }\n \t\t", "normal_query": "SELECT ?almaMater WHERE { wd:Q567 wdt:P69 ?almaMater. ?almaMater wdt:P31 wd:Q3918. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  wd:Q106427 wdt:P50 ?author.\",\n    \"  wd:Q106427 rdfs:label \\\"Les Piliers de la terre\\\"@fr.\",\n    \"  ?book wdt:P31 wd:Q571.\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q106427 wdt:P50 ?author. wd:Q106427 rdfs:label \"Les Piliers de la terre\"@fr. ?book wdt:P31 wd:Q571. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q1163227 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote the book Les Piliers de la terre?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book Les Piliers de la terre?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0606 is The Pillars of the Earth\nkg:5137 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:0606 kg:5137 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which airports does Yeti Airlines serve?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n    \"  wd:Q10572648 wdt:P39 ?position.\",\n    \"  ?position wdt:P1082 ?airport.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airport WHERE { wd:Q10572648 wdt:P39 ?position. ?position wdt:P1082 ?airport. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which airports does Yeti Airlines serve?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1480118 is Yeti Airlines\nwdt:P113 is airline hub", "response": "{\n  \"query\": [\n    \"SELECT ?airport WHERE {\",\n      \"wd:Q1480118 wdt:P113 ?airport.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?airport WHERE { wd:Q1480118 wdt:P113 ?airport. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which airports does Yeti Airlines serve?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which airports does Yeti Airlines serve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2721 is Yeti Airlines\nkg:4798 is airline hub", "response": "{\n    \"query\": [\n        \"SELECT ?airport\",\n        \"WHERE {\",\n            \"kg:2721 kg:4798 ?hub.\",\n            \"?hub kg:4798 ?airport.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?airport WHERE { wd:Q1480118 wdt:P113 ?hub. ?hub wdt:P113 ?airport. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Where is the birthplace of Goethe?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"  wd:Q1546 wdt:P19 ?birthPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthPlace WHERE { wd:Q1546 wdt:P19 ?birthPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is the birthplace of Goethe?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5879 is Johann Wolfgang von Goethe\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthplace WHERE {\",\n      \"wd:Q5879 wdt:P19 ?birthplace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthplace WHERE { wd:Q5879 wdt:P19 ?birthplace. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where is the birthplace of Goethe?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where is the birthplace of Goethe?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8492 is Johann Wolfgang von Goethe\nkg:1815 is place of birth", "response": "{\n    \"query\": [\n        \"SELECT ?birthplace\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/8492> <http://www.example.org/kg/1815> ?birthplace.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?birthplace WHERE { <http://www.example.org/kg//8492> <http://www.example.org/kg//1815> ?birthplace. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?crisis ?invasion WHERE {\",\n    \"  ?crisis wdt:P31 wd:Q20649.\",\n    \"  ?crisis wdt:P577 ?crisisDate.\",\n    \"  ?invasion wdt:P31 wd:Q83464.\",\n    \"  ?invasion wdt:P577 ?invasionDate.\",\n    \"  FILTER(?crisisDate < ?invasionDate)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?crisis ?invasion WHERE { ?crisis wdt:P31 wd:Q20649. ?crisis wdt:P577 ?crisisDate. ?invasion wdt:P31 wd:Q83464. ?invasion wdt:P577 ?invasionDate. FILTER(?crisisDate < ?invasionDate) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128160 is Cuban Missile Crisis\nwdt:P582 is end time\nwd:Q191721 is Bay of Pigs invasion\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?crisis ?invasion WHERE {\",\n      \"?crisis wdt:P31 wd:Q128160.\",\n      \"?crisis wdt:P582 ?crisisEndTime.\",\n      \"?invasion wdt:P31 wd:Q191721.\",\n      \"?invasion wdt:P580 ?invasionStartTime.\",\n      \"FILTER(?crisisEndTime < ?invasionStartTime)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?crisis ?invasion WHERE { ?crisis wdt:P31 wd:Q128160. ?crisis wdt:P582 ?crisisEndTime. ?invasion wdt:P31 wd:Q191721. ?invasion wdt:P580 ?invasionStartTime. FILTER(?crisisEndTime < ?invasionStartTime) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is Cuban Missile Crisis\nkg:0497 is end time\nkg:0984 is Bay of Pigs invasion\nkg:5449 is start time", "response": "{\n    \"query\": [\n        \"SELECT ?crisis ?invasion\",\n        \"WHERE {\",\n            \"?crisis kg:0497 ?crisisEnd.\",\n            \"?invasion kg:0497 ?invasionEnd.\",\n            \"?crisis kg:5449 ?crisisStart.\",\n            \"?invasion kg:5449 ?invasionStart.\",\n            \"VALUES ?crisis { kg:6047 }\",\n            \"VALUES ?invasion { kg:0984 }\",\n            \"FILTER (?crisisEnd < ?invasionStart)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?crisis ?invasion WHERE { ?crisis wdt:P582 ?crisisEnd. ?invasion wdt:P582 ?invasionEnd. ?crisis wdt:P580 ?crisisStart. ?invasion wdt:P580 ?invasionStart. VALUES ?crisis { wd:Q128160 } VALUES ?invasion { wd:Q191721 } FILTER (?crisisEnd < ?invasionStart) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which ingredients do I need for carrot cake?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n    \"  wd:Q105367 wdt:P2489 ?recipe.\",\n    \"  ?recipe wdt:P1559 ?ingredient.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?ingredient WHERE { wd:Q105367 wdt:P2489 ?recipe. ?recipe wdt:P1559 ?ingredient. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which ingredients do I need for carrot cake?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q656071 is carrot cake\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?ingredient WHERE {\",\n      \"wd:Q656071 wdt:P527 ?ingredient.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?ingredient WHERE { wd:Q656071 wdt:P527 ?ingredient. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which ingredients do I need for carrot cake?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which ingredients do I need for carrot cake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4040 is carrot cake\nkg:6712 is has part(s)", "response": "{\n    \"query\": [\n        \"SELECT ?ingredient\",\n        \"WHERE {\",\n            \"kg:4040 kg:6712 ?ingredient.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?ingredient WHERE { wd:Q656071 wdt:P527 ?ingredient. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Wikipedia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q1756948 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q1756948 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Wikipedia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q52 wdt:P112 ?founder.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q52 wdt:P112 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Wikipedia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2440 is Wikipedia\nkg:0699 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n        \"   kg:2440 kg:0699 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q52 wdt:P112 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest mountain in Saxony Germany?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P17 wd:Q164.\",\n    \"  ?mountain wdt:P1065 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P17 wd:Q164. ?mountain wdt:P1065 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Saxony Germany?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P131 is located in the administrative territorial entity\nwd:Q1202 is Saxony\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q8502 .\",\n      \"?mountain wdt:P131 wd:Q1202 .\",\n      \"?mountain wdt:P2044 ?elevation .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P131 wd:Q1202 . ?mountain wdt:P2044 ?elevation . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?elevation) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Saxony Germany?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Saxony Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8166 is instance of\nkg:8572 is mountain\nkg:6404 is located in the administrative territorial entity\nkg:7885 is Saxony\nkg:5619 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?mountain\",\n        \"WHERE {\",\n            \"?mountain kg:8166 kg:8572 .\",\n            \"?mountain kg:6404 kg:7885 .\",\n            \"?mountain kg:5619 ?elevation .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMountain kg:8166 kg:8572 .\",\n                \"?otherMountain kg:6404 kg:7885 .\",\n                \"?otherMountain kg:5619 ?otherElevation .\",\n                \"FILTER (?elevation < ?otherElevation)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P131 wd:Q1202 . ?mountain wdt:P2044 ?elevation . FILTER NOT EXISTS { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P131 wd:Q1202 . ?otherMountain wdt:P2044 ?otherElevation . FILTER (?elevation < ?otherElevation) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country is Mecca located?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q9253 wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q9253 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country is Mecca located?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5806 is Mecca\nwdt:P131 is located in the administrative territorial entity\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"wd:Q5806 wdt:P131+ ?country.\",\n      \"?country wdt:P31 wd:Q6256.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q5806 wdt:P131+ ?country. ?country wdt:P31 wd:Q6256. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which country is Mecca located?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which country is Mecca located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9593 is Mecca\nkg:2857 is located in the administrative territorial entity\nkg:3525 is instance of\nkg:9937 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"<http://example.org/kg/9593> <http://example.org/kg/2857> ?location.\",\n            \"?location <http://example.org/kg/2857> ?country.\",\n            \"?country <http://example.org/kg/3525> <http://example.org/kg/9937>.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { <http://example.org/kg//9593> <http://example.org/kg//2857> ?location. ?location <http://example.org/kg//2857> ?country. ?country <http://example.org/kg//3525> <http://example.org/kg//9937>. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q1064297 wdt:P355 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q1064297 wdt:P355 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5620660 is Gus Fring\npq:P453 is character role\nps:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor pq:P453 wd:Q5620660.\",\n      \"?actor ps:P161 wd:Q7894.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor pq:P453 wd:Q5620660. ?actor ps:P161 wd:Q7894. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who played Gus Fring in Breaking Bad?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who played Gus Fring in Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3702 is Gus Fring\nkg:1248 is character role\nkg:8170 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?castMember\",\n        \"WHERE {\",\n            \"?castMember kg:1248 kg:3702 .\",\n            \"?castMember kg:8170 kg:3702 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?castMember WHERE { ?castMember pq:P453 wd:Q5620660 . ?castMember ps:P161 wd:Q5620660 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country does the Nile start?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1340 Q28675 ?river.\",\n    \"  ?river wdt:P19 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1340 Q28675 ?river. ?river wdt:P19 ?country. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which country does the Nile start?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3392 is Nile\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q3392 wdt:P885 ?origin.\",\n    \"  ?origin wdt:P17 ?country.\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q3392 wdt:P885 ?origin. ?origin wdt:P17 ?country. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which country does the Nile start?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which country does the Nile start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0768 is Nile\nkg:2584 is origin of the watercourse\nkg:0470 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:0768 kg:2584 ?origin.\",\n            \"?origin kg:0470 ?country.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q3392 wdt:P885 ?origin. ?origin wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the biggest stadium in Spain?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n    \"  ?stadium wdt:P31 wd:Q59240.\",\n    \"  ?stadium wdt:P17 wd:Q29.\",\n    \"  SERVICE wikibase:around {\",\n    \"    bd:serviceParam wikibase:center ?stadium.\",\n    \"    bd:serviceParam wikibase:radius \\\"50\\\".\",\n    \"    bd:serviceParam wikibase:distance ?dist.\",\n    \"  }\",\n    \"  FILTER(?dist = (SELECT MAX(?dist) WHERE {\",\n    \"      ?otherStadium wdt:P31 wd:Q59240.\",\n    \"      ?otherStadium wdt:P17 wd:Q29.\",\n    \"      SERVICE wikibase:around {\",\n    \"        bd:serviceParam wikibase:center ?otherStadium.\",\n    \"        bd:serviceParam wikibase:radius \\\"50\\\".\",\n    \"        bd:serviceParam wikibase:distance ?dist.\",\n    \"      }\",\n    \"  }))\"\n    ]\n}", "normal_query": "SELECT ?stadium WHERE { ?stadium wdt:P31 wd:Q59240. ?stadium wdt:P17 wd:Q29. SERVICE wikibase:around { bd:serviceParam wikibase:center ?stadium. bd:serviceParam wikibase:radius \"50\". bd:serviceParam wikibase:distance ?dist. } FILTER(?dist = (SELECT MAX(?dist) WHERE { ?otherStadium wdt:P31 wd:Q59240. ?otherStadium wdt:P17 wd:Q29. SERVICE wikibase:around { bd:serviceParam wikibase:center ?otherStadium. bd:serviceParam wikibase:radius \"50\". bd:serviceParam wikibase:distance ?dist. } })) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the biggest stadium in Spain?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q483110 is stadium\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q483110 is stadium\nwdt:P17 is country\nwd:Q29 is Spain\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n      \"?stadium wdt:P31/wdt:P279* wd:Q483110.\",\n      \"?stadium wdt:P17 wd:Q29.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?stadium WHERE { ?stadium wdt:P31/wdt:P279* wd:Q483110. ?stadium wdt:P17 wd:Q29. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the biggest stadium in Spain?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the biggest stadium in Spain?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3639 is instance of\nkg:6981 is stadium\nkg:3639 is instance of\nkg:3018 is subclass of\nkg:6981 is stadium\nkg:4997 is country\nkg:8158 is Spain\nkg:4254 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium\",\n    \"WHERE {\",\n      \"?stadium kg:3639 kg:6981 .\",\n      \"?stadium kg:4254 ?capacity .\",\n      \"FILTER NOT EXISTS { ?otherStadium kg:3639 kg:6981 . ?otherStadium kg:4254 ?otherCapacity . FILTER (?otherCapacity > ?capacity) }\",\n      \"?stadium kg:4997 kg:8158 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?stadium WHERE { ?stadium wdt:P31 wd:Q483110 . ?stadium wdt:P1083 ?capacity . FILTER NOT EXISTS { ?otherStadium wdt:P31 wd:Q483110 . ?otherStadium wdt:P1083 ?otherCapacity . FILTER (?otherCapacity > ?capacity) } ?stadium wdt:P17 wd:Q29 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How large is the area of UK?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"  wd:Q146 wdt:P2046 ?area.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q146 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How large is the area of UK?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q145 is United Kingdom\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n      \"wd:Q145 wdt:P2046 ?area.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q145 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How large is the area of UK?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How large is the area of UK?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0895 is United Kingdom\nkg:6864 is area", "response": "{\n    \"query\": [\n        \"SELECT ?area WHERE {\",\n            \"kg:0895 kg:6864 ?area.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q145 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Batman?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q7185 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q7185 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Batman?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q2695156 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q2695156 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Batman?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created Batman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4262 is Batman\nkg:4214 is creator", "response": "{\n    \"query\": [\n        \"SELECT ?creator\",\n        \"WHERE {\",\n            \"kg:4262 kg:4214 ?creator.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q2695156 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Was Sigmund Freud married?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q7668 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q1054962.\",\n    \"  ?spouse wdt:P106 wd:Q1054962.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q7668 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q1054962. ?spouse wdt:P106 wd:Q1054962. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Sigmund Freud married?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9215 is Sigmund Freud\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q9215 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q9215 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Sigmund Freud married?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Sigmund Freud married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0071 is Sigmund Freud\nkg:1379 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse WHERE {\",\n            \"kg:0071 kg:1379 ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q9215 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the developers of DBpedia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q1234567 dcterms:creator ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q1234567 dcterms:creator ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the developers of DBpedia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q465 is DBpedia\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q465 wdt:P112 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q465 wdt:P112 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who are the developers of DBpedia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who are the developers of DBpedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0141 is DBpedia\nkg:9957 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?developer\",\n        \"WHERE {\",\n            \"kg:0141 kg:9957 ?developer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q465 wdt:P112 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P571 ?director.\",\n    \"  ?director wdt:P2860 \\\"Francis Ford Coppola\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P571 ?director. ?director wdt:P2860 \"Francis Ford Coppola\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q56094 is Francis Ford Coppola", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424.\",\n      \"?movie wdt:P57 wd:Q56094.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31/wdt:P279* wd:Q11424. ?movie wdt:P57 wd:Q56094. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all movies directed by Francis Ford Coppola.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all movies directed by Francis Ford Coppola.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4264 is instance of\nkg:1346 is subclass of\nkg:9775 is film\nkg:2196 is director\nkg:2738 is Francis Ford Coppola", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:4264 kg:9775 .\",\n            \"?movie kg:2196 kg:2738 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P57 wd:Q56094 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Are tree frogs a type of amphibian?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q13269 wdt:P31 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q13269 wdt:P31 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Are tree frogs a type of amphibian?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q53696 is Hylidae\nwdt:P171 is parent taxon\nwd:Q10908 is Amphibia", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P171 wd:Q10908.\",\n      \"?resource wdt:P171 wd:Q53696.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P171 wd:Q10908. ?resource wdt:P171 wd:Q53696. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Are tree frogs a type of amphibian?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Are tree frogs a type of amphibian?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4906 is Hylidae\nkg:8693 is parent taxon\nkg:5304 is Amphibia", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:8693 kg:4906.\",\n            \"kg:4906 kg:8693 ?parentTaxon.\",\n            \"FILTER(?parentTaxon = kg:5304)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P171 wd:Q53696. wd:Q53696 wdt:P171 ?parentTaxon. FILTER(?parentTaxon = wd:Q10908) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the location of the Houses of Parliament?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"  wd:Q105427 wdt:P276 ?location.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?location WHERE { wd:Q105427 wdt:P276 ?location. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the location of the Houses of Parliament?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q62408 is Palace of Westminster\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n      \"wd:Q62408 wdt:P131 ?location.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?location WHERE { wd:Q62408 wdt:P131 ?location. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the location of the Houses of Parliament?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the location of the Houses of Parliament?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3314 is Palace of Westminster\nkg:3899 is located in the administrative territorial entity", "response": "{\n    \"query\": [\n        \"SELECT ?location WHERE {\",\n            \"<http://www.example.org/kg/3314> <http://www.example.org/kg/3899> ?location .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?location WHERE { <http://www.example.org/kg//3314> <http://www.example.org/kg//3899> ?location . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?elevation WHERE {\",\n    \"  wd:Q10962 wdt:P3485 ?elevation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?elevation WHERE { wd:Q10962 wdt:P3485 ?elevation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q58226 is Düsseldorf Airport\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?elevation WHERE {\",\n      \"wd:Q58226 wdt:P2044 ?elevation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?elevation WHERE { wd:Q58226 wdt:P2044 ?elevation. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how much is the elevation of Düsseldorf Airport ?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “how much is the elevation of Düsseldorf Airport ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is Düsseldorf Airport\nkg:7050 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?elevation\",\n        \"WHERE {\",\n            \"<http://example.org/kg/3463> <http://example.org/kg/7050> ?elevation.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?elevation WHERE { <http://example.org/kg//3463> <http://example.org/kg//7050> ?elevation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How much is the population of mexico city ?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q1492 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q1492 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How much is the population of mexico city ?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1489 is Mexico City\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q1489 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q1489 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How much is the population of mexico city ?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How much is the population of mexico city ?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8330 is Mexico City\nkg:3405 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:8330 kg:3405 ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q1489 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "when was the founding date of french fifth republic?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n    \"  wd:Q142 wdt:P571 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q142 wdt:P571 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "when was the founding date of french fifth republic?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q200686 is French Fifth Republic\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n      \"wd:Q200686 wdt:P571 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q200686 wdt:P571 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "when was the founding date of french fifth republic?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “when was the founding date of french fifth republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0429 is French Fifth Republic\nkg:8176 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:0429 kg:8176 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q200686 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the first King of England?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n    \"  ?king wdt:P31 wd:Q646097.\",\n    \"  ?king wdt:P35 wd:Q28854.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?king WHERE { ?king wdt:P31 wd:Q646097. ?king wdt:P35 wd:Q28854. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the first King of England?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q18810062 is monarch of England\np:P39 is position held\npq:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?king WHERE {\",\n      \"?king wdt:P39 wd:Q18810062.\",\n      \"?king p:P39 ?statement.\",\n      \"?statement pq:P580 [] .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n    ]\n  }\n ", "normal_query": "SELECT ?king WHERE { ?king wdt:P39 wd:Q18810062. ?king p:P39 ?statement. ?statement pq:P580 [] . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was the first King of England?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the first King of England?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9064 is position held\nkg:5324 is monarch of England\nkg:4854 is position held\nkg:6181 is start time", "response": "{\n    \"query\": [\n        \"SELECT ?king\",\n        \"WHERE {\",\n            \"?king kg:4854 kg:9064 .\",\n            \"?king kg:5324 kg:6181 ?startTime .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherKing kg:4854 kg:9064 .\",\n                \"?otherKing kg:5324 kg:6181 ?otherStartTime .\",\n                \"FILTER (?otherStartTime < ?startTime)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?king WHERE { ?king p:P39 wdt:P39 . ?king wd:Q18810062 pq:P580 ?startTime . FILTER NOT EXISTS { ?otherKing p:P39 wdt:P39 . ?otherKing wd:Q18810062 pq:P580 ?otherStartTime . FILTER (?otherStartTime < ?startTime) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the editor of Forbes?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"  wd:Q839475 wdt:P106 wd:Q33255.\",\n    \"  wd:Q839475 wdt:P98 wd:Q1062269.\",\n    \"  ?editor wdt:P106 wd:Q33255.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor WHERE { wd:Q839475 wdt:P106 wd:Q33255. wd:Q839475 wdt:P98 wd:Q1062269. ?editor wdt:P106 wd:Q33255. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the editor of Forbes?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P98 is editor", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"  wd:Q25161472 wdt:P98 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor WHERE { wd:Q25161472 wdt:P98 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the editor of Forbes?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the editor of Forbes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4567 is Forbes\nkg:7693 is editor", "response": "{\n    \"query\": [\n        \"SELECT ?editor\",\n        \"WHERE {\",\n            \"kg:4567 kg:7693 ?editor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?editor WHERE { wd:Q25161472 wdt:P98 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which awards did Douglas Hofstadter win?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q109627 wdt:P166 ?award.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q109627 wdt:P166 ?award. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which awards did Douglas Hofstadter win?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q319308 is Douglas Hofstadtesr\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q319308 wdt:P166 ?award.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q319308 wdt:P166 ?award. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which awards did Douglas Hofstadter win?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which awards did Douglas Hofstadter win?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8441 is Douglas Hofstadtesr\nkg:7848 is award received", "response": "{\n    \"query\": [\n        \"SELECT ?award\",\n        \"WHERE {\",\n            \"kg:8441 kg:7848 ?award.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q319308 wdt:P166 ?award. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the youngest Darts player?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P106 wd:Q34528.\",\n    \"  ?player wdt:P570 ?birthDate.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?birthDate)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q34528. ?player wdt:P570 ?birthDate. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY ASC(?birthDate) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the youngest Darts player?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q18574233 is darts player\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q18574233.\",\n      \"?player wdt:P569 ?dob.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?dob)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q18574233. ?player wdt:P569 ?dob. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?dob) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the youngest Darts player?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the youngest Darts player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9867 is occupation\nkg:7203 is darts player\nkg:4047 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:9867 kg:7203 .\",\n            \"?player kg:4047 ?dob .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherPlayer kg:9867 kg:7203 .\",\n                \"?otherPlayer kg:4047 ?otherDob .\",\n                \"FILTER (?otherDob > ?dob)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q18574233 . ?player wdt:P569 ?dob . FILTER NOT EXISTS { ?otherPlayer wdt:P106 wd:Q18574233 . ?otherPlayer wdt:P569 ?otherDob . FILTER (?otherDob > ?dob) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is horse racing a sport?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q7890.\",\n    \"  ?item rdfs:label \\\"horse racing\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q7890. ?item rdfs:label \"horse racing\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is horse racing a sport?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187916 is horse racing\nwdt:P279 is subclass of\nwd:Q349 is sport", "response": "{\n  \"query\": [\n    \"SELECT ?sport WHERE {\",\n      \"wd:Q187916 wdt:P279* ?sport.\",\n      \"?sport wdt:P279 wd:Q349.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sport WHERE { wd:Q187916 wdt:P279* ?sport. ?sport wdt:P279 wd:Q349. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is horse racing a sport?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is horse racing a sport?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2533 is horse racing\nkg:7442 is subclass of\nkg:8983 is sport", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:2533 kg:7442 ?class.\",\n            \"?class kg:7442 kg:8983.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q187916 wdt:P279 ?class. ?class wdt:P279 wd:Q349. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  wd:Q10642 wdt:P793 ?bridge.\",\n    \"  ?bridge wdt:P658 ?river.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { wd:Q10642 wdt:P793 ?bridge. ?bridge wdt:P658 ?river. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P177 is crosses", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n      \"wd:Q125006 wdt:P177 ?river.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { wd:Q125006 wdt:P177 ?river. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which river does the Brooklyn Bridge cross?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which river does the Brooklyn Bridge cross?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3474 is Brooklyn Bridge\nkg:2218 is crosses", "response": "{\n    \"query\": [\n        \"SELECT ?river\",\n        \"WHERE {\",\n            \"kg:3474 kg:2218 ?river.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?river WHERE { wd:Q125006 wdt:P177 ?river. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in Poland?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q36 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q36 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in Poland?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q36 is Poland\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q36 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q36 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in Poland?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many people live in Poland?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5126 is Poland\nkg:4536 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population\",\n        \"WHERE {\",\n            \"<http://example.org/kg/5126> <http://example.org/kg/4536> ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { <http://example.org/kg//5126> <http://example.org/kg//4536> ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the last episode of the TV series Friends aired?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n    \"  wd:Q104832 wdt:P1657 ?episode.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?episode WHERE { wd:Q104832 wdt:P1657 ?episode. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the last episode of the TV series Friends aired?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79784 is Friends\nwdt:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?episode WHERE {\",\n      \"wd:Q79784 wdt:P582 ?endTime.\",\n      \"?episode wdt:P31 wd:Q160664.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?episode WHERE { wd:Q79784 wdt:P582 ?endTime. ?episode wdt:P31 wd:Q160664. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When was the last episode of the TV series Friends aired?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was the last episode of the TV series Friends aired?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3659 is Friends\nkg:4666 is end time", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:3659 kg:4666 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79784 wdt:P582 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is the wife of president Obama called Michelle?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is the wife of president Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q76 wdt:P35 wd:Q10428.\",\n    \"  wd:Q76 wdt:P26 wd:Q10428.\",\n    \"  wd:Q76 wdt:P25 ?wife.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q76 wdt:P35 wd:Q10428. wd:Q76 wdt:P26 wd:Q10428. wd:Q76 wdt:P25 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is 8th president of US?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n        \"  wd:Q30 wdt:P31 wd:Q2867549.\",\n        \"  wd:Q30 wdt:P35 ?president.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q30 wdt:P31 wd:Q2867549. wd:Q30 wdt:P35 ?president. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is 8th president of US?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30 is United States of America\np:P6 is head of government\npq:P580 is start time\nps:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president p:P6/ps:P6 wd:Q30.\",\n      \"?president p:P6/pq:P580 ?startTime.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president p:P6/ps:P6 wd:Q30. ?president p:P6/pq:P580 ?startTime. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is 8th president of US?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is 8th president of US?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7329 is United States of America\nkg:8425 is head of government\nkg:0279 is start time\nkg:3879 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n            \"?president kg:8425 kg:7329 .\",\n            \"?president kg:0279 ?startTime .\",\n            \"FILTER (?startTime = 1837) }\"\n        ]\n}", "normal_query": "SELECT ?president WHERE { ?president p:P6 wd:Q30 . ?president pq:P580 ?startTime . FILTER (?startTime = 1837) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the total population of european union?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q468 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q468 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the total population of european union?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q458 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q458 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how much is the total population of european union?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “how much is the total population of european union?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0953 is European Union\nkg:6799 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:0953 kg:6799 ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q458 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all launch pads operated by NASA.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?launchPad WHERE {\",\n    \"  ?launchPad wdt:P31 wd:Q206497.\",\n    \"  ?launchPad wdt:P159 wd:Q844.\"\n    ]\n}", "normal_query": "SELECT ?launchPad WHERE { ?launchPad wdt:P31 wd:Q206497. ?launchPad wdt:P159 wd:Q844. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all launch pads operated by NASA.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q194188 is spaceport\nwdt:P137 is operator\nwd:Q23548 is National Aeronautics and Space Administration", "response": "{\n  \"query\": [\n    \"SELECT ?launchPad WHERE {\",\n      \"?launchPad wdt:P31 wd:Q194188.\",\n      \"?launchPad wdt:P137 wd:Q23548.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?launchPad WHERE { ?launchPad wdt:P31 wd:Q194188. ?launchPad wdt:P137 wd:Q23548. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all launch pads operated by NASA.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all launch pads operated by NASA.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is instance of\nkg:9497 is spaceport\nkg:1707 is operator\nkg:0090 is National Aeronautics and Space Administration", "response": "{\n    \"query\": [\n        \"SELECT ?launchPad\",\n        \"WHERE {\",\n            \"?launchPad kg:8521/kg:9497 .\",\n            \"?launchPad kg:1707/kg:0090 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?launchPad WHERE { ?launchPad wdt:P31/wd:Q194188 . ?launchPad wdt:P137/wd:Q23548 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who developed the video game World of Warcraft?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q34017 wdt:P178 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q34017 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed the video game World of Warcraft?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131007 is World of Warcraft\nwdt:P178 is developer", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n      \"wd:Q131007 wdt:P178 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q131007 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who developed the video game World of Warcraft?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who developed the video game World of Warcraft?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4175 is World of Warcraft\nkg:2911 is developer", "response": "{\n    \"query\": [\n        \"SELECT ?developer\",\n        \"WHERE {\",\n            \"kg:4175 kg:2911 ?developer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q131007 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the birth name of Adele?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n    \"  wd:Q239047 wdt:P1476 ?birthName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthName WHERE { wd:Q239047 wdt:P1476 ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the birth name of Adele?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23215 is Adele\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n      \"wd:Q23215 wdt:P1477 ?birthName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthName WHERE { wd:Q23215 wdt:P1477 ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the birth name of Adele?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the birth name of Adele?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8007 is Adele\nkg:3664 is birth name", "response": "{\n    \"query\": [\n        \"SELECT ?birthName\",\n        \"WHERE {\",\n            \"<http://example.org/kg/8007> <http://example.org/kg/3664> ?birthName.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?birthName WHERE { <http://example.org/kg//8007> <http://example.org/kg//3664> ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the population of Cairo?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q679 Q1082435 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q679 Q1082435 ?population. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the population of Cairo?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85 is Cairo\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q85 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q85 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the population of Cairo?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the population of Cairo?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4167 is Cairo\nkg:8338 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:4167 kg:8338 ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q85 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is Frank Herbert still alive?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q134067 wdt:P570 ?deathDate.\",\n    \"  FILTER NOT EXISTS { ?person wdt:P570 [] } .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q134067 wdt:P570 ?deathDate. FILTER NOT EXISTS { ?person wdt:P570 [] } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Frank Herbert still alive?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P570 [] .\",\n      \"FILTER NOT EXISTS { ?person wdt:P570 ?date }.\",\n      \"VALUES ?person { wd:Q7934 }\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P570 [] . FILTER NOT EXISTS { ?person wdt:P570 ?date }. VALUES ?person { wd:Q7934 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Frank Herbert still alive?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Frank Herbert still alive?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6191 is Frank Herbert\nkg:7183 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:date_of_death ?death_date.\",\n            \"FILTER NOT EXISTS {\",\n                \"?resource kg:date_of_death ?death_date.\"\n            \t\t,\n            \"}\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:date_of_death ?death_date. FILTER NOT EXISTS { ?resource kg:date_of_death ?death_date. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the last work of Dan Brown?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q43268 wdt:P179 ?work.\",\n    \"  ?work wdt:P50 wd:Q43268.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q43268 wdt:P179 ?work. ?work wdt:P50 wd:Q43268. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the last work of Dan Brown?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q7345 is Dan Brown\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P50 wd:Q7345.\",\n      \"?work wdt:P577 ?date.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?date)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q7345. ?work wdt:P577 ?date. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?date) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What is the last work of Dan Brown?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the last work of Dan Brown?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8899 is author\nkg:6077 is Dan Brown\nkg:9624 is publication date", "response": "{\n    \"query\": [\n        \"SELECT ?work\",\n        \"WHERE {\",\n            \"?work kg:8899 kg:6077 .\",\n            \"?work kg:9624 ?date .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherWork kg:8899 kg:6077 .\",\n                \"?otherWork kg:9624 ?otherDate .\",\n                \"FILTER (?otherDate > ?date)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q7345 . ?work wdt:P577 ?date . FILTER NOT EXISTS { ?otherWork wdt:P50 wd:Q7345 . ?otherWork wdt:P577 ?otherDate . FILTER (?otherDate > ?date) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Sungkyunkwan University?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q689254.\",\n    \"  ?item rdfs:label \\\"Sungkyunkwan University\\\"@en.\"\n    ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q689254. ?item rdfs:label \"Sungkyunkwan University\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Where is Sungkyunkwan University?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwdt:P276 is location\nwdt:P131 is located in the administrative territorial entity\nwd:Q41085 is Sungkyunkwan University", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n      \"wd:Q41085 wdt:P276 ?location.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?location WHERE { wd:Q41085 wdt:P276 ?location. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Sungkyunkwan University?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where is Sungkyunkwan University?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0470 is country\nkg:8946 is location\nkg:2192 is located in the administrative territorial entity\nkg:9035 is Sungkyunkwan University", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:2192 kg:8946 .\",\n            \"?resource rdfs:label \\\"Sungkyunkwan University\\\"@en .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P131 wdt:P276 . ?resource rdfs:label \"Sungkyunkwan University\"@en . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the author of the interpretation of dreams?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q1048267 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1048267 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the author of the interpretation of dreams?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q726382 is Die Traumdeutung\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q726382 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q726382 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the author of the interpretation of dreams?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the author of the interpretation of dreams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1167 is Die Traumdeutung\nkg:3300 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:1167 kg:3300 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q726382 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the death of Shakespeare?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?death WHERE {\",\n    \"  wd:Q610 wdt:P575 ?death.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?death WHERE { wd:Q610 wdt:P575 ?death. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the death of Shakespeare?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q692 is William Shakespeare\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?death WHERE {\",\n      \"wd:Q692 wdt:P570 ?death.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?death WHERE { wd:Q692 wdt:P570 ?death. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the death of Shakespeare?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was the death of Shakespeare?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5991 is William Shakespeare\nkg:8176 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?deathDate\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/5991> <http://www.example.org/kg/8176> ?deathDate.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?deathDate WHERE { <http://www.example.org/kg//5991> <http://www.example.org/kg//8176> ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed Slack?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n    \"  wd:Q17046328 wdt:P178 ?developer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { wd:Q17046328 wdt:P178 ?developer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who developed Slack?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1056 is product or material produced or service provided\nwd:Q17130715 is Slack", "response": "{\n  \"query\": [\n    \"SELECT ?developer WHERE {\",\n      \"?developer wdt:P1056 wd:Q17130715.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?developer WHERE { ?developer wdt:P1056 wd:Q17130715. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who developed Slack?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who developed Slack?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0014 is product or material produced or service provided\nkg:0492 is Slack", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0014 kg:0492 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1056 wd:Q17130715 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which year was Rachel Stevens born?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person rdfs:label \\\"Rachel Stevens\\\"@en.\",\n    \"  ?person wdt:P569 ?birthDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person rdfs:label \"Rachel Stevens\"@en. ?person wdt:P569 ?birthDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which year was Rachel Stevens born?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?year WHERE {\",\n      \"wd:Q241665 wdt:P569 ?date.\",\n      \"BIND(YEAR(?date) AS ?year).\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?year WHERE { wd:Q241665 wdt:P569 ?date. BIND(YEAR(?date) AS ?year). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which year was Rachel Stevens born?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which year was Rachel Stevens born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Rachel Stevens\nkg:8397 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?year\",\n        \"WHERE {\",\n            \"kg:8473 kg:8397 ?date.\",\n            \"BIND (YEAR(?date) AS ?year)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?year WHERE { wd:Q241665 wdt:P569 ?date. BIND (YEAR(?date) AS ?year) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How often did Jane Fonda marry?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q12438 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q12438 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How often did Jane Fonda marry?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41142 is Jane Fonda\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q41142 wdt:P26 ?spouse.\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q41142 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How often did Jane Fonda marry?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How often did Jane Fonda marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3295 is Jane Fonda\nkg:1321 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"<http://example.org/kg/3295> <http://example.org/kg/1321> ?spouse .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { <http://example.org/kg//3295> <http://example.org/kg//1321> ?spouse . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was the wife of president Lincoln called Mary?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was the wife of president Lincoln called Mary?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q146 wdt:P35 wd:Q2078.\",\n    \"  wd:Q2078 rdfs:label ?wife.\",\n    \"  FILTER (LANG(?wife) = 'en')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q146 wdt:P35 wd:Q2078. wd:Q2078 rdfs:label ?wife. FILTER (LANG(?wife) = 'en') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which programming language is GIMP written?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q106528 P348 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q106528 P348 ?language. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which programming language is GIMP written?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8038 is GIMP\nwdt:P277 is programmed in", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"wd:Q8038 wdt:P277 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q8038 wdt:P277 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which programming language is GIMP written?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which programming language is GIMP written?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6582 is GIMP\nkg:7415 is programmed in", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"kg:6582 kg:7415 ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q8038 wdt:P277 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which university did Angela Merkel attend?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q567 wdt:P108 ?university.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q567 wdt:P108 ?university. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which university did Angela Merkel attend?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3918 is university\nwd:Q875538 is public university\nwd:Q567 is Angela Merkel\nwdt:P69 is educated at\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q567 wdt:P69 ?university.\",\n    \"  ?university wdt:P31 wd:Q3918.\"\n    ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q567 wdt:P69 ?university. ?university wdt:P31 wd:Q3918. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which university did Angela Merkel attend?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which university did Angela Merkel attend?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5654 is university\nkg:4459 is public university\nkg:0182 is Angela Merkel\nkg:0579 is educated at\nkg:4931 is instance of", "response": "{\n    \"query\": [\n        \"SELECT ?university WHERE {\",\n            \"kg:0182 kg:0579 ?university .\",\n            \"?university kg:4931 kg:5654 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?university WHERE { wd:Q567 wdt:P69 ?university . ?university wdt:P31 wd:Q3918 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List all the musicals with music by Elton John.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?musical WHERE {\",\n    \"  ?musical wdt:P31 wd:Q207695.\",\n    \"  ?musical wdt:P800 wd:Q44464.\"\n    ]\n}", "normal_query": "SELECT ?musical WHERE { ?musical wdt:P31 wd:Q207695. ?musical wdt:P800 wd:Q44464. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List all the musicals with music by Elton John.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q58483083 is dramatico-musical work\nwdt:P86 is composer\nwd:Q2808 is Elton John", "response": "{\n  \"query\": [\n    \"SELECT ?musical WHERE {\",\n      \"?musical wdt:P31/wdt:P279* wd:Q58483083.\",\n      \"?musical wdt:P86 wd:Q2808.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?musical WHERE { ?musical wdt:P31/wdt:P279* wd:Q58483083. ?musical wdt:P86 wd:Q2808. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "List all the musicals with music by Elton John.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List all the musicals with music by Elton John.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9424 is instance of\nkg:1957 is subclass of\nkg:3671 is dramatico-musical work\nkg:9607 is composer\nkg:2686 is Elton John", "response": "{\n    \"query\": [\n        \"SELECT ?musical\",\n        \"WHERE {\",\n            \"?musical kg:9424 kg:3671 .\",\n            \"?musical kg:9607 kg:2686 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?musical WHERE { ?musical wdt:P31 wd:Q58483083 . ?musical wdt:P86 wd:Q2808 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the longest river in the world?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the longest river in the world?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  ?river wdt:P31 wd:Q4026.\",\n    \"  ?river wdt:P1795 ?length.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4026. ?river wdt:P1795 ?length. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?length) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "When was John Adams born?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2469 wdt:P569 ?birthDate.\",\n    \"  BIND(wd:Q2469 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2469 wdt:P569 ?birthDate. BIND(wd:Q2469 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was John Adams born?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11806 is John Adams\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthDate WHERE {\",\n      \"wd:Q11806 wdt:P569 ?birthDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthDate WHERE { wd:Q11806 wdt:P569 ?birthDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was John Adams born?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was John Adams born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5247 is John Adams\nkg:0188 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5247 kg:0188 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q11806 wdt:P569 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which companies produce hovercrafts?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q206497.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q206497. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which companies produce hovercrafts?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q185757 is hovercraft\nwdt:P176 is manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P176 wd:Q185757.\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P176 wd:Q185757. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which companies produce hovercrafts?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which companies produce hovercrafts?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8283 is instance of\nkg:6744 is subclass of\nkg:6957 is hovercraft\nkg:1305 is manufacturer", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:1305 ?hovercraft.\",\n            \"?hovercraft kg:8283 kg:6957.\"\n        ]\n    }\n ", "normal_query": "SELECT ?company WHERE { ?company wdt:P176 ?hovercraft. ?hovercraft wdt:P31 wd:Q185757. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q142 wdt:P356 ?wife.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q142 wdt:P356 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q91 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q91 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the wife of U.S. president Lincoln?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the wife of U.S. president Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1470 is Abraham Lincoln\nkg:1740 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse WHERE {\",\n            \"kg:1470 kg:1740 ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q91 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which species does an elephant belong?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE {\",\n    \"  wd:Q725 Q31629 ?species.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?species WHERE { wd:Q725 Q31629 ?species. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which species does an elephant belong?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7378 is elephant\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?species WHERE {\",\n    \"  wd:Q7378 wdt:P279 ?species.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?species WHERE { wd:Q7378 wdt:P279 ?species. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which species does an elephant belong?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which species does an elephant belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5477 is elephant\nkg:6250 is subclass of", "response": "{\n    \"query\": [\n        \"SELECT ?species\",\n        \"WHERE {\",\n            \"kg:5477 kg:6250 ?species.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?species WHERE { wd:Q7378 wdt:P279 ?species. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in the capital of Australia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital ?population WHERE {\",\n    \"  wd:Q468 wdt:P31 wd:Q20795.\",\n    \"  wd:Q468 wdt:P1376 ?population.\",\n    \"  wd:Q468 wdt:P36 ?capital.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital ?population WHERE { wd:Q468 wdt:P31 wd:Q20795. wd:Q468 wdt:P1376 ?population. wd:Q468 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many people live in the capital of Australia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q408 is Australia\nwdt:P36 is capital\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n      \"wd:Q408 wdt:P36 ?capital.\",\n      \"?capital wdt:P1082 ?population.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?capital WHERE { wd:Q408 wdt:P36 ?capital. ?capital wdt:P1082 ?population. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many people live in the capital of Australia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many people live in the capital of Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1226 is Australia\nkg:4676 is capital\nkg:8292 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:1226 kg:4676 ?capital.\",\n            \"?capital kg:8292 ?population.\"\n        ]\n    }\n ", "normal_query": "SELECT ?population WHERE { wd:Q408 wdt:P36 ?capital. ?capital wdt:P1082 ?population. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?empire WHERE {\",\n    \"  ?empire wdt:P31 wd:Q6256.\",\n    \"  ?empire wdt:P1709 wd:Q4826.\"\n    ]\n}", "normal_query": "SELECT ?empire WHERE { ?empire wdt:P31 wd:Q6256. ?empire wdt:P1709 wd:Q4826. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P38 is currency\nwd:Q208008 is cocoa bean", "response": "{\n  \"query\": [\n    \"SELECT ?empire WHERE {\",\n      \"?empire wdt:P38 wd:Q208008.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?empire WHERE { ?empire wdt:P38 wd:Q208008. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which ancient empire could you pay with cocoa beans?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which ancient empire could you pay with cocoa beans?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7522 is currency\nkg:2855 is cocoa bean", "response": "{\n    \"query\": [\n        \"SELECT ?empire\",\n        \"WHERE {\",\n            \"?empire kg:7522 ?currency.\",\n            \"FILTER (?currency = kg:2855)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?empire WHERE { ?empire wdt:P38 ?currency. FILTER (?currency = wd:Q208008) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many theories did Albert Einstein come up with?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?theory WHERE {\",\n    \"  wd:Q937 wdt:P1680 ?theory.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?theory WHERE { wd:Q937 wdt:P1680 ?theory. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many theories did Albert Einstein come up with?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P800 is notable work", "response": "{\n  \"query\": [\n    \"SELECT ?theory WHERE {\",\n    \"  wd:Q937 wdt:P800 ?theory.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?theory WHERE { wd:Q937 wdt:P800 ?theory. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many theories did Albert Einstein come up with?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many theories did Albert Einstein come up with?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9081 is Albert Einstein\nkg:7047 is notable work", "response": "{\n    \"query\": [\n        \"SELECT ?theory\",\n        \"WHERE {\",\n            \"kg:9081 kg:7047 ?theory.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?theory WHERE { wd:Q937 wdt:P800 ?theory. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?soundtrack WHERE {\",\n    \"  wd:Q134625 wdt:P800 ?soundtrack.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?soundtrack WHERE { wd:Q134625 wdt:P800 ?soundtrack. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44578 is Titanic\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"wd:Q44578 wdt:P86 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q44578 wdt:P86 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who composed the soundtrack for Cameron's Titanic?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who composed the soundtrack for Cameron's Titanic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0524 is Titanic\nkg:2249 is composer", "response": "{\n    \"query\": [\n        \"SELECT ?composer\",\n        \"WHERE {\",\n            \"kg:0524 kg:2249 ?composer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q44578 wdt:P86 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the runtime of Toy Story.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?runtime WHERE {\",\n    \"  wd:Q106947 wdt:P2047 ?runtime.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?runtime WHERE { wd:Q106947 wdt:P2047 ?runtime. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the runtime of Toy Story.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171048 is Toy Story\nwdt:P2047 is duration", "response": "{\n  \"query\": [\n    \"SELECT ?runtime WHERE {\",\n      \"wd:Q171048 wdt:P2047 ?runtime.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the runtime of Toy Story.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the runtime of Toy Story.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1514 is Toy Story\nkg:2430 is duration", "response": "{\n    \"query\": [\n        \"SELECT ?runtime\",\n        \"WHERE {\",\n            \"kg:1514 kg:2430 ?runtime.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "With how many countries Iran has borders?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q489 Q17263501 ?border.\",\n    \"  ?border wdt:P31 wd:Q6256.\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q489 Q17263501 ?border. ?border wdt:P31 wd:Q6256. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "With how many countries Iran has borders?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q794 is Iran\nwdt:P47 is shares border with", "response": "{\n  \"query\": [\n    \"SELECT ?country\",\n    \"WHERE {\",\n      \"wd:Q794 wdt:P47 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q794 wdt:P47 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "With how many countries Iran has borders?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “With how many countries Iran has borders?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7701 is Iran\nkg:4645 is shares border with", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:7701 kg:4645 ?country.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q794 wdt:P47 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which electronics companies were founded in Beijing?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q28640.\",\n    \"  ?company wdt:P17 wd:Q149.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q28640. ?company wdt:P17 wd:Q149. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which electronics companies were founded in Beijing?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P452 is industry\nwd:Q581105 is consumer electronics\nwdt:P740 is location of formation\nwd:Q956 is Beijing", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P31 wd:Q28651.\",\n      \"?company wdt:P452 wd:Q581105.\",\n      \"?company wdt:P740 wd:Q956.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q28651. ?company wdt:P452 wd:Q581105. ?company wdt:P740 wd:Q956. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which electronics companies were founded in Beijing?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which electronics companies were founded in Beijing?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is industry\nkg:1205 is consumer electronics\nkg:3857 is location of formation\nkg:1374 is Beijing", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:1847 kg:1205 .\",\n            \"?company kg:3857 kg:1374 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P452 wd:Q581105 . ?company wdt:P740 wd:Q956 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the successor of John F. Kennedy?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?successor WHERE {\",\n    \"  wd:Q12479 wdt:P643 ?successor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?successor WHERE { wd:Q12479 wdt:P643 ?successor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the successor of John F. Kennedy?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?successor WHERE {\",\n      \"wd:Q9696 p:P39/ps:P39 wd:Q11696.\",\n      \"?successor p:P39/ps:P39 wd:Q11696;\",\n      \"pq:P1366 wd:Q9696.\"\n    ]\n  }\n ", "normal_query": "SELECT ?successor WHERE { wd:Q9696 p:P39/ps:P39 wd:Q11696. ?successor p:P39/ps:P39 wd:Q11696; pq:P1366 wd:Q9696. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was the successor of John F. Kennedy?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the successor of John F. Kennedy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2479 is John F. Kennedy\nkg:8778 is position held\nkg:5867 is position held\nkg:9343 is President of the United States\nkg:6563 is replaced by", "response": "{\n    \"query\": [\n        \"SELECT ?successor\",\n        \"WHERE {\",\n            \"kg:2479 kg:8778 kg:9343 .\",\n            \"?successor kg:8778 kg:9343 .\",\n            \"kg:2479 kg:6563 ?successor .\"\n        ]\n    }\n ", "normal_query": "SELECT ?successor WHERE { wd:Q9696 p:P39 wd:Q11696 . ?successor p:P39 wd:Q11696 . wd:Q9696 pq:P1366 ?successor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the mayor of Paris?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q185 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q185 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the mayor of Paris?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q90 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q90 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Paris?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Paris?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6166 is Paris\nkg:8306 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"kg:6166 kg:8306 ?mayor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q90 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q10654 wdt:P239 ?university.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q10654 wdt:P239 ?university. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2685 is Arnold Schwarzenegger\nwdt:P69 is educated at\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n      \"wd:Q2685 wdt:P69 ?university.\",\n      \"?university wdt:P31/wdt:P279* wd:Q3918.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q2685 wdt:P69 ?university. ?university wdt:P31/wdt:P279* wd:Q3918. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Arnold Schwarzenegger attend a university?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Arnold Schwarzenegger attend a university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7308 is Arnold Schwarzenegger\nkg:8876 is educated at\nkg:0688 is instance of\nkg:7030 is subclass of\nkg:3125 is university", "response": "{\n    \"query\": [\n        \"SELECT ?university\",\n        \"WHERE {\",\n            \"kg:7308 kg:8876 ?education.\",\n            \"?education kg:0688 kg:3125.\",\n            \"?education kg:7030 ?university.\"\n        ]\n    }\n ", "normal_query": "SELECT ?university WHERE { wd:Q2685 wdt:P69 ?education. ?education wdt:P31 wd:Q3918. ?education wdt:P279 ?university. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is James Bond married?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q106943 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q10583767.\",\n    \"  ?spouse wdt:P106 wd:Q106943.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q106943 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q10583767. ?spouse wdt:P106 wd:Q106943. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is James Bond married?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2009573 is James Bond\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q2009573 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2009573 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is James Bond married?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is James Bond married?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6381 is James Bond\nkg:3800 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse WHERE {\",\n            \"<http://www.example.org/kg/6381> <http://www.example.org/kg/3800> ?spouse .\"\n        ]\n    }\n ", "normal_query": "SELECT ?spouse WHERE { <http://www.example.org/kg//6381> <http://www.example.org/kg//3800> ?spouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Does the Isar flow into a lake?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  wd:Q15240 wdt:P697 ?lake.\",\n    \"  ?lake wdt:P31 wd:Q23397.\",\n    \"  ?river wdt:P31 wd:Q4022.\"\n    ]\n}", "normal_query": "SELECT ?river WHERE { wd:Q15240 wdt:P697 ?lake. ?lake wdt:P31 wd:Q23397. ?river wdt:P31 wd:Q4022. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Does the Isar flow into a lake?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q106588 is Isar\nwdt:P403 is mouth of the watercourse\nwdt:P31 is instance of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"  wd:Q106588 wdt:P403 ?mouth.\",\n    \"  ?mouth wdt:P31 wd:Q23397.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?lake WHERE { wd:Q106588 wdt:P403 ?mouth. ?mouth wdt:P31 wd:Q23397. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does the Isar flow into a lake?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Does the Isar flow into a lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5036 is Isar\nkg:9120 is mouth of the watercourse\nkg:4891 is instance of\nkg:5402 is lake", "response": "{\n    \"query\": [\n        \"SELECT ?lake\",\n        \"WHERE {\",\n            \"kg:5036 kg:9120 ?mouth.\",\n            \"?mouth kg:4891 kg:5402.\",\n            \"?mouth kg:9120 ?lake.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?lake WHERE { wd:Q106588 wdt:P403 ?mouth. ?mouth wdt:P31 wd:Q23397. ?mouth wdt:P403 ?lake. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which Indian company has the most employees?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q6881511.\",\n    \"  ?company wdt:P452 wd:Q807.\",\n    \"  ?company wdt:P1128 ?employees.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?employees)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q6881511. ?company wdt:P452 wd:Q807. ?company wdt:P1128 ?employees. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?employees) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which Indian company has the most employees?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P17 is country\nwd:Q668 is India\nwdt:P1128 is employees", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 .\", \"# is business\",\n      \"?company wdt:P17 wd:Q668 .\", \"# is country India\",\n      \"?company wdt:P1128 ?employees .\", \"# has employees\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P17 wd:Q668 . ?company wdt:P1128 ?employees . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which Indian company has the most employees?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which Indian company has the most employees?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9039 is instance of\nkg:8788 is business\nkg:3619 is country\nkg:2811 is India\nkg:7645 is employees", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:9039 kg:8788 .\",\n            \"?company kg:3619 kg:2811 .\",\n            \"?company kg:7645 ?numEmployees .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherCompany kg:9039 kg:8788 .\",\n                \"?otherCompany kg:3619 kg:2811 .\",\n                \"?otherCompany kg:7645 ?otherNumEmployees .\",\n                \"FILTER (?numEmployees < ?otherNumEmployees)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P17 wd:Q668 . ?company wdt:P1128 ?numEmployees . FILTER NOT EXISTS { ?otherCompany wdt:P31 wd:Q4830453 . ?otherCompany wdt:P17 wd:Q668 . ?otherCompany wdt:P1128 ?otherNumEmployees . FILTER (?numEmployees < ?otherNumEmployees) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was John F. Kennedy's vice president?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?vicePresident WHERE {\",\n    \"  wd:Q3127 wdt:P35 wd:Q34068.\",\n    \"  wd:Q34068 wdt:P39 ?vicePresident.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?vicePresident WHERE { wd:Q3127 wdt:P35 wd:Q34068. wd:Q34068 wdt:P39 ?vicePresident. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was John F. Kennedy's vice president?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P580 is start time\npq:P582 is end time\np:P39 is position held\nps:P39 is position held\nwd:Q11699 is Vice President of the United States\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?vicePresident WHERE {\",\n    \"  wd:Q9696 p:P39/ps:P39/wdt:P1067 ?vicePresident.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?vicePresident WHERE { wd:Q9696 p:P39/ps:P39/wdt:P1067 ?vicePresident. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was John F. Kennedy's vice president?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was John F. Kennedy's vice president?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3069 is John F. Kennedy\nkg:4508 is position held\nkg:8952 is position held\nkg:0773 is President of the United States\nkg:0995 is start time\nkg:5626 is end time\nkg:4508 is position held\nkg:8952 is position held\nkg:0526 is Vice President of the United States\nkg:0995 is start time\nkg:5626 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?vicePresident WHERE {\",\n      \"kg:3069 kg:4508 ?position.\",\n      \"?position kg:0773 kg:0526.\",\n      \"?position kg:0995 ?startTime.\",\n      \"?position kg:5626 ?endTime.\",\n      \"?vicePresident kg:8952 ?position.\"\n    ]\n  }\n ", "normal_query": "SELECT ?vicePresident WHERE { wd:Q9696 p:P39 ?position. ?position wd:Q11696 wd:Q11699. ?position pq:P580 ?startTime. ?position pq:P582 ?endTime. ?vicePresident ps:P39 ?position. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which country does the creator of Miffy come from?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1064287 wdt:P495 ?creator.\",\n    \"  ?creator wdt:P27 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1064287 wdt:P495 ?creator. ?creator wdt:P27 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which country does the creator of Miffy come from?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1501505 is Miffy\nwdt:P170 is creator\nwdt:P27 is country of citizenship", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"wd:Q1501505 wdt:P170 ?creator.\",\n      \"?creator wdt:P27 ?country.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1501505 wdt:P170 ?creator. ?creator wdt:P27 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which country does the creator of Miffy come from?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which country does the creator of Miffy come from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1126 is Miffy\nkg:0332 is creator\nkg:1594 is country of citizenship", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:1126 kg:0332 ?creator.\",\n            \"?creator kg:1594 ?country.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1501505 wdt:P170 ?creator. ?creator wdt:P27 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In what city is the Heineken brewery?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q105426 wdt:P17 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q105426 wdt:P17 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In what city is the Heineken brewery?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854383 is Heineken\nwdt:P176 is manufacturer\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q854383 wdt:P176 ?manufacturer.\",\n    \"  ?manufacturer wdt:P159 ?city.\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q854383 wdt:P176 ?manufacturer. ?manufacturer wdt:P159 ?city. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In what city is the Heineken brewery?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In what city is the Heineken brewery?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2645 is Heineken\nkg:1943 is manufacturer\nkg:0447 is headquarters location", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"kg:2645 kg:1943 ?manufacturer.\",\n            \"?manufacturer kg:0447 ?city.\"\n        ]\n    }\n ", "normal_query": "SELECT ?city WHERE { wd:Q854383 wdt:P176 ?manufacturer. ?manufacturer wdt:P159 ?city. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Barack Obama a democrat?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q76 wdt:P102 ?party.\",\n    \"  ?party wdt:P31 wd:Q45987.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q76 wdt:P102 ?party. ?party wdt:P31 wd:Q45987. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Barack Obama a democrat?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P102 is member of political party\nwd:Q29552 is Democratic Party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"wd:Q76 wdt:P102 ?party.\",\n      \"FILTER(?party = wd:Q29552)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { wd:Q76 wdt:P102 ?party. FILTER(?party = wd:Q29552) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Barack Obama a democrat?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Barack Obama a democrat?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6237 is Barack Obama\nkg:0077 is member of political party\nkg:9901 is Democratic Party", "response": "{\n    \"query\": [\n        \"SELECT ?party\",\n        \"WHERE {\",\n            \"<http://example.org/kg/6237> <http://example.org/kg/0077> ?party.\",\n            \"FILTER (?party = <http://example.org/kg/9901>)\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { <http://example.org/kg//6237> <http://example.org/kg//0077> ?party. FILTER (?party = <http://example.org/kg//9901>) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List the children of Margaret Thatcher.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q10684 Q39 wd:P25 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q10684 Q39 wd:P25 ?child. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List the children of Margaret Thatcher.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7416 is Margaret Thatcher\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q7416 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q7416 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "List the children of Margaret Thatcher.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List the children of Margaret Thatcher.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1671 is Margaret Thatcher\nkg:9715 is child", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1671> <http://example.org/kg/9715> ?child.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { <http://example.org/kg//1671> <http://example.org/kg//9715> ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n    \"  wd:Q604 wdt:P2046 ?area.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q604 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1198 is North Rhine-Westphalia\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?area WHERE {\",\n      \"wd:Q1198 wdt:P2046 ?area.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q1198 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how big is the total area of North Rhine- Westphalia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “how big is the total area of North Rhine- Westphalia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2319 is North Rhine-Westphalia\nkg:6965 is area", "response": "{\n    \"query\": [\n        \"SELECT ?area WHERE {\",\n            \"kg:2319 kg:6965 ?area.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?area WHERE { wd:Q1198 wdt:P2046 ?area. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which city has the most inhabitants?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515.\",\n    \"  ?city wdt:P1082 ?population.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P1082 ?population. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which city has the most inhabitants?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P31/wdt:P279* wd:Q515 .\",\n      \"?city wdt:P1082 ?population .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31/wdt:P279* wd:Q515 . ?city wdt:P1082 ?population . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which city has the most inhabitants?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which city has the most inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0594 is instance of\nkg:1015 is subclass of\nkg:4012 is city\nkg:0154 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?city kg:0594 kg:4012 .\",\n            \"?city kg:0154 ?population .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherCity kg:0594 kg:4012 .\",\n                \"?otherCity kg:0154 ?otherPopulation .\",\n                \"FILTER (?otherPopulation > ?population)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P1082 ?population . FILTER NOT EXISTS { ?otherCity wdt:P31 wd:Q515 . ?otherCity wdt:P1082 ?otherPopulation . FILTER (?otherPopulation > ?population) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Donald Trump's main business?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE {\",\n    \"  wd:Q28974 wdt:P1065 ?business.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?business WHERE { wd:Q28974 wdt:P1065 ?business. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Donald Trump's main business?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P488 is chairperson\nwd:Q22686 is Donald Trump\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE {\",\n      \"wd:Q22686 wdt:P488 ?chairperson.\",\n      \"?chairperson wdt:P31 wd:Q4830453.\",\n      \"?chairperson wdt:P576 [] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?business WHERE { wd:Q22686 wdt:P488 ?chairperson. ?chairperson wdt:P31 wd:Q4830453. ?chairperson wdt:P576 [] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Donald Trump's main business?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is Donald Trump's main business?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4832 is chairperson\nkg:2038 is Donald Trump\nkg:0886 is instance of\nkg:5264 is subclass of\nkg:3913 is business\nkg:3936 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?business WHERE {\",\n      \"kg:2038 kg:4832 ?chairperson.\",\n      \"?chairperson kg:0886 kg:3913.\",\n      \"?chairperson kg:5264 ?business.\"\n    ]\n  }\n ", "normal_query": "SELECT ?business WHERE { wd:Q22686 wdt:P488 ?chairperson. ?chairperson wdt:P31 wd:Q4830453. ?chairperson wdt:P279 ?business. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When will start the final match of the football world cup 2018?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?match WHERE {\",\n    \"  ?match wdt:P31 wd:Q954786.\",\n    \"  ?match wdt:P2067 \\\"2018\\\".\",\n    \"  ?match wdt:P1336 wd:Q11424.\"\n    ]\n}", "normal_query": "SELECT ?match WHERE { ?match wdt:P31 wd:Q954786. ?match wdt:P2067 \"2018\". ?match wdt:P1336 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When will start the final match of the football world cup 2018?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170645 is 2018 FIFA World Cup\nwdt:P3967 is final event\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?finalMatch WHERE {\",\n      \"wd:Q170645 wdt:P3967 ?finalMatch.\",\n      \"?finalMatch wdt:P580 ?startTime.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?finalMatch WHERE { wd:Q170645 wdt:P3967 ?finalMatch. ?finalMatch wdt:P580 ?startTime. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When will start the final match of the football world cup 2018?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When will start the final match of the football world cup 2018?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7606 is 2018 FIFA World Cup\nkg:2755 is final event\nkg:9531 is start time", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:7606 kg:2755 ?finalEvent .\",\n            \"?finalEvent kg:9531 ?startTime .\",\n            \"BIND(?finalEvent AS ?resource) }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q170645 wdt:P3967 ?finalEvent . ?finalEvent wdt:P580 ?startTime . BIND(?finalEvent AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which films did Stanley Kubrick direct?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q106842 wdt:P57 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q106842 wdt:P57 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which films did Stanley Kubrick direct?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2001 is Stanley Kubrick", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"wd:Q2001 wdt:P57 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q2001 wdt:P57 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which films did Stanley Kubrick direct?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which films did Stanley Kubrick direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7961 is director\nkg:1127 is Stanley Kubrick", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:7961 kg:1127.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q2001. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how much is the population Iraq?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q809 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q809 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the population Iraq?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q796 is Iraq\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q796 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q796 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how much is the population Iraq?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “how much is the population Iraq?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9047 is Iraq\nkg:6595 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:9047 kg:6595 ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q796 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515.\",\n    \"  ?city wdt:P17 wd:Q16.\",\n    \"  ?city wdt:P1082 ?population.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P17 wd:Q16. ?city wdt:P1082 ?population. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q16 is Canada\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P31/wdt:P279* wd:Q515 .\",\n      \"?city wdt:P17 wd:Q16 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31/wdt:P279* wd:Q515 . ?city wdt:P17 wd:Q16 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "How many inhabitants does the largest city in Canada have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many inhabitants does the largest city in Canada have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2883 is country\nkg:0179 is Canada\nkg:5210 is instance of\nkg:9923 is subclass of\nkg:1418 is city\nkg:1232 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?country kg:5210 kg:2883.\",\n            \"?country kg:9923 kg:0179.\",\n            \"?city kg:5210 kg:1418.\",\n            \"?city kg:1232 ?population.\",\n            \"FILTER(?country = kg:0179)\",\n            \"BIND(MAX(?population) AS ?maxPopulation).\",\n            \"?city kg:1232 ?maxPopulation.\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?city WHERE { ?country wdt:P31 wdt:P17. ?country wdt:P279 wd:Q16. ?city wdt:P31 wd:Q515. ?city wdt:P1082 ?population. FILTER(?country = wd:Q16) BIND(MAX(?population) AS ?maxPopulation). ?city wdt:P1082 ?maxPopulation. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q10642 p:P39 ?statement.\",\n    \"  ?statement ps:P39 wd:Q857466.\",\n    \"  ?statement prov:wasDerivedFrom ?source.\",\n    \"  ?source pr:P39 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q10642 p:P39 ?statement. ?statement ps:P39 wd:Q857466. ?statement prov:wasDerivedFrom ?source. ?source pr:P39 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q30971 is French Polynesia\nwdt:P36 is capital\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n      \"wd:Q30971 wdt:P36 ?capital.\",\n      \"?capital wdt:P6 ?mayor.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q30971 wdt:P36 ?capital. ?capital wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of the capital of French Polynesia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of the capital of French Polynesia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6320 is French Polynesia\nkg:6865 is capital\nkg:4430 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"kg:6320 kg:6865 ?capital.\",\n            \"?capital kg:4430 ?mayor.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?mayor WHERE { wd:Q30971 wdt:P36 ?capital. ?capital wdt:P6 ?mayor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?movie wdt:P571 wd:Q20649.\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P57 wd:Q8442.\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P571 wd:Q20649. ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q8442. ?actor wdt:P106 wd:Q33999. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P57 is director\nwd:Q16297 is William Shatner\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P57 wd:Q16297.\",\n      \"?movie wdt:P161 ?actor.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q16297. ?movie wdt:P161 ?actor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all actors starring in movies directed by William Shatner.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in movies directed by William Shatner.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3780 is instance of\nkg:4610 is film\nkg:8975 is director\nkg:8436 is William Shatner\nkg:3866 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"?movie kg:3780 kg:4610 .\",\n            \"?movie kg:8975 kg:8436 .\",\n            \"?movie kg:3866 ?actor .\"\n        ]\n    }\n ", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P57 wd:Q16297 . ?movie wdt:P161 ?actor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How tall is Claudia Schiffer?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"  wd:Q109645 wdt:P2048 ?height.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?height WHERE { wd:Q109645 wdt:P2048 ?height. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How tall is Claudia Schiffer?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76717 is Claudia Schiffer\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"  wd:Q76717 wdt:P2048 ?height.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?height WHERE { wd:Q76717 wdt:P2048 ?height. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How tall is Claudia Schiffer?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How tall is Claudia Schiffer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9771 is Claudia Schiffer\nkg:7932 is height", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:9771 kg:7932 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q76717 wdt:P2048 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "how much is the population densty rank of germany?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?populationDensityRank WHERE {\",\n    \"  wd:Q183 wdt:P2046 ?populationDensityRank.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?populationDensityRank WHERE { wd:Q183 wdt:P2046 ?populationDensityRank. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the population densty rank of germany?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P1082 is population\nwdt:P2046 is area\nwd:Q183 is Germany\nwdt:P1082 is population\nwd:Q183 is Germany\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?populationDensityRank WHERE {\",\n    \"  wd:Q183 wdt:P1082 ?population .\",\n    \"  wd:Q183 wdt:P2046 ?area .\",\n    \"  BIND(?population / ?area AS ?populationDensity) .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?populationDensityRank WHERE { wd:Q183 wdt:P1082 ?population . wd:Q183 wdt:P2046 ?area . BIND(?population / ?area AS ?populationDensity) . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "how much is the population densty rank of germany?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “how much is the population densty rank of germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1872 is instance of\nkg:6284 is country\nkg:2685 is population\nkg:5831 is area\nkg:7906 is Germany\nkg:2685 is population\nkg:7906 is Germany\nkg:5831 is area", "response": "{\n  \"query\": [\n    \"SELECT ?populationDensityRank\",\n    \"WHERE {\",\n      \"?country kg:1872 kg:6284 .\",\n      \"?country kg:7906 kg:7906 .\",\n      \"?country kg:5831 ?area .\",\n      \"?country kg:2685 ?population .\",\n      \"BIND((?population / ?area) AS ?populationDensity)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?populationDensityRank WHERE { ?country wdt:P31 wd:Q6256 . ?country wd:Q183 wd:Q183 . ?country wdt:P2046 ?area . ?country wdt:P1082 ?population . BIND((?population / ?area) AS ?populationDensity) SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Italy?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P17 wd:Q38.\",\n    \"  ?mountain wdt:P1065 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P17 wd:Q38. ?mountain wdt:P1065 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Italy?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P17 is country\nwd:Q38 is Italy\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q8502 .\",\n      \"?mountain wdt:P17 wd:Q38 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P17 wd:Q38 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Italy?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Italy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0462 is instance of\nkg:4464 is mountain\nkg:5176 is country\nkg:5061 is Italy\nkg:4947 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?mountain\",\n        \"WHERE {\",\n            \"?mountain kg:0462 kg:4464 .\",\n            \"?mountain kg:5176 kg:5061 .\",\n            \"?mountain kg:4947 ?elevation .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMountain kg:0462 kg:4464 .\",\n                \"?otherMountain kg:5176 kg:5061 .\",\n                \"?otherMountain kg:4947 ?otherElevation .\",\n                \"FILTER (?elevation < ?otherElevation)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P17 wd:Q38 . ?mountain wdt:P2044 ?elevation . FILTER NOT EXISTS { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P17 wd:Q38 . ?otherMountain wdt:P2044 ?otherElevation . FILTER (?elevation < ?otherElevation) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "List all games by GMT.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"  ?game wdt:P31 wd:Q7890.\",\n    \"  ?game wdt:P264 wd:Q56061.\"\n    ]\n}", "normal_query": "SELECT ?game WHERE { ?game wdt:P31 wd:Q7890. ?game wdt:P264 wd:Q56061. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "List all games by GMT.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11410 is game\nwdt:P123 is publisher\nwd:Q928726 is GMT Games", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n      \"?game wdt:P31/wdt:P279* wd:Q11410.\",\n      \"?game wdt:P123 wd:Q928726.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?game WHERE { ?game wdt:P31/wdt:P279* wd:Q11410. ?game wdt:P123 wd:Q928726. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "List all games by GMT.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “List all games by GMT.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9566 is instance of\nkg:6944 is subclass of\nkg:8759 is game\nkg:9432 is publisher\nkg:2847 is GMT Games", "response": "{\n    \"query\": [\n        \"SELECT ?game\",\n        \"WHERE {\",\n            \"?game kg:8759 kg:8759 .\",\n            \"?game kg:9432 kg:2847 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?game WHERE { ?game wd:Q11410 wd:Q11410 . ?game wdt:P123 wd:Q928726 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the official language of Suriname?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q24937 p:P37 wd:Q10658.\",\n    \"  ?language wdt:P31 wd:Q34770.\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q24937 p:P37 wd:Q10658. ?language wdt:P31 wd:Q34770. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the official language of Suriname?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q730 is Suriname\nwdt:P37 is official language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"wd:Q730 wdt:P37 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q730 wdt:P37 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the official language of Suriname?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the official language of Suriname?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4116 is Suriname\nkg:0803 is official language", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/4116> <http://www.example.org/kg/0803> ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { <http://www.example.org/kg//4116> <http://www.example.org/kg//0803> ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city did Nikos Kazantzakis die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q132468 wdt:P20 wd:Q57495.\",\n    \"  wd:Q57495 wdt:P131 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q132468 wdt:P20 wd:Q57495. wd:Q57495 wdt:P131 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city did Nikos Kazantzakis die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214622 is Nikos Kazantzakis\nwdt:P20 is place of death", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q214622 wdt:P20 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q214622 wdt:P20 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which city did Nikos Kazantzakis die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which city did Nikos Kazantzakis die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2723 is Nikos Kazantzakis\nkg:5439 is place of death", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"kg:2723 kg:5439 ?city.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q214622 wdt:P20 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which country is the Limerick Lake?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1864237 p:P17 ?statement.\",\n    \"  ?statement ps:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1864237 p:P17 ?statement. ?statement ps:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country is the Limerick Lake?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6386177 is Limerick Lake\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q6386177 wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q6386177 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which country is the Limerick Lake?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which country is the Limerick Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7230 is Limerick Lake\nkg:3882 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:7230 kg:3882 ?country.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q6386177 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all members of Prodigy.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n    \"  wd:Q105964 wdt:P373 ?member.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?member WHERE { wd:Q105964 wdt:P373 ?member. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all members of Prodigy.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P463 is member of\nwd:Q7256860 is The Prodigy", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n      \"?member wdt:P463 wd:Q7256860.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?member WHERE { ?member wdt:P463 wd:Q7256860. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all members of Prodigy.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all members of Prodigy.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2552 is member of\nkg:5036 is The Prodigy", "response": "{\n    \"query\": [\n        \"SELECT ?member\",\n        \"WHERE {\",\n            \"?member kg:2552 kg:5036.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?member WHERE { ?member wdt:P463 wd:Q7256860. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which time zone is Rome?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"  wd:Q609 Q17633524 ?timeZone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timeZone WHERE { wd:Q609 Q17633524 ?timeZone. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which time zone is Rome?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q220 is Rome\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n      \"wd:Q220 wdt:P421 ?timeZone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timeZone WHERE { wd:Q220 wdt:P421 ?timeZone. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which time zone is Rome?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which time zone is Rome?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1360 is Rome\nkg:1359 is located in time zone", "response": "{\n    \"query\": [\n        \"SELECT ?timeZone WHERE {\",\n            \"<http://example.org/kg/1360> <http://example.org/kg/1359> ?timeZone.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?timeZone WHERE { <http://example.org/kg//1360> <http://example.org/kg//1359> ?timeZone. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  wd:Q126450 wdt:P179 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { wd:Q126450 wdt:P179 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q151114 is The Wall\nwdt:P658 is tracklist\nwdt:P162 is producer", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"wd:Q151114 wdt:P658 ?tracklist.\",\n      \"?tracklist wdt:P162 ?producer.\",\n      \"?producer wdt:P170 ?writer.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer WHERE { wd:Q151114 wdt:P658 ?tracklist. ?tracklist wdt:P162 ?producer. ?producer wdt:P170 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who are the writers of the Wall album of Pink Floyd?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who are the writers of the Wall album of Pink Floyd?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2920 is The Wall\nkg:8526 is tracklist\nkg:1210 is producer", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"kg:2920 kg:8526 ?tracklist.\",\n            \"?tracklist kg:1210 ?writer.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?writer WHERE { wd:Q151114 wdt:P658 ?tracklist. ?tracklist wdt:P162 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the mayor of Rotterdam?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q794 Q638021 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q794 Q638021 ?mayor. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the mayor of Rotterdam?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34370 is Rotterdam\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q34370 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q34370 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Rotterdam?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Rotterdam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9506 is Rotterdam\nkg:5120 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"kg:9506 kg:5120 ?mayor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q34370 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the largest city in Australia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q5119.\",\n    \"  ?city wdt:P17 wd:Q408.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q5119. ?city wdt:P17 wd:Q408. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest city in Australia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q515 is city\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P31/wdt:P279* wd:Q515 .\",\n      \"?city wdt:P17 wd:Q408 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31/wdt:P279* wd:Q515 . ?city wdt:P17 wd:Q408 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the largest city in Australia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the largest city in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5863 is instance of\nkg:8388 is subclass of\nkg:7831 is city\nkg:3186 is country\nkg:6561 is Australia\nkg:6373 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?city kg:5863 kg:7831 .\",\n            \"?city kg:8388 kg:3186 .\",\n            \"?country kg:5863 kg:6561 .\",\n            \"?city kg:6373 ?population .\",\n            \"FILTER(?country = kg:6561)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P279 wdt:P17 . ?country wdt:P31 wd:Q408 . ?city wdt:P1082 ?population . FILTER(?country = wd:Q408) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was married to president Chirac?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q5076 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q5076 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was married to president Chirac?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2105 is Jacques Chirac\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q2105 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2105 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was married to president Chirac?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was married to president Chirac?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9082 is Jacques Chirac\nkg:5189 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"kg:9082 kg:5189 ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2105 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What form of government is found in South Africa?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?government WHERE {\",\n    \"  wd:Q253 Q1087694 ?government.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?government WHERE { wd:Q253 Q1087694 ?government. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What form of government is found in South Africa?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q258 is South Africa\nwdt:P122 is basic form of government", "response": "{\n  \"query\": [\n    \"SELECT ?form WHERE {\",\n      \"wd:Q258 wdt:P122 ?form.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?form WHERE { wd:Q258 wdt:P122 ?form. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What form of government is found in South Africa?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What form of government is found in South Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is South Africa\nkg:3788 is basic form of government", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5595 kg:3788 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q258 wdt:P122 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How high is the Yokohama Marine Tower?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q8054.\",\n    \"  ?item rdfs:label \\\"Yokohama Marine Tower\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q8054. ?item rdfs:label \"Yokohama Marine Tower\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How high is the Yokohama Marine Tower?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1207989 is Yokohama Marine Tower\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"  wd:Q1207989 wdt:P2048 ?height.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?height WHERE { wd:Q1207989 wdt:P2048 ?height. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How high is the Yokohama Marine Tower?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How high is the Yokohama Marine Tower?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8468 is Yokohama Marine Tower\nkg:6687 is height", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8468 kg:6687 ?height.\",\n            \"?resource kg:6687 ?height.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { wd:Q1207989 wdt:P2048 ?height. ?resource wdt:P2048 ?height. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the tallest basketball player?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P108 wd:Q345762.\",\n    \"  ?player wdt:P2049 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?height)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P108 wd:Q345762. ?player wdt:P2049 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?height) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the tallest basketball player?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q3665646.\",\n      \"?player wdt:P2048 ?height.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646. ?player wdt:P2048 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the tallest basketball player?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the tallest basketball player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8059 is occupation\nkg:4937 is basketball player\nkg:1141 is height", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:8059 kg:4937 .\",\n            \"?player kg:1141 ?height .\",\n            \"FILTER NOT EXISTS { ?otherPlayer kg:8059 kg:4937 . ?otherPlayer kg:1141 ?otherHeight . FILTER (?otherHeight > ?height) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646 . ?player wdt:P2048 ?height . FILTER NOT EXISTS { ?otherPlayer wdt:P106 wd:Q3665646 . ?otherPlayer wdt:P2048 ?otherHeight . FILTER (?otherHeight > ?height) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many languages are spoken in Turkmenistan?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q79281 p:P364 ?statement.\",\n    \"  ?statement ps:P364 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q79281 p:P364 ?statement. ?statement ps:P364 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many languages are spoken in Turkmenistan?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q874 is Turkmenistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n      \"wd:Q874 wdt:P2936 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q874 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many languages are spoken in Turkmenistan?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Turkmenistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8750 is Turkmenistan\nkg:5009 is language used", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"kg:8750 kg:5009 ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q874 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Che Guevara have children?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q13425 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q13425 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Che Guevara have children?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5809 is Che Guevara\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n      \"wd:Q5809 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q5809 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Che Guevara have children?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Che Guevara have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4932 is Che Guevara\nkg:0068 is child", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"kg:4932 kg:0068 ?child.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q5809 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q108642 wdt:P39 ?occupation.\",\n    \"  ?occupation wdt:P279* wd:Q574108.\",\n    \"  ?film wdt:P175 wd:Q108642.\",\n    \"  ?film wdt:P1476 wd:Q3396.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { wd:Q108642 wdt:P39 ?occupation. ?occupation wdt:P279* wd:Q574108. ?film wdt:P175 wd:Q108642. ?film wdt:P1476 wd:Q3396. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q276186 is Aki Kaurismäki\nwdt:P166 is award received\nwd:Q844804 is Cannes Film Festival Grand Prix", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n      \"wd:Q276186 wdt:P166 ?award.\",\n      \"?award wdt:P31 wd:Q844804.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q276186 wdt:P166 ?award. ?award wdt:P31 wd:Q844804. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Kaurismäki ever win the Grand Prix at Cannes?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Kaurismäki ever win the Grand Prix at Cannes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8458 is Aki Kaurismäki\nkg:1315 is award received\nkg:1066 is Cannes Film Festival Grand Prix", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8458 kg:1315 ?award.\",\n            \"?award kg:1066 ?resource.\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { wd:Q276186 wdt:P166 ?award. ?award wd:Q844804 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "To which party does the mayor of Paris belong?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  wd:Q170 wdt:P39 ?mayor.\",\n    \"  ?mayor wdt:P102 ?party.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { wd:Q170 wdt:P39 ?mayor. ?mayor wdt:P102 ?party. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which party does the mayor of Paris belong?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q90 is Paris\nwdt:P6 is head of government\nwdt:P102 is member of political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"wd:Q90 wdt:P6 ?mayor.\",\n      \"?mayor wdt:P102 ?party.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { wd:Q90 wdt:P6 ?mayor. ?mayor wdt:P102 ?party. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "To which party does the mayor of Paris belong?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “To which party does the mayor of Paris belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2333 is Paris\nkg:5416 is head of government\nkg:5588 is member of political party", "response": "{\n    \"query\": [\n        \"SELECT ?party\",\n        \"WHERE {\",\n            \"?mayor kg:5416 kg:2333 .\",\n            \"?mayor kg:5588 ?party .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { ?mayor wdt:P6 wd:Q90 . ?mayor wdt:P102 ?party . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?driver WHERE {\",\n        \"  ?driver wdt:P31 wd:Q5741062.\",\n        \"  ?driver wdt:P106 wd:Q893477.\",\n        \"  ?driver wdt:P106 wd:Q1086494.\",\n        \"  ?driver wdt:P1545 ?numberOfRaces.\",\n        \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n        \"}\",\n        \"ORDER BY DESC(?numberOfRaces)\",\n        \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?driver WHERE { ?driver wdt:P31 wd:Q5741062. ?driver wdt:P106 wd:Q893477. ?driver wdt:P106 wd:Q1086494. ?driver wdt:P1545 ?numberOfRaces. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?numberOfRaces) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q10841764 is Formula One driver\nwdt:P1350 is number of matches played/races/starts", "response": "{\n  \"query\": [\n    \"SELECT ?driver WHERE {\",\n      \"?driver wdt:P106 wd:Q10841764.\",\n      \"?driver wdt:P1350 ?numberOfRaces.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?numberOfRaces)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?driver WHERE { ?driver wdt:P106 wd:Q10841764. ?driver wdt:P1350 ?numberOfRaces. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?numberOfRaces) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the Formula 1 race driver with the most races?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the Formula 1 race driver with the most races?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6894 is occupation\nkg:7521 is Formula One driver\nkg:6339 is number of matches played/races/starts", "response": "{\n    \"query\": [\n        \"SELECT ?driver\",\n        \"WHERE {\",\n            \"?driver kg:6894 kg:7521 .\",\n            \"?driver kg:6339 ?numberOfRaces .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherDriver kg:6894 kg:7521 .\",\n                \"?otherDriver kg:6339 ?otherNumberOfRaces .\",\n                \"FILTER (?otherNumberOfRaces > ?numberOfRaces)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?driver WHERE { ?driver wdt:P106 wd:Q10841764 . ?driver wdt:P1350 ?numberOfRaces . FILTER NOT EXISTS { ?otherDriver wdt:P106 wd:Q10841764 . ?otherDriver wdt:P1350 ?otherNumberOfRaces . FILTER (?otherNumberOfRaces > ?numberOfRaces) } } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What country is Sitecore from?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1234567 wdt:P495 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1234567 wdt:P495 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What country is Sitecore from?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2663195 is Sitecore\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q2663195 wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q2663195 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What country is Sitecore from?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What country is Sitecore from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9915 is Sitecore\nkg:9456 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:9915 kg:isFrom ?country.\",\n            \"?country a kg:Country.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q2663195 kg:isFrom ?country. ?country a kg:Country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the birth place of Frank Sinatra.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n    \"  wd:Q21479 wdt:P19 ?birthPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthPlace WHERE { wd:Q21479 wdt:P19 ?birthPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the birth place of Frank Sinatra.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q40912 is Frank Sinatra\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?birthPlace WHERE {\",\n      \"wd:Q40912 wdt:P19 ?birthPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthPlace WHERE { wd:Q40912 wdt:P19 ?birthPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the birth place of Frank Sinatra.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the birth place of Frank Sinatra.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4574 is Frank Sinatra\nkg:3148 is place of birth", "response": "{\n    \"query\": [\n        \"SELECT ?birthPlace\",\n        \"WHERE {\",\n            \"<http://example.org/kg/4574> <http://example.org/kg/3148> ?birthPlace.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?birthPlace WHERE { <http://example.org/kg//4574> <http://example.org/kg//3148> ?birthPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1062879 wdt:P356 ?film.\",\n    \"  ?film wdt:P1444 wd:Q1062879.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { wd:Q1062879 wdt:P356 ?film. ?film wdt:P1444 wd:Q1062879. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1481540 is Velvet Goldmine\nwdt:P161 is cast member\nwd:Q45772 is Christian Bale", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P161 wd:Q45772.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P161 wd:Q45772. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Christian Bale starring in Velvet Goldmine?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Christian Bale starring in Velvet Goldmine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1837 is Velvet Goldmine\nkg:2378 is cast member\nkg:2302 is Christian Bale", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:1837 kg:2378 ?resource.\",\n            \"?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:2302.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1481540 wdt:P161 ?resource. ?resource <http://www.w3.org/1999/02//22-rdf-syntax-ns> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the son of Sonny and Cher?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?son WHERE {\",\n    \"  wd:Q214697 wdt:P35 wd:Q2084.\",\n    \"  wd:Q214697 wdt:P40 ?son.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?son WHERE { wd:Q214697 wdt:P35 wd:Q2084. wd:Q214697 wdt:P40 ?son. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the son of Sonny and Cher?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P22 is father\nwd:Q179150 is Sonny Bono\nwdt:P25 is mother\nwd:Q12003 is Cher", "response": "{\n  \"query\": [\n    \"SELECT ?son WHERE {\",\n      \"?son wdt:P22 wd:Q179150.\",\n      \"?son wdt:P25 wd:Q12003.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?son WHERE { ?son wdt:P22 wd:Q179150. ?son wdt:P25 wd:Q12003. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the son of Sonny and Cher?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the son of Sonny and Cher?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8319 is father\nkg:6328 is Sonny Bono\nkg:8679 is mother\nkg:7963 is Cher", "response": "{\n    \"query\": [\n        \"SELECT ?son\",\n        \"WHERE {\",\n            \"?son kg:8319 kg:6328 .\",\n            \"?son kg:8679 kg:7963 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?son WHERE { ?son wdt:P22 wd:Q179150 . ?son wdt:P25 wd:Q12003 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the capital of Cameroon?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q1029 Q3624578 ?capital.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q1029 Q3624578 ?capital. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the capital of Cameroon?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1009 is Cameroon\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q1009 wdt:P36 ?capital.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q1009 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the capital of Cameroon?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the capital of Cameroon?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9619 is Cameroon\nkg:9141 is capital", "response": "{\n    \"query\": [\n        \"SELECT ?capital\",\n        \"WHERE {\",\n            \"kg:9619 kg:9141 ?capital.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q1009 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Was Natalie Portman born in the United States?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P2047 ?birthPlace.\",\n    \"  ?birthPlace wdt:P17 wd:Q30.\",\n    \"  ?person rdfs:label \\\"Natalie Portman\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P2047 ?birthPlace. ?birthPlace wdt:P17 wd:Q30. ?person rdfs:label \"Natalie Portman\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Natalie Portman born in the United States?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37876 is Natalie Portman\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q37876 wdt:P19 ?place.\",\n      \"?place wdt:P17 wd:Q30.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q37876 wdt:P19 ?place. ?place wdt:P17 wd:Q30. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Natalie Portman born in the United States?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Natalie Portman born in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2400 is Natalie Portman\nkg:5100 is place of birth\nkg:6353 is country\nkg:1050 is United States of America", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:2400 kg:5100 ?birthplace.\",\n            \"?birthplace kg:6353 ?country.\",\n            \"FILTER(?country = kg:1050)\",\n            \"BIND(kg:2400 AS ?resource)\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { wd:Q37876 wdt:P19 ?birthplace. ?birthplace wdt:P17 ?country. FILTER(?country = wd:Q30) BIND(wd:Q37876 AS ?resource) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the oldest child of Meryl Streep?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q106953 wdt:P40 ?child.\",\n    \"  ?child wdt:P31 wd:Q5.\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q106953 wdt:P40 ?child. ?child wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the oldest child of Meryl Streep?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q873 is Meryl Streep\nwdt:P40 is child\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q873 wdt:P40 ?child.\",\n    \"  ?child wdt:P569 ?dob.\",\n    \"}\",\n    \"ORDER BY DESC(?dob)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q873 wdt:P40 ?child. ?child wdt:P569 ?dob. } ORDER BY DESC(?dob) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the oldest child of Meryl Streep?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the oldest child of Meryl Streep?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9386 is Meryl Streep\nkg:7223 is child\nkg:3308 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"kg:9386 kg:7223 ?child .\",\n            \"?child kg:3308 ?dob .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherChild kg:3308 ?otherDob .\",\n                \"?otherChild kg:7223 kg:9386 .\",\n                \"FILTER (?otherDob < ?dob)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q873 wdt:P40 ?child . ?child wdt:P569 ?dob . FILTER NOT EXISTS { ?otherChild wdt:P569 ?otherDob . ?otherChild wdt:P40 wd:Q873 . FILTER (?otherDob < ?dob) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which television shows were created by Walt Disney?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n    \"  ?show wdt:P170 wd:Q28643.\",\n    \"  ?show wdt:P31 wd:Q59164.\"\n    ]\n}", "normal_query": "SELECT ?show WHERE { ?show wdt:P170 wd:Q28643. ?show wdt:P31 wd:Q59164. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which television shows were created by Walt Disney?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7725310 is series of creative works\nwdt:P170 is creator\nwd:Q8704 is Walt Disney", "response": "{\n  \"query\": [\n    \"SELECT ?show WHERE {\",\n      \"?show wdt:P31/wdt:P279* wd:Q7725310 .\",\n      \"?show wdt:P170 wd:Q8704 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?show WHERE { ?show wdt:P31/wdt:P279* wd:Q7725310 . ?show wdt:P170 wd:Q8704 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which television shows were created by Walt Disney?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which television shows were created by Walt Disney?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is instance of\nkg:2217 is subclass of\nkg:4357 is series of creative works\nkg:2797 is creator\nkg:6368 is Walt Disney", "response": "{\n    \"query\": [\n        \"SELECT ?show\",\n        \"WHERE {\",\n            \"?show kg:4927 kg:4357 .\",\n            \"?show kg:2797 kg:6368 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?show WHERE { ?show wdt:P31 wd:Q7725310 . ?show wdt:P170 wd:Q8704 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was U.S. president Jackson involved in a war?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q23671 wdt:P35B ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q23671 wdt:P35B ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was U.S. president Jackson involved in a war?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11817 is Andrew Jackson\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n      \"wd:Q11817 wdt:P607 ?conflict.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?conflict WHERE { wd:Q11817 wdt:P607 ?conflict. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was U.S. president Jackson involved in a war?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was U.S. president Jackson involved in a war?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1132 is Andrew Jackson\nkg:6744 is conflict", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:1132 kg:6744 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q11817 wdt:P607 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the Titanic completed?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q486971.\",\n    \"  ?item wdt:P571 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q486971. ?item wdt:P571 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the Titanic completed?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25173 is Titanic\nwdt:P729 is service entry", "response": "{\n  \"query\": [\n    \"SELECT ?completionDate WHERE {\",\n    \"  wd:Q25173 wdt:P729 ?completionDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?completionDate WHERE { wd:Q25173 wdt:P729 ?completionDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the Titanic completed?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was the Titanic completed?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2084 is Titanic\nkg:4238 is service entry", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:2084 kg:4238 ?resource .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q25173 wdt:P729 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Tesla win a nobel prize in physics?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?prize WHERE {\",\n    \"  wd:Q10864 wdt:P31 wd:Q25967.\",\n    \"  wd:Q10864 wdt:P166 ?prize.\",\n    \"  ?prize wdt:P1346 wd:Q10864.\"\n    ]\n}", "normal_query": "SELECT ?prize WHERE { wd:Q10864 wdt:P31 wd:Q25967. wd:Q10864 wdt:P166 ?prize. ?prize wdt:P1346 wd:Q10864. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Tesla win a nobel prize in physics?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9036 is Nikola Tesla\nwdt:P166 is award received\nwd:Q38104 is Nobel Prize in Physics", "response": "{\n  \"query\": [\n    \"SELECT ?prize WHERE {\",\n      \"wd:Q9036 wdt:P166 ?prize.\",\n      \"?prize wdt:P31 wd:Q38104.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?prize WHERE { wd:Q9036 wdt:P166 ?prize. ?prize wdt:P31 wd:Q38104. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Tesla win a nobel prize in physics?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Tesla win a nobel prize in physics?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9199 is Nikola Tesla\nkg:2395 is award received\nkg:3285 is Nobel Prize in Physics", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:9199 kg:2395 ?resource .\",\n            \"?resource rdf:type kg:3285 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9036 wdt:P166 ?resource . ?resource rdf:type wd:Q38104 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many states are in Mexico?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  wd:Q152684 Q179304 ?state.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { wd:Q152684 Q179304 ?state. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many states are in Mexico?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q15149663 is state of Mexico", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q15149663.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q15149663. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many states are in Mexico?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many states are in Mexico?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1188 is instance of\nkg:8553 is state of Mexico", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"?state kg:8553 kg:1188.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wd:Q15149663 wdt:P31. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How much did the Lego Movie cost?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q14926078 p:P356 ?statement.\",\n    \"  ?statement ps:P356 ?cost.\",\n    \"  ?statement prov:wasDerivedFrom ?source.\",\n    \"  ?source wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P31 wd:Q10879.\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q14926078 p:P356 ?statement. ?statement ps:P356 ?cost. ?statement prov:wasDerivedFrom ?source. ?source wdt:P31 wd:Q11424. ?movie wdt:P31 wd:Q10879. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How much did the Lego Movie cost?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2608065 is The Lego Movie\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE {\",\n      \"wd:Q2608065 wdt:P2130 ?cost.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cost WHERE { wd:Q2608065 wdt:P2130 ?cost. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How much did the Lego Movie cost?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How much did the Lego Movie cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7174 is The Lego Movie\nkg:4576 is cost", "response": "{\n    \"query\": [\n        \"SELECT ?cost WHERE {\",\n            \"kg:7174 kg:4576 ?cost.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?cost WHERE { wd:Q2608065 wdt:P2130 ?cost. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who composed the music for Harold and Maude?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?musicComposer WHERE {\",\n    \"  wd:Q154968 wdt:P800 ?musicComposer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?musicComposer WHERE { wd:Q154968 wdt:P800 ?musicComposer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who composed the music for Harold and Maude?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q368577 is Harold and Maude\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q368577 wdt:P86 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q368577 wdt:P86 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who composed the music for Harold and Maude?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who composed the music for Harold and Maude?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5213 is Harold and Maude\nkg:9296 is composer", "response": "{\n    \"query\": [\n        \"SELECT ?composer\",\n        \"WHERE {\",\n            \"kg:5213 kg:9296 ?composer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q368577 wdt:P86 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which city has the least inhabitants?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?city wdt:P31 wd:Q515.\",\n    \"  ?city wdt:P1082 ?population.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY ASC(?population)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P1082 ?population. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY ASC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which city has the least inhabitants?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q515 is city\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?city wdt:P31 wd:Q515.\",\n      \"?city wdt:P1082 ?population.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n      \"ORDER BY ASC(?population)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515. ?city wdt:P1082 ?population. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY ASC(?population) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which city has the least inhabitants?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which city has the least inhabitants?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3143 is instance of\nkg:9876 is city\nkg:4366 is population", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?city kg:3143 kg:9876 .\",\n            \"?city kg:4366 ?population .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherCity kg:3143 kg:9876 .\",\n                \"?otherCity kg:4366 ?otherPopulation .\",\n                \"FILTER (?otherPopulation < ?population)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P1082 ?population . FILTER NOT EXISTS { ?otherCity wdt:P31 wd:Q515 . ?otherCity wdt:P1082 ?otherPopulation . FILTER (?otherPopulation < ?population) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Syngman Rhee buried?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  wd:Q1234567 wdt:P31 wd:Q5.\",\n    \"  wd:Q1234567 wdt:P108 wd:Q1987654.\",\n    \"  ?item wdt:P108 wd:Q1987654.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?item WHERE { wd:Q1234567 wdt:P31 wd:Q5. wd:Q1234567 wdt:P108 wd:Q1987654. ?item wdt:P108 wd:Q1987654. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Where is Syngman Rhee buried?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q171684 is Syngman Rhee\nwdt:P119 is place of burial", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q171684 wdt:P119 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q171684 wdt:P119 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where is Syngman Rhee buried?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where is Syngman Rhee buried?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3345 is Syngman Rhee\nkg:9861 is place of burial", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:3345 kg:9861 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q171684 wdt:P119 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Does Neymar play for Real Madrid?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?team WHERE {\",\n    \"  wd:Q103762 Neymar.\",\n    \"  wd:Q103762 wdt:P54 wd:Q103762.\",\n    \"  wd:Q103762 wdt:P108 ?team.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?team WHERE { wd:Q103762 Neymar. wd:Q103762 wdt:P54 wd:Q103762. wd:Q103762 wdt:P108 ?team. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Does Neymar play for Real Madrid?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q142794 is Neymar\nwdt:P54 is member of sports team\nwd:Q8682 is Real Madrid CF", "response": "{\n  \"query\": [\n    \"SELECT ?team WHERE {\",\n      \"wd:Q142794 wdt:P54 ?team.\",\n      \"FILTER(?team = wd:Q8682)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?team WHERE { wd:Q142794 wdt:P54 ?team. FILTER(?team = wd:Q8682) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does Neymar play for Real Madrid?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Does Neymar play for Real Madrid?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8232 is Neymar\nkg:5537 is member of sports team\nkg:7777 is Real Madrid CF", "response": "{\n    \"query\": [\n        \"SELECT ?team\",\n        \"WHERE {\",\n            \"kg:8232 kg:5537 ?team.\",\n            \"FILTER(?team = kg:7777)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?team WHERE { wd:Q142794 wdt:P54 ?team. FILTER(?team = wd:Q8682) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bookAuthor WHERE {\",\n    \"  wd:Q156284 wdt:P50 ?bookAuthor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bookAuthor WHERE { wd:Q156284 wdt:P50 ?bookAuthor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1163227 is The Pillars of the Earth\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q1163227 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote the book The Pillars of the Earth?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote the book The Pillars of the Earth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7222 is The Pillars of the Earth\nkg:7844 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:7222 kg:7844 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1163227 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q1053269 wdt:P40 ?child.\",\n    \"  VALUES ?child { wd:Q1053269 wd:Q1053270 }\",\n    \"  ?child wdt:P40 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q1053269 wdt:P40 ?child. VALUES ?child { wd:Q1053269 wd:Q1053270 } ?child wdt:P40 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P22 is father\nwd:Q152316 is Prince Harry, Duke of Sussex\nwdt:P25 is mother\nwd:Q36812 is William, Prince of Wales\nwdt:P22 is father\nwd:Q36812 is William, Prince of Wales\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?father ?mother WHERE {\",\n      \"wd:Q152316 wdt:P22 ?father.\",\n      \"wd:Q152316 wdt:P25 ?mother.\",\n      \"wd:Q36812 wdt:P22 ?father.\",\n      \"wd:Q36812 wdt:P25 ?mother.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father ?mother WHERE { wd:Q152316 wdt:P22 ?father. wd:Q152316 wdt:P25 ?mother. wd:Q36812 wdt:P22 ?father. wd:Q36812 wdt:P25 ?mother. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Do Prince Harry and Prince William have the same parents?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Do Prince Harry and Prince William have the same parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0241 is Prince Harry, Duke of Sussex\nkg:9891 is father\nkg:0241 is Prince Harry, Duke of Sussex\nkg:0917 is mother\nkg:3209 is William, Prince of Wales\nkg:9891 is father\nkg:3209 is William, Prince of Wales\nkg:0917 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?father ?mother WHERE {\",\n      \"?harry kg:9891 ?father .\",\n      \"?harry kg:0917 ?mother .\",\n      \"?william kg:9891 ?father .\",\n      \"?william kg:0917 ?mother .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father ?mother WHERE { ?harry wdt:P22 ?father . ?harry wdt:P25 ?mother . ?william wdt:P22 ?father . ?william wdt:P25 ?mother . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?supervisor WHERE {\",\n    \"  wd:Q937 P140 ?supervisor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?supervisor WHERE { wd:Q937 P140 ?supervisor. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q937 is Albert Einstein\nwdt:P184 is doctoral advisor", "response": "{\n  \"query\": [\n    \"SELECT ?doctoralSupervisor WHERE {\",\n    \"  wd:Q937 wdt:P184 ?doctoralSupervisor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?doctoralSupervisor WHERE { wd:Q937 wdt:P184 ?doctoralSupervisor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the doctoral supervisor of Albert Einstein?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the doctoral supervisor of Albert Einstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3951 is Albert Einstein\nkg:5112 is doctoral advisor", "response": "{\n    \"query\": [\n        \"SELECT ?doctoralSupervisor\",\n        \"WHERE {\",\n            \"<http://example.org/kg/3951> <http://example.org/kg/5112> ?doctoralSupervisor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?doctoralSupervisor WHERE { <http://example.org/kg//3951> <http://example.org/kg//5112> ?doctoralSupervisor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE {\",\n    \"  wd:Q156472 wdt:P1119 ?episodeCountBreakingBad.\",\n    \"  wd:Q38024 wdt:P1119 ?episodeCountGameOfThrones.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE { wd:Q156472 wdt:P1119 ?episodeCountBreakingBad. wd:Q38024 wdt:P1119 ?episodeCountGameOfThrones. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Breaking Bad\nwdt:P1113 is number of episodes\nwd:Q23572 is Game of Thrones\nwdt:P1113 is number of episodes", "response": "{\n  \"query\": [\n    \"SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE {\",\n      \"wd:Q1079 wdt:P1113 ?episodeCountBreakingBad.\",\n      \"wd:Q23572 wdt:P1113 ?episodeCountGameOfThrones.\"\n    ,\n    \"FILTER(?episodeCountBreakingBad > ?episodeCountGameOfThrones)\"\n  ]\n}", "normal_query": "SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE { wd:Q1079 wdt:P1113 ?episodeCountBreakingBad. wd:Q23572 wdt:P1113 ?episodeCountGameOfThrones. FILTER(?episodeCountBreakingBad > ?episodeCountGameOfThrones) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Does Breaking Bad have more episodes than Game of Thrones?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Does Breaking Bad have more episodes than Game of Thrones?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7410 is Breaking Bad\nkg:4526 is number of episodes\nkg:6491 is Game of Thrones\nkg:4526 is number of episodes", "response": "{\n    \"query\": [\n        \"SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE {\",\n            \"?breakingBad kg:7410 ?episodeCountBreakingBad .\",\n            \"?gameOfThrones kg:6491 ?episodeCountGameOfThrones .\",\n            \"FILTER(?episodeCountBreakingBad > ?episodeCountGameOfThrones)\"\n        ]\n    }\n   ", "normal_query": "SELECT ?episodeCountBreakingBad ?episodeCountGameOfThrones WHERE { ?breakingBad wd:Q1079 ?episodeCountBreakingBad . ?gameOfThrones wd:Q23572 ?episodeCountGameOfThrones . FILTER(?episodeCountBreakingBad > ?episodeCountGameOfThrones) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was Vincent van Gogh inspired by?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?inspiration WHERE {\",\n    \"  wd:Q5576 wdt:P1340 ?inspiration.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?inspiration WHERE { wd:Q5576 wdt:P1340 ?inspiration. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was Vincent van Gogh inspired by?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5582 is Vincent van Gogh\nwdt:P737 is influenced by", "response": "{\n  \"query\": [\n    \"SELECT ?influencer WHERE {\",\n    \"  wd:Q5582 wdt:P737 ?influencer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?influencer WHERE { wd:Q5582 wdt:P737 ?influencer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was Vincent van Gogh inspired by?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was Vincent van Gogh inspired by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4487 is Vincent van Gogh\nkg:9725 is influenced by", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/4487> <http://www.example.org/kg/9725> ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://www.example.org/kg//4487> <http://www.example.org/kg//9725> ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"  wd:Q10243 wdt:P1795 ?building .\",\n    \"  ?building wdt:P1795 ?floors .\",\n    \"  FILTER(?floors > (SELECT MAX(?otherFloors) WHERE {\",\n    \"    ?otherBuilding wdt:P1795 ?otherFloors .\",\n    \"    FILTER(?otherBuilding != wd:Q10243)\",\n    \"  }))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?building WHERE { wd:Q10243 wdt:P1795 ?building . ?building wdt:P1795 ?floors . FILTER(?floors > (SELECT MAX(?otherFloors) WHERE { ?otherBuilding wdt:P1795 ?otherFloors . FILTER(?otherBuilding != wd:Q10243) })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12495 is Burj Khalifa\nwdt:P1101 is floors above ground\nwdt:P1101 is floors above ground", "response": "{\n  \"query\": [\n    \"SELECT ?building WHERE {\",\n    \"  wd:Q12495 wdt:P1101 ?burjFloors.\",\n    \"  ?building wdt:P1101 ?floors.\",\n    \"  FILTER (?floors > ?burjFloors).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?building WHERE { wd:Q12495 wdt:P1101 ?burjFloors. ?building wdt:P1101 ?floors. FILTER (?floors > ?burjFloors). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which building after the Burj Khalifa has the most floors?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which building after the Burj Khalifa has the most floors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1982 is Burj Khalifa\nkg:1365 is floors above ground\nkg:1365 is floors above ground", "response": "{\n    \"query\": [\n        \"SELECT ?building WHERE {\",\n        \"?building kg:1365 ?floors.\",\n        \"FILTER (?floors > (SELECT ?floors2 WHERE { kg:1982 kg:1365 ?floors2 }))\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?building WHERE { ?building wdt:P1101 ?floors. FILTER (?floors > (SELECT ?floors2 WHERE { wd:Q12495 wdt:P1101 ?floors2 })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How much did Pulp Fiction cost?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q146970 wdt:P2835 ?cost.\",\n    \"  wd:Q146970 wdt:P31 wd:Q11424.\",\n    \"  wd:Q146970 rdfs:label ?film\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q146970 wdt:P2835 ?cost. wd:Q146970 wdt:P31 wd:Q11424. wd:Q146970 rdfs:label ?film } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How much did Pulp Fiction cost?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q104123 is Pulp Fiction\nwdt:P2130 is cost", "response": "{\n  \"query\": [\n    \"SELECT ?cost WHERE {\",\n      \"wd:Q104123 wdt:P2130 ?cost.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cost WHERE { wd:Q104123 wdt:P2130 ?cost. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How much did Pulp Fiction cost?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How much did Pulp Fiction cost?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8346 is Pulp Fiction\nkg:1348 is cost", "response": "{\n    \"query\": [\n        \"SELECT ?cost\",\n        \"WHERE {\",\n            \"kg:8346 kg:1348 ?cost.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?cost WHERE { wd:Q104123 wdt:P2130 ?cost. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is proinsulin a protein?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q8054.\",\n    \"  ?item rdfs:label \\\"proinsulin\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q8054. ?item rdfs:label \"proinsulin\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is proinsulin a protein?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q426173 is proinsulin\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8054 is protein", "response": "{\n  \"query\": [\n    \"SELECT ?protein WHERE {\",\n      \"wd:Q426173 wdt:P31/wdt:P279* ?protein.\",\n      \"FILTER(?protein = wd:Q8054)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?protein WHERE { wd:Q426173 wdt:P31/wdt:P279* ?protein. FILTER(?protein = wd:Q8054) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is proinsulin a protein?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is proinsulin a protein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0193 is proinsulin\nkg:6381 is instance of\nkg:3035 is subclass of\nkg:2583 is protein", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:0193 kg:6381 ?resource .\",\n            \"?resource kg:3035 kg:2583 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q426173 wdt:P31 ?resource . ?resource wdt:P279 wd:Q8054 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Do Urdu and Persian have a common root?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  ?language wdt:P31 wd:Q8076;\",\n    \"          wdt:P279* wd:Q45000.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { ?language wdt:P31 wd:Q8076; wdt:P279* wd:Q45000. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Do Urdu and Persian have a common root?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1617 is Urdu\nwdt:P279 is subclass of\nwd:Q9168 is Persian\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?root WHERE {\",\n      \"?root wdt:P279* wd:Q1617.\",\n      \"?root wdt:P279* wd:Q9168.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?root WHERE { ?root wdt:P279* wd:Q1617. ?root wdt:P279* wd:Q9168. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Do Urdu and Persian have a common root?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Do Urdu and Persian have a common root?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9687 is Urdu\nkg:9521 is subclass of\nkg:7561 is Persian\nkg:9521 is subclass of", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:9521 kg:9687 .\",\n            \"?resource kg:9521 kg:7561 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P279 wd:Q1617 . ?resource wdt:P279 wd:Q9168 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q106742 wdt:P31 wd:Q589044.\",\n    \"  wd:Q106742 wdt:P170 ?director.\",\n    \"  ?director wdt:P279* wd:Q106742.\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P57 wd:Q106742.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q106742 wdt:P31 wd:Q589044. wd:Q106742 wdt:P170 ?director. ?director wdt:P279* wd:Q106742. ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q106742. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P162 is producer\nwd:Q193668 is Benicio del Toro\nwdt:P495 is country of origin\nwd:Q29 is Spain\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P162 wd:Q193668.\",\n      \"?film wdt:P495 wd:Q29.\",\n      \"?film wdt:P161 ?actor.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P162 wd:Q193668. ?film wdt:P495 wd:Q29. ?film wdt:P161 ?actor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is starring in Spanish movies produced by Benicio del Toro?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is starring in Spanish movies produced by Benicio del Toro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5537 is instance of\nkg:1197 is film\nkg:3789 is producer\nkg:7757 is Benicio del Toro\nkg:8501 is country of origin\nkg:8199 is Spain\nkg:0642 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?movie kg:5537 kg:1197 .\",\n      \"?movie kg:3789 kg:7757 .\",\n      \"?movie kg:8501 kg:8199 .\",\n      \"?movie kg:0642 ?actor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P162 wd:Q193668 . ?movie wdt:P495 wd:Q29 . ?movie wdt:P161 ?actor . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?lake WHERE {\",\n    \"  wd:Q1246 Q1830597 ?area.\",\n    \"  wd:Q1246 P31 wd:Q23397.\",\n    \"  wd:Q1246 P17 wd:Q155.\",\n    \"  wd:Q1246 P1082 ?area.\",\n    \"  wd:Q1246 P17 wd:Q155.\",\n    \"  wd:Q3964 Q1830597 ?area2.\",\n    \"  FILTER(?area > ?area2)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?lake WHERE { wd:Q1246 Q1830597 ?area. wd:Q1246 P31 wd:Q23397. wd:Q1246 P17 wd:Q155. wd:Q1246 P1082 ?area. wd:Q1246 P17 wd:Q155. wd:Q3964 Q1830597 ?area2. FILTER(?area > ?area2) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5513 is Lake Baikal\nwdt:P2046 is area\nwd:Q5525 is Great Bear Lake\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?areaBaikal ?areaGreatBear WHERE {\",\n      \"wd:Q5513 wdt:P2046 ?areaBaikal.\",\n      \"wd:Q5525 wdt:P2046 ?areaGreatBear.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?areaBaikal ?areaGreatBear WHERE { wd:Q5513 wdt:P2046 ?areaBaikal. wd:Q5525 wdt:P2046 ?areaGreatBear. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Lake Baikal bigger than the Great Bear Lake?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Lake Baikal bigger than the Great Bear Lake?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4738 is Lake Baikal\nkg:3598 is area\nkg:5245 is Great Bear Lake\nkg:3598 is area", "response": "{\n    \"query\": [\n        \"SELECT ?lake WHERE {\",\n            \"?lake kg:3598 ?area .\",\n            \"FILTER (?lake = kg:4738 || ?lake = kg:5245)\",\n            \"}\"\n    ]\n}", "normal_query": "SELECT ?lake WHERE { ?lake wdt:P2046 ?area . FILTER (?lake = wd:Q5513 || ?lake = wd:Q5525) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all books in Asimov's Foundation series.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  ?book wdt:P31 wd:Q571.\",\n    \"  ?book wdt:P179 wd:Q20648.\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { ?book wdt:P31 wd:Q571. ?book wdt:P179 wd:Q20648. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all books in Asimov's Foundation series.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1564644 is Foundation series\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  wd:Q1564644 wdt:P527 ?book.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q1564644 wdt:P527 ?book. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me all books in Asimov's Foundation series.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all books in Asimov's Foundation series.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7758 is Foundation series\nkg:4983 is has part(s)", "response": "{\n    \"query\": [\n        \"SELECT ?book\",\n        \"WHERE {\",\n            \"kg:7758 kg:4983 ?book.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { wd:Q1564644 wdt:P527 ?book. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where was Bach born?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q1339 wdt:P19 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q1339 wdt:P19 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where was Bach born?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1339 is Johann Sebastian Bach\nwdt:P19 is place of birth", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n      \"wd:Q1339 wdt:P19 ?place.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q1339 wdt:P19 ?place. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where was Bach born?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where was Bach born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9729 is Johann Sebastian Bach\nkg:2247 is place of birth", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/9729> <http://www.example.org/kg/2247> ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://www.example.org/kg//9729> <http://www.example.org/kg//2247> ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which city has the oldest running metro?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  ?metro wdt:P31 wd:Q80764.\",\n    \"  ?metro wdt:P279 wd:Q55472.\",\n    \"  ?metro wdt:P17 wd:Q183.\",\n    \"  ?city wdt:P17 ?country.\",\n    \"  ?metro wdt:P625 ?startDate.\",\n    \"  FILTER(?startDate < \\\"1900-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?metro wdt:P31 wd:Q80764. ?metro wdt:P279 wd:Q55472. ?metro wdt:P17 wd:Q183. ?city wdt:P17 ?country. ?metro wdt:P625 ?startDate. FILTER(?startDate < \"1900-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which city has the oldest running metro?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5503 is rapid transit\nwdt:P571 is inception\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?metro wdt:P31 wd:Q5503.\",\n      \"?metro wdt:P131 ?city.\",\n      \"?metro wdt:P571 ?inception.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"} ORDER BY DESC(?inception) LIMIT 1\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?city WHERE { ?metro wdt:P31 wd:Q5503. ?metro wdt:P131 ?city. ?metro wdt:P571 ?inception. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?inception) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which city has the oldest running metro?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which city has the oldest running metro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9312 is instance of\nkg:2195 is rapid transit\nkg:4613 is inception\nkg:2724 is located in the administrative territorial entity", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?metro kg:9312 kg:2195 .\",\n            \"?metro kg:4613 ?inceptionDate .\",\n            \"?metro kg:2724 ?city .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMetro kg:9312 kg:2195 .\",\n                \"?otherMetro kg:4613 ?otherInceptionDate .\",\n                \"?otherMetro kg:2724 ?city .\",\n                \"FILTER (?otherInceptionDate < ?inceptionDate)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?metro wdt:P31 wd:Q5503 . ?metro wdt:P571 ?inceptionDate . ?metro wdt:P131 ?city . FILTER NOT EXISTS { ?otherMetro wdt:P31 wd:Q5503 . ?otherMetro wdt:P571 ?otherInceptionDate . ?otherMetro wdt:P131 ?city . FILTER (?otherInceptionDate < ?inceptionDate) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who designed the Brooklyn Bridge?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"  wd:Q1597 bd:P84 ?designer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?designer WHERE { wd:Q1597 bd:P84 ?designer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who designed the Brooklyn Bridge?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125006 is Brooklyn Bridge\nwdt:P287 is designed by", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"  wd:Q125006 wdt:P287 ?designer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?designer WHERE { wd:Q125006 wdt:P287 ?designer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who designed the Brooklyn Bridge?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who designed the Brooklyn Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0242 is Brooklyn Bridge\nkg:9045 is designed by", "response": "{\n    \"query\": [\n        \"SELECT ?designer\",\n        \"WHERE {\",\n            \"kg:0242 kg:9045 ?designer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?designer WHERE { wd:Q125006 wdt:P287 ?designer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in Eurasia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q46 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q46 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many people live in Eurasia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5401 is Eurasia\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q5401 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q5401 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many people live in Eurasia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many people live in Eurasia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8473 is Eurasia\nkg:7501 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population\",\n        \"WHERE {\",\n            \"<http://example.org/kg/8473> <http://example.org/kg/7501> ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { <http://example.org/kg//8473> <http://example.org/kg//7501> ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the total population of Melbourne, Florida?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n    \"  wd:Q109628 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q109628 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the total population of Melbourne, Florida?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q949779 is Melbourne\nwdt:P1082 is population", "response": "{\n  \"query\": [\n    \"SELECT ?population WHERE {\",\n      \"wd:Q949779 wdt:P1082 ?population.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q949779 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the total population of Melbourne, Florida?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the total population of Melbourne, Florida?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6378 is Melbourne\nkg:3570 is population", "response": "{\n    \"query\": [\n        \"SELECT ?population WHERE {\",\n            \"kg:6378 kg:3570 ?population.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?population WHERE { wd:Q949779 wdt:P1082 ?population. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What country is Mount Everest in?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1062 wdt:P361 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1062 wdt:P361 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What country is Mount Everest in?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q513 is Mount Everest\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q513 wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q513 wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What country is Mount Everest in?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What country is Mount Everest in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6089 is Mount Everest\nkg:8406 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/6089> <http://www.example.org/kg/8406> ?country.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { <http://www.example.org/kg//6089> <http://www.example.org/kg//8406> ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movement WHERE {\",\n    \"  wd:Q1234567 wdt:P180 ?movement.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movement WHERE { wd:Q1234567 wdt:P180 ?movement. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3235867 is The Three Dancers\nwdt:P170 is creator\nwdt:P135 is movement", "response": "{\n  \"query\": [\n    \"SELECT ?movement WHERE {\",\n    \"  wd:Q3235867 wdt:P170 ?painter.\",\n    \"  ?painter wdt:P135 ?movement.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?movement WHERE { wd:Q3235867 wdt:P170 ?painter. ?painter wdt:P135 ?movement. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "To which artistic movement did the painter of The Three Dancers belong?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “To which artistic movement did the painter of The Three Dancers belong?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2470 is The Three Dancers\nkg:6531 is creator\nkg:8386 is movement", "response": "{\n    \"query\": [\n        \"SELECT ?movement\",\n        \"WHERE {\",\n            \"kg:2470 kg:6531 ?painter.\",\n            \"?painter kg:8386 ?movement.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movement WHERE { wd:Q3235867 wdt:P170 ?painter. ?painter wdt:P135 ?movement. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Operation Overlord commence?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?operation WHERE {\",\n    \"  ?operation wdt:P31 wd:Q20649.\",\n    \"  ?operation rdfs:label \\\"Operation Overlord\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?operation WHERE { ?operation wdt:P31 wd:Q20649. ?operation rdfs:label \"Operation Overlord\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Operation Overlord commence?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8641370 is Operation Overlord\nwdt:P580 is start time", "response": "{\n  \"query\": [\n    \"SELECT ?startTime WHERE {\",\n      \"wd:Q8641370 wdt:P580 ?startTime.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?startTime WHERE { wd:Q8641370 wdt:P580 ?startTime. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Operation Overlord commence?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Operation Overlord commence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2567 is Operation Overlord\nkg:0436 is start time", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:2567 kg:0436 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q8641370 wdt:P580 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the bridge with the longest span?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the bridge with the longest span?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  ?bridge wdt:P31 wd:Q49657.\",\n    \"  ?bridge wdt:P2048 ?span.\",\n    \"  SERVICE wikibase:around { bd:serviceParam wikibase:center ?bridge }\",\n    \"  ?bridge wdt:P2048 ?maxSpan.\",\n    \"  FILTER(?span = MAX(?maxSpan))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q49657. ?bridge wdt:P2048 ?span. SERVICE wikibase:around { bd:serviceParam wikibase:center ?bridge } ?bridge wdt:P2048 ?maxSpan. FILTER(?span = MAX(?maxSpan)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is there a video game called Battle Chess?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is there a video game called Battle Chess?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?game WHERE {\",\n    \"  ?game wdt:P31 wd:Q7889.\",\n    \"  ?game rdfs:label \\\"Battle Chess\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?game WHERE { ?game wdt:P31 wd:Q7889. ?game rdfs:label \"Battle Chess\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q7594 wdt:P1082 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q7594 wdt:P1082 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P119 is place of burial\nwd:Q3411252 is Pyramid G1-a", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P119 wd:Q3411252.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P119 wd:Q3411252. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was buried in the Great Pyramid of Giza?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was buried in the Great Pyramid of Giza?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8446 is place of burial\nkg:5206 is Pyramid G1-a", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:8446 kg:5206 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P119 wd:Q3411252 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Socrates influence Aristotle?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7264 wdt:P1082 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q7264 wdt:P1082 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Socrates influence Aristotle?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q868 is Aristotle\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q868 wdt:P737 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q868 wdt:P737 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Socrates influence Aristotle?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Socrates influence Aristotle?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3713 is Aristotle\nkg:3382 is influenced by\nkg:4528 is Socrates", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:3382 kg:3713.\",\n            \"?resource kg:3382 kg:4528.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P737 wd:Q868. ?resource wdt:P737 wd:Q913. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many children did Benjamin Franklin have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q765 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q765 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many children did Benjamin Franklin have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q34969 is Benjamin Franklin\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n      \"wd:Q34969 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q34969 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many children did Benjamin Franklin have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many children did Benjamin Franklin have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3786 is Benjamin Franklin\nkg:3793 is child", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/3786> <http://www.example.org/kg/3793> ?child.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { <http://www.example.org/kg//3786> <http://www.example.org/kg//3793> ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How tall is Michael Jordan?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item rdfs:label \\\"Michael Jordan\\\"@en.\",\n    \"  ?item wdt:P2049 ?height.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. ?item rdfs:label \"Michael Jordan\"@en. ?item wdt:P2049 ?height. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How tall is Michael Jordan?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q41421 is Michael Jordan\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?height WHERE {\",\n    \"  wd:Q41421 wdt:P2048 ?height.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?height WHERE { wd:Q41421 wdt:P2048 ?height. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How tall is Michael Jordan?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How tall is Michael Jordan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4261 is Michael Jordan\nkg:0068 is height", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:4261 kg:0068 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q41421 wdt:P2048 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which UK city are the headquarters of the MI6?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q105243 wdt:P159 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q105243 wdt:P159 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which UK city are the headquarters of the MI6?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q184560 is Secret Intelligence Service\nwdt:P159 is headquarters location\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?headquarters wdt:P159 ?city.\",\n      \"?headquarters wdt:P31 wd:Q184560.\",\n      \"?city wdt:P31 wd:Q515.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { ?headquarters wdt:P159 ?city. ?headquarters wdt:P31 wd:Q184560. ?city wdt:P31 wd:Q515. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which UK city are the headquarters of the MI6?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which UK city are the headquarters of the MI6?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1223 is Secret Intelligence Service\nkg:2929 is headquarters location\nkg:9030 is instance of\nkg:4329 is city", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"kg:1223 kg:9030 kg:4329 .\",\n            \"kg:1223 kg:2929 ?location .\",\n            \"?location kg:9030 ?city .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q184560 wdt:P31 wd:Q515 . wd:Q184560 wdt:P159 ?location . ?location wdt:P31 ?city . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Family Guy?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q142896 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q142896 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created Family Guy?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5930 is Family Guy\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q5930 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q5930 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who created Family Guy?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created Family Guy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0871 is Family Guy\nkg:4258 is creator", "response": "{\n    \"query\": [\n        \"SELECT ?creator\",\n        \"WHERE {\",\n            \"kg:0871 kg:4258 ?creator.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q5930 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  wd:Q3764 wdt:P1092 ?child.\",\n    \"  ?child wdt:P453 ?grandchild.\"\n    ]\n}", "normal_query": "SELECT ?grandchild WHERE { wd:Q3764 wdt:P1092 ?child. ?child wdt:P453 ?grandchild. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  wd:Q303 wdt:P40 ?child.\",\n    \"  ?child wdt:P40 ?grandchild.\"\n    ]\n}", "normal_query": "SELECT ?grandchild WHERE { wd:Q303 wdt:P40 ?child. ?child wdt:P40 ?grandchild. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the grandchildren of Elvis Presley.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the grandchildren of Elvis Presley.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is Elvis Presley\nkg:5388 is child\nkg:5388 is child", "response": "{\n    \"query\": [\n        \"SELECT ?grandchild\",\n        \"WHERE {\",\n            \"?parent kg:5388 kg:6814.\",\n            \"?grandchild kg:5388 ?parent.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?grandchild WHERE { ?parent wdt:P40 wd:Q303. ?grandchild wdt:P40 ?parent. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When did the Ming dynasty dissolve?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?dissolutionDate WHERE {\",\n    \"  wd:Q74961 wdt:P576 ?dissolutionDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?dissolutionDate WHERE { wd:Q74961 wdt:P576 ?dissolutionDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did the Ming dynasty dissolve?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9903 is Ming dynasty\nwdt:P576 is dissolved, abolished or demolished date", "response": "{\n  \"query\": [\n    \"SELECT ?dissolutionDate WHERE {\",\n    \"  wd:Q9903 wdt:P576 ?dissolutionDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?dissolutionDate WHERE { wd:Q9903 wdt:P576 ?dissolutionDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did the Ming dynasty dissolve?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did the Ming dynasty dissolve?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4661 is Ming dynasty\nkg:6940 is dissolved, abolished or demolished date", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:4661 kg:6940 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9903 wdt:P576 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"  wd:Q104327 wdt:P957 ?conflict.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?conflict WHERE { wd:Q104327 wdt:P957 ?conflict. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q170596 is T. E. Lawrence\nwdt:P607 is conflict", "response": "{\n  \"query\": [\n    \"SELECT ?conflict WHERE {\",\n    \"  wd:Q170596 wdt:P607 ?conflict.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?conflict WHERE { wd:Q170596 wdt:P607 ?conflict. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which military conflicts did Lawrence of Arabia participate?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which military conflicts did Lawrence of Arabia participate?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3636 is T. E. Lawrence\nkg:6895 is conflict", "response": "{\n    \"query\": [\n        \"SELECT ?conflict\",\n        \"WHERE {\",\n            \"kg:3636 kg:participatedIn ?conflict.\",\n            \"?conflict a kg:Conflict.\"\n        ]\n    }\n ", "normal_query": "SELECT ?conflict WHERE { wd:Q170596 kg:participatedIn ?conflict. ?conflict a kg:Conflict. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timezone WHERE {\",\n    \"  wd:Q109426 wdt:P421 ?timezone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timezone WHERE { wd:Q109426 wdt:P421 ?timezone. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q187893 is San Pedro de Atacama\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timezone WHERE {\",\n      \"wd:Q187893 wdt:P421 ?timezone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timezone WHERE { wd:Q187893 wdt:P421 ?timezone. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the timezone in San Pedro de Atacama?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the timezone in San Pedro de Atacama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7559 is San Pedro de Atacama\nkg:1880 is located in time zone", "response": "{\n    \"query\": [\n        \"SELECT ?timezone WHERE {\",\n            \"kg:7559 kg:1880 ?timezone.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?timezone WHERE { wd:Q187893 wdt:P421 ?timezone. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did Bruce Carver die from?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cause WHERE {\",\n    \"  wd:Q1059678 wdt:P1196 ?cause.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cause WHERE { wd:Q1059678 wdt:P1196 ?cause. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Bruce Carver die from?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4977246 is Bruce Carver\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?causeOfDeath WHERE {\",\n    \"  wd:Q4977246 wdt:P509 ?causeOfDeath.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?causeOfDeath WHERE { wd:Q4977246 wdt:P509 ?causeOfDeath. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did Bruce Carver die from?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Bruce Carver die from?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2845 is Bruce Carver\nkg:5174 is cause of death", "response": "{\n    \"query\": [\n        \"SELECT ?causeOfDeath\",\n        \"WHERE {\",\n            \"<http://example.org/kg/2845> <http://example.org/kg/5174> ?causeOfDeath.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?causeOfDeath WHERE { <http://example.org/kg//2845> <http://example.org/kg//5174> ?causeOfDeath. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?place WHERE {\",\n    \"  wd:Q134027 wdt:P589 ?deathDate.\",\n    \"  wd:Q134027 wdt:P276 ?place.\",\n    \"  ?place wdt:P856 ?website.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?place WHERE { wd:Q134027 wdt:P589 ?deathDate. wd:Q134027 wdt:P276 ?place. ?place wdt:P856 ?website. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P20 is place of death\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?website WHERE {\",\n      \"wd:Q91 wdt:P20 ?deathPlace.\",\n      \"?deathPlace wdt:P856 ?website.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?website WHERE { wd:Q91 wdt:P20 ?deathPlace. ?deathPlace wdt:P856 ?website. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Does Abraham Lincoln's death place have a website?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Does Abraham Lincoln's death place have a website?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1907 is Abraham Lincoln\nkg:3231 is place of death\nkg:6446 is official website", "response": "{\n    \"query\": [\n        \"SELECT ?website\",\n        \"WHERE {\",\n            \"kg:1907 kg:3231 ?deathPlace.\",\n            \"?deathPlace kg:6446 ?website.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?website WHERE { wd:Q91 wdt:P20 ?deathPlace. ?deathPlace wdt:P856 ?website. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Elvis Presley have children?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n    \"  wd:Q23641 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q23641 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Elvis Presley have children?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q303 is Elvis Presley\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?child WHERE {\",\n      \"wd:Q303 wdt:P40 ?child.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child WHERE { wd:Q303 wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Elvis Presley have children?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Elvis Presley have children?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5360 is Elvis Presley\nkg:0568 is child", "response": "{\n    \"query\": [\n        \"SELECT ?child\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/5360> <http://www.example.org/kg/0568> ?child.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?child WHERE { <http://www.example.org/kg//5360> <http://www.example.org/kg//0568> ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q76 wdt:P31 wd:Q2526259.\",\n    \"  wd:Q76 wdt:P26 wd:Q840.\",\n    \"  wd:Q76 wdt:P25 wd:Q2526259.\",\n    \"  ?wife wdt:P31 wd:Q2526259.\",\n    \"  ?wife wdt:P26 wd:Q840.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q76 wdt:P31 wd:Q2526259. wd:Q76 wdt:P26 wd:Q840. wd:Q76 wdt:P25 wd:Q2526259. ?wife wdt:P31 wd:Q2526259. ?wife wdt:P26 wd:Q840. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwd:Q13133 is Michelle Obama", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q76 wdt:P26 ?spouse.\",\n      \"FILTER(?spouse = wd:Q13133)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76 wdt:P26 ?spouse. FILTER(?spouse = wd:Q13133) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Michelle Obama the wife of Barack Obama?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Michelle Obama the wife of Barack Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7320 is Barack Obama\nkg:3323 is spouse\nkg:0032 is Michelle Obama", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:3323 kg:7320.\",\n            \"?resource kg:3323 kg:0032.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q76. ?resource wdt:P26 wd:Q13133. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who wrote the song Hotel California?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?song WHERE {\",\n    \"  wd:Q1064897 wdt:P175 ?song.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?song WHERE { wd:Q1064897 wdt:P175 ?song. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the song Hotel California?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q780394 is Hotel California\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?song WHERE {\",\n      \"?song wdt:P86 wd:Q780394.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?song WHERE { ?song wdt:P86 wd:Q780394. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the song Hotel California?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote the song Hotel California?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7168 is Hotel California\nkg:0509 is composer", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:7168 kg:0509 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q780394 wdt:P86 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the capital of Canada?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q16 wdt:P36 ?capital.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q16 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the capital of Canada?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n    \"  wd:Q16 wdt:P36 ?capital.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q16 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the capital of Canada?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the capital of Canada?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0044 is Canada\nkg:5651 is capital", "response": "{\n    \"query\": [\n        \"SELECT ?capital\",\n        \"WHERE {\",\n            \"kg:0044 kg:5651 ?capital.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?capital WHERE { wd:Q16 wdt:P36 ?capital. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Tel Aviv?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q1034 Q6256 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q1034 Q6256 ?mayor. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the mayor of Tel Aviv?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33935 is Tel Aviv\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q33935 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q33935 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Tel Aviv?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Tel Aviv?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6114 is Tel Aviv\nkg:1344 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"kg:6114 kg:1344 ?mayor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q33935 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What form of government does Russia have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?formOfGovernment WHERE {\",\n    \"  wd:Q158 wdt:P39 ?formOfGovernment.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?formOfGovernment WHERE { wd:Q158 wdt:P39 ?formOfGovernment. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What form of government does Russia have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q159 is Russia\np:P122 is basic form of government\nps:P122 is basic form of government\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?formOfGovernment WHERE {\",\n      \"wd:Q159 p:P122 ?statement.\",\n      \"?statement ps:P122 ?formOfGovernment.\",\n      \"FILTER NOT EXISTS { ?statement pq:P582 [] }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?formOfGovernment WHERE { wd:Q159 p:P122 ?statement. ?statement ps:P122 ?formOfGovernment. FILTER NOT EXISTS { ?statement pq:P582 [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What form of government does Russia have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What form of government does Russia have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0251 is Russia\nkg:2654 is basic form of government\nkg:5180 is basic form of government\nkg:6647 is end time", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:0251 kg:2654 ?resource .\",\n            \"?resource kg:5180 ?formOfGovernment .\",\n            \"FILTER NOT EXISTS { ?resource kg:6647 ?endTime }\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { wd:Q159 p:P122 ?resource . ?resource ps:P122 ?formOfGovernment . FILTER NOT EXISTS { ?resource pq:P582 ?endTime } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many languages are spoken in Colombia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q784 Q1065923 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q784 Q1065923 ?language. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many languages are spoken in Colombia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q739 is Colombia\nwdt:P31 is instance of\nwd:Q34770 is language", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q739 wdt:P31 ?country.\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P1084 ?language.\",\n    \"  ?language wdt:P31 wd:Q34770.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q739 wdt:P31 ?country. ?country wdt:P31 wd:Q6256. ?country wdt:P1084 ?language. ?language wdt:P31 wd:Q34770. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many languages are spoken in Colombia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many languages are spoken in Colombia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4761 is Colombia\nkg:0115 is instance of\nkg:2850 is language", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"kg:4761 kg:0115 ?country.\",\n            \"?country kg:2850 ?language.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?language WHERE { wd:Q739 wdt:P31 ?country. ?country wd:Q34770 ?language. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the currency of the Czech Republic?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"  wd:Q213 wdt:P489 ?currency.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q213 wdt:P489 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the currency of the Czech Republic?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q213 is Czech Republic\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n      \"wd:Q213 wdt:P38 ?currency.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q213 wdt:P38 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the currency of the Czech Republic?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the currency of the Czech Republic?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3424 is Czech Republic\nkg:7065 is currency", "response": "{\n    \"query\": [\n        \"SELECT ?currency WHERE {\",\n            \"kg:3424 kg:7065 ?currency.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q213 wdt:P38 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Boris Becker end his active career?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?careerEnd WHERE {\",\n    \"  wd:Q7945 wdt:P1080 ?careerEnd.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?careerEnd WHERE { wd:Q7945 wdt:P1080 ?careerEnd. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Boris Becker end his active career?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76334 is Boris Becker\np:P106 is occupation\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?endTime WHERE {\",\n      \"wd:Q76334 wdt:P106 ?occupation.\",\n      \"?occupation p:P106 ?statement.\",\n      \"?statement ps:P106 wd:Q82594.\", \"# Q82594 is Tennis player\",\n      \"?statement pq:P582 ?endTime.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?endTime WHERE { wd:Q76334 wdt:P106 ?occupation. ?occupation p:P106 ?statement. ?statement ps:P106 wd:Q82594. ?statement pq:P582 ?endTime. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Boris Becker end his active career?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Boris Becker end his active career?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8519 is Boris Becker\nkg:4499 is occupation\nkg:7835 is end time", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8519 kg:4499 ?occupation .\",\n            \"?occupation kg:7835 ?endTime .\",\n            \"BIND(?endTime AS ?resource)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q76334 p:P106 ?occupation . ?occupation pq:P582 ?endTime . BIND(?endTime AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P161 wd:Q20849.\",\n    \"  ?film wdt:P175 wd:Q3096.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P161 wd:Q20849. ?film wdt:P175 wd:Q3096. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q48410 is Richard Gere\nwdt:P161 is cast member\nwd:Q40523 is Julia Roberts", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P161 wd:Q48410.\",\n      \"?film wdt:P161 wd:Q40523.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P161 wd:Q48410. ?film wdt:P161 wd:Q40523. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which films did Julia Roberts as well as Richard Gere play?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which films did Julia Roberts as well as Richard Gere play?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1148 is instance of\nkg:8130 is film\nkg:2065 is cast member\nkg:3669 is Richard Gere\nkg:2065 is cast member\nkg:8913 is Julia Roberts", "response": "{\n    \"query\": [\n        \"SELECT ?film WHERE {\",\n            \"?film kg:1148 kg:8130 .\",\n            \"?film kg:2065 kg:3669 .\",\n            \"?film kg:2065 kg:8913 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P161 wd:Q48410 . ?film wdt:P161 wd:Q40523 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me Hemingway's autobiography.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?autobiography WHERE {\",\n    \"  wd:Q13407 wdt:P848 ?autobiography.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?autobiography WHERE { wd:Q13407 wdt:P848 ?autobiography. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me Hemingway's autobiography.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P50 is author\nwd:Q23434 is Ernest Hemingway\nwdt:P136 is genre\nwd:Q4184 is autobiography", "response": "{\n  \"query\": [\n    \"SELECT ?autobiography WHERE {\",\n      \"?autobiography wdt:P50 wd:Q23434.\",\n      \"?autobiography wdt:P136 wd:Q4184.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?autobiography WHERE { ?autobiography wdt:P50 wd:Q23434. ?autobiography wdt:P136 wd:Q4184. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Show me Hemingway's autobiography.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me Hemingway's autobiography.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8102 is author\nkg:6083 is Ernest Hemingway\nkg:1624 is genre\nkg:6727 is autobiography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:8102 kg:6083 .\",\n            \"?resource kg:1624 kg:6727 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q23434 . ?resource wdt:P136 wd:Q4184 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What are the five boroughs of New York?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n    \"  wd:Q60 wdt:P31/wdt:P279* ?borough.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?borough WHERE { wd:Q60 wdt:P31/wdt:P279* ?borough. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What are the five boroughs of New York?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q408804 is borough of New York City", "response": "{\n  \"query\": [\n    \"SELECT ?borough WHERE {\",\n      \"?borough wdt:P31 wd:Q408804.\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?borough WHERE { ?borough wdt:P31 wd:Q408804. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What are the five boroughs of New York?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the five boroughs of New York?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4033 is instance of\nkg:0913 is borough of New York City", "response": "{\n    \"query\": [\n        \"SELECT ?borough\",\n        \"WHERE {\",\n            \"?borough kg:0913 kg:4033 .\",\n            \"FILTER (REGEX(str(?borough), \\\"^http://www.wikidata.org/entity/\\\"))\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?borough WHERE { ?borough wd:Q408804 wdt:P31 . FILTER (REGEX(str(?borough), \"^wd:\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country does the Ganges start?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1594 wdt:P361 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1594 wdt:P361 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which country does the Ganges start?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5089 is Ganges\nwdt:P885 is origin of the watercourse\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"wd:Q5089 wdt:P885 ?origin.\",\n      \"?origin wdt:P17 ?country.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?country WHERE { wd:Q5089 wdt:P885 ?origin. ?origin wdt:P17 ?country. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which country does the Ganges start?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which country does the Ganges start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3043 is Ganges\nkg:5904 is origin of the watercourse\nkg:1545 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:3043 kg:5904 ?origin.\",\n            \"?origin kg:1545 ?country.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?country WHERE { wd:Q5089 wdt:P885 ?origin. ?origin wdt:P17 ?country. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the founder of Penguin Books?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q10642 p:P35 ?statement.\",\n    \"  ?statement ps:P35 ?founder.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q10642 p:P35 ?statement. ?statement ps:P35 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the founder of Penguin Books?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1336200 is Penguin Books\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q1336200 wdt:P112 ?founder.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q1336200 wdt:P112 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the founder of Penguin Books?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the founder of Penguin Books?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8226 is Penguin Books\nkg:5203 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?founder\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/8226> <http://www.example.org/kg/5203> ?founder.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { <http://www.example.org/kg//8226> <http://www.example.org/kg//5203> ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the Game of Thrones theme?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?theme WHERE {\",\n    \"  wd:Q156428 p:P800 ?statement.\",\n    \"  ?statement ps:P800 ?theme.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?theme WHERE { wd:Q156428 p:P800 ?statement. ?statement ps:P800 ?theme. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote the Game of Thrones theme?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23572 is Game of Thrones\nwdt:P86 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"wd:Q23572 wdt:P86 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q23572 wdt:P86 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote the Game of Thrones theme?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote the Game of Thrones theme?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4662 is Game of Thrones\nkg:5725 is composer", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:4662 kg:composer ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q23572 kg:composer ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the president of Eritrea?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  wd:Q1029 Q6386 ?president.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q1029 Q6386 ?president. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the president of Eritrea?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q986 is Eritrea\nwdt:P35 is head of state", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"wd:Q986 wdt:P35 ?president.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q986 wdt:P35 ?president. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the president of Eritrea?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the president of Eritrea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3708 is Eritrea\nkg:4028 is head of state", "response": "{\n    \"query\": [\n        \"SELECT ?president\",\n        \"WHERE {\",\n            \"kg:3708 kg:4028 ?president.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q986 wdt:P35 ?president. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest mountain in Australia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P793 wd:Q668.\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P793 wd:Q668. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the highest mountain in Australia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P30 is continent\nwd:Q3960 is Australian continent\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q8502 .\",\n      \"?mountain wdt:P30 wd:Q3960 .\",\n      \"?mountain wdt:P2044 ?elevation .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?elevation)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P30 wd:Q3960 . ?mountain wdt:P2044 ?elevation . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?elevation) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest mountain in Australia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4685 is instance of\nkg:5080 is mountain\nkg:1335 is continent\nkg:6341 is Australian continent\nkg:1463 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?mountain\",\n        \"WHERE {\",\n            \"?mountain kg:4685 kg:5080 .\",\n            \"?mountain kg:1335 kg:6341 .\",\n            \"?mountain kg:1463 ?elevation .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMountain kg:4685 kg:5080 .\",\n                \"?otherMountain kg:1335 kg:6341 .\",\n                \"?otherMountain kg:1463 ?otherElevation .\",\n                \"FILTER (?elevation < ?otherElevation)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P30 wd:Q3960 . ?mountain wdt:P2044 ?elevation . FILTER NOT EXISTS { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P30 wd:Q3960 . ?otherMountain wdt:P2044 ?otherElevation . FILTER (?elevation < ?otherElevation) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the currency of China.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"  wd:Q148 wdt:P373 ?currency.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q148 wdt:P373 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the currency of China.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q148 is People's Republic of China\nwdt:P38 is currency", "response": "{\n  \"query\": [\n    \"SELECT ?currency WHERE {\",\n    \"  wd:Q148 wdt:P38 ?currency.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q148 wdt:P38 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the currency of China.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the currency of China.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1520 is People's Republic of China\nkg:8265 is currency", "response": "{\n    \"query\": [\n        \"SELECT ?currency\",\n        \"WHERE {\",\n            \"kg:1520 kg:8265 ?currency.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?currency WHERE { wd:Q148 wdt:P38 ?currency. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Swedish oceanographers.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?oceanographer WHERE {\",\n    \"  ?oceanographer wdt:P106 wd:Q347825.\",\n    \"  ?oceanographer wdt:P27 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?oceanographer WHERE { ?oceanographer wdt:P106 wd:Q347825. ?oceanographer wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Swedish oceanographers.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation\nwd:Q3546255 is oceanographer", "response": "{\n  \"query\": [\n    \"SELECT ?oceanographer WHERE {\",\n      \"?oceanographer wdt:P27 wd:Q34 .\",\n      \"?oceanographer wdt:P106 wd:Q3546255 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?oceanographer WHERE { ?oceanographer wdt:P27 wd:Q34 . ?oceanographer wdt:P106 wd:Q3546255 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all Swedish oceanographers.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Swedish oceanographers.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9026 is country of citizenship\nkg:8563 is Sweden\nkg:2886 is occupation\nkg:6380 is oceanographer", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:9026 kg:8563 .\",\n            \"?resource kg:2886 kg:6380 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P27 wd:Q34 . ?resource wdt:P106 wd:Q3546255 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q106849 wdt:P26 ?wife.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q106849 wdt:P26 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse\nwd:Q234144 is Rita Wilson", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q2263 wdt:P26 ?spouse.\",\n      \"FILTER(?spouse = wd:Q234144)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2263 wdt:P26 ?spouse. FILTER(?spouse = wd:Q234144) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Rita Wilson the wife of Tom Hanks?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Rita Wilson the wife of Tom Hanks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is Tom Hanks\nkg:8992 is spouse\nkg:6150 is Rita Wilson", "response": "{\n    \"query\": [\n        \"SELECT ?spouse WHERE {\",\n            \"kg:3108 kg:8992 ?spouse.\",\n            \"FILTER(?spouse = kg:6150)\"\n        ]\n    }\n   ", "normal_query": "SELECT ?spouse WHERE { wd:Q2263 wdt:P26 ?spouse. FILTER(?spouse = wd:Q234144) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which countries do people speak Japanese?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P37 wd:Q806.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P37 wd:Q806. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which countries do people speak Japanese?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P37 is official language\nwd:Q5287 is Japanese", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31 wd:Q6256.\",\n      \"?country wdt:P37 wd:Q5287.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P37 wd:Q5287. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which countries do people speak Japanese?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which countries do people speak Japanese?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is instance of\nkg:4094 is country\nkg:2472 is official language\nkg:1348 is Japanese", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:0335 kg:4094 .\",\n            \"?country kg:2472 kg:1348 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P37 wd:Q5287 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which museum in New York has the most visitors?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"  ?museum wdt:P31 wd:Q33506.\",\n    \"  ?museum wdt:P17 wd:Q60.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506. ?museum wdt:P17 wd:Q60. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which museum in New York has the most visitors?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P159 is headquarters location\nwd:Q60 is New York City\nwdt:P31 is instance of\nwd:Q33506 is museum\nwdt:P1174 is visitors per year", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n      \"?museum wdt:P31 wd:Q33506 .\",\n      \"?museum wdt:P159 wd:Q60 .\",\n      \"?museum wdt:P1174 ?visitors .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506 . ?museum wdt:P159 wd:Q60 . ?museum wdt:P1174 ?visitors . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which museum in New York has the most visitors?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which museum in New York has the most visitors?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2365 is headquarters location\nkg:7693 is New York City\nkg:0004 is instance of\nkg:4808 is museum\nkg:6753 is visitors per year", "response": "{\n    \"query\": [\n        \"SELECT ?museum\",\n        \"WHERE {\",\n            \"?museum kg:0004 kg:4808 .\",\n            \"?museum kg:2365 kg:7693 .\",\n            \"?museum kg:6753 ?visitors .\",\n            \"FILTER NOT EXISTS { ?otherMuseum kg:0004 kg:4808 ; kg:2365 kg:7693 ; kg:6753 ?otherVisitors . FILTER (?otherVisitors > ?visitors) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q33506 . ?museum wdt:P159 wd:Q60 . ?museum wdt:P1174 ?visitors . FILTER NOT EXISTS { ?otherMuseum wdt:P31 wd:Q33506 ; wdt:P159 wd:Q60 ; wdt:P1174 ?otherVisitors . FILTER (?otherVisitors > ?visitors) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was the first Queen album?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE {\",\n    \"  wd:Q214396 wdt:P571 ?album.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?album WHERE { wd:Q214396 wdt:P571 ?album. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was the first Queen album?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q15862 is Queen\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?album WHERE {\",\n      \"?album wdt:P31 wd:Q482994.\",\n      \"?album wdt:P175 wd:Q15862.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?album WHERE { ?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q15862. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was the first Queen album?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was the first Queen album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1183 is instance of\nkg:2574 is album\nkg:4363 is performer\nkg:7570 is Queen\nkg:8676 is publication date", "response": "{\n    \"query\": [\n        \"SELECT ?album WHERE {\",\n            \"?album kg:2574 .\",\n            \"?album kg:4363 kg:7570 .\",\n            \"?album kg:8676 ?date .\",\n            \"FILTER NOT EXISTS { ?otherAlbum kg:2574 ; kg:4363 kg:7570 ; kg:8676 ?otherDate . FILTER (?otherDate < ?date) }\"\n        ]\n    }\n ", "normal_query": "SELECT ?album WHERE { ?album wd:Q482994 . ?album wdt:P175 wd:Q15862 . ?album wdt:P577 ?date . FILTER NOT EXISTS { ?otherAlbum wd:Q482994 ; wdt:P175 wd:Q15862 ; wdt:P577 ?otherDate . FILTER (?otherDate < ?date) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was the last movie with Alec Guinness?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q10624 wdt:P356 ?movie.\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  FILTER NOT EXISTS { ?movie wdt:P356 [] }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q10624 wdt:P356 ?movie. ?movie wdt:P31 wd:Q11424. FILTER NOT EXISTS { ?movie wdt:P356 [] } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was the last movie with Alec Guinness?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P161 is cast member\nwd:Q103894 is Alec Guinness\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P161 wd:Q103894.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?publicationDate)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P161 wd:Q103894. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?publicationDate) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What was the last movie with Alec Guinness?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was the last movie with Alec Guinness?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2886 is instance of\nkg:3087 is film\nkg:8937 is cast member\nkg:7063 is Alec Guinness\nkg:6539 is publication date", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:2886 kg:3087 .\",\n            \"?movie kg:8937 kg:7063 .\",\n            \"?movie kg:6539 ?date .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMovie kg:2886 kg:3087 .\",\n                \"?otherMovie kg:8937 kg:7063 .\",\n                \"?otherMovie kg:6539 ?otherDate .\",\n                \"FILTER (?date < ?otherDate)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P161 wd:Q103894 . ?movie wdt:P577 ?date . FILTER NOT EXISTS { ?otherMovie wdt:P31 wd:Q11424 . ?otherMovie wdt:P161 wd:Q103894 . ?otherMovie wdt:P577 ?otherDate . FILTER (?date < ?otherDate) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors starring in Last Action Hero.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q1234567 wdt:P161 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q1234567 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all actors starring in Last Action Hero.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q858840 is Last Action Hero\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q858840 wdt:P161 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q858840 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all actors starring in Last Action Hero.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all actors starring in Last Action Hero.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5466 is Last Action Hero\nkg:3948 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"kg:5466 kg:3948 ?actor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q858840 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who discovered Pluto?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n    \"  wd:Q1429 wdt:P61 wd:Q30875.\",\n    \"  wd:Q30875 wdt:P161 ?discoverer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q1429 wdt:P61 wd:Q30875. wd:Q30875 wdt:P161 ?discoverer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who discovered Pluto?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q339 is Pluto\nwdt:P61 is discoverer or inventor\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?discoverer WHERE {\",\n      \"wd:Q339 wdt:P61 ?discoverer.\",\n      \"?discoverer wdt:P31 wd:Q5.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q339 wdt:P61 ?discoverer. ?discoverer wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who discovered Pluto?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who discovered Pluto?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5368 is Pluto\nkg:2200 is discoverer or inventor\nkg:9126 is instance of\nkg:6995 is human", "response": "{\n    \"query\": [\n        \"SELECT ?discoverer\",\n        \"WHERE {\",\n            \"kg:5368 kg:2200 ?discoverer.\",\n            \"?discoverer kg:9126 kg:6995.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?discoverer WHERE { wd:Q339 wdt:P61 ?discoverer. ?discoverer wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the time zone of Salt Lake City?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n    \"  wd:Q124803 wdt:P421 ?timeZone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timeZone WHERE { wd:Q124803 wdt:P421 ?timeZone. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the time zone of Salt Lake City?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q23337 is Salt Lake City\nwdt:P421 is located in time zone", "response": "{\n  \"query\": [\n    \"SELECT ?timeZone WHERE {\",\n      \"wd:Q23337 wdt:P421 ?timeZone.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?timeZone WHERE { wd:Q23337 wdt:P421 ?timeZone. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the time zone of Salt Lake City?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the time zone of Salt Lake City?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1260 is Salt Lake City\nkg:1170 is located in time zone", "response": "{\n    \"query\": [\n        \"SELECT ?timeZone WHERE {\",\n            \"kg:1260 kg:1170 ?timeZone.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?timeZone WHERE { wd:Q23337 wdt:P421 ?timeZone. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who killed Caesar?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P1344 wd:Q76.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1344 wd:Q76. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who killed Caesar?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1048 is Julius Caesar\nwdt:P157 is killed by", "response": "{\n  \"query\": [\n    \"SELECT ?assassin WHERE {\",\n    \"  wd:Q1048 wdt:P157 ?assassin.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?assassin WHERE { wd:Q1048 wdt:P157 ?assassin. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who killed Caesar?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who killed Caesar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7526 is Julius Caesar\nkg:4262 is killed by", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://example.org/kg/7526> <http://example.org/kg/4262> ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://example.org/kg//7526> <http://example.org/kg//4262> ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Germany?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n    \"  ?mountain wdt:P31 wd:Q8502.\",\n    \"  ?mountain wdt:P17 wd:Q183.\",\n    \"  ?mountain wdt:P1065 ?height.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502. ?mountain wdt:P17 wd:Q183. ?mountain wdt:P1065 ?height. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest mountain in Germany?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8502 is mountain\nwdt:P2044 is elevation above sea level\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?mountain WHERE {\",\n      \"?mountain wdt:P31 wd:Q8502 .\",\n      \"?mountain wdt:P17 wd:Q183 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P17 wd:Q183 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the highest mountain in Germany?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest mountain in Germany?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2561 is instance of\nkg:4362 is mountain\nkg:7164 is elevation above sea level\nkg:2200 is country\nkg:0428 is Germany", "response": "{\n    \"query\": [\n        \"SELECT ?mountain\",\n        \"WHERE {\",\n            \"?mountain kg:2561 kg:4362 .\",\n            \"?mountain kg:7164 ?elevation .\",\n            \"?mountain kg:2200 kg:0428 .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherMountain kg:2561 kg:4362 .\",\n                \"?otherMountain kg:7164 ?otherElevation .\",\n                \"?otherMountain kg:2200 kg:0428 .\",\n                \"FILTER (?elevation < ?otherElevation)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mountain WHERE { ?mountain wdt:P31 wd:Q8502 . ?mountain wdt:P2044 ?elevation . ?mountain wdt:P17 wd:Q183 . FILTER NOT EXISTS { ?otherMountain wdt:P31 wd:Q8502 . ?otherMountain wdt:P2044 ?otherElevation . ?otherMountain wdt:P17 wd:Q183 . FILTER (?elevation < ?otherElevation) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  ?president wdt:P31 wd:Q279568.\",\n    \"  ?president wdt:P39 wd:Q1169604.\",\n    \"  ?president wdt:P1198 ?termStart.\",\n    \"  ?president wdt:P1199 ?termEnd.\",\n    \"  FILTER(?termStart < \\\"1975-04-30\\\"^^xsd:dateTime && ?termEnd > \\\"1955-11-01\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P31 wd:Q279568. ?president wdt:P39 wd:Q1169604. ?president wdt:P1198 ?termStart. ?president wdt:P1199 ?termEnd. FILTER(?termStart < \"1975-04-30\"^^xsd:dateTime && ?termEnd > \"1955-11-01\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8740 is Vietnam War\nwdt:P580 is start time\nwd:Q8740 is Vietnam War\nwdt:P582 is end time\nwd:Q30 is United States of America\np:P6 is head of government\nps:P6 is head of government\npq:P580 is start time\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president wdt:P31 wd:Q4794.\",\n      \"?presidency p:P6 ?statement.\",\n      \"?statement ps:P6 ?president.\",\n      \"?statement pq:P580 ?startTime.\",\n      \"?statement pq:P582 ?endTime.\",\n      \"FILTER(?startTime < wd:Q8740 wdt:P582 && ?endTime > wd:Q8740 wdt:P580).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P31 wd:Q4794. ?presidency p:P6 ?statement. ?statement ps:P6 ?president. ?statement pq:P580 ?startTime. ?statement pq:P582 ?endTime. FILTER(?startTime < wd:Q8740 wdt:P582 && ?endTime > wd:Q8740 wdt:P580). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American presidents were in office during the Vietnam War?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which American presidents were in office during the Vietnam War?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Vietnam War\nkg:8702 is start time\nkg:9596 is Vietnam War\nkg:8819 is end time\nkg:6919 is United States of America\nkg:6335 is head of government\nkg:0704 is head of government\nkg:3171 is start time\nkg:6726 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president kg:0704 kg:6919 .\",\n      \"?president kg:3171 ?startTime .\",\n      \"?president kg:6726 ?endTime .\",\n      \"kg:9596 kg:8702 ?warStartTime .\",\n      \"kg:9596 kg:8819 ?warEndTime .\",\n      \"FILTER(?startTime <= ?warEndTime && ?endTime >= ?warStartTime)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president ps:P6 wd:Q30 . ?president pq:P580 ?startTime . ?president pq:P582 ?endTime . wd:Q8740 wdt:P580 ?warStartTime . wd:Q8740 wdt:P582 ?warEndTime . FILTER(?startTime <= ?warEndTime && ?endTime >= ?warStartTime) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n    \"  wd:Q239467 wdt:P569 ?birthDate.\",\n    \"  ?artist wdt:P106 wd:Q1080605;\",\n    \"          wdt:P569 ?birthDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?artist WHERE { wd:Q239467 wdt:P569 ?birthDate. ?artist wdt:P106 wd:Q1080605; wdt:P569 ?birthDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q241665 is Rachel Stevens\nwdt:P569 is date of birth\nwdt:P106 is occupation\nwdt:P279 is subclass of\nwd:Q483501 is artist\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?artist WHERE {\",\n      \"?artist wdt:P569 wd:Q241665.\",\n      \"?artist wdt:P106 wd:Q483501.\"\n    ]\n  }\n ", "normal_query": "SELECT ?artist WHERE { ?artist wdt:P569 wd:Q241665. ?artist wdt:P106 wd:Q483501. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which artists were born on the same date as Rachel Stevens?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which artists were born on the same date as Rachel Stevens?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2702 is Rachel Stevens\nkg:2966 is date of birth\nkg:4710 is occupation\nkg:7646 is subclass of\nkg:0996 is artist\nkg:2966 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?artist WHERE {\",\n            \"?artist kg:2966 ?date .\",\n            \"kg:2702 kg:2966 ?date .\",\n            \"?artist kg:4710 kg:0996 .\",\n            \"FILTER(?artist != kg:2702)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?artist WHERE { ?artist wdt:P569 ?date . wd:Q241665 wdt:P569 ?date . ?artist wdt:P106 wd:Q483501 . FILTER(?artist != wd:Q241665) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the profession of Frank Herbert?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?profession WHERE {\",\n    \"  wd:Q134067 wdt:P106 ?profession.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?profession WHERE { wd:Q134067 wdt:P106 ?profession. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the profession of Frank Herbert?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7934 is Frank Herbert\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?occupation WHERE {\",\n      \"wd:Q7934 wdt:P106 ?occupation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?occupation WHERE { wd:Q7934 wdt:P106 ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the profession of Frank Herbert?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the profession of Frank Herbert?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6211 is Frank Herbert\nkg:4981 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?occupation\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/6211> <http://www.example.org/kg/4981> ?occupation.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?occupation WHERE { <http://www.example.org/kg//6211> <http://www.example.org/kg//4981> ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n    \"  wd:Q1234567 wdt:P1089 ?stadium.\",\n    \"  ?stadium wdt:P361 wd:Q1234567.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?stadium WHERE { wd:Q1234567 wdt:P1089 ?stadium. ?stadium wdt:P361 wd:Q1234567. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q128446 is FC Porto\nwdt:P115 is home venue\nwdt:P1083 is maximum capacity", "response": "{\n  \"query\": [\n    \"SELECT ?stadium WHERE {\",\n      \"wd:Q128446 wdt:P115 ?stadium.\",\n      \"?stadium wdt:P1083 ?capacity.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?stadium WHERE { wd:Q128446 wdt:P115 ?stadium. ?stadium wdt:P1083 ?capacity. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many seats does the home stadium of FC Porto have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many seats does the home stadium of FC Porto have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1293 is FC Porto\nkg:3596 is home venue\nkg:4727 is maximum capacity", "response": "{\n    \"query\": [\n        \"SELECT ?seat\",\n        \"WHERE {\",\n            \"kg:1293 kg:3596 ?venue.\",\n            \"?venue kg:4727 ?seat.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?seat WHERE { wd:Q128446 wdt:P115 ?venue. ?venue wdt:P1083 ?seat. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which frequent flyer program has the most airlines?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?program WHERE {\",\n    \"  ?program wdt:P31 wd:Q2064985.\",\n    \"  ?program wdt:P1793 ?airlines.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?airlines)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?program WHERE { ?program wdt:P31 wd:Q2064985. ?program wdt:P1793 ?airlines. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?airlines) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which frequent flyer program has the most airlines?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q46970 is airline\np:P4446 is reward program\nps:P4446 is reward program", "response": "{\n  \"query\": [\n    \"SELECT ?program WHERE {\",\n      \"?program wdt:P31 wd:Q46970.\",\n      \"?airline p:P4446 ?statement.\",\n      \"?statement ps:P4446 ?program.\",\n      \"?airline wdt:P31 wd:Q46970.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?program WHERE { ?program wdt:P31 wd:Q46970. ?airline p:P4446 ?statement. ?statement ps:P4446 ?program. ?airline wdt:P31 wd:Q46970. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which frequent flyer program has the most airlines?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which frequent flyer program has the most airlines?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7931 is instance of\nkg:8697 is airline\nkg:6223 is reward program\nkg:4848 is reward program", "response": "{\n    \"query\": [\n        \"SELECT ?program\",\n        \"WHERE {\",\n            \"?program kg:4848 ?airline.\",\n            \"?airline kg:8697 ?airlineName.\",\n            \"FILTER (isLiteral(?airlineName))\",\n            \"}\",\n            \"GROUP BY ?program\",\n            \"ORDER BY DESC(COUNT(DISTINCT ?airline))\",\n            \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?program WHERE { ?program ps:P4446 ?airline. ?airline wd:Q46970 ?airlineName. FILTER (isLiteral(?airlineName)) } GROUP BY ?program ORDER BY DESC(COUNT(DISTINCT ?airline)) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which European countries have a constitutional monarchy?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q640552.\",\n    \"  ?country wdt:P17 wd:Q46898.\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q640552. ?country wdt:P17 wd:Q46898. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which European countries have a constitutional monarchy?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P122 is basic form of government\nwd:Q41614 is constitutional monarchy", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P31 wd:Q6256.\",\n      \"?country wdt:P150 wd:Q458.\",\n      \"?country wdt:P122 wd:Q41614.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P150 wd:Q458. ?country wdt:P122 wd:Q41614. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which European countries have a constitutional monarchy?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which European countries have a constitutional monarchy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4311 is European Union\nkg:4161 is contains the administrative territorial entity\nkg:0520 is basic form of government\nkg:5768 is constitutional monarchy", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:4161 kg:4311 .\",\n            \"?country kg:0520 kg:5768 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P150 wd:Q458 . ?country wdt:P122 wd:Q41614 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have places with more than two caves?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?place wdt:P17 ?country.\",\n    \"  ?place wdt:P364 ?caveCount.\",\n    \"  FILTER(?caveCount > 2).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?place wdt:P17 ?country. ?place wdt:P364 ?caveCount. FILTER(?caveCount > 2). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have places with more than two caves?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35509 is cave\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?place wdt:P31 wd:Q35509.\",\n      \"?place wdt:P17 ?country.\",\n      \"SERVICE wikibase:around {\",\n        \"?place wdt:P31 wd:Q35509.\",\n        \"?place wdt:P17 ?country.\",\n        \"bd:serviceParam wikibase:radius \\\"2\\\".\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?place wdt:P31 wd:Q35509. ?place wdt:P17 ?country. SERVICE wikibase:around { ?place wdt:P31 wd:Q35509. ?place wdt:P17 ?country. bd:serviceParam wikibase:radius \"2\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have places with more than two caves?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries have places with more than two caves?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9167 is instance of\nkg:4381 is cave\nkg:1762 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?place kg:9167 kg:4381 .\",\n            \"?place kg:1762 ?country .\",\n            \"FILTER (COUNT(?place) > 2)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?place wdt:P31 wd:Q35509 . ?place wdt:P17 ?country . FILTER (COUNT(?place) > 2) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Angela Merkel’s birth name?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q567 wdt:P1476 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q567 wdt:P1476 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Angela Merkel’s birth name?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567 is Angela Merkel\nwdt:P1477 is birth name", "response": "{\n  \"query\": [\n    \"SELECT ?birthName WHERE {\",\n      \"wd:Q567 wdt:P1477 ?birthName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?birthName WHERE { wd:Q567 wdt:P1477 ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is Angela Merkel’s birth name?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is Angela Merkel’s birth name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7741 is Angela Merkel\nkg:3407 is birth name", "response": "{\n    \"query\": [\n        \"SELECT ?birthName\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/7741> <http://www.example.org/kg/3407> ?birthName.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?birthName WHERE { <http://www.example.org/kg//7741> <http://www.example.org/kg//3407> ?birthName. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the mayor of Berlin?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q64 wdt:P6 ?mayor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q64 wdt:P6 ?mayor . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Berlin?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P6 is head of government", "response": "{\n  \"query\": [\n    \"SELECT ?mayor WHERE {\",\n    \"  wd:Q64 wdt:P6 ?mayor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q64 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the mayor of Berlin?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the mayor of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5823 is Berlin\nkg:5984 is head of government", "response": "{\n    \"query\": [\n        \"SELECT ?mayor\",\n        \"WHERE {\",\n            \"kg:5823 kg:5984 ?mayor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?mayor WHERE { wd:Q64 wdt:P6 ?mayor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which countries in the European Union adopted the Euro?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P479 wd:Q8061.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P479 wd:Q8061. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries in the European Union adopted the Euro?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q458 is European Union\nwdt:P150 is contains the administrative territorial entity\nwdt:P38 is currency\nwd:Q4916 is euro", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?country wdt:P150 wd:Q458.\",\n      \"?country wdt:P38 wd:Q4916.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P150 wd:Q458. ?country wdt:P38 wd:Q4916. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries in the European Union adopted the Euro?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries in the European Union adopted the Euro?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4396 is European Union\nkg:1934 is contains the administrative territorial entity\nkg:4547 is currency\nkg:6859 is euro", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:1934 kg:4396 .\",\n            \"?country kg:4547 kg:6859 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P150 wd:Q458 . ?country wdt:P38 wd:Q4916 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which country was Bill Gates born in?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q769 wdt:P108 wd:Q345.\",\n    \"  wd:Q769 wdt:P19 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q769 wdt:P108 wd:Q345. wd:Q769 wdt:P19 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which country was Bill Gates born in?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5284 is Bill Gates\nwdt:P19 is place of birth\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q5284 wdt:P19 ?place.\",\n    \"  ?place wdt:P17 ?country.\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q5284 wdt:P19 ?place. ?place wdt:P17 ?country. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which country was Bill Gates born in?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which country was Bill Gates born in?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4141 is Bill Gates\nkg:4973 is place of birth\nkg:6146 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"kg:4141 kg:4973 ?place.\",\n            \"?place kg:6146 ?country.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q5284 wdt:P19 ?place. ?place wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  wd:Q54967 wdt:P1038 ?grandchild.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?grandchild WHERE { wd:Q54967 wdt:P1038 ?grandchild. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83233 is Jacques Cousteau\nwdt:P40 is child\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?grandchild WHERE {\",\n    \"  wd:Q83233 wdt:P40/^wdt:P40 ?grandchild.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?grandchild WHERE { wd:Q83233 wdt:P40/^wdt:P40 ?grandchild. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many grand-children did Jacques Cousteau have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many grand-children did Jacques Cousteau have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3588 is Jacques Cousteau\nkg:1573 is child\nkg:1573 is child", "response": "{\n    \"query\": [\n        \"SELECT ?grandchild\",\n        \"WHERE {\",\n            \"kg:3588 kg:1573 ?child.\",\n            \"?child kg:1573 ?grandchild.\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?grandchild WHERE { wd:Q83233 wdt:P40 ?child. ?child wdt:P40 ?grandchild. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all professional skateboarders from Sweden.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?skateboarder WHERE {\",\n    \"  ?skateboarder wdt:P31 wd:Q967245.\",\n    \"  ?skateboarder wdt:P108 wd:Q108004.\",\n    \"  ?skateboarder wdt:P19 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?skateboarder WHERE { ?skateboarder wdt:P31 wd:Q967245. ?skateboarder wdt:P108 wd:Q108004. ?skateboarder wdt:P19 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all professional skateboarders from Sweden.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P641 is sport\nwd:Q842284 is skateboarding\nwdt:P19 is place of birth\nwdt:P131 is located in the administrative territorial entity\nwd:Q34 is Sweden", "response": "{\n  \"query\": [\n    \"SELECT ?skateboarder WHERE {\",\n      \"?skateboarder wdt:P641 wd:Q842284.\",\n      \"?skateboarder wdt:P19 ?birthPlace.\",\n      \"?birthPlace wdt:P131 wd:Q34.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?skateboarder WHERE { ?skateboarder wdt:P641 wd:Q842284. ?skateboarder wdt:P19 ?birthPlace. ?birthPlace wdt:P131 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all professional skateboarders from Sweden.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all professional skateboarders from Sweden.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3199 is sport\nkg:2295 is skateboarding\nkg:5284 is place of birth\nkg:2937 is located in the administrative territorial entity\nkg:3100 is Sweden", "response": "{\n    \"query\": [\n        \"SELECT ?skateboarder\",\n        \"WHERE {\",\n            \"?skateboarder kg:3199 kg:2295 .\",\n            \"?skateboarder kg:5284 ?birthplace .\",\n            \"?birthplace kg:2937 kg:3100 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?skateboarder WHERE { ?skateboarder wdt:P641 wd:Q842284 . ?skateboarder wdt:P19 ?birthplace . ?birthplace wdt:P131 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Argentine films.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P495 wd:Q867.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P495 wd:Q867. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Argentine films.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q414 is Argentina", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P495 wd:Q414.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P495 wd:Q414. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Argentine films.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Argentine films.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4916 is instance of\nkg:9085 is film\nkg:6012 is country of origin\nkg:6146 is Argentina", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"?film kg:4916/kg:9085 .\",\n            \"?film kg:6012/kg:6146 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wd:Q11424 . ?film wdt:P495/wd:Q414 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How did Michael Jackson die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q570628.\",\n    \"  ?item rdfs:label \\\"Michael Jackson\\\"@en.\",\n    \"  ?item wdt:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q570628. ?item rdfs:label \"Michael Jackson\"@en. ?item wdt:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How did Michael Jackson die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P509 is cause of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathCause WHERE {\",\n      \"wd:Q2831 wdt:P509 ?deathCause.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathCause WHERE { wd:Q2831 wdt:P509 ?deathCause. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How did Michael Jackson die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3927 is Michael Jackson\nkg:0761 is cause of death", "response": "{\n    \"query\": [\n        \"SELECT ?death\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/3927> <http://www.example.org/kg/0761> ?death.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?death WHERE { <http://www.example.org/kg//3927> <http://www.example.org/kg//0761> ?death. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has been admitted latest?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q35657.\",\n    \"  ?state wdt:P402 ?admissionDate.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?admissionDate)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P402 ?admissionDate. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?admissionDate) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has been admitted latest?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P571 ?inception.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n      \"ORDER BY DESC(?inception)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P571 ?inception. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?inception) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which U.S. state has been admitted latest?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has been admitted latest?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0265 is instance of\nkg:2557 is U.S. state\nkg:1837 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"?state kg:0265 kg:2557 .\",\n            \"?state kg:1837 ?inceptionDate .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherState kg:0265 kg:2557 .\",\n                \"?otherState kg:1837 ?otherInceptionDate .\",\n                \"FILTER (?otherInceptionDate > ?inceptionDate)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P571 ?inceptionDate . FILTER NOT EXISTS { ?otherState wdt:P31 wd:Q35657 . ?otherState wdt:P571 ?otherInceptionDate . FILTER (?otherInceptionDate > ?inceptionDate) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which classes does the Millepede belong to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"  wd:Q106428 wdt:P31 ?class.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?class WHERE { wd:Q106428 wdt:P31 ?class. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which classes does the Millepede belong to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q11185669 is millipede\nwdt:P279 is subclass of", "response": "{\n  \"query\": [\n    \"SELECT ?class WHERE {\",\n    \"  wd:Q11185669 wdt:P279 ?class.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?class WHERE { wd:Q11185669 wdt:P279 ?class. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which classes does the Millepede belong to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which classes does the Millepede belong to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0355 is millipede\nkg:4290 is subclass of", "response": "{\n    \"query\": [\n        \"SELECT ?class\",\n        \"WHERE {\",\n            \"kg:0355 kg:4290 ?class.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?class WHERE { wd:Q11185669 wdt:P279 ?class. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the homepage of Forbes.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?homepage WHERE {\",\n    \"  wd:Q8426 wdt:P856 ?homepage.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?homepage WHERE { wd:Q8426 wdt:P856 ?homepage. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the homepage of Forbes.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25161472 is Forbes\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?homepage WHERE {\",\n    \"  wd:Q25161472 wdt:P856 ?homepage.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?homepage WHERE { wd:Q25161472 wdt:P856 ?homepage. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the homepage of Forbes.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the homepage of Forbes.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2247 is Forbes\nkg:2521 is official website", "response": "{\n    \"query\": [\n        \"SELECT ?homepage\",\n        \"WHERE {\",\n            \"kg:2247 kg:2521 ?homepage.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?homepage WHERE { wd:Q25161472 wdt:P856 ?homepage. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the husband of Amanda Palmer?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"  wd:Q106927 wdt:P3373 ?husband.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q106927 wdt:P3373 ?husband. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the husband of Amanda Palmer?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q240377 is Amanda Palmer", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"  wd:Q240377 wdt:P26 ?husband.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q240377 wdt:P26 ?husband. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the husband of Amanda Palmer?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the husband of Amanda Palmer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7753 is spouse\nkg:5663 is Amanda Palmer", "response": "{\n    \"query\": [\n        \"SELECT ?husband\",\n        \"WHERE {\",\n            \"kg:5663 kg:7753 ?husband.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q240377 wdt:P26 ?husband. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?painter WHERE {\",\n    \"  wd:Q1234567 wdt:P170 ?painter.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?painter WHERE { wd:Q1234567 wdt:P170 ?painter. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2246489 is The Storm on the Sea of Galilee\nwdt:P170 is creator", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n      \"wd:Q2246489 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q2246489 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who painted The Storm on the Sea of Galilee?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who painted The Storm on the Sea of Galilee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9947 is The Storm on the Sea of Galilee\nkg:9480 is creator", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:9947 kg:9480 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2246489 wdt:P170 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest place of Karakoram?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?highestPlace WHERE {\",\n    \"  wd:Q769408 p:P31/ps:P31/wdt:P279* wd:Q5557.\",\n    \"  wd:Q769408 wdt:P17 wd:Q843.\"\n    ]\n}", "normal_query": "SELECT ?highestPlace WHERE { wd:Q769408 p:P31/ps:P31/wdt:P279* wd:Q5557. wd:Q769408 wdt:P17 wd:Q843. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the highest place of Karakoram?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5469 is Karakoram\nwdt:P610 is highest point", "response": "{\n  \"query\": [\n    \"SELECT ?highestPlace WHERE {\",\n    \"  wd:Q5469 wdt:P610 ?highestPlace.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?highestPlace WHERE { wd:Q5469 wdt:P610 ?highestPlace. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the highest place of Karakoram?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest place of Karakoram?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1348 is Karakoram\nkg:5338 is highest point", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:1348 kg:5338 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q5469 wdt:P610 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Finland join the EU?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n    \"  wd:Q34 wdt:P1080 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q34 wdt:P1080 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Finland join the EU?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33 is Finland\np:P463 is member of\npq:P580 is start time\nps:P463 is member of\nwd:Q458 is European Union", "response": "{\n  \"query\": [\n    \"SELECT ?member WHERE {\",\n      \"wd:Q33 ps:P463 wd:Q458.\",\n      \"?member pq:P580 ?startTime.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?member WHERE { wd:Q33 ps:P463 wd:Q458. ?member pq:P580 ?startTime. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When did Finland join the EU?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Finland join the EU?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2680 is Finland\nkg:1277 is member of\nkg:1675 is start time\nkg:8680 is member of\nkg:6217 is European Union", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:2680 kg:1277 ?resource .\",\n            \"?resource kg:1675 ?startTime .\",\n            \"?resource kg:8680 kg:6217 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { wd:Q33 p:P463 ?resource . ?resource pq:P580 ?startTime . ?resource ps:P463 wd:Q458 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which actors play in Big Bang Theory?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q1064827 wdt:P161 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q1064827 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which actors play in Big Bang Theory?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8539 is The Big Bang Theory\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"wd:Q8539 wdt:P161 ?actor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q8539 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which actors play in Big Bang Theory?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which actors play in Big Bang Theory?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1737 is The Big Bang Theory\nkg:7599 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"kg:1737 kg:7599 ?actor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q8539 wdt:P161 ?actor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which computer scientist won an oscar?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?computerScientist WHERE {\",\n    \"  ?computerScientist wdt:P106 wd:Q36639.\",\n    \"  ?computerScientist wdt:P1476 ?award.\",\n    \"  ?award wdt:P2865 wd:Q11424.\"\n    ]\n}", "normal_query": "SELECT ?computerScientist WHERE { ?computerScientist wdt:P106 wd:Q36639. ?computerScientist wdt:P1476 ?award. ?award wdt:P2865 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which computer scientist won an oscar?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82594 is computer scientist\nwdt:P166 is award received\nwdt:P31 is instance of\nwd:Q19020 is Academy Awards", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P106 wd:Q82594.\",\n      \"?person wdt:P166 wd:Q19020.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q82594. ?person wdt:P166 wd:Q19020. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which computer scientist won an oscar?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which computer scientist won an oscar?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1794 is occupation\nkg:0345 is computer scientist\nkg:5117 is award received\nkg:5645 is instance of\nkg:6613 is Academy Awards", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:5645 kg:0345 .\",\n            \"?resource kg:5117 kg:6613 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q82594 . ?resource wdt:P166 wd:Q19020 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote Harry Potter?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q1084672 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q1084672 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who wrote Harry Potter?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8337 is Harry Potter\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q8337 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q8337 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who wrote Harry Potter?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who wrote Harry Potter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7554 is Harry Potter\nkg:8440 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:7554 kg:8440 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q8337 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me English actors starring in Lovesick.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q20645783 wdt:P161 ?actor.\",\n    \"  ?actor wdt:P106 wd:Q33999.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?actor WHERE { wd:Q20645783 wdt:P161 ?actor. ?actor wdt:P106 wd:Q33999. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me English actors starring in Lovesick.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12125895 is Lovesick\nwdt:P161 is cast member\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q145 is United Kingdom", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P161 wd:Q12125895.\",\n      \"?actor wdt:P19 ?birthPlace.\",\n      \"?birthPlace wdt:P17 wd:Q145.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P161 wd:Q12125895. ?actor wdt:P19 ?birthPlace. ?birthPlace wdt:P17 wd:Q145. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me English actors starring in Lovesick.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me English actors starring in Lovesick.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5043 is Lovesick\nkg:7156 is cast member\nkg:3179 is place of birth\nkg:8637 is country\nkg:3447 is United Kingdom", "response": "{\n    \"query\": [\n        \"SELECT ?actor\",\n        \"WHERE {\",\n            \"kg:5043 kg:7156 ?castMember.\",\n            \"?castMember kg:3179 ?placeOfBirth.\",\n            \"?placeOfBirth kg:8637 kg:3447.\",\n            \"?castMember rdf:type kg:Actor.\",\n            \"BIND(?castMember AS ?actor)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q12125895 wdt:P161 ?castMember. ?castMember wdt:P19 ?placeOfBirth. ?placeOfBirth wdt:P17 wd:Q145. ?castMember rdf:type kg:Actor. BIND(?castMember AS ?actor) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city was the president of Montenegro born?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q134067 wdt:P19 ?birthplace.\",\n    \"  ?birthplace wdt:P31/wdt:P279* wd:Q515.\",\n    \"  ?birthplace rdfs:label ?cityLabel.\",\n    \"  FILTER (lang(?cityLabel) = 'en').\",\n    \"  BIND(REPLACE(str(?cityLabel), \\\"^.*\\\\(([^\\\\)]*)\\\\)$\\\", \\\"$1\\\") AS ?city).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q134067 wdt:P19 ?birthplace. ?birthplace wdt:P31/wdt:P279* wd:Q515. ?birthplace rdfs:label ?cityLabel. FILTER (lang(?cityLabel) = 'en'). BIND(REPLACE(str(?cityLabel), \"^.*\\(([^\\)]*)\\)$\", \"$1\") AS ?city). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which city was the president of Montenegro born?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q236 is Montenegro\nwdt:P35 is head of state\nwdt:P19 is place of birth\nwdt:P31 is instance of\nwd:Q515 is city", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n      \"?president wdt:P35 wd:Q236.\",\n      \"?president wdt:P19 ?place.\",\n      \"?place wdt:P31 wd:Q515.\",\n      \"BIND(?place AS ?city)\"\n    ]\n  }\n ", "normal_query": "SELECT ?city WHERE { ?president wdt:P35 wd:Q236. ?president wdt:P19 ?place. ?place wdt:P31 wd:Q515. BIND(?place AS ?city) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which city was the president of Montenegro born?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which city was the president of Montenegro born?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6244 is Montenegro\nkg:0839 is head of state\nkg:4651 is place of birth\nkg:0895 is instance of\nkg:0321 is city", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"?president kg:0839 kg:6244 .\",\n            \"?president kg:0895 kg:0321 .\",\n            \"?president kg:4651 ?placeOfBirth .\",\n            \"?placeOfBirth kg:0895 kg:0321 .\",\n            \"?city kg:0895 kg:0321 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { ?president wdt:P35 wd:Q236 . ?president wdt:P31 wd:Q515 . ?president wdt:P19 ?placeOfBirth . ?placeOfBirth wdt:P31 wd:Q515 . ?city wdt:P31 wd:Q515 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has the highest population density?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q55;\",\n    \"          wdt:P1082 ?populationDensity.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?populationDensity)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q55; wdt:P1082 ?populationDensity. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?populationDensity) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has the highest population density?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1082 is population\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P1082 ?population.\",\n      \"?state wdt:P2046 ?area.\",\n      \"BIND(?population / ?area AS ?density).\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"} ORDER BY DESC(?density) LIMIT 1\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P1082 ?population. ?state wdt:P2046 ?area. BIND(?population / ?area AS ?density). SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?density) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which U.S. state has the highest population density?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has the highest population density?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6804 is instance of\nkg:6879 is U.S. state\nkg:9633 is population\nkg:4555 is area", "response": "{\n    \"query\": [\n        \"SELECT ?state\",\n        \"WHERE {\",\n            \"?state kg:6804 kg:6879 .\",\n            \"?state kg:9633 ?population .\",\n            \"?state kg:4555 ?area .\",\n            \"BIND((?population / ?area) AS ?density)\",\n            \"FILTER(?density = (SELECT MAX(?density2) WHERE {\",\n                \"?otherState kg:6804 kg:6879 .\",\n                \"?otherState kg:9633 ?pop .\",\n                \"?otherState kg:4555 ?are .\",\n                \"BIND((?pop / ?are) AS ?density2)\",\n            \"}))\"\n        ]\n    }\n ", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P1082 ?population . ?state wdt:P2046 ?area . BIND((?population / ?area) AS ?density) FILTER(?density = (SELECT MAX(?density2) WHERE { ?otherState wdt:P31 wd:Q35657 . ?otherState wdt:P1082 ?pop . ?otherState wdt:P2046 ?are . BIND((?pop / ?are) AS ?density2) })) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the longest river in China?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  ?river wdt:P31 wd:Q4026.\",\n    \"  ?river wdt:P17 wd:Q148.\",\n    \"  ?river wdt:P1059 ?length.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?length)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4026. ?river wdt:P17 wd:Q148. ?river wdt:P1059 ?length. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?length) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What is the longest river in China?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P17 is country\nwd:Q148 is People's Republic of China\nwdt:P2043 is length", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n      \"?river wdt:P31 wd:Q4022 .\",\n      \"?river wdt:P17 wd:Q148 .\",\n      \"SERVICE wikibase:around {\",\n        \"bd:serviceParam wikibase:center ?river .\",\n        \"bd:serviceParam wikibase:radius \\\"50\\\" .\",\n        \"?river wdt:P2043 ?length .\",\n        \"BIND(MAX(?length) AS ?maxLength) .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P17 wd:Q148 . SERVICE wikibase:around { bd:serviceParam wikibase:center ?river . bd:serviceParam wikibase:radius \"50\" . ?river wdt:P2043 ?length . BIND(MAX(?length) AS ?maxLength) . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the longest river in China?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the longest river in China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0268 is instance of\nkg:7764 is river\nkg:6821 is country\nkg:4374 is People's Republic of China\nkg:9050 is length", "response": "{\n    \"query\": [\n        \"SELECT ?river\",\n        \"WHERE {\",\n            \"?river kg:0268 kg:7764 .\",\n            \"?river kg:6821 kg:4374 .\",\n            \"?river kg:9050 ?length .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherRiver kg:0268 kg:7764 .\",\n                \"?otherRiver kg:6821 kg:4374 .\",\n                \"?otherRiver kg:9050 ?otherLength .\",\n                \"FILTER (?length < ?otherLength)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P17 wd:Q148 . ?river wdt:P2043 ?length . FILTER NOT EXISTS { ?otherRiver wdt:P31 wd:Q4022 . ?otherRiver wdt:P17 wd:Q148 . ?otherRiver wdt:P2043 ?otherLength . FILTER (?length < ?otherLength) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the area code of Berlin?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?areaCode WHERE {\",\n    \"  wd:Q64 wdt:P31 wd:Q207895.\",\n    \"  wd:Q64 wdt:P1015 ?areaCode.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?areaCode WHERE { wd:Q64 wdt:P31 wd:Q207895. wd:Q64 wdt:P1015 ?areaCode. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the area code of Berlin?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q64 is Berlin\nwdt:P473 is local dialing code", "response": "{\n  \"query\": [\n    \"SELECT ?areaCode WHERE {\",\n      \"wd:Q64 wdt:P473 ?areaCode.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?areaCode WHERE { wd:Q64 wdt:P473 ?areaCode. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the area code of Berlin?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the area code of Berlin?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1562 is Berlin\nkg:0879 is local dialing code", "response": "{\n    \"query\": [\n        \"SELECT ?areaCode WHERE {\",\n            \"kg:1562 kg:0879 ?areaCode.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?areaCode WHERE { wd:Q64 wdt:P473 ?areaCode. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many scientists graduated from an Ivy League university?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?scientist WHERE {\",\n    \"  ?scientist wdt:P106 wd:Q3396.\",\n    \"  ?scientist wdt:P547 ?university.\",\n    \"  ?university wdt:P286 wd:Q10769.\"\n    ]\n}", "normal_query": "SELECT ?scientist WHERE { ?scientist wdt:P106 wd:Q3396. ?scientist wdt:P547 ?university. ?university wdt:P286 wd:Q10769. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many scientists graduated from an Ivy League university?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q901 is scientist\nwdt:P69 is educated at\nwd:Q49113 is Ivy League\nwdt:P527 is has part(s)", "response": "{\n  \"query\": [\n    \"SELECT ?scientist WHERE {\",\n      \"?scientist wdt:P106 wd:Q901.\",\n      \"?scientist wdt:P69 ?university.\",\n      \"?university wdt:P527 wd:Q49113.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?scientist WHERE { ?scientist wdt:P106 wd:Q901. ?scientist wdt:P69 ?university. ?university wdt:P527 wd:Q49113. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many scientists graduated from an Ivy League university?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many scientists graduated from an Ivy League university?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1048 is occupation\nkg:6101 is scientist\nkg:2513 is educated at\nkg:4279 is Ivy League\nkg:2228 is has part(s)", "response": "{\n    \"query\": [\n        \"SELECT ?scientist WHERE {\",\n            \"?scientist kg:1048 kg:6101 .\",\n            \"?scientist kg:2513 ?university .\",\n            \"?university kg:2228 kg:4279 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?scientist WHERE { ?scientist wdt:P106 wd:Q901 . ?scientist wdt:P69 ?university . ?university wdt:P527 wd:Q49113 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which professional surfers were born in Australia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?surfer WHERE {\",\n    \"  ?surfer wdt:P31 wd:Q508624.\",\n    \"  ?surfer wdt:P19 wd:Q408.\"\n    ]\n}", "normal_query": "SELECT ?surfer WHERE { ?surfer wdt:P31 wd:Q508624. ?surfer wdt:P19 wd:Q408. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which professional surfers were born in Australia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q408 is Australia\nwdt:P106 is occupation\nwd:Q13561328 is surfer", "response": "{\n  \"query\": [\n    \"SELECT ?surfer WHERE {\",\n      \"?surfer wdt:P19 ?birthPlace.\",\n      \"?birthPlace wdt:P17 wd:Q408.\",\n      \"?surfer wdt:P106 wd:Q13561328.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?surfer WHERE { ?surfer wdt:P19 ?birthPlace. ?birthPlace wdt:P17 wd:Q408. ?surfer wdt:P106 wd:Q13561328. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which professional surfers were born in Australia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which professional surfers were born in Australia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4767 is place of birth\nkg:7914 is country\nkg:1900 is Australia\nkg:2462 is occupation\nkg:6340 is surfer", "response": "{\n    \"query\": [\n        \"SELECT ?surfer\",\n        \"WHERE {\",\n            \"?surfer kg:2462 kg:6340 .\",\n            \"?surfer kg:4767 ?birthPlace .\",\n            \"?birthPlace kg:7914 kg:1900 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?surfer WHERE { ?surfer wdt:P106 wd:Q13561328 . ?surfer wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q408 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Dutch parties.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n    \"  ?party wdt:P31 wd:Q286047.\",\n    \"  ?party wdt:P17 wd:Q55.\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P31 wd:Q286047. ?party wdt:P17 wd:Q55. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Dutch parties.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q7278 is political party", "response": "{\n  \"query\": [\n    \"SELECT ?party WHERE {\",\n      \"?party wdt:P17 wd:Q55.\",\n      \"?party wdt:P31 wd:Q7278.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P17 wd:Q55. ?party wdt:P31 wd:Q7278. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Dutch parties.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Dutch parties.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1972 is country\nkg:1749 is Netherlands\nkg:3085 is instance of\nkg:4788 is political party", "response": "{\n    \"query\": [\n        \"SELECT ?party\",\n        \"WHERE {\",\n            \"?party kg:3085 kg:4788 .\",\n            \"?party kg:1972 kg:1749 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?party WHERE { ?party wdt:P31 wd:Q7278 . ?party wdt:P17 wd:Q55 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many moons does Mars have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n    \"  wd:Q1347 wdt:P39 ?moon.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?moon WHERE { wd:Q1347 wdt:P39 ?moon. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many moons does Mars have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q111 is Mars\nwdt:P398 is child astronomical body", "response": "{\n  \"query\": [\n    \"SELECT ?moon WHERE {\",\n      \"wd:Q111 wdt:P398 ?moon.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?moon WHERE { wd:Q111 wdt:P398 ?moon. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many moons does Mars have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many moons does Mars have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5773 is Mars\nkg:8511 is child astronomical body", "response": "{\n    \"query\": [\n        \"SELECT ?moon\",\n        \"WHERE {\",\n            \"kg:5773 kg:8511 ?moon.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?moon WHERE { wd:Q111 wdt:P398 ?moon. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is Batman's real name?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q95074.\",\n    \"  ?item rdfs:label \\\"Batman\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q95074. ?item rdfs:label \"Batman\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is Batman's real name?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2695156 is Batman\nwdt:P460 is said to be the same as", "response": "{\n  \"query\": [\n    \"SELECT ?realName WHERE {\",\n    \"  wd:Q2695156 wdt:P460 ?realName.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?realName WHERE { wd:Q2695156 wdt:P460 ?realName. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is Batman's real name?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is Batman's real name?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8690 is Batman\nkg:9050 is said to be the same as", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:8690 kg:9050 ?resource .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q2695156 wdt:P460 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the author of WikiLeaks?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q10276 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q10276 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the author of WikiLeaks?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q359 is WikiLeaks\nwdt:P50 is author", "response": "{\n  \"query\": [\n    \"SELECT ?author WHERE {\",\n    \"  wd:Q359 wdt:P50 ?author.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q359 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the author of WikiLeaks?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the author of WikiLeaks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2318 is WikiLeaks\nkg:3776 is author", "response": "{\n    \"query\": [\n        \"SELECT ?author\",\n        \"WHERE {\",\n            \"kg:2318 kg:3776 ?author.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?author WHERE { wd:Q359 wdt:P50 ?author. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was Carlo Giuliani shot?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q105948 wdt:P2763 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q105948 wdt:P2763 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was Carlo Giuliani shot?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q164791 is Carlo Giuliani\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathDate WHERE {\",\n      \"wd:Q164791 wdt:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathDate WHERE { wd:Q164791 wdt:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was Carlo Giuliani shot?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was Carlo Giuliani shot?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5393 is Carlo Giuliani\nkg:1019 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5393 kg:1019 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q164791 wdt:P570 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the wife of President Lincoln?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q214 wdt:P35 ?wife.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q214 wdt:P35 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the wife of President Lincoln?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q91 is Abraham Lincoln\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q91 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q91 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the wife of President Lincoln?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the wife of President Lincoln?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0844 is Abraham Lincoln\nkg:0994 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?wife\",\n        \"WHERE {\",\n            \"kg:0844 kg:0994 ?wife.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q91 wdt:P26 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many awards has Bertrand Russell?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q5396 Q1087624 ?award.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q5396 Q1087624 ?award. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many awards has Bertrand Russell?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q33760 is Bertrand Russell\nwdt:P166 is award received", "response": "{\n  \"query\": [\n    \"SELECT ?award WHERE {\",\n    \"  wd:Q33760 wdt:P166 ?award.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q33760 wdt:P166 ?award. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many awards has Bertrand Russell?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many awards has Bertrand Russell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2307 is Bertrand Russell\nkg:0557 is award received", "response": "{\n    \"query\": [\n        \"SELECT ?award WHERE {\",\n        \"   kg:2307 kg:0557 ?award.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?award WHERE { wd:Q33760 wdt:P166 ?award. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Pamela Anderson a vegan?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q106487 wdt:P2868 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q106487 wdt:P2868 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Pamela Anderson a vegan?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q83325 is Pamela Anderson\nwdt:P1576 is lifestyle\nwd:Q83364 is vegetarianism", "response": "{\n  \"query\": [\n    \"SELECT ?lifestyle WHERE {\",\n      \"wd:Q83325 wdt:P1576 ?lifestyle.\",\n      \"?lifestyle wdt:P279* wd:Q83364.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?lifestyle WHERE { wd:Q83325 wdt:P1576 ?lifestyle. ?lifestyle wdt:P279* wd:Q83364. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Is Pamela Anderson a vegan?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Pamela Anderson a vegan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5099 is Pamela Anderson\nkg:1327 is lifestyle\nkg:6354 is vegetarianism", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5099 kg:1327 ?lifestyle.\",\n            \"?lifestyle rdfs:subClassOf* kg:6354.\",\n            \"BIND(?lifestyle AS ?resource)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q83325 wdt:P1576 ?lifestyle. ?lifestyle rdfs:subClassOf* wd:Q83364. BIND(?lifestyle AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which space probes were sent into orbit around the sun?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?probe WHERE {\",\n    \"  ?probe wdt:P31 wd:Q24678.\",\n    \"  ?probe wdt:P59 wd:Q108.\"\n    ]\n}", "normal_query": "SELECT ?probe WHERE { ?probe wdt:P31 wd:Q24678. ?probe wdt:P59 wd:Q108. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which space probes were sent into orbit around the sun?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P522 is type of orbit\nwd:Q737809 is heliocentric orbit", "response": "{\n  \"query\": [\n    \"SELECT ?probe WHERE {\",\n      \"?probe wdt:P522 wd:Q737809.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?probe WHERE { ?probe wdt:P522 wd:Q737809. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which space probes were sent into orbit around the sun?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which space probes were sent into orbit around the sun?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3989 is type of orbit\nkg:2459 is heliocentric orbit", "response": "{\n    \"query\": [\n        \"SELECT ?probe\",\n        \"WHERE {\",\n            \"?probe kg:3989 kg:2459.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?probe WHERE { ?probe wdt:P522 wd:Q737809. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q1234567 wdt:P25 ?daughter.\",\n    \"  ?daughter wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q1234567 wdt:P25 ?daughter. ?daughter wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q25310 is Robert F. Kennedy\nwdt:P40 is child\nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q25310 wdt:P40 ?daughter.\",\n      \"?daughter wdt:P21 wd:Q6581072.\",\n      \"?daughter wdt:P26 ?spouse.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { wd:Q25310 wdt:P40 ?daughter. ?daughter wdt:P21 wd:Q6581072. ?daughter wdt:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the daughter of Robert Kennedy married to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Robert Kennedy married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5083 is Robert F. Kennedy\nkg:1582 is child\nkg:5789 is sex or gender\nkg:3234 is female\nkg:0173 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"kg:5083 kg:1582 ?daughter.\",\n            \"?daughter kg:5789 kg:3234.\",\n            \"?daughter kg:0173 ?spouse.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q25310 wdt:P40 ?daughter. ?daughter wdt:P21 wd:Q6581072. ?daughter wdt:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many students does the Free University of Amsterdam have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?student WHERE {\",\n    \"  wd:Q1026437 wdt:P1082 ?student.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?student WHERE { wd:Q1026437 wdt:P1082 ?student. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many students does the Free University of Amsterdam have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q214341 is University of Amsterdam\nwdt:P2196 is students count", "response": "{\n  \"query\": [\n    \"SELECT ?students WHERE {\",\n    \"  wd:Q214341 wdt:P2196 ?students.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?students WHERE { wd:Q214341 wdt:P2196 ?students. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many students does the Free University of Amsterdam have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many students does the Free University of Amsterdam have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4066 is University of Amsterdam\nkg:8357 is students count", "response": "{\n    \"query\": [\n        \"SELECT ?studentsCount\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/4066> <http://www.example.org/kg/8357> ?studentsCount.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?studentsCount WHERE { <http://www.example.org/kg//4066> <http://www.example.org/kg//8357> ?studentsCount. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the revenue of IBM?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?revenue WHERE {\",\n    \"  wd:Q10624 wdt:P2137 ?revenue.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?revenue WHERE { wd:Q10624 wdt:P2137 ?revenue. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the revenue of IBM?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37156 is IBM\nwdt:P2139 is total revenue", "response": "{\n  \"query\": [\n    \"SELECT ?revenue WHERE {\",\n    \"  wd:Q37156 wdt:P2139 ?revenue.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?revenue WHERE { wd:Q37156 wdt:P2139 ?revenue. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the revenue of IBM?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the revenue of IBM?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8611 is IBM\nkg:4561 is total revenue", "response": "{\n    \"query\": [\n        \"SELECT ?revenue WHERE {\",\n            \"kg:8611 kg:4561 ?revenue.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?revenue WHERE { wd:Q37156 wdt:P2139 ?revenue. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How many James Bond movies do exist?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P179 wd:Q56068.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P179 wd:Q56068. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many James Bond movies do exist?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwd:Q2009573 is James Bond\nwdt:P144 is based on\nwdt:P674 is characters", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P144 wd:Q2009573.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P144 wd:Q2009573. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many James Bond movies do exist?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many James Bond movies do exist?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7008 is instance of\nkg:7673 is film\nkg:9402 is James Bond\nkg:9593 is based on\nkg:2301 is characters", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:7008/kg:7673 .\",\n            \"?movie kg:9402/kg:9593/kg:2301 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31/wd:Q11424 . ?movie wd:Q2009573/wdt:P144/wdt:P674 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who does the voice of Bart Simpson?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"  wd:Q219465 wdt:P725 ?voiceActor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?voiceActor WHERE { wd:Q219465 wdt:P725 ?voiceActor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who does the voice of Bart Simpson?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5480 is Bart Simpson\nwdt:P725 is voice actor", "response": "{\n  \"query\": [\n    \"SELECT ?voiceActor WHERE {\",\n    \"  wd:Q5480 wdt:P725 ?voiceActor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?voiceActor WHERE { wd:Q5480 wdt:P725 ?voiceActor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who does the voice of Bart Simpson?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who does the voice of Bart Simpson?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0013 is Bart Simpson\nkg:9734 is voice actor", "response": "{\n    \"query\": [\n        \"SELECT ?voiceActor\",\n        \"WHERE {\",\n            \"kg:0013 kg:9734 ?voiceActor.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?voiceActor WHERE { wd:Q5480 wdt:P725 ?voiceActor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was Tom Hanks married to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q23019 q:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q23019 q:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was Tom Hanks married to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2263 is Tom Hanks\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q2263 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2263 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was Tom Hanks married to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was Tom Hanks married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4790 is Tom Hanks\nkg:1852 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/4790> <http://www.example.org/kg/1852> ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { <http://www.example.org/kg//4790> <http://www.example.org/kg//1852> ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Through which countries does the Yenisei river flow?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q174508 wdt:P625 ?river.\",\n    \"  ?river wdt:P395 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q174508 wdt:P625 ?river. ?river wdt:P395 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Through which countries does the Yenisei river flow?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q78707 is Yenisey\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q78707 wdt:P625 ?river.\",\n    \"  ?river wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q78707 wdt:P625 ?river. ?river wdt:P17 ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Through which countries does the Yenisei river flow?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Through which countries does the Yenisei river flow?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4880 is Yenisey\nkg:6798 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"<http://example.org/kg/4880> <http://example.org/kg/6798> ?country.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { <http://example.org/kg//4880> <http://example.org/kg//6798> ?country. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all cars that are produced in Germany.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?car WHERE {\",\n    \"  ?car wdt:P17 wd:Q183.\",\n    \"  ?car wdt:P31 wd:Q429560.\"\n    ]\n}", "normal_query": "SELECT ?car WHERE { ?car wdt:P17 wd:Q183. ?car wdt:P31 wd:Q429560. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all cars that are produced in Germany.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q59773381 is automobile model series\nwdt:P176 is manufacturer\nwdt:P17 is country\nwd:Q183 is Germany\nwdt:P31 is instance of\nwd:Q786820 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?car WHERE {\",\n      \"?car wdt:P31 wd:Q59773381.\",\n      \"?car wdt:P176 ?manufacturer.\",\n      \"?manufacturer wdt:P17 wd:Q183.\",\n      \"?manufacturer wdt:P31 wd:Q786820.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?car WHERE { ?car wdt:P31 wd:Q59773381. ?car wdt:P176 ?manufacturer. ?manufacturer wdt:P17 wd:Q183. ?manufacturer wdt:P31 wd:Q786820. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all cars that are produced in Germany.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all cars that are produced in Germany.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4758 is instance of\nkg:4232 is automobile model series\nkg:9437 is manufacturer\nkg:8414 is country\nkg:9406 is Germany\nkg:4758 is instance of\nkg:2448 is automobile manufacturer", "response": "{\n  \"query\": [\n    \"SELECT ?car\",\n    \"WHERE {\",\n      \"?car kg:4232 kg:4758 .\",\n      \"?car kg:9437 ?manufacturer .\",\n      \"?manufacturer kg:4758 kg:2448 .\",\n      \"?manufacturer kg:8414 kg:9406 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?car WHERE { ?car wd:Q59773381 wdt:P31 . ?car wdt:P176 ?manufacturer . ?manufacturer wdt:P31 wd:Q786820 . ?manufacturer wdt:P17 wd:Q183 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Michael Jackson die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7184 wdt:P570 ?date.\",\n    \"  BIND(wd:Q7184 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q7184 wdt:P570 ?date. BIND(wd:Q7184 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Michael Jackson die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2831 is Michael Jackson\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathDate WHERE {\",\n      \"wd:Q2831 wdt:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathDate WHERE { wd:Q2831 wdt:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Michael Jackson die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Michael Jackson die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1405 is Michael Jackson\nkg:3025 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?deathDate\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1405> <http://example.org/kg/3025> ?deathDate.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?deathDate WHERE { <http://example.org/kg//1405> <http://example.org/kg//3025> ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest volcano in Africa?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?volcano WHERE {\",\n    \"  ?volcano wdt:P31 wd:Q8502.\",\n    \"  ?volcano wdt:P625 ?height.\",\n    \"  SERVICE wikibase:around {\",\n    \"    bd:serviceParam wikibase:center ?volcano.\",\n    \"    bd:serviceParam wikibase:radius \\\"100\\\".\",\n    \"    bd:serviceParam wikibase:distance ?dist.\",\n    \"  }\",\n    \"  FILTER(?height = MAX(?height))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?volcano WHERE { ?volcano wdt:P31 wd:Q8502. ?volcano wdt:P625 ?height. SERVICE wikibase:around { bd:serviceParam wikibase:center ?volcano. bd:serviceParam wikibase:radius \"100\". bd:serviceParam wikibase:distance ?dist. } FILTER(?height = MAX(?height)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest volcano in Africa?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P2044 is elevation above sea level", "response": "{\n  \"query\": [\n    \"SELECT ?volcano WHERE {\",\n      \"?volcano wdt:P31/wdt:P279* wd:Q8072 .\",\n      \"?volcano wdt:P30 wd:Q15 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?volcano WHERE { ?volcano wdt:P31/wdt:P279* wd:Q8072 . ?volcano wdt:P30 wd:Q15 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the highest volcano in Africa?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the highest volcano in Africa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2785 is continent\nkg:0205 is Africa\nkg:3352 is instance of\nkg:5941 is subclass of\nkg:4262 is volcano\nkg:0560 is elevation above sea level", "response": "{\n    \"query\": [\n        \"SELECT ?volcano\",\n        \"WHERE {\",\n            \"?volcano kg:3352 kg:4262 .\",\n            \"?volcano kg:5941 kg:2785 .\",\n            \"kg:0205 kg:5941 ?continent .\",\n            \"?volcano kg:0560 ?elevation .\",\n            \"FILTER(?continent = kg:0205)\",\n            \"BIND(MAX(?elevation) AS ?maxElevation)\",\n            \"FILTER(?elevation = ?maxElevation)\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?volcano WHERE { ?volcano wdt:P31 wd:Q8072 . ?volcano wdt:P279 wdt:P30 . wd:Q15 wdt:P279 ?continent . ?volcano wdt:P2044 ?elevation . FILTER(?continent = wd:Q15) BIND(MAX(?elevation) AS ?maxElevation) FILTER(?elevation = ?maxElevation) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n    \"  ?spacecraft wdt:P31 wd:Q40265.\",\n    \"  ?spacecraft wdt:P879 wd:Q1344.\"\n    ]\n}", "normal_query": "SELECT ?spacecraft WHERE { ?spacecraft wdt:P31 wd:Q40265. ?spacecraft wdt:P879 wd:Q1344. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q389459 is Mars rover", "response": "{\n  \"query\": [\n    \"SELECT ?spacecraft WHERE {\",\n      \"?spacecraft wdt:P31 wd:Q389459.\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?spacecraft WHERE { ?spacecraft wdt:P31 wd:Q389459. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all spacecrafts that flew to Mars.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all spacecrafts that flew to Mars.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4000 is instance of\nkg:9758 is Mars rover", "response": "{\n    \"query\": [\n        \"SELECT ?spacecraft\",\n        \"WHERE {\",\n            \"?spacecraft kg:4000 kg:MarsRover.\",\n            \"?spacecraft kg:9758 ?rover.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?spacecraft WHERE { ?spacecraft wdt:P31 kg:MarsRover. ?spacecraft wd:Q389459 ?rover. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all Czech movies.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P495 wd:Q26078.\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P495 wd:Q26078. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Show me all Czech movies.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11424 is film\nwdt:P495 is country of origin\nwd:Q213 is Czech Republic\nwdt:P495 is country of origin\nwd:Q33946 is Czechoslovakia", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"{ ?movie wdt:P495 wd:Q213. } UNION { ?movie wdt:P495 wd:Q33946. }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. { ?movie wdt:P495 wd:Q213. } UNION { ?movie wdt:P495 wd:Q33946. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Show me all Czech movies.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Show me all Czech movies.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2993 is instance of\nkg:6480 is film\nkg:2995 is country of origin\nkg:1556 is Czech Republic\nkg:2995 is country of origin\nkg:0212 is Czechoslovakia", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:2993 kg:6480 .\",\n            \"?movie kg:2995 kg:1556 .\",\n            \"FILTER (lang(?movie) = 'en')\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P495 wd:Q213 . FILTER (lang(?movie) = 'en') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all taikonauts.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut WHERE {\",\n    \"  ?taikonaut wdt:P106 wd:Q34578.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?taikonaut WHERE { ?taikonaut wdt:P106 wd:Q34578. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all taikonauts.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q11631 is astronaut\nwdt:P27 is country of citizenship\nwd:Q148 is People's Republic of China", "response": "{\n  \"query\": [\n    \"SELECT ?taikonaut WHERE {\",\n      \"?taikonaut wdt:P106 wd:Q11631.\",\n      \"?taikonaut wdt:P27 wd:Q148.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?taikonaut WHERE { ?taikonaut wdt:P106 wd:Q11631. ?taikonaut wdt:P27 wd:Q148. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all taikonauts.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all taikonauts.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4503 is occupation\nkg:9378 is astronaut\nkg:3941 is country of citizenship\nkg:8528 is People's Republic of China", "response": "{\n    \"query\": [\n        \"SELECT ?taikonaut WHERE {\",\n            \"?taikonaut kg:4503 kg:9378 .\",\n            \"?taikonaut kg:3941 kg:8528 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?taikonaut WHERE { ?taikonaut wdt:P106 wd:Q11631 . ?taikonaut wdt:P27 wd:Q148 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which countries have more than ten volcanoes?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P407 ?volcanoCount.\",\n    \"  FILTER(?volcanoCount > 10).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P407 ?volcanoCount. FILTER(?volcanoCount > 10). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have more than ten volcanoes?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q8072 is volcano\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q8072 is volcano\nwdt:P17 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  ?volcano wdt:P31/wdt:P279* wd:Q8072.\",\n    \"  ?volcano wdt:P17 ?country.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"GROUP BY ?country HAVING (COUNT(?volcano) > 10)\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { ?volcano wdt:P31/wdt:P279* wd:Q8072. ?volcano wdt:P17 ?country. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } GROUP BY ?country HAVING (COUNT(?volcano) > 10) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries have more than ten volcanoes?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries have more than ten volcanoes?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1994 is instance of\nkg:7112 is volcano\nkg:1994 is instance of\nkg:0630 is subclass of\nkg:7112 is volcano\nkg:3464 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?country kg:0630 kg:3464 .\",\n            \"?volcano kg:1994 kg:7112 .\",\n            \"?country kg:3464 ?volcano .\",\n            \"FILTER (COUNT(?volcano) > 10)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?country wdt:P279 wdt:P17 . ?volcano wdt:P31 wd:Q8072 . ?country wdt:P17 ?volcano . FILTER (COUNT(?volcano) > 10) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Dracula's creator die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q106428 p:P50 ?statement.\",\n    \"  ?statement ps:P50 ?creator.\",\n    \"  ?creator wdt:P575 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q106428 p:P50 ?statement. ?statement ps:P50 ?creator. ?creator wdt:P575 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Dracula's creator die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3266236 is Count Dracula\nwdt:P170 is creator\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n      \"?creator wdt:P170 wd:Q3266236.\",\n      \"?creator wdt:P570 ?dateOfDeath.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?creator WHERE { ?creator wdt:P170 wd:Q3266236. ?creator wdt:P570 ?dateOfDeath. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When did Dracula's creator die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Dracula's creator die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is Count Dracula\nkg:7234 is creator\nkg:3219 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:7234 kg:7006 .\",\n            \"?resource kg:3219 ?dateOfDeath .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P170 wd:Q3266236 . ?resource wdt:P570 ?dateOfDeath . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created English Wikipedia?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q35079 wdt:P170 ?creator.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?creator WHERE { wd:Q35079 wdt:P170 ?creator. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who created English Wikipedia?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q52 is Wikipedia\nwdt:P170 is creator\nwdt:P31 is instance of\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?creator WHERE {\",\n    \"  wd:Q52 wdt:P170 ?creator.\",\n    \"  ?creator wdt:P31 wd:Q5.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?creator WHERE { wd:Q52 wdt:P170 ?creator. ?creator wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who created English Wikipedia?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who created English Wikipedia?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8535 is Wikipedia\nkg:0687 is creator\nkg:4965 is instance of\nkg:7883 is human", "response": "{\n    \"query\": [\n        \"SELECT ?creator WHERE {\",\n            \"kg:8535 kg:0687 ?creator.\",\n            \"?creator kg:4965 kg:7883.\"\n        ]\n    }\n ", "normal_query": "SELECT ?creator WHERE { wd:Q52 wdt:P170 ?creator. ?creator wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all female German chancellors.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n    \"  ?chancellor wdt:P31 wd:Q6581072.\",\n    \"  ?chancellor wdt:P106 wd:Q499327.\",\n    \"  ?chancellor wdt:P39 wd:Q108649.\"\n    ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P31 wd:Q6581072. ?chancellor wdt:P106 wd:Q499327. ?chancellor wdt:P39 wd:Q108649. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all female German chancellors.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is sex or gender\nwd:Q6581072 is female\nwdt:P39 is position held\nwd:Q4970706 is Federal Chancellor of Germany", "response": "{\n  \"query\": [\n    \"SELECT ?chancellor WHERE {\",\n      \"?chancellor wdt:P39 wd:Q4970706.\",\n      \"?chancellor wdt:P21 wd:Q6581072.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P39 wd:Q4970706. ?chancellor wdt:P21 wd:Q6581072. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all female German chancellors.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all female German chancellors.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3087 is sex or gender\nkg:5264 is female\nkg:4281 is position held\nkg:0263 is Federal Chancellor of Germany", "response": "{\n    \"query\": [\n        \"SELECT ?chancellor\",\n        \"WHERE {\",\n            \"?chancellor kg:3087 kg:5264 .\",\n            \"?chancellor kg:4281 kg:0263 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?chancellor WHERE { ?chancellor wdt:P21 wd:Q6581072 . ?chancellor wdt:P39 wd:Q4970706 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who owns Aldi?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n    \"  wd:Q105627 wdt:P1344 ?owner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?owner WHERE { wd:Q105627 wdt:P1344 ?owner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who owns Aldi?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125054 is Aldi\nwdt:P355 is has subsidiary", "response": "{\n  \"query\": [\n    \"SELECT ?owner WHERE {\",\n      \"wd:Q125054 wdt:P355 ?subsidiary.\",\n      \"?subsidiary wdt:P355 ?owner.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?owner WHERE { wd:Q125054 wdt:P355 ?subsidiary. ?subsidiary wdt:P355 ?owner. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who owns Aldi?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who owns Aldi?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2823 is Aldi\nkg:3490 is has subsidiary", "response": "{\n    \"query\": [\n        \"SELECT ?owner WHERE {\",\n            \"kg:2823 kg:3490 ?subsidiary.\",\n            \"?subsidiary kg:3490 ?owner.\"\n        ]\n    }\n ", "normal_query": "SELECT ?owner WHERE { wd:Q125054 wdt:P355 ?subsidiary. ?subsidiary wdt:P355 ?owner. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was influenced by Socrates?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P1480 wd:Q7263.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1480 wd:Q7263. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was influenced by Socrates?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q5 is human\nwdt:P737 is influenced by\nwd:Q913 is Socrates", "response": "{\n  \"query\": [\n    \"SELECT ?influenced WHERE {\",\n      \"?influenced wdt:P737 wd:Q913.\",\n      \"?influenced wdt:P31 wd:Q5.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?influenced WHERE { ?influenced wdt:P737 wd:Q913. ?influenced wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was influenced by Socrates?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was influenced by Socrates?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7202 is instance of\nkg:2379 is human\nkg:1789 is influenced by\nkg:7075 is Socrates", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:1789 kg:7202.\",\n            \"?resource kg:2379 kg:7075.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P737 wdt:P31. ?resource wd:Q5 wd:Q913. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How deep is Lake Chiemsee?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?depth WHERE {\",\n    \"  wd:Q15046 wdt:P2047 ?depth.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?depth WHERE { wd:Q15046 wdt:P2047 ?depth. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How deep is Lake Chiemsee?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4138 is Chiemsee\nwdt:P4511 is vertical depth", "response": "{\n  \"query\": [\n    \"SELECT ?depth WHERE {\",\n      \"wd:Q4138 wdt:P4511 ?depth.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?depth WHERE { wd:Q4138 wdt:P4511 ?depth. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How deep is Lake Chiemsee?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How deep is Lake Chiemsee?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0491 is Chiemsee\nkg:7474 is vertical depth", "response": "{\n    \"query\": [\n        \"SELECT ?depth\",\n        \"WHERE {\",\n            \"kg:0491 kg:7474 ?depth.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?depth WHERE { wd:Q4138 wdt:P4511 ?depth. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who were the parents of Queen Victoria?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q463 wdt:P25 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q463 wdt:P25 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who were the parents of Queen Victoria?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9439 is Victoria\nwdt:P22 is father\nwdt:P25 is mother", "response": "{\n  \"query\": [\n    \"SELECT ?father ?mother WHERE {\",\n    \"  wd:Q9439 wdt:P22 ?father.\",\n    \"  wd:Q9439 wdt:P25 ?mother.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?father ?mother WHERE { wd:Q9439 wdt:P22 ?father. wd:Q9439 wdt:P25 ?mother. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who were the parents of Queen Victoria?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who were the parents of Queen Victoria?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9270 is Victoria\nkg:8401 is father\nkg:9007 is mother", "response": "{\n    \"query\": [\n        \"SELECT ?parent\",\n        \"WHERE {\",\n            \"kg:9270 kg:8401 ?father.\",\n            \"kg:9270 kg:9007 ?mother.\",\n            \"VALUES ?parent {?father ?mother}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q9439 wdt:P22 ?father. wd:Q9439 wdt:P25 ?mother. VALUES ?parent {?father ?mother} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Are there any castles in the United States?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?castle WHERE {\",\n    \"  ?castle wdt:P31 wd:Q39576.\",\n    \"  ?castle wdt:P17 wd:Q30.\"\n    ]\n}", "normal_query": "SELECT ?castle WHERE { ?castle wdt:P31 wd:Q39576. ?castle wdt:P17 wd:Q30. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Are there any castles in the United States?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q23413 is castle\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23413 is castle\nwdt:P17 is country\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?castle WHERE {\",\n      \"?castle wdt:P31/wdt:P279* wd:Q23413.\",\n      \"?castle wdt:P17 wd:Q30.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?castle WHERE { ?castle wdt:P31/wdt:P279* wd:Q23413. ?castle wdt:P17 wd:Q30. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Are there any castles in the United States?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Are there any castles in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2659 is instance of\nkg:9811 is castle\nkg:2659 is instance of\nkg:0624 is subclass of\nkg:9811 is castle\nkg:6840 is country\nkg:2187 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?castle\",\n    \"WHERE {\",\n      \"?castle kg:2659 kg:9811 .\",\n      \"?castle kg:6840 kg:2187 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?castle WHERE { ?castle wdt:P31 wd:Q23413 . ?castle wdt:P17 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me a list of all critically endangered birds.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bird WHERE {\",\n    \"  ?bird wdt:P31 wd:Q7248.\",\n    \"  ?bird wdt:P1416 wd:Q50967.\"\n    ]\n}", "normal_query": "SELECT ?bird WHERE { ?bird wdt:P31 wd:Q7248. ?bird wdt:P1416 wd:Q50967. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me a list of all critically endangered birds.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P171 is parent taxon\nwd:Q5113 is bird\nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?bird WHERE {\",\n      \"?bird wdt:P171 wd:Q5113.\",\n      \"?bird wdt:P141 wd:Q219127.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bird WHERE { ?bird wdt:P171 wd:Q5113. ?bird wdt:P141 wd:Q219127. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me a list of all critically endangered birds.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me a list of all critically endangered birds.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7081 is parent taxon\nkg:9693 is bird\nkg:6932 is IUCN conservation status\nkg:4268 is Critically Endangered", "response": "{\n    \"query\": [\n        \"SELECT ?bird\",\n        \"WHERE {\",\n            \"?bird kg:9693 kg:7081 .\",\n            \"?bird kg:6932 kg:4268 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?bird WHERE { ?bird wd:Q5113 wdt:P171 . ?bird wdt:P141 wd:Q219127 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which countries are connected by the Rhine?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n    \"  wd:Q1093 Q286745 ?river.\",\n    \"  ?river wdt:P17 ?country.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country WHERE { wd:Q1093 Q286745 ?river. ?river wdt:P17 ?country. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which countries are connected by the Rhine?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q584 is Rhine\nwdt:P17 is country\nwdt:P31 is instance of\nwd:Q6256 is country", "response": "{\n  \"query\": [\n    \"SELECT ?country WHERE {\",\n      \"?river wdt:P31 wd:Q584.\",\n      \"?river wdt:P17 ?country.\",\n      \"?country wdt:P31 wd:Q6256.\"\n    ]\n  }\n ", "normal_query": "SELECT ?country WHERE { ?river wdt:P31 wd:Q584. ?river wdt:P17 ?country. ?country wdt:P31 wd:Q6256. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which countries are connected by the Rhine?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which countries are connected by the Rhine?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7366 is Rhine\nkg:2020 is country\nkg:7795 is instance of\nkg:4041 is country", "response": "{\n    \"query\": [\n        \"SELECT ?country\",\n        \"WHERE {\",\n            \"?river kg:7795 kg:7366 .\",\n            \"?river kg:4041 ?country .\",\n            \"?country kg:7795 kg:2020 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?country WHERE { ?river wdt:P31 wd:Q584 . ?river wd:Q6256 ?country . ?country wdt:P31 wdt:P17 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the father of Queen Elizabeth II?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE {\",\n    \"  wd:Q467928 p:P22 ?statement.\",\n    \"  ?statement ps:P22 ?father.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father WHERE { wd:Q467928 p:P22 ?statement. ?statement ps:P22 ?father. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was the father of Queen Elizabeth II?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9682 is Elizabeth II\nwdt:P22 is father", "response": "{\n  \"query\": [\n    \"SELECT ?father WHERE {\",\n    \"  wd:Q9682 wdt:P22 ?father.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?father WHERE { wd:Q9682 wdt:P22 ?father. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was the father of Queen Elizabeth II?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the father of Queen Elizabeth II?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1364 is Elizabeth II\nkg:0150 is father", "response": "{\n    \"query\": [\n        \"SELECT ?father\",\n        \"WHERE {\",\n            \"<http://example.org/kg/1364> <http://example.org/kg/0150> ?father.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?father WHERE { <http://example.org/kg//1364> <http://example.org/kg//0150> ?father. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all chemical elements.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?element WHERE {\",\n    \"  ?element wdt:P31 wd:Q11266439.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?element WHERE { ?element wdt:P31 wd:Q11266439. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all chemical elements.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q11344 is chemical element", "response": "{\n  \"query\": [\n    \"SELECT ?element\",\n    \"WHERE {\",\n      \"?element wdt:P31 wd:Q11344.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?element WHERE { ?element wdt:P31 wd:Q11344. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all chemical elements.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all chemical elements.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6296 is instance of\nkg:3198 is chemical element", "response": "{\n    \"query\": [\n        \"SELECT ?element\",\n        \"WHERE {\",\n            \"?element kg:6296 kg:3198.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?element WHERE { ?element wdt:P31 wd:Q11344. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me all American presidents of the last 20 years.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?president WHERE {\",\n        \"  ?president wdt:P31 wd:Q178096.\",\n        \"  ?president wdt:P27 wd:Q30.\",\n        \"  ?president wdt:P39 wd:Q1454874.\",\n        \"  ?president wdt:P580 ?startDate.\",\n        \"  FILTER(?startDate >= \\\"-2023\\\"^^xsd:dateTime).\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { ?president wdt:P31 wd:Q178096. ?president wdt:P27 wd:Q30. ?president wdt:P39 wd:Q1454874. ?president wdt:P580 ?startDate. FILTER(?startDate >= \"-2023\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all American presidents of the last 20 years.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P582 is end time", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n      \"?president p:P39/ps:P39 wd:Q11696.\",\n      \"?position pq:P582 ?endTime.\",\n      \"FILTER(?endTime >= \\\"2004-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?president WHERE { ?president p:P39/ps:P39 wd:Q11696. ?position pq:P582 ?endTime. FILTER(?endTime >= \"2004-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all American presidents of the last 20 years.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all American presidents of the last 20 years.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3971 is position held\nkg:3124 is position held\nkg:4794 is President of the United States\nkg:9895 is end time", "response": "{\n    \"query\": [\n        \"SELECT ?president\",\n        \"WHERE {\",\n            \"?president kg:3971 kg:4794 .\",\n            \"?president kg:3124 ?endTime .\",\n            \"FILTER(?endTime > \\\"2003-01-01\\\"^^xsd:date) .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { ?president p:P39 wd:Q11696 . ?president ps:P39 ?endTime . FILTER(?endTime > \"2003-01-01\"^^xsd:date) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q10726485 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10726485 wdt:P1476 ?releaseDate.\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P1476 ?releaseDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q10726485 wdt:P31 wd:Q11424. wd:Q10726485 wdt:P1476 ?releaseDate. ?movie wdt:P31 wd:Q11424. ?movie wdt:P1476 ?releaseDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6667101 is Worst Case Scenario\nwdt:P577 is publication date", "response": "{\n  \"query\": [\n    \"SELECT ?cinema WHERE {\",\n      \"wd:Q6667101 wdt:P577 ?publicationDate.\",\n      \"?cinema wdt:P31 wd:Q28942; wdt:P17 wd:Q55; wdt:P131 ?location.\",\n      \"?location wdt:P625 ?coordinates.\",\n      \"SERVICE wikibase:around {\",\n        \"?cinema wdt:P625 ?coords.\",\n        \"bd:serviceParam wikibase:center ?coordinates.\",\n        \"bd:serviceParam wikibase:radius \\\"100\\\".\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinema WHERE { wd:Q6667101 wdt:P577 ?publicationDate. ?cinema wdt:P31 wd:Q28942; wdt:P17 wd:Q55; wdt:P131 ?location. ?location wdt:P625 ?coordinates. SERVICE wikibase:around { ?cinema wdt:P625 ?coords. bd:serviceParam wikibase:center ?coordinates. bd:serviceParam wikibase:radius \"100\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7286 is Worst Case Scenario\nkg:0465 is publication date", "response": "{\n    \"query\": [\n        \"SELECT ?cinema WHERE {\",\n            \"kg:7286 kg:hasPublicationDate ?date.\",\n            \"?cinema kg:hasPublicationDate ?date.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?cinema WHERE { wd:Q6667101 kg:hasPublicationDate ?date. ?cinema kg:hasPublicationDate ?date. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Whom did Lance Bass marry?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q106945 wdt:P26 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q106945 wdt:P26 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Whom did Lance Bass marry?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q443120 is Lance Bass\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q443120 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q443120 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Whom did Lance Bass marry?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Whom did Lance Bass marry?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6052 is Lance Bass\nkg:2399 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/6052> <http://www.example.org/kg/2399> ?spouse.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { <http://www.example.org/kg//6052> <http://www.example.org/kg//2399> ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What languages are spoken in Pakistan?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q843 Q1726509 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q843 Q1726509 ?language. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What languages are spoken in Pakistan?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q843 is Pakistan\nwdt:P2936 is language used", "response": "{\n  \"query\": [\n    \"SELECT ?language WHERE {\",\n    \"  wd:Q843 wdt:P2936 ?language.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q843 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What languages are spoken in Pakistan?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What languages are spoken in Pakistan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6648 is Pakistan\nkg:4682 is language used", "response": "{\n    \"query\": [\n        \"SELECT ?language\",\n        \"WHERE {\",\n            \"kg:6648 kg:4682 ?language.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?language WHERE { wd:Q843 wdt:P2936 ?language. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q13429 wdt:P40 ?daughter.\",\n    \"  ?daughter wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q13429 wdt:P40 ?daughter. ?daughter wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124 is Bill Clinton\nwdt:P40 is child\nwdt:P26 is spouse", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q1124 wdt:P40 ?daughter.\",\n      \"?daughter wdt:P26 ?spouse.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { wd:Q1124 wdt:P40 ?daughter. ?daughter wdt:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the daughter of Bill Clinton married to?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the daughter of Bill Clinton married to?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9068 is Bill Clinton\nkg:6665 is child\nkg:3317 is spouse", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"kg:9068 kg:6665 ?daughter.\",\n            \"?daughter kg:3317 ?spouse.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q1124 wdt:P40 ?daughter. ?daughter wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was on the Apollo 11 mission?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?missionMember WHERE {\",\n        \"  wd:Q3654 Q2098179 ?missionMember.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?missionMember WHERE { wd:Q3654 Q2098179 ?missionMember. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was on the Apollo 11 mission?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q43653 is Apollo 11\nwdt:P1029 is crew member(s)", "response": "{\n  \"query\": [\n    \"SELECT ?crew WHERE {\",\n      \"wd:Q43653 wdt:P1029 ?crew.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?crew WHERE { wd:Q43653 wdt:P1029 ?crew. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was on the Apollo 11 mission?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was on the Apollo 11 mission?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4688 is Apollo 11\nkg:5941 is crew member(s)", "response": "{\n    \"query\": [\n        \"SELECT ?crew WHERE {\",\n            \"kg:4688 kg:5941 ?crew.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?crew WHERE { wd:Q43653 wdt:P1029 ?crew. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who was called Scarface?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P1476 \\\"Scarface\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1476 \"Scarface\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was called Scarface?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1449 is nickname", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1449 \\\"Scarface\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1449 \"Scarface\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was called Scarface?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was called Scarface?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6080 is nickname", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:nickname \\\"Scarface\\\" .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:nickname \"Scarface\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which rivers flow into the North Sea?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n    \"  ?river wdt:P31 wd:Q4026.\",\n    \"  ?river wdt:P798 wd:Q546.\"\n    ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4026. ?river wdt:P798 wd:Q546. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which rivers flow into the North Sea?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q4022 is river\nwdt:P403 is mouth of the watercourse\nwd:Q1693 is North Sea", "response": "{\n  \"query\": [\n    \"SELECT ?river WHERE {\",\n      \"?river wdt:P31 wd:Q4022 .\",\n      \"?river wdt:P403 wd:Q1693 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P403 wd:Q1693 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which rivers flow into the North Sea?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which rivers flow into the North Sea?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4180 is instance of\nkg:3859 is river\nkg:2573 is mouth of the watercourse\nkg:7040 is North Sea", "response": "{\n    \"query\": [\n        \"SELECT ?river\",\n        \"WHERE {\",\n            \"?river kg:4180 kg:3859 .\",\n            \"?river kg:2573 ?mouth .\",\n            \"?mouth kg:4180 kg:7040 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?river WHERE { ?river wdt:P31 wd:Q4022 . ?river wdt:P403 ?mouth . ?mouth wdt:P31 wd:Q1693 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Fort Knox located?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"  wd:Q152408 p:P625 ?statement.\",\n    \"  ?statement ps:P625 ?location.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?location WHERE { wd:Q152408 p:P625 ?statement. ?statement ps:P625 ?location. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Fort Knox located?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8962067 is Fort Knox\nwdt:P131 is located in the administrative territorial entity", "response": "{\n  \"query\": [\n    \"SELECT ?location WHERE {\",\n    \"  wd:Q8962067 wdt:P131 ?location.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?location WHERE { wd:Q8962067 wdt:P131 ?location. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where is Fort Knox located?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where is Fort Knox located?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5049 is Fort Knox\nkg:8699 is located in the administrative territorial entity", "response": "{\n    \"query\": [\n        \"SELECT ?location WHERE {\",\n            \"<http://example.org/kg/5049> <http://example.org/kg/8699> ?location .\"\n        ]\n    }\n ", "normal_query": "SELECT ?location WHERE { <http://example.org/kg//5049> <http://example.org/kg//8699> ?location . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many emperors did China have?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n    \"  ?emperor wdt:P31 wd:Q33967.\",\n    \"  ?emperor wdt:P27 wd:Q148.\"\n    ]\n}", "normal_query": "SELECT ?emperor WHERE { ?emperor wdt:P31 wd:Q33967. ?emperor wdt:P27 wd:Q148. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many emperors did China have?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P39 is position held\nwd:Q268218 is Emperor of China", "response": "{\n  \"query\": [\n    \"SELECT ?emperor WHERE {\",\n      \"?emperor wdt:P39 wd:Q268218.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?emperor WHERE { ?emperor wdt:P39 wd:Q268218. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many emperors did China have?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many emperors did China have?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6554 is position held\nkg:0781 is Emperor of China", "response": "{\n    \"query\": [\n        \"SELECT ?emperor\",\n        \"WHERE {\",\n            \"?emperor kg:0781 kg:6554.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?emperor WHERE { ?emperor wd:Q268218 wdt:P39. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?turtle WHERE {\",\n    \"  ?turtle wdt:P31 wd:Q206498.\",\n    \"  ?turtle rdfs:label ?name.\",\n    \"  FILTER (LANG(?name) = 'en').\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?turtle WHERE { ?turtle wdt:P31 wd:Q206498. ?turtle rdfs:label ?name. FILTER (LANG(?name) = 'en'). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P361 is part of\nwd:Q1381762 is Teenage Mutant Ninja Turtles", "response": "{\n  \"query\": [\n    \"SELECT ?turtle WHERE {\",\n      \"?turtle wdt:P361 wd:Q1381762.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?turtle WHERE { ?turtle wdt:P361 wd:Q1381762. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What are the names of the Teenage Mutant Ninja Turtles?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the names of the Teenage Mutant Ninja Turtles?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0588 is part of\nkg:3896 is Teenage Mutant Ninja Turtles", "response": "{\n    \"query\": [\n        \"SELECT ?turtle\",\n        \"WHERE {\",\n            \"?turtle kg:0588 kg:3896.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?turtle WHERE { ?turtle wdt:P361 wd:Q1381762. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where does Piccadilly start?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?start WHERE {\",\n    \"  wd:Q152468 wdt:P793 ?start.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?start WHERE { wd:Q152468 wdt:P793 ?start. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Where does Piccadilly start?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1124023 is Piccadilly\nwdt:P559 is terminus", "response": "{\n  \"query\": [\n    \"SELECT ?start WHERE {\",\n    \"  wd:Q1124023 wdt:P559 ?start.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?start WHERE { wd:Q1124023 wdt:P559 ?start. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Where does Piccadilly start?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Where does Piccadilly start?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5579 is Piccadilly\nkg:8836 is terminus", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5579 kg:8836 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1124023 wdt:P559 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the name of the university where Obama's wife studied?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q1062974 wdt:P69 ?spouse.\",\n    \"  ?spouse wdt:P53 ?university.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q1062974 wdt:P69 ?spouse. ?spouse wdt:P53 ?university. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the name of the university where Obama's wife studied?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76 is Barack Obama\nwdt:P26 is spouse\nwdt:P69 is educated at\nwdt:P361 is part of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q3918 is university", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n    \"  wd:Q76 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P69 ?education.\",\n    \"  ?education wdt:P361 ?university.\",\n    \"  ?university wdt:P31 wd:Q3918.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q76 wdt:P26 ?spouse. ?spouse wdt:P69 ?education. ?education wdt:P361 ?university. ?university wdt:P31 wd:Q3918. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the name of the university where Obama's wife studied?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the name of the university where Obama's wife studied?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4581 is Barack Obama\nkg:1069 is spouse\nkg:3662 is educated at\nkg:9515 is part of\nkg:6870 is instance of\nkg:9045 is subclass of\nkg:8505 is university", "response": "{\n  \"query\": [\n    \"SELECT ?university WHERE {\",\n      \"kg:4581 kg:1069 ?spouse.\",\n      \"?spouse kg:3662 ?university.\",\n      \"?university kg:6870 kg:8505.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?university WHERE { wd:Q76 wdt:P26 ?spouse. ?spouse wdt:P69 ?university. ?university wdt:P31 wd:Q3918. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Paraguay proclaim its independence?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n    \"  wd:Q7409 P31 wd:Q6256.\",\n    \"  wd:Q7409 P585 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q7409 P31 wd:Q6256. wd:Q7409 P585 ?date. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When did Paraguay proclaim its independence?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q733 is Paraguay\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n      \"wd:Q733 wdt:P571 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q733 wdt:P571 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Paraguay proclaim its independence?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Paraguay proclaim its independence?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7772 is Paraguay\nkg:2115 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:7772 kg:2115 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q733 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How short is the shortest active NBA player?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P31 wd:Q937857.\",\n    \"  ?player wdt:P106 wd:Q242604.\",\n    \"  ?player wdt:P1080 ?height.\",\n    \"  FILTER(?height = (SELECT MIN(?h) WHERE {\",\n    \"    ?p wdt:P31 wd:Q937857.\",\n    \"    ?p wdt:P106 wd:Q242604.\",\n    \"    ?p wdt:P1080 ?h.\",\n    \"  }))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P31 wd:Q937857. ?player wdt:P106 wd:Q242604. ?player wdt:P1080 ?height. FILTER(?height = (SELECT MIN(?h) WHERE { ?p wdt:P31 wd:Q937857. ?p wdt:P106 wd:Q242604. ?p wdt:P1080 ?h. })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How short is the shortest active NBA player?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q3665646 is basketball player\nwdt:P54 is member of sports team\nwdt:P118 is league\nwd:Q155223 is National Basketball Association\np:P54 is member of sports team\npq:P582 is end time\nwdt:P2048 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P106 wd:Q3665646 .\", \"# The player is a basketball player.\",\n      \"?player p:P54 [ pq:P582 [] ] .\", \"# The player has an active membership in a sports team.\",\n      \"?player p:P54 ?membership .\",\n      \"?membership ps:P54 wd:Q155223 .\", \"# The membership is in the NBA.\",\n      \"?player wdt:P2048 ?height .\", \"# Get the height of the player.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646 . ?player p:P54 [ pq:P582 [] ] . ?player p:P54 ?membership . ?membership ps:P54 wd:Q155223 . ?player wdt:P2048 ?height . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How short is the shortest active NBA player?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How short is the shortest active NBA player?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2623 is occupation\nkg:7892 is basketball player\nkg:5833 is member of sports team\nkg:9646 is league\nkg:3977 is National Basketball Association\nkg:2614 is member of sports team\nkg:5985 is end time\nkg:4026 is height", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player kg:2623 kg:7892 .\",\n      \"?player kg:5833 ?team .\",\n      \"?team kg:2614 kg:3977 .\",\n      \"?player kg:4026 ?height .\",\n      \"FILTER NOT EXISTS { ?player kg:5985 ?endTime }\",\n      \"}\",\n    \"ORDER BY ASC(?height)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q3665646 . ?player wdt:P54 ?team . ?team p:P54 wd:Q155223 . ?player wdt:P2048 ?height . FILTER NOT EXISTS { ?player pq:P582 ?endTime } } ORDER BY ASC(?height) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "When was Jack Wolfskin founded?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?foundation WHERE {\",\n    \"  wd:Q156428 wdt:P571 ?foundation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?foundation WHERE { wd:Q156428 wdt:P571 ?foundation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was Jack Wolfskin founded?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q536133 is Jack Wolfskin\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?foundation WHERE {\",\n      \"wd:Q536133 wdt:P571 ?foundation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?foundation WHERE { wd:Q536133 wdt:P571 ?foundation. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was Jack Wolfskin founded?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was Jack Wolfskin founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is Jack Wolfskin\nkg:3303 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5071 kg:3303 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q536133 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which city is the headquarter of Air China?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q105327 wdt:P159 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q105327 wdt:P159 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which city is the headquarter of Air China?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q51747 is Air China\nwdt:P159 is headquarters location", "response": "{\n  \"query\": [\n    \"SELECT ?city WHERE {\",\n    \"  wd:Q51747 wdt:P159 ?city.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q51747 wdt:P159 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "In which city is the headquarter of Air China?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which city is the headquarter of Air China?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7473 is Air China\nkg:7154 is headquarters location", "response": "{\n    \"query\": [\n        \"SELECT ?city\",\n        \"WHERE {\",\n            \"kg:7473 kg:7154 ?city.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?city WHERE { wd:Q51747 wdt:P159 ?city. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?brewery WHERE {\",\n    \"  wd:Q107268 wdt:P31 wd:Q54967.\",\n    \"  wd:Q107268 wdt:P1056 ?brewery.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?brewery WHERE { wd:Q107268 wdt:P31 wd:Q54967. wd:Q107268 wdt:P1056 ?brewery. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q948831 is Plzeňský Prazdroj\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?year WHERE {\",\n      \"wd:Q948831 wdt:P571 ?year.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?year WHERE { wd:Q948831 wdt:P571 ?year. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What is the founding year of the brewery that produces Pilsner Urquell?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the founding year of the brewery that produces Pilsner Urquell?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7689 is Plzeňský Prazdroj\nkg:3236 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?year\",\n        \"WHERE {\",\n            \"kg:7689 kg:3236 ?year.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?year WHERE { wd:Q948831 wdt:P571 ?year. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did the Boston Tea Party take place?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?event WHERE {\",\n    \"  ?event wdt:P31 wd:Q20649.\",\n    \"  ?event rdfs:label \\\"Boston Tea Party\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?event WHERE { ?event wdt:P31 wd:Q20649. ?event rdfs:label \"Boston Tea Party\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did the Boston Tea Party take place?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19024 is Boston Tea Party\nwdt:P585 is point in time", "response": "{\n  \"query\": [\n    \"SELECT ?date WHERE {\",\n      \"wd:Q19024 wdt:P585 ?date.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?date WHERE { wd:Q19024 wdt:P585 ?date. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did the Boston Tea Party take place?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did the Boston Tea Party take place?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3929 is Boston Tea Party\nkg:0565 is point in time", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:3929 kg:0565 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q19024 wdt:P585 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which animals are critically endangered?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n    \"  ?animal wdt:P141 wd:Q683572.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?animal WHERE { ?animal wdt:P141 wd:Q683572. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which animals are critically endangered?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P141 is IUCN conservation status\nwd:Q219127 is Critically Endangered", "response": "{\n  \"query\": [\n    \"SELECT ?animal WHERE {\",\n      \"?animal wdt:P141 wd:Q219127.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?animal WHERE { ?animal wdt:P141 wd:Q219127. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which animals are critically endangered?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which animals are critically endangered?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7101 is IUCN conservation status\nkg:9298 is Critically Endangered", "response": "{\n    \"query\": [\n        \"SELECT ?animal\",\n        \"WHERE {\",\n            \"?animal kg:7101 kg:9298.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?animal WHERE { ?animal wdt:P141 wd:Q219127. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which politicians were married to a German?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n    \"  ?politician wdt:P31 wd:Q82955.\",\n    \"  ?politician wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P27 wd:Q183.\"\n    ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P31 wd:Q82955. ?politician wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q183. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which politicians were married to a German?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q82955 is politician\nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q183 is Germany\nwdt:P19 is place of birth\nwdt:P17 is country\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?politician WHERE {\",\n      \"?politician wdt:P106 wd:Q82955.\",\n      \"?politician wdt:P26 ?spouse.\",\n      \"?spouse wdt:P27 wd:Q183.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955. ?politician wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q183. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which politicians were married to a German?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which politicians were married to a German?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5848 is occupation\nkg:1708 is politician\nkg:0863 is spouse\nkg:5898 is country of citizenship\nkg:7899 is Germany\nkg:6832 is place of birth\nkg:5012 is country\nkg:7899 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?politician\",\n    \"WHERE {\",\n      \"?politician kg:5848 kg:1708 .\",\n      \"?spouse kg:0863 ?politician .\",\n      \"?spouse kg:5898 kg:7899 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?politician WHERE { ?politician wdt:P106 wd:Q82955 . ?spouse wdt:P26 ?politician . ?spouse wdt:P27 wd:Q183 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How big is the earth's diameter?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P2047 ?diameter.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P2047 ?diameter. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How big is the earth's diameter?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2 is Earth\nwdt:P2386 is diameter", "response": "{\n  \"query\": [\n    \"SELECT ?diameter WHERE {\",\n      \"wd:Q2 wdt:P2386 ?diameter.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?diameter WHERE { wd:Q2 wdt:P2386 ?diameter. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "How big is the earth's diameter?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How big is the earth's diameter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8706 is Earth\nkg:1993 is diameter", "response": "{\n    \"query\": [\n        \"SELECT ?diameter\",\n        \"WHERE {\",\n            \"kg:8706 kg:1993 ?diameter.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?diameter WHERE { wd:Q2 wdt:P2386 ?diameter. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Is the wife of President Obama called Michelle?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is the wife of President Obama called Michelle?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q76 wdt:P35 wd:Q10428.\",\n    \"  wd:Q76 wdt:P26 wd:Q10428.\",\n    \"  wd:Q76 wdt:P25 ?wife.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q76 wdt:P35 wd:Q10428. wd:Q76 wdt:P26 wd:Q10428. wd:Q76 wdt:P25 ?wife. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has the abbreviation MN?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q55;\",\n    \"          wdt:P428 \\\"MN\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q55; wdt:P428 \"MN\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which U.S. state has the abbreviation MN?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P1813 is short name", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P1813 \\\"MN\\\" .\"\n    ]\n  }\n ", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P1813 \"MN\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which U.S. state has the abbreviation MN?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which U.S. state has the abbreviation MN?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3306 is instance of\nkg:9063 is U.S. state\nkg:3554 is short name", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n            \"?state kg:3306 kg:9063 .\",\n            \"?state kg:3554 \\\"MN\\\" .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P1813 \"MN\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Muhammad die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7396 wdt:P570 ?date.\",\n    \"  BIND(wd:Q7396 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q7396 wdt:P570 ?date. BIND(wd:Q7396 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did Muhammad die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9458 is Muhammad\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathDate WHERE {\",\n    \"  wd:Q9458 wdt:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathDate WHERE { wd:Q9458 wdt:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did Muhammad die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did Muhammad die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is Muhammad\nkg:4086 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:4901 kg:4086 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9458 wdt:P570 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the governor of Texas?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q1247 wdt:P6 wd:Q108359.\",\n    \"  wd:Q108359 wdt:P35 wd:Q1247.\",\n    \"  wd:Q108359 p:P6 ?statement.\",\n    \"  ?statement ps:P6 ?governor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?governor WHERE { wd:Q1247 wdt:P6 wd:Q108359. wd:Q108359 wdt:P35 wd:Q1247. wd:Q108359 p:P6 ?statement. ?statement ps:P6 ?governor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the governor of Texas?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1439 is Texas\nwdt:P1313 is office held by head of government\nwd:Q5589725 is Governor of Texas\nwd:Q5589725 is Governor of Texas\nwdt:P1308 is officeholder", "response": "{\n  \"query\": [\n    \"SELECT ?governor WHERE {\",\n    \"  wd:Q1439 wdt:P1313 wd:Q5589725.\",\n    \"  wd:Q5589725 wdt:P1308 ?governor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?governor WHERE { wd:Q1439 wdt:P1313 wd:Q5589725. wd:Q5589725 wdt:P1308 ?governor. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the governor of Texas?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the governor of Texas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5711 is Texas\nkg:0217 is office held by head of government\nkg:9831 is Governor of Texas\nkg:9831 is Governor of Texas\nkg:6636 is officeholder", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0217 kg:5711 .\",\n            \"?resource kg:6636 kg:9831 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1313 wd:Q1439 . ?resource wdt:P1308 wd:Q5589725 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which movies did Kurosawa direct?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q106842 wdt:P57 wd:Q3396.\",\n    \"  wd:Q106842 wdt:P170 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q106842 wdt:P57 wd:Q3396. wd:Q106842 wdt:P170 ?movie. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which movies did Kurosawa direct?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q8006 is Akira Kurosawa", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P57 wd:Q8006.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P57 wd:Q8006. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which movies did Kurosawa direct?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which movies did Kurosawa direct?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6393 is director\nkg:4441 is Akira Kurosawa", "response": "{\n    \"query\": [\n        \"SELECT ?movie\",\n        \"WHERE {\",\n            \"?movie kg:6393 kg:4441.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P57 wd:Q8006. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?website WHERE {\",\n    \"  wd:Q106423 wdt:P179 ?actor.\",\n    \"  ?actor wdt:P856 ?website.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?website WHERE { wd:Q106423 wdt:P179 ?actor. ?actor wdt:P856 ?website. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q162371 is Charmed\np:P161 is cast member\nps:P161 is cast member\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?website WHERE {\",\n      \"?show wdt:P31 wd:Q162371.\",\n      \"?show p:P161 ?castStatement.\",\n      \"?castStatement ps:P161 ?actor.\",\n      \"?actor wdt:P856 ?website.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?actor ?website WHERE { ?show wdt:P31 wd:Q162371. ?show p:P161 ?castStatement. ?castStatement ps:P161 ?actor. ?actor wdt:P856 ?website. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me the official websites of actors of the television show Charmed.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the official websites of actors of the television show Charmed.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7013 is Charmed\nkg:2103 is cast member\nkg:1343 is cast member\nkg:2499 is official website", "response": "{\n    \"query\": [\n        \"SELECT ?website\",\n        \"WHERE {\",\n            \"?actor kg:2103 kg:7013.\",\n            \"?actor kg:1343 ?website.\",\n            \"FILTER (isLiteral(?website))\",\n            \"}\"\n    ]\n}", "normal_query": "SELECT ?website WHERE { ?actor p:P161 wd:Q162371. ?actor ps:P161 ?website. FILTER (isLiteral(?website)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all libraries established before 1400.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n    \"  ?library wdt:P31 wd:Q649578.\",\n    \"  ?library wdt:P571 ?date.\",\n    \"  FILTER(?date < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31 wd:Q649578. ?library wdt:P571 ?date. FILTER(?date < \"1400-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all libraries established before 1400.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q7075 is library\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?library WHERE {\",\n      \"?library wdt:P31/wdt:P279* wd:Q7075.\",\n      \"?library wdt:P571 ?inception.\",\n      \"FILTER (?inception < \\\"1400-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31/wdt:P279* wd:Q7075. ?library wdt:P571 ?inception. FILTER (?inception < \"1400-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all libraries established before 1400.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all libraries established before 1400.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6814 is instance of\nkg:6349 is subclass of\nkg:3669 is library\nkg:4653 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?library\",\n        \"WHERE {\",\n            \"?library kg:6814/kg:3669 .\",\n            \"?library kg:4653 ?inceptionDate .\",\n            \"FILTER (?inceptionDate < 1400) \",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?library WHERE { ?library wdt:P31/wd:Q7075 . ?library wdt:P571 ?inceptionDate . FILTER (?inceptionDate < 1400) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n    \"  ?island wdt:P31 wd:Q640582.\",\n    \"  ?island wdt:P17 wd:Q55.\",\n    \"  ?island wdt:P373 ?label.\",\n    \"  FILTER (LANG(?label) = 'fr')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?island WHERE { ?island wdt:P31 wd:Q640582. ?island wdt:P17 wd:Q55. ?island wdt:P373 ?label. FILTER (LANG(?label) = 'fr') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwd:Q76936 is Frisian Islands\nwdt:P527 is has part(s)\nwdt:P361 is part of\nwdt:P17 is country\nwd:Q55 is Netherlands\nwdt:P31 is instance of\nwd:Q23442 is island", "response": "{\n  \"query\": [\n    \"SELECT ?island WHERE {\",\n      \"?island wdt:P31 wd:Q23442.\",\n      \"?island wdt:P361 wd:Q76936.\",\n      \"?island wdt:P17 wd:Q55.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?island WHERE { ?island wdt:P31 wd:Q23442. ?island wdt:P361 wd:Q76936. ?island wdt:P17 wd:Q55. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me all Frisian islands that belong to the Netherlands.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me all Frisian islands that belong to the Netherlands.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:0335 is Frisian Islands\nkg:0424 is has part(s)\nkg:7181 is part of\nkg:9177 is country\nkg:0464 is Netherlands\nkg:6116 is instance of\nkg:9691 is island", "response": "{\n  \"query\": [\n    \"SELECT ?island\",\n    \"WHERE {\",\n      \"?island kg:6116 kg:9691 .\",\n      \"?island kg:7181 kg:0335 .\",\n      \"kg:0335 kg:0424 ?frisianIslands .\",\n      \"?frisianIslands kg:9177 kg:0464 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?island WHERE { ?island wdt:P31 wd:Q23442 . ?island wdt:P361 wd:Q76936 . wd:Q76936 wdt:P527 ?frisianIslands . ?frisianIslands wdt:P17 wd:Q55 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which museum exhibits The Scream by Munch?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n    \"  wd:Q105624 wdt:P3879 ?exhibition.\",\n    \"  ?exhibition wdt:P195 ?museum.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?museum WHERE { wd:Q105624 wdt:P3879 ?exhibition. ?exhibition wdt:P195 ?museum. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which museum exhibits The Scream by Munch?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471379 is The Scream\nwdt:P527 is has part(s)\nwdt:P276 is location\nwdt:P31 is instance of\nwd:Q207694 is art museum", "response": "{\n  \"query\": [\n    \"SELECT ?museum WHERE {\",\n      \"?museum wdt:P31 wd:Q207694.\",\n      \"?museum wdt:P527 wd:Q471379.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?museum WHERE { ?museum wdt:P31 wd:Q207694. ?museum wdt:P527 wd:Q471379. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which museum exhibits The Scream by Munch?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which museum exhibits The Scream by Munch?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3794 is The Scream\nkg:7898 is has part(s)\nkg:1678 is location\nkg:3411 is instance of\nkg:9154 is art museum", "response": "{\n    \"query\": [\n        \"SELECT ?museum\",\n        \"WHERE {\",\n            \"kg:3794 kg:7898 ?exhibition.\",\n            \"?exhibition kg:1678 ?museum.\",\n            \"?museum kg:3411 kg:9154.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?museum WHERE { wd:Q471379 wdt:P527 ?exhibition. ?exhibition wdt:P276 ?museum. ?museum wdt:P31 wd:Q207694. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the De Beers company founded?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q785624.\",\n    \"  ?company rdfs:label \\\"De Beers\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q785624. ?company rdfs:label \"De Beers\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When was the De Beers company founded?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q471891 is De Beers\nwdt:P571 is inception", "response": "{\n  \"query\": [\n    \"SELECT ?foundationDate WHERE {\",\n      \"wd:Q471891 wdt:P571 ?foundationDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?foundationDate WHERE { wd:Q471891 wdt:P571 ?foundationDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When was the De Beers company founded?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When was the De Beers company founded?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5562 is De Beers\nkg:9354 is inception", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5562 kg:9354 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q471891 wdt:P571 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who became president after JFK died?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  wd:Q12345 p:P39 ?statement.\",\n    \"  ?statement ps:P39 wd:Q11696.\",\n    \"  ?statement pq:P580 ?date.\",\n    \"  FILTER(?date > \\\"1963-11-22\\\"^^xsd:dateTime).\",\n    \"  ?president wdt:P31 wd:Q174576.\"\n    ]\n}", "normal_query": "SELECT ?president WHERE { wd:Q12345 p:P39 ?statement. ?statement ps:P39 wd:Q11696. ?statement pq:P580 ?date. FILTER(?date > \"1963-11-22\"^^xsd:dateTime). ?president wdt:P31 wd:Q174576. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who became president after JFK died?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9696 is John F. Kennedy\np:P39 is position held\nps:P39 is position held\nwd:Q11696 is President of the United States\npq:P1366 is replaced by", "response": "{\n  \"query\": [\n    \"SELECT ?president WHERE {\",\n    \"  wd:Q9696 p:P39/ps:P39/wdt:P1366 ?president.\",\n    \"  ?president wdt:P39 wd:Q11696.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?president WHERE { wd:Q9696 p:P39/ps:P39/wdt:P1366 ?president. ?president wdt:P39 wd:Q11696. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who became president after JFK died?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who became president after JFK died?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9891 is John F. Kennedy\nkg:7907 is position held\nkg:3493 is position held\nkg:8998 is President of the United States\nkg:8421 is replaced by", "response": "{\n    \"query\": [\n        \"SELECT ?president\",\n        \"WHERE {\",\n            \"kg:9891 kg:7907/kg:3493 kg:8998 .\",\n            \"?president kg:8421 kg:9891 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?president WHERE { wd:Q9696 p:P39/ps:P39 wd:Q11696 . ?president pq:P1366 wd:Q9696 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q146208 wdt:P35 wd:Q19744.\",\n    \"  wd:Q19744 wdt:P25 ?spouse.\",\n    \"  ?spouse wdt:P22 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q146208 wdt:P35 wd:Q19744. wd:Q19744 wdt:P25 ?spouse. ?spouse wdt:P22 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q19943 is Juan Carlos I of Spain\nwdt:P26 is spouse\nwdt:P40 is child", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n      \"wd:Q19943 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P40 ?child.\",\n      \"?child wdt:P26 ?parent.\"\n    ]\n  }\n ", "normal_query": "SELECT ?parent WHERE { wd:Q19943 wdt:P26 ?spouse. ?spouse wdt:P40 ?child. ?child wdt:P26 ?parent. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who are the parents of the wife of Juan Carlos I?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who are the parents of the wife of Juan Carlos I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7309 is Juan Carlos I of Spain\nkg:9505 is spouse\nkg:1329 is child", "response": "{\n    \"query\": [\n        \"SELECT ?parent WHERE {\",\n            \"kg:7309 kg:9505 ?spouse.\",\n            \"?spouse kg:1329 ?child.\",\n            \"?parent kg:1329 ?spouse.\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?parent WHERE { wd:Q19943 wdt:P26 ?spouse. ?spouse wdt:P40 ?child. ?parent wdt:P40 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?novelist WHERE {\",\n    \"  wd:Q106742 wdt:P50 ?novelist.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?novelist WHERE { wd:Q106742 wdt:P50 ?novelist. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45875 is A Song of Ice and Fire\nwdt:P106 is occupation\nwd:Q6625963 is novelist", "response": "{\n  \"query\": [\n    \"SELECT ?novelist WHERE {\",\n      \"wd:Q45875 wdt:P50 ?novelist.\",\n      \"?novelist wdt:P106 wd:Q6625963.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?novelist WHERE { wd:Q45875 wdt:P50 ?novelist. ?novelist wdt:P106 wd:Q6625963. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who is the novelist of the work a song of ice and fire?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the novelist of the work a song of ice and fire?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2137 is A Song of Ice and Fire\nkg:0038 is occupation\nkg:9798 is novelist", "response": "{\n    \"query\": [\n        \"SELECT ?novelist\",\n        \"WHERE {\",\n            \"kg:2137 kg:0038 ?occupation.\",\n            \"?novelist kg:9798 ?occupation.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?novelist WHERE { wd:Q45875 wdt:P106 ?occupation. ?novelist wd:Q6625963 ?occupation. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "In which studio did the Beatles record their first album?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?studio WHERE {\",\n    \"  wd:Q34670 wdt:P195 ?studio.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?studio WHERE { wd:Q34670 wdt:P195 ?studio. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which studio did the Beatles record their first album?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q482994 is album\nwdt:P175 is performer\nwd:Q1299 is The Beatles\nwdt:P577 is publication date\nwdt:P483 is recorded at studio or venue", "response": "{\n  \"query\": [\n    \"SELECT ?studio WHERE {\",\n      \"?album wdt:P31 wd:Q482994.\",\n      \"?album wdt:P175 wd:Q1299.\",\n      \"?album wdt:P577 ?publicationDate.\",\n      \"?album wdt:P483 ?studio.\",\n      \"FILTER NOT EXISTS {\",\n        \"?otherAlbum wdt:P31 wd:Q482994.\",\n        \"?otherAlbum wdt:P175 wd:Q1299.\",\n        \"?otherAlbum wdt:P577 ?otherPublicationDate.\",\n        \"FILTER (?otherPublicationDate < ?publicationDate)\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?studio WHERE { ?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1299. ?album wdt:P577 ?publicationDate. ?album wdt:P483 ?studio. FILTER NOT EXISTS { ?otherAlbum wdt:P31 wd:Q482994. ?otherAlbum wdt:P175 wd:Q1299. ?otherAlbum wdt:P577 ?otherPublicationDate. FILTER (?otherPublicationDate < ?publicationDate) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "In which studio did the Beatles record their first album?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “In which studio did the Beatles record their first album?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2481 is instance of\nkg:0784 is album\nkg:2791 is performer\nkg:1100 is The Beatles\nkg:7038 is publication date\nkg:1938 is recorded at studio or venue", "response": "{\n    \"query\": [\n        \"SELECT ?studio WHERE {\",\n            \"?album kg:0784 ?album .\",\n            \"?album kg:2791 kg:1100 .\",\n            \"?album kg:7038 ?publicationDate .\",\n            \"FILTER(?publicationDate = \\\"1963-03-22\\\") .\",\n            \"?album kg:1938 ?studio .\"\n        ]\n    }\n ", "normal_query": "SELECT ?studio WHERE { ?album wd:Q482994 ?album . ?album wdt:P175 wd:Q1299 . ?album wdt:P577 ?publicationDate . FILTER(?publicationDate = \"1963-03-22\") . ?album wdt:P483 ?studio . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "When did princess Diana die?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10435 wdt:P570 ?date.\",\n    \"  BIND(wd:Q10435 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q10435 wdt:P570 ?date. BIND(wd:Q10435 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "When did princess Diana die?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q9685 is Diana, Princess of Wales\nwdt:P570 is date of death", "response": "{\n  \"query\": [\n    \"SELECT ?deathDate WHERE {\",\n      \"wd:Q9685 wdt:P570 ?deathDate.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?deathDate WHERE { wd:Q9685 wdt:P570 ?deathDate. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "When did princess Diana die?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “When did princess Diana die?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8027 is Diana, Princess of Wales\nkg:4930 is date of death", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/8027> <http://www.example.org/kg/4930> ?resource .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { <http://www.example.org/kg//8027> <http://www.example.org/kg//4930> ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who founded Intel?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q637 wdt:P1128 ?founder.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q637 wdt:P1128 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who founded Intel?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q248 is Intel\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q248 wdt:P112 ?founder.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q248 wdt:P112 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Who founded Intel?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who founded Intel?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5687 is Intel\nkg:2695 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?founder\",\n        \"WHERE {\",\n            \"<http://www.example.org/kg/5687> kg:2695 ?founder.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { <http://www.example.org/kg//5687> wdt:P112 ?founder. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the youngest player in the Premier League?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n    \"  ?player wdt:P106 wd:Q937857.\",\n    \"  ?player wdt:P249 wd:Q10436.\",\n    \"  ?player wdt:P570 ?birthDate.\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?otherPlayer wdt:P106 wd:Q937857;\",\n    \"               wdt:P249 wd:Q10436;\",\n    \"               wdt:P570 ?otherBirthDate.\",\n    \"    FILTER (?birthDate > ?otherBirthDate)\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P106 wd:Q937857. ?player wdt:P249 wd:Q10436. ?player wdt:P570 ?birthDate. FILTER NOT EXISTS { ?otherPlayer wdt:P106 wd:Q937857; wdt:P249 wd:Q10436; wdt:P570 ?otherBirthDate. FILTER (?birthDate > ?otherBirthDate) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the youngest player in the Premier League?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P118 is league\nwd:Q9448 is Premier League\nwdt:P54 is member of sports team\nwdt:P569 is date of birth", "response": "{\n  \"query\": [\n    \"SELECT ?player WHERE {\",\n      \"?player wdt:P54 wd:Q10732.\",\n      \"?player wdt:P118 wd:Q9448.\",\n      \"?player wdt:P569 ?dob.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P54 wd:Q10732. ?player wdt:P118 wd:Q9448. ?player wdt:P569 ?dob. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who is the youngest player in the Premier League?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the youngest player in the Premier League?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8065 is league\nkg:5247 is Premier League\nkg:7482 is member of sports team\nkg:9621 is date of birth", "response": "{\n    \"query\": [\n        \"SELECT ?player\",\n        \"WHERE {\",\n            \"?player kg:7482 kg:5247 .\",\n            \"?player kg:9621 ?dob .\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherPlayer kg:7482 kg:5247 .\",\n                \"?otherPlayer kg:9621 ?otherDob .\",\n                \"FILTER (?otherDob > ?dob)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?player WHERE { ?player wdt:P54 wd:Q9448 . ?player wdt:P569 ?dob . FILTER NOT EXISTS { ?otherPlayer wdt:P54 wd:Q9448 . ?otherPlayer wdt:P569 ?otherDob . FILTER (?otherDob > ?dob) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many rivers and lakes are in South Carolina?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?river ?lake WHERE {\",\n    \"  ?river wdt:P31 wd:Q4026.\",\n    \"  ?river wdt:P17 wd:Q859.\",\n    \"  ?lake wdt:P31 wd:Q23442.\",\n    \"  ?lake wdt:P17 wd:Q859.\"\n    ]\n}", "normal_query": "SELECT ?river ?lake WHERE { ?river wdt:P31 wd:Q4026. ?river wdt:P17 wd:Q859. ?lake wdt:P31 wd:Q23442. ?lake wdt:P17 wd:Q859. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many rivers and lakes are in South Carolina?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P131 is located in the administrative territorial entity\nwd:Q1456 is South Carolina\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q23397 is lake", "response": "{\n  \"query\": [\n    \"SELECT ?river ?lake WHERE {\",\n      \"?river wdt:P31/wdt:P279* wd:Q4026.\",\n      \"?river wdt:P131 wd:Q1456.\",\n      \"?lake wdt:P31/wdt:P279* wd:Q23397.\",\n      \"?lake wdt:P131 wd:Q1456.\"\n    ]\n  }\n ", "normal_query": "SELECT ?river ?lake WHERE { ?river wdt:P31/wdt:P279* wd:Q4026. ?river wdt:P131 wd:Q1456. ?lake wdt:P31/wdt:P279* wd:Q23397. ?lake wdt:P131 wd:Q1456. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many rivers and lakes are in South Carolina?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many rivers and lakes are in South Carolina?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6192 is located in the administrative territorial entity\nkg:4355 is South Carolina\nkg:5420 is instance of\nkg:6123 is subclass of\nkg:6328 is lake", "response": "{\n    \"query\": [\n        \"SELECT ?river ?lake WHERE {\",\n            \"?river kg:5420 kg:6192.\",\n            \"?river kg:6192 kg:4355.\",\n            \"?lake kg:5420 kg:6192.\",\n            \"?lake kg:6192 kg:4355.\",\n            \"?lake kg:5420 kg:6328.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?river ?lake WHERE { ?river wdt:P31 wdt:P131. ?river wdt:P131 wd:Q1456. ?lake wdt:P31 wdt:P131. ?lake wdt:P131 wd:Q1456. ?lake wdt:P31 wd:Q23397. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was called Rodzilla?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was called Rodzilla?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P1476 \\\"Rodzilla\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1476 \"Rodzilla\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the capitals of all countries in Africa.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?country ?capital WHERE {\",\n    \"  ?country wdt:P31 wd:Q6256.\",\n    \"  ?country wdt:P17 wd:Q15.\",\n    \"  ?country wdt:P36 wd:Q48904.\",\n    \"  ?country wdt:P35 wd:Q15.\",\n    \"  ?capital wdt:P279* wd:Q15.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?country ?capital WHERE { ?country wdt:P31 wd:Q6256. ?country wdt:P17 wd:Q15. ?country wdt:P36 wd:Q48904. ?country wdt:P35 wd:Q15. ?capital wdt:P279* wd:Q15. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the capitals of all countries in Africa.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q6256 is country\nwdt:P30 is continent\nwd:Q15 is Africa\nwdt:P36 is capital", "response": "{\n  \"query\": [\n    \"SELECT ?capital WHERE {\",\n      \"?country wdt:P31 wd:Q6256 .\", \"# country\",\n      \"?country wdt:P30 wd:Q15 .\", \"# Africa\",\n      \"?country wdt:P36 ?capital .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?capital WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P30 wd:Q15 . ?country wdt:P36 ?capital . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the capitals of all countries in Africa.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the capitals of all countries in Africa.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1721 is instance of\nkg:6700 is country\nkg:7478 is continent\nkg:8902 is Africa\nkg:0430 is capital", "response": "{\n    \"query\": [\n        \"SELECT ?capital\",\n        \"WHERE {\",\n            \"?country kg:1721 kg:6700 .\",\n            \"?country kg:7478 kg:8902 .\",\n            \"?country kg:0430 ?capital .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?capital WHERE { ?country wdt:P31 wd:Q6256 . ?country wdt:P30 wd:Q15 . ?country wdt:P36 ?capital . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  wd:Q189425 p:P31/ps:P31/wdt:P279* wd:Q10662.\",\n    \"  ?bridge p:P31/ps:P31/wdt:P279* wd:Q10662.\",\n    \"  FILTER (?bridge != wd:Q189425)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bridge WHERE { wd:Q189425 p:P31/ps:P31/wdt:P279* wd:Q10662. ?bridge p:P31/ps:P31/wdt:P279* wd:Q10662. FILTER (?bridge != wd:Q189425) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q125050 is Manhattan Bridge\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q12280 is bridge\nwd:Q12280 is bridge", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n    \"  wd:Q125050 wdt:P31 ?type.\",\n    \"  ?bridge wdt:P31 ?type.\",\n    \"  FILTER(?bridge != wd:Q125050)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bridge WHERE { wd:Q125050 wdt:P31 ?type. ?bridge wdt:P31 ?type. FILTER(?bridge != wd:Q125050) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which bridges are of the same type as the Manhattan Bridge?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which bridges are of the same type as the Manhattan Bridge?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3760 is Manhattan Bridge\nkg:4675 is instance of\nkg:4675 is instance of\nkg:4675 is instance of\nkg:6359 is subclass of\nkg:6633 is bridge\nkg:6633 is bridge", "response": "{\n  \"query\": [\n    \"SELECT ?bridge WHERE {\",\n      \"?bridge kg:4675 kg:6633 .\",\n      \"?bridge kg:4675 kg:3760 .\"\n    ]\n}\n  \t", "normal_query": "SELECT ?bridge WHERE { ?bridge wdt:P31 wd:Q12280 . ?bridge wdt:P31 wd:Q125050 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "How many companies were founded by the founder of Facebook?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  wd:Q7669 wdt:P1128 ?founder.\",\n    \"  ?founder wdt:P355 ?company.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q7669 wdt:P1128 ?founder. ?founder wdt:P355 ?company. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many companies were founded by the founder of Facebook?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q36215 is Mark Zuckerberg\nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q783794 is company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P112 wd:Q36215.\",\n      \"?company wdt:P31/wdt:P279* wd:Q783794.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P112 wd:Q36215. ?company wdt:P31/wdt:P279* wd:Q783794. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "How many companies were founded by the founder of Facebook?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “How many companies were founded by the founder of Facebook?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1526 is founded by\nkg:1376 is Mark Zuckerberg\nkg:1343 is instance of\nkg:0834 is subclass of\nkg:8594 is company", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:1526 kg:1376 .\",\n            \"?company kg:1343 kg:8594 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P112 wd:Q36215 . ?company wdt:P31 wd:Q783794 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which book has the most pages?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n    \"  ?book wdt:P304 ?pages.\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n    \"}\",\n    \"ORDER BY DESC(?pages)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?book WHERE { ?book wdt:P304 ?pages. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?pages) LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which book has the most pages?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q571 is book\nwdt:P1104 is number of pages", "response": "{\n  \"query\": [\n    \"SELECT ?book WHERE {\",\n      \"?book wdt:P31/wdt:P279* wd:Q571.\",\n      \"?book wdt:P1104 ?pages.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n      \"ORDER BY DESC(?pages)\",\n      \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { ?book wdt:P31/wdt:P279* wd:Q571. ?book wdt:P1104 ?pages. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?pages) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which book has the most pages?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which book has the most pages?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2272 is instance of\nkg:1916 is subclass of\nkg:8797 is book\nkg:6305 is number of pages", "response": "{\n    \"query\": [\n        \"SELECT ?book\",\n        \"WHERE {\",\n            \"?book kg:8797 .\",\n            \"?book kg:6305 ?pages.\",\n            \"FILTER NOT EXISTS {\",\n                \"?otherBook kg:8797 .\",\n                \"?otherBook kg:6305 ?otherPages.\",\n                \"FILTER (?otherPages > ?pages)\",\n            \"}\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?book WHERE { ?book wd:Q571 . ?book wdt:P1104 ?pages. FILTER NOT EXISTS { ?otherBook wd:Q571 . ?otherBook wdt:P1104 ?otherPages. FILTER (?otherPages > ?pages) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the largest state in the United States?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n    \"  ?state wdt:P31 wd:Q35657.\",\n    \"  ?state wdt:P17 wd:Q30.\",\n    \"  SERVICE wikibase:around {\",\n    \"    bd:serviceParam wikibase:center ?state.\",\n    \"    bd:serviceParam wikibase:radius \\\"200\\\".\",\n    \"    bd:serviceParam wikibase:distance ?dist.\",\n    \"  }\",\n    \"  FILTER(?dist = (SELECT MAX(?dist) WHERE {\",\n    \"    ?state wdt:P31 wd:Q35657.\",\n    \"    ?state wdt:P17 wd:Q30.\",\n    \"    SERVICE wikibase:around {\",\n    \"      bd:serviceParam wikibase:center ?state.\",\n    \"      bd:serviceParam wikibase:radius \\\"200\\\".\",\n    \"      bd:serviceParam wikibase:distance ?dist.\",\n    \"    }\",\n    \"  }))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P17 wd:Q30. SERVICE wikibase:around { bd:serviceParam wikibase:center ?state. bd:serviceParam wikibase:radius \"200\". bd:serviceParam wikibase:distance ?dist. } FILTER(?dist = (SELECT MAX(?dist) WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P17 wd:Q30. SERVICE wikibase:around { bd:serviceParam wikibase:center ?state. bd:serviceParam wikibase:radius \"200\". bd:serviceParam wikibase:distance ?dist. } })) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What is the largest state in the United States?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwd:Q35657 is U.S. state\nwdt:P2046 is area", "response": "{\n  \"query\": [\n    \"SELECT ?state WHERE {\",\n      \"?state wdt:P31 wd:Q35657.\",\n      \"?state wdt:P2046 ?area.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\",\n      \"}\",\n    \"ORDER BY DESC(?area)\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657. ?state wdt:P2046 ?area. SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY DESC(?area) LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What is the largest state in the United States?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the largest state in the United States?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1426 is instance of\nkg:7930 is U.S. state\nkg:5830 is area", "response": "{\n    \"query\": [\n        \"SELECT ?state WHERE {\",\n            \"?state kg:1426 kg:7930 .\",\n            \"?state kg:5830 ?area .\",\n            \"FILTER NOT EXISTS { ?otherState kg:1426 kg:7930 . ?otherState kg:5830 ?otherArea . FILTER (?otherArea > ?area) }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?state WHERE { ?state wdt:P31 wd:Q35657 . ?state wdt:P2046 ?area . FILTER NOT EXISTS { ?otherState wdt:P31 wd:Q35657 . ?otherState wdt:P2046 ?otherArea . FILTER (?otherArea > ?area) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P1128 wd:Q34567.\",\n    \"  ?company wdt:P1080 ?employees.\",\n    \"  FILTER(?employees > 500000).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P1128 wd:Q34567. ?company wdt:P1080 ?employees. FILTER(?employees > 500000). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q4830453 is business\nwdt:P1128 is employees\nwdt:P856 is official website", "response": "{\n  \"query\": [\n    \"SELECT ?website WHERE {\",\n      \"?company wdt:P31/wdt:P279* wd:Q4830453.\",\n      \"?company wdt:P1128 ?employees.\",\n      \"FILTER(?employees > 500000).\",\n      \"?company wdt:P856 ?website.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?website WHERE { ?company wdt:P31/wdt:P279* wd:Q4830453. ?company wdt:P1128 ?employees. FILTER(?employees > 500000). ?company wdt:P856 ?website. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Give me the websites of companies with more than 500000 employees.", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Give me the websites of companies with more than 500000 employees.” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1735 is instance of\nkg:2392 is subclass of\nkg:4264 is business\nkg:0996 is employees\nkg:7595 is official website", "response": "{\n    \"query\": [\n        \"SELECT ?website WHERE {\",\n            \"?company kg:1735 kg:4264 .\",\n            \"?company kg:0996 ?employees .\",\n            \"FILTER(?employees > 500000) .\",\n            \"?company kg:7595 ?website .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?website WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P1128 ?employees . FILTER(?employees > 500000) . ?company wdt:P856 ?website . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What were the names of the three ships by Columbus?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?ship WHERE {\",\n    \"  wd:Q1429 wdt:P361 ?ship.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?ship WHERE { wd:Q1429 wdt:P361 ?ship. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What were the names of the three ships by Columbus?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is instance of\nwdt:P279 is subclass of\nwd:Q11446 is ship\nwdt:P1344 is participant in\nwdt:P710 is participant\nwd:Q7322 is Christopher Columbus", "response": "{\n  \"query\": [\n    \"SELECT ?ship WHERE {\",\n      \"?ship wdt:P31/wdt:P279* wd:Q11446.\",\n      \"?ship wdt:P1344 wd:Q7322.\",\n      \"?ship wdt:P710 wd:Q7322.\"\n    ]\n  }\n ", "normal_query": "SELECT ?ship WHERE { ?ship wdt:P31/wdt:P279* wd:Q11446. ?ship wdt:P1344 wd:Q7322. ?ship wdt:P710 wd:Q7322. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What were the names of the three ships by Columbus?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What were the names of the three ships by Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8261 is instance of\nkg:5995 is subclass of\nkg:5241 is ship\nkg:4451 is participant in\nkg:1337 is participant\nkg:5802 is Christopher Columbus", "response": "{\n    \"query\": [\n        \"SELECT ?ship\",\n        \"WHERE {\",\n            \"?ship kg:8261 kg:5241 .\",\n            \"?ship kg:4451 kg:1337 .\",\n            \"kg:5802 kg:4451 ?ship .\"\n        ]\n    }\n ", "normal_query": "SELECT ?ship WHERE { ?ship wdt:P31 wd:Q11446 . ?ship wdt:P1344 wdt:P710 . wd:Q7322 wdt:P1344 ?ship . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
