{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person\",\n      \"?resource wdt:P106 ?occupation .\" , \"># Get the occupation of the person\",\n      \"FILTER(?occupation = wd:Q84519) .#\" ,\", # Q84519 is the Wikidata item for screenwriter\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t  \t\t\t\t\t  \t\t\t\t\t  \t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q69423232 ;\",\n               \"wdt:P106 wd:Q103013 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0153 \\\"Hans Ertl\\\" ;\",\n    \"   kg:9006 ?occupation .\",\n    \"FILTER(?occupation = kg:7856)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P35 ?composer .\",\n      \"?resource rdfs:label \\\"Bob Dylan\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q36834 ;\",\n                  \"wdt:P39 wd:Q392 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isoccupation kg:4423 ;\",\n    \"   kg:iscomposer kg:3294 .\",\n    \"}\",\n    \"FILTER(?resource = kg:1333)\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P2860 ?discovery .\",\n    \"FILTER(?discovery = wd:Q1597843) .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t  \t\t\t\t\t"}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P112 wd:Q5 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:9741 ?human .\",\n    \"?subject kg:4808 ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q168540.\" , \"# Resource is a film or related work\",\n      \"?resource wdt:P644 ?edit.\" , \"# The resource has an edit by Andrei Tarkovsky\",\n    \"}\"\n  ]\n}\n"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1040 wd:Q853 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:0149 ?object .\",\n    \"?subject kg:9165 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?book wdt:P57 \\\"So Long, and Thanks for All the Fish\\\" ;\",\n    \"wdt:P495 ?title .\",\n    \"?sequel wdt:P57 ?title ;\",\n    \"wdt:P1638 ?sequelBook .\",\n    \"FILTER(?sequelBook = wd:Q20029) # Life, the Universe and Everything\",\n    \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t\t\t \t        \t\t\t\t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?book wdt:P155 ?sequel .\",\n    \"?sequel wdt:P155 wd:Q721 .\",\n    \"?resource wdt:P155 wd:Q1042294 .\"\n  ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t  \t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book1 kg:isFollows ?book2 .\",\n    \"?book2 kg:isLifeTheUniverseAndEverything .\",\n    \"?book1 kg:title \\\"So Long, and Thanks for All the Fish\\\" .\",\n    \"}\",\n    \"VALUES ?resource { kg:4214 }\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P577 ?date .\",\n    \"?resource wdt:P648 ?piSequel .\",\n    \"FILTER(?piSequel = wd:Q102939) .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q168 wdt:P155 ?sequel.\",\n      \"?sequel wdt:P31 wd:Q131593.\",\n      \"?sequel a ?resource.\"\n    ,\"}\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?pi kg:6156 ?sequel .\",\n    \"?sequel kg:6999 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"?person wdt:P22 ?parent ;\",\n    \"wdt:P735 \\\"Jean-François Champollion\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent\",\n    \"WHERE {\",\n      \"wd:Q260 wdt:P40 ?child.\",\n      \"?parent wdt:P355 ?child.\"\n    ,\"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?child kg:isChild kg:9894 ;\",\n    \"   kg:isHasSubsidiary ?parent .\",\n    \"?parent a ?type .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q186329 ;\", \"># Q186329 is the Wikidata ID for Douglas Adams\",\n    \"wdt:P31/wdt:P279* ?type .\",\n    \"FILTER(?type != wd:Q34378). # Exclude works of art and similar types\\\"\",\n    \"}\" ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q42 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isByAuthor kg:9298 ;\",\n    \"   a ?type .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P108+ wd:Q34296.\",\n      \"?resource rdfs:label ?label FILTER(LANG(?label) = 'en').\",\n      \"FILTER(?label = 'Max Margules')\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P108 wd:Q79070 ;\",\n                  \"wdt:P108 wd:Q40 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3977 ?employer .\",\n    \"?employer kg:4018 .\",\n    \"?resource kg:2612 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P69 wd:Q11424.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q80379 .\",\n    \"?resource wdt:P50 wd:Q892 .\"\n  ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t  \t\t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:is ?movie .\",\n\t\t\t\"?movie kg:is ?book .\",\n\t\t\t\"?book kg:is ?author .\",\n\t\t\t\"?author kg:name \\\"J. R. R. Tolkien\\\"@en .\",\n\t\t\t\"?book kg:role ?role .\",\n\t\t\t\"FILTER(?role != kg:screenwriter)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?productionCompany .\",\n      \"?movie wdt:P648 ?director .\",\n      \"?movie wdt:P102 ?actor .\",\n      \"?movie wdt:P3379 ?executiveProducer .\",\n      \"wd:Q106412 wdt:P345 ?productionCompany ;\",\n      \"wdt:P648 wd:Q11563 ;\", \"># Bruce Willis as director and actor of the movie\",\n      \"wdt:P3379 ?executiveProducer .\", \"># executive producer of the movie\",\n      \"FILTER(STR(?movie) = 'http://www.wikidata.org/entity/Q24809815' )\" ,\"\\n# Replace with actual Wikidata ID for the movie if known\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P1431 ?executiveProducer .\",\n      \"wd:Q72276 wdt:P1431 ?movie .\",\n      \"wd:Q2680 wdt:P1431 ?executiveProducer .\",\n      \"FILTER(?executiveProducer = wd:Q2680)\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:8042 kg:0403 ?producer .\",\n    \"?producer kg:5286 \\\"Bruce Willis\\\" .\",\n    \"?movie kg:8042 ?title . FILTER(?title = \\\"A Good Day to Die Hard\\\")\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?item wdt:P31/wdt:P279* wd:Q146850 ;\", \"# Check if the item is a person or a composer\",\n    \"wdt:P141 ?costumeDesign .\", \"# Has the role of costume designer for White Diamond: A Personal Portrait of Kylie Minogue\",\n    \"?item wdt:P627 wd:Q985039 .\" ,\"\\n# The item is about Kylie Minogue's project 'White Diamond: A Personal Portrait'\",\n    \"OPTIONAL { ?item wdt:P42 ?composition . }\", \"# Check if the person has a composition\",\n    \"FILTER NOT EXISTS { ?item wdt:P42 [] . }\" ,\"\\n# Ensure no composition is found to confirm it's not a composer\"\n   \t,\n    \"?resource ?p ?o .\" ,\"\\n# Return all resources related to the item\"\n   \t,\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P2515 wd:Q2733930 ;\",\n    \"   wdt:P106 ?occupation .\",\n    \"FILTER(?occupation = wd:Q36834)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4634 kg:7537 ;\", \"# Check if the resource is a composer\",\n    \"   kg:isoccupation kg:5566 .   # And has the occupation of costume designer\",\n    \"FILTER(?resource = kg:4634)  # Ensure we are checking for 'White Diamond: A Personal Portrait of Kylie Minogue'\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film owl:sameAs wd:Q1234567 ;\", \"># Replace Q1234567 with the actual Wikidata ID for Olympia film\",\n      \"?film wdt:P385 ?cinematographer .\",\n      \"?cinematographer wdt:P109 ?resource .\", \"># P109 is used to find professions, where screenwriter is a type of occupation\"\n    ,\n    \"FILTER(?resource = wd:Q24967) # Q24967 is the Wikidata ID for Screenwriter\" ]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"?film wdt:P106 wd:Q69423232 .\",\n      \"wd:Q158069 wdt:P344 ?cinematographer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5056 ?cinematographer.\",\n    \"?resource kg:isoccupation ?occupationalRole.\",\n    \"?cinematographer kg:isfilmScreenwriter ?screenwritingOccupation.\",\n    \"FILTER(?occupationalRole = kg:2665 && ?screenwritingOccupation = kg:2665)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?employee\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q154098.\" , \"# Erich Honecker's spouse\",\n      \"?person wdt:P39 ?position.\" , \"# Person holds a position\",\n      \"?position wdt:P108 wd:Q711665.\" ,\"# Position is with Free German Youth (Jungkommunistische Bund)\",\n    \"}\",\n    \"FILTER EXISTS { ?position wdt:P279* wd:Q711665. }\" , \"# Ensure the position is a sub-position of Free German Youth\"\n  ]\n}\n"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?spouse .\",\n      \"?spouse wdt:P108 wd:Q76845 .\",\n      \"?person wdt:P21 wd:Q2607\" ,\n    \"}\",\n    \"VALUES ?person { wd:Q2607 }\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:1391 kg:1230 ;\",\n    \"   kg:4689 kg:5225 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5460896 ;\", \"# Find instances of musical composition or its subclasses\",\n      \"  wdt:P175 ?composer .\", \"# Related to a composer\",\n      \"  ?composer wdt:P577 ?date .\" ,\"\\n  FILTER(?date = \\\"1999-01-01\\\"^^xsd:date)\" ,\"\\n} ORDER BY DESC(?date)\"\n  ]\n}\n"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P162 wd:Q208824 ;\",\n                  \"wdt:P106 wd:Q36834 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:7933 ?producer .\",\n    \"?subject kg:8795 \\\"1999\\\" .\",\n    \"?producer kg:3877 kg:9507 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person or a subclass of person\",\n    \"  ?resource wdt:P678 ?composerWork.\" , \"># The resource is associated with a work as a composer\",\n    \"  FILTER(STRSTARTS(?composerWork, \\\"Q1029453\\\"))\" , \"># Filter for the specific work Al Compás de tu Mentira (QID for this work should be known or provided)\",\n    \"  ?resource wdt:P161 ?screenplay.\" , \"># The resource is associated with a screenplay\",\n    \"}\"\n  ]\n}\n"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P86 wd:Q577126 ;\",\n                  \"wdt:P106 wd:Q69423232 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7262 kg:4092 ;\",\n    \"   kg:7262 kg:8297 kg:4092 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a resource identifier for the film 'The Chess Players'\",\n      \"?film wdt:P6577 ?composer .\", \"># P6577 is the property for 'composer of work'\",\n      \"?composer wdt:P3301 ?role .\", \"># P3301 is the property for 'occupation'\",\n      \"FILTER(?role = wd:Q24908).\" ,\"\\t# Q24908 is the resource identifier for 'cinematographer'\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P86 ?composer .\",\n      \"?film wdt:P106 wd:Q76582 .\",\n      \"?composer wdt:P86 ?resource .\",\n      \"?resource wdt:P106 wd:Q222344 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isoccupation ?occupation .\",\n    \"?resource kg:iscomposition ?composition .\",\n    \"?composition kg:iswork kg:2423 .\",\n    \"?occupation kg:isprofession kg:1572 .\",\n    \"FILTER EXISTS { ?resource kg:iscomposition ?composition }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?game wdt:P31 wd:Q24906857 ;\", \"># Game is a software title (Microsoft Flight Simulator 2004: A Century of Flight)\",\n      \"?game p:P136 ?sequelStatement .\", \"># The game has a sequel statement\",\n      \"?sequelStatement ps:P136 ?resource .\", \"># The resource is the sequel to the game\",\n      \"?game wdt:P175 \\\"Microsoft\\\"@en .\", \"># The game was distributed by Microsoft\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?game wdt:P750 wd:Q2283 ;\",\n    \"   wdt:P155 wd:Q4348691 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game kg:5718 ?msfs2004.\",\n    \"?game kg:6198 ?sequel.\",\n    \"?sequel kg:7041/kg:2249 \\\"Microsoft\\\"@en.\",\n    \"?sequel ?property ?resource.\"\n   \t]}\n \t\t\t\t\t\t\t\t\t  "}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q86459 ;\", \"# Find works that are a sequel to something\",\n    \"?hasSequel wdt:P105 ?work ;\", \"# The work that has the current work as its sequel\",\n    \"wdt:P577 ?date .\", \"# Optional date, just for context (can be removed)\",\n    \"?sequelTitle wdt:P648 'James Parks'^^xsd:string .\", \"# Title of the sequel with James Parks in it\",\n    \"FILTER(?work != ?sequel) # Ensure we don't get the same work as a sequel to itself\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?sequel wdt:P155 wd:Q2085 ;\",\n             \"wdt:P161 wd:Q967797 .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:0306 ?originalWork .\",\n    \"?originalWork kg:0055 kg:3519 .\",\n    \"?originalWork kg:3268 <http://example.org/Twin_Peaks> .\",\n    \"?sequel kg:3268 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?production wdt:P39 ?founder.\",\n      \"?founder wdt:P1628 ?child.\",\n      \"?child wdt:P106 wd:Q5.\", \"# Parent\",\n      \"wd:Q7445 wdt:P31/wdt:P279* ?production.\",\n      \"wd:Q7445 wdt:P106 wd:Q5.\" ,\"\\n# Malia Obama is a person\"\n    ,\n    \"FILTER(?founder = ?child).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t     \t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?production wd:Q81950264 .\",\n\t\t\"?production wdt:P112 ?founder .\",\n\t\t\"?founder wdt:P40* wd:Q15070044 .\",\n\t\t\"FILTER(?production != wd:Q15070044)\",\n\t\t\"?resource ?p ?o .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?production kg:9700 ?founder .\",\n    \"?founder kg:5784 ?child .\",\n    \"?child kg:9585 kg:5784 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P26 ?sibling .\",\n      \"?person wdt:P39 ?position .\",\n      \"?position wdt:P108 \\\"Uniqa Insurance Group\\\"@en .\",\n      \"?sibling wdt:P21 ?gender .\",\n      \"FILTER(?person = wd:Q6417)\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?sibling wdt:P3373 wd:Q352 ;\",\n              \"wdt:P108 ?employer .\",\n      \"?employer wdt:P3373 wd:Q1022419 .\",\n      \"?resource ?p ?o .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:5089 ?hitler .\",\n    \"?sibling kg:9612 ?insuranceGroup .\",\n    \"?insuranceGroup kg:4923 <http://example.org/entity/Uniqa_Insurance_Group> .\",\n    \"?hitler kg:1490 <http://example.org/entity/Adolf_Hitler> .\",\n    \"?resource a ?type .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P1417 ?distributor .\", \"# Dr. Dre's employer\",\n      \"?game wdt:P361 ?distributor .\", \"# Animal Crossing: Pocket Camp's distributor\",\n      \"?company rdfs:label ?employerLabel.\",\n      \"?game rdfs:label ?gameLabel.\",\n      \"FILTER (lang(?employerLabel) = 'en' && lang(?gameLabel) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?entity wdt:P108 wd:Q6078 ;\", \"# Dr. Dre's employer\",\n      \"   wdt:P750 ?distributor .\", \"# The distributor of Animal Crossing: Pocket Camp\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER(?entity = wd:Q42310881)  # Filter for Animal Crossing: Pocket Camp\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?entity1 kg:7511 ?employer .\",\n    \"?entity2 kg:5087 ?resource .\",\n    \"?entity3 kg:0439 ?game .\",\n    \"?game kg:5087 ?resource .\",\n    \"?employer kg:0138 \\\"Dr. Dre\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wd::P26+ ?parent .\",\n      \"?parent wdt:P108 ?employer .\",\n      \"wd:Q97953 wdt:P26 ?person .\", \"-- Malia Obama's parent (assuming it is her mother, Michelle Obama)\",\n      \"FILTER(?person != wd:Q97953) .  -- Exclude Malia Obama herself\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?employer \",\n\t\t\"WHERE {\",\n\t\t\"?employer wdt:P108 wd:Q103941992; \",\n\t\t\"?parent wdt:P355 ?employer; wdt:P40 wd:Q15070044. \",\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?employer kg:4573 kg:9143 ;\",\n    \"   kg:8971 ?parent .\",\n    \"?parent kg:6383 kg:3910 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdtn:spouse wd:Q182659 .\",\n      \"?person wdt:P173 ?sibling .\",\n      \"wd:Q182659 wdt:P26 ?sibling .\",\n      \"VALUES ?person { wd:Q40268 } # Replace with the actual QID for the costume designer if known\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 ;\",\n              \"wdt:P26 ?spouse .\",\n      \"?spouse wdt:P3373 wd:Q730300 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:isCostumeDesigner ?yes .\",\n    \"?person2 kg:isSpouseOf ?person1 .\",\n    \"?person3 kg:isSiblingOf ?person2 .\",\n    \"?person3 kg:isPierreVanDormael ?yes .\",\n    \"}\",\n    \"VALUES ?resource { ?person1 }\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P162 ?spouse .\",\n      \"?spouse wdt:P39 wd:Q840759 .\", \"># Q840759 is the Wikidata item for ClubJenna (found by searching wikidata.org)\",\n      \"?person wdt:P161 ?costumeDesignerRole .\",\n      \"FILTER(?costumeDesignerRole = wd:Q24939) # Q24939 is the Wikidata item for Costume designer\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191. ;\", \"# Find a person whose occupation is costume designer\",\n      \"?person wdt:P26 ?spouse. ;\", \"# This person has a spouse\",\n      \"?spouse wdt:P112 wd:Q1102919.\" ,\"\\n# The spouse founded ClubJenna\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:0468 ?person2 .\",\n    \"?person2 kg:5654 ?costumeDesigner .\",\n    \"?person2 kg:8372 kg:0326 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3457 \\\"George Harrison\\\" ;\", \"># P3457 is the property for 'written and directed by'\",\n      \"?resource a/wdt:P31/wdt:P279* ?type .\"\n   ,\"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P57 wd:Q2643 ;\",\n    \"   wdt:P58 wd:Q2643 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6663 ;\",\n    \"   a/^kg:is <http://example.org/entity/Film> .\",\n    \"?film a/kg:Film ;\",\n    \"   kg:8835 ?screenwriter ;\",\n    \"   kg:6370 ?director .\",\n    \"?screenwriter kg:6663 ;\",\n    \"?director kg:6663 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q182694; # P50 is used for 'author', Q182694 is the Wikidata item for Anker Sørensen\",\n      \"?resource wdt:P2093 ?title. # P2093 is used for 'text written' or 'edited work'\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q24907 ;\",\n\t\t\"?resource wdt:P1040 wd:Q24907 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isScreenwriter kg:3395 ;\",\n    \"   kg:isFilmEditor kg:3395 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P27 ?country ;\",\n              \"wdt:P161 wd:Q950843.\" ,\n      \"?country rdfs:label ?countryLabel .\",\n      \"FILTER(LANG(?countryLabel) = 'en') .\",\n      \"?resource wdt:P26 ?person .\",\n      \"?resource rdfs:label ?label .\",\n      \"FILTER(LANG(?label) = 'en')\" ,\n    \"}\",\n    \"ORDER BY ?label\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t\t     \t \t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q1323191 ;\", \"# Occupation is costume designer\",\n      \"   wdt:P40 wd:Q4990261 .          # Nadja Weiss's parent\",\n      \"?parent wdt:P27 wd:Q34 .         # Parent's country of citizenship is Sweden\",\n      \"?resource wdt:P355 ?company .    # Resource has a subsidiary (optional, not directly relevant but included for completeness)\",\n      \"FILTER(?company = wd:Q1323191)   # Ensure the company is related to costume design\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:5528 ?occupation .\",\n    \"?person kg:0457 kg:4304 .\",\n    \"?parent kg:4923 ?person .\",\n    \"?parent kg:0967 ?nationality .\",\n    \"FILTER(?nationality = kg:4304) .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" , \"# Person\",\n      \"?person wdt:P7409 wd:Q28691.\" , \"# Takenori Sentō\",\n      \"?person wdt:P27 wd:Q172.\" , \"# Japanese nationality\",\n      \"?spouse wdt:P26 ?person.\" , \"# Spouse of the person\",\n      \"?spouse wdt:P106 wd:Q83594.\" , \"# Occupation is cinematographer\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3514303 wd:Q3514303 ;\", \"# Link to the specific person\",\n      \"  wdt:P26 ?spouse .\", \"# The spouse of the person\",\n      \"?spouse wdt:P27 wd:Q17 .\", \"# The spouse is from Japan\",\n      \"?spouse wdt:P106 wd:Q222344 .  # The spouse's occupation is cinematographer\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:7045 ?spouse .\",\n    \"?spouse kg:3399 \\\"Japan\\\"@en ;\",\n    \"   kg:8953 \\\"cinematographer\\\"@en .\",\n    \"?person kg:3305 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?director wdt:P39 ?employment.\" , \"# Find people who have an employment relationship\",\n      \"?employment wdt:P108 ?employer.\" , \"# Find the employer of those employments\",\n      \"FILTER(?director != ?employer).\" , \"# Ensure we don't return the director as their own employer\",\n      \"?director wdt:P27 wd:Q388.\" , \"# Filter to only directors from Canada\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?director wdt:P106 wd:Q2526255 ;\",\n               \"wdt:P108 ?employer .\",\n      \"?employer wdt:P112 wd:Q16 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:1505 ?employer .\",\n    \"?employer kg:9422 ?resource .\",\n    \"?resource kg:6946 kg:6057 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?workLabel\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q911786.\" , \"# P50 is used for 'author' or 'written by'\",\n      \"?work wdt:P648 wd:Q911786.\" , \"# P648 is used for 'producer'\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P162 wd:Q1744 ;\",\n\t\t\"   wdt:P58 wd:Q1744 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?work kg:producer ?producer .\",\n    \"?producer kg:7859 .\",\n    \"?work kg:screenwriter ?screenwriter .\",\n    \"?screenwriter kg:2187 .\",\n    \"?work a ?resourceType .\",\n    \"BIND(?resourceType AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P39 ?productionRole .\",\n      \"?productionRole wdt:P108 wd:Q24657990 .\", \"># Joe's Bed-Stuy Barbershop: We Cut Heads\",\n      \"?costumeDesigner wdt:P279* ?employer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q1323191 ;\",\n    \"   wdt:P108 ?employer .\",\n    \"?productionCompany wdt:P137 wd:Q1141467 .\",\n    \"?employer wdt:P272 ?productionCompany .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?costumeDesigner kg:1706 kg:1250 ;\",\n    \"   kg:0372 ?productionCompany .\",\n    \"?productionCompany kg:0324 kg:2873 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q5; # Person\",\n      \"?costumeDesigner wdt:P26 ?sibling. # Sibling of the costume designer\",\n      \"?sibling wdt:P1047 ?spouse. # Spouse of the sibling\",\n      \"?spouse wdt:P2159 \\\"Nadia Cassini\\\"@en. # Nadia Cassini as a spouse\",\n      \"VALUES ?resource { ?costumeDesigner }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 ;\",\n              \"wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P26 wd:Q461354 .\",\n      \"?person wdt:P3373 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:0230 kg:8468 ;\", \"# The person is a costume designer\",\n    \"   kg:4210 ?sibling .\", \"# The person has a sibling\",\n    \"?sibling kg:0230 ?spouse ;\", \"# The sibling is a spouse\",\n    \"   kg:7750 kg:8468 .# The spouse is Nadia Cassini\",\n    \"?person1 ?property ?value . # Include the resource (person) in the result\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wdtn:birthPlace / wdt:P39 ?employer ;\",\n      \"   rdfs:label \\\"Christian Abt\\\"@en .\",\n      \"?employer wdt:P279* ?parentCompany .\",\n      \"?parentCompany a wd:Q45268 .\", \">// Q45268 is the Wikidata item for 'company'\"\n    ,\"}\"\n  ]\n}\n"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 ;\", \"# The company is a business\",\n      \"   wdt:P355 ?parent .\", \"# The company has a parent\",\n      \"?parent wdt:P108 wd:Q67134 .  # The parent's employer is Christian Abt\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:5028 ?employer .\",\n    \"?employer kg:6897 ?parentCompany .\",\n    \"?child kg:5920 ?parentCompany .\",\n    \"?child kg:9566 kg:0513 .\",\n    \"?child kg:6833 kg:6833 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wd::P50 ?employer .\",\n      \"?film wd:P136 ?person .\",\n      \"?film wdt:P279* ?distributor .\",\n      \"FILTER NOT EXISTS { ?film wdt:P1477 ?otherDistributor }\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person wdt:P31 wd:Q1094792 ;\",\n    \"   wdt:P108 ?employer .\",\n    \"?film a wd:Q11424 ;\",\n    \"   wdt:P750 ?employer .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:9229 ?employer .\",\n    \"?film kg:8843 ?instanceOfFilm .\",\n    \"?employer kg:1532 ?distributor .\",\n    \"?distributor kg:8843 kg:8324 .\",\n    \"FILTER(?person = <http://example.org/knowledgeGraph/ClaireDoutriaux>)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property wdt:P648 ?producerDistributor.\",\n      \"wdt:P648 ?producerDistributor.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?resource = wd:Q11424)\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P272 wd:Q1651543 ;\",\n               \"wdt:P112 ?founder ;\",\n               \"wdt:P750 ?distributor .\",\n      \"?distributor wdt:P31/wdt:P279* wd:Q34 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:4695 ?founder .\",\n    \"?company kg:3184 kg:7740 .\",\n    \"?company kg:4730 kg:4677 .\",\n    \"FILTER(?founder = kg:3184).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P31/wd:Q9428776 ?role.\",\n      \"?person wdt:P26 ?spouse.\",\n      \"?spouse wdt:P27 ?swedishCountry.\",\n      \"?person wdt:P570 ?markSylwan.\",\n      \"FILTER(?role = wd:Q134319) \",\n      \"FILTER(?markSylwan = wd:Q89666)\",\n      \"VALUES ?swedishCountry { wd:Q173 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q6200573 ;\", \"# Spouse of Mark Sylwan\",\n      \"   wdt:P27 wd:Q34 ;\", \"# Swedish citizenship\",\n      \"   wdt:P106 wd:Q1323191 . # Occupation as costume designer\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:0279 kg:2591 ;\",\n    \"   kg:9973 ?spouse .\",\n    \"?spouse kg:4042 kg:8266 ;\",\n    \"   kg:6817 \\\"Mark Sylwan\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 ?spouse ;\",\n           \"wdt:P280* ?sibling .\",\n      \"?person2 wdt:P26 ?spouse ;\",\n           \"wdt:P280* [ wikibase:sitelink 'Antiochus IV Epiphanes' ] .\",\n      \"FILTER(?person1 != ?person2)\",\n      \"?person1 rdfs:label ?name1 \",\n      \"?person2 rdfs:label ?name2 \",\n      \"FILTER(LANG(?name1) = 'en')\",\n      \"FILTER(LANG(?name2) = 'en')\",\n    \"}\",\n    \"ORDER BY ?spouse\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?spouse wdt:P26 wd:Q2045778 ;\",\n           \"wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P3373 wd:Q2045778 .\",\n      \"?person wdt:P26 ?spouse ;\",\n           \"wdt:P3373 ?sibling .\",\n      \"FILTER(?person != wd:Q2045778)\",\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?spouseOrSibling a kg:Person ;\",\n    \"   (kg:isSpouse | kg:isSibling) kg:0790 ;\",\n    \"   (kg:isSpouse | kg:isSibling) [kg:3961, kg:2778] .\",\n    \"?spouseOrSibling kg:7882 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q11424890.\" , \"# Work is an artistic work\",\n      \"?work wdt:P6257 ?location.\" , \"# Location of the event (Sweden)\",\n      \"?work wdt:P57 ?productionEvent.\" , \"# Production event\",\n      \"?productionEvent wdt:P136 wd:Q98409.\" , \"# Type of production is 'Distributor and producer'\",\n      \"?productionEvent wdt:P279* ?distributorProducer.\" , \"# Distributor and producer\",\n      \"?work wdt:P17 ?locationFilter.\" , \"# Location filter for Sweden\",\n      \"FILTER(?location = wd:Q183).\" , \"# Q183 is the Wikidata item for Sweden\",\n      \"?productionEvent wdt:P580 ?date.\" , \"# Date of production event (optional, can be removed if not needed)\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?productionCompany wdt:P750 ?distributor ;\",\n      \"   wdt:P272 ?producer ;\",\n      \"   wdt:P112 wd:Q34 ;\",\n      \"   wdt:P750 wd:Q1651543.\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?company kg:1560 kg:1560 ;\", \"# Sweden founded the company\",\n    \"   kg:9298 kg:7034 .\", \"# The Magic Flute is produced by the company\",\n    \"OPTIONAL { ?company kg:6420 ?distributorProducer } # Optional to get distributor-producer if available\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?company kg:6420 [] }\" ,\"\\n# Ensure that only companies with a distributor/producer are returned\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?organization wdt:P170 ?founder.;\",\n                   \"wdt:P625 ?location.\",\n      \"?founder wdt:P26 ?prince;\",\n                \"p:P26 ?princeStatement.\",\n      \"?princeStatement ps:P26 ?princeSib; pq:P527 ?siblingDegree.\",\n      \"FILTER(?organization = wd:Q138924 && ?location != \\\"Netherlands\\\"@en && ?princeSib = wd:Q102109) # World Wide Fund for Nature, not in Netherlands, and Dutch sibling of Prince Aschwin of Lippe-Biesterfeld\",\n      \"?resource ?property ?value.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q117892 wdt:P112 ?founder.\",\n    \"  ?founder wdt:P3373 wd:Q2336212.\",\n    \"  ?founder wdt:P27 wd:Q29999.\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?founder kg:6658 ?wwf ;\",\n    \"   a ?founderType .\",\n    \"?wwf kg:9737 ?organization .\",\n    \"?founder kg:0880 ?netherlands .\",\n    \"{ ?person kg:2036 ?aschwin ;\",\n    \"   kg:3061 ?lippeBiesterfeld . } UNION { ?aschwin kg:2036 ?person ;\",\n    \"   kg:3061 ?lippeBiesterfeld . }\",\n    \"?aschwin kg:3061 ?lippeBiesterfeld .\",\n    \"}\",\n    \"VALUES ?organization { kg:9737 }\",\n    \"VALUES ?netherlands { kg:0880 }\",\n    \"VALUES ?lippeBiesterfeld { kg:5121 }\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?sibling .\", \"# sibling of\",\n      \"?person wdt:P108 wd:Q957439 .\", \"# employee of FC Bayern Munich\",\n      \"?sibling wdt:P27 wd:Q244 .\", \"# German nationality\"\n    ,\"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3373 ?sibling .\",\n      \"?person wdt:P108 wd:Q60414 .\",\n      \"?sibling wdt:P27 wd:Q183 .\",\n      \"wd:Q60414 wdt:P108* wd:Q15789\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:isSiblingOf ?sibling .\",\n    \"?sibling kg:isCitizenOf kg:5046 .\", \"># Germany (using the correct URI for Germany if available, or a similar property to indicate citizenship)\",\n    \"?person1 kg:isEmployedBy ?employer .\",\n    \"?employer kg:name \\\"FC Bayern Munich\\\" .\",\n    \"FILTER EXISTS { ?sibling kg:isEmployedBy kg:5620 }\" ,\"\\n# This FILTER is incorrect as per the given entities, it should check if a sibling of Dieter Hoeneß is employed by FC Bayern Munich directly or indirectly through employer property.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"wdt:P577 \\\"Drums of Love\\\"@en;\",\n      \"wdt:P1416 ?distributor; # distributor\",\n      \"wdt:P123 ?producer.   # producer\",\n      \"?film wdt:P57 \" , \"# founder\",\n      \"/wdt:P847 wd:Q10942.\" ,\"# Charlie Chaplin (Q10942 is the Wikidata ID for Charlie Chaplin)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?company wdt:P750 ?distributor ;\",\n               \"wdt:P112 wd:Q882 ;\",\n               \"wdt:P272 wd:Q3715556 .\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?company kg:4650 ?producer ;\",\n    \"   kg:7691 ?distributor .\",\n    \"?company kg:3141 \\\"Drums of Love\\\" .\",\n    \"?company kg:4440 \\\"Charlie Chaplin\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P50 ?author ;\", \"# P50 is used for authorship\",\n    \"?work wdt:P800 ?producer .\", \"# P800 is used for production by\",\n    \"?author wdsgn:label \\\"Vince Gilligan\\\"@en .\", \"# Filter for Vince Gilligan as the author\",\n    \"?producer wdsgn:label \\\"Bob Weinstein\\\"@en .\" ,\"# Filter for Bob Weinstein as the producer\",\n    \"VALUES ?resource { ?work }\" ,\"# Return only the resource (work)\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P58 wd:Q4500 ;\",\n    \"   wdt:P162 wd:Q888311 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isScreenwriter kg:3078 ;\",\n    \"   kg:isProducer kg:4870 .\",\n    \"}\",\n    \"FILTER EXISTS { ?resource kg:isScreenwriter kg:3078 }\",\n    \"FILTER EXISTS { ?resource kg:isProducer kg:4870 }\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company ?founder ?sibling\",\n    \"WHERE {\",\n      \"?company wdt:P17 ?country ;\", \"@en\",\n      \"?company wdt:P57 ?founder .\",\n      \"?founder wdt:P26 ?sibling .\",\n      \"FILTER(?sibling = wd:Q140) # Q140 is the Wikidata ID for Alphonse-Louis du Plessis de Richelieu\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P112 wd:Q1079409 ;\",\n           \"wdt:P31 wd:Q4830453 .\",\n      \"?founder wdt:P3373 wd:Q1079409 ;\",\n             \"wdt:P27 wd:Q142 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:4948 ?founder .\",\n    \"?founder kg:8053/kg:0200/kg:5212 ?country .\",\n    \"?founder kg:4705 ?sibling .\",\n    \"FILTER(?country = kg:5212)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 ?production ;\", \"># Check if the resource is a production of Michael Jackson's Ghosts\",\n      \"?production wdt:P1477 ?stanWinston .\", \"># Stan Winston was a producer\",\n      \"?production wdt:P57 ?michaelJackson .\", \"># Michael Jackson was involved in writing\"\n    ,\"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P31 wd:Q44477 ;\", \"# The movie 'Michael Jackson's Ghosts'\",\n    \"   wdt:P162 ?producer ;\", \"# Producer of the movie\",\n    \"   wdt:P58 ?screenwriter .\", \"# Screenwriter of the movie\",\n    \"VALUES ?producer { wd:Q320211 } .\", \"# Stan Winston is the producer\",\n    \"VALUES ?screenwriter { wd:Q2831 } .\" ,\"# Michael Jackson is the screenwriter\"\n   \t,\n    \"FILTER(?movie = wd:Q44477) .\",\n    \"?resource ?p ?o .\"\n   \t]\n \t}\n \t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:9252 ?producer ;\", \"# movie produced by producer\",\n    \"           kg:3301 ?screenwriter .\", \"# screenwriter is the person who wrote the script\",\n    \"?screenwriter kg:6258 \\\"Michael Jackson\\\" .\", \"# check if the screenwriter is Stan Winston\",\n    \"?movie kg:1959 \\\"Michael Jackson's Ghosts\\\" .\", \"# check if the movie title matches\"\n   \t,\n    \"FILTER NOT EXISTS { ?movie kg:3712 \\\"Michael Jackson\\\" }\" ,\"\\t# filter out if Michael Jackson himself wrote it\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P345 ? Spielberg .\",\n      \"?resource wdt:P50 ? ChrisColumbus .\",\n      \"?Spielberg rdfs:label \\\"Steven Spielberg\\\"@en .\",\n      \"?ChrisColumbus rdfs:label \\\"Chris Columbus\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1431 wd:Q8877 ;\",\n\t\t\"   wdt:P58 wd:Q75079 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:8361 kg:7184 ;\",\n    \"       kg:4377 kg:6774 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?work wdt:P6259 ?location.\" , \"# P6259 is used for founding country\",\n    \"?work wdt:P361 ?producerDistributor.\" , \"# P361 is used for producers and distributors\",\n    \"?work wdtn:Q7187.\" , \"# Q7187 is the Wikidata item for The Magic Flute\",\n    \"FILTER(?location = wd:Q183)\" , \"# Q183 is the Wikidata item for Sweden\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?producer wdt:P272 wd:Q1651543 ;\", \"# Producer of The Magic Flute\",\n    \"   wdt:P112 ?foundingEntity .\", \"# Founded by ?foundingEntity\",\n    \"?distributorProducer wdt:P750 ?producer .\", \"# ?distributorProducer distributed the producer\",\n    \"?foundingEntity wdt:P31 wd:Q34 .  # ?foundingEntity is Sweden\"\n   ,\"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:8573 ?foundingEntity .\",\n    \"?company kg:9238/kg:2311 ?productionCompany .\",\n    \"?company kg:8602 ?product .\",\n    \"?product kg:8167 kg:2311 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person1 ?person2 ?person3 ?person4\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 wd:Q95780. # Henutmire's parent\",\n      \"?person2 wdt:P70 wdt:P26 wd:Q95780. # Henutmire's spouse\",\n      \"?person3 wdt:P26 wd:Q95780. # Henutmire's sibling\",\n      \"OPTIONAL { ?person1 wdt:P50 wd:Q95784. } # Check if parent married Nefertarilllala\",\n      \"OPTIONAL { ?person2 wdt:P50 wd:Q95784. } # Check if spouse married Nefertarilllala\",\n      \"OPTIONAL { ?person3 wdt:P50 wd:Q95784. } # Check if sibling married Nefertarilllala\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?person1 wdt:P50 ?notMarriedToNefertarilllala. }\",\n    \"FILTER NOT EXISTS { ?person2 wdt:P50 ?notMarriedToNefertarilllala. }\",\n    \"FILTER NOT EXISTS { ?person3 wdt:P50 ?notMarriedToNefertarilllala. }\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3373 wd:Q443473 ;\", \"# Sibling of Henutmire\",\n      \"(wdt:P26 wd:Q210535) . # Spouse of Nefertari\",\n      \"?person wdt:P40 ?child .\", \"# Child of Henutmire (not directly relevant but included for completeness)\",\n      \"?person wdt:P355 ?sibling .\", \"# Subsidiary of Henutmire (not directly relevant but included for completeness)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?parent kg:7348 ?child .\", \"# parent of child\",\n    \"?child kg:2542 ?spouse .\", \"# child is spouse to someone\",\n    \"?sibling kg:kg:8188 ?child .\", \"# sibling has the same child\",\n    \"?spouse kg:2542* ?potentialNefertari .\", \"# spouse is connected to Nefertari through marriage\",\n    \"FILTER(?potentialNefertari = kg:2542)\" ,\"\\t# ensure it's directly Nefertari\"\n   ,\"}\",\n    \"VALUES ?resource { ?parent ?child ?spouse ?sibling }\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P166* wd:Q7394852.\" , \"# Jessica Drake\",\n      \"?resource wdt:P27 wd:Q940.\" , \"# Canadian citizenship\",\n      \"?resource wdt:P114 ?spouse.\" , \"# Spouse of the resource\",\n      \"FILTER(?spouse = wd:Q63875).\" ,\"\\t# Male spouse (Q63875 is the Wikidata item for male)\"\n    ,\n    \"}\"\n  ]\n}\n"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q233128 ;\", \"# Spouse of Jessica Drake\",\n      \"   wdt:P21 wd:Q6581097 ;\" , \"# Male gender\",\n      \"   wdt:P106 wd:Q1323191 ;\" , \"# Occupation is costume designer\",\n      \"   wdt:P27 wd:Q16 .\" ,\"\\n\\t# Citizenship is Canadian\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:4504 \\\"Jessica Drake\\\" ;\",\n    \"   kg:6728 ?spouse .\",\n    \"?spouse kg:3623 kg:2053 ;\",\n    \"   kg:5779 kg:3526 ;\",\n    \"   kg:382 kg:0382 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?sequel .\",\n      \"?sequel wdt:P1239 ?productionCompany .\",\n      \"?productionCompany rdfs:label ?companyName .\",\n      \"FILTER (lang(?companyName) = 'en') .\",\n      \"VALUES ?productionCompany { wd:Q6807 } # Televisa's Wikidata ID\",\n      \"?sequel wdt:P577 ?releaseDate .\",\n      \"?movie rdfs:label ?movieTitle .\",\n      \"FILTER (lang(?movieTitle) = 'en') .\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?sequel wdt:P155 wd:Q115945 ;\",\n    \"   wdt:P750 wd:Q47099 .\",\n    \"?sequel wdt:P162 ?producer .\"\n    ,\"}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:0879 ?originalWork .\",\n    \"?originalWork kg:5106 ?originalTitle .\",\n    \"?sequel kg:3680 ?productionCompany .\",\n    \"?productionCompany kg:5175 ?producer .\",\n    \"?productionCompany kg:7630 ?televisa .\",\n    \"FILTER(?televisa = kg:8932).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?childCompany ?parentCompany\",\n    \"WHERE {\",\n      \"?childCompany wdt:P279* ?parentCompany ;\",\n      \"wdt:P431 ?acquisitionEvent .\",\n      \"?parentCompany wdt:P31 wd:Q5784660 .\", \"-- Company\",\n      \"?acquisitionEvent wdt:P527 ?verizon .\" ,\"-- Verizon as the acquirer\"\n    ,\n    \"FILTER(?childCompany != ?parentCompany)\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 ;\", \"# Company is an instance of business\",\n      \"  wdt:P355 ?subsidiary .\", \"# The company has a subsidiary\",\n      \"?subsidiary wdt:P40 ?child .\", \"# The subsidiary is the child of another entity\",\n      \"?company wdt:P749 ?parent .\", \"# The company has a parent organization\"\n    ,\n    \"FILTER(?subsidiary = wd:Q467752) # Filter for Verizon Communications as the subsidiary\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n    \"?child kg:is_child ?sub.\",\n    \"?sub kg:is_has_subsidiary kg:2336. # Verizon Communications is the parent organization\",\n    \"?parent kg:is_parent_organization ?sub.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424865.\" , \"# Check if the resource is a production company or distributor\",\n      \"?resource wdt:P57 ?movie .\" , \"# The movie 'Barbary Coast' is associated with this resource\",\n      \"wd:Q303891 wdt:P57 ?movie\" , \"# 'Barbary Coast' is the movie in question\"\n    ,\n      \"?resource wdt:P176 ?founder.\" , \"# The founder of the company or distributor is associated with this resource\",\n      \"VALUES ?founder { wd:Q8249 wd:Q1053 }\" , \"# Mary Pickford (Q8249) and Charlie Chaplin (Q1053)\"\n    ,\n      \"FILTER EXISTS { ?resource wdt:P31/wdt:P279* wd:Q11424865. }\" , \"# Ensure the resource is a production company or distributor\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" , \"# Label in English for readability\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?productionCompany wdt:P112+ ?founder .\",\n      \"?productionCompany wdt:P272 wd:Q524849 .\",\n      \"?productionCompany wdt:P750 wd:Q524849 .\",\n      \"OPTIONAL { ?founder wdt:P2153 wd:Q882 } .\",\n      \"OPTIONAL { ?founder wdt:P2153 wd:Q104109 } .\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?productionCompany wdt:P750+ ?distributor . FILTER(?distributor != wd:Q524849) }\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?productionCompany kg:7888 ?foundedBy ;\",\n    \"   kg:2612 ?barbaryCoast .\",\n    \"?foundedBy kg:4517 [kg:0987 ; kg:4917 ] .\",\n    \"}\",\n    \"FILTER EXISTS { ?productionCompany kg:7074 \\\"Barbary Coast\\\" }\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P141 ?influence.\",\n      \"?influence rdfs:label ?influenceLabel.\",\n      \"?influence wdt:P26 ?sibling.\",\n      \"wd:Q7385 wdt:P141 ?actor.\",\n      \"FILTER(LANG(?influenceLabel) = 'en').\",\n      \"VALUES ?sibling { wd:Q109259 }\", \">// Astrid Young's sibling (assuming it is known or can be linked to Wikidata)\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"FILTER(?actor != ?resource).\"\n    ,\n      \"}\"\n    ,\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P737 wd:Q142701 ;\",\n           \"wdt:P106 wd:Q33999 .\",\n      \"?influence wdt:P737 ?actor ;\",\n           \"wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P106 wd:Q4811453 .\",\n      \"VALUES ?resource { ?actor }\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?actor kg:6618 ?occupation .\",\n    \"?influence kg:0855 ?actor .\",\n    \"?person kg:8238 ?occupation .\",\n    \"?sibling kg:5525 ?person .\",\n    \"?influence kg:1604 <http://example.org/knowledge_graph/1604/Pearl_Jam> .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q182694 ;\", \"# Jens Jørgen Thorsen (Q182694) was the author or editor\",\n    \"   wdt:P50 wd:Q374662 ;\" ,\"\\t# Ole John (Q374662) was the author or editor\",\n    \"   wdt:P50 wd:Q182695 .\" ,\"\\t# Jørgen Leth (Q182695) was the author or editor\",\n    \"}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"\\\" }\"\n  ]\n}\n"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q1687239 ;\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P58 wd:Q562108 .\",\n\t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q1687239 }\",\n\t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q35979475 }\",\n\t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q562108 }\",\n\t\t\"?resource wdt:P31/wdt:P279* ?type .\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P735 ?editors . }\"\n\t\t]}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:2298 kg:9960 ;\", \"# Jens Jørgen Thorsen is a screenwriter\",\n    \"                        kg:3420 kg:7552 .  # Jørgen Leth is an editor\",\n    \"\",\n    \"  OPTIONAL { ?resource kg:3420 kg:1913 }.\" ,\"\\t# Ole John is an editor (if applicable)\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?resource kg:3420 [] . }\" ,\"\\t# Ensure no other editors are involved\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P1647 ?costumeDesigner .\",\n      \"?person wdt:P2650 ?costumeDesigner .\",\n      \"?person wdt:P26 'Miguel Albaladejo' .\",\n      \"?person wdt:P27 wd:Q397 .\",\n      \"?resource wdt:P1647 ?costumeDesigner .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t  \t\t\t\t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q11424 ;\", \"# person is a film\",\n      \"   wdt:P27 wd:Q29 ;\", \"# person's country of citizenship is Spain\",\n      \"   wdt:P3373 wd:Q3083718 .\", \"# person is the sibling of Miguel Albaladejo\",\n      \"?person wdt:P2515 ?costumeDesigner.\" ,\"\\n# The costume designer of a film for this person\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:1890 kg:3335 ;\",\n    \"   kg:3009 kg:9609 .\",\n    \"?costumeDesigner kg:4627 ?film ;\",\n    \"   kg:3394 ?sibling .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?composer wdt:P39 ?spouse.\",\n      \"?spouse wdt:P21 ?gender.\",\n      \"?spouse wdt:P569 ?birthDate.\",\n      \"?composer wdt:P108 ?occupation.\",\n      \"FILTER(?gender = wd:Q65274996 && ?occupation = wd:Q134443 && ?spouse = wd:Q181666)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?composer wdt:P106 wd:Q36834 ;\", \"# Check if the person is a composer\",\n      \"  wdt:P26 wd:Q96203723 ;\", \"# The spouse is Mattias Järvinen Palme\",\n      \"  wdt:P27 wd:Q34 ;\", \"# The person's country of citizenship is Sweden\",\n      \"  wdt:P21 wd:Q6581072.\" ,\"\\n# The person is female\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:1877 ?spouse .\",\n    \"?person kg:8240 true .\",\n    \"?person kg:9200 kg:9820 .\",\n    \"?person kg:5795 kg:1005 .\",\n    \"?person kg:8255 kg:9200 .\",\n    \"?spouse kg:1240 ?matiasJärvinenPalme .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># QID for Stop for Bud film (assuming it exists)\",\n      \"?film wdt:P644 ?producer ;\",\n      \"?film wdt:P710 ?editor .\",\n      \"FILTER(STR(?producer) = 'Jens Jørgen Thorsen' || STR(?producer) = 'Ole John' || STR(?producer) = 'Jørgen Leth') .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P1040 ?editor .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P272 ?company .\",\n    \"wd:Q20729551 wdt:P1040 wd:Q35979475 ;\",\n    \"   wdt:P162 wd:Q1687239, wd:Q562108 ;\",\n    \"   wdt:P272 ?company .\",\n    \"?film ?property ?resource .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:3795 ?resource .\",\n    \"FILTER(?resource IN (kg:1205, kg:0702, kg:2710))\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q184073.\" , \"# Spouse of Ptolemy IX Lathyros\",\n      \"?resource wdt:P22 wd:Q9566.\" , \"# Female sibling of Ptolemy IX Lathyros\",\n      \"?resource wdt:P73 wd:Q108465.\" ,\"# Antiochus IX Cyzicenus as the spouse\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?sibling ?spouse\",\n    \"WHERE {\",\n      \"?spouse wdt:P26 wd:Q296446. ;\",\n      \"?sibling wdt:P3373 wd:Q3340. ;\",\n      \"?sibling wdt:P21 wd:Q6581072.\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:9407 ?female .\",\n    \"?female kg:9937 ?spouse .\",\n    \"?spouse kg:3533 .\",\n    \"?sibling kg:3250 .\",\n    \"?female kg:0360 ?sibling .\",\n    \"?female kg:3013 \\\"female\\\" .\"\n   ,\"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50|wdt:P286 ?author .\",\n    \"  ?resource wdt:P2439 ?editor .\",\n    \"  FILTER (regex(str(?author), \\\"Jens Jørgen Thorsen\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?author), \\\"Jørgen Leth\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?author), \\\"Ole John\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Jens Jørgen Thorsen\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Jørgen Leth\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Ole John\\\", \\\"i\\\")) \",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P58 wd:Q1687239 ;\", \"# Jens Jørgen Thorsen as screenwriter\",\n    \"wdt:P1040 wd:Q35979475 .  # Ole John as editor\",\n    \"FILTER EXISTS { ?work wdt:P1040 wd:Q562108 }\" ,\"\\n# Jørgen Leth as editor\",\n    \"?resource wdt:P31 ?type ;\",\n    \"wdt:P932 ?work .\",\n    \"}\",\n    \"VALUES ?type { wd:Q11424 }\" ,\"\\n# Assuming the type of resource is a film\"\n  ]\n}\n"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:5726 kg:8753 ;\", \"# Jens Jørgen Thorsen is a screenwriter\",\n    \"         kg:0254 kg:6599 ;          # Jørgen Leth is a film editor\",\n    \"         kg:2763 kg:2763 .           # Ole John is the subject\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P69 ?author ;\",\n    \"   wdt:P105 ?editor .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?work = wd:Q234879) # Replace with the actual Wikidata ID for 'Stop for Bud'\",\n    \"?author wdt:P2150 ?authorName .\",\n    \"?editor wdt:P2150 ?editorName .\",\n    \"VALUES (?authorName ?editorName) { (\\\"Jens Jørgen Thorsen\\\" \\\"Jørgen Leth\\\" \\\"Ole John\\\") }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n  \t\t\t\t\t        \t\t\t\t\t"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475 ;\",\n\t\t\"   wdt:P58 ?screenwriter .\",\n\t\t\"?film wikibase:sitelink 'Stop for Bud'@en .\",\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:isStopForBud ?stopForBud.\",\n    \"?film kg:hasEditor ?editor.\",\n    \"?film kg:hasScreenwriter ?screenwriter.\",\n    \"FILTER(?editor IN (kg:0943, kg:1474, kg:3342))\",\n    \"FILTER(?screenwriter IN (kg:0943, kg:1474, kg:3342))\",\n    \"?resource ?predicate ?object.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q114248760 ;\", \"># QID for 'Stop for Bud' film\",\n    \"wdt:P577 ?releaseDate .\",\n    \"?film wdt:P644 ?producer .\",\n    \"?film wdt:P710 ?editor .\",\n    \"VALUES ?producer { wd:Q2983112 wd:Q15484251 wd:Q1027495 }\", \"># QIDs for Ole John, Jørgen Leth, and Jens Jørgen Thorsen\",\n    \"VALUES ?editor { wd:Q2983112 wd:Q15484251 wd:Q1027495 }\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p IN (wdt:P644, wdt:P710))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P1040 ?editor .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P272 ?company .\",\n    \"VALUES ?film { wd:Q20729551 }\",\n    \"VALUES ?producer { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"?resource ?p ?film .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:3040 ?resource .\",\n    \"OPTIONAL { ?film kg:3420 ?producer . }\",\n    \"OPTIONAL { ?film kg:6668 ?editor . }\",\n    \"FILTER (BOUND(?producer) && BOUND(?editor))\",\n    \"VALUES (?producer ?editor) { (kg:4972 kg:3482) (kg:4972 kg:2694) (kg:4972 kg:3420) }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?film kg:5290 ?productionCompany . }\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?tvShow wdt:P57 ?person ;\",\n      \"   wdt:P3409 ?person2 ;\",\n      \"   wdt:P3408 ?person3 .\",\n      \"?person wd:qid ?personQid ;\",\n      \"?person2 wd:qid ?person2Qid ;\",\n      \"?person3 wd:qid ?person3Qid .\",\n      \"FILTER (STR(?personQid) = 'Q165947' || STR(?person2Qid) = 'Q165947' || STR(?person3Qid) = 'Q165947')\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?tvShow wdt:P1431* [ wdtt:P162* wd:Q365090, wd:Q95125, wd:Q43994 ];\",\n    \"           wdt:P272 ?productionCompany .\",\n    \"  VALUES ?productionCompany { wd:Q365090 wd:Q95125 wd:Q43994 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:producer/kg:executiveProducer kg:1258 ;\",\n    \"       kg:producer/kg:executiveProducer kg:5216 ;\",\n    \"       kg:producer/kg:executiveProducer kg:9138 .\",\n    \"?show a ?resourceType.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q184079.\" , \"# Ptolemy IX Lathyros's sibling\",\n      \"?resource wdt:P22 wd:Q184079.\" , \"# Ptolemy IX Lathyros's spouse\",\n      \"wd:Q184079 wdt:P26 ?sibling.\" , \"# Find the sibling of Ptolemy IX Lathyros\",\n      \"?sibling wdt:P22 wd:Q184079.\" , \"# The sibling is also his spouse, who must be a female sibling of Ptolemy X Alexander I\",\n      \"FILTER(?sibling != wd:Q184079)\" , \"# Ensure it's not the same person\",\n      \"?sibling wdt:P21 wd:Q652349.\" ,\"# The sibling must be female\"\n    ,\n    \"}\"\n  ]\n}\n"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"?sibling wdt:P21 wd:Q6581072 ;\", \"# Female sibling\",\n    \"wdt:P3373 wd:Q3340 .\", \"# Sibling of Ptolemy IX Lathyros\",\n    \"FILTER EXISTS { ?sibling wdt:P26 wd:Q3345 }\" ,\"\\n# Spouse of Ptolemy X Alexander I\"\n   ,\"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling1 kg:5268 ?spouse .\",\n    \"?sibling1 kg:3488 ?sibling2 .\",\n    \"?sibling2 kg:5835 .\",\n    \"?sibling2 kg:5348 kg:8343 .\",\n    \"?sibling2 kg:3488 kg:5268 ?sibling1 .\",\n    \"?sibling2 kg:5348 kg:5344 .\",\n    \"?sibling1 kg:5348 kg:5268 ?spouse .\",\n    \"?spouse kg:5348 kg:5268 ?sibling1 .\",\n    \"?spouse kg:5348 kg:5268 ?sibling2 .\",\n    \"?spouse kg:5348 kg:5268 kg:5344 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361* wd:Q2490785.\" , \"# Vince Gilligan\",\n      \"?resource wdt:P361* wd:Q167695.\" , \"# George Mastras\",\n      \"?episode wdt:P41 ?resource.\" , \"# Produced by\",\n      \"FILTER(?episode = wd:Q24802).\" , \"# Breaking Bad\",\n      \"?episode wdt:P31 wd:Q11926.\" , \"# TV episode\"\n    ,\n      \"?episode wdt:P570 ?date.\" , \"# Release date (to ensure it's the same show)\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?show wdt:P272 wd:Q1079 .\",\n    \"?show wdt:P58 wd:Q4500 ;\",\n    \"(wdt:P57 | wdt:P162) wd:Q5542223 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:0474 ?resource .\",\n    \"OPTIONAL { ?resource kg:8458 ?producer . }\",\n    \"OPTIONAL { ?resource kg:2552 ?director . }\",\n    \"OPTIONAL { ?resource kg:7788 ?screenwriter . }\",\n    \"}\",\n    \"FILTER ( ?producer = kg:0199 || ?director = kg:4646 || ?screenwriter = kg:4646 )\",\n    \"FILTER NOT EXISTS { ?show kg:0474 kg:5294 } # Ensure only Breaking Bad is considered\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  ?film2 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  ?film3 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  FILTER (regex(?film1, \\\"Tom at the Farm\\\", \\\"i\\\"))\",\n    \"  FILTER (regex(?film2, \\\"Heartbeats\\\", \\\"i\\\"))\",\n    \"  FILTER (regex(?film3, \\\"Laurence Anyways\\\", \\\"i\\\"))\",\n    \"  ?costumeDesigner <http://www.wikidata.org/prop/direct/P175> ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P106 wd:Q1323191 ;\",\n    \"   wdt:P161 [ wdt:P1040 ?editor ] .\",\n    \"VALUES ?film { wd:Q3530946 wd:Q2336453 wd:Q2615443 }\",\n    \"?editor wdt:P1040 ?resource.\"\n   \t]}\n \t  \t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?costumeDesigner kg:4718 ?occupation .\",\n    \"?costumeDesigner kg:9065 kg:9084 \\\"Tom at the Farm\\\" .\",\n    \"?costumeDesigner kg:9065 kg:9084 \\\"Heartbeats\\\" .\",\n    \"?costumeDesigner kg:9065 kg:9084 \\\"Laurence Anyways\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248700 ;\", \"># Assuming Q114248700 is the item identifier for films or movies in Wikidata\",\n      \"wdt:P136 ?role .\",\n      \"?person wdt:P161 ?film ;\", \"># P161 is used to link a person to their role in a film\",\n      \"wdt:P161 wd:Q24905780 .  # Q24905780 is the item identifier for 'editor' or 'star'\",\n      \"VALUES ?film { wd:Q1234567890 } ;\", \"># Replace with actual Wikidata identifiers for the films\",\n      \"FILTER(?role IN (wdt:P161))\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}\n"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q5 ;\", \"# The resource is a human\",\n      \"?resource wdt:P1040 wd:Q658822 ;\" , \"# The resource was an editor of In the Park\",\n      \"?resource wdt:P161 wd:Q658822 .\", \"# The resource starred in In the Park\",\n      \"?resource wdt:P1040 wd:Q2718259 ;\" , \"# The resource was an editor of The Professor\",\n      \"?resource wdt:P161 wd:Q2718259 .\" ,\"# The resource starred in The Professor\",\n      \"?resource wdt:P1040 wd:Q921678 ;\" , \"# The resource was an editor of Shanghaied\",\n      \"?resource wdt:P161 wd:Q921678 .\" ,\"# The resource starred in Shanghaied\",\n      \"?resource wdt:P1040 wd:Q45602 ;\" , \"# The resource was an editor of Modern Times\",\n      \"?resource wdt:P161 wd:Q45602 .\" ,\"# The resource starred in Modern Times\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:4097/kg:6250 ?film .\",\n    \"?person kg:4097/kg:7044 ?film .\",\n    \"{ VALUES ?film { kg:8179 kg:0287 kg:9013 kg:7719 } }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?edit ?direct ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n             \"wdt:P577 ?date.\",\n      \"?person wdt:P31 wd:Q5.\", \"# Ensure the person is a human\",\n      \"?person wdt:P106/wdt:P279* wd:Q899696. # Editor or Director role\",\n      \"OPTIONAL { ?film wdt:P703 ?person. } # To link people to films they edited/directed\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER (regex(str(?person), 'Eduardo Sánchez|Gareth Evans|Jason Eisener|Adam Wingard', 'i'))\"\n  ]\n}\n"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?film ?edit ?direct \",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P57 ?direct .\",\n\t\t\t\"?person wdt:P1040 ?edit .\",\n\t\t\t\"VALUES ?person { wd:Q16198328 wd:Q4679987 wd:Q42072078 wd:Q1291210 }\", \"defaulting Eduardo Sánchez to Q1291210 as it's the closest match\",\n\t\t\t\"?direct wdt:P31* ?film .\"\n\t\t]}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:6442 | kg:1480 | kg:3907 | kg:6912) kg:5107 ?editDir .\",\n    \"  ?editDir a (kg:0019 | kg:5107).\",\n    \"  ?resource ?predicate ?editDir.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P3459 'Four Rooms'.\", \"># Film title (replace with actual property if needed)\",\n      \"?film wdt:P50 ?director.\", \"># Director property\",\n      \"?film wdt:P69 ?writer.\" ,\", # Writer property\",\n      \"FILTER(?director IN wd:Q182473, wd:Q11300, wd:Q182473, wd:Q52416)\" ,\", # Specific individuals (replace with actual Wikidata IDs if needed)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q1137372 ;\", \"# Define the movie 'Four Rooms'\",\n         \"wdt:P57 ?director ;\", \"# Director of the movie\",\n         \"wdt:P58 ?screenwriter . # Screenwriter of the movie\",\n      \"VALUES ?director { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Check if any of these are the director or screenwriter\"\n    ,\n      \"?movie wdt:P31 wd:Q1137372 ;\",\n         \"wdt:P57 ?director .\", \"# Director of the movie only for this part\",\n      \"VALUES ?director { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Check if any of these are the director\"\n    ,\n      \"?movie wdt:P31 wd:Q1137372 ;\",\n         \"wdt:P58 ?screenwriter .\", \"# Screenwriter of the movie only for this part\",\n      \"VALUES ?screenwriter { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Check if any of these are the screenwriter\"\n    ,\n      \"?resource ?p ?object .\", \"# Return all resources that match the conditions\"\n    ,\n      \"FILTER(?p IN (wdt:P57, wdt:P58))\" ,\"\\n# Filter to only include director and screenwriter properties\"\n    ,\n      \"VALUES ?object { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Check if the resource is one of the specified individuals\"\n    ,\n      \"?movie wdt:P31 wd:Q1137372 .\" ,\"\\n# Ensure that the movie 'Four Rooms' is being queried\"\n    ,\n      \"FILTER NOT EXISTS { ?movie wdt:P57 ?otherDirector . FILTER(?otherDirector != wd:Q47284 && ?otherDirector != wd:Q549956 && ?otherDirector != wd:Q3772 && ?otherDirector != wd:Q2838329) }\" ,\"\\n# Ensure no other directors are involved\"\n    ,\n      \"FILTER NOT EXISTS { ?movie wdt:P58 ?otherScreenwriter . FILTER(?otherScreenwriter != wd:Q47284 && ?otherScreenwriter != wd:Q549956 && ?otherScreenwriter != wd:Q3772 && ?otherScreenwriter != wd:Q2838329) }\" ,\"\\n# Ensure no other screenwriters are involved\"\n    ,\n      \"VALUES ?p { wdt:P57 wdt:P58 }\" ,\"\\n# Ensure only director and screenwriter properties are returned\"\n    ,\n      \"?movie wdt:P31 wd:Q1137372 .\" ,\"\\n# Ensure that the movie 'Four Rooms' is being queried again for final confirmation\"\n    ,\n      \"FILTER(?p IN (wdt:P57, wdt:P58))\" ,\"\\n# Final filter to ensure only director and screenwriter properties are returned\"\n    ,\n      \"?resource ?p ?object .\" ,\"\\n# Return the resource with its property and object\"\n    ,\n      \"VALUES ?object { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Ensure only the specified individuals are returned\"\n    ,\n      \"?movie wdt:P31 wd:Q1137372 .\" ,\"\\n# Final confirmation of the movie 'Four Rooms'\"\n    ,\n      \"FILTER(?p IN (wdt:P57, wdt:P58))\" ,\"\\n# Ensure only director and screenwriter properties are returned\"\n    ,\n      \"?resource ?p ?object .\" ,\"\\n# Return the resource with its property and object again for final confirmation\"\n    ,\n      \"VALUES ?object { wd:Q47284 wd:Q549956 wd:Q3772 wd:Q2838329 }\" ,\"\\n# Ensure only the specified individuals are returned\"\n    ,\n     "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0456 kg:2361* ?director .\",\n    \"  kg:0456 kg:4672* ?screenwriter .\",\n    \"?director kg:2361* ?person FILTER ( ?person IN (kg:3334, kg:5296, kg:4355, kg:4672) ) .\",\n    \"?screenwriter kg:4672* ?person FILTER ( ?person IN (kg:3334, kg:5296, kg:4355, kg:4672) ) .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?movie wdt:P3459 ?director .\", \"># P3459 is the property for 'director of work'\",\n    \"  ?movie wdt:P1617 ?producer .\", \"># P1617 is the property for 'production company'\",\n    \"  FILTER(STR(?director) = 'Susie Essman' || STR(?director) = 'Malcolm McDowell' || STR(?director) = 'Clark Spencer' || STR(?director) = 'Miley Cyrus')\",\n    \"  FILTER(STR(?producer) = 'Susie Essman' || STR(?producer) = 'Malcolm McDowell' || STR(?producer) = 'Clark Spencer' || STR(?producer) = 'Miley Cyrus')\",\n    \"  VALUES ?movie { wd:Q12345678 } # Replace with the actual Wikidata ID for Super Rhino if known\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P31 wd:Q11424653 ;\", \"# Check if the resource is a movie\",\n    \"   wdt:P648 wd:Q3977597 .\", \"# Super Rhino as the title of the movie\",\n    \"OPTIONAL { ?movie wdt:P57 ?director. } FILTER(?director IN (wd:Q40220, wd:Q117392, wd:Q5127380)) .\", \"# Check if Susie Essman, Malcolm McDowell, or Clark Spencer is a director\",\n    \"OPTIONAL { ?movie wdt:P162 ?producer. } FILTER(?producer IN (wd:Q40220, wd:Q117392, wd:Q5127380, wd:Q4235)) .\", \"# Check if Susie Essman, Malcolm McDowell, Clark Spencer, or Miley Cyrus is a producer\",\n    \"}\",\n    \"VALUES ?resource { wd:Q3977597 }\" ,\"\\n# Return only Super Rhino\"\n  ]\n}\n"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:0301 ?director ;\",\n    \"   kg:1706 ?producer .\",\n    \"?director kg:0032 \\\"Susie Essman\\\" ;\",\n    \"         kg:0032 \\\"Malcolm McDowell\\\" ;\",\n    \"         kg:0032 \\\"Clark Spencer\\\" ;\",\n    \"         kg:0032 \\\"Miley Cyrus\\\" .\",\n    \"?producer kg:9737 \\\"Susie Essman\\\" ;\",\n    \"          kg:9813 \\\"Malcolm McDowell\\\" ;\",\n    \"          kg:2682 \\\"Clark Spencer\\\" ;\",\n    \"          kg:5184 \\\"Miley Cyrus\\\" .\",\n    \"?movie kg:2829 ?production_company .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P50 ?person .\",\n    \"  ?film wdt:P6487 ?person .\", \"># P6487 is the property for 'executive producer'\",\n    \"  ?film wdt:P6392 ?person .\", \"># P6392 is the property for 'producer'\",\n    \"  ?film wdt:P2915 ?person .\", \"># P2915 is the property for 'editor'\",\n    \"  ?person wdt:P31 wd:Q5 .\" ,\"\\n# Q5 is the item for 'human'\",\n    \"  FILTER(STR(?person) = 'George Lucas'@en)\",\n    \"  VALUES ?resource { wd:Q2490 } # Q2490 is the item for 'Star Wars (film)' as an example\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q38222 ;\",\n    \"?resource wdt:P1431 wd:Q38222 ;\",\n    \"?resource wdt:P162 wd:Q38222 ;\",\n    \"?resource wdt:P1040 wd:Q38222 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6869 kg:1896 ;\", \"# Executive Producer\",\n    \"   kg:6869 kg:6686 ;\" , \"# Producer\",\n    \"   kg:6869 kg:5488 ;\" , \"# Production Company\",\n    \"   kg:6869 kg:6572 .\" ,\"# Editor\",\n    \"?resource kg:8776 kg:1896.\" ,\"# Screenwriter (George Lucas)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q114248065 ;\", \"># Every Man for Himself, Passion, and Notre musique are instances of film or TV series\"\n     \t\t] }"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P108 wd:Q909176 ;\",\n           \"wdt:P58 ?screenwriter ;\",\n           \"wdt:P1040 ?editor .\",\n      \"?screenwriter wdt:P31/wdt:P279* wd:Q5 .\" ,\n      \"?editor wdt:P31/wdt:P279* wd:Q5 .\",\n      \"VALUES ?work { wd:Q972787 wd:Q3141131 wd:Q672061 }\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?writerOrEditor kg:2392 kg:2452 ;\",\n    \"   kg:2392 kg:8913 ;\",\n    \"   kg:2392 kg:4179 ;\",\n    \"   kg:isEmployedBy kg:2410 .\",\n    \"?writerOrEditor a ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?tvShow wdt:P3459 ?producer .\",\n      \"?tvShow wdt:P6480 ?producer2 .\",\n      \"?tvShow wdt:P6480 ?producer3 .\",\n      \"?tvShow wdt:P6480 ?producer4 .\",\n      \"VALUES ?producer { wd:Q175911 }\",\n      \"VALUES ?producer2 { wd:Q1126227 }\",\n      \"VALUES ?producer3 { wd:Q1028855 }\",\n      \"VALUES ?producer4 { wd:Q1028856 }\",\n      \"?tvShow wdt:P31 wd:Q11922 .\",\n      \"FILTER(?producer = wd:Q175911 || ?producer2 = wd:Q1126227 || ?producer3 = wd:Q1028855 || ?producer4 = wd:Q1028856)\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?show wdt:P31 wd:Q148045; # Assuming the show has a type property, if needed for filtering\",\n    \"  wdt:P272 wd:Q819109. # Laws of Attraction\",\n    \"OPTIONAL { ?show wdt:P1431 wd:Q1969128 } # Bob Yari as executive producer\",\n    \"OPTIONAL { ?show wdt:P1431 wd:Q381545 } # Elie Samaha as executive producer\",\n    \"OPTIONAL { ?show wdt:P162 wd:Q381545 } # Elie Samaha as producer\",\n    \"OPTIONAL { ?show wdt:P162 wd:Q1295611 } # Toby Emmerich as producer\",\n    \"?show a wd:Q819109. # Laws of Attraction\"\n   \t,\n    \"} \"\n  ]\n}\n             \t\t  \t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:5915 ?productionCompany .\",\n    \"?productionCompany kg:0657 ?executiveProducer .\",\n    \"?productionCompany kg:0074 ?producer1 .\",\n    \"?productionCompany kg:4872 ?producer2 .\",\n    \"?productionCompany kg:3569 ?producer3 .\",\n    \"?productionCompany kg:4797 ?producer4 .\",\n    \"FILTER (BOUND(?executiveProducer) && BOUND(?producer1) && BOUND(?producer2) && BOUND(?producer3) && BOUND(?producer4))\",\n    \"?show kg:9039 ?title .\",\n    \"}\",\n    \"VALUES ?title { <http://example.org/knowledge_graph/Laws_of_Attraction> }\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q134378.\" , \"># Check if the resource is a film or its subclass\",\n    \"  ?resource wdt:P577 ?date.\" , \"># Optional date, can be removed if not needed\",\n    \"  OPTIONAL { ?resource wdt:P644 ?akiraKurosawa . } # Akira Kurosawa as editor/producer/writer\",\n    \"  FILTER(?akiraKurosawa = wd:Q127859) # Q127859 is the Wikidata ID for Akira Kurosawa\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P1431 ?executiveProducer .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P58 ?screenwriter .\",\n    \"?film wdt:P1040 ?editor .\",\n    \"?film wdt:P31 wd:Q854990 .\",\n    \"VALUES ?screenwriter { wd:Q8006 }\",\n    \"VALUES ?producer { wd:Q8006 }\",\n    \"VALUES ?executiveProducer { wd:Q8006 }\",\n    \"?film wdt:P272 ?productionCompany .\"\n   \t]}\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:director ?person ;\",\n    \"   kg:title \\\"Kagemusha\\\" ;\",\n    \"   kg:producer ?producer ;\",\n    \"   kg:screenwriter ?screenwriter ;\",\n    \"   kg:editor ?editor .\",\n    \"\",\n    \"?producer a kg:2311 ;\",\n    \"   kg:personName ?producerPerson .\",\n    \"?screenwriter a kg:7632 ;\",\n    \"   kg:personName ?screenwriterPerson .\",\n    \"?editor a kg:9931 ;\",\n    \"   kg:personName ?editorPerson .\",\n    \"\",\n    \"VALUES ?person { kg:1425 }\", \"-- Akira Kurosawa\",\n    \"FILTER(?producerPerson = \\\"Akira Kurosawa\\\" && ?screenwriterPerson = \\\"Akira Kurosawa\\\" && ?editorPerson = \\\"Akira Kurosawa\\\")\",\n    \"?film kg:title \\\"Kagemusha\\\" .\",\n    \"}\",\n    \"\",\n    \"BIND(STR(?producer) AS ?resource)\",\n    \"BIND(STR(?screenwriter) AS ?resource)\",\n    \"BIND(STR(?editor) AS ?resource)\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># Q16501804 is the item for film\",\n    \"           wdt:P50 ?director .\",\n    \"  ?director wdt:P31/wdt:P279* wd:Q1246726 ; # Q1246726 is the item for human\",\n    \"            wdt:P283 ?coDirector .\",\n    \"  FILTER(?coDirector IN (wd:Q105162, wd:Q196619, wd:Q105162)) # Jørgen Leth, Jens Jørgen Thorsen, Ole John\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># Ensure it's a film\",\n    \"           wdt:P286 ?writer .\",\n    \"  ?writer wdt:P31/wdt:P279* wd:Q1246726 ; # Ensure the writer is a human\",\n    \"         wdt:P283 ?coWriter .\",\n    \"  FILTER(?coWriter IN (wd:Q105162, wd:Q196619, wd:Q105162)) # Jørgen Leth, Jens Jørgen Thorsen, Ole John\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q562108 ;\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P1040 wd:Q1687239 .\"\n\t\t]}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:director kg:6296 ;\",\n    \"   kg:screenwriter kg:8650 ;\",\n    \"   kg:editor kg:7913 .\",\n    \"?film kg:director kg:6296 ;\",\n    \"   kg:screenwriter kg:9267 ;\",\n    \"   kg:editor kg:7913 .\",\n    \"?film kg:director kg:6545 ;\",\n    \"   kg:screenwriter kg:8202 ;\",\n    \"   kg:editor kg:7913 .\",\n    \"?resource ?property ?value .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31/wdt:P279* wd:Q16504802 ;\", \"># A film or TV series\",\n    \"wdt:P57 P186 \\\"Ole John\\\" ;\", \"># Directed by Ole John\",\n    \"wdt:P57 P186 \\\"Jørgen Leth\\\" ;\", \"># Directed by Jørgen Leth\",\n    \"wdt:P57 P186 \\\"Jens Jørgen Thorsen\\\" .\", \"># Directed by Jens Jørgen Thorsen\"\n   \t]}\n \t\t    \t\t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P1040 wd:Q35979475 .\",\n\t\t\"OPTIONAL { ?resource wdt:P57 wd:Q562108 }\",\n\t\t\"OPTIONAL { ?resource wdt:P58 wd:Q562108 }\",\n\t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q562108 }\",\n\t\t\"OPTIONAL { ?resource wdt:P57 wd:Q1687239 }\",\n\t\t\"OPTIONAL { ?resource wdt:P58 wd:Q1687239 }\",\n\t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q1687239 }\",\n\t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P1040 wd:Q35979475 .\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P57 wd:Q562108 }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P58 wd:Q562108 }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P1040 wd:Q562108 }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P57 wd:Q1687239 }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P58 wd:Q1687239 }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P1040 wd:Q1687239 }\",\n\t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P1040 wd:Q35979475 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2033 ?director ;\",\n    \"   kg:0860 ?screenwriter ;\",\n    \"   kg:2823 ?editor .\",\n    \"?director kg:1751 \\\"Ole John\\\" ;\",\n    \"?screenwriter kg:1751 \\\"Jørgen Leth\\\" ;\",\n    \"?editor kg:1751 \\\"Jens Jørgen Thorsen\\\".\",\n    \"BIND(?film AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film a wd:Film ;\",\n        \"wdt:P31* wd:Q11424980.\" , \"# Check if it's a film\",\n      \"?person wdt:P577 ?date .\", \"# Person has a date (to ensure we're talking about the same person)\",\n      \"?film wdt:P161 ?person ;\", \"# Film has person as cinematographer or director\",\n      \"VALUES ?film { wd:Q249308 wd:Q576272 wd:Q1024768 wd:Q1024769 }\" , \"# The specific films mentioned\",\n      \"?person wdt:P750 ?productionCompany .\", \"# Person is a producer for the film\",\n    \"}\"\n  ]\n}\n"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?person wdt:P106 wd:Q283699 ;\", \"# Director of 'Hatchet for the Honeymoon'\",\n\t\t\"wdt:P57 wd:Q600762 ;\" , \"# Directed 'The Whip and the Body'\",\n\t\t\"wdt:P344 wd:Q1216566 .\" , \"# Cinematographer of 'Black Sunday'\",\n\t\t\"?person wdt:P344 wd:Q629819.\" , \"# Cinematographer of 'Danger: Diabolik'\",\n\t\t\"?person wdt:P106 wd:Q3282637.\" ,\"# Film producer\"\n\t\t]}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1376 kg:5290 ;\",\n    \"   kg:1376 kg:8588 ;\",\n    \"   kg:1376 kg:5028 ;\",\n    \"   kg:1376 kg:0317 ;\",\n    \"   kg:1376 kg:5086 ;\",\n    \"   kg:3378 ?property .\",\n    \"?resource kg:1376 kg:5290 ;\",\n    \"   kg:1376 kg:8588 ;\",\n    \"   kg:1376 kg:0317 ;\",\n    \"   kg:1376 kg:5086 ;\",\n    \"   kg:5028 ?property .\",\n    \"?resource kg:1376 kg:5086 ;\",\n    \"   kg:5028 ?property .\",\n    \"?resource a kg:5028 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property rdfs:label \\\"Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits\\\"@en .\",\n      \"?actor wdt:P161 ?film ;\",\n      \"  wdt:P3308 ?cinematography ;\",\n      \"  wdt:P6594 ?direction.\",\n      \"FILTER EXISTS { ?film wdt:P31 wd:Q11424 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?actor wdt:P31 wd:Q5 .\", \"># Assuming the actor is a human (Q5 is the Wikidata item for human)\",\n    \"?actor wdt:P106 wd:Q3485595 ;\", \"># The actor directed Six Men Getting Sick\"\n   \t, \"wdt:P106 wd:Q3016313 ;\", \"># The actor is the director of Darkened Room\"\n   \t, \"wdt:P106 wd:Q862058 ;\", \"># The actor is the director of Inland Empire\"\n   \t, \"wdt:P106 wd:Q33999 .\", \"># The actor is the director of Rabbits\"\n   \t, \"?actor wdt:P344 wd:Q3016313 ;\", \"># The actor is also a cinematographer for Darkened Room\"\n   \t, \"?actor wdt:P344 wd:Q862058 ;\", \"># The actor is also a cinematographer for Inland Empire\"\n   \t, \"?actor wdt:P344 wd:Q33999 ;\", \"># The actor is also a cinematographer for Rabbits\"\n   \t, \"FILTER NOT EXISTS { ?actor wdt:P106 wd:Q3016313 }\" ,\",\"\n   \t, \"FILTER NOT EXISTS { ?actor wdt:P106 wd:Q862058 }\" ,\",\"\n   \t, \"FILTER NOT EXISTS { ?actor wdt:P106 wd:Q33999 }\" ,\",\"\n   \t, \"FILTER NOT EXISTS { ?actor wdt:P106 wd:Q1473406 }\" ,\",\"\n   \t, \"FILTER NOT EXISTS { ?actor wdt:P106 wd:Q3485595 }\" ,\",\"\n   \t, \"FILTER EXISTS { ?actor wdt:P106 wd:Q3016313 ; wdt:P106 wd:Q862058 ; wdt:P106 wd:Q33999 ; wdt:P344 wd:Q3016313 ; wdt:P344 wd:Q862058 ; wdt:P344 wd:Q33999 }\"\n   \t, \"?resource ?p ?o .\"\n   \t,\n    \"}\"\n  ]\n}\n"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?actor kg:is actor ?actorResource .\",\n    \"?actorResource kg:occupation ?occupation .\",\n    \"?occupation kg:director ?directedFilm1 .\",\n    \"?occupation kg:director ?directedFilm2 .\",\n    \"?occupation kg:director ?directedFilm3 .\",\n    \"?occupation kg:director ?directedFilm4 .\",\n    \"?occupation kg:is directorOfPhotography ?cinematographyFilm1 .\",\n    \"?occupation kg:is directorOfPhotography ?cinematographyFilm2 .\",\n    \"?occupation kg:is directorOfPhotography ?cinematographyFilm3 .\",\n    \"?occupation kg:is directorOfPhotography ?cinematographyFilm4 .\",\n    \"VALUES (?directedFilm1 ?directedFilm2 ?directedFilm3 ?directedFilm4) { (kg:8094 kg:1061 kg:7926 kg:6644) }\",\n    \"VALUES (?cinematographyFilm1 ?cinematographyFilm2 ?cinematographyFilm3 ?cinematographyFilm4) { (kg:8094 kg:1061 kg:7926 kg:6644) }\",\n    \"?actorResource kg:name ?name .\",\n    \"}\",\n    \"ORDER BY ?name\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P50 ?person ;\",\n    \"   wdt:P6489 ?person2 ;\",\n    \"   wdt:P31/wdt:P279* wd:Q11424 .\",\n    \"?person wdt:P106/wdt:P279* wd:Q87579 ;\",\n    \"?person2 wdt:P106/wdt:P279* wd:Q87579 ;\",\n    \"   wdt:P39 ?movie .\",\n    \"FILTER (regex(str(?person), \\\"David Zucker\\\", \\\"i\\\")) &&\",\n    \"FILTER (regex(str(?person2), \\\"Jim Abrahams\\\", \\\"i\\\")) ||\",\n    \"FILTER (regex(str(?person2), \\\"Jerry Zucker\\\", \\\"i\\\"))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?film ?role\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" ,\n      \"?person wdt:P735 \\\"Ole John\\\"@en, \\\"Jens Jørgen Thorsen\\\"@en, \\\"Jørgen Leth\\\"@en.\" ,\n      \"?film wdt:P31/wdt/P136* ?role ;\",\n      \"   p:P31/ps:P31 wd:Q11424.\" ,\n      \"?statement a wikibase.Statement;\",\n      \"   pq:P580 ?person;\",\n      \"   pq:P136 ?role.\",\n      \"}\",\n    \"ORDER BY ?film\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"OPTIONAL { ?person wdt:P57 ?resource . }\",\n    \"OPTIONAL { ?person wdt:P58 ?resource . }\",\n    \"OPTIONAL { ?person wdt:P1040 ?resource . }\",\n    \"FILTER EXISTS { ?person wdt:P57 ?resource . } UNION FILTER EXISTS { ?person wdt:P58 ?resource . } UNION FILTER EXISTS { ?person wdt:P1040 ?resource . }\",\n    \"}\",\n    \"VALUES ?property { wdt:P57 wdt:P58 wdt:P1040 }\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:8518 | kg:0721 | kg:8090) kg:is director ?resource ;\",\n    \"         kg:is screenwriter ?resource ;\",\n    \"         kg:is film editor ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director WHERE {\",\n    \"?movie wdt:P3459 'Grindhouse'.\", \"># P3459 is the property for 'written and directed by'\",\n    \"?movie wdt:P61 ?director. # P61 is the property for 'director'\",\n    \"VALUES ?director { wd:Q28071 wd:Q16601 wd:Q11603 wd:Q9545 wd:Q11604 } # Q numbers for Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie wdt:P31 wd:Q24906 ;\", \"name \\\"Grindhouse\\\" .\",\n\t\t\t\"?movie wdt:P57 ?director ;\",\n\t\t\t\"?movie wdt:P58 ?screenwriter .\",\n\t\t\t\"?director wdt:P279* wd:Q47284 ; # Robert Rodriguez\",\n\t\t\t\"?director wdt:P279* wd:Q522057 ; # Edgar Wright\",\n\t\t\t\"?director wdt:P279* wd:Q679023 ; # Eli Roth\",\n\t\t\t\"?director wdt:P279* wd:Q358714 ; # Rob Zombie\",\n\t\t\t\"?director wdt:P279* wd:Q3772 .  # Quentin Tarantino\",\n\t\t\t\"OPTIONAL { ?screenwriter wdt:P279* wd:Q47284 }\",\n\t\t\t\"OPTIONAL { ?screenwriter wdt:P279* wd:Q522057 }\",\n\t\t\t\"OPTIONAL { ?screenwriter wdt:P279* wd:Q679023 }\",\n\t\t\t\"OPTIONAL { ?screenwriter wdt:P279* wd:Q358714 }\",\n\t\t\t\"OPTIONAL { ?screenwriter wdt:P279* wd:Q3772 }\"\n\t\t,\n\t\t\"FILTER NOT EXISTS { ?movie wdt:P57 ?otherDirector . FILTER (?otherDirector != ?director) }\",\n\t\t\"FILTER NOT EXISTS { ?movie wdt:P58 ?otherScreenwriter . FILTER (?otherScreenwriter != ?screenwriter) }\",\n\t\t\"?person ?p ?o.\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie kg:2849 ?resource .\",\n\t\t\t\"?resource (kg:6979|kg:7920)/kg:6605|/kg:2475|/kg:1797|/kg:2849|/kg:4973 kg:7920 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P31/wdt:P279* wd:Q865420.\" , \"# Film producer\",\n    \"  FILTER(?filmProducer != wd:Q865420).\" , \"# Exclude the class itself\",\n    \"  ?filmProducer wdt:P577 ?productionDate .\",\n    \"  FILTER NOT EXISTS { ?filmProducer wdt:P193 ?film }.\" , \"# Ensure no existing film production to avoid false positives\",\n    \"  VALUES ?films { wd:Q2486012 wd:Q10275655 wd:Q10275656 wd:Q10275657 }.\" , \"# Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey\",\n    \"  ?film wdt:P1477 ?filmProducer . # Production company or producer\",\n    \"  FILTER(?film IN ?films).\" ,\n    \"}\"\n  ]\n}\n"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P106 wd:Q328265 .\",\n\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"VALUES ?film { wd:Q567519 wd:Q686125 wd:Q327427 wd:Q2789885 }\",\n\t\t\"?screenwriter wdt:P106 wd:Q3282637 .\",\n\t\t\"?editor wdt:P106 wd:Q3282637 .\",\n\t\t\"FILTER NOT EXISTS { ?film wdt:P1040 ?otherEditor . }\",\n\t\t\"FILTER NOT EXISTS { ?film wdt:P58 ?otherScreenwriter . }\",\n\t\t\"?resource ?p ?v .\",\n\t\t\"}\",\n\t\t\"LIMIT 100\"\n\t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmProducer a kg:filmProducer ;\",\n    \"   kg:occupation/kg:7034 ?film .\",\n    \"OPTIONAL { ?filmProducer kg:2507 ?screenwriter . }\",\n    \"OPTIONAL { ?filmProducer kg:8123 ?editor . }\",\n    \"FILTER (BOUND(?screenwriter) || BOUND(?editor))\",\n    \"?filmProducer kg:occupation/kg:7034 \\\"edit and write\\\" ;\",\n    \"   kg:6772 ?katzelmacher ;\",\n    \"   kg:9419 ?niklashausenJourney ;\",\n    \"   kg:2998 ?whity ;\",\n    \"   kg:7250 ?liliMarleen .\",\n    \"}\",\n    \"VALUES ?filmProducer { kg:0244 }\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?episode wdt:P50|wdt:P51|wdt:P52 ?director .\",\n    \"?episode wdt:P730 ?writer .\",\n    \"FILTER(?director IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) .\",\n    \"FILTER(?writer IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) .\",\n    \"?resource wdt:P31 ?episode .\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 ?director .\",\n\t\t\"?resource wdt:P58 ?screenwriter .\",\n\t\t\"VALUES (?director ?screenwriter) { (wd:Q15042700 wd:Q5542223) (wd:Q4500 wd:Q7407299) (wd:Q7174311 wd:Q7174311) (wd:Q7407299 wd:Q15042700) }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:0768 | kg:1058 | kg:1644 | kg:0044 | kg:0085) \",\n    \"    [ kg:4382 ?resource ; kg:7904 ?resource ]\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># A movie or TV show\",\n    \"    wdt:P57 P2869 ?director .\", \"># Directed by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"    wdt:P73 P2869 ?writer .\", \"># Written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"    wdt:P105 P2869 ?editor .  # Edited by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"}\",\n    \"VALUES ?director { wd:Q143712 } ;\", \"># Ole John\"\n    , \"VALUES ?writer { wd:Q143712 } ;\" ,\", # Ole John (assuming the same person for director and writer, adjust as necessary)\"\n    , \"VALUES ?editor { wd:Q143712 wd:Q5689011 wd:Q143713 }.\" ,\", # Ole John, Jens Jørgen Thorsen, Jørgen Leth\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n                 \t \t"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n\t\t\"   wdt:P58 wd:Q1687239 ;\",\n\t\t\"   wdt:P1040 wd:Q562108 .\"\n\t\t]}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?film kg:3394 ?director .\",\n    \"  FILTER(?director IN (kg:0969, kg:4347, kg:9492)) .\",\n    \"\",\n    \"  ?film kg:6803 ?screenwriter .\",\n    \"  FILTER(?screenwriter IN (kg:0969, kg:4347, kg:9492)) .\",\n    \"\",\n    \"  ?film kg:0323 ?editor .\",\n    \"  FILTER(?editor IN (kg:0969, kg:4347, kg:9492)) .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?episode ?executiveProducer ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?episode .\", \"@en\",\n      \"?film wdt:P161 ?executiveProducer .\",\n      \"?film wdt:P50 ?writer .\",\n      \"VALUES ?episode { wd:Q287112 wd:Q287113 wd:Q287114 }\", \"@en\",\n      \"FILTER NOT EXISTS { ?film wdt:P703 \\\"Star Whores\\\"@en }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?person wdt:P106 wd:Q704288 ;\", \"># film editor occupation\",\n\t\t\"(wdt:P58|wdt:P1431) wd:Q181803 ;\", \"># executive producer or screenwriter of Return of the Jedi\",\n\t\t\"(wdt:P58|wdt:P1431) wd:Q3968346 ;\" ,\", (wdt:P58|wdt:P1431) wd:Q17738 ;\", \"># screenwriter or executive producer of Star Whores, Episode IV and Episode I\",\n\t\t\"(wdt:P58|wdt:P1431) wd:Q165713 .\" ,\", (wdt:P58|wdt:P1431) wd:Q17738 . # screenwriter or executive producer of Episode VI and Episode IV\"\n\t\t\t,\n\t\t\"?resource wdt:P31/wdt:P279* wd:Q704288.\" ,\"\\n# Ensure the resource is a film editor\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:1706 kg:8244 ;\",\n    \"(kg:2001|kg:9079) ?episode .\",\n    \"VALUES ?episode { kg:0534 kg:1706 kg:4043 kg:8405 kg:0382 }\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1059286 wdt:P304 ?director .\",\n    \"  wd:Q1059286 wdt:P735 ?editor .\",\n    \"  wd:Q1059286 wdt:P571 ?publicationDate .\",\n    \"  FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Ole John\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Jens Jørgen Thorsen\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Jørgen Leth\\\"))) &&\",\n    \"  FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Ole John\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Jens Jørgen Thorsen\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Jørgen Leth\\\")))\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P214 wd:Q20729551 ;\", \"># Film identifier and title (Stop for Bud)\",\n    \"wdt:P58 ?screenwriter ;\", \"># Screenwriter(s)\",\n    \"wdt:P1040 ?editor ;\", \"># Editor(s)\",\n    \"wdt:P57 ?director . \" ,\"\\n# Director(s)\",\n    \"VALUES ?screenwriter { wd:Q35979475 } ,\",\n    \"{ wd:Q1687239 } ,\",\n    \"{ wd:Q562108 } ;\", \"># Screenwriters (Ole John, Jens Jørgen Thorsen, and Jørgen Leth)\",\n    \"VALUES ?editor { wd:Q35979475 } ,\",\n    \"{ wd:Q1687239 } ,\",\n    \"{ wd:Q562108 } ;\", \"># Editors (Ole John, Jens Jørgen Thorsen, and Jørgen Leth)\",\n    \"VALUES ?director { wd:Q35979475 } ,\",\n    \"{ wd:Q1687239 } ,\",\n    \"{ wd:Q562108 } . \" ,\"\\n# Directors (Ole John, Jens Jørgen Thorsen, and Jørgen Leth)\",\n    \"?film a ?resource .\" ,\"\\n# Return the film as a resource\"\n    ,\n    \"} \"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:3258 kg:4140 ;\", \"# film editor property\",\n    \"   kg:3258 kg:5675 .        # screenwriter property\",\n    \"OPTIONAL { ?film kg:5239 kg:1224 . }  # director property for Ole John\",\n    \"OPTIONAL { ?film kg:5239 kg:8676 . }  # director property for Jens Jørgen Thorsen\",\n    \"OPTIONAL { ?film kg:5239 kg:9937 . }  # director property for Jørgen Leth\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P57 ?writer;\",\n      \"wdt:P32 ?cinematographer.\",\n      \"{ SELECT ?title WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". } ?work rdfs:label ?title FILTER(?title = 'Anyone Lived in a Pretty How Town , 1:42.08' || ?title = 'Look at Life') } }\",\n      \"UNION { ?work wdt:P644 ?episode; ?episode p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer. }\",\n      \"UNION { ?work wdt:P121* wd:Q109838. }\"\n    ,\n      \"?work wdt:P644 ?episode; ?episode p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n      \"FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\"\n    ,\n      \"?episode wdt:P57 ?writerStatement; ?writerStatement pq:P580 \\\"1999-05-19\\\"^^xsd:date.\"\n    ,\n      \"?episode wdt:P32 ?cinematographerStatement; ?cinematographerStatement pq:P580 \\\"1999-05-19\\\"^^xsd:date.\"\n    ,\n      \"VALUES ?work { wd:Q12345678 } # Replace with actual Wikidata item IDs\"\n    ,\n      \"?episode wdt:P644 ?starWarsEpisode; ?starWarsEpisode p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\",\n      \"FILTER(?starWarsEpisode = wd:Q109838)\"\n    ,\n      \"?episode wdt:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?starWarsEpisode { wd:Q109838 } # Replace with actual Wikidata item ID\"\n    ,\n      \"FILTER NOT EXISTS { ?work wdt:P644 ?landBeforeTime. FILTER(?landBeforeTime = wd:Q2345678) }\",\n      \"?episode wdt:P644 ?landBeforeTime; ?landBeforeTime p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121*"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?film wdt:P58 ?writer ;\",\n           \"wdt:P1431 ?executiveProducer ;\",\n           \"wdt:P344 ?cinematographer.\",\n      \"OPTIONAL { ?film wdt:P269 wd:Q613974. }\",\n      \"OPTIONAL { ?film wdt:P269 wd:Q1869678. }\",\n      \"OPTIONAL { ?film wdt:P269 wd:Q208910. }\",\n      \"FILTER (BOUND(?film))\",\n      \"?executiveProducer wdt:P269 wd:Q165713.\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n    \"?film1 kg:9276 ?writer ;\",\n    \"   kg:1454 \\\"Anyone Lived in a Pretty How Town\\\" ;\",\n    \"   kg:2752 ?duration ;\",\n    \"   kg:3763 ?episode .\",\n    \"?film2 kg:9276 ?writer ;\",\n    \"   kg:9100 ?producer .\",\n    \"?film3 kg:9276 ?writer ;\",\n    \"   kg:9100 ?producer ;\",\n    \"   kg:7291 \\\"The Land Before Time\\\" .\",\n    \"?episode kg:6560 ?duration ;\",\n    \"   kg:6310 ?cinematographer .\",\n    \"}\",\n    \"FILTER(?duration = \\\"1:42.08\\\"^^xsd:string)\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q114248760 ;\", \"># Assuming Uzak and Clouds of May are films, use appropriate property for film type if different.\",\n    \"wdt:P577 \\\"Uzak\\\"@en ;\", \"># Start with the title 'Uzak' as a placeholder. Use specific titles or properties to match exact works.\",\n    \"wdt:P1477 ?producer .\", \"># P1477 is used for producers, use appropriate property if different.\",\n    \"?producer wdt:P31 wd:Q925286 ;\", \"># Q925286 is the Wikidata item for film producer. Use specific properties to match roles like editor, executive producer, director, and writer.\",\n    \"wdt:P105* wd:Q925286 ;\", \"># P105 relates a person to their occupation. This checks if the person has any of these occupations.\",\n    \"FILTER(?producer != wd:Q925286) # Exclude the producer role itself from being returned as it's not specific enough.\" ,\n    \"}\"\n  ]\n}\n"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P58 ?screenwriter .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P1431 ?executiveProducer .\",\n      \"?film wdt:P106 wd:Q3282637 .\",\n      \"wd:Q1361018 wdt:P57 ?director .\",\n      \"wd:Q1361018 wdt:P58 ?screenwriter .\",\n      \"wd:Q1361018 wdt:P1040 ?editor .\",\n      \"wd:Q1361018 wdt:P1431 ?executiveProducer .\",\n      \"?person wdt:P106 wd:Q3282637 .\",\n      \"?person wdt:P57 wd:Q2086445 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmProducer kg:occupation/kg:0443* ?role .\",\n    \"?filmProducer kg:2699 kg:2699 .\", \"# Uzak\",\n    \"?filmProducer kg:5247 kg:5247 .\", \"# executive producer\",\n    \"?filmProducer kg:1836 kg:1836 .\", \"# screenwriter (writer)\",\n    \"?filmProducer kg:1486 kg:1486 .\", \"# film editor\",\n    \"?filmProducer kg:0638 kg:0638 .\", \"# director\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102695 wdt:P361 ?director .\",\n    \"  wd:Q102695 wdt:P50 ?writer .\",\n    \"  wd:Q102695 wdt:P2814 ?executiveProducer .\",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"Jim Abrahams\\\")) \",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"Jerry Zucker\\\")) \",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"David Zucker\\\")) \",\n    \"  BIND(wd:Q102695 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?writer ?execProducer ?director1 ?director2 ?director3\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 'Airplane!'.\", \"@en\",\n      \"?movie wdt:P50 ?writer.\",\n      \"?movie wdt:P880 ?execProducer.\",\n      \"?movie wdt:P673 ?director1;\",\n      \"   wdt:P673 ?director2;\",\n      \"   wdt:P673 ?director3.\"\n    ,\n    \"FILTER(?director1 = 'Jim Abrahams'@en && ?director2 = 'David Zucker'@en && ?director3 = 'Jerry Zucker'@en).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?director ?executiveProducer\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 ?writer .\", \"# Twin Peaks: Fire Walk with Me writer\",\n      \"?film1 wdt:P6829 ?director .\", \"# Twin Peaks: Fire Walk with Me director\",\n      \"?film1 wdt:P161 ?executiveProducer .\", \"# Twin Peaks: Fire Walk with Me executive producer\",\n      \"FILTER(?film1 IN (wd:Q34570, wd:Q182912)).\", \"# QIDs for the films\",\n      \"?film2 wdt:P3457 ?writer .\", \"# My Son, My Son, What Have Ye Done? writer\",\n      \"?film2 wdt:P6829 ?director .\", \"# My Son, My Son, What Have Ye Done? director\",\n      \"?film2 wdt:P161 ?executiveProducer .\", \"# My Son, My Son, What Have Ye Done? executive producer\",\n      \"FILTER(?film2 = wd:Q345709).\", \"# QID for the film\"\n    ,\n      \"?film3 wdt:P3457 ?writer .\", \"# Surveillance writer\",\n      \"?film3 wdt:P6829 ?director .\", \"# Surveillance director\",\n      \"?film3 wdt:P161 ?executiveProducer .\", \"# Surveillance executive producer\",\n      \"FILTER(?film3 = wd:Q1064579).\" ,\"\\n    # QID for the film\"\n    ,\n      \"VALUES ?writer { wd:Q28411 }.\" ,\"\\n    # Specific writer, if known\"\n    , \"VALUES ?director { wd:Q28411 }.\" ,\"\\n    # Specific director, if known\"\n    , \"VALUES ?executiveProducer { wd:Q28411 }\" ,\"\\n    # Specific executive producer, if known\"\n    ,\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424.\" ,\"\\n    # Ensure it's a film\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424.\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424.\"\n    ,\n      \"FILTER NOT EXISTS { ?film1 wdt:P577 ?date . }.\" ,\"\\n    # Exclude films with no date\",\n      \"FILTER NOT EXISTS { ?film2 wdt:P577 ?date . }.\",\n      \"FILTER NOT EXISTS { ?film3 wdt:P577 ?date . }.\"\n    ,\n      \"?film1 wdt:P407 wd:Q698.\" ,\"\\n    # Ensure it's related to Twin Peaks\",\n      \"?film2 wdt:P407 wd:Q698.\",\n      \"?film3 wdt:P407 wd:Q698.\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n    ,\n      \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?film wdt:P1431 ?execProducer .\",\n      \"(wd:Q1140578 | wd:Q2085/wd:Q143) wdtt:P93a ?film ;\",\n      \"(wd:Q1511905 | wd:Q2085/wd:Q143) wdtt:P93a ?film .\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?writer kg:isScreenwriter ?movie .\",\n    \"?director kg:isDirector ?movie .\",\n    \"?execProducer kg:isExecutiveProducer ?movie .\",\n    \"(?movie1 kg:title \\\"Twin Peaks: Fire Walk with Me\\\" ;\",\n    \"  kg:isPartOf kg:7512) .\",\n    \"(?movie2 kg:title \\\"My Son, My Son, What Have Ye Done?\\\" ;\",\n    \"  kg:isPartOf kg:7512) .\",\n    \"(?movie3 kg:title \\\"Surveillance\\\" ;\",\n    \"  kg:isPartOf kg:7512) .\",\n    \"?execProducer kg:isExecutiveProducer ?movie2 .\",\n    \"?execProducer kg:isExecutiveProducer ?movie3 .\",\n    \"?resource ?predicate ?movie1 .\",\n    \"?resource ?predicate ?movie2 .\",\n    \"?resource ?predicate ?movie3 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69/wdt:P279* wd:Q34512;\",\n      \"?film wdt:P69/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69 ?director.\",\n      \"FILTER(?director IN (wd:Q1680196, wd:Q34512, wd:Q1680196, wd:Q1680196, wd:Q34512))\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P57 wd:Q116760 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P58 wd:Q1033656 ;\",\n\t\t\"wdt:P58 wd:Q1365463 .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q982339 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P57/wdt:P279* wd:Q116760 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P58/wdt:P279* wd:Q1033656 ;\",\n\t\t\"wdt:P58/wdt:P279* wd:Q1365463 .\",\n\t\t\"?film wdt:P31 ?instanceOfFilm .\" ,\"?instanceOfFilm wdt:P279* wd:Q982339 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P57 ?director .\" ,\"?director wdt:P279* wd:Q116760 ;\", \"value error, should be a single director\"\n\t\t, \"wdt:P58 ?screenwriter .\",\n\t\t\"?screenwriter wdt:P279* wd:Q1033656 ;\",\n\t\t\"?screenwriter wdt:P279* wd:Q1365463 .\",\n\t\t\"FILTER(?director != ?screenwriter)\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film kg:3501 kg:9984 ;\", \"# Ingmar Bergman is a director and screenwriter\",\n\t\t\t\"?film kg:3501 kg:3045 .\", \"# Gustaf Molander is a director and screenwriter\",\n\t\t\t\"?film kg:3501 kg:1640 .\", \"# Hans Alfredson is a director and screenwriter\",\n\t\t\t\"?film kg:3501 kg:9491 .\", \"# Jörn Donner is a director and screenwriter\",\n\t\t\t\"?film kg:3501 kg:6767 .\" ,\"\\t# Vilgot Sjöman is a director and screenwriter\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P355 ?composer .\",\n      \"?resource wdt:P161 ?directorSinCity .\",\n      \"?resource wdt:P2870 ?cinematographerSinCity .\",\n      \"?resource wdt:P161 ?directorSinCityA .\",\n      \"?resource wdt:P2870 ?cinematographerSinCityA .\",\n      \"?resource wdt:P161 ?directorSharkboy .\",\n      \"?composer wdsg:label \\\"composer of Spy Kids 3-D: Game Over\\\"@en .\",\n      \"?directorSinCity wdsg:label \\\"director of Sin City\\\"@en .\",\n      \"?cinematographerSinCity wdsg:label \\\"cinematographer of Sin City\\\"@en .\",\n      \"?directorSinCityA wdsg:label \\\"director of Sin City: A Dame to Kill For\\\"@en .\",\n      \"?cinematographerSinCityA wdsg:label \\\"cinematographer of Sin City: A Dame to Kill For\\\"@en .\",\n      \"?directorSharkboy wdsg:label \\\"director of The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P86 ?composer .\",\n\t\t\"?resource wdt:P57 ?director .\",\n\t\t\"?resource wdt:P161* wd:Q192115 .\",\n\t\t\"?resource wdt:P161* wd:Q550156 .\",\n\t\t\"?resource wdt:P161* wd:Q1653396 .\",\n\t\t\"OPTIONAL { ?resource wdt:P344 ?cinematographer }\",\n\t\t\"FILTER NOT EXISTS { ?resource wdt:P344 ?_cinematographer }\",\n\t\t\"?resource wdt:P279* wd:Q180505 .\" ,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:8464 kg:0507 ;\", \"# Director of Spy Kids 3-D: Game Over\",\n\t\t\t\"kg:resource kg:0995 kg:resource ;\", \"# Composer of the same movie\",\n\t\t\t\"kg:resource kg:7630 ?resource .\", \"# Cast member in Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D\",\n\t\t\t\"?resource kg:5795 kg:resource ;\", \"# Star of Sin City\",\n\t\t\t\"?resource kg:0641 kg:resource .\", \"# Director of Sin City: A Dame to Kill For\",\n\t\t\t\"?resource kg:3439 kg:0483.\" ,\"\\t# Director of The Adventures of Sharkboy and Lavagirl in 3-D\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?editor ?star\",\n    \"WHERE {\",\n      \"?work1 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?composer;\",\n              \"wdt:P648 ?title1.\",\n      \"?work2 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?editor;\",\n              \"wdt:P648 ?title2.\",\n      \"?work3 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?star;\",\n              \"wdt:P648 ?title3.\",\n      \"VALUES ?composer { wd:Q15411 }\", \"# Replace with actual QID if known\"\n     ,\"VALUES ?editor { wd:Q15411 }\", \"# Replace with actual QID if known\"\n      ,\"VALUES ?star { wd:Q15411 }\" ,\"# Replace with actual QID if known\"\n      ,\"?title1 ?p ?title2; ?p ?title3.\"\n    ,\n    \"FILTER(?composer != ?editor && ?composer != ?star && ?editor != ?star)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P86 wd:Q470895 ;\", \"# Composer of Pay Day\",\n    \"         wdt:P86 wd:Q470895 ;\", \"# Composer of A Woman of Paris\",\n    \"         wdt:P1040 ?editor .\", \"# Is an editor of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\",\n    \"         (wdt:P161* wd:Q238211 ;\", \"# Star of City Lights\",\n    \"          wdt:P161* wd:Q45602 ;\", \"# Star of Modern Times\",\n    \"          wdt:P161* wd:Q3986814) .  # Star of The Essanay-Chaplin Revue of 1916\"\n   \t,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7601 ?composer .\",\n    \"?resource kg:8348 ?payDay .\",\n    \"?resource kg:6976 ?editor .\",\n    \"?resource kg:7559 ?cityLights .\",\n    \"?resource kg:7074 ?modernTimes .\",\n    \"?resource kg:1720 ?essanayChaplinRevue .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?person .\", \"# Jim Abrahams, Jerry Zucker, and David Zucker\",\n      \"?film wdt:P703 ?person .\", \"# (Assuming P703 is used for writing)\",\n      \"?film wdt:P6881 ?person .\", \"# (Assuming P6881 is used for directing)\",\n      \"VALUES ?person { wd:Q249512 wd:Q1566122 wd:Q70355 }\" ,\"\\n\" ,\"\\t# Wikidata IDs for Jim Abrahams, Jerry Zucker, and David Zucker\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?director ?writer ?editor1 ?editor2 ?editor3 ?editor4\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"      wdt:P577 ?releaseDate. # Optional: filter by release date, if needed\",\n      \"wdt:P6300 ?director. # Director of the film\",\n      \"?film wdt:P50 ?writer. # Writer of the film\",\n      \"?film wdt:P800 ?editor1; # Editors of the film\",\n      \"     p:P800/psv:P800 ?editor2; # Editors of the film (continued)\",\n      \"     p:P800/psv:P800 ?editor3; # Editors of the film (continued)\",\n      \"     p:P800/psv:P800 ?editor4. # Editors of the film (final editor)\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q4023328 ;\", \"# Director Yūdai Yamaguchi\",\n\t\t\"   wdt:P58 wd:Q5836844 ;\", \"# Screenwriter Ernesto Díaz Espinoza\",\n\t\t\"   wdt:P1040 wd:Q4022902 .\", \"# Editor Yoshihiro Nishimura (and others)\",\n\t\t\"?resource wdt:P1040 wd:Q5658534 .\" ,\"\\n# Editor Adrián García Bogliano\"\n\t\t\t,\n\t\t\"}\",\n\t\t\"LIMIT 100\"\n\t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:5280 kg:2071 ;\",\n\t\t\t\t\t\"kg:5040 kg:0938 ;\",\n\t\t\t\t\t\"kg:2352 kg:0869, kg:2071, kg:4134.\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?editor\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"?film wdt:P577 \\\"Pietà\\\"|\\\"Dream\\\"|\\\"Moebius\\\"@en. # The title of the film (in English)\",\n      \"?film wdt:P69 ?editor. # The editor of the film\",\n      \"OPTIONAL { ?film wdt:P6480 ?executiveProducer. } # Optional: executive producer, if any\",\n      \"FILTER NOT EXISTS { ?film wdt:P71 ?writer. } # Filter out films where a writer is explicitly stated\"\n    ,\n      \"?editor wdt:P31 wd:Q5. # The editor should be a person\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P1040 wd:Q7042855 ;\", \"# Moebius as film editor\",\n    \"         wdt:P1431 wd:Q13471372 .  # Pietà, Dream, and Moebius as executive producer\",\n    \"  ?film wdt:P106 \\\"film editor\\\" .   # Ensuring the resource is a film editor\",\n    \"}\",\n    \"UNION {\",\n    \"  ?film wdt:P58 wd:Q483197 ;\", \"# Dream as screenwriter\",\n    \"         wdt:P1040 wd:Q7042855 .   # Moebius as film editor\",\n    \"}\",\n    \"UNION {\",\n    \"  ?film wdt:P58 wd:Q483197 ;\", \"# Dream as screenwriter\",\n    \"         wdt:P1431 wd:Q13471372 .   # Pietà, Dream, and Moebius as executive producer\",\n    \"}\",\n    \"UNION {\",\n    \"  ?film wdt:P58 wd:Q483197 ;\", \"# Dream as screenwriter\",\n    \"         wdt:P106 \\\"film editor\\\" .   # Ensuring the resource is a film editor\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0214 ?occupation .\",\n    \"OPTIONAL { ?film kg:7835 ?screenwriter }\",\n    \"OPTIONAL { ?film kg:8387 ?executiveProducer }\",\n    \"OPTIONAL { ?film kg:3329 ?filmEditor }\",\n    \"FILTER ( ?occupation IN (kg:1068, kg:3387) && ?screenwriter = kg:7835 && ?executiveProducer = kg:8387 && ?filmEditor = kg:3329 )\",\n    \"?film kg:2502 ?title .\",\n    \"VALUES ?title { kg:5744 kg:2502 kg:3387 }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?executiveProducer ?edit ?write\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"      wdt:P577 ?releaseDate. # Optional: to filter by release date, if needed\",\n      \"?executiveProducer wdt:P106/wdt:P279* wd:Q83799; # Executive producer\",\n      \"?film wdt:P648 ?executiveProducer. # The executive producer is associated with the film\",\n      \"OPTIONAL { ?film wdt:P50 ?edit. } # Editor (optional)\",\n      \"OPTIONAL { ?film wdt:P2137 ?write. } # Writer (optional)\",\n      \"VALUES ?film { wd:Q123456 wd:Q678901 wd:Q234567 } # Replace with actual Wikidata IDs for the films\",\n    \"}\",\n    \"ORDER BY ASC(?film)\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P106 wd:Q5437360 ;\",\n\t\t\"   wdt:P106 wd:Q3282637 ;\",\n\t\t\"   wdt:P106 wd:Q6084069 .\",\n\t\t\"?film wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"FILTER(?executiveProducer = wd:Q5437360 || ?editor = wd:Q5437360 || ?writer = wd:Q5437360)\",\n\t\t\"VALUES ?resource { wd:Q5437360 wd:Q3282637 wd:Q6084069 }\"\n\t\t]}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0676 ?occupation .\",\n    \"{?film kg:3912 \\\"executive producer\\\" .}\",\n    \"{?film kg:5795 \\\"film editor\\\" .}\",\n    \"{?film kg:4183 \\\"screenwriter\\\" .}\",\n    \"FILTER(?film IN (kg:6751, kg:9994, kg:3740))\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writerEditor wdt:P31/wdt:P279* wd:Q80465;\",\n                   \"wdt:P57 ?writerName;\",\n                   \"wdt:P143 ?filmOrWork.\",\n      \"?marriage wdt:P570 ?date;\",\n                  \"wdt:P26 ?writerEditor.\",\n      \"?influence wdt:P527 ?writerEditor;\",\n                    \"wdt:P136 ?fieldOfInfluence.\",\n      \"FILTER(?filmOrWork IN (wd:Q48966, wd:Q1027699, wd:Q1027698))\",\n      \"?resource ?property ?value.\"\n    ,\n    \"}\"\n  ]\n}\n             \t \t \t \t"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P737 wd:Q312258 .\",\n\t\t\"?person wdt:P26 ?spouse .\",\n\t\t\"wd:Q312258 wdt:P26 ?spouse .\",\n\t\t\"?writer wdt:P737 ?influencer .\",\n\t\t\"?editor wdt:P737 ?influencer .\",\n\t\t\"?film wdt:P737 ?influencer .\",\n\t\t\"VALUES ?film { wd:Q2493884 wd:Q63993096 wd:Q2298257 }\",\n\t\t\"VALUES ?writer { wd:Q2493884 wd:Q63993096 wd:Q2298257 }\",\n\t\t\"VALUES ?editor { wd:Q2493884 wd:Q63993096 wd:Q2298257 }\",\n\t\t\"?influencer wdt:P26 ?person .\",\n\t\t\"?person wdt:P737 ?influencer .\",\n\t\t\"VALUES ?person { wd:Q312258 }\",\n\t\t\"?resource ?p ?o .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?person kg:9301 ?spouse .\",\n\t\t\t\"?person a ?role ;\",\n\t\t\t\t\"kg:7127 ?editor ;\",\n\t\t\t\t\"kg:9940 ?writer ;\",\n\t\t\t\t\"kg:1497 ?film ;\",\n\t\t\t\t\"kg:5738 ?documentary ;\",\n\t\t\t\t\"kg:9335 ?vaga ;\",\n\t\t\t\t\"?spouse kg:2935 ?jacquesDemy .\",\n\t\t\t\"?role rdfs:label ?writerLabel .\",\n\t\t\t\"?editor rdfs:label ?editorLabel .\",\n\t\t\t\"?documentary rdfs:label ?docLabel .\",\n\t\t\t\"?vaga rdfs:label ?vagaLabel .\",\n\t\t\t\"?film rdfs:label ?filmLabel .\",\n\t\t\t\"?jacquesDemy rdfs:label ?jacquesDemyLabel .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5 .\", \"># Person or subclass of Person (writer, star, director, composer)\",\n      \"?resource wdt:P50 wd:Q164828 .\", \"># Directed The Floorwalker\",\n      \"OPTIONAL { ?resource wdt:P6235 wd:Q19704 . } # Shoulder Arms (film) - P6235 is used for film work, but may need to be adjusted based on exact property used in Wikidata\",\n      \"OPTIONAL { ?resource wdt:P6235 wd:Q8602 . } # The Great Dictator (film) - similarly adjust as needed\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q166739 ;\", \"value to be replaced\"\n\t\t, \"wdt:P86 ?composer ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P161 ?actor ;\",\n\t\t\"?resource wdt:P161 wd:Q109116 .\",\n\t\t\"?resource wdt:P57 wd:Q114039 .\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is director kg:7212 ;\",\n    \"   kg:is screenwriter ?work1 ;\",\n    \"   kg:is star ?work1 ;\",\n    \"   kg:is composer ?work2 ;\",\n    \"   kg:is director kg:8432 ;\",\n    \"   kg:is cast member kg:1132 .\",\n    \"?work1 kg:title \\\"Shoulder Arms\\\" ;\",\n    \"?work2 kg:title \\\"The Great Dictator\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a placeholder for the movie 'Planet Terror and Sin City'\",\n      \"wdt:P136* ?role .\",\n      \"?role wdt:P279* wd:Q115109959 ;\", \"># Q115109959 is a placeholder for the occupation 'Cinematographer'\",\n      \"FILTER(?role != wd:Q1344698 || ?role != wd:Q2797589 || ?role != wd:Q244409 || ?role != wd:Q115109959) .\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P161* wd:Q1165050 .\",\n\t\t\"UNION {\",\n\t\t\t\"?film wdt:P161* wd:Q192115 .\",\n\t\t\"}\",\n\t\t\"?resource ?p ?film .\",\n\t\t\"FILTER(?p IN (wdt:P57, wdt:P58, wdt:P1040, wdt:P344))\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:3070|kg:9590) kg:6501 ?resource .\", \"# Director\",\n    \"  (kg:3070|kg:9590) kg:9873 ?resource .\", \"# Writer\",\n    \"  (kg:3070|kg:9590) kg:3834 ?resource .\", \"# Editor\",\n    \"  (kg:3070|kg:9590) kg:0459 ?resource .\", \"# Cinematographer\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q11424;\",\n    \"    wdt:P161* [wdt:P577 \\\"Contagion\\\"@en, \\\"Schizopolis\\\"@en, \\\"Ocean's Eleven\\\"@en, \\\"Full Frontal Magic Mike XXL\\\"@en];\",\n    \"    wdt:P700 ?editor;\",\n    \"    wdt:P846 ?producer.\",\n    \"  ?editor wdt:P31/wdt:P279* wd:Q1547316.\",\n    \"  ?producer wdt:P31/wdt:P279* wd:Q1057613.\"\n    ]\n  }\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P344 ?cinematographer .\",\n    \"?resource wdt:P161 ?star .\",\n    \"?resource wdt:P1040 ?editor .\",\n    \"?resource wdt:P1431 ?executiveProducer .\",\n    \"VALUES ?star { wd:Q2082586 wd:Q730888 wd:Q89884 wd:Q1432710 }\", \"># Contagion, Schizopolis, Ocean's Eleven, Full Frontal (Magic Mike XXL)\"\n   ,\"VALUES ?editor { wd:Q10653523 } # Example editor resource, replace with actual editor if known\"\n    ,\"VALUES ?executiveProducer { wd:Q10653523 } # Example executive producer resource, replace with actual executive producer if known\"\n    ,\n    \"FILTER EXISTS {\",\n    \"?resource wdt:P161 wd:Q89884 . # Full Frontal (Magic Mike XXL)\",\n    \"} &&\",\n    \"FILTER EXISTS {\",\n    \"?resource wdt:P1040 ?editor .\",\n    \"} &&\",\n    \"FILTER EXISTS {\",\n    \"?resource wdt:P1431 ?executiveProducer .\",\n    \"}\",\n    \"}\"\n  ]\n}\n                 \t\t\t"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1618 ?cinematographer .\",\n    \"?resource kg:5089 ?starOfFullFrontal .\",\n    \"?resource kg:8732 ?starOfSchizopolis .\",\n    \"?resource kg:9739 ?starOfContagion .\",\n    \"?resource kg:3328 ?starOfMagicMikeXXL .\",\n    \"?resource kg:9428 ?filmEditor .\",\n    \"?resource kg:3667 ?executiveProducer\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248067 ;\", \"# Six Men Getting Sick\",\n      \"  wdt:P3395 ?cinematographer ;\", \"# cinematographer of the film\"\n      ,\"?film wdt:P71 ?editor .\", \"# editor of the film\",\n      \"?resource wdt:P161 ?cinematographer ;\", \"# The Black Ghiandola\",\n      \"  wdt:P3459 ?editor ;\", \"# Twin Peaks (TV series)\",\n      \"  wdt:P2860 ?cinematographer ;\", \"# Lumière and Company\",\n      \"  wdt:P161 ?editor ;\", \"# Dune (film)\",\n      \"  wdt:P3459 ?cinematographer ;\", \"# Inland Empire\",\n      \"  wdt:P2860 ?editor .\", \"# Boat (TV series)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P344 wd:Q3641257 .\", \"# Dune\",\n      \"?film wdt:P344 wd:Q507285 .\", \"# Lumière and Company\",\n      \"?film wdt:P344 wd:Q2085 .\", \"# Twin Peaks\",\n      \"?film wdt:P344 wd:Q114819 .\", \"# Inland Empire\",\n      \"?film wdt:P344 wd:Q3485597 .\", \"# Boat (assuming this is the correct ID for 'Boat')\"\n      ,\n      \"?film wdt:P344 wd:Q3641257 ;\", \"# Dune, again to ensure it's part of the film\",\n      \"   wdt:P1040 ?editor .\",\n      \"?film wdt:P344 wd:Q56756907 .\" ,\"\\n# The Black Ghiandola\"\n    ,\n      \"?resource wdt:P344 ?film .\"\n    ,\"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0514 ?editor .\",\n    \"?film kg:4111 ?cinematographer .\",\n    \"?film kg:6545 ?star .\",\n    \"?film kg:3903 ?star .\",\n    \"?film kg:4169 ?star .\",\n    \"?film kg:8978 ?star .\",\n    \"?film kg:3018 ?star .\",\n    \"?film kg:0127 ?star .\",\n    \"?film kg:1543 ?editor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?writer .\",\n      \"?film wdt:P61 ?editor .\",\n      \"?film wdt:P830 ?director .\",\n      \"?writer wdt:P26 ?person .\",\n      \"?person wdt:P49 ?spouse .\",\n      \"VALUES ?film { wd:Q175112 wd:Q175113 }\", \"@en # Vagabond and The Gleaners and I\",\n      \"?writer wdt:P106/wdt:P279* ?occupation .\",\n      \"?director wdt:P106/wdt:P279* ?occupation .\",\n      \"?editor wdt:P106/wdt:P279* ?occupation .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P57 wd:Q312258 ;\",\n    \"   wdt:P58 ?screenwriter ;\",\n    \"   wdt:P1040 ?editor .\",\n    \"?screenwriter wdt:P26 ?spouse .\",\n    \"?film wdt:P737 ?influence .\",\n    \"VALUES ?film { wd:Q2493884 wd:Q2298257 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:isDirector kg:4445 ;\",\n    \"   kg:isScreenwriter kg:4445 ;\",\n    \"   kg:isFilmEditor kg:4445 ;\",\n    \"   kg:isSpouse ?spouse ;\",\n    \"   kg:isInfluencedBy kg:8516 .\",\n    \"?spouse kg:isSpouse ?person .\",\n    \"?film kg:isDirectedBy kg:8516 ;\",\n    \"   kg:title \\\"The Gleaners and I\\\" .\",\n    \"?film kg:isScreenwrittenBy ?screenwriter .\",\n    \"?film kg:isEditedBy ?editor .\",\n    \"BIND(?person AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114246280 ;\", \"># Assuming The Confession is a film, use its Wikidata ID or P31 property to identify it as a film.\",\n      \"wdt:P739 ?editor ;\",\n      \"wdt:P105 ?execProducer ;\",\n      \"wdt:P143 ?cinematographer .\",\n      \"?film wdt:P57 ?destiny ;\",\n      \"?film wdt:P58 ?waitingRoom ;\",\n      \"?film wdt:P59 ?thirdPage .\",\n      \"?editor wdt:P161 wd:Q20491 ;\", \"># Q20491 is the Wikidata item for 'star and writer'\",\n      \"?execProducer wdt:P161 wd:Q20491 ;\",\n      \"?cinematographer wdt:P161 wd:Q20491 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P1431 ?producer .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?film wd:Q6099428 .\", \"# The Third Page\",\n      \"?film wd:Q6084069 .\", \"# The Waiting Room\",\n      \"?film wd:Q12813010 .\", \"# The Confession\",\n      \"?film wd:Q5265241 .\", \"# Destiny\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?confession kg:hasRole ?role .\",\n    \"?role kg:title \\\"editor\\\" ;\",\n    \"   kg:workOn ?confession .\",\n    \".\",\n    \"?confession kg:hasRole ?executiveProducer .\",\n    \"?executiveProducer kg:title \\\"executive producer\\\" ;\",\n    \"   kg:workOn ?confession .\",\n    \".\",\n    \"?confession kg:hasRole ?cinematographer .\",\n    \"?cinematographer kg:title \\\"cinematographer\\\" ;\",\n    \"   kg:workOn ?confession .\",\n    \".\",\n    \"?confession kg:relatedWork ?destiny .\",\n    \"?destiny a kg:Film .\",\n    \"?destiny kg:hasRole ?starWriterDestiny .\",\n    \"?starWriterDestiny kg:title \\\"star and writer\\\" ;\",\n    \"   kg:workOn ?destiny .\",\n    \".\",\n    \"?confession kg:relatedWork ?waitingRoom .\",\n    \"?waitingRoom a kg:Film .\",\n    \"?waitingRoom kg:hasRole ?starWriterWaitingRoom .\",\n    \"?starWriterWaitingRoom kg:title \\\"star and writer\\\" ;\",\n    \"   kg:workOn ?waitingRoom .\",\n    \".\",\n    \"?confession kg:relatedWork ?thirdPage .\",\n    \"?thirdPage a kg:Film .\",\n    \"?thirdPage kg:hasRole ?starWriterThirdPage .\",\n    \"?starWriterThirdPage kg:title \\\"star and writer\\\" ;\",\n    \"   kg:workOn ?thirdPage .\",\n    \".\",\n    \"VALUES ?confession { kg:4433 }\",\n    \"VALUES ?destiny { kg:4320 }\",\n    \"VALUES ?waitingRoom { kg:0514 }\",\n    \"VALUES ?thirdPage { kg:5345 }\",\n    \"?resource ?predicate ?object .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?edit ?write ?direct \",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"  wdt:P577 ?date. # Optional date, can be removed if not needed\",\n      \"?film wdt:P698 ?edit. # Film editor\",\n      \"?film wdt:P50 ?write. # Writer\",\n      \"?film wdt:P106 ?direct. # Director\",\n      \"VALUES ?film { wd:Q249372 wd:Q114672 wd:Q186022 wd:Q114674 } # Pay Day, Modern Times, The Floorwalker, Work\",\n    \"} \"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P106 wd:Q45602 ;\", \"# Modern Times\",\n    \"(wdt:P58|wdt:P1040) ?screenwriter ;\", \"# Screenwriter or Editor\",\n    \"(wdt:P57) ?director .\", \"# Director\",\n    \"VALUES ?film { wd:Q199039 wd:Q2445896 wd:Q166739 } # Pay Day, Work, The Floorwalker\",\n    \"?screenwriter wdt:P106 wd:Q7042855 .\", \"# Film Editor\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?film wdt:P106 [] . }\" ,\"\\n# Ensure the resource is a film\"\n  ]\n}\n             \t\t  \t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:4025 ?editor .\", \"# Film editor\",\n    \"(kg:2136 | kg:2020 | kg:7327) ?role ?film .\", \"# Check if the person is a film editor, screenwriter or director\",\n    \"VALUES ?editor { kg:4025 }\", \"# Specify the film editor resource\",\n    \"?film kg:8876 ?title1 ;\", \"# Modern Times\",\n    \"kg:1977 ?title2 ;\", \"# Work\",\n    \"kg:1897 ?title3 ;\", \"# The Floorwalker\",\n    \"kg:2136 ?title4 .\", \"# Pay Day\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor\",\n    \"WHERE {\",\n      \"?film1 wdt:P3459 ?writer .\", \"# The Waiting Room writer\",\n      \"?film1 wdt:P8670 ?executiveProducer .\", \"# The Waiting Room executive producer\",\n      \"?film2 wdt:P3459 ?editor .\", \"# The Confession editor\",\n      \"?film2 wdt:P8670 ?executiveProducer .\", \"# The Confession executive producer\"\n    ,\n    \"FILTER(?writer = ?executiveProducer, ?editor = ?executiveProducer)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?writer wdt:P58 wd:Q6084069 ;\",\n\t\t\"   wdt:P1431 wd:Q5437360 ;\",\n\t\t\"   wdt:P1040 wd:Q12813010 .\",\n\t\t\"?executiveProducer wdt:P1431 wd:Q6084069 ;\",\n\t\t\"   wdt:P1431 wd:Q5437360 .\",\n\t\t\"?editor wdt:P1040 wd:Q6084069 ;\",\n\t\t\"   wdt:P1040 wd:Q12813010 .\",\n\t\t\"FILTER(?writer = ?executiveProducer && ?writer = ?editor)\",\n\t\t\"?resource ?p ?o FILTER(?p IN (wdt:P58, wdt:P1431, wdt:P1040))\"\n\t\t]}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?writer1 kg:is kg:7462) [] kg:8079 .\",\n    \"  (?writer1 kg:is kg:7462) [] kg:4979 .\",\n    \"  (?writer1 kg:is kg:7462) [] kg:4979 .\",\n    \"  (?executiveProducer kg:is kg:0563) [] kg:4979 .\",\n    \"  (?executiveProducer kg:is kg:0563) [] kg:8079 .\",\n    \"  (?resource kg:is kg:6844) [] kg:4979 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P50/wdt:P2861 ?director .\", \"sparql\",\n    \"?film wdt:P51/wdt:P2861 ?writer .\", \"sparql\",\n    \"VALUES ?director { wd:Q149732 wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 }\", \"sparql\",\n    \"VALUES ?writer { wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 wd:Q116026 }\", \"sparql\",\n    \"} LIMIT 10\"\n  ]\n}\n"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P31 wd:Q1033656 . \" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"FILTER EXISTS { ?film wdt:P57 wd:Q982339 }\", \"# Jörn Donner as director exists\",\n\t\t\"FILTER EXISTS { ?film wdt:P58 wd:Q1033656 }\" ,\"\\n# Ingmar Bergman as screenwriter exists\"\n\t\t\t,\n\t\t\"?film wdt:P31 wd:Q11424 . \" ,\"\\n# Film instance\",\n\t\t\"?film wdt:P57 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P58 wd:Q1033656 ;\" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"?film wdt:P57 wd:Q116760 ;\" ,\"\\n# Vilgot Sjöman as director\",\n\t\t\"?film wdt:P58 wd:Q1365463 ;\" ,\"\\n# Gustaf Molander as screenwriter\",\n\t\t\"?film wdt:P57 wd:Q11424 . \" ,\"\\n# Hans Alfredson as director\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P58 wd:Q1033656 ;\" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"?film wdt:P57 wd:Q116760 ;\" ,\"\\n# Vilgot Sjöman as director\",\n\t\t\"?film wdt:P58 wd:Q1365463 . \" ,\"\\n# Gustaf Molander as screenwriter\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P57 wd:Q116760 ;\" ,\"\\n# Vilgot Sjöman as director\",\n\t\t\"?film wdt:P58 wd:Q1033656 ;\" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"?film wdt:P58 wd:Q1365463 . \" ,\"\\n# Gustaf Molander as screenwriter\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P57 wd:Q116760 ;\" ,\"\\n# Vilgot Sjöman as director\",\n\t\t\"?film wdt:P58 wd:Q1365463 ;\" ,\"\\n# Gustaf Molander as screenwriter\",\n\t\t\"?film wdt:P58 wd:Q1033656 . \" ,\"\\n# Ingmar Bergman as screenwriter\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P57 wd:Q1365463 ;\" ,\"\\n# Gustaf Molander as director\",\n\t\t\"?film wdt:P58 wd:Q1033656 ;\" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"?film wdt:P57 wd:Q116760 . \" ,\"\\n# Vilgot Sjöman as director\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director\",\n\t\t\"?film wdt:P57 wd:Q1365463 ;\" ,\"\\n# Gustaf Molander as director\",\n\t\t\"?film wdt:P58 wd:Q11424 . \" ,\"\\n# Hans Alfredson as screenwriter\",\n\t\t\"?film wdt:P58 wd:Q1033656 . \" ,\"\\n# Ingmar Bergman as screenwriter\"\n\t\t,\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film kg:9808 kg:0106 ;\",\n\t\t\t\t\t\"kg:9772 kg:3926 ;\",\n\t\t\t\t\t\"kg:9808 kg:2442 ;\",\n\t\t\t\t\t\"kg:9808 kg:6401 ;\",\n\t\t\t\t\t\"kg:9772 kg:0263 .\",\n\t\t\t\"?film kg:9772 ?screenwriter.\",\n\t\t\t\"FILTER(?screenwriter IN (kg:0106, kg:3926, kg:2442, kg:6401, kg:0263))\",\n\t\t\t\"?film a kg:6825.\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person or a subclass of person\",\n    \"  ?resource wdt:P161* \\\"The Waiting Room\\\"@en .\" , \"># The Waiting Room as a film\",\n    \"  ?resource wdt:P161* \\\"Destiny The Confession\\\"@en .\" , \"># Destiny The Confession as a film\",\n    \"  (?resource wdt:P161* wd:Q24382790) ||\" , \"># Executive Producer of a film\",\n    \"  (?resource wdt:P39* wd:Q24382790) .\" ,\"\\t# Holds the position of executive producer\",\n    \"  FILTER EXISTS { ?resource wdt:P161* \\\"The Waiting Room\\\"@en . }\" , \"># Ensure The Waiting Room is associated with the resource\",\n    \"  FILTER EXISTS { ?resource wdt:P161* \\\"Destiny The Confession\\\"@en . }\" , \"># Ensure Destiny The Confession is associated with the resource\",\n    \"  (?resource wdt:P180* wd:Q24379554) ||\" , \"># Cinematographer of a film\",\n    \"  (?resource wdt:P39* wd:Q24379554) .\" ,\"\\t# Holds the position of cinematographer\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P161* wd:Q6084069 .\", \"# The Waiting Room\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P1431 ?producer .\",\n\t\t\"OPTIONAL { ?film wdt:P161* wd:Q5265241 . }\", \"# Destiny The Confession\",\n\t\t\"OPTIONAL { ?film wdt:P161* wd:Q12813010 . }\",\n\t\t\"?resource ?p ?film .\",\n\t\t\"FILTER(?p IN (wdt:P1040, wdt:P58, wdt:P1431, wdt:P344))\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:1850 kg:executiveProducer ?resource . kg:1850 kg:directorOfPhotography ?resource ) \",\n    \"  UNION \",\n    \"  (kg:9231 kg:executiveProducer ?resource . kg:9231 kg:directorOfPhotography ?resource )\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Film work\",\n    \"  ?film wdt:P577 ?date.\" , \"# Date of publication\",\n    \"  ?filmEditor wdt:P106 wd:Q11340.\" , \"# Person is a film editor\",\n    \"  ?filmEditor wdt:P26 ?spouse.\" , \"# Spouse of the film editor\",\n    \"  ?spouse wdt:P109* wd:Q7856.\" , \"# Spouse is an author (writer)\",\n    \"  ?work wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Work is a film\",\n    \"  ?spouse wdt:P330 ?work.\" , \"# Spouse wrote the work\",\n    \"  FILTER(?film = ?work)\" , \"# Ensure the same work for both conditions\",\n    \"  VALUES ?film { wd:Q123456789 wd:Q123456790 wd:Q123456791 wd:Q123456792 wd:Q123456793 }\" , \"# Replace with actual Wikidata IDs for the films\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?editor wdt:P1040 ?film .\",\n    \"?editor wdt:P26 ?spouse .\",\n    \"?film wdt:P58 ?writer .\",\n    \"VALUES ?film { wd:Q570483 wd:Q878673 wd:Q327427 }\",\n    \"VALUES ?writer { wd:Q567519 wd:Q7042855 }\"\n    ,\n    \"?editor wdt:P106 wd:Q543382 .\"\n    ,\n    \"FILTER NOT EXISTS { ?film wdt:P58 ?spouse }\"\n    ,\n    \"VALUES ?resource { ?editor }\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t        \t\t\t\t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:8916 ?spouse .\",\n    \"?spouse kg:1944 ?film1 ;\",\n    \"                     kg:1944 ?film2 ;\",\n    \"                     kg:1944 ?film3 ;\",\n    \"                     kg:1944 ?film4 ;\",\n    \"                     kg:1944 ?film5 .\",\n    \"?editor kg:7713 ?film1 ;\",\n    \"         kg:7713 ?film2 ;\",\n    \"         kg:7713 ?film3 ;\",\n    \"         kg:7713 ?film4 ;\",\n    \"         kg:7713 ?film5 .\",\n    \"?film1 kg:8858 \\\"The City Tramp\\\" ;\",\n    \"       a ?filmType1 .\",\n    \"?film2 kg:8858 \\\"Katzelmacher\\\" ;\",\n    \"       a ?filmType2 .\",\n    \"?film3 kg:8858 \\\"Why Does Herr R. Run Amok?\\\" ;\",\n    \"       a ?filmType3 .\",\n    \"?film4 kg:8858 \\\"Whity\\\" ;\",\n    \"       a ?filmType4 .\",\n    \"?film5 kg:8858 \\\"In a Year of 13 Moons\\\" ;\",\n    \"       a ?filmType5 .\",\n    \"?editor kg:7392 ?resource.\",\n    \"}\",\n    \"\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248097 ;\", \"># Q114248097 is a placeholder for the film resource, replace with actual Wikidata ID if known.\",\n      \"   wdt:P577 ?date .\",\n      \"?director wdt:P31/wdt:P279* wd:Q165212 ;\", \"># Q165212 is the Wikidata ID for Female, replace with actual gender category if needed.\",\n      \"   wdt:P57 ?film ;\",\n      \"   wdt:P40 ?script .\",\n      \"?script wdt:P31 wd:Q114248098 ;\", \"># Q114248098 is a placeholder for the script resource, replace with actual Wikidata ID if known.\",\n      \"   wdt:P57 ?film ;\",\n      \"   wdt:P673 ?director .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?director WHERE {\",\n\t\t\"?film wdt:P57 ?director ;\",\n\t\t\"   wdt:P58 ?director ;\",\n\t\t\"   wdt:P1040 ?director .\",\n\t\t\"?film wdt:P21 wd:Q6581072 .\",\n\t\t\"OPTIONAL { ?film wdt:P31 wd:Q11424 }. # Optional to filter for films only if needed\",\n\t\t\"FILTER(?film IN (wd:Q156497, wd:Q497617))\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:3823 ?editor .\",\n\t\t\t\"?resource kg:5403 ?writer .\",\n\t\t\t\"?resource kg:9010 ?director .\",\n\t\t\t\"?resource kg:9681 \\\"Tag der Freiheit: Unsere Wehrmacht\\\" .\",\n\t\t\t\"?resource kg:1652 \\\"Triumph of the Will\\\" .\",\n\t\t\t\"?resource kg:5606 \\\"Olympia\\\" .\",\n\t\t\t\"?resource kg:3805 ?gender .\",\n\t\t\t\"FILTER(?gender = kg:3805 || ?gender = kg:4328)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31/wdt:P279* wd:Q5 .\" ,\"%s\" ,\n      \"?person wdt:P50 wd:Q164882.\" ,\n      \"?person wdt:P73 wd:Q164882.\" ,\n      \"?person wdt:P161 wd:Q164882.\" ,\n      \"?movie1 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Day of the Dead\\\"@en .\" ,\n      \"?movie2 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Monkey Shines\\\"@en .\" ,\n      \"?movie3 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Dawn of the Dead\\\"@en .\" ,\n      \"?movie4 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Survival of the Dead\\\"@en .\" ,\n      \"?movie1 wdt:P629* wd:Q164882.\" ,\n      \"?movie2 wdt:P629* wd:Q164882.\" ,\n      \"?movie3 wdt:P629* wd:Q164882.\" ,\n      \"?movie4 wdt:P629* wd:Q164882.\" ,\n      \"?person wdt:P50 wd:Q765466.\"\n    ,\n    \"}\"\n  ]\n}\n               \t \t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?person ; wdt:P58 ?person .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?person wdt:P27 wd:Q16 .\",\n      \"?film1 wdgt:P219170 \\\"Day of the Dead\\\" .\",\n      \"?film2 wdgt:P219155 \\\"Dawn of the Dead\\\" .\",\n      \"?film3 wdgt:P198557 \\\"Monkey Shines\\\" .\",\n      \"?film4 wdgt:Q1277329 \\\"Survival of the Dead\\\" .\",\n      \"?editor wdt:P2166 wd:Q627060 .\"\n    ,\n    \"FILTER(?person = ?person)\"\n  ]\n  }\n \t\t  \t\t\t\t\t  \t\t\t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:3067 ?director .\",\n\t\t\t\"?resource kg:3210 ?director .\",\n\t\t\t\"?resource kg:0514 ?editor .\",\n\t\t\t\"?editor kg:8443 kg:5600 .\",\n\t\t\t\"?editor kg:9199 kg:7526 .\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director ?producer\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?director ;\", \"# P345 is used for director of a film\",\n      \"?movie wdt:P161 ?producer .\", \"# P161 is used for producer of a film\",\n      \"?movie wdt:P2860 'Police Story 2'@en ;\", \"# P2860 is the title property, use the specific titles here\",\n      \"   wdt:P2860 'Chinese Zodiac'@en ;\",\n      \"   wdt:P2860 'Police Story'@en ;\",\n      \"   wdt:P2860 'The Fearless Hyena'@en .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?director wdt:P1431 ?execProducer .\",\n    \"?director wdt:P57 wd:Q206182 ;\", \"# Director of Police Story\",\n    \"?director wdt:P57 wd:Q378013 ;\", \"# Director of Police Story 2\",\n    \"?director wdt:P57 wd:Q391143 .\", \"# Director of Chinese Zodiac\",\n    \"OPTIONAL { ?director wdt:P58 wd:Q594033 }\" ,\"\\n# Screenwriter of Police Story if exists\",\n    \"FILTER(?execProducer = wd:Q206182)\" ,\"\\n# Executive producer is 1911\"\n   \t,\n    \"?resource ?p ?o .\"\n   \t,\n    \"} LIMIT 100\"\n  ]\n}\n"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:isDirectorOf kg:7911 ;\",\n    \"   kg:isExecutiveProducerOf kg:7911 .\",\n    \"?director kg:directed kg:0165 ;\",\n    \"   kg:directed kg:0643 ;\",\n    \"   kg:wrote kg:9655 ;\",\n    \"   kg:wrote kg:7514 ;\",\n    \"   kg:wrote kg:9685 ;\",\n    \"   kg:isDirectorOf kg:9685 ;\",\n    \"   kg:isExecutiveProducerOf kg:9685 .\",\n    \"?executiveProducer kg:isExecutiveProducerOf kg:7911 ;\",\n    \"   kg:isExecutiveProducerOf kg:0643 ;\",\n    \"   kg:isExecutiveProducerOf kg:0165 ;\",\n    \"   kg:isExecutiveProducerOf kg:9685 ;\",\n    \"   kg:isExecutiveProducerOf kg:9655 .\",\n    \"?resource ?predicate ?object .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108+ wd:Q5723694;\",\n      \"wdt:P108+ wd:Q1021899;\",\n      \"wdt:P108+ wd:Q15221899;.\",\n      \"FILTER EXISTS { ?person wdt:P108+ wd:Q36748 }\",\n    \"}\"\n  ]\n}\n"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person ?employer1 ?employer2 ?employer3 ?employer4\",\n    \"WHERE {\",\n      \"?person wdt:P108 ?employer1. \",\n      \"?employer1 wdt:P112 wd:Q7095994. \", \"@en\",\n      \"?person wdt:P108 ?employer2. \",\n      \"?employer2 wdt:P112 wd:Q37044. \", \"@en\",\n      \"?person wdt:P108 ?employer3. \",\n      \"?employer3 wdt:P112 wd:Q7432436. \", \"@en\",\n      \"?person wdt:P108 ?employer4. \",\n      \"?employer4 wdt:P112 wd:Q7204713. \", \"@en\",\n      \"FILTER EXISTS { ?person wdt:P108 wd:Q7095994 }\",\n      \"FILTER EXISTS { ?person wdt:P108 wd:Q37044 }\",\n      \"FILTER EXISTS { ?person wdt:P108 wd:Q7432436 }\",\n      \"FILTER EXISTS { ?person wdt:P108 wd:Q7204713 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person a kg:Person.\",\n    \"?person kg:1104* ?employer.\",\n    \"(?employer = kg:9538) UNION (?employer = kg:3783) UNION (?employer = kg:2052) UNION (?employer = kg:0564) UNION (?employer = kg:7797).\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1343746;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1136989;.\",\n      \"OPTIONAL { ?film wdt:P50 ?person. }\",\n      \"FILTER(?person IN (wd:Q105369, wd:Q456795, wd:Q102269))\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q11424 ;\",\n\t\t\"   wdt:P58 ?screenwriter ;\",\n\t\t\"   wdt:P1040 ?editor ;\",\n\t\t\"   wdt:P162 ?producer ;\",\n\t\t\"   wdt:P57 ?director .\",\n\t\t\"?screenwriter wdt:P279* wd:Q35979475 ;\",\n\t\t\"?director wdt:P279* wd:Q1687239 ;\",\n\t\t\"?producer wdt:P279* wd:Q562108\"\n\t\t]}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:9245 ?screenwriter .\",\n    \"?film kg:7564 ?editor .\",\n    \"?film kg:5040 ?producer .\",\n    \"?film kg:1894 ?director .\",\n    \"?screenwriter kg:9282 kg:4421 .\", \"structural:match(?screenwriter, ?director) .\",\n    \"?editor kg:9282 kg:7564 .\", \"structural:match(?editor, ?director) .\",\n    \"?producer kg:9282 kg:5044 .\", \"structural:match(?producer, ?director) .\",\n    \"?director kg:9282 kg:1894 .\", \"structural:match(?director, ?screenwriter) .\",\n    \"FILTER (regex(str(?screenwriter), \\\"Ole John\\\") || regex(str(?director), \\\"Jens Jørgen Thorsen\\\") || regex(str(?producer), \\\"Jørgen Leth\\\"))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?person ;\", \"# Sin City\",\n      \"?movie2 wdt:P345 ?person ;\", \"# The Adventures of Sharkboy and Lavagirl in 3-D\",\n      \"?series wdt:P345 ?person .\", \"# From Dusk till Dawn: The Series\",\n      \"?person wdt:P106* wd:Q87929.\" ,\"\\n\" ,\"\\t# Person (wider class)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P161 ?star .\",\n\t\t\"wd:Q15622760 wdt:wdt:P1431 ?person .\",\n\t\t\"FILTER EXISTS { wd:Q192115 wdt:P57 ?director }\",\n\t\t\"FILTER EXISTS { wd:Q656357 wdt:P57 ?director }\",\n\t\t\"?film wdt:P161 ?star .\"\n\t\t]}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is_director kg:2632 ;\",\n    \"         kg:is_director kg:0710 ;\",\n    \"         kg:is_screenwriter kg:2632 ;\",\n    \"         kg:is_screenwriter kg:0710 ;\",\n    \"         kg:is_film_editor kg:2632 ;\",\n    \"         kg:is_film_editor kg:0710 ;\",\n    \"         kg:is_cast_member kg:2632 ;\",\n    \"         kg:is_cast_member kg:0710 ;\",\n    \"         kg:is_executive_producer kg:6169.\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wd:T106825 ?director ;\",\n      \"?film2 wd:T106825 ?director ;\",\n      \"?film3 wd:T106825 ?director ;\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424 ;\", \"># Q11424 is the item for 'Film'\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424 ;\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424 ;\",\n      \"?director wdt:P31/wdt:P279* wd:Q865094 ;\", \"># Q865094 is the item for 'Film director'\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q105390 ;\", \"># Q105390 is the item for 'Cinematographer'\",\n      \"?film1 wdt:P73 wd:Q168469 , wd:Q168470 , wd:Q226666 ;\", \"># Q168469, Q168470, and Q226666 are the items for 'This Night', 'Rio das Mortes', and 'Lili Marleen' respectively\",\n      \"?film2 wdt:P73 wd:Q226666 ;\", \"># Q226666 is the item for 'Whity'\",\n      \"?director wdt:P105 ?writer ;\",\n      \"?writer wdt:P31/wdt:P279* wd:Q840144 ;\", \"># Q840144 is the item for 'Novelist'\",\n      \"?film1 wdt:P43 ?editor ;\",\n      \"?editor wdt:P31/wdt:P279* wd:Q16572221 .\", \"># Q16572221 is the item for 'Film editor'\"\n    ,\n      \"VALUES ?director { wd:Q840144 }\",\n      \"VALUES ?writer { wd:Q840144 }\",\n      \"VALUES ?editor { wd:Q16572221 }\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"FILTER(?p IN (wdt:P31, wdt:P279))\" ,\n      \"}\"\n  ]\n}\n \t        \t\t\t\t\t  \t\t\t"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P57 ?director .\",\n    \"  ?film1 wdt:P58 ?writer .\",\n    \"  ?film1 wdt:P1040 ?editor .\",\n    \"  ?film2 wdt:P344 ?cinematographer .\",\n    \"  VALUES ?film1 { wd:Q1699716 } # This Night\",\n    \"  VALUES ?film2 { wd:Q823767 wd:Q686125 wd:Q327427 } # Rio das Mortes, Lili Marleen, Whity\",\n    \"  UNION \",\n    \"  ?film1 wdt:P57 ?director ;\",\n    \"           wdt:P58 ?writer ;\",\n    \"           wdt:P1040 ?editor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:5269 kg:isdirector ?person) .\",\n    \"  (kg:5269 kg:isscreenwriter ?person) .\",\n    \"  (kg:5269 kg:isfilmeditor ?person) .\",\n    \"  ?person kg:isdirectorOfPhotography ?_unused .\",\n    \"  kg:3960 kg:isDirectedBy ?person .\",\n    \"  kg:6224 kg:isDirectedBy ?person .\",\n    \"  kg:1489 kg:isDirectedBy ?person .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?cinematographer .\",\n      \"?film2 wdt:P345 ?cinematographer .\",\n      \"?film3 wdt:P345 ?cinematographer .\",\n      \"?film1 wdt:P678 ?director .\",\n      \"?film2 wdt:P678 ?director .\",\n      \"?film3 wdt:P678 ?director .\",\n      \"?film1 wdt:P50 ?writer .\",\n      \"?film2 wdt:P50 ?writer .\",\n      \"?film3 wdt:P50 ?writer .\",\n      \"VALUES ?cinematographer { wd:Q495612 }\",\n      \"VALUES ?director { wd:Q786255 }\",\n      \"VALUES ?writer { wd:Q1686872 }\",\n      \"?film1 wdt:P340 wd:Q1021899 .\",\n      \"?film2 wdt:P340 wd:Q1021899 .\",\n      \"?film3 wdt:P340 wd:Q1021899 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t \t\t\t\t\t\t     \t\t\t"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P344 wd:Q1903317 ;\", \"# Night of the Living Dead's cinematographer\",\n\t\t\"wdt:P1040 ?editor ;\", \"# edited\",\n\t\t\"wdt:P58 ?writer ;\", \"# wrote\",\n\t\t\"wdt:P57 ?director .\", \"# directed wd:Q30, wd:Q2520777, and wd:Q623051\",\n\t\t\"?film wdt:P344 wd:Q623051 ;\",\n\t\t\"?film wdt:P344 wd:Q2520777 .\",\n\t\t\"FILTER(?director = wd:Q1903317 || ?editor = wd:Q1903317 || ?writer = wd:Q1903317)\" ,\"\\t# Ensure the director, editor, or writer is Martin\"\n\t\t\t,\n\t\t\"VALUES ?film { wd:Q623051 wd:Q2520777 wd:Q30 }\", \"# The films to check\"\n\t\t,\n\t\t\"?resource ?p ?o .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:3590 ?dp1 .\",\n    \"?film1 kg:6216 ?editor1 .\",\n    \"?film1 kg:3787 ?screenwriter1 .\",\n    \"?film2 kg:3787 ?screenwriter2 .\",\n    \"?film3 kg:6216 ?editor3 .\",\n    \"?dp1 kg:5276 \\\"Night of the Living Dead\\\" .\",\n    \"?screenwriter1 kg:2900 \\\"Martin\\\" .\",\n    \"?screenwriter2 kg:2900 \\\"Season of the Witch\\\" .\",\n    \"?editor3 kg:2900 \\\"The Crazies\\\" .\",\n    \"FILTER (?film1 != ?film2 && ?film1 != ?film3 && ?film2 != ?film3)\",\n    \"?screenwriter1 kg:9892 kg:0476 .\",\n    \"?screenwriter2 kg:9892 kg:0476 .\",\n    \"?editor3 kg:9892 kg:0476 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if it's a film\",\n      \"  wdt:P577 \\\"1977-05-25T00:00:00Z\\\"^. # Release date of Star Wars: Episode IV – A New Hope\",\n      \"?film wdt:P345 ?person. # Person who wrote and executive produced the film\",\n      \"?film wdt:P161 ?writer. # Writer of the film\",\n      \"?film wdt:P285 ?director. # Director of the film\",\n      \"FILTER(?writer = ?person || ?director = ?person). # Ensure the person is either writer or director\",\n      \"?film wdt:P495 \\\"Look at Life\\\"@en. # Look at Life as a work by the person\",\n      \"?film wdt:P495 \\\"Anyone Lived in a Pretty How Town\\\"@en. # Anyone Lived in a Pretty How Town as a work by the person\",\n      \"?person wdt:P161 ?filmmaker. # Filmmaker associated with the person\",\n      \"FILTER(?filmmaker = ?person). # Ensure the person is also a filmmaker\",\n      \"?person wdt:P31 wd:Q5. # Person is human\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\"?film wdt:P1431 ?executiveProducer .\",\n\t\t\"wd:Q613974 wdt:P31/wdt:P279* wd:Q1415127 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"wd:Q1869678 wdt:P31/wdt:P279* wd:Q1415127 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"wd:Q17738 wdt:P31/wdt:P279* wd:Q1415127 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q17738 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q1869678 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q613974 ;\",\n\t\t\"wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?screenwriter ;\",\n\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7785 ?directorWork .\",\n    \"?resource kg:9966 ?screenwriterWork .\",\n    \"?resource kg:7129 ?episodeIV .\",\n    \"?resource kg:6810 ?prettyHowTown .\",\n    \"?resource kg:7238 ?lookAtLife .\",\n    \"?resource kg:7820 ?filmmakerRole .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424; # Check if the resource is a film or subclass of film\",\n    \"         wdt:P50|wdt:P281|wdt:P69|wdt:P71 ?person .\", \"# Director, producer, writer, editor relationships\",\n    \"  FILTER(STRSTARTS(str(?person), str(wd:Q143914)) || STRSTARTS(str(?person), str(wd:Q208526)) || STRSTARTS(str(?person), str(wd:Q72622))) # Filter for Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P57 wd:Q1687239 ;\", \"# Director Jens Jørgen Thorsen\",\n    \"   wdt:P57 wd:Q562108 .      # Director Jørgen Leth\",\n    \"?film wdt:P1040 ?editor .\", \"# Film editor\",\n    \"?film wdt:P58 ?writer .     # Screenwriter\",\n    \"FILTER(?writer IN(wd:Q35979475, wd:Q1687239, wd:Q562108)) .  # Ole John is one of the screenwriters\",\n    \"?film wdt:P162 ?producer .  # Producer\"\n   \t,\n    \"BIND(wd:Q1687239 AS ?director) ;\",\n    \"BIND(wd:Q562108 AS ?co_director) ;\",\n    \"BIND(?writer AS ?screenwriter) ;\",\n    \"BIND(?producer AS ?producer)\"\n   \t,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2033 ?director .\",\n    \"?film kg:4053 ?producer .\",\n    \"?film kg:1364 ?screenwriter .\",\n    \"?film kg:5191 ?editor .\",\n    \"?director kg:0888 ?person1 .\",\n    \"?producer kg:0888 ?person2 .\",\n    \"?screenwriter kg:0888 ?person3 .\",\n    \"?editor kg:0888 ?person4 .\",\n    \"VALUES (?person1 ?person2 ?person3 ?person4) { (kg:2577 kg:2577 kg:2577 kg:2577) }\", \"label(?film) AS ?title\",\n    \"?film a kg:6893 .\",\n    \"}\",\n    \"VALUES ?resource { ?film }\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q86459.\" , \"# Check if the resource is a costume designer\",\n      \"?resource wdt:P50* wd:Q1122656.\" , \"# Xavier Dolan as author or editor\",\n      \"wd:Q1122656 wdt:P304 ?resource.\" , \"# Reverse relationship to check if Xavier Dolan wrote and edited the resource\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?x dolan/xavierdolan/role wd:Q551861 ;\",\n           \"dolan/xavierdolan/writtenBy wd:Q551861 ;\",\n           \"dolan/xavierdolan/editedBy wd:Q551861 ;\",\n           \"wdt:P106 wd:Q1323191. ?resource wdt:P58 wd:Q551861 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?x1 kg:4692 ?costume_designer .\",\n    \"?x1 kg:is ?x2 .\",\n    \"+?x2 kg:4692 ?x3 .\",\n    \"+?x3 kg:is ?x4 .\",\n    \"+?x4 kg:4692* ?x5 .\",\n    \"?x5 kg:is XavierDolan .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?producer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"?film wdt:P577 ?releaseDate.\",\n      \"?producer wdt:P106/wdt:P279* wd:Q87478.\", \"@en\",\n      \"?producer wdt:P3300 ?film.  # Produced\",\n      \"OPTIONAL { ?producer wdt:P4150 ?film. }  # Executed\",\n      \"OPTIONAL { ?producer wdt:P2964 ?film. }  # Edited\",\n      \"OPTIONAL { ?producer wdt:P7387 ?film. }  # Directed\",\n      \"?film rdfs:label ?title.\",\n      \"FILTER (lang(?title) = 'en').\",\n      \"VALUES ?title { 'Pietà' 'Moebius' 'Dream' }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film ?producer\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P57 ?director .\",\n\t\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\t\"?film wdt:P1431 ?executiveProducer .\",\n\t\t\t\"VALUES ?producer { wd:Q3282637 }\", \"@en Film producer\",\n\t\t\t\"?producer wdt:P106 wd:Q483197 ;\",\n\t\t\t\t\"wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P1431 ?executiveProducer .\",\n\t\t\t\"?film wdt:P648 wd:Q13471372 ;\", \"@en Moebius\",\n\t\t\t\"wdt:P648 wd:Q484679\" ,\"@en Dream\"\n\t\t,\n\t\t\"FILTER(?producer = wd:Q3282637)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:9012 ?pietà .\",\n    \"?film kg:2636 ?dream .\",\n    \"?film kg:kg:9726 ?moebius .\",\n    \"?film kg:6404 ?editor .\",\n    \"?film kg:8978 ?executiveProducer .\",\n    \"?film kg:0023 ?director .\",\n    \"FILTER EXISTS { ?film kg:6094 ?producer }\",\n    \"}\",\n    \"VALUES ?producer { kg:6094 }\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"?film wdt:P700 ?writer .\", \"# The writer of the film (Jens Jørgen Thorsen, Jørgen Leth, and Ole John)\",\n      \"?film wdt:P3301 ?director .\", \"# The director of the film (Jens Jørgen Thorsen, Jørgen Leth, and Ole John)\",\n      \"?film wdt:P700 ?writer; # Ensure the same writer is mentioned\",\n      \"FILTER(?writer = wd:Q24916853 || ?writer = wd:Q1146699 || ?writer = wd:Q1146699) .\", \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n      \"?film wdt:P700 ?director; # Ensure the same director is mentioned\",\n      \"FILTER(?director = wd:Q24916853 || ?director = wd:Q1146699 || ?director = wd:Q1146699) .\", \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P57 wd:Q35979475 ;\",\n    \"   wdt:P57 wd:Q1687239 ;\",\n    \"   wdt:P57 wd:Q562108 ;\",\n    \"   wdt:P1040 ?editor ;\",\n    \"   wdt:P58 ?screenwriter .\",\n    \"?editor wdt:P57 wd:Q35979475 ;\",\n    \"?screenwriter wdt:P58 wd:Q35979475 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0148 ?director ;\",\n    \"   kg:9685 ?screenwriter ;\",\n    \"   kg:7313 ?editor .\",\n    \"?director kg:2122 \\\"Jens Jørgen Thorsen\\\" ;\",\n    \"?screenwriter kg:5731 \\\"Jørgen Leth\\\" ;\",\n    \"?editor kg:3447 \\\"Ole John\\\" .\",\n    \"?film kg:9925 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424 ;\", \"# Check if the resource is a film\",\n    \"         wdt:P50 ?director ;\", \"# Director by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"         wdt:P269 ?editor ;\", \"# Editor by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"         wdt:P57 (wd:Q10483111 / wd:Q10483112 / wd:Q10483113) .  # Writers by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\",\n    \"ORDER BY ?film\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"   wdt:P57 wd:Q1687239 ;\", \"# Jens Jørgen Thorsen as director\",\n    \"   wdt:P1040 wd:Q562108 .  # Jørgen Leth as editor\",\n    \"?film wdt:P57 wd:Q35979475 ;\" ,\"# Ole John as director (assuming he is also a director)\",\n    \"   wdt:P162 wd:Q1687239 , wd:Q562108 .  # Jens Jørgen Thorsen and Jørgen Leth as producers\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n                 \t \t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:4510 ?producer .\",\n    \"?film kg:7692 ?director .\",\n    \"?film kg:7044 ?editor .\",\n    \"?film kg:5693 ?writer .\",\n    \"?producer kg:3494 kg:0501 ;\",\n    \"                 kg:3494 kg:2538 ;\",\n    \"                 kg:3494 kg:3383 .\",\n    \"} \"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property ?value wd:Q6580079\\\"\",\n      \"FILTER(?property = wd:P628 || ?property = wd:Px407 || ?property = wd:Px193 || ?property = wd:Px106).\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t "}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?film wdt:P1431 ?producer .\",\n      \"?film wdt:P648 wd:Q25479948 ;\", \"># Ember's director, editor, writer, and producer of the films\"\n     \t  \t]\n    }\n \t\t\t\t\t\t\t\t\t\t  \t  \t\t\t\t"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:4985 ?executiveProducer .\",\n    \"?director kg:7743 ?filmEditor .\",\n    \"?director kg:3223 ?screenwriter .\",\n    \"?director kg:0105 ?filmEditor .\",\n    \"?director kg:7743/kg:2291 ?waitingRoom .\",\n    \"?director kg:8960 ?fate .\",\n    \"?director kg:3638 ?confession .\",\n    \"}\",\n    \"VALUES ?director { kg:4985 }\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property ?value wd:Q6580079\\\"\",\n      \"FILTER(?property IN (wdt:P69, wdt:P105, wdt:P1412, wdt:P2863))\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 wd:Q25479948 ;\",\n\t\t\"(wdt:P1040|wdt:P58|wdt:P1431) ?role ?resource .\",\n\t\t\"VALUES ?film { wd:Q5437360 wd:Q6084069 wd:Q12813010 }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:4165 ?film .\",\n    \"?film kg:2573/kg:0760/kg:9396 \\\"Fate\\\" ;\",\n    \"   kg:2573/kg:0760/kg:9396 \\\"The Waiting Room\\\" ;\",\n    \"   kg:2573/kg:0760/kg:9396 \\\"The Confession\\\" .\",\n    \"?director kg:6383 ?film .\",\n    \"?director kg:5315 ?film .\",\n    \"?director kg:1593/kg:7137 ?film .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?executiveProducer .\",\n      \"?film wdt:P1627 ?director .\",\n      \"?film wdt:P8130 ?writer .\",\n      \"FILTER (regex(str(?executiveProducer), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?director), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?writer), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property p:P570|p:P800|p:P106 ?statement .\",\n      \"?statement ps:P570|ps:P800|ps:P106 wd:Q13441 ;\",\n      \"   pq:P582 ?editor ;\",\n      \"   pq:P583 ?cinematographer ;\",\n      \"   pq:P93 ?director ;\",\n      \"   pq:P735 ?executiveProducer .\",\n      \"?film wdt:P648|wdt:P106 wd:Q13441 ;\",\n      \"   wdt:P2861 ?title .\",\n      \"FILTER (LANG(?title) = 'en')\",\n      \"VALUES ?title { \\\"Pietà\\\" }\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P1431 ?execProducer .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"VALUES ?film { wd:Q13471372 wd:Q17041657 wd:Q462025 }\",\n\t\t\"VALUES ?editor { wd:Q483197 }\",\n\t\t\"?resource ?p ?object .\",\n\t\t\"FILTER(?p = wdt:P1040 || ?p = wdt:P1431 || ?p = wdt:P344 || ?p = wdt:P57)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?editorOrCinematographer kg:6256 ?film1 .\",\n\t\t\t\"?editorOrCinematographer kg:4656 ?film2 .\",\n\t\t\t\"?editorOrCinematographer kg:8051 ?film3 .\",\n\t\t\t\"?film1 kg:6915 \\\"Moebius\\\" .\",\n\t\t\t\"?film2 kg:8152 \\\"One on One\\\" .\",\n\t\t\t\"?film3 kg:0511 \\\"Amen\\\" .\",\n\t\t\t\"?editorOrCinematographer kg:2400 ?cinematography .\",\n\t\t\t\"?editorOrCinematographer kg:8051 ?finalFilm .\",\n\t\t\t\"?finalFilm kg:3231 \\\"Pietà\\\" .\",\n\t\t\t\"VALUES ?resource { ?editorOrCinematographer }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?resource .\",\n      \"?film wdt:P61 ?resource .\",\n      \"?film wdt:P106 wd:Q134372 .\",\n      \"?film wdt:P182 ?person .\",\n      \"?person wdt:P26 \\\"Rainer Werner Fassbinder\\\"@en .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q44426 wdt:P106/wdt:P1040 ?resource ;\",\n    \"wd:Q44426 wdt:P57 ?director ;\",\n    \"wd:Q44426 wdt:P161 ?actor .\",\n    \"VALUES ?director { wd:Q599423 wd:Q599423 wd:Q599423 }\",\n    \"VALUES ?actor { wd:Q599423 wd:Q599423 wd:Q599423 }\",\n    \"?resource wdt:P279* wd:Q222344 .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?film kg:7472 ?director .\",\n\t\t\t\"?film kg:5382 ?cinematographer .\",\n\t\t\t\"?film kg:6652 ?actor .\",\n\t\t\t\"?actor kg:8766 <http://example.org/person/Rainer_Werner_Fassbinder> .\",\n\t\t\t\"?director kg:8766 <http://example.org/person/Rainer_Werner_Fassbinder> .\",\n\t\t\t\"?cinematographer kg:8766 <http://example.org/person/Rainer_Werner_Fassbinder> .\",\n\t\t\t\"VALUES ?actor { kg:8766 }\",\n\t\t\t\"VALUES ?director { kg:8766 }\",\n\t\t\t\"VALUES ?cinematographer { kg:5382 }\",\n\t\t\t\"?resource ?property ?value .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P141 ?influence ;\",\n           \"wdt:P570 ?birth .\",\n      \"?marriage wdt:P36 ?person1 ;\",\n                \"wdt:P37 ?person2 ;\",\n                \"wdt:P570 ?marriageDate .\",\n      \"wdl:Q1489629 wdt:P580 ?schoolFoundDate .\",\n    \"FILTER(?actor IN (wd:Q12345, wd:Q67890)) # Replace with actual QIDs for Wolfgang Ambros and Jan-Mari Carlotti\",\n    \"FILTER(?person1 IN (wd:Q12345, wd:Q67890)) # Replace with actual QIDs for Carolyn Dennis and Sara Dylan\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q4720983 wdt:P26 ?spouse1 .\",\n    \"  wd:Q5045345 wdt:P26 ?spouse2 .\",\n    \"  wd:Q45404 wdt:P737 ?actor .\",\n    \"  wd:Q457433 wdt:P737 ?actor .\",\n    \"  ?school wdt:P112 ?founder .\",\n    \"  ?school wdt:P106 wd:Q45404 .\",\n    \"}\",\n    \"VALUES ?resource { wd:Q4720983 wd:Q5045345 wd:Q45404 wd:Q457433 }\"\n  ]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:7420 ?influencedBy kg:3414 ;\",\n    \"         kg:9851 kg:5877 .\",\n    \"  kg:1445 ?influencedBy kg:7420 ;\",\n    \"         kg:9851 kg:5877 .\",\n    \"  kg:6841 kg:7895 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108 \\\"World Wide Web Consortium\\\";\",\n              \"wdt:P1425 \\\"Open Data Institute\\\";\",\n              \"wdt:P170 ?company1;\",\n              \"wdt:P171 ?company2.\",\n      \"?company1 rdfs:label \\\"Plessey\\\"@en.\",\n      \"?company2 rdfs:label \\\"CERN\\\"@en.\",\n      \"?person wdt:P594 ?start_date1.\",\n      \"?person wdt:P580 ?start_date2.\",\n      \"FILTER(?start_date1 < ?start_date2)\",\n      \"?person wdt:P39 ?job_title.\"\n    ,\n      \"OPTIONAL { ?person wdt:P106 ?occupation. }\",\n      \"FILTER NOT EXISTS { ?person wdt:P108 \\\"World Wide Web Consortium\\\"; wdt:P1425 \\\"Open Data Institute\\\"; wdt:P170 ?company3; wdt:P171 ?company4. ?company3 rdfs:label \\\"CERN\\\"@en. ?company4 rdfs:label \\\"School of Electronics and Computer Science, University of Southampton\\\"@en. }\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108 wd:Q7204713 ;\", \"# Employed by Plessey\",\n      \"?person wdt:P108 wd:Q42944 ;\", \"# Employed by CERN\",\n      \"?person wdt:P108 wd:Q7432436 , wd:Q37033 ;\" ,\"# Employed by School of Electronics and Computer Science, University of Southampton and World Wide Web Consortium\",\n      \"?person wdt:P112 wd:Q7095994.\" ,\"# Founder of Open Data Institute\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2151 ?employer .\",\n    \"?resource kg:9015 ?schoolecs .\",\n    \"?resource kg:7697 ?cern .\",\n    \"?resource kg:5212 ?wwwc .\",\n    \"?resource kg:2985 ?odi .\",\n    \"?resource kg:7166 ?plessey .\",\n    \"FILTER (?employer = kg:7166 || ?schoolecs = kg:9563 || ?cern = kg:7697 || ?wwwc = kg:5212 || ?odi = kg:2985)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248090 ;\", \"># Q114248090 is a film, specifically Sin City: A Dame to Kill For\"\n      ]\n      }\n     \t\t\t\t\t\t\t\t  \t\t\t\t\t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?writer wdt:P58 wd:Q1165050 ;\",\n\t\t\"   wdt:P1040 wd:Q1165050 ;\",\n\t\t\"   wdt:P86 wd:Q1165050 .\",\n\t\t\"?cinematographer wdt:P344 wd:Q1165050 .\",\n\t\t\"?star wdt:P161 wd:Q1165050 .\",\n\t\t\"?composer wdt:P86 wd:Q1165050 .\",\n\t\t\"wd:Q192115 wdt:P57 ?director ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"wd:Q1653396 wdt:P57 ?director ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"wd:Q128493 wdt:P57 ?director ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"?editor wdt:P1040 wd:Q1165050 ;\",\n\t\t\"   wdt:P57 wd:Q192115 ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"?editor wdt:P57 wd:Q1653396 ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"?editor wdt:P57 wd:Q128493 ;\",\n\t\t\"   wdt:P344 ?cinematographer ;\",\n\t\t\"   wdt:P161 ?star ;\",\n\t\t\"   wdt:P86 ?composer .\",\n\t\t\"?resource ?p ?object FILTER(?resource = wd:Q1165050 || ?resource = wd:Q192115 || ?resource = wd:Q1653396 || ?resource = wd:Q128493).\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?writer kg:3045 ?film1 ;\",\n    \"         kg:0258 ?star ;\",\n    \"         kg:2781 ?composer .\",\n    \"  ?cinematographer kg:0777 ?film1 .\",\n    \"  ?editor kg:8650 ?film1 .\",\n    \"  ?director kg:0231 ?film1 ;\",\n    \"         kg:8650 ?film2 ;\",\n    \"         kg:8650 ?film3 .\",\n    \"  ?film1 kg:9019 \\\"Planet Terror\\\" ;\",\n    \"         kg:7049 \\\"Sin City\\\" .\",\n    \"  ?film2 kg:4927 \\\"Sin City: A Dame to Kill For\\\" .\",\n    \"  ?film3 kg:3142 \\\"Machete\\\" .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?editor exec:director ?dreamAndMoebius .\",\n      \"?editor exec:executiveProducer ?dreamAndMoebius .\",\n      \"?editor wdt:P31 wd:Q5784962 .\", \"# Assuming editor is a person\"\n     ,\"?pietas exec:directed ?pietas .\",\n      \"?pietas exec:edited ?pietas .\",\n      \"?pietas exec:wrote ?pietas .\",\n      \"?pietas exec:executiveProduced ?pietas .\",\n      \"?pietas wdt:P31 wd:Q26759840 .\", \"# Assuming Pietà is a TV series\"\n     ,\"?dreamAndMoebius wdt:P31 wd:Q26759840 .\" ,\"\\n\" ,\"\\n\",\n      \"?resource ?p ?o.\"\n    ,\n    \"}\"\n  ]\n}\n                 \t \t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 ?director .\",\n\t\t\"?resource wdt:P1040 ?editor .\",\n\t\t\"?resource wdt:P58 ?writer .\",\n\t\t\"?resource wdt:P1431 ?execProducer .\",\n\t\t\"VALUES ?editor { wd:Q484679 }\",\n\t\t\"VALUES ?execProducer { wd:Q484679 }\",\n\t\t\"VALUES ?writer { wd:Q484679 }\",\n\t\t\"?resource wdt:P1431 wd:Q483197 .\",\n\t\t\"?resource wdt:P57 wd:Q483197 .\",\n\t\t\"?resource wdt:P1040 wd:Q483197 .\",\n\t\t\"?resource wdt:P58 wd:Q483197 .\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:is_director ?directedFilm .\",\n    \"?editor kg:is_film_editor ?editedFilm .\",\n    \"?writer kg:is_screenwriter ?writtenFilm .\",\n    \"?producer kg:is_executive_producer ?producedFilm .\",\n    \"?directedFilm kg:title \\\"Dream\\\" .\",\n    \"?editedFilm kg:title \\\"Moebius\\\" .\",\n    \"?writtenFilm kg:title \\\"Dream\\\" .\",\n    \"?producedFilm kg:title \\\"Pietà\\\" .\",\n    \"}\",\n    \"VALUES ?editor { kg:2976 }\",\n    \"VALUES ?writer { kg:2976 }\",\n    \"VALUES ?producer { kg:4628 }\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?film1 ?film2 ?film3\",\n    \"WHERE {\",\n      \"?producer wdt:P175 wd:Q864990.\" , \"# Film producer\",\n      \"?producer wdt:P171* [wdt:P161 wd:Q864990; wdt:P31/wdt:P279* wd:Q11424].\", \"# Founded organizations\",\n      \"VALUES ?organizations { wd:Q864990 wd:Q1542121 }.\", \"# D.W. Griffith Productions, United Artists Corporation, David W. Griffith Corp.\",\n      \"?producer wdt:P31/wdt:P279* wd:Q11424.\" , \"# Is a film producer\",\n      \"?film1 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote The Brahma Diamond\",\n      \"?film2 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote His Lost Love\",\n      \"?film3 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote The Birth of a Nation\",\n      \"VALUES ?films { wd:Q80505 wd:Q80506 wd:Q80507 }\" ,\"# The Brahma Diamond, His Lost Love, The Birth of a Nation\"\n    ,\n      \"FILTER(?film1 != ?film2 && ?film2 != ?film3 && ?film1 != ?film3)\" , \"# Ensure each film is unique\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\"# Label service for English labels\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?filmProducer ?film ?director ?screenwriter\",\n    \"WHERE {\",\n      \"?filmProducer wdt:P106 wd:Q3282637 ;\", \"# Film producer occupation\",\n         \"wdt:P112* wd:Q542216, wd:Q64434913, wd:Q3011043 .\", \"# Founded D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp.\",\n      \"?film wdt:P57 ?director ;\", \"# Directed\",\n         \"wdt:P58 ?screenwriter .\", \"# Screenwritten\",\n      \"VALUES ?film { wd:Q542216 wd:Q219400 wd:Q220390 }\", \"# The Brahma Diamond, His Lost Love, and The Birth of a Nation (Note: Q220390 is used as a placeholder for 'The Birth of a Nation' since it's not directly provided in the entities list)\",\n      \"?person wdt:P188 ?filmProducer .\", \"# Associated with the film producer\"\n    ,\n    \"}\",\n    \"GROUP BY ?person ?filmProducer ?film ?director ?screenwriter\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?producer kg:8008 ?film .\",\n    \"?producer kg:8141/^kg:9728* ?person .\",\n    \"?producer kg:8141/^kg:5337* ?person .\",\n    \"?producer kg:8141/^kg:2641* <http://example.org/knowledge_graph/kg:7916> .\",\n    \"?producer kg:8141/^kg:2092* <http://example.org/knowledge_graph/kg:9398> .\",\n    \"?producer kg:8141/^kg:7404* <http://example.org/knowledge_graph/kg:7916> .\",\n    \"?producer kg:8141/^kg:5337* <http://example.org/knowledge_graph/kg:2683> .\",\n    \"?producer kg:8141/^kg:7404* <http://example.org/knowledge_graph/kg:2683> .\",\n    \"?producer kg:8141/^kg:5337* <http://example.org/knowledge_graph/kg:9728> .\",\n    \"?producer kg:8141/^kg:7404* <http://example.org/knowledge_graph/kg:9728> .\",\n    \"?producer kg:8141/^kg:5337* <http://example.org/knowledge_graph/kg:2641> .\",\n    \"?producer kg:8141/^kg:7404* <http://example.org/knowledge_graph/kg:2641> .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248067 ;\", \"># Assuming Brecha and Primary! and In Your Absence are films, use appropriate Wikidata item identifier if known.\",\n      \"wdt:P577 ?date .\",\n      \"?film wdt:P50 ?producer .\",\n      \"?film wdt:P109 ?editor .\",\n      \"?film wdt:P648 ?composer .\",\n      \"?film wdt:P323 ?cinematographer .\",\n      \"?film wdt:P171 ?director .\",\n      \"OPTIONAL { ?editAndWrite wdt:P50 ?producer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P109 ?editor . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P648 ?composer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P323 ?cinematographer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P171 ?director . }\",\n      \"?editAndWrite wdt:P50 ?producer ;\",\n      \"wdt:P109 ?editor ;\",\n      \"wdt:P648 ?composer ;\",\n      \"wdt:P323 ?cinematographer ;\",\n      \"wdt:P171 ?director .\",\n      \"?resource ?p ?editAndWrite .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q4959991 wdt:P1040 ?editor .\",\n    \"wd:Q4959991 wdt:P86 ?composer .\",\n    \"wd:Q4959991 wdt:P57 ?director .\",\n    \"wd:Q4959991 wdt:P58 ?screenwriter .\",\n    \"wd:Q4959991 wdt:P57 ?cinematographer .\",\n    \"VALUES ?editor { wd:Q5375110 }\",\n    \"VALUES ?director { wd:Q7243050 }\",\n    \"?resource wdt:P1431* wd:Q4959991 ;\",\n    \"   wdt:P1431* wd:Q5375110 ;\",\n    \"   wdt:P1431* wd:Q7243050 .\"\n    ]}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?producer, kg:7660, ?brecha) .\",\n    \"  (?editor, kg:4927, ?brecha) .\",\n    \"  (?composer, kg:4705, ?brecha) .\",\n    \"  (?cinematographer, kg:2635, ?brecha) .\",\n    \"  (?director, kg:3894, ?brecha) .\",\n    \"\",\n    \"  (?producer, kg:7660, ?primary) .\",\n    \"  (?editor, kg:4927, ?primary) .\",\n    \"  (?composer, kg:4705, ?primary) .\",\n    \"  (?cinematographer, kg:2635, ?primary) .\",\n    \"  (?director, kg:3894, ?primary) .\",\n    \"\",\n    \"?brecha kg:title \\\"Brecha\\\" ;\",\n    \"?primary kg:title \\\"Primary!\\\" ;\",\n    \"?absence kg:title \\\"In Your Absence\\\".\",\n    \"\",\n    \"OPTIONAL { ?resource kg:title ?title }\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P17 wd:Q30; # American founder and employee of Sally Ride Science\",\n      \"?person wdt:P27 wd:Q851643; # Employee of Center for International Security and Cooperation\",\n      \"?person wdt:P108 wd:Q9282; # Employed by Stanford University\",\n      \"?person wdt:P108 wd:Q10283; # Employed by National Aeronautics and Space Administration (NASA)\",\n      \"?person wdt:P108 wd:Q46537; # Employed by University of California, San Diego\",\n      \"?person wdt:P735 wd:Q9282; # Founder of Sally Ride Science\",\n      \"FILTER(?person != wd:Q9282) # Exclude Sally Ride herself\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P112 wd:Q55206 ;\", \"# Employee of NASA\",\n      \"?person wdt:P108 wd:Q5059715 .\", \"# Employer is Center for International Security and Cooperation\",\n      \"?person wdt:P108 wd:Q30 .\", \"# Employer is United States of America (indirectly through Stanford University)\",\n      \"?person wdt:P108 wd:Q622664 .\", \"# Employer is University of California, San Diego\",\n      \"?person wdt:P27 wd:Q30 ;\", \"# American citizen\",\n      \"?person wdt:P108 wd:Q23548 ;\", \"# Employee of NASA\",\n      \"?person wdt:P108 wd:Q622664 ;\", \"# Employee of University of California, San Diego\",\n      \"?person wdt:P108 wd:Q41506 .\", \"# Employee of Sally Ride Science\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isEmployedBy* ?employer .\",\n    \"?employer a kg:Organization .\",\n    \"?employer kg:8685 [kg:4650 kg:3913] ;\", \"# Stanford University\",\n    \"           kg:9752 ;\", \"# Center for International Security and Cooperation\",\n    \"           kg:4056 ;\", \"# National Aeronautics and Space Administration\",\n    \"           kg:9653 .\", \"# Sally Ride Science\",\n    \"?resource kg:isEmployedBy* ?employer .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q11424;\", \"# Resource is a person or has a subclass of Person\",\n    \"    wdt:P106/wdt:P279* [\", \"# Occupation is one of the following\",\n    \"      (wdt:P1135|wdt:P188);\", \"# Cinematographer or Director\",\n    \"      FILTER(?occupation IN(wd:Q11340, wd:Q66279)) # Editor or Composer\",\n    \"    ] .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P161 wd:Q93853 ;\", \"# Once Upon a Time in Mexico\",\n    \"           wdt:P344 ?cinematographer ;\", \"# cinematographer\",\n    \"           wdt:P57 ?director ;\", \"# director\",\n    \"           wdt:P86 ?composer ;\", \"# composer\",\n    \"           wdt:P58 ?screenwriter ;\", \"# screenwriter\",\n    \"           wdt:P1040 ?editor .\", \"# editor\",\n    \"  VALUES ?resource { wd:Q656357 wd:Q1165050 wd:Q192115 }\" ,\"\\n  # The Adventures of Sharkboy and Lavagirl in 3-D, Planet Terror, Sin City\"\n    ,\n    \"} \"\n  ]\n}\n"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3518 \\\"star\\\" ;\",\n    \"         kg:9541 \\\"writer\\\" ;\",\n    \"         kg:4422 \\\"editor\\\" ;\",\n    \"         kg:9818 \\\"cinematographer\\\" ;\",\n    \"         kg:5839 \\\"director\\\" .\",\n    \"?resource kg:1335 ?film1 ;\",\n    \"?resource kg:6288 ?film2 ;\",\n    \"?resource kg:6479 ?film3 ;\",\n    \"?resource kg:8477 ?film4 ;\",\n    \"?resource kg:3082 ?film5 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q168450.\" , \"# Check if the resource is a person or an organization\",\n      \"?resource wdt:P108 ?employment.\" , \"# Find employment relationships\",\n      \"(?employment wdt:P106 [wdt:P27 wd:Q139014];\" , \"# Nibariki, Ghibli Museum, and TMS Entertainment\",\n      \" ?employment wdt:P106 [wdt:P27 wd:Q586919];\" , \"# Shin-Ei Animation and Studio Ghibli\",\n      \" ?employment wdt:P106 [wdt:P27 wd:Q43223]).\" , \"# Tokuma Memorial Cultural Foundation for Animation\"\n      ,\n      \"?resource wdt:P58 ?work.\" , \"# Find the work related to Howl's Moving Castle\",\n      \"?work wdt:P648 wd:Q190176.\" ,\"# Howl's Moving Castle\"\n    ,\n    \"}\"\n  ]\n}\n"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q29011 ;\",\n             \"wdt:P1431 ?execProducer ;\",\n             \"wdt:P58 ?screenwriter .\",\n      \"?execProducer wdt:P108 wd:Q1136387 ; wd:Q1136387 wd:Q947907 ; wd:Q1136387 wd:Q11371930 ; wd:Q1136387 wd:Q29011 .\",\n      \"?screenwriter wdt:P108 wd:Q1136387 ; wd:Q1136387 wd:Q11490471 ; wd:Q1136387 wd:Q182950 ; wd:Q1136387 wd:Q1054807 .\",\n      \"VALUES ?movie { wd:Q29011 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0338 kg:2812 ;\",\n    \"   (kg:4357 / kg:0201) kg:2812 .\",\n    \"?resource kg:0338 kg:5910 ;\",\n    \"   (kg:4357 / kg:0201) kg:5910 .\",\n    \"?resource kg:0338 kg:6491 ;\",\n    \"   (kg:4357 / kg:0201) kg:6491 .\",\n    \"?resource kg:0338 kg:0791 ;\",\n    \"   (kg:4357 / kg:0201) kg:0791 .\",\n    \"?resource kg:0338 kg:5322 ;\",\n    \"   (kg:4357 / kg:0201) kg:5322 .\",\n    \"?resource kg:0338 kg:0820 ;\",\n    \"   (kg:4357 / kg:0201) kg:0820 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3459 ?film .\", \"# P3459 is used for cinematographer of a film\",\n      \"?resource wdt:P50 ?writingWork .\", \"# P50 is used for writer of a work\",\n      \"?resource wdt:P161 ?directedFilm .\", \"# P161 is used for director of a film\",\n      \"?film wdt:P3459 \\\"Herbie\\\"@en .\", \"# Specific cinematography work\",\n      \"?writingWork wdt:P304 \\\"Anyone Lived in a Pretty How Town\\\"@en .\", \"# Specific writing work\",\n      \"?directedFilm wdt:P161 \\\"Star Wars: Episode IV – A New Hope\\\"@en .\", \"# Specific directed film\"\n    ,\n      \"FILTER(?resource = wd:Q7574)\" ,\"\\n\" ,\"\\t# Q7574 is the Wikidata ID for George Lucas, who directed Star Wars: Episode IV - A New Hope\"\n    ,\n      \"?resource wdt:P161 ?directedFilm .\", \"# Ensure the person directed the film as well\"\n    ,\n      \"VALUES ?resource { wd:Q7574 }\" ,\"\\n\" ,\"\\t# Limiting to George Lucas based on his known role in Star Wars\"\n    ,\n      \"?resource wdt:P31/wdt:P279* wd:Q11860\" ,\"\\t# Ensure the resource is a person\"\n    ,\n      \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person wdt:P57 wd:Q17738. ;; Director of Episode IV - A New Hope\",\n    \"?person wdt:P58 wd:Q17738. ;; Screenwriter for Episode IV - A New Hope\",\n    \"?person wdt:P1431 wd:Q17738. ;; Executive producer for Episode IV - A New Hope\",\n    \"?person wdt:P344 ?cinematographer. ;; Cinematographer of Herbie\",\n    \"?person wdt:P58 wd:Q613974. ;; Screenwriter for Anyone Lived in a Pretty How Town\",\n    \"?person wdt:P1431 wd:Q1415127. ;; Filmmaker\",\n    \"?person wdt:P344 wd:Q208910. ;; Director of 1:42.08\"\n   \t,\n    \"FILTER(?resource = ?person).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6062 ?cinematographer .\",\n    \"?resource kg:7026 ?screenwriter .\",\n    \"?resource kg:4089 ?executiveProducer .\",\n    \"?resource kg:1146 \\\"Star Wars: Episode IV – A New Hope\\\" .\",\n    \"OPTIONAL { ?resource kg:1953 \\\"Anyone Lived in a Pretty How Town\\\" }\",\n    \"OPTIONAL { ?resource kg:2562 \\\"Filmmaker\\\" }\",\n    \"OPTIONAL { ?resource kg:2618 \\\"Herbie\\\" }\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248056 ;\", \"# Rabbits and Six Men Getting Sick\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248057 .\", \"# Twin Peaks\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248058 .\", \"# Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done\",\n      \"?person wdt:P31/wdt:P279* wd:Q114248060 ;\" , \"# Cinematographer, Director, Editor\",\n      \"wdt:P578 ?film. # Exec producer role\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P1431 ?execProducer .\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"(wd:Q2085 wd:Q1140578 wd:Q1511905 wd:Q1473406) ?execProducer+ wd:Q1431+ ?person ;\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2839 ?execProducer .\",\n    \"?execProducer kg:6298 ?tpFilm .\",\n    \"?film kg:0081 ?cinematographer .\",\n    \"?film kg:5438 ?editor .\",\n    \"?film kg:5435 ?tfwFilm .\",\n    \"?film kg:5660 ?rmFilm .\",\n    \"?film kg:4868 ?msyhydFilm .\",\n    \"?film kg:2839 ?execProducerTP .\",\n    \"?execProducerTP kg:6298 ?tpFilmTP .\",\n    \"?film kg:0081 ?cinematographerTP .\",\n    \"?film kg:5438 ?editorTP .\",\n    \"?film kg:5435 ?tfwFilmTP .\",\n    \"?film kg:5660 ?rmFilmTP .\",\n    \"?film kg:4868 ?msyhydFilmTP .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248090 ;\", \"# The Kid (film)\",\n      \"?film2 wdt:P31 wd:Q114248090 ;\", \"# The Floorwalker (film)\",\n      \"?film3 wdt:P31 wd:Q114248090 ;\", \"# A Woman (film)\",\n      \"?film4 wdt:P31 wd:Q114248090 .\", \"# Modern Times (film)\",\n      \"?director1 wdt:P161 ?film1 ;\",\n      \"?editor1 wdt:P162 ?film1 ;\",\n      \"?director2 wdt:P161 ?film2 ;\",\n      \"?editor2 wdt:P162 ?film2 ;\",\n      \"?director3 wdt:P161 ?film3 ;\",\n      \"?editor3 wdt:P162 ?film3 ;\",\n      \"?director4 wdt:P161 ?film4 ;\",\n      \"?editor4 wdt:P162 ?film4 ;\",\n      \"?director1 wdt:P50+ wd:Q98724 ;\", \"# Lita Grey (person)\",\n      \"?director2 wdt:P50+ wd:Q36242 ;\", \"# Mildred Harris (person)\",\n      \"?editor1 wdt:P50+ wd:Q98724 ;\",\n      \"?editor2 wdt:P50+ wd:Q36242 ;\",\n      \"?director3 wdt:P50+ wd:Q105391 ;\", \"# Oona O'Neill (person)\",\n      \"?director4 wdt:P50+ wd:Q105391 ;\",\n      \"?editor3 wdt:P50+ wd:Q105391 ;\",\n      \"?editor4 wdt:P50+ wd:Q105391 ;\",\n      \"VALUES ?resource { ?director1 ?editor1 ?director2 ?editor2 ?director3 ?editor3 ?director4 ?editor4 }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  (wdt:P57 wd:Q374172) wdt:P1040 ?editor .\",\n    \"  ((wdt:P57 wd:Q37412) wdt:P26 wd:Q32337 ;\",\n    \"   wdt:P26 wd:Q45602 ;\",\n    \"   wdt:P26 wd:Q137808) .\",\n    \"  ?editor wdt:P26 ?spouse .\",\n    \"}\",\n    \"VALUES ?resource { wd:Q37412 wd:Q37412 wd:Q37412 }\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:5028 kg:5605) [] kg:9015 ;\",\n    \"         [] kg:8417.\",\n    \"  (kg:5028 kg:8890 kg:5384) [] kg:9015 ;\",\n    \"         [] kg:8417.\",\n    \"  (kg:5028 kg:8890 kg:2398) [] kg:9015 ;\",\n    \"         [] kg:8417.\",\n    \"  (kg:5028 kg:8890 kg:8719) [] kg:9015 ;\",\n    \"         [] kg:8417.\",\n    \"  (kg:5028 kg:8890 kg:1117) [] kg:9015 ;\",\n    \"         [] kg:8417.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P50 ?person .\", \"# Written by\",\n      \"?work wdt:P2093 ?person .\", \"# Edited by (P2093 is the property for 'edited by')\",\n      \"?work wdt:P61 ?person .\", \"# Directed by\",\n      \"FILTER(?person = wd:Q7845)\" ,\"\\n# Charlie Chaplin's Wikidata ID\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q24449 ;\", \"# Instance of film\",\n      \"   wdt:P57 ?director ;\", \"# Director is\",\n      \"   wdt:P1040 ?editor ;\" , \"# Editor is\",\n      \"   wdt:P58 ?writer . \" ,\"# Writer is\",\n      \"?film rdfs:label ?filmLabel .\",\n      \"?director rdfs:label ?directorLabel .\",\n      \"?editor rdfs:label ?editorLabel .\",\n      \"?writer rdfs:label ?writerLabel .\",\n      \"FILTER (lang(?filmLabel) = 'en' && lang(?directorLabel) = 'en' && lang(?editorLabel) = 'en' && lang(?writerLabel) = 'en') .\",\n      \"VALUES ?director { wd:Q882 } .\", \"# Charlie Chaplin is the director, editor, and writer\"\n    ,\n      \"?film wdt:P57 wd:Q882 ;\",\n      \"   wdt:P1040 wd:Q882 ;\",\n      \"   wdt:P58 wd:Q882 .\",\n      \"FILTER EXISTS { ?film rdfs:label 'The Floorwalker'@en } || FILTER EXISTS { ?film rdfs:label 'The Gold Rush'@en } || FILTER EXISTS { ?film rdfs:label 'The Immigrant'@en } .\" ,\"# Ensure the film is one of these\",\n      \"?director wdt:P21 wd:Q6581097 .\", \"# Director is male\"\n    ,\n      \"?editor wdt:P21 wd:Q6581097 .\", \"# Editor is male\"\n    ,\n      \"?writer wdt:P21 wd:Q6581097 .\" ,\"# Writer is male\"\n    ,\n      \"VALUES ?resource { ?film }\" ,\"# Return the film resource\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:9313 ?person .\",\n    \"?person kg:4388 ?person .\",\n    \"?person kg:7658 ?sexOrGender .\",\n    \"?person kg:4930 ?director .\",\n    \"?person kg:3971 ?editor .\",\n    \"?film kg:9322 'Charlie Chaplin' .\",\n    \"FILTER(?sexOrGender = kg:7658)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer ?acquirer1 ?acquirer2 ?acquirer3 ?acquirer4\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P361 ?acquirer1. # Acquired by Laurene Powell Jobs and Fidelity Investments\",\n      \"?distributorProducer wdt:P527 ?acquirer2. # Acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies\",\n      \"FILTER(?acquirer1 = wd:Q3046982 && ?acquirer2 = wd:Q11151996) # Laurene Powell Jobs and Fidelity Investments\",\n      \"?distributorProducer wdt:P527* wd:Q11151996. # Acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P750 ?distributor ;\",\n    \"   wdt:P127 ?producer .\",\n    \"?producer wdt:P272 ?productionCompany .\",\n    \"?movie wdt:P279* wd:Q2062523 .\", \"structural {\",\n    \"  ?acquirer wdt:P279* [ wdt:P127* wd:Q505275 ;\",\n    \"                            wdt:P127* wd:Q3511946 ;\",\n    \"                            wdt:P127* wd:Q3133593 ;\",\n    \"                            wdt:P127* wd:Q219635 ] .\",\n    \"} }\"\n  ]\n}\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{\n \t\"query\": [\"PREFIX kg: <http://example.org/knowledge_graph/>\", \"SELECT ?resource\", \"{\", \"?resource kg:1030+ kg:2959 ;\", \"   kg:6072 ?distributorProducer ;\", \"   kg:1030* (?kg_4822 | ?kg_0993 | ?kg_0073 | ?kg_5386).\", \"{ ?resource kg:6072 ?distributorProducer. } UNION { ?resource kg:6879 ?distributorProducer. }\", \"FILTER(?distributorProducer = kg:4822 || ?distributorProducer = kg:0993 || ?distributorProducer = kg:0073 || ?distributorProducer = kg:5386).\", \"}\", \"}\"]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 wd:Q249058.\" , \"># City Lights (film) - Q249058 in Wikidata\",\n      \"?resource wdt:P361 wd:Q249072.\" , \"># Modern Times (film) - Q249072 in Wikidata\",\n      \"?resource wdt:P577 ?date .\", \"># Ensure it's a person by checking for birth date\",\n      \"?resource wdt:P106/wdt:P279* wd:Q83199.\" , \"># Composer, editor, and director - Q83199 is the broad match for these roles in Wikidata\",\n      \"FILTER NOT EXISTS { ?resource wdt:P31/wdt:P279* wd:Q5 . }\" , \"># Ensure it's not a person but a resource (e.g., film) by excluding instances of human\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?editor\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P86 ?composer.\",\n      \"?film wdt:P1040 ?editor.\",\n      \"VALUES ?film { wd:Q238211 wd:Q2345349 wd:Q374172 }\",\n      \"VALUES ?director { wd:Q2345349 wd:Q45602 wd:Q238211 }\",\n    \"}\"\n  ]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1410 ?composer .\",\n    \"?resource kg:1541 ?editor .\",\n    \"?resource kg:8585 ?directorCityLights .\",\n    \"?resource kg:7670 ?directedFloorwalker .\",\n    \"?resource kg:0684 ?editedHisMusicalCareer .\",\n    \"?resource kg:0642 ?directedModernTimes .\",\n    \"?resource kg:0727 ?editedGoldRush .\",\n    \"?resource kg:0642 ?directedTheKid .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?film1 ?film2 ?influenceLars ?influenceAran\",\n    \"WHERE {\",\n      \"?director wdt:P3450 ?film1 ;\", \"# P3450 is used for 'Directed by'\",\n      \"?director wdt:P3450 ?film2 .\", \"# P3450 is used for 'Directed by'\",\n      \"?film1 wdt:P6789 \\\"There Will Be No Leave Today\\\"@en ;\", \"# P6789 is a hypothetical property, replace with actual property if known\",\n      \"?film2 wdt:P6789 \\\"The Killers\\\"@en .\", \"# P6789 is a hypothetical property, replace with actual property if known\",\n      \"?director wdt:P1054 ?influenceLars ;\", \"# P1054 is a hypothetical property for influence on Lars von Trier, replace with actual property if known\",\n      \"?director wdt:P1062 ?influenceAran .\", \"# P1062 is a hypothetical property for influence on Aran Cosentino, replace with actual property if known\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\" ,\",  # Person is a human\",\n      \"?person wdt:P275 ?marriage1 .\", \"# The person married Oona O'Neill\",\n      \"?person wdt:P275 ?marriage2 .\", \"# The person married Lita Grey\",\n      \"?person wdt:P275 ?marriage3 .\", \"# The person married Mildred Harris\",\n      \"?person wdt:P106/wdt:P279* wd:Q84519 .\" ,\",  # The person is a film editor and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd\",\n      \"?person wdt:P39 wd:Q16609 .\" ,\",  # The person founded United Artists Corporation\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person ?filmEditor\",\n    \"WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7371 ;\", \"# Occupation is film editor and influenced people\",\n      \"  wdt:P737/wdt:P26* ?spouse .\", \"# Influenced by people who are spouses of the film editor\",\n      \"VALUES ?spouse { wd:Q157191 wd:Q241019 wd:Q137808 }.\", \"# Oona O'Neill, Mildred Harris, and Lita Grey\",\n      \"?filmEditor wdt:P737/wdt:P26* wd:Q32337 .\", \"# Influenced by Lita Grey (another spouse)\",\n      \"OPTIONAL { ?filmEditor wdt:P112 ?corporation }.\" ,\"\\n# Found United Artists Corporation if it exists\",\n      \"?person wdt:P106 wd:Q7371 ;\", \"# Occupation is film editor and influenced people\",\n      \"  wdt:P737/wdt:P26* ?spouse .\", \"# Influenced by people who are spouses of the person\",\n      \"VALUES ?spouse { wd:Q157191 wd:Q241019 wd:Q137808 }.\", \"# Oona O'Neill, Mildred Harris, and Lita Grey\",\n      \"?person wdt:P737/wdt:P26* wd:Q32337 .\", \"# Influenced by Lita Grey (another spouse)\",\n      \"OPTIONAL { ?person wdt:P112 ?corporation }.\" ,\"\\n# Found United Artists Corporation if it exists\",\n      \"?filmEditor wdt:P112 ?corporation .\" ,\"\\n# Ensure the film editor founded the corporation\"\n    ,\n    \"FILTER NOT EXISTS { ?person wdt:P106 wd:Q7371 }\" ,\"\\n# Exclude people who are not film editors\"\n    ,\n    \"?corporation wdt:P112* wd:Q219400 .\" ,\"\\n# Ensure the corporation is United Artists\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:0219 ?spouse .\",\n    \"?person1 kg:8264 ?corporation .\",\n    \"?person1 kg:9557 ?filmEditorship .\",\n    \"?person1 kg:0719 ?spouse2 .\",\n    \"?person1 kg:0719 ?spouse3 .\",\n    \"?person1 kg:1968 ?influencedPerson1 .\",\n    \"?person1 kg:5590 ?influencedPerson2 .\",\n    \"?person1 kg:5590 ?influencedPerson3 .\",\n    \"?corporation kg:8019 \\\"United Artists Corporation\\\" .\",\n    \"FILTER ( ?spouse = kg:9121 || ?spouse = kg:9083 || ?spouse = kg:8019 )\",\n    \"FILTER ( ?influencedPerson1 = kg:5590 || ?influencedPerson2 = kg:5590 || ?influencedPerson3 = kg:5590 )\",\n    \"?filmEditorship kg:6724 \\\"film editor\\\" .\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the film is a movie\",\n      \"  wdt:P577 \\\"1988-01-01T00:00:00Z\\\"^^xsd:dateTime . # Example date, adjust as needed\",\n      \"?film wdt:P57 ?director; # Director of the film\",\n      \"?film wdt:P161 ?star; # Star of the film\",\n      \"?film wdt:P40 ?writer. # Writer of the film\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" } # Label in English\",\n    \"}\",\n    \"FILTER (regex(str(?film), 'Jane B\\\\. par Agn\\\\eses|The Beaches of Agn\\\\eses|The World of Jacques Demy', 'i')) # Filter by film titles\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P26 ?spouse .\",\n\t\t\"?film wdt:P737 wd:Q312258 .\",\n\t\t\"wd:Q3161846 wdt:P737 ?director .\",\n\t\t\"wd:Q3161846 wdt:P58 ?writer .\",\n\t\t\"wd:Q3161846 wdt:P26 ?spouse .\",\n\t\t\"?film wdt:P161* wd:Q312258 .\",\n\t\t\"FILTER(?film != wd:Q3161846)\",\n\t\t\"?film wdt:P737 wd:Q312258 .\",\n\t\t\"?film wdt:P57 ?director2 .\",\n\t\t\"?film wdt:P58 ?writer2 .\",\n\t\t\"?film wdt:P26 ?spouse2 .\",\n\t\t\"FILTER(?director != ?director2 || ?writer != ?writer2 || ?spouse != ?spouse2)\",\n\t\t\"?film rdfs:label ?filmLabel FILTER(LANG(?filmLabel) = 'en')\",\n\t\t\"?spouse rdfs:label ?spouseLabel FILTER(LANG(?spouseLabel) = 'en')\",\n\t\t\"?director rdfs:label ?directorLabel FILTER(LANG(?directorLabel) = 'en')\",\n\t\t\"?writer rdfs:label ?writerLabel FILTER(LANG(?writerLabel) = 'en')\",\n\t\t\"VALUES ?film { wd:Q2709504 }\",\n\t\t\"VALUES ?spouse { wd:Q3161846 }\",\n\t\t\"VALUES ?director { wd:Q312258 }\",\n\t\t\"VALUES ?writer { wd:Q3204825 }\",\n\t\t\"?resource ?p ?o .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?movie1, kg:0390, ?director) .\",\n    \"  (?movie1, kg:0204, ?writer) .\",\n    \"  (?movie2, kg:0390, ?director) .\",\n    \"  (?movie2, kg:0204, ?writer) .\",\n    \"  (?movie3, kg:0390, ?director) .\",\n    \"  (?movie3, kg:0204, ?writer) .\",\n    \"  (?director, kg:4270, ?spouse) .\",\n    \"  (?writer, kg:1230, ?director) .\",\n    \"  (?director, kg:1230, ?writer) .\",\n    \"  (?director, kg:3223) .\",\n    \"  VALUES ?movie1 { kg:5087 }\",\n    \"  VALUES ?movie2 { kg:1985 }\",\n    \"  VALUES ?movie3 { kg:1448 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P31/wdt:P279* wd:Q86450 ;\", \"# Distributor and producer of Mozart in the Jungle\",\n      \"  wdt:P1294 ?acquirer .\", \"# Acquired by The Vanguard Group and BlackRock\",\n      \"?acquirer p:P1294 ?statement .\",\n      \"?statement ps:P1294 ?distributorProducer ;\",\n      \"   pq:P580 ?acquisitionDate .\", \"# Acquisition date (optional, for context)\",\n      \"?resource wdt:P31/wdt:P279* wd:Q16649091 ;\" , \"# Related to Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n      \"  (wdt:P180|wdt:P154|wdt:P161|wdt:P132) ?resource .\" ,\"\\n# P180 - parent company of, P154 - subsidiary of, P161 - product of, P132 - domain name of\"\n    ,\n      \"FILTER(?distributorProducer != ?resource)\" ,\"\\n# Ensure we don't return the distributor/producer itself as a resource\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P272 ?productionCompany ;\",\n    \"   wdt:P750 ?distributor .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?movie wdt:P127* wd:Q17070012 ;\",\n    \"   wdt:P272 ?productionCompany ;\",\n    \"   wdt:P750 ?distributor .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p != wdt:P272 && ?p != wdt:P750)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p != wdt:P127)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p = wdt:P127)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p = wdt:P272 || ?p = wdt:P750)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p = wdt:P127)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p = wdt:P272 || ?p = wdt:P750)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p = wdt:P127)\",\n    \"}\",\n    \"UNION {\",\n    \"?movie wdt:P127* wd:Q849363 ;\",\n    \"   wdt:P127* wd:Q219635 .\",\n    \"?productionCompany wdt:P127* wd:Q1628791 ;\",\n    \"   wdt:P127* wd:Q17070012 .\",\n    \"?resource"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributorProducer kg:0832 ?productionCompany .\",\n    \"?productionCompany kg:6716 ?owner .\",\n    \"?owner kg:4990 ?vanguardGroup .\",\n    \"?owner kg:3680 ?blackRock .\",\n    \"?productionCompany kg:5943 ?amazonKindle .\",\n    \"?productionCompany kg:5071 ?abeBooks .\",\n    \"?productionCompany kg:0582 ?cloudFront .\",\n    \"?productionCompany kg:8018 ?amazonDomain .\",\n    \"?productionCompany kg:1758 ?mzntJungle .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P161 ?star ;\", \"# Star role\",\n    \"           wdt:P2790 ?editor ;\", \"# Editor role\",\n    \"           wdt:P3458 ?cinematographer . # Cinematographer role\",\n    \"  FILTER(?star = wd:Q1234567) .  # Replace with the actual Wikidata ID for Female Vampire\",\n    \"  ?resource wdt:P50 ?spanishWriter ;\", \"# Spanish writer role\",\n    \"           wdt:P3458 ?director .         # Director role\",\n    \"  FILTER(?spanishWriter = wd:Q789123) . # Replace with the actual Wikidata ID for 99 Women\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q289021 ;\", \"# Director of Female Vampire\",\n    \"         wdt:P58 wd:Q3633009 ;\", \"# Screenwriter of Female Vampire (not used in this query)\",\n    \"         wdt:P1040 wd:Q4004365 .\", \"# Editor of Female Vampire (not used in this query)\",\n    \"?resource wdt:P27 wd:Q29 ;\", \"# Spanish citizenship\",\n    \"   wdt:P57 wd:Q463946 .\", \"# Director of The Blood of Fu Manchu\"\n   \t]\n  }\n"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is_director kg:6836 ;\",\n    \"   kg:is_screenwriter kg:9729 ;\",\n    \"   kg:is_film_editor kg:1739 .\",\n    \"}\",\n    \"FILTER EXISTS { ?resource kg:country_of_citizenship kg:4005 }\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P175+ wd:Q960384 ;\", \"# Industrial Light & Magic and THX were founded by Lucasfilm\",\n      \"?resource wdt:P175+ wd:Q210448 .  # Jediism was founded by Mellody Hobson's spouse\",\n      \"wd:Q210448 wdt:P36 ?founder ;\", \"# Find the founder of Jediism\",\n      \"?founder wdt:P671 ?spouse ;\", \"# Find the spouse of the founder\",\n      \"?spouse wdt:P365 ?resource .  # Find the resource founded by Mellody Hobson's spouse\"\n    ,\n      \"FILTER(?resource != wd:Q960384)  # Exclude Lucasfilm as it is already mentioned in the first part\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q746676 wdt:P112+ ?foundedByILM .\",\n    \"  ?foundedByILM wdt:P26 wd:Q6813152 .\",\n    \"  wd:Q258945 wdt:P112+ ?foundedByTHX .\",\n    \"  ?foundedByTHX wdt:P26 wd:Q6813152 .\",\n    \"  wd:Q222344 wdt:P106* ?occupation .\",\n    \"  ?occupation wdt:P112+ ?foundedByLucasfilm .\",\n    \"  ?foundedByLucasfilm wdt:P26 wd:Q6813152 .\",\n    \"  ?resource ?p ?obj FILTER(?p IN (wdt:P27, wdt:P625))\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}\n"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?cinematographer kg:7603 ?occupation ;\",\n    \"   kg:7076/kg:7076 ?ilmAndTHX .\",\n    \"?ilmAndTHX kg:7076/kg:7076 ?foundingEntity .\",\n    \"?foundingEntity kg:4437 [kg:9494 ?hobson ; kg:3537 ?spouse] .\",\n    \"}\",\n    \"VALUES ?cinematographer { kg:9092 }\",\n    \"VALUES ?ilmAndTHX { kg:1593 kg:3551 }\",\n    \"VALUES ?foundingEntity { kg:4803 kg:7076 }\",\n    \"VALUES ?hobson { kg:4437 }\",\n    \"VALUES ?spouse { kg:9494 }\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"  wdt:P577 \\\"The Madness\\\"@en. # The title of the film\",\n      \"?film wdt:P688 ?cinematographer. # Cinematographer of the film\",\n      \"?film wdt:P161 ?star. # Star of the film\",\n      \"?film wdt:P3459 ?writer. # Writer of the film\",\n      \"?film wdt:P2860 ?director. # Director of the film\",\n      \"?film wdt:P739 ?producer. # Executive producer of the film\",\n      \"?film wdt:P710 ?editor. # Editor of the film\",\n      \"VALUES ?film { wd:Q12345 } # Replace with the actual Wikidata ID for The Madness if known\",\n      \"?resource ?p ?object. # Return all resources related to the film\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P161 ?star .\",\n\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P1431 ?executiveProducer .\",\n\t\t\"VALUES ?film { wd:Q85520081 wd:Q96054985 wd:Q85532437 }\",\n\t\t\"FILTER(?film = wd:Q87778273)\",\n\t\t\"?resource ?p ?film.\"\n\t\t]}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{\n \t\"query\": [\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n \t\t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:0658 ?cinematographer .\",\n \t\t\t\"?resource kg:6473 ?star .\",\n \t\t\t\"?resource kg:1484 ?inception .\",\n \t\t\t\"?resource kg:8802 ?gameOver .\",\n \t\t\t\"?resource kg:9888 ?liberation .\",\n \t\t\t\"?resource kg:8389 ?executiveProducer .\",\n \t\t\t\"?resource kg:1709 ?editor .\",\n \t\t\t\"?resource kg:8781 ?madness .\",\n \t\t\t\"}\"]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Check if the work is a film or TV show\",\n      \"?work wdt:P577 \\\"1971-01-01\\\"^^xsd:date.\" , \"# Example date, adjust as needed\",\n      \"?work wdt:P50 ?writer.\" , \"# Writer of the work\",\n      \"?work wdt:P323 ?cinematographer.\" , \"# Cinematographer of the work\",\n      \"FILTER(?work IN (wd:Q186947, wd:Q1027697, wd:Q1586692, wd:Q11424806))\" , \"# Replace with actual Wikidata IDs if known\"\n    ,\n      \"OPTIONAL { ?work wdt:P57 \" ,\"Herbie married a person and influenced Marcus Orelias and Lorne Lanning\" ,\". }\" , \"# Optional filter for the specific statement\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n               \t\t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?writer wdt:P58 ?screenplay .\",\n\t\t\"?cinematographer wdt:P344 ?screenplay .\",\n\t\t\"?screenplay wdt:P31 wd:Q613974 ;\",\n\t\t\"   wdt:P31 wd:Q208910 ;\",\n\t\t\"   wdt:P31 wd:Q2411065 .\",\n\t\t\"?writer wdt:P26 ?spouse .\",\n\t\t\"?screenplay wdt:P737 ?influence .\",\n\t\t\"?influence wdt:P58 wd:Q52306598 ;\",\n\t\t\"   wdt:P26 wd:Q717378 .\",\n\t\t\"?writer wdt:P31 wd:Q5 .\",\n\t\t\"?cinematographer wdt:P31 wd:Q5 .\",\n\t\t\"?influence wdt:P31 wd:Q5 .\",\n\t\t\"FILTER(?screenplay != wd:Q2411065)\",\n\t\t\"?screenplay wdt:P737 wd:Q1609393 .\",\n\t\t\"?resource ?p ?o .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?writerOrCinematographer a kg:2767 ;\",\n    \"   kg:6058 \\\"The Emperor\\\" ;\",\n    \"   kg:6058 \\\"Anyone Lived in a Pretty How Town\\\" ;\",\n    \"   kg:6333 ?spouse ;\",\n    \"   kg:4430/kg:8250 kg:3401, kg:0307, kg:4166 .\",\n    \"?writerOrCinematographer kg:6723/kg:6333 ?resource.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a placeholder for the film resource (Uzak or Clouds of May)\",\n      \"?film wdt:P577 ?date .\", \"># Optional date, can be removed if not needed\",\n      \"?film wdt:P6379 ?cinematographer .\", \"># Cinematographer\",\n      \"?film wdt:P802 ?producer .\", \"># Producer (executive producer)\",\n      \"?film wdt:P1004 ?editor .\", \"># Editor\",\n      \"?film wdt:P57 ?writer .\", \"># Writer\",\n      \"?cinematographer wdt:P31 wd:Q966892 ;\", \"># Q966892 is the Wikidata item for Cinematographer\",\n      \"?producer wdt:P31 wd:Q40695 ;\", \"># Q40695 is the Wikidata item for Executive producer\",\n      \"?editor wdt:P31 wd:Q7682 ;\", \"># Q7682 is the Wikidata item for Editor\",\n      \"?writer wdt:P31 wd:Q114222072 ;\", \"># Q114222072 is a placeholder for Writer (Nuri Bilge Ceylan)\",\n      \"FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer)\" ,\"\\n\",\n      \"?trilogy wdt:P577 ?date ;\", \"># Optional date, can be removed if not needed\",\n      \"?trilogy wdt:P6379 ?cinematographer .\", \"># Cinematographer of the trilogy\",\n      \"?trilogy wdt:P802 ?producer .\", \"># Producer (executive producer) of the trilogy\",\n      \"?trilogy wdt:P1004 ?editor .\", \"># Editor of the trilogy\",\n      \"?trilogy wdt:P57 ?writer .\", \"># Writer of the trilogy\",\n      \"FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer)\" ,\"\\n\",\n      \"?film wdt:P161 ?trilogy.\" ,\"\\n\", \"># Film is part of the trilogy\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P57 wd:Q18609037 ;\", \"# Uzak was directed by Nuri Bilge Ceylan trilogy's director\",\n    \"   wdt:P1431 wd:Q2086445 ;\", \"# Clouds of May was executive produced by Nuri Bilge Ceylan trilogy's director\",\n    \"   wdt:P1040 ?editor ;\", \"# The film has an editor\",\n    \"   wdt:P58 ?screenwriter .\", \"# The film has a screenwriter\",\n    \"?film wdt:P106 wd:Q222344.\" ,\"\\n# The occupation of the resource is cinematographer\",\n    \"?editor wdt:P106 wd:Q222344.\" ,\"\\n# The editor's occupation is also cinematographer (to ensure it's the same person)\",\n    \"FILTER(?screenwriter = ?editor)\" ,\"\\n# Ensure screenwriter and editor are the same person\"\n   ,\"?resource wdt:P106 wd:Q222344.\" ,\"\\n# The resource itself is a cinematographer\"\n    ,\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\" ,\"\\n# Label service for readability\"\n    ,\"}\"\n  ]\n}\n             \t\t  \t\t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:3965 kg:9814 ;\", \"# Uzak was directed by Nuri Bilge Ceylan\",\n    \"  kg:0252 ?cinematographer .\", \"# The cinematographer of the film\",\n    \"?film2 kg:3965 kg:9814 ;\", \"# Clouds of May was directed by Nuri Bilge Ceylan\",\n    \"  kg:0252 ?cinematographer .\", \"# The same cinematographer for both films\",\n    \"?film1 kg:0650 ?executiveProducer ;\", \"# Uzak was executive produced by the same person as Clouds of May\",\n    \"  kg:8485 ?executiveProducer ;\",\n    \"  kg:3965 kg:5964 .\", \"# Nuri Bilge Ceylan trilogy's director is Nuri Bilge Ceylan\",\n    \"?film2 kg:0650 ?executiveProducer ;\",\n    \"  kg:8485 ?executiveProducer ;\",\n    \"  kg:3965 kg:5964 .\",\n    \"?film1 kg:0060 ?editor ;\", \"# Uzak was edited by the same person as Clouds of May\",\n    \"  kg:8485 ?editor ;\",\n    \"  kg:3965 kg:5964 .\",\n    \"  ?editor kg:8485 kg:5964 .\", \"# The editor is also part of the Nuri Bilge Ceylan trilogy's director\",\n    \"?film2 kg:0060 ?editor ;\",\n    \"  kg:8485 ?editor ;\",\n    \"  kg:3965 kg:5964 .\",\n    \"?film1 kg:5866 ?screenwriter ;\", \"# Uzak was written by the same person as Clouds of May\",\n    \"  kg:8485 ?screenwriter ;\",\n    \"  kg:3965 kg:5964 .\",\n    \"  ?screenwriter kg:8485 kg:5964 .\", \"# The screenwriter is also part of the Nuri Bilge Ceylan trilogy's director\",\n    \"?film2 kg:5866 ?screenwriter ;\",\n    \"  kg:8485 ?screenwriter ;\",\n    \"  kg:3965 kg:5964 .\",\n    \"?cinematographer kg:8485 kg:5964 .\" ,\"\\n# The cinematographer is also part of the Nuri Bilge Ceylan trilogy's director\",\n    \"}\",\n    \"\\n\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248769 ;\", \"# Vagabond, The Gleaners and I\",\n      \"?film1 wdt:P50 ?author .\",\n      \"?film1 wdt:P281* ?editor .\",\n      \"?film1 wdt:P577 ?date1 .\",\n      \"?film2 wdt:P31 wd:Q114248769 ;\", \"# Varda by Agnès\",\n      \"?film2 wdt:P50 ?author2 .\",\n      \"?film2 wdt:P281* ?editor2 .\",\n      \"?film2 wdt:P577 ?date2 .\",\n      \"?author wdt:P31 wd:Q5 ;\", \"# Author is a person\",\n      \"?author2 wdt:P31 wd:Q5 ;\", \"# Second author is also a person\",\n      \"FILTER(?author != ?author2) .\",\n      \"?author wdt:P740 ?jacquesDemy .\", \"# Author married Jacques Demy\",\n      \"?author2 wdt:P740 ?jacquesDemy .\", \"# Second author also married Jacques Demy\",\n      \"?film1 wdt:P577 ?date1 ;\",\n      \"?film2 wdt:P577 ?date2 ;\",\n      \"?jacquesDemy wdt:P31 wd:Q5 .\" ,\"\\n# Jacques Demy is a person\"\n    ,\n      \"VALUES ?resource { ?author ?author2 }\" ,\"\\n# Return the authors as resources\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film1 wdt:P1040 ?editor1 ;\",\n    \"   wdt:P58 ?screenwriter1 ;\",\n    \"   wdt:P26 ?spouse1 ;\",\n    \"   wdt:P737 ?influencer .\",\n    \"?film2 wdt:P1040 ?editor2 ;\",\n    \"   wdt:P58 ?screenwriter2 ;\",\n    \"   wdt:P26 ?spouse2 ;\",\n    \"   wdt:P737 ?influencer .\",\n    \"?film3 wdt:P1040 ?editor3 ;\",\n    \"   wdt:P58 ?screenwriter3 ;\",\n    \"   wdt:P26 ?spouse3 ;\",\n    \"   wdt:P737 ?influencer .\",\n    \"?director wdt:P106 wd:Q2526255 ;\",\n    \"   wdt:P26 ?spouse4 .\",\n    \"?film1 wdt:P106 wd:Q2493884 ;\",\n    \"?film2 wdt:P106 wd:Q2298257 ;\",\n    \"?film3 wdt:P106 wd:Q63993096 .\",\n    \"FILTER(?director = ?spouse1 || ?director = ?spouse2 || ?director = ?spouse3)\",\n    \"FILTER(?influencer = wd:Q312258)\"\n    ,\n    \"?film1 wdt:P737 wd:Q312258 .\",\n    \"?film2 wdt:P737 wd:Q312258 .\",\n    \"?film3 wdt:P737 wd:Q312258 .\"\n    ,\n    \"VALUES ?resource { ?director }\"\n    ,\n    \"} \"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:3369 ;\",\n    \"   kg:4110 ?director .\",\n    \"?film2 kg:6219 ;\",\n    \"   kg:4110 ?director .\",\n    \"?film3 kg:3500 ;\",\n    \"   kg:4110 ?director .\",\n    \"?film1 kg:2324 ?screenwriter1 .\",\n    \"?film2 kg:2324 ?screenwriter2 .\",\n    \"?film3 kg:2324 ?screenwriter3 .\",\n    \"?director kg:1170 ?spouse .\",\n    \"?spouse kg:1392 ?influencedBy .\",\n    \"?influencedBy kg:3696 kg:7997 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424680.\" , \"# Film\",\n      \"?film wdt:P921 ?distributorProducer.\" , \"# Distributor and Producer\",\n      \"?film wdt:P276* wd:Q57754754.\" , \"# State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\",\n      \"?film wdt:P276* wd:Q11266.\" , \"# State Farm Insurance\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\",\n      \"?film wdt:P276* wd:Q11266.\" , \"# The Vanguard Group\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P272 ?productionCompany .\",\n      \"?movie wdt:P750 ?distributor .\",\n      \"(wd:Q849363/wdt:P127* ?owner) UNION (wd:Q3511946/wdt:P127* ?owner) UNION (wd:Q219635/wdt:P127* ?owner) UNION (wd:Q2062523/wdt:P127* ?owner) UNION (wd:Q7603552/wdt:P127* ?owner) UNION (wd:Q2007336/wdt:P127* ?owner) .\",\n      \"?productionCompany wdt:P272 wd:Q219635 .\",\n      \"?movie wdt:P846 wd:Q505275 .\",\n      \"?movie wdt:P846 wd:Q3511946 .\",\n      \"?movie wdt:P846 wd:Q219635 .\",\n      \"?movie wdt:P846 wd:Q2062523 .\",\n      \"?movie wdt:P846 wd:Q7603552 .\",\n      \"?movie wdt:P846 wd:Q2007336 .\",\n      \"VALUES ?movie { wd:Q219635 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributorOrProducer kg:7738 ?grandCanyon .\",\n    \"?grandCanyon a kg:1995 ;\",\n    \"(kg:1382 | kg:1353 | kg:8430 | kg:8277 | kg:4633 | kg:1995) kg:1337 ?distributorOrProducer .\",\n    \"?grandCanyon kg:1337* ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248700 ;\", \"># Q114248700 is a placeholder for the class of films, you may need to use the exact property ID or label.\",\n      \"?film wdt:P577 ?releaseDate .\",\n      \"?film wdt:P161 ?director .\",\n      \"?film wdt:P639 ?producer .\",\n      \"?film wdt:P50 ?writer .\",\n      \"?film wdt:P161 \\\"Randolph Scott\\\"@en ;\",\n      \"?film wdt:P639 \\\"Miriam Hopkins\\\"@en ;\",\n      \"?film wdt:P577 \\\"Humphrey Bogart\\\"@en ;\",\n      \"?film wdt:P2860 \\\"Robert Buckner\\\"@en ;\",\n      \"?film wdt:P161 ?actor .\",\n      \"?film wdt:P161 \\\"Errol Flynn\\\"@en ;\",\n      \"?film wdt:P161 \\\"Paul Fix\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q4420093 ;\", \"# instance of film\",\n    \"   wdt:P57 wd:Q295984 ;\" , \"# directed by Randolph Scott\",\n    \"   wdt:P58 wd:Q11424 .\" ,\"# written by Robert Buckner\",\n    \"?film wdt:P162 ?producer .\", \"# produced by ?producer\",\n    \"?film wdt:P161 wd:Q93188 ;\" , \"# starred Errol Flynn\",\n    \"   wdt:P161 wd:Q744357 .\" ,\"# and Paul Fix\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:6535 ?director .\",\n    \"?film kg:9349 ?producer .\",\n    \"?film kg:0929 ?screenwriter .\",\n    \"?film kg:3674 ?actor1 .\",\n    \"?film kg:3674 ?actor2 .\",\n    \"FILTER ( ?actor1 = kg:7369 && ?actor2 = kg:0826 )\",\n    \"?director kg:5388 \\\"Randolph Scott\\\" .\",\n    \"?producer kg:8971 \\\"Robert Buckner\\\" .\",\n    \"?screenwriter kg:5701 \\\"Miriam Hopkins\\\" .\",\n    \"?screenwriter kg:5701 \\\"Humphrey Bogart\\\" .\",\n    \"?screenwriter kg:5701 \\\"Randolph Scott\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q2790631 wdt:P4656 ?resource . }\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?occupation WHERE { wd:Q103013 wdt:P106 ?occupation. }\"\n    \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?occupation WHERE { kg:0153 kg:9006 ?occupation . FILTER(?occupation = kg:7856) }\"]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2168798 ; wdt:P1477 ?name . FILTER (STR(?name) = \\\"Bob Dylan\\\") }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE { wd:Q392 wdt:P106 wd:Q36834 . }\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource kg:4423 kg:3294 .\",\n\t\t    \t\t\"?resource kg:1468 kg:1333 .\"\n\t\t    \t]\n}"}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?entity wdt:P1433 ?resource . }\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { ?entity wdt:P112 ?resource . ?resource wdt:P31 wd:Q5 }\"\n \t]\n}"}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:9741 kg:4808 ?resource . }\"\n \t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q2106974 wdt:P50 wd:Q3802 ; wdt:P1436 ?resource . }\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . }\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:0149 kg:9165 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE { \",\n    \"  wd:Q16597348 wdt:P1735 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n \t\t\t \t    \t\t\t\t\t\t    \"query\": [\n      \"SELECT ?resource WHERE { wd:Q1042294 wdt:P155 ?resource . FILTER(?resource = wd:Q721) }\"\n   ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?x WHERE { kg:4214 kg:1847 ?x . ?x a <http://schema.org/CreativeWork> }\"\n \t]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1675940 p:P1362 ?statement . ?statement ps:P1362 wd:Q83620 . }\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{\n  \"query\" : [\n    \"SELECT ?x WHERE { wd:Q168 wdt:P155 ?x . ?x wdt:P171 wd:Q131593 }\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?x WHERE { kg:2378 kg:6156 ?x . FILTER(?x = kg:6999) }\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE { wd:Q21946 wdt:P22 ?parent . }\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . }\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?subject kg:is_child_of ?object.\"\n\t\t    \t\t]\n\t\t    \t}\n\t\t    \t\t\t\t\t       \t\t"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47529 || ?resource wdt:P31 wd:Q571 ; wdt:P50 wd:Q42680 . }\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q42 wdt:P31 wd:Q571 . wd:Q42 wdt:P58 ?work }\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n \t    \t\t\"query\": [\n\t      \t\t\t\"SELECT ?resource WHERE { kg:9298 kg:9846 ?resource . }\"\n\t    \t\t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wds: <http://www.wikidata.org/entity/statement/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wikibase: <http://wikiba.se/ontology#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q7856 wdt:P108 ?resource.\\n}\\n\"]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q79070 wdt:P108 ?resource . FILTER(?resource = wd:Q40) }\"\n     \t\t\t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?x WHERE { kg:2612 kg:3977 ?x . ?x rdf:type kg:4018 }\"\n \t  \t \t\t]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q6847529 wdt:P50 ?resource.\\n}\"]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource . FILTER(?resource = wd:Q892) }\"\n     \t\t ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:1529 <http://purl.org/dc/elements/1.1/contributor> ?resource . FILTER(?resource = kg:7293) }\"\n \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?executiveProducer WHERE { wd:Q24986753 wdt:P108 ?executiveProducer . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?executiveProducer WHERE { wd:Q72276 wdt:P1431 ?executiveProducer . FILTER(?executiveProducer = wd:Q2680) }\"\n    \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:8042 kg:0403 ?resource . FILTER(?resource = kg:5286) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1234567 rdfs:label ?label FILTER (LANG(?label) = 'en') . ?work wdt:P50 ?composer . ?work wdt:P921 wd:Q1234567 . ?composer rdfs:label ?composerLabel FILTER (LANG(?composerLabel) = 'en') . }\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?item wdt:P2515 wd:Q2733930; wdt:P106 wd:Q36834. }\"\n\t\t \t\t]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3119 kg:5566 .\",\n \t\t\"?x kg:4634 kg:7537 .\"\n \t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1596870 wdt:P345 ?resource . }\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?y wd:Q158069}\",\n     \t\t\"?x wdt:P344 wd:Q158069.\",\n     \t\t\"?x wdt:P106 wd:Q69423232.\"\n     \t\t\t]\n     \t\t}\n    \t\t\t\t\t\t      \t\t\t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?x kg:6736 kg:5056 .\",\n\t\t    \t\t\t\"?x kg:6247 kg:6247 .\"\n\t\t    \t\t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?employee WHERE { wd:Q169475 wdt:P3208 ?employee . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q2607 wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q76845 }\"\n    \t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:1391 kg:1230 ?spouse . ?spouse kg:4689 kg:5225 }\"\n \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { wd:Q2081647 wdt:P31 wd:Q593994 . wd:Q2081647 wdt:P178 ?composer }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?composer . ?composer wdt:P106 wd:Q36834 }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?producer WHERE { kg:8795 kg:7933 ?producer . FILTER (STRSTARTS(STR(?producer), STR(kg:9507))) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE {\"\n     \t\t,\"?work wdt:P31 wd:Q2498706 ;\"\n     \t, \"wdt:P177 ?composer .\"\n     \t, \"?composer wdt:P31 wd:Q2528636 .\"\n     \t, \"?work rdfs:label ?titleLabel .\"\n     \t, \"FILTER(LANG(?titleLabel) = 'es' && STR(?titleLabel) = 'Al Compás de tu Mentira')\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{?item wdt:P86 wd:Q577126. ?item wdt:P106 wd:Q69423232.}\"\n     \t\t ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x kg:7262 kg:8297}\",\n\t\t    \t\t\"?x kg:0135 kg:4092\"\n\t\t    \t\t ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource\\nWHERE {\\n  ?work wdt:P31 wd:Q2498926 ; # Instance of work\\n         wdt:P50 ?composerResource . # Creator (composer)\\n  ?composerResource wdt:P106 wd:Q725348 . # Occupation is cinematographer\\n}\\nLIMIT 1\"]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n    \t\t\"?composer wdt:P106 wd:Q222344 ; wdt:P86 wd:Q76582 .\"\n    \t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t        \t\t\"?res kg:0600 kg:9247 .\",\n\t\t    \t\t\t\"?res kg:0600 kg:1572 .\",\n\t\t    \t\t\t\"?res kg:0600 ?occupation .\",\n\t\t    \t\t\t\"?res kg:0600 kg:2423 .\"\n\t\t    \t\t]\n\t\t    \t}\n\t\t    \t\t\t \t\t\t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1965083 wdt:P179 ?sequel .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?sequel wdt:P155 wd:Q4348691 ; wdt:P750 wd:Q2283 .\"\n\t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:7041 kg:2249 .\",\n      \t\t\t\"?x kg:6198 kg:5718\"\n      \t  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?sequel WHERE { ?sequel wdt:P179 wd:Q208546 ; wdt:P136 wd:Q211915 . ?sequel wdt:P161 wd:Q180166 }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?sequel wdt:P155 wd:Q2085; wdt:P161 wd:Q967797. ?sequel}\"\n    \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:0055 kg:3519 .\",\n  \t\t\t\t \"?x kg:follows kg:3268\"\n  \t    ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t,\"?founder p:P31/ps:P31 wd:Q5 .\" ,\"\\n\"\n \t\t  \t\t,\"?founder wdt:P102 wd:Q648799 .\" ,\"\\n\"\n \t\t  \t\t,\"?parentChildRelationship wdt:P40 ?founder .\" ,\"\\n\"\n \t\t  \t\t,\"?parentChildRelationship wdt:P25 wd:Q23983159 .\"\n \t\t  \t\t,\"\\n\" ,\"\\t}\"\n \t\t \t\t ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?x ?y wd:Q81950264 .\",\n     \t \"?x wdt:P112 ?z .\",\n     \t \"?z wdt:P40 wd:Q15070044 .\"\n   ]\n} "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?x ?y kg:9700 .\",\n \t\t\"?x kg:9585 kg:5784 .\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q502579 wdt:P31/wdt:P279* wd:Q5 . # Instance of human or subclass of human (Hitler's sibling)\\n  ?resource wdt:P31 wd:Q486586 . # Instance of Uniqa Insurance Group\\n  ?resource wdt:P102 wd:Q502579 . # Inception organization is Hitler's sibling\\n}\\n\"]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q352 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q1022419 }\"\n    \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:1490 kg:5089 ?sibling . ?sibling kg:9612 kg:4923 }\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?distributor WHERE {\\n  ?game wdt:P31 wd:Q28497 ;\\n        wdt:P360 wd:Q50150575 .\\n  ?game wdt:P123 ?distributor.\\n  ?employer wdt:P108 wd:Q110467 ;\\n            wdt:P108 ?distributor.\\n}\\n\"]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?employer WHERE { \"\n     \t\t,\"wd:Q6078 wdt:P108 ?employer .\"\n     \t\t,\"wd:Q42310881 wdt:P750 ?employer .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:0439 kg:5087 ?resource . ?resource kg:7511 kg:0138 }\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE { wd:Q27916435 wdt:P108 ?employer . }\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?employer WHERE { wd:Q15070044 wdt:P40 ?parent . ?parent wdt:P108 wd:Q103941992 }\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n \t\"query\" : [\n \t\t\"?employer ?property kg:9143 .\",\n \t\t\"kg:3910 kg:6383 ?parent .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?costumeDesigner wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?costumeDesigner wdt:P26 ?spouse .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?spouse wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?spouse wdt:P39 wd:Q47084 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q47084 wdt:P361 wd:Q24116967 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?costumeDesigner wdt:P25 ?sibling . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P39 wd:Q24116967 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?spouse = ?sibling)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?p ?o}\",\n     \t\t\"WHERE {\",\n     \t\t\"?x wdt:P106 wd:Q1323191 .\", \"># subject is a costume designer\"\n     \t\t,\"?x ?p ?o .\",\n     \t\t\"?o wdt:P26 ?spouse .\", \"># spouse of the costume designer\"\n     \t\t,\"?spouse wdt:P3373 wd:Q730300 .\", \"># sibling is Pierre Van Dormael\"\n     \t\t,\n     \t\t\"}\"\n     \t\t\t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?x kg:5911 ?y .\", \"># costume designer's spouse is ?y (some resource)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?y kg:6311 kg:2251 .\" ]} "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { ?entity p:P31/ps:P31 wd:Q5 .\"\n \t\t      \t\t,\"?entity wdt:P26 ?spouse .\"\n \t\t      \t\t,\"?spouse p:P31/ps:P31 wd:Q5 .\"\n \t\t      \t\t,\"?spouse wdt:P856 ?website .\"\n \t\t      \t\t,\"FILTER(CONTAINS(LCASE(?website), \\\"clubjenna\\\")) .\"\n \t\t      \t\t,\"?entity wdt:P106 wd:Q73976 .\"\n \t\t      \t \t,\"}\"]\n} "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\"\n  \t\t,\"?costumeDesigner wdt:P26 ?spouse .\"\n  \t\t,\"?spouse wdt:P112 wd:Q1102919 .\"\n  \t\t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x ?y <http://example/kg:0326>\"\n      \t  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q54 ; wdt:P57 wd:Q98052 . }\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { wd:Q2643 wdt:P57 ?resource . } UNION { wd:Q2643 wdt:P58 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:6663 kg:6370 ?resource . } UNION { kg:6663 kg:8835 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?resource WHERE {\\nwd:Q123456789 wd:P50/wd:Q123456789 ; wikibase:wikiPageWikiLink ?resource .\\n}\", \"@vars\", \"nil\"]\n} "}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q24907 wdt:P58 ?resource . }\",\n \t\t  \t\t\"UNION\",\n \t  \t\t\"SELECT ?resource WHERE { wd:Q24907 wdt:P1040 ?resource . }\"\n \t\t \t\t ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { kg:3395 <http://example.org/wroteAndEdited> ?resource . }\"\n \t\t \t\t ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?parent WHERE { wd:Q26915473 wdt:P102 ?organisation . ?organisation wdt:P488 ?parent . ?parent wdk:Q590 . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?parent wdt:P106 wd:Q1323191; wdt:P27 wd:Q34. wd:Q4990261 wdt:P40 ?parent. }\"\n     \t\t\t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?X a foaf:Person}\",\n      \t\t\"?X kg:0967/kg:1782/kg:5528 ?Y\",\n      \t\t\"?X kg:0457/kg:4304 ?Z\",\n      \t\t\"?X kg:4923/kg:8006/nadjaWeiss ?W\"\n      \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$(wd:Q123456789) WAS $label$(wd:Q987654321) SPOUSE OF ?person . ?person P31* wd:Q5 . ?person P27 wd:Q167 . ?person P106 wd:Q725283 . ?person P26 ?spouse . ?spouse wdt:P106 wd:Q725283 . ?spouse wdt:P27 wd:Q167 . ?spouse wdt:P26 wd:Q123456789 . SERVICE wikibase:label { bd:serviceParam wikibase:language \" ] }\n \t\t\t\t\t\t\t\t\t  \t\t"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q222344 . ?spouse wdt:P27 wd:Q17 }\"\n     \t\t\t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{\n \t\t\"query\": [\n\t\t\t\"?person ?p ?o .\",\n\t\t\t\"?person kg:7045 kg:3305 .\", \"><!-- spouse relation to Takenori Sentō (kg:3305) -->  <!-- person is the subject, o is the object, p is the predicate which could be occupation or country of citizenship in this case. -->  <!-- ?person represents the entity we are querying about, i.e., the spouse of Takenori Sentō. -->  <!-- kg:7045 represents the property 'spouse'. -->  <!-- kg:3305 represents Takenori Sentō. -->  <!-- The next line checks if the occupation is a cinematographer (kg:1905). -->  <!-- The final line checks if the country of citizenship is Japan (kg:1186). -->  <!-- ?o will be bound to kg:1905 or kg:1186 based on the property (?p) being checked. -->  <!-- We only want resources, so we filter out any bindings that are not entities. -->  <!-- The FILTER NOT EXISTS clause ensures that only resources (not literals) are returned. -->  <!-- ?o != ?person to avoid self-reference in the query. -->  <!-- This SPARQL query will return all resources (?person) who are the spouse of Takenori Sentō, a Japanese cinematographer. -->  <!-- The WHERE block contains the main logic of the query. -->  <!-- The FILTER NOT EXISTS clause ensures that only entities (resources) and not literals or blank nodes are returned. -->  <!-- This is a concise way to express the query requirements in SPARQL using the provided knowledge graph schema. -->  <!-- ?p could be kg:8953 (occupation) or kg:3399 (country of citizenship), but we only care about resources here, not specific properties. -->  <!-- The query structure ensures that it returns entities (?person) who are both a spouse of Takenori Sentō and meet the occupation/citizenship criteria. -->  <!-- This is an efficient way to filter out non-resource bindings and return only relevant entities based on the given schema. -->  <!-- ?o != ?person prevents returning the same entity as both subject and object in the query, ensuring we get distinct results for each property check. -->  <!-- The overall structure ensures that the query returns only resources (entities) who are the spouse of Takenori Sentō and meet the occupation/citizenship criteria. -->  <!-- This is a compact representation of the requirements using SPARQL syntax and the provided knowledge graph schema. -->  <!-- ?p could be kg:8953 or kg:3399, but we only care about resources here, not specific properties. -->  <!-- The query ensures that it returns entities who are both a spouse of Takenori Sentō and meet the occupation/citizenship criteria without returning literals or blank nodes. -->  <!-- This is an efficient way to filter out non-resource bindings and return only relevant entities based on the given schema. -->  <!-- ?o != ?person prevents self-reference, ensuring distinct results for each property check. -->  <!-- The overall structure ensures that the query returns only resources who are the spouse of Takenori Sentō and meet the occupation/citizenship criteria. -->  <!-- This is a compact representation of the requirements using SPARQL syntax and the provided knowledge graph schema. -->  <!-- ?p could be kg:8953 or kg:3399, but we only care about resources here, not specific properties. -->  <!-- The query ensures that it returns entities who are both a spouse of Takenori Sentō and meet the occupation/citizenship criteria without returning literals or blank nodes. -->  <!-- This is an efficient way to filter out non-resource bindings and return only relevant entities based on the given schema. -->  <!-- ?o != ?person prevents self-reference, ensuring distinct results for each property check. -->  <!-- The overall structure ensures that the query returns only resources who are the spouse of Takenori Sentō and meet the occupation/citizenship criteria. -->  <!-- This is a compact representation of the requirements using SPARQL syntax and the provided knowledge graph schema. -->  <!-- ?p could be kg:8953 or kg:3399, but we only care about resources here, not specific properties. -->  <!-- The query ensures that it returns entities who are both a spouse of Takenori Sentō and meet the occupation/citizenship criteria without returning literals or blank nodes. -->  <!-- This is an efficient way to filter out non-resource bindings and return only relevant entities based on the given schema. -->  <!-- ?o != ?person prevents self-reference, ensuring distinct results for each property check. -->  <!-- The overall structure ensures that the query returns only resources who are the spouse of Takenori Sentō and meet"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE { wd:Q28604 wdt:P108 ?employer . }\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?employer wdt:P108 ?director .\",\n     \t \"?employer wdt:P112 wd:Q16 .\",\n     \t \"?director wdt:P106 wd:Q2526255 .\",\n     \t \"SERVICE wikibase:<http://wikiba.se/ontology#label> { bd:serviceParam wikibase:language \\\"en\\\". }\"\n     \t]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:6057 kg:6946 ?resource . ?resource kg:9422 kg:1505 }\"\n\t\t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q470980 . # instance of musical work\\n?resource wdt:P50 wd:Q68426 . # written by Madonna\\n?resource wdt:P140 wd:Q68426 . # produced by Madonna\\n}\"\n]}\n      \t"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q1744 wdt:P58 ?resource . wd:Q1744 wdt:P162 ?resource }\"\n     \t\t ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:2187 <http://example.org/wroteAndProduced> ?resource . }\"\n \t]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?employerResource WHERE {\\n  ?costumeDesigner wdt:P106 wd:Q73928 ;\\n                    wdt:P108 ?employerResource .\\n  ?employerResource wdt:P31 wd:Q146 ;\\n                     wdt:P169 wd:Q5354667 .\\n}\\nLIMIT 1\"]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?costumeDesigner wdt:P106 wd:Q1323191 .\"\n  \t\t              \t\t,\"?costumeDesigner wdt:P108 ?employer .\"\n  \t\t              \t\t,\"wd:Q1141467 wdt:P272 ?employer .\"\n  \t\t              \t]\n  \t\t\t\t}\n\t\t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t\t"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"?costumeDesigner kg:0372 ?employer.\",\n\t\t\t\"?employer kg:1706/kg:2873* kg:0324.\"\n\t\t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t      \t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?costumeDesigner wdt:P31 wd:Q738489 ; wdt:P361 ?filmWork . ?sibling (wdt:P451|wdt:P40|wdt:P2600) ?costumeDesigner . ?sibling wdt:P26 ?spouse . ?spouse wdt:P22 wd:Q758963 }\"]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?y wd:Q1323191}\",\n     \t\t\"?x wdt:P106 wd:Q1323191.\",\n     \t\t\"?x wdt:P3373 ?sibling.\",\n     \t\t\"?sibling wdt:P26 wd:Q461354.\"\n     \t\t\t]\n} "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{\n \t\"query\" : [\n \t\t\"?costumeDesigner kg:0230 kg:8468 .\",\n \t\t\"?sibling kg:4210 ?costumeDesigner .\",\n \t\t\"?spouse kg:4361 ?sibling .\",\n \t\t\"?spouse owl:sameAs kg:7750\"\n \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parentCompany WHERE {\"\n     \t\t,\"?abt wdt:P31 wd:Q5 .\"\n     \t, \"?abt rdfs:label ?name .\"\n     \t, \"FILTER(LANG(?name) = 'en') .\"\n     \t, \"FILTER(str(?name) = 'Christian Abt') .\"\n     \t, \"?employment wdt:P102 ?parentCompany .\"\n     \t, \"?employment wdt:P3487 ?abt .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?employer . ?employer wdt:P355 ?parentCompany }\"\n    \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?parentCompany WHERE { kg:9566 kg:5028 ?employer . ?employer kg:6897 ?parentCompany }\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q103576982 wdt:P108 ?employer .\", \"># Assuming Claire Doutriaux's Wikidata ID is Q103576982, replace if incorrect or unknown\\n\",\n    \"  ?employer wdt:P414 wd:Q11426 .\", \"># P414 is 'instance of', and Q11426 is 'film distributor'\\n\",\n    \"}\"\n  ]\n}\n \t\t\t\t\t\t      \t   \t\t\t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?employer WHERE {\"\n     \t\t,\"wd:Q1094792 wdt:P108 ?employer.\"\n     \t\t,\"?film wdt:P750 ?employer.\"\n     \t\t,\"?film wdt:P31 wd:Q11424.\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{\n \t\"query\" : [\n \t\t\"?employer ?property ?film\",\n \t\t\"?film kg:1532 ?employer\",\n \t\t\"?employer kg:3252 kg:9229\"\n \t]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q2584976 wdt:P3081 ?resource.\\n}\\n\"]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{?x0 ?p ?x1}\",\n     \t\t\"?x1 wdt:P750 wd:Q1651543.\",\n     \t\t\"?x1 wdt:P272 ?x2.\",\n     \t\t\"?x2 wdt:P112 wd:Q34.\"\n     \t\t\t]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?production_company kg:4695 ?founder.\",\n      \t\t\t\"?movie kg:7740 ?production_company.\",\n      \t\t\t\"?movie owl:sameAs kg:4730\",\n      \t\t\t\"?founder owl:sameAs kg:3184\"\n      \t  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdk:P1406 wd:Q28977 ; wdt:P26 wd:Q188069 . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q6200573 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q34 . ?spouse wdt:P106 wd:Q1323191 }\"\n  \t\t \t\t ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?X kg:9973 kg:6817}\",\n      \t\t\"?X kg:4042 kg:8266\",\n      \t\t\"?X kg:0279 kg:2591\"\n      \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?spouse ?sibling WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?entity wdt:P106 wd:Q834289 ;\", \"># This line is a placeholder for specifying the profession or role, might need adjustment based on available data\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wd:Q175399 wdt:P26 ?spouse .\", \"># Antiochus IV Epiphanes as subject with P26 (spouse) predicate\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wd:Q175399 wdt:P40 ?sibling .\", \"># Antiochus IV Epiphanes as subject with P40 (child) predicate, sibling inference needed\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\", \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?spouse ?sibling WHERE {\"\n     \t\t\t,\"?antiochus wdt:P26 ?spouse.\"\n     \t\t,\"?antiochus wdt:P3373 ?sibling.\"\n     \t\t,\"?antiochus wikibase:directClaim wd:Q3356.\"\n     \t\t,\"?sibling wikibase:directClaim wd:Q2045778.\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?x WHERE { kg:2778 kg:0790 ?x . } UNION { SELECT ?x WHERE { kg:2778 kg:3961 ?x . } } UNION { SELECT ?x WHERE { ?x kg:0790 kg:2778 . } } UNION { SELECT ?x WHERE { ?x kg:3961 kg:2778 . } } FILTER(?x != kg:7882)\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  ?work wdt:P31 wd:Q178295; wdtn:P31/wdt:P279* wd:Q1144156;\",\n    \"        wdt:P177 ?producer; wdt:P178 ?distributor.\",\n    \"  ?country wdt:P31 wd:Q30; wdt:P17 ?work.\",\n    \"  SERVICE wikibase:mwapi {\",\n    \"    bd:serviceParam wikibase:endpoint \\\"www.wikidata.org\\\";\",\n    \"    bd:serviceParam wikibase:api \\\"EntitySearch\\\";\",\n    \"    bd:serviceParam mwapi:srsearch 'The Magic Flute instanceof:Q178295';\",\n    \"    ?work rdfs:label ?title.\",\n    \"  }\",\n    \"  FILTER(LANG(?title) = \\\"en\\\").\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"?x\"\n     \t]\n \t \t} "}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 kg:6420 kg:9298}\",\n      \t\t\"{?x1 kg:1560 ?x0}\",\n      \t\t\"{?x2 kg:7034 kg:9298}\",\n      \t\t\"{?x3 kg:3967 ?x2}\"\n      \t  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P31 wd:Q5 .\", \"># person instance of human\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P102 wd:Q748699 .\", \"># organization is World Wide Fund for Nature\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P106 wd:Q82956 .\", \"># occupation is founder\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P3373 wd:Q166580 .\", \"># sibling of Prince Aschwin of Lippe-Biesterfeld\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?founder WHERE {\"\n  \t\t\t,\"?organization wdt:P112 ?founder.\"\n  \t\t\t,\"?founder wdt:P3373 wd:Q2336212.\"\n  \t\t\t,\"?founder wdt:P27 wd:Q29999.\"\n  \t\t\t,\"?organization wdt:P279* wd:Q117892. \"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{\n \t\"query\" : [\n  \t\t\"?x kg:6658 kg:9737 .\",\n  \t\t\"?x kg:2036 kg:5121 .\"\n  \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P31 wd:Q5 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P106 wd:Q28389 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P1439 wd:Q73797 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P3373 ?person .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P1406 wd:Q24994 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P31/wdt:P279* wd:Q186526 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?person = wd:Q24994)\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n   \t\t\t,\"wd:Q60414 wdt:P3373 ?sibling .\"\n   \t\t\t,\"?sibling wdt:P27 wd:Q183 .\"\n   \t\t\t,\"?sibling wdt:P108 wd:Q15789 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE { kg:8212 kg:3317 ?sibling . ?sibling kg:0766 kg:5041 . ?sibling kg:5620 kg:4759 }\"\n\t\t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label ?title. FILTER (LANG(?title) = 'en'). FILTER (?title = \\\"Drums of Love\\\"@en). ?film wdt:P987 ?producer. ?producer wdt:P172 wd:Q65066. }\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q3715556 wdt:P750 ?distributor .\"\n     \t\t,\"wd:Q3715556 wdt:P272 ?producer .\"\n     \t\t, \"?producer wdt:P112 wd:Q882 .\"\n     \t\t,\"?resource wdt:P31 wd:Q4167897 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?producer WHERE { kg:3141 kg:7691 ?distributor . ?distributor kg:4650 kg:0996 . ?distributor kg:4440 ?producer }\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work wdt:P50 wd:Q218436 ;\", \">// Written by (P50) to Vince Gilligan (Q218436)\"\n   \t,\"  ?work wdt:P997 wd:Q81166 .\", \">// Produced by (P997) to Bob Weinstein (Q81166)\"\n   \t,\"  ?resource schema:sameAs ?work .\",\n    \"}\"\n  ]\n  }\n  \t\t\t\t\t  \t \t\t\t\t"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P58 wd:Q4500; wdt:P162 wd:Q888311.}\"\n     \t\t ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\"@prefix : {PREFIXES}. SELECT ?x WHERE {{kg:3078 kg:8652 ?x} . {?x kg:4870 kg:6231}}\"]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?company wdt:P108 ?founder .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?founder wdt:P3373 wd:Q49652 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?richelieu wdt:P3373 wd:Q49652 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?richelieu wdt:P321 ?sibling .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?founder wdt:P361 ?sibling .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource ?p ?company .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?p != wikibase:Lexeme)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?company wdt:P112 ?founder .\"\n    , \"OPTIONAL { wd:Q1079409 wdt:P3373 ?founder }\"\n    , \"?founder wdt:P27 wd:Q142 .\"\n    , \"?company wdt:P31 wd:Q4830453 .\"\n    ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:6937 kg:4705 ?resource . ?resource kg:4948/kg:1440/kg:8053/kg:0200 kg:5212 }\"\n \t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q528169 wdt:P307 ?resource.\\n}\\nUNION\\n{\\nwd:Q528169 wdt:P498 ?resource.\\n}\"]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer ?writer WHERE {\"\n     \t\t,\"wd:Q44477 wdt:P162 ?producer .\"\n     \t\t,\"wd:Q44477 wdt:P58 ?writer .\"\n     \t\t,\"?producer wikibase:SameAs wd:Q320211 .\"\n     \t\t,\"?writer wikibase:SameAs wd:Q2831 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix : {PREFIXES}.\\nSELECT ?x WHERE {\\n kg:1959 kg:5176 kg:3712. \\n kg:6258 kg:5176 kg:3712. \\nkg:1959 kg:3301 kg:3712.\\n FILTER(?x != kg:6258 && ?x != kg:1959).\\n}\"]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P3967 wd:Q21188504 . ?resource wdt:P57 wd:Q21188504 . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n   \t\t\t,\"?resource wdt:P1431 wd:Q8877 .\"\n   \t\t\t,\"?resource wdt:P58 wd:Q75079 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x0 <http://example.org/was_executive_produced_by> <http://data.example/kg:8361> .\",\n  \t\t                \"<http://data.example/kg:8361> <http://example.org/has_person> <http://data.example/kg:7184> .\",\n  \t\t                \"?x0 <http://example.org/was_screenwritten_by> <http://data.example/kg:4377> .\",\n  \t\t                \"<http://data.example/kg:4377> <http://example.org/has_person> <http://data.example/kg:6774> .\"\n  \t               ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q475628; wdt:P17 wd:Q33; wdk:P106/wdt:P279* wd:Q11666. }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q1651543 wdt:P750 ?resource . ?resource wdt:P112 wd:Q34 } UNION SELECT ?resource WHERE { wd:Q1651543 wdt:P272 ?resource . ?resource wdt:P112 wd:Q34 }}\"\n    \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:8573 kg:8167}\",\n      \t\t\"?x kg:8602 kg:9238\",\n      \t\t\"?x kg:2311 kg:9238\"\n      \t]\n      \t}\n    \t\t\t \t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"{ wd:Q106795 p:P32 P32/wdt:P1480 wd:Q106796 . } UNION\",\n \t\t  \t\t\"{ wd:Q106795 p:P26 P26/wdt:P1480 wd:Q106796 . } UNION\",\n \t\t  \t\t\"{ wd:Q106795 p:P35 P35/wdt:P1480 wd:Q106796 . }\",\n \t\t  \t\t\"?statement ps:P1480 ?resource. \",\n \t  \t\t\"}\"\n \t\t  ]\n}\n  \t\t\t\t\t\t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t  \t\t\"WHERE {\",\n \t  \t\t\"  wd:Q443473 wdt:P26 ?spouse .\",\n \t  \t\t\"  ?spouse wdt:P26 wd:Q210535 .\",\n \t  \t\t\"  wd:Q443473 wdt:P40 ?child .\",\n \t  \t\t\"  ?child wdt:P26 wd:Q210535 .\",\n \t  \t\t\"  wd:Q443473 wdt:P3373 ?sibling .\",\n \t  \t\t\"  ?sibling wdt:P26 wd:Q210535 .\",\n \t  \t\t\"  { wd:Q443473 wdt:P355 ?parent . } UNION { wd:Q443473 wdt:P22 ?parent }\",\n \t  \t\t\"  ?parent wdt:P26 wd:Q210535 .\",\n \t  \t\t\"  VALUES ?resource {?spouse ?child ?sibling ?parent}\",\n \t  \t\t\"}\"\n \t]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?x0 WHERE { kg:7348 kg:8188 ?x1 . ?x1 kg:2887/kg:3982/kg:8188* kg:2542 }\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q190 . ?resource wdg:P106 wd:Q184999 . ?resource wdt:P26 wd:Q250299 . }\"\n \t\t \t  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE { wd:Q233128 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 . ?spouse wdt:P27 wd:Q16 . ?spouse wdt:P106 wd:Q1323191 }\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:4504 kg:6728 ?spouse . ?spouse kg:2053 kg:3623 . ?spouse kg:5779 kg:3526 . ?spouse kg:3791 kg:0382 }\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?sequel WHERE {\"\n     \t\t,\"?sequel wdt:P31 wd:Q59092; \"\n     \t,\"wdt:P179 wd:Q648896;\"\n     \t,\"wdt:P469 wd:Q25969.}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?sequel WHERE {\"\n \t\t  \t\t,\"?work wdt:P31 wd:Q5318829 .\"\n \t\t  \t\t,\"?work wdt:P179 wd:Q115945 .\"\n \t\t  \t\t,\"?work wdt:P155 ?previousWork .\"\n \t\t  \t\t,\"?previousWork rdfs:label ?previousLabel .\"\n \t\t  \t\t,\"FILTER (LANG(?previousLabel) = 'es') .\"\n \t\t  \t\t,\"?previousLabel bif:contains '\\\"Entre el amor y el odio\\\"' .\"\n \t\t  \t\t,\"?work wdt:P750 wd:Q47099 .\"\n \t\t  \t\t,\"?work wdt:P162 wd:Q47099 .\"\n \t\t  \t\t,\"?sequel wdt:P31 ?work .\"\n \t  \t\t,\"}\" ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\t\"?sequel kg:3680 <http://example/kg:8932> .\",\n \t\t\t\"?sequel kg:5175 <http://example/kg:8932> .\",\n \t\t\t\"?sequel ?followsProperty ?previousMovie .\",\n \t\t\t\"?previousMovie a kg:5106 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?child ?parent\\nWHERE {\\n  ?acquisition p:P17 P17/wdt:P2063/wdt:P17 wd:Q49856 ;\\n              p:P17/pqv:P585+ ?date ;\\n              p:P17/psv:P17 ?child ;\\n              p:P17/pq:P17 wd:Q20316 .\\n  ?acquisition wdt:P17 ?parent .\\n  FILTER(?parent = wd:Q49856)\\n}\\nLIMIT 1\"]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?child ?parent WHERE {\"\n     \t\t,\"?child wdt:P127 wd:Q467752 .\"\n     \t\t,\"?parent wdt:P355 ?child .\"\n     \t\t,\"OPTIONAL {?child wdt:P31 wd:Q4830453 }\"\n     \t\t,\"OPTIONAL {?parent wdt:P31 wd:Q4830453 }\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{\n \t\t\"query\": [\n\t\t\t\"?child kg:9692 kg:3004 .\",\n\t\t\t\"?parent kg:9692 kg:3004 .\",\n\t\t\t\"?company kg:1042 ?parent .\",\n\t\t\t\"?company kg:5526 ?child .\",\n\t\t\t\"?company kg:7651 ?parent .\",\n\t\t\t\"?company kg:2336 kg:2336 .\"\n\t\t]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q1698754 wdt:P31 wd:Q33025 ?resource.\\n}\\n\"]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x ?y wd:Q524849 . \",\n\t\t \"?x wdt:P750|wdt:P272 ?z .\",\n\t\t \"{?z wdt:P112/wdt:P136* wd:Q882}\",\n\t\t \"UNION\",\n\t\t \"{?z wdt:P112/wdt:P136* wd:Q104109}\"\n\t ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x0 <http://example.org/founded_by> ?x1}\",\n\t\t    \t\t\"?x0 <http://example.org/distributed_by> <kg:7074>\",\n\t\t    \t\t\"?x1 <http://example.org/production_company> <kg:4917>\",\n\t\t    \t\t\"?x1 <http://example.org/production_company> <kg:0987>\"\n\t\t \t\t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { \",\n    \"  ?actor wdt:P31 wd:Q5 ;\", \"# Assuming Q5 is Human, adjust if necessary\",\n    \"         wdt:P488 ?influencee .\", \"# P488 is influenced by\",\n    \"  ?influencee rdfs:label \\\"Pearl Jam\\\"@en.\",\n    \"  ?sibling wdt:P361|wdt:P452 ?artist.\", \"# P361 or P452 for sibling relation, adjust if necessary\",\n    \"  ?artist rdfs:label \\\"Astrid Young\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?person wdt:P106 wd:Q33999 .\", \">// ?person is an actor\",\n \t\t  \t\t\"?influencee wdt:P737 ?person .\", \">// Pearl Jam was influenced by the actor\",\n \t\t  \t\t\"?influencee wdt:P3373 ?sibling .\", \">// The influencee (Pearl Jam) has a sibling\",\n \t\t  \t\t\"?sibling rdfs:label \\\"Astrid Young\\\"@en.\", \">// The sibling's label is Astrid Young\"\n \t\t  \t\t,\"?person ?resource []\" ,\"\\n}\"\n \t\t \t\t ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?actor kg:0855 ?pearljam.\",\n      \t\t\"?pearljam kg:1604 kg:1604.\",\n      \t\t\"?sibling kg:5525 kg:0994.\",\n      \t\t\"?actor kg:6618 ?occupation.\",\n      \t\t\"?occupation kg:8238 'actor'.\"\n      \t  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q164537 .\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q119666 .\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q119667 .\",\n      \"?resource wdt:P31 wd:Q571 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource\",\n     \t\t\"WHERE {\",\n     \t\t\"VALUES (?person ?property) {\",\n     \t\t\"( wd:Q1687239 wdt:P58 ) ( wd:Q1687239 wdt:P1040 ) \",\n     \t\t\"( wd:Q35979475 wdt:P58 ) ( wd:Q35979475 wdt:P1040 )\",\n     \t\t\"( wd:Q562108 wdt:P58 ) ( wd:Q562108 wdt:P1040 ) }\",\n     \t\t\"?person ?property ?resource .}\",\n     \t\t\"GROUP BY ?resource\"\n     \t\t\t]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource <http://example.com/was_written_and_edited_by> <http://data.example/kg9960>. \",\n \t\t  \t\t\"?resource <http://example.com/was_written_and_edited_by> <http://data.example/kg1913>. \",\n \t\t  \t\t\"?resource <http://example.com/was_written_and_edited_by> <http://data.example/kg7552>. \",\n \t  \t\t\"}\"\n \t\t  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?costumeDesigner WHERE { \"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P31 wd:Q5 . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person rdfs:label \\\"Miguel Albaladejo\\\"@es. \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P32 wd:Q908276 . \" ,\"\\n\" ,\"\\t\" ,\"\\t\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P451 ?person . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P100 wd:Q100301 . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P729 ?costumeDesigner . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P50 wd:Q100301 . \" ,\"\\n\" ,\"\\t\" ,\"\\t\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"} \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?costumeDesigner wdt:P31 wd:Q3083718 ; \"\n     \t\t] }\n    \t\t \t\t \t\t\t\t \t\t\t \t"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{\n \t\t\"query\": [\n\t\t\t\"?costumeDesigner ?p1 kg:4627.\",\n\t\t\t\"kg:3335 kg:3009 ?sibling.\",\n\t\t\t\"?sibling kg:3394 kg:9609.\",\n\t\t\t\"?sibling ?p2 kg:1890 kg:8565.\"\n\t\t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE {\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P31 wd:Q5 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P21 wd:Q6581072 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P26 wd:Q94177 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q94177 wdt:P361 ?composer .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P1476 ?name .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(LANG(?name) = 'sv')\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?composer wdt:P106 wd:Q36834 .\", \"># composer occupation is composer\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P21 wd:Q6581072 .\", \"># composer sex or gender is female\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P26 wd:Q96203723 .\", \"# composer spouse is Mattias Järvinen Palme\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q96203723 wdt:P27 wd:Q34 .\" ,\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"?composer kg:8255 kg:9200 .\",\n\t\t\t\"?composer kg:1005 kg:8240 .\",\n\t\t\t\"?composer kg:1877 kg:1240 .\"\n\t\t]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q123456789 p:P162 wd:Q987654323 . \"\n     \t, \"?statement ps:P162 wd:Q123456789 . \"\n     \t, \"?statement pq:P50 wd:Q1 (wd:Q2|wd:Q3) wd:Q4 . \"\n     \t, \"VALUES (wd:Q1 wd:Q2 wd:Q3 wd:Q4) {\"\n     \t\t,\"(wd:Q987654321 wd:Q987654322 wd:Q987654323 wd:Q987654324)\"\n     \t, \"}\"\n     \t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\"\n \t\t,\"wd:Q20729551 wdt:P162 ?resource .\"\n \t\t,\"?resource (wdt:P1040|wdt:P272) wd:Q1687239 .\"\n \t\t,\"?resource (wdt:P162|wdt:P1040) wd:Q35979475 .\"\n \t\t,\"?resource (wdt:P162|wdt:P1040) wd:Q562108 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x0 <http://example.org/producer> ?x1 . ?x0 <http://example.org/film_editor> ?x2 . ?x0 <http://example.org/film_editor> ?x3 . ?x0 <http://example.org/film_editor> ?x4 .}\",\n \t  \t    \t\t\"?x0 = kg:3795\",\n \t  \t    \t\t\"?x1 = kg:1205\",\n \t  \t    \t\t\"?x2 = kg:2710\",\n \t  \t    \t\t\"?x3 = kg:3132\",\n \t  \t    \t\t\"?x4 = kg:4688\"\n \t \t\t \t\t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?siblingSpouse WHERE {\"\n     \t\t,\"wd:Q100869 wdt:P26 ?siblingSpouse .\" ]\n     \t\t} "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?siblingSpouse WHERE {\"\n     \t\t,\"wd:Q296446 wdt:P26 ?siblingSpouse .\"\n     \t\t,\"?siblingSpouse wdt:P21 wd:Q6581072 .\"\n     \t\t,\"?siblingSpouse wdt:P3373 wd:Q3340 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x a kg:9937 .\",\n\t\t\t\"?x kg:0360 ?y .\",\n\t\t\t\"?y kg:3250 ?z .\",\n\t\t\t\"?z kg:3533 ?w .\",\n\t\t\t\"?x kg:9407 ?v .\"\n\t\t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?author ?editor) {\",\n    \" ( wd:Q12345 wd:Q67890 ) # Replace with actual Wikidata IDs for Jens Jørgen Thorsen\",\n    \" ( wd:Q23456 wd:Q78901 ) # Replace with actual Wikidata IDs for Jørgen Leth\",\n    \" ( wd:Q34567 wd:Q89012 ) # Replace with actual Wikidata IDs for Ole John\",\n    \"}\",\n    \"?resource wdt:P50 ?author .\", \"># Written by\"\n   \t\t\t,\"?resource wdt:P31/wdt:P279* wd:Q44916 .\", \"# Instance of a written work\"\n\t\t\t\t,\"?resource wdt:P123 ?editor .\",\"># Edited by\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource\",\n     \t\t\"WHERE {\",\n     \t\t\"?resource wdt:P58 wd:Q1687239 .\", \">// Jens Jørgen Thorsen is screenwriter of ?resource\",\n     \t\t\"?resource wdt:P58 wd:Q562108 .\", \">// Jørgen Leth is screenwriter of ?resource\",\n     \t\t\"?resource wdt:P1040 wd:Q35979475 .\", \">// Ole John is film editor of ?resource\",\n     \t\t\"}\"\n    \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE {\",\n\t\t    \t\t\"VALUES (?screenwriter ?editor1 ?editor2) {(<http://example/kg:8753> <http://example/kg:6599> <http://example/kg:2763>)}\",\n\t\t    \t\t\"?resource kg:hasScreenwriter ?screenwriter.\",\n\t\t    \t\t\"?resource kg:hasFilmEditor ?editor1.\",\n\t\t    \t\t\"?resource kg:hasFilmEditor ?editor2.\"\n\t\t    \t\t,\"}\"\n \t\t \t  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q19064587 wdt:P50 ?author .\"\n     \t, \"?author rdfs:label ?authorLabel FILTER (LANG(?authorLabel) = 'da') .\"\n     \t, \"wd:Q19064587 wdt:P31 wd:Q577 .\"\n     \t, \"wd:Q19064587 wdt:P123 ?editor .\"\n     \t, \"?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'da') .\"\n     \t, \"FILTER (?author = wd:Q108466 || ?author = wd:Q190597 || ?author = wd:Q23919)\"\n     \t, \"FILTER (?editor = wd:Q108466 || ?editor = wd:Q190597 || ?editor = wd:Q23919)\"\n     \t, \"VALUES ?resource { ?author ?editor }\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\"\n \t\t,\"wd:Q20729551 wdt:P58 ?writer .\"\n \t\t,\"wd:Q20729551 wdt:P1040 ?editor .\"\n \t\t,\"?writer wikibase:occupation wd:Q35979475, wd:Q1687239, wd:Q562108 .\"\n \t\t,\"?editor wikibase:occupation wd:Q35979475, wd:Q1687239, wd:Q562108 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"kg:1771 <http://purl.org/dc/elements/1.1/contributor> ?resource .\",\n \t\t\"?resource <http://example.org/writerOrEditorRole> kg:9402 .\",\n \t\t\"?resource <http://example.org/writerOrEditorRole> kg:5869 .\",\n \t\t\"?resource <http://example.org/writerOrEditorRole> kg:0943 .\",\n \t\t\"}\"]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q1694785 wdt:P31 wd:Q54.\" ]\n     \t}\n     \t\t\t\t\t      \t\t\t\t"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?editor ?producer WHERE {\",\n \t\t\" wd:Q20729551 wdt:P162 ?producer .\",\n \t\t\" wd:Q20729551 wdt:P1040 ?editor .\",\n \t\t\"?producer rdfs:label ?producerLabel FILTER (LANG(?producerLabel) = 'en') .\",\n \t\t\"?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'en') .\",\n \t\t\"FILTER (?editor = wd:Q35979475 || ?editor = wd:Q562108 || ?editor = wd:Q1687239 )\",\n \t\t\"FILTER (?producer = wd:Q35979475 || ?producer = wd:Q562108 || ?producer = wd:Q1687239 )\",\n \t\t\"}\"]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x1 <http://example.org/producer> kg:4972 .\",\n \t\t\t\"?x1 <http://example.org/film_editor> kg:3482 .\",\n \t\t\t\"?x1 <http://example.org/film_editor> kg:2694 .\",\n \t\t\t\"kg:3040 <http://example.org/production_company> ?x1 .\",\n \t\t\"}\"]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ( ?producer1 ?producer2 ?producer3 ) { ( wd:Q76954 wd:Q80215 wd:Q21198 ) }\",\n    \"?work wdt:P178 ?producer1 .\", \"# involved in the production of\"\n   \t, \"?work wdt:P178 ?producer2 .\",\n   \t\"?work wdt:P178 ?producer3 .\",\n    \"OPTIONAL { ?work wdt:P279 wd:Q1460895 }\", \"# executive producer is a subclass of producer\"\n   \t, \"?work wdt:P178 ?executiveProducer .\",\n   \t\"?executiveProducer wdt:P31 wd:Q5 .\", \"# the executive producer is a person\"\n   \t, \"?executiveProducer rdfs:label ?epLabel .\",\n    \"FILTER (LANG(?epLabel) = 'en')\",\n    \"?resource wdt:P31 wd:Q571 .\", \"# instance of work\"\n   \t, \"?work wdt:P921 ?genre .\",\n   \t\"?genre rdfs:label ?genreLabel .\",\n    \"FILTER (LANG(?genreLabel) = 'en' && regex(str(?genreLabel),\\\"sitcom\\\", \\\"i\\\") )\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t,\"?resource wdt:P162 wd:Q365090 .\"\n     \t\t,\"?resource wdt:P162 wd:Q95125 .\"\n     \t\t,\"?resource wdt:P162 wd:Q43994 .\"\n     \t\t,\"?resource wdt:P1431 wd:Q365090 .\"\n     \t\t,\"?resource wdt:P1431 wd:Q95125 .\"\n     \t\t,\"?resource wdt:P1431 wd:Q43994 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"VALUES (?person ?role) {\",\n \t\t\"(<http://example/kg:1258> <http://example/kg:8380>) (\",\n \t\t\"<http://example/kg:1258> <http://example/kg:6586>) (\",\n \t\t\"<http://example/kg:5216> <http://example/kg:8380>) (\",\n \t\t\"<http://example/kg:5216> <http://example/kg:6586>) (\",\n \t\t\"<http://example/kg:9138> <http://example/kg:8380>) (\",\n \t\t\"<http://example/kg:9138> <http://example/kg:6586>) }\",\n \t\t\"?person ?role ?resource .\"\n \t\t,\"}\"]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?siblingSpouseResource\\nWHERE {\\n  wd:Q106987 wdt:P31 wd:Q5 . # Ptolemy X Alexander I is a human\\n  wd:Q106987 wdt:P32 wd:Q106984 . # Ptolemy X Alexander I has sibling Ptolemy IX Lathyros\\n wd:Q106984 wdt:P451 ?siblingSpouseResource . # Ptolemy IX Lathyros is spouse of ?siblingSpouseResource\\n?siblingship wdt:P32 wd:Q106987 . # ?siblingSpouseResource has sibling Ptolemy X Alexander I\\n?siblingSpouseResource wdt:P25 wd:Q106984 . # ?siblingSpouseResource is spouse of Ptolemy IX Lathyros\\n}\\n\"]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?siblingSpouse WHERE {\"\n     \t\t,\"wd:Q3340 wdt:P3373 ?sibling .\"\n     \t\t,\"?sibling wdt:P21 wd:Q6581072 .\"\n     \t\t,\"?sibling wdt:P26 wd:Q3340 .\"\n     \t\t,\"wd:Q3345 wdt:P3373 ?sibling .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?siblingSpouse WHERE { kg:5268 kg:3488 ?sibling . ?sibling kg:5344 kg:5835 . ?sibling kg:5138 kg:8343 }\"\n\t\t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE { wd:Q21195678 wdt:P31 wd:Q54 ; p:P57/pq:P108 ?creator . ?creator ps:P57 wd:Q2316788 . OPTIONAL { wd:Q21195678 wdt:P57 wd:Q2316788 } . FILTER(?resource = wd:Q2316788 || ?resource != wd:Q2316788) }\"\n \t\t \t\t ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 wdt:P162 ?x1 . ?x0 wdt:P57 ?x2 . ?x0 wdt:P58 ?x3 .}\",\n     \t\t\"?x1 rdfs:label 'Vince Gilligan'@en.\",\n     \t\t\"?x2 rdfs:label 'Vince Gilligan'@en.\",\n     \t\t\"?x3 rdfs:label 'George Mastras'@en.\",\n     \t\t\"?x0 wdt:P31 wd:Q5398426 .\"\n     \t]\n}\n \t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:typeOf kg:0474 .\",\n\t\t\t\"?x kg:producedBy kg:4646 .\",\n\t\t\t\"?x kg:directedBy kg:4646 .\",\n\t\t\t\"?x kg:writtenBy kg:4646 .\"\n\t\t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P31 wd:Q1142470 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film rdfs:label ?title .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(LANG(?title) = 'en') .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Tom at the Farm'))) } UNION\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Heartbeats'))) } UNION\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Laurence Anyways'))) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P162 ?designer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P345 ?imdbId }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P106 wd:Q78979 . }\" ,\"\\t# Check if the designer is a film editor\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P106 wd:Q75098 . }\" ,\"\\t# Check if the designer is an actor or star\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource <http://schema.org/name> ?name .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?resource = ?designer)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 ?movie1 . ?movie1 wdt:P31 wd:Q1144178 . ?movie1 rdfs:label ?movie1Label filter (lang(?movie1Label) = 'en') . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 ?movie2 . ?movie2 wdt:P31 wd:Q1144178 . ?movie2 rdfs:label ?movie2Label filter (lang(?movie2Label) = 'en') . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 ?movie3 . ?movie3 wdt:P31 wd:Q1144178 . ?movie3 rdfs:label ?movie3Label filter (lang(?movie3Label) = 'en') . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 wd:Q2336453 . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 wd:Q3530946 . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P161 wd:Q2615443 . }\",\n     \t\t\"{ ?x wdt:P106 wd:Q1323191 . ?x wdt:P1040 wd:Q1323191 . }\"\n     \t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?x kg:4835 kg:4718 .\", \">// occupation is costume designer\",\n \t\t  \t\t\"?x kg:823 kg:8233 .\", \">// works_in is Laurence Anyways\",\n \t\t  \t\t\"?x kg:823 kg:9065 .\", \">// works_in is Heartbeats\",\n \t\t  \t\t\"?x kg:823 kg:1968 .}\", \">// works_in is Tom at the Farm\"\n \t  \t\t]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \"># Assuming the person is of type human (Q5)\"\n   \t,\"?resource wdt:P108 wd:Q952426 .\", \"># Organization related to film/TV production\"\n   \t,\"?work1 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work1 rdfs:label ?title1 .\",\n   \t\"FILTER(LANG(?title1) = 'en' && STR(?title1) = 'In the Park')\",\n   \t\"?work2 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work2 rdfs:label ?title2 .\",\n   \t\"FILTER(LANG(?title2) = 'en' && STR(?title2) = 'Shanghaied')\",\n   \t\"?work3 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work3 rdfs:label ?title3 .\",\n   \t\"FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Modern Times')\",\n   \t\"?work4 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work4 rdfs:label ?title4 .\",\n   \t\"FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Professor')\",\n   \t\"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t,\"?resource wdt:P31 wd:Q5 .\"\n     \t\t,\"?resource wdt:P1040 wd:Q658822 .\"\n     \t\t,\"?resource wdt:P161 wd:Q658822 .\"\n     \t\t,\"?resource wdt:P1040 wd:Q921678 .\"\n     \t\t,\"?resource wdt:P161 wd:Q921678 .\"\n     \t\t,\"?resource wdt:P1040 wd:Q535567 .\"\n     \t\t,\"?resource wdt:P161 wd:Q535567 .\"\n     \t\t,\"?resource wdt:P1040 wd:Q2718259 .\"\n     \t\t,\"?resource wdt:P161 wd:Q2718259 .\"\n     \t\t,\"}\"\n     \t  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:4097 kg:6250 .\",\n  \t\t                \"?x kg:4097 kg:0636 .\",\n  \t\t                \"?x kg:7719 kg:7044 ?y .\",\n  \t\t                \"?x kg:8179 kg:7044 ?z .\",\n  \t\t                \"?x kg:9013 kg:7044 ?a .\",\n  \t\t                \"?x kg:0287 kg:7044 ?b .\"\n  \t\t            ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q26954783 wdt:P100 ?work.\\nwdb:Q26954783 wdt:P100 ?work.\\nwd:Q26954784 wdt:P100 ?work.\\nwd:Q26954785 wdt:P100 ?work.\\nwd:Q26954786 wdt:P100 ?work.\\n}\\n\"]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q1291210 . }\",\n     \t\t\"{ ?item wdt:P57 wd:Q4207234 . }\",\n     \t\t\"{ ?item wdt:P57 wd:Q16198328 . }\",\n     \t\t\"{ ?item wdt:P57 wd:Q4679987 . }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q1291210 . }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q4207234 . }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q16198328 . }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q4679987 . }\"\n     \t]\n     \t}\n    \t\t\t \t\t\t\t\t\t      "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:5107 kg:6442 .\",\n \t\t\t\"?resource kg:5107 kg:3907 .\",\n \t\t\t\"?resource kg:5107 kg:6912 .\",\n \t\t\t\"?resource kg:5107 kg:1480 .\",\n \t\t\t\"?resource kg:0019 ?filmEditor .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?film WHERE { wd:Q236159 ?p ?s . FILTER(?s = wd:Q236159) }\"\n \t\t \t\t ]\n} "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?x0 wdt:P57 wd:Q549956 . }\",\n     \t\t\"{ ?x1 wdt:P57 wd:Q3772 . }\",\n     \t\t\"{ ?x2 wdt:P57 wd:Q2838329 . }\",\n     \t\t\"{ ?x3 wdt:P57 wd:Q47284 . }\",\n     \t\t\"{ ?x0 wdt:P58 wd:Q549956 . }\",\n     \t\t\"{ ?x1 wdt:P58 wd:Q3772 . }\",\n     \t\t\"{ ?x2 wdt:P58 wd:Q2838329 . }\",\n     \t\t\"{ ?x3 wdt:P58 wd:Q47284 . }\",\n     \t\t\"?x0 wdt:P31 wd:Q1137372 .\"\n     \t\t ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?screenwriter WHERE {\",\n \t\t\" kg:0456 kg:2361 ?director .\",\n \t\t\" kg:0456 kg:4350 ?screenwriter .\",\n \t\t\"?director (owl:sameAs|foaf:homepage)/<http://schema.org/name>  \\\"Alexandre Rockwell\\\"@en.\",\n \t\t\"?screenwriter (owl:sameAs|foaf:homepage)/<http://schema.org/name>  \\\"Quentin Tarantino\\\"@en.\",\n \t\t\"?screenwriter (owl:sameAs|foaf:homepage)/<http://schema.org/name>  \\\"Allison Anders\\\"@en.\",\n \t\t\"?screenwriter (owl:sameAs|foaf:homepage)/<http://schema.org/name>  \\\"Robert Rodriguez\\\"@en.}\",\n \t\t\"LIMIT 1\"\n \t]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?producer WHERE { wd:Q108362974 wdt:P57 ?producer . }\"\n \t \t    \t\t]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x wdt:P57 wd:Q40220 .\",\n \t\t\t\"?x wdt:P57 wd:Q117392 .\",\n \t\t\t\"?x wdt:P57 wd:Q5127380 .\",\n \t\t\t\"?x wdt:P162 wd:Q4235 .\",\n \t\t\t\"?x wdt:P31 wd:Q3977597 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?producer WHERE {\",\n \t\t\" kg:0301 kg:0032 ?director .\",\n \t\t\" kg:0301 kg:1706 ?producer .\",\n \t\t\"?director (owl:sameAs|foaf:name) ?directorsName .\",\n \t\t\"?producer (owl:sameAs|foaf:name) ?producersName .\",\n \t\t\"?directorsName rdfs:subClassOf* kg:9737 ; rdfs:subClassOf* kg:9813 ; rdfs:subClassOf* kg:2682 .\",\n \t\t\"?producersName rdfs:subClassOf* kg:5184 .}\",\n \t\t\"MINUS { ?x a kg:2829 }\"]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?resource wdt:P31 wd:Q475698.\\nFILTER(?resource = wd:{{item}}).\\n{ ?resource wdt:P50 wd:Q253}. # Written by George Lucas\\n{ ?resource wdt:P148 wd:Q253}. # Executive produced by George Lucas\\n{ ?resource wdt:P169 wd:Q253}. # Produced by George Lucas\\n{ ?resource wdt:P70 wd:Q253}.  # Edited by George Lucas\\n}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t\t,\"?resource wdt:P58 wd:Q38222 .\"\n     \t\t,\"OPTIONAL {?resource wdt:P1040 wd:Q38222 }\"\n     \t\t,\"OPTIONAL {?resource wdt:P1431 wd:Q38222 }\"\n     \t\t,\"?resource wdt:P162 wd:Q38222 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x0 <http://example.org/was_written_by> kg:6869 .\",\n  \t\t                \"?x0 <http://example.org/executive_produced_by> kg:1896 .\",\n  \t\t                \"?x0 <http://example.org/produced_by> kg:6686 .\",\n  \t\t                \"?x0 <http://example.org/film_edited_by> kg:6572 .\"\n  \t            ]\n  \t\t}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \"># person instance of human\"\n \t\t  \t\t,\"?resource wdk:P6870 ?work1 .\", \"># works written by or edited by the person (assuming a specific property for this relation)\"\n \t\t  \t\t,\"?work1 wdt:P361 wd:Q245964 .\", \"># instance of work \" ,\"%work title%\"\n \t\t  \t\t,\"?resource wdk:P6870 ?work2 .\",\n \t\t  \t\t\"?work2 wdt:P361 wd:Q245965 .\",\n \t\t  \t\t\"?resource wdk:P6870 ?work3 .\",\n \t\t  \t\t\"?work3 wdt:P361 wd:Q245966 .\",\n \t\t  \t\t\"?resource wdt:P106 wd:Q188488 .\" ,\"># occupation editor\"\n \t\t  \t\t,\"?resource wdk:P6870 ?journalWork .\", \"># works written by or edited by the person (assuming a specific property for this relation)\"\n \t\t  \t\t,\"?journalWork wdt:P361 wd:Q259456 .\" ,\"%Cahiers du cinéma%\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?writer wdt:P58 wd:Q672061 ;\",\n    \t\t\"?writer wdt:P1040 wd:Q3141131 ;\",\n    \t\t\"?writer wdt:P58 wd:Q972787 .\",\n    \t\t\"?writer wdt:P108 wd:Q909176 .\",\n    \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n    \t]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:2392 kg:2452 .\",\n\t\t\t\"?x kg:2942 kg:2452 .\",\n\t\t\t\"?x kg:1912 kg:2410 .\",\n\t\t\t\"?x kg:2392 kg:4179 .\",\n\t\t\t\"?x kg:2942 kg:4179 .\",\n\t\t\t\"?x kg:2392 kg:8913 .\",\n\t\t\t\"?x kg:2942 kg:8913 .\"\n\t\t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?producer WHERE { wd:Q168459 ?productionProperty ?producer . FILTER(?producer = wd:Q273029 || ?producer = wd:Q179715 || ?producer = wd:Q179716 || ?producer = wd:Q273030) }\"\n \t\t \t\t\t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer ?executiveProducer WHERE {\",\n     \t\t\" wd:Q819109 wdt:P1431 ?executiveProducer .\",\n     \t\t\" wd:Q819109 wdt:P162 ?producer .\",\n     \t\t\"?executiveProducer wdk:p577/wikibase:directClaim ?claimExec .\",\n     \t\t\"?producer wdk:p577/wikibase:directClaim ?claimProd .\",\n     \t\t\"FILTER (?claimExec = wd:Q1969128 || ?claimExec = wd:Q81520 || ?claimExec = wd:Q1295611 || ?claimExec = wd:Q381545)\",\n     \t\t\"}\"\n     \t\t\t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 <http://example.org/producer> ?x1 .}\",\n\t\t\t\"{?x0 <http://example.org/executive_producer> ?x2 .}\",\n\t\t\t\"?x3 <http://example.org/is> <http://kg.example/kg:9039> .\",\n\t\t\t\"?x4 <http://example.org/is> <http://kg.example/kg:6124> .\",\n\t\t\t\"?x5 <http://example.org/is> <http://kg.example/kg:3569> .\",\n\t\t\t\"?x6 <http://example.org/is> <http://kg.example/kg:0657> .\",\n\t\t\t\"?x7 <http://example.org/is> <http://kg.example/kg:4872> .\"\n\t\t]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE { wd:Q76590 ?p ?s . ?s ?q ?resource . FILTER(?q = wikibase:ExecutiveProducer || ?q = wd:Q1482374 || ?q = wd:Q134984 || ?q = wd:Q207536) }\"\n \t\t \t\t ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P162 wd:Q8006; wdt:P1040 wd:Q8006; wdt:P58 wd:Q8006; wdt:P1431 wd:Q8006. ?item wdt:P31 wd:Q114242974.}\"\n     \t\t]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:is_screenwriter kg:1425 .\",\n \t\t\t\"?resource kg:is_film_editor kg:9931 .\",\n \t\t\t\"?resource kg:is_executive_producer kg:2311 .\",\n \t\t\t\"?resource kg:is_producer kg:8024 .\",\n \t\t\t\"?resource kg:production_company kg:4757 .\",\n \t\t\t\"FILTER(?resource = kg:4824)\"\n \t\t,\"}\"]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?director ?editor ?writer) { (wd:Q1 wd:Q2 wd:Q3) }\",\n    \"?work wdt:P57 ?director ;\",\n    \"      wdt:P108 ?editor ;\",\n    \"      wdt:P86 ?writer .\",\n    \"?resource wdt:P1433 ?work .\", \"><!-- P1433 is an example property, the actual property should be used based on what 'directed', 'edited' and 'written' map to in Wikidata for a work/resource. Adjust accordingly. --!>                                 \"]\n  }\n                    "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q562108 ; wdt:P58 wd:Q562108 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q562108 ; wdt:P58 wd:Q1687239 ; wdt:P1040 wd:Q1687239 . } UNION { ?item wdt:P57 wd:Q562108 ; wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q35979475 . }\"\n \t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE {\",\n\t\t    \t\t\"?resource kg:is_director kg:6296 .\",\n\t\t    \t\t\"?resource kg:is_screenwriter kg:8202 .\",\n\t\t    \t\t\"?resource kg:is_film_editor kg:7913 .\",\n\t\t    \t\t\"?resource kg:is_ole_john kg:8650 .\",\n\t\t    \t\t\"?resource kg:is_jens_jorgen_thorsen kg:9267 .\",\n\t\t    \t\t\"}\"\n\t\t \t\t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ( ?director ?writer ?editor ) { ( wd:Q1 wd:Q2 wd:Q3 ) }\",\n    \"?work wdt:P57 ?director ;\",\n    \"wdt:P50 ?writer ;\",\n    \"wdt:P7 edit:position ?editor .\",\n    \"?resource wikibase:statements ?work .\",\n    \"}\"\n  ]\n}\n\t\t\t\t     \t\t\t\t\t      "}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\"  wd:Q35979475 wdt:P57 ?resource .\", \">// Ole John as director\",\n  \t\t\"  wd:Q562108 wdt:P57 ?resource .\", \">// Jørgen Leth as director\",\n  \t\t\"  wd:Q1687239 wdt:P57 ?resource .\", \">// Jens Jørgen Thorsen as director\",\n  \t\t\"  wd:Q35979475 wdt:P58 ?resource .\", \">// Ole John as screenwriter\",\n  \t\t\"  wd:Q562108 wdt:P58 ?resource .\", \">// Jørgen Leth as screenwriter\",\n  \t\t\"  wd:Q1687239 wdt:P58 ?resource .\", \">// Jens Jørgen Thorsen as screenwriter\",\n  \t\t\"  wd:Q35979475 wdt:P1040 ?resource .\", \">// Ole John as film editor\",\n  \t\t\"  wd:Q562108 wdt:P1040 ?resource .\", \">// Jørgen Leth as film editor\",\n  \t\t\"  wd:Q1687239 wdt:P1040 ?resource .\" ]} "}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:2033 kg:1751 .\",\n \t\t\t\"?resource kg:0860 kg:2915 .\",\n \t\t\t\"?resource kg:2823 kg:7403 .}\",\n \t\t\"LIMIT 1\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?resource WHERE {\", \"default-graph\", \"nil\"\n \t\t\t \t\t]} "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P57 wd:Q83691. \"\n\t\t] }\n\t\t\t\t \t\t\t\t \t\t\t\t \t\t\t \t"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 kg:1376 ?x1}\",\n     \t\t\"?x0 kg:5290 kg:5086\",\n     \t\t\"?x0 kg:5290 kg:3378\",\n     \t\t\"?x0 kg:5290 kg:0317\",\n     \t\t\"?x0 kg:5290 kg:8588\",\n     \t\t\"?x0 kg:9341 ?x2\",\n     \t\t\"?x0 kg:5028 ?x3\"\n     \t\t\t]\n     \t\t}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 ?director . # directed by\\n?film wdt:P98 ?cinematographer . # cinematography by\\n?person wdt:P108 ?film . # occupation position\\n?person wdt:P345 ?imdbID .\\nFILTER(?imdbID = \\\"tt0256457\\\"@en) # Six Men Getting Sick\\nFILTER(?imdbID = \\\"tt0495158\\\"@en) # Inland Empire\\nFILTER(?imdbID = \\\"tt0360183\\\"@en) # Darkened Room\\nFILTER(?imdbID = \\\"tt0276545\\\"@en) # Rabbits\\n?resource wdt:P106 wd:Q21198 . # occupation is film director\\n?resource wdt:P106 wd:Q725381 . # occupation is cinematographer\\n}\\n\"]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n     ]\n   \t}\n    \t\t\t \t  \t\t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"?actor kg:6649 ?occupation .\",\n\t\t\t\"?actor kg:is_director ?movie1 .\",\n\t\t\t\"?actor kg:director ?movie2 .\",\n\t\t\t\"?actor kg:7926 ?movie3 .\",\n\t\t\t\"?actor kg:7926 ?movie4 .\",\n\t\t\t\"?movie1 rdf:type kg:8094 .\",\n\t\t\t\"?movie2 rdf:type kg:1856 .\",\n\t\t\t\"?movie3 rdf:type kg:1061 .\",\n\t\t\t\"?movie4 rdf:type kg:6644 .\"\n\t\t]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?work WHERE { ?work wdt:P31 wd:Q1142429 ;\" ]\n \t \t\t\t\t} "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t,\"wd:Q123456789 wdt:P31 wd:Q957747 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P108 wd:Q123 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q456 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q789 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q1011 .\"\n \t\t\t\t,\"?resource wdt:P57 wd:Q123 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q456 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q789 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q1011 .\"\n \t\t  \t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t\t  \t\t\"WHERE {\",\n \t\t\t  \t\t\"{ wd:Q35979475 wdt:P57 ?resource . } UNION\",\n \t\t\t\t  \t\t\"{ wd:Q1687239 wdt:P57 ?resource . } UNION\",\n \t\t\t\t\t\t  \t\t\"{ wd:Q562108 wdt:P57 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t  \t\t\"{ wd:Q35979475 wdt:P58 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t\t\t  \t\t\"{ wd:Q1687239 wdt:P58 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t\t\t\t\t  \t\t\"{ wd:Q562108 wdt:P58 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\"{ wd:Q35979475 wdt:P1040 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\"){ wd:Q1687239 wdt:P1040 ?resource . } UNION\",\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ wd:Q562108 wdt:P1040 ?resource . }\"\n \t  \t\t\t\t,\n \t\t  \t\t\"}\"\n \t\t  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:7826 kg:8518 .\",\n \t\t\t\"?x kg:7826 kg:0721 .\",\n \t\t\t\"?x kg:7826 kg:8090 .\",\n \t\t\t\"?x kg:4439 ?resource .\",\n \t\t\t\"?x kg:8590 ?resource .\"\n \t\t,\"}\"]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n      \"?work wdt:P1476 \\\"Grindhouse\\\"@en .\",\n      \"?work wdt:P57 ?director .\",\n      \"?director rdfs:label ?directorLabel .\",\n      \"FILTER(LANG(?directorLabel) = 'en') .\",\n      \"?work wdt:P50 ?author .\",\n      \"?author rdfs:label ?authorLabel .\",\n      \"FILTER(LANG(?authorLabel) = 'en') .\",\n      \"{?author rdfs:label \\\"Eli Roth\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Edgar Wright\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Rob Zombie\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Quentin Tarantino\\\"@en}\",\n      \"UNION {?author rdfs:label \\\"Robert Rodriguez\\\"@en}\"\n   \t,\"}\"]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q358714 . ?item wdt:P58 wd:Q358714 .}\",\n     \t\t\"{?item wdt:P57 wd:Q522057 . ?item wdt:P58 wd:Q522057 .}\",\n     \t\t\"{?item wdt:P57 wd:Q298255 . ?item wdt:P58 wd:Q298255 .}\",\n     \t\t\"{?item wdt:P57 wd:Q3772 . ?item wdt:P58 wd:Q3772 .}\",\n     \t\t\"{?item wdt:P57 wd:Q47284 . ?item wdt:P58 wd:Q47284 .}\"\n     \t]\n     \t}\n    \t\t\t \t\t\t\t\t \t\t\t\t \t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director WHERE {\",\n \t\t\t\"?movie kg:6979 ?director .\",\n \t\t\t\"?movie kg:7920 ?screenwriter .\",\n \t\t\t\"{?director kg:4973 ?person} UNION {?director kg:6605 ?person} UNION {?director kg:1797 ?person} UNION {?director kg:2475 ?person} UNION {?director kg:8252 ?person} .\",\n \t\t\t\"?screenwriter kg:4973 ?person .\",\n \t\t\t\"?movie kg:2849 \\\"Grindhouse\\\"@en .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film (movie)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P57 wd:Q609582. \" ,\">// producer occupation\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P50 ?producer. \" ,\">// created by\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film wdk:P147 wd:Q350576 }\" ,\"\\nUNION { ?film wdk:P147 wd:Q289575 }\", \"\\nUNION { ?film wdk:P147 wd:Q289576 }\", \"\\nUNION { ?film wdk:P147 wd:Q303555 }\" ,\"\\n}\" ,\">// specific films\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"?resource wdt:P106 wd:Q3282637 .\", \"@comment: A film producer\",\n      \t\t\"?resource wdt:P58 wd:Q567519 .\", \"@comment: Screenwriter of Katzelmacher\",\n      \t\t\"?resource wdt:P1040 wd:Q567519 .\", \"@comment: Film editor of Katzelmacher\",\n      \t\t\"?resource wdt:P58 wd:Q686125 .\", \"@comment: Screenwriter of Lili Marleen\",\n      \t\t\"?resource wdt:P1040 wd:Q686125 .\", \"@comment: Film editor of Lili Marleen\",\n      \t\t\"?resource wdt:P58 wd:Q327427 .\", \"@comment: Screenwriter of Whity\",\n      \t\t\"?resource wdt:P1040 wd:Q327427 .\", \"@comment: Film editor of Whity\",\n      \t\t\"?resource wdt:P58 wd:Q2789885 .\", \"@comment: Screenwriter of The Niklashausen Journey\",\n      \t\t\"?resource wdt:P1040 wd:Q2789885 .\", \"@comment: Film editor of The Niklashausen Journey\",\n      \t\t\"}\"\n      \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?X kg:0244 kg:7034 .\",\n \t\t\t\"?X kg:7034 kg:0244 .\",\n \t\t\t\"?X kg:0244 kg:6772 .\",\n \t\t\t\"?X kg:0244 kg:7250 .\",\n \t\t\t\"?X kg:0244 kg:2998 .\",\n \t\t\t\"?X kg:0244 kg:9419 .\"\n \t\t,\"?X kg:7034 ?resource.\"\n \t]}\n \t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q53987042 . # instance of work\\n?resource wdt:P57 ?director . # directed by\\n?resource wdt:P58 ?writer . # written by\\n?director wdt:P106 wd:Q11046 . # occupation is film director or television director\\nVALUES ?writer {wd:Q239265 wd:Q171975 wd:Q171976 wd:Q171978 wd:Q171979} # Peter Gould, George Mastras, Sam Catlin, Thomas Schnauz, Vince Gilligan\\n}\\n\"]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\t\t \t  \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t\t,\"{ ?resource wdt:P57 wd:Q15042700 . } UNION { ?resource wdt:P58 wd:Q15042700 . }\"\n     \t\t,\"{ ?resource wdt:P57 wd:Q7174311 . } UNION { ?resource wdt:P58 wd:Q7174311 . }\"\n     \t\t,\"{ ?resource wdt:P57 wd:Q7407299 . } UNION { ?resource wdt:P58 wd:Q7407299 . }\"\n     \t\t,\"{ ?resource wdt:P57 wd:Q5542223 . } UNION { ?resource wdt:P58 wd:Q5542223 . }\"\n     \t\t,\"{ ?resource wdt:P57 wd:Q4500 . } UNION { ?resource wdt:P58 wd:Q4500 . }\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{\n \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"VALUES (?writer ?person) { (kg:7904 kg:0085) (kg:7904 kg:1058) (kg:7904 kg:0768) (kg:7904 kg:0044) (kg:7904 kg:1644) }\",\n  \t\t\"VALUES (?director ?person) { (kg:4382 kg:0085) (kg:4382 kg:1058) (kg:4382 kg:0768) (kg:4382 kg:0044) (kg:4382 kg:1644) }\",\n  \t\t\"?resource ?writer ?person .\",\n  \t\t\"?resource ?director ?person .\",\n  \t\t\"}\"\n  \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"?work wdt:P31 wd:Q1142459 ;\" ,\n     \t\t\"wdt:P57 wd:Ole_John ;\" ,\n     \t\t\"wdt:P140 wd:Jens_Jørgen_Thorsen ;\" ,\n     \t\t\"wdt:P170 wd:Jørgen_Leth .\"\n     \t,\"?work wdt:P364 ?script .\" ,\n     \t\t\"?script wdt:P57 wd:Ole_John .\"\n     \t,\"?work wdt:P128 ?edit .\" ,\n     \t\t\"?edit wdt:P57 wd:Jørgen_Leth .\"\n     \t,\"?resource wdt:P930 ?work .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?film WHERE {\",\n     \t\t\"  wd:Q35979475 wdt:P57 ?film .\",\n     \t\t\"  wd:Q1687239 wdt:P58 ?film .\",\n     \t\t\"  wd:Q562108 wdt:P1040 ?film .\",\n     \t\t\"}\"\n     \t\t\t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film kg:is_director kg:0969 .\",\n \t\t\t\"?film kg:is_screenwriter kg:4347 .\",\n \t\t\t\"?film kg:is_film_editor kg:9492 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?resource WHERE {\",\n    \t\t\"  VALUES (?film1 ?film2 ?film3 ?film4) {\",\n    \t\t\"    (wd:Q27865 wd:Q109971 wd:Q27867 wd:Q110009)\",\n    \t\t\"  }\",\n    \t\t\"  ?person wdt:P345 ?film1 .\",\n    \t\t\"  ?person wdt:P1196 ?film2 .\",\n    \t\t\"  ?person wdt:P1196 ?film3 .\",\n    \t\t\"  ?person wdt:P1196 ?film4 .\",\n    \t\t\"  ?person wdt:P108 wd:Q7098 .\", \">// had the role of film editor\"\n    \t\t,\n    \t\t\"  ?person wdt:P279* wd:Q531 .\", \"// instance of person or subclass\"\n    \t\t,\n    \t\t\"  FILTER EXISTS {\",\n    \t\t\"    ?person wdt:P468 ?film1 .\",\n    \t\t\"    ?person wdt:P468 ?film2 .\",\n    \t\t\"    ?person wdt:P468 ?film3 .\",\n    \t\t\"    ?person wdt:P468 ?film4 .\",\n    \t\t\"  }\",\n    \t\t\"  FILTER EXISTS {\",\n    \t\t\"    ?person wdt:P57 ?film1 .\",\n    \t\t\"    ?person wdt:P57 ?film2 .\",\n    \t\t\"    ?person wdt:P57 ?film3 .\",\n    \t\t\"    ?person wdt:P57 ?film4 .\",\n    \t\t\"  }\",\n    \t\t\"  ?resource wikibase:directClaim ?statement1 .\",\n    \t\t\"}\"\n    \t]\n}\n    \t\t\t \t\t\t\t \t\t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"{ ?item wdt:P106 wd:Q7042855 . }\",\n    \t\t\"{ ?item wdt:P58 wd:Q17738 . }\",\n    \t\t\"{ ?item wdt:P58 wd:Q165713 . }\",\n    \t\t\"{ ?item wdt:P58 wd:Q181803 . }\",\n    \t\t\"{ ?item wdt:P1431 wd:Q17738 . }\",\n    \t\t\"{ ?item wdt:P1431 wd:Q165713 . }\",\n    \t\t\"{ ?item wdt:P1431 wd:Q181803 . }\",\n    \t\t\"{ ?item wdt:P58 wd:Q3968346 . }\"\n    \t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?X kg:1706 kg:8244 .\", \"># person with occupation film editor\",\n \t\t\t\"?X kg:9079 ?Y .\", \"># the film editor is a screenwriter of some work\",\n \t\t\t\"?X kg:2001 ?Z .\" ,\"># the film editor executive produced some work\",\n \t\t\t\"?Y rdf:type kg:0534 .\", \"># one of the works written by the person is Star Wars Episode IV A New Hope\",\n \t\t\t\"?Y rdf:type kg:8405 .\", \"># one of the works written by the person is Star Wars Episode I The Phantom Menace\",\n \t\t\t\"?Z rdf:type kg:0534 .\", \"># one of the works executive produced by the person is Star Wars Episode IV A New Hope\",\n \t\t\t\"?Z rdf:type kg:8405 .\" ,\"># one of the works executive produced by the person is Star Wars Episode I The Phantom Menace\",\n \t\t\t\"?X kg:9079 kg:4043 .\", \"># the film editor wrote Return of the Jedi\",\n \t\t\t\"?X kg:2001 kg:4043 .\" ,\"># the film editor executive produced Return of the Jedi\",\n \t\t\t\"?X kg:9079 kg:0382 .\" ,\",># the film editor wrote Star Whores\"\n \t\t,\"}\" ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author ?editor ?director WHERE {\"\n     \t\t,\"wd:Q123456789 schema:author ?author .\"\n     \t,\"wd:Q123456789 schema:editor ?editor .\"\n     \t,\"wd:Q123456789 schema:director ?director .\"\n     \t,\"?author wdt:P106 wd:Q728. \"\n     \t,\"?editor wdt:P106 wd:Q728. \"\n     \t,\"?director wdt:P106 wd:Q728. \"\n     \t,\"?author wdk:alias ?authorName .\"\n     \t,\"FILTER (LANG(?authorName) = 'en' && STR(?authorName) = 'Ole John').\"\n     \t,\"?editor wdk:alias ?editorName .\"\n     \t,\"FILTER (LANG(?editorName) = 'en' && STR(?editorName) = 'Jens Jørgen Thorsen').\"\n     \t,\"?director wdk:alias ?directorName .\"\n     \t,\"FILTER (LANG(?directorName) = 'en' && STR(?directorName) = 'Jørgen Leth').\"\n   \t,\"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?director ?editor ?writer WHERE {\",\n     \t\t\" wd:Q20729551 wdt:P58 ?writer .\",\n     \t\t\" wd:Q20729551 wdt:P57 ?director .\",\n     \t\t\" wd:Q20729551 wdt:P1040 ?editor .\",\n     \t\t\"?writer wikibase:directClaim wdt:P58 .\",\n     \t\t\"?director wikibase:directClaim wdt:P57 .\",\n     \t\t\"?editor wikibase:directClaim wdt:P1040 .\",\n     \t\t\"?writer in (wd:Q35979475, wd:Q1687239, wd:Q562108) .\",\n     \t\t\"?director in (wd:Q35979475, wd:Q1687239, wd:Q562108) .\",\n     \t\t\"?editor in (wd:Q35979475, wd:Q1687239, wd:Q562108) .\",\n     \t\t\"}\"\n    \t]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director ?editor ?screenwriter WHERE {\",\n \t\t\t\"?film kg:is_screenwriter kg:5675 .\",\n \t\t\t\"?film kg:is_director kg:5239 .\",\n \t\t\t\"?film kg:is_film_editor kg:4140 .\",\n \t\t\t\"kg:5239 foaf:name \\\"Ole John\\\"@en .\",\n \t\t\t\"kg:4140 foaf:name \\\"Jens Jørgen Thorsen\\\"@en .\",\n \t\t\t\"?film foaf:name ?title .\",\n \t\t\t\"FILTER (lcase(str(?title)) = lcase(\\\"Stop for Bud\\\"@en))\",\n \t\t\t\"OPTIONAL { kg:5675 foaf:name ?screenwriter }\",\n \t\t\t\"OPTIONAL { kg:5239 foaf:name ?director }\",\n \t\t\t\"OPTIONAL { kg:4140 foaf:name ?editor }\"\n \t\t,\"}\"]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?writerCinematographer ?work1 ?work2 ?work3 ?starWars ?landBeforeTime\",\n  \t\t\"WHERE {\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work1 .\", \">// P467 is 'cinematography of' or similar, but needs to be adjusted based on the exact property used in Wikidata for writer and cinematographer roles.\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work2 .\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work3 .\",\n  \t\t\"  ?starWars wdt:P190 ?writerCinematographer .\", \">// P190 is 'executive producer of', but should be checked for correctness.\",\n  \t\t\"  ?landBeforeTime wdt:P190 ?writerCinematographer .\",\n  \t\t\"  ?work1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en' && STR(?title1) = 'Anyone Lived in a Pretty How Town')\",\n  \t\t\"  ?work2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en' && STR(?title2) = '1:42.08')\",\n  \t\t\"  ?work3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Look at Life')\",\n  \t\t\"  ?starWars wdt:P345 ?episodeIId . FILTER(STR(?episodeIId) = 'tt0120915')\", \">// Assuming the IMDb ID for Star Wars: Episode I – The Phantom Menace is used in Wikidata.\",\n  \t\t\"  ?landBeforeTime wdt:P345 ?landBeforeTimeId . FILTER(STR(?landBeforeTimeId) = 'tt0118867')\", \">// Assuming the IMDb ID for The Land Before Time is used in Wikidata.\"\n  \t\t\t,\"}\"\n]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x ?p ?o . FILTER (?o = wd:Q613974 || ?o = wd:Q208910 || ?o = wd:Q208910) }\",\n      \t\t\"{?y wdt:P58 ?x . ?y wdt:P344 ?x}\",\n      \t\t\"{?z wdt:P1431 ?x . FILTER (?z = wd:Q165713 || ?z = wd:Q192403)}\"\n      \t]\n \t}\n \t\t\t\t\t\t      \t\t\t\t\t\t\t"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:9276 kg:1454 .\",\n \t\t\"?x kg:9276 kg:6560 .\",\n \t\t\"?x kg:9276 kg:2752 .\",\n \t\t\"?x kg:9100 kg:3763 .\",\n \t\t\"?x kg:9100 kg:7291 .\"\n \t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?producer WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P31 wd:Q11424. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en').\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P57 wd:Q70986.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P169 wd:Q70986. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P108 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P279* wd:Q7345. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P169 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P57 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P50 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?title1 = 'Uzak'@en || ?title1 = 'Clouds of May'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer WHERE {\"\n     \t\t,\"?film1 wdt:P57 ?producer .\" ]\n     \t\t}\n     \t\t     \t\t\t \t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:0443 kg:7714 .\",\n  \t\t                \"?x kg:0638 kg:2699 .\",\n  \t\t                \"?x kg:0638 kg:9862 .\",\n  \t\t                \"?x kg:1486 kg:2699 .\",\n  \t\t                \"?x kg:5247 kg:9862 .\",\n  \t\t                \"?x kg:1836 kg:9862 .\"\n  \t\t            ]\n  \t\t}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q264598 schema:schemaDirector ?director .\",\n    \"  ?director wdt:P106 wd:Q75848 .\",\n    \"  wd:Q264598 schema:creator ?writer .\",\n    \"  ?writer wdt:P106 wd:Q75848 .\",\n    \"  wd:Q264598 schema:producer ?producer .\",\n    \"  ?producer wdt:P106 wd:Q75848 .\",\n    \"  ?director wdt:P31 wd:Q5 .\",\n    \"  ?writer wdt:P31 wd:Q5 .\",\n    \"  ?producer wdt:P31 wd:Q5 .\",\n    \"  ?director wdt:P106 wd:Q75848 .\",\n    \"  ?writer wdt:P106 wd:Q75848 .\",\n    \"  ?producer wdt:P106 wd:Q75848 .\",\n    \"  FILTER(?director = wd:Q23915 || ?director = wd:Q23916 || ?director = wd:Q23917)\",\n    \"  FILTER(?writer = wd:Q23915 || ?writer = wd:Q23916 || ?writer = wd:Q23917)\",\n    \"  FILTER(?producer = wd:Q23915 || ?producer = wd:Q23916 || ?producer = wd:Q23917)\",\n    \"}\",\n    \"?resource wdt:P31 wd:Q5 .\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2609 wdt:P50 ?author .\",\n    \"  wd:Q2609 wdt:P162 ?executiveProducer .\",\n    \"  wd:Q2609 wdt:P748 ?director .\",\n    \"  ?resource (wdt:P50/wikibase:claim|wdt:P162/wikibase:claim|wdt:P748/wikibase:claim) wd:Jim_Abrahams|^wdt:P50/wikibase:claim/wd:David_Zucker|^wdt:P50/wikibase:claim/wd:Jerry_Zucker .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?person WHERE {\",\n \t\t\t \t\t\"?film1 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?person wdt:P1698 wd:Q504145 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P2773 wd:Q2119622 .\", \"@language:en\",\n \t\t\t \t\t\"?film2 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?film2 rdfs:label ?filmLabel .\", \"@language:en\",\n \t\t\t \t\t\"FILTER (LANG(?filmLabel) = 'en') .\", \"@language:en\",\n \t\t\t \t\t\"?filmLabel bif:contains '\\\"My Son, My Son, What Have Ye Done\\\"' .\", \"@language:en\",\n \t\t\t \t\t\"?film3 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?film3 rdfs:label ?filmLabel2 .\", \"@language:en\",\n \t\t\t \t\t\"FILTER (LANG(?filmLabel2) = 'en') .\", \"@language:en\",\n \t\t\t \t\t\"?filmLabel2 bif:contains '\\\"Surveillance\\\"' .\", \"@language:en\",\n \t\t\t \t\t\"}\"\n \t\t\t \t\t]\n} "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{ ?x wdt:P57 wd:Q1140578; wdt:P1431 wd:Q2085. }\",\n      \t\t\t\"{ ?y wdt:P58 wd:Q1140578; wdt:P1431 wd:Q2085. }\",\n      \t\t\t\"{ ?z wdt:P1431 wd:Q1140578; wdt:P1431 wd:Q2085. }\",\n      \t\t\t\"{ ?a wdt:P57 wd:Q1511905; wdt:P1431 wd:Q2085. }\",\n      \t\t\t\"{ ?b wdt:P58 wd:Q1511905; wdt:P1431 wd:Q2085. }\",\n      \t\t\t\"{ ?c wdt:P1431 wd:Q1511905; wdt:P1431 wd:Q2085. }\"\n      \t\t  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:4070 kg:1760 .\",\n\t\t\t\"?x kg:4070 kg:3325 .\",\n\t\t\t\"?x kg:4070 kg:7851 .\"\n\t\t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 .\\nFILTER(?film in (wd:Q????, wd:Q????, wd:Q????, wd:Q????, wd:Q????)) .\\n}\\n\"]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\t\t \t  \t\t\t\t\t\t  \t\t\"query\": [\n     \"SELECT ?film WHERE {\"\n    \t]\n   \t  \t\t \t  \t\t\t\t\t\t \t} "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film kg:6767/kg:3501/kg:3045 <http://example.org/kg/3501> .\",\n \t\t\t\"?film kg:0772/kg:3501/kg:3045 <http://example.org/kg/3501> .\",\n \t\t\t\"<http://example.org/kg/9491> kg:6767 ?film .\",\n \t\t\t\"<http://example.org/kg/9491> kg:0772 ?film .\",\n \t\t\t\"<http://example.org/kg/1640> kg:6767 ?film .\",\n \t\t\t\"<http://example.org/kg/1640> kg:0772 ?film .\",\n \t\t\t\"<http://example.org/kg/3501> kg:6767 ?film .\",\n \t\t\t\"<http://example.org/kg/3501> kg:0772 ?film .\",\n \t\t\t\"<http://example.org/kg/9984> kg:6767 ?film .\",\n \t\t\t\"<http://example.org/kg/9984> kg:0772 ?film .\",\n \t\t\t\"?film kg:3501 <http://example.org/kg/0295> .\"\n \t\t,\"}\"]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composer\\nWHERE {\\n\\t?film1 wdt:P345 \\\"Spy Kids 3-D:_Game_Over\\\" ; wdt:P750 ?composer.\\n\\t?film2 wdt:P345 ?sinFilm ; wdt:P57 wd:Qxxxxxx .\\n\\tFILTER(?sinFilm = \\\"Sin_City\\\"@en || ?sinFilm = \\\"Sin_City:_A_Dame_to_Kill_For\\\"@en)\\n\\twd:Qxxxxxx wdt:P169 ?composer.\\n\\t?film3 wdt:P345 \\\"The_Adventures_of_Sharkboy_and_Lavagirl_in_3-D\\\" ; wdt:P89 ?director .\\n\\twd:Qxxxxxx wdt:P161 ?director.\\n}\\n\"]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q1653396 . ?composer wdt:P57 wd:Q192115 . ?composer wdt:P57 wd:Q1653396 . ?composer wdt:P344 wd:Q656357}\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\t\"?film0 kg:0995 ?composer .\",\n \t\t\t\"?film1 kg:8464 ?director .\",\n \t\t\t\"?film2 kg:3439 ?director .\",\n \t\t\t\"?film3 kg:7630 ?director .\",\n \t\t\t\"?film0 kg:0507 <http://example.org/Spy_Kids_3-D:_Game_Over> .\",\n \t\t\t\"?film1 kg:5795 <http://example.org/Sin_City> .\",\n \t\t\t\"?film2 kg:641 <http://example.org/Sin_City:_A_Dame_to_Kill_For> .\",\n \t\t\t\"?film3 kg:0483 <http://example.org/The_Adventures_of_Sharkboy_and_Lavagirl_in_3-D> .\",\n \t\t\t\"?director != ?composer\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource \\nWHERE {\\n?composerResource wdt:P31 wd:Q5 ; # instance of human\\nwdt:P178 wd:Q241110 ; # composer of A Woman of Paris (movie)\\nwdt:P178 wd:Q69158 . # composer of Pay Day (movie)\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q134182 .} # not an editor or star of Modern Times\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q107965 .} # not a star of City Lights\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q113475 .} # not a part of The Essanay-Chaplin Revue of 1916\\n}\\n\"]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE {\",\n\t\t\t\"?film1 wdt:P86 ?composer.\",\n\t\t\t\"?film2 wdt:P86 ?composer.\",\n\t\t\t\"?film1 rdfs:label \\\"A Woman of Paris\\\"@en.\",\n\t\t\t\"?film2 rdfs:label \\\"Pay Day\\\"@en.\",\n\t\t\t\"?movie1 wdt:P1040 ?editor.\",\n\t\t\t\"?movie1 wdt:P161 ?star.\",\n\t\t\t\"?movie1 rdfs:label \\\"Modern Times\\\"@en.\",\n\t\t\t\"?movie2 rdfs:label \\\"City Lights\\\"@en.\",\n\t\t\t\"?movie3 rdfs:label \\\"The Essanay-Chaplin Revue of 1916\\\"@en.\",\n\t\t\t\"?editor wdt:P86 ?composer.\",\n\t\t\t\"?star wdt:P86 ?composer.\"\n     \t\t,\"}\"]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/MusicComposition> . ?x0 <http://schema.org/composer> ?y0 . ?y0 <http://schema.org/filmEditorOf> <https://kg.qwen/kg?node=kg:7074> . ?y0 <http://schema.org/starOf> <https://kg.qwen/kg?node=kg:7559> . ?y0 <http://schema.org/starOf> <https://kg.qwen/kg?node=kg:7635> . ?y0 <http://schema.org/starOf> <https://kg.qwen/kg?node=kg:1720>}\"\n \t\t \t \t]\n }"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q688496. # directed by Jim Abrahams\",\n    \"  ?film wdt:P57 wd:Q688497. # directed by Jerry Zucker\",\n    \"  ?film wdt:P57 wd:Q688498. # directed by David Zucker\",\n    \"  ?film wdt:P162 wd:Q688496. # executive produced by Jim Abrahams\",\n    \"  ?film wdt:P162 wd:Q688497. # executive produced by Jerry Zucker\",\n    \"  ?film wdt:P162 wd:Q688498. # executive produced by David Zucker\",\n    \"  ?film wdt:P50 wd:Q688496. # written by Jim Abrahams\",\n    \"  ?film wdt:P50 wd:Q688497. # written by Jerry Zucker\",\n    \"  ?film wdt:P50 wd:Q688498. # written by David Zucker\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q11424. \",\n      \"?work wdt:P57 wd:Yūdai Yamaguchi. \",\n      \"?work wdt:P59 wd:Ernesto Díaz Espinoza. \",\n      \"?work wdt:P140 wd:Adrián García Bogliano. \",\n      \"?work wdt:P160 wd:Yoshihiro Nishimura. \"\n   \t,\"} LIMIT 1\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q4023328 .\",\n      \"?film wdt:P58 wd:Q5836844 .\",\n      \"?film wdt:P1040 wd:Q4023328 .\",\n      \"?film wdt:P1040 wd:Q5658534 .\",\n      \"?film wdt:P1040 wd:Q70996 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?film WHERE {\\n?film kg:is_director kg:2071 .\\n?film kg:is_screenwriter kg:0938 , kg:4134 .\\n?film kg:is_film_editor kg:5040 , kg:0869 .\\n}\"]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  ?film1 wdt:P31 wd:Q11424 . # instance of film\\n  ?film1 wdt:P57 wd:Q728 NAFTA . # editor\\n  ?film1 wdt:P91 wd:Q1602766 . # Pietà\\n  ?film2 wdt:P31 wd:Q11424 .\\n  ?film2 wdt:P57 wd:Q728 .\\n  ?film2 wdt:P91 wd:Q2415706 . # Dream\\n  ?film3 wdt:P31 wd:Q11424 .\\n  ?film3 wdt:P57 wd:Q728 .\\n  ?film3 wdt:P91 wd:Q1047797 . # Moebius\\n}\\n\"]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t]}\n     \t\t\t\t\t      \t\t\t"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?person kg:0214 kg:1068 .\", \"># person has occupation film editor (kg:1068)\"\n \t\t\t,\"?person kg:0214 kg:8387 .\", \"># person has occupation executive producer (kg:8387)\"\n \t\t\t,\"?person kg:0214 kg:3387 .\", \"># person has edited Moebius (kg:3387)\"\n \t\t\t,\"?person kg:0214 kg:2502 .\", \"># person has edited Dream (kg:2502)\"\n \t\t\t,\"?person kg:0214 kg:5744 .}\" ]} "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?producer WHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P57 wd:Q60958 . # directed by (replace with executive producer if needed)\\n  ?film wdt:P58 wd:Q60958 . # written by (replace with appropriate property)\\n  ?film wdt:P127 wd:Q60958 . # produced by (replace with appropriate property)\\n\\n  ?producer wdt:P345 wd:Q60958 .\\n}\\n\"]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"?resource wdt:P106 wd:Q3282637 .\", \"><!-- Occupation as film producer -->  <!-- This line needs to be corrected based on the actual property linking a person to their occupation. The current one is incorrect and should link an individual to being a film producer}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?person kg:0676 kg:7053 .\",\n \t\t\t\"?person kg:0676 kg:9994 .\",\n \t\t\t\"?person kg:0676 kg:3740 .\",\n \t\t\t\"?person kg:3912 ?resource .\",\n \t\t\t\"?person kg:5795 ?resource .\",\n \t\t\t\"?person kg:3740 ?resource .\",\n \t\t\"}\"]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": []} "}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n     \"SELECT ?resource WHERE { wd:Q312258 wdt:P26 ?resource . } UNION SELECT ?resource WHERE { wd:Q2298257 wdt:P58|wdt:P1040 wd:Q312258. ?resource (wdt:P737|wdt:P26) wd:Q312258 }\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:5049 kg:2935 .\", \"># Jacques Demy is the spouse of ?x\",\n \t\t\t\"?x kg:9301 ?y .\", \"># ?x influences ?y\",\n \t\t\t\"?z kg:9940 ?x .\", \"># ?x is a screenwriter of ?z\",\n \t\t\t\"?z kg:7127 ?x .\", \"># ?x is a film editor of ?z\",\n \t\t\t\"{?z kg:1497 } UNION {?z kg:9335 } UNION {?z kg:5738 }\" ,\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P31 wd:Q11424709 ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P179 ?writer ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P161 ?star ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P57 ?director ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P75 ?composer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film2 wdt:P31 wd:Q11424709 ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P57 ?writer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 rdfs:label ?film1Label , ?film1AltLabel .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (LANG(?film1Label) = 'en' || LANG(?film1AltLabel) = 'en')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?film1Label = 'Shoulder Arms'@en || ?film1AltLabel = 'Shoulder Arms'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film2 rdfs:label ?film2Label , ?film2AltLabel .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (LANG(?film2Label) = 'en' || LANG(?film2AltLabel) = 'en')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?film2Label = 'The Floorwalker'@en || ?film2AltLabel = 'The Floorwalker'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"?writer wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?star wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?director wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P58 ?shoulderArmsWriter ;\"\n\t\t] }\n\t\t\t\t \t\t\t\t \t\t\t\t \t\t\t \t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:9543 ?y .\",\n\t\t\t\"?y kg:1132 ?z .\",\n\t\t\t\"?y kg:8169 ?z .\",\n\t\t\t\"?y kg:8432 ?z .\",\n\t\t\t\"?x kg:9543 kg:7212\"\n\t\t]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P169 wd:Q28750 . # cinematographer\\n  ?person wdt:P106 wd:Q1004092 . # occupation: cinematographer\\n  ?person wdt:P136 wd:Q241112 . # works for film genre\\n  ?film rdfs:label ?titleFilter .\\n  FILTER (LANG(?titleFilter) = 'en')\\n  FILTER (?titleFilter = \\\"Planet Terror\\\"@en || ?titleFilter = \\\"Sin City\\\"@en)\\n  ?person wdt:P135 wd:Q28750 . # star, writer, editor, cinematographer, director\\n}\\n\"]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t\t,\"?film1 wdt:P57 ?director .\"\n \t\t  \t\t\t,\"?film1 wdt:P58 ?writer .\"\n \t\t  \t\t\t,\"?film1 wdt:P1040 ?editor .\"\n \t\t  \t\t\t,\"?film1 wdt:P344 ?cinematographer .\"\n \t\t  \t\t\t,\"wd:Q1165050 wdt:P57 ?director .\"\n \t\t  \t\t\t,\"wd:Q192115 wdt:P57 ?director .\"\n \t\t  \t\t\t,\"wd:Q1165050 wdt:P58 ?writer .\"\n \t\t  \t\t\t,\"wd:Q192115 wdt:P58 ?writer .\"\n \t\t  \t\t\t,\"wd:Q1165050 wdt:P1040 ?editor .\"\n \t\t  \t\t\t,\"wd:Q192115 wdt:P1040 ?editor .\"\n \t\t  \t\t\t,\"wd:Q1165050 wdt:P344 ?cinematographer .\"\n \t\t  \t\t\t,\"wd:Q192115 wdt:P344 ?cinematographer .\"\n \t\t  \t\t\t,\"?director wdt:P161 ?castMember .\"\n \t\t  \t\t\t,\"?writer wdt:P161 ?castMember .\"\n \t\t  \t\t\t,\"?editor wdt:P161 ?castMember .\"\n \t\t  \t\t\t,\"?cinematographer wdt:P161 ?castMember .\"\n \t\t  \t\t\t,\"FILTER(?director = ?writer && ?writer = ?editor && ?editor = ?cinematographer)\"\n \t\t  \t\t\t,\"VALUES ?film1 { wd:Q1165050 wd:Q192115 }\"\n \t\t  \t\t\t,\"BIND(?castMember AS ?resource)}\"\n \t  \t\t,\"}\"]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"  kg:3070 kg:6501 ?director .\",\n\t\t\t\"  kg:3070 kg:9873 ?writer .\",\n\t\t\t\"  kg:3070 kg:3834 ?editor .\",\n\t\t\t\"  kg:3070 kg:0459 ?cinematographer .\",\n\t\t\t\"  kg:9590 kg:6501 ?director2 .\",\n\t\t\t\"  kg:9590 kg:9873 ?writer2 .\",\n\t\t\t\"  kg:9590 kg:3834 ?editor2 .\",\n\t\t\t\"  kg:9590 kg:0459 ?cinematographer2 .\",\n\t\t\t\"  FILTER(?director = ?director2 && ?writer = ?writer2 && ?editor = ?editor2 && ?cinematographer = ?cinematographer2) \",\n\t\t\t\"?resource <http://schema.org/name> \\\"Robert Rodriguez\\\".}\",\n\t\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P3457 wd:Q2601189 ; # cinematographer of\\n           wdt:P161 wd:Q2601189 ; # starring in\\n           wdt:P57 wd:Q2601189 . # director of\\n  ?resource wdt:P3457 wd:Q25167 ; # cinematographer of\\n           wdt:P161 wd:Q25167 ; # starring in\\n           wdt:P57 wd:Q25167 . # director of\\n  ?resource wdt:P3457 wd:Q8906 ; # cinematographer of\\n           wdt:P161 wd:Q8906 ; # starring in\\n           wdt:P57 wd:Q8906 . # director of\\n  ?resource wdt:P3457 wd:Q2601190 ; # cinematographer of\\n           wdt:P161 wd:Q2601190 ; # starring in\\n           wdt:P57 wd:Q2601190 . # director of\\n  ?resource wdt:P3457 wd:Q28157 ; # cinematographer of\\n           wdt:P161 wd:Q28157 ; # starring in\\n           wdt:P57 wd:Q28157 . # director of\\n  ?resource wdt:P106 wd:Q1049366 ; # occupation editor\\n           wdt:P458 wd:Q1049366 . # executive producer\\n}\\n\"]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?y . { SELECT ?x WHERE { wd:Q730888 wdt:P161 ?x . } } UNION SELECT ?x WHERE { wd:Q2082586 wdt:P161 ?x . }} UNION {?x ?p ?y . { SELECT ?x WHERE { wd:Q205447 wdt:P344 ?x . } } UNION SELECT ?x WHERE { wd:Q1432710 wdt:P344 ?x . }} UNION {?x ?p ?y . { SELECT ?x WHERE { wd:Q17893055 wdt:P1040 ?x . } } UNION SELECT ?x WHERE { wd:Q17893055 wdt:P1431 ?x . }}\"\n]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:1618 kg:9739 .\",\n \t\t\t\"?resource kg:5089 (kg:9739, kg:8732, kg:5335, kg:3690) .\",\n \t\t\t\"kg:3328 kg:is film editor ?resource .\",\n \t\t\t\"kg:3328 kg:is executive producer ?resource .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE {\"\n\t\t    \t\t,\"?film wdt:P31 wd:Q1142402 .\"\n\t\t    \t\t,\"?film rdfs:label ?title .\"\n\t\t    \t\t,\"FILTER (LANG(?title) = 'en') .\"\n\t\t    \t\t,\"?film wdk:P910 ?cinematographer .\"\n\t\t    \t\t,\"?film wdk:P1275 ?editor .\"\n\t\t    \t\t,\"?cinematographer wdt:P31 wd:Q5 .\"\n\t\t    \t\t,\"?editor wdt:P31 wd:Q5 .\"\n\t\t    \t\t,\"?title bif:contains '\\\"Six Men Getting Sick\\\"' .\"\n\t\t    \t\t,\"?film rdfs:label ?otherFilmTitle .\"\n\t\t    \t\t,\"FILTER (LANG(?otherFilmTitle) = 'en') .\"\n\t\t    \t\t,\"VALUES ?otherFilmTitle { \\\"The Black Ghiandola\\\" \\\"Twin Peaks\\\" \\\"Lumière and Company\\\" \\\"Dune\\\" \\\"Inland Empire\\\" \\\"Boat\\\" }\"\n\t\t    \t\t,\"?cinematographer rdfs:label ?resource .\"\n\t\t    \t\t,\"FILTER (LANG(?resource) = 'en') .\"\n\t\t    \t\t,\"}\"\n\t\t \t\t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{ ?x wdt:P344 wd:Q3485595 ; wdt:P1040 wd:Q56756907 . }\",\n      \t\t\t\"{ ?x wdt:P344 wd:Q2085 . } UNION { ?x wdt:P161 wd:Q56756907 . }\",\n      \t\t\t\"{ ?x wdt:P344 wd:Q507285 . } UNION { ?x wdt:P161 wd:Q56756907 . }\",\n      \t\t\t\"{ ?x wdt:P344 wd:Q114819 . } UNION { ?x wdt:P161 wd:Q56756907 . }\",\n      \t\t\t\"{ ?x wdt:P344 wd:Q862058 . } UNION { ?x wdt:P161 wd:Q56756907 . }\",\n      \t\t\t\"{ ?x wdt:P344 wd:Q3641257 . } UNION { ?x wdt:P161 wd:Q56756907 . }\"\n      \t]\n}\n    \t\t\t\t\t\t\t\t\t \t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:is_film_editor kg:3903 .\",\n \t\t\t\"?resource kg:is_film_editor kg:8978 .\",\n \t\t\t\"?resource kg:is_film_editor kg:4169 .\",\n \t\t\t\"?resource kg:is_film_editor kg:0514 .\",\n \t\t\t\"?resource kg:is_film_editor kg:3018 .\",\n \t\t\t\"?resource kg:is_film_editor kg:0127 .\",\n \t\t\t\"?resource kg:is_director_of_photography kg:1543 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P1480 wd:Q27963 . # influenced by Jacques Demy\\n  ?resource wdt:P1490 wd:Q27963 . # married to Jacques Demy\\n  ?resource wdt:P101 wd:Q15226 . # occupation writer\\n  ?resource wdt:P101 wd:Q897309 . # occupation editor\\n  ?resource wdt:P101 wd:Q748196 . # occupation director\\n  ?film1 wdt:P50 ?resource .\\n  ?film1 wdt:P345 \\\"Vagabond\\\"@en .\\n  ?film2 wdt:P50 ?resource .\\n  ?film2 wdt:P345 \\\"The_Gleaners_and_I\\\"@en .\\n}\\n\"]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t]}\n     \t\t\t\t\t\t      \t\t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x kg:4212 kg:8516}\",\n  \t\t\"?x kg:7097 kg:4445\",\n  \t\t\"?x kg:6839 kg:4445\",\n  \t\t\"?x kg:8802 kg:4445\",\n  \t\t\"?x kg:4180 kg:8516\"\n  \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q16034897 wdt:P50 ?author .\", \">// Assuming Q16034897 is The Confession's editor, executive producer, and cinematographer (replace with actual Wikidata ID if known) \",\n \t\t  \t\t\"?author wdt:P3288 wd:Q251192 .\", \">// P3288 is 'starred in', Q251192 is Destiny (replace with actual movie IDs)\",\n \t\t  \t\t\"?author wdt:P3288 wd:Q276407 .\", \">// Q276407 is The Waiting Room (replace with actual movie ID)\",\n \t\t  \t\t\"?author wdt:P3288 wd:Q251193 .\", \">// Q251193 is The Third Page (replace with actual movie IDs)\",\n \t\t  \t\t\"?author wdt:P465 wd:Q251192 .\", \">// P465 is 'script writer of', replace with correct property if needed\",\n \t\t  \t\t\"?author wdt:P465 wd:Q276407 .\",\n \t\t  \t\t\"?author wdt:P465 wd:Q251193 .\",\n \t\t  \t\t\"?resource ?property ?author .\"\n \t  \t\t,\"}\" ]\n} "}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p wd:Q12813010} UNION {?x wdt:P58 wd:Q12813010}\",\n  \t\t\"?x ?p ?y\",\n  \t\t\"?y wdt:P161 wd:Q5265241\",\n  \t\t\"?y wdt:P161 wd:Q6084069\",\n  \t\t\"?y wdt:P161 wd:Q6099428\"\n  \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?person kg:6264 kg:4433 .\", \"># film editor of The Confession (kg:4433) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:3037 kg:4433 .\", \"># executive producer of The Confession (kg:4433) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:6861 kg:4433 .\", \"># cinematographer of The Confession (kg:4433) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:9840 kg:4320 .\", \"># cast member of Destiny (kg:4320) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:5793 kg:4320 .\", \"># screenwriter of Destiny (kg:4320) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:9840 kg:0514 .\", \"># cast member of The Waiting Room (kg:0514) is the person (?person)\"\n \t\t\t,\n \t\t\t\"?person kg:5793 kg:0514 .\" ,\"# screenwriter of The Waiting Room (kg:0514) is the person (?person)\"\n \t\t,\"}\" ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n \t\t  \t\t\"?film wdt:P57 wd:Q70986. \", \">// directed by a film editor\",\n \t\t  \t\t\"{ ?film wdt:P410 wd:Q2515339 }\", \">// edited by the same person\",\n \t\t  \t\t\"UNION\",\n \t\t  \t\t\"{ ?film wdt:P58 wd:Q70986 }\", \">// written by the same person\",\n \t\t  \t\t\"?film rdfs:label ?title.\", \">// get title of film\",\n \t\t  \t\t\"FILTER (LANG(?title) = 'en').\", \">// filter for English titles\",\n \t\t  \t\t\"FILTER (?title = \\\"Pay Day\\\"@en || ?title = \\\"Modern Times\\\"@en || ?title = \\\"The Floorwalker\\\"@en || ?title = \\\"Work\\\"@en).\", \">// match the specific titles\",\n \t\t  \t\t\"} GROUP BY ?film ?title\"\n \t  \t\t]}\n    \t\t\t \t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t]}\n     \t\t\t\t\t      \t\t\t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:4025 ?y .\",\n  \t\t\t\t         \"?x kg:1977 ?z .\",\n  \t\t            \t \"?x kg:3703 ?w .\",\n  \t\t            \t \"?x kg:8876 ?a .\",\n  \t\t            \t \"?x kg:1897 ?b .\",\n  \t\t            \t \"?x kg:2136 ?c .\"\n  \t\t            ]\n  \t\t}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P465 wd:Q28790 ; # wrote The Waiting Room\\nwdt:P465 wd:Q28791 ; # executive produced The Waiting Room\\nwdt:P465 wd:Q28792 . # edited The Waiting Room\\n?resource wdt:P465 wd:Q28793 ; # executive produced Fate\\nwdt:P465 wd:Q28794 . # edited Fate\\n?resource wdt:P465 wd:Q28795 . # executive produced The Confession\\n?resource wdt:P465 wd:Q28796 . # edited The Confession\\n}\\n\"]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?person wdt:P58 wd:Q6084069 . ?person wdt:P1431 wd:Q6084069 . ?person wdt:P1040 wd:Q6084069 .}\",\n  \t\t\"{?person wdt:P58 wd:Q5437360 . ?person wdt:P1431 wd:Q5437360 . ?person wdt:P1040 wd:Q5437360 .}\",\n  \t\t\"?person wdt:P1431 wd:Q12813010 .\",\n  \t\t\"?person wdt:P1040 wd:Q12813010 .\"\n  \t]\n \t}\n \t\t\t \t\t\t\t\t\t\t      \t\t"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:typeOfRole kg:8079 .\", \"># screenwriter of The Waiting Room\",\n \t\t\t\"?resource kg:typeOfRole kg:7206 .\", \"># film editor of The Waiting Room\",\n \t\t\t\"?resource kg:typeOfRole kg:4979 .\", \"># executive producer of The Waiting Room\",\n \t\t\t\"?resource kg:typeOfRole kg:4979 .\", \"># executive producer of The Confession\",\n \t\t\t\"?resource kg:typeOfRole kg:7206 .\", \"># film editor of The Confession\",\n \t\t\t\"?resource kg:wrote kg:0563 .\", \"># screenwriter of Fate\"\n \t\t,\"}\" ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"VALUES (?director ?writer) {\",\n    \" (wd:Q169450 wd:Q169450) # Jörn Donner\",\n    \" (wd:Q23875 wd:Q23875)   # Vilgot Sjöman\",\n    \" (wd:Q170699 wd:Q170699) # Hans Alfredson\",\n    \" (wd:Q46569 wd:Q46569)   # Gustaf Molander\",\n    \" (wd:Q22738 wd:Q22738)   # Ingmar Bergman\",\n    \"} \",\n    \"?film wdt:P31 wd:Q1142129 ;\", \"># instance of film\",\n    \"      wdt:P57 ?director .\", \"># directed by\"\n    ,\n    \"?film wdt:P50 ?writer .\", \"># written by\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\t\t \t  \t\t\t\t\t\t  \t \t\t\"query\": [\n     \"SELECT ?film WHERE {\"\n    \t]\n   \t  \t\t \t  \t\t\t \t\t}\n    \t\t \t \t\t \t  \t\t \t\t"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?film WHERE {\",\n       \"?film kg:9808/kg:0106/kg:0263/kg:6401/kg:3926 ?screenwriter .\",\n       \"?film kg:0265/kg:0106/kg:0263/kg:6401/kg:3926 ?director .\",\n       \"?film a kg:6825 .\"\n    \t]}\n   \t \t\t \t  \t\t\t\t\t\t\t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \"text}\",\n \t\t  \t\t\"?person wdt:P1698 ?film. \",\n \t\t  \t\t\"?person wdt:P108 ?organization. \",\n \t\t  \t\t\"?organization rdfs:label ?orgLabel. \",\n \t\t  \t\t\"FILTER(?orgLabel = \\\"The Waiting Room\\\"@en || ?orgLabel = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?person2 wdt:P57 ?film2. \",\n \t\t  \t\t\"?film2 rdfs:label ?film2Label. \",\n \t\t  \t\t\"FILTER(?film2Label = \\\"The Waiting Room\\\"@en || ?film2Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film3. \",\n \t\t  \t\t\"?film3 rdfs:label ?film3Label. \",\n \t\t  \t\t\"FILTER(?film3Label = \\\"The Waiting Room\\\"@en || ?film3Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film4. \",\n \t\t  \t\t\"?film4 rdfs:label ?film4Label. \",\n \t\t  \t\t\"FILTER(?film4Label = \\\"The Waiting Room\\\"@en || ?film4Label = \\\"Destiny The Confission\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film5. \",\n \t\t  \t\t\"?film5 rdfs:label ?film5Label. \",\n \t\t  \t\t\"FILTER(?film5Label = \\\"The Waiting Room\\\"@en || ?film5Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film6. \",\n \t\t  \t\t\"?film6 rdfs:label ?film6Label. \",\n \t\t  \t\t\"FILTER(?film6Label = \\\"The Waiting Room\\\"@en || ?film6Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film7. \",\n \t\t  \t\t\"?film7 rdfs:label ?film7Label. \",\n \t\t  \t\t\"FILTER(?film7Label = \\\"The Waiting Room\\\"@en || ?film7Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film8. \",\n \t\t  \t\t\"?film8 rdfs:label ?film8Label. \",\n \t\t  \t\t\"FILTER(?film8Label = \\\"The Waiting Room\\\"@en || ?film8Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film9. \",\n \t\t  \t\t\"?film9 rdfs:label ?film9Label. \",\n \t\t  \t\t\"FILTER(?film9Label = \\\"The Waiting Room\\\"@en || ?film9Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film10. \",\n \t\t  \t\t\"?film10 rdfs:label ?film10Label. \",\n \t\t  \t\t\"FILTER(?film10Label = \\\"The Waiting Room\\\"@en || ?film10Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film11. \",\n \t\t  \t\t\"?film11 rdfs:label ?film11Label. \",\n \t\t  \t\t\"FILTER(?film11Label = \\\"The Waiting Room\\\"@en || ?film11Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film12. \",\n \t\t  \t\t\"?film12 rdfs:label ?film12Label. \",\n \t\t  \t\t\"FILTER(?film12Label = \\\"The Waiting Room\\\"@en || ?film12Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film13. \",\n \t\t  \t\t\"?film13 rdfs:label ?film13Label. \",\n \t\t  \t\t\"FILTER(?film13Label = \\\"The Waiting Room\\\"@en || ?film13Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film14. \",\n \t\t  \t\t\"?film14 rdfs:label ?film14Label. \",\n \t\t  \t\t\"FILTER(?film14Label = \\\"The Waiting Room\\\"@en || ?film14Label = \\\"Destiny The Confession\\\"@en). \",\n"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t    \t\t\t\"SELECT ?resource WHERE {\"\n\t    \t\t\t,\"?resource wdt:P161 wd:Q6084069 .\"\n\t    \t\t\t,\"OPTIONAL {?resource wdt:P344 wd:Q6084069 }\"\n\t    \t\t\t,\"OPTIONAL {?resource wdt:P58 wd:Q6084069 }\"\n\t    \t\t\t,\"?resource wdt:P1040 wd:Q6084069 .\"\n\t    \t\t\t,\"?resource wdt:P344 wd:Q5265241 .\"\n\t    \t\t\t,\"?resource wdt:P1431 wd:Q12813010 .\"\n\t    \t\t\t,\"}\"\n\t \t\t\t ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:title \\\"The Waiting Room\\\" .\",\n \t\t\t\"?resource kg:role/kg:name \\\"cast member\\\" .\",\n \t\t\t\"?resource kg:role/kg:name \\\"film editor\\\" .\",\n \t\t\t\"?resource kg:role/kg:name \\\"screenwriter\\\" .\",\n \t\t\t\"?resource kg:role/kg:name \\\"director of photography\\\" .\",\n \t\t\t\"kg:5444 kg:executive_producer ?resource .\",\n \t\t\t\"kg:9231 kg:director_of_photography ?resource .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\n?editor wdt:P26 ?spouse.\\n?spouse wdt:P31 wd:Q5.\\n?spouse wdt:P468 ?filmworks.\\n?filmworks wdt:P179 wd:Q107916.\\nFILTER(?work IN (wd:Q270595, wd:Q270593, wd:Q270594, wd:Q270596, wd:Q270597)).\\n?work wdt:P50 ?spouse.\\n}\"\n] }"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\"?film1 wdt:P106 wd:Q7042855 .\", \">// The City Tramp is a film editor's work\",\n  \t\t\"?film1 wdt:P58 ?spouseWriter .\", \">// The spouse of the film editor wrote this film\",\n  \t\t\"?film2 wdt:P106 wd:Q567519 .\", \">// Katzelmacher is a film editor's work\",\n  \t\t\"?film2 wdt:P58 ?spouseWriter .\", \">// The same spouse of the film editor wrote this film\",\n  \t\t\"?film3 wdt:P106 wd:Q543382 .\", \">// Why Does Herr R. Run Amok? is a film editor's work\",\n  \t\t\"?film3 wdt:P58 ?spouseWriter .\", \">// The same spouse of the film editor wrote this film\",\n  \t\t\"?film4 wdt:P106 wd:Q327427 .\", \">// Whity is a film editor's work\",\n  \t\t\"?film4 wdt:P58 ?spouseWriter .\", \">// The same spouse of the film editor wrote this film\",\n  \t\t\"?film5 wdt:P106 wd:Q570483 .\", \">// In a Year of 13 Moons is a film editor's work\",\n  \t\t\"?film5 wdt:P58 ?spouseWriter .\", \">// The same spouse of the film editor wrote this film\",\n  \t\t\"?editor wdt:P1040 ?resource .\", \">// Find the resource for the film editor\",\n  \t\t\"?editor wdt:P26 ?spouseWriter .\", \">// The film editor is married to the writer\"\n  \t\t,\n  \t\t\"}\"\n  \t\t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 a kg:0195 .\",\n \t\t\t\"?film2 a kg:7392 .\",\n \t\t\t\"?film3 a kg:8858 .\",\n \t\t\t\"?film4 a kg:7713 .\",\n \t\t\t\"?film5 a kg:1608 .\",\n \t \t\t\"kg:7713 kg:8916 ?spouse .\",\n \t\t\t\"?spouse kg:1944 ?resource .\",\n \t\t\t\"?resource kg:2774 ?film1 .\",\n \t\t\t\"?resource kg:2774 ?film2 .\",\n \t\t\t\"?resource kg:2774 ?film3 .\",\n \t\t\t\"?resource kg:2774 ?film4 .\",\n \t\t\t\"?resource kg:2774 ?film5 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?director WHERE {\",\n \t\t  \t\t\"?director wdt:P31 wd:Q5 .\", \"@comment 'subject is a human'\",\n \t\t  \t\t\"?director wdt:P27 wd:Q628542 .\", \"@comment 'gender is female'\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424 .\", \"@comment 'film1 is a film'\",\n \t\t  \t\t\"?film1 rdfs:label ?title1 .\", \"@comment 'get the title of film1'\",\n \t\t  \t\t\"FILTER(LANG(?title1) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title1), 'tag der freiheit'))\",\n \t\t  \t\t\"?director wdt:P488 ?film1 .\", \"@comment 'the director edited film1'\",\n \t\t  \t\t\"?director wdt:P57 ?film1 .\", \"@comment 'the director directed film1'\",\n \t\t  \t\t\"?director wdt:P50 ?film1 .\", \"@comment 'the director wrote film1'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424 .\", \"@comment 'film2 is a film'\",\n \t\t  \t\t\"?film2 rdfs:label ?title2 .\", \"@comment 'get the title of film2'\",\n \t\t  \t\t\"FILTER(LANG(?title2) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title2), 'olympia'))\",\n \t\t  \t\t\"?director wdt:P488 ?film2 .\", \"@comment 'the director edited film2'\",\n \t\t  \t\t\"?director wdt:P57 ?film2 .\", \"@comment 'the director directed film2'\",\n \t\t  \t\t\"?director wdt:P50 ?film2 .\", \"@comment 'the director wrote film2'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424 .\", \"@comment 'film3 is a film'\",\n \t\t  \t\t\"?film3 rdfs:label ?title3 .\", \"@comment 'get the title of film3'\",\n \t\t  \t\t\"FILTER(LANG(?title3) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title3), 'triumph of the will'))\",\n \t\t  \t\t\"?director wdt:P488 ?film3 .\", \"@comment 'the director edited film3'\",\n \t\t  \t\t\"?director wdt:P57 ?film3 .\", \"@comment 'the director directed film3'\",\n \t\t  \t\t\"?director wdt:P50 ?film3 .\", \"@comment 'the director wrote film3'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"}\"\n \t\t \t\t ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q497617; wdt:P58 wd:Q497617; wdt:P1040 wd:Q497617. ?item wdt:P57 wd:Q158069; wdt:P58 wd:Q158069; wdt:P1040 wd:Q158069. ?item wdt:P57 wd:Q156497; wdt:P58 wd:Q156497; wdt:P1040 wd:Q156497. ?item wdt:P21 wd:Q6581072}\"\n    \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\t\"query\": [\n\t\t\t\"?resource kg:9010 ?directorFilm.\",\n\t\t\t\"?resource kg:5403 ?directorFilm.\",\n\t\t\t\"?resource kg:4328 ?directorFilm.\",\n\t\t\t\"?resource kg:3805 kg:3823.\",\n\t\t\t\"?directorFilm kg:1652 ?film1.\",\n\t\t\t\"?directorFilm kg:5606 ?film2.\",\n\t\t\t\"?directorFilm kg:9681 ?film3.\"\n\t\t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n \t\t  \t\t\"?resource wdk:P169 wd:Q2411087 .\", \">// editor of The Crazies (work ID)\"\n \t\t  \t\t]\n \t\t  \t\t}\n \t\t  \t\t\t\t\t\t\t\t\t  \t \t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?o}\"\n  \t\t,\"{ wd:Q219170 wdt:P58 ?x . wd:Q219170 wdt:P57 ?x }\"\n  \t\t,\"{ wd:Q198557 wdt:P58 ?x . wd:Q198557 wdt:P57 ?x }\"\n  \t\t,\"{ wd:Q219155 wdt:P58 ?x . wd:Q219155 wdt:P57 ?x }\"\n  \t\t,\"{ wd:Q1277329 wdt:P58 ?x . wd:Q1277329 wdt:P57 ?x }\"\n  \t\t,\"{ wd:Q627060 wdt:P1040 ?x }\"\n  \t\t,\"{ ?x wdt:P27 wd:Q16 }\"\n \t] }\n \t\t\t \t\t\t\t\t\t\t\t\t \t \t \t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:3067 kg:9199 .\", \"># resource director Day of the Dead (9199 is Day of the Dead's ID)\"\n \t\t\t,\"?resource kg:3067 kg:7961 .\", \"# resource director Monkey Shines\"\n \t\t\t,\"?resource kg:3067 kg:8180 .\", \"# resource director Dawn of the Dead\"\n \t\t\t,\"?resource kg:3067 kg:7971 .\", \"# resource director Survival of the Dead\"\n \t\t\t,\"?resource kg:3210 kg:9199 .\", \"# resource screenwriter Day of the Dead\"\n \t\t\t,\"?resource kg:3210 kg:7961 .\", \"# resource screenwriter Monkey Shines\"\n \t\t\t,\"?resource kg:3210 kg:8180 .\", \"# resource screenwriter Dawn of the Dead\"\n \t\t\t,\"?resource kg:3210 kg:7971 .\", \"# resource screenwriter Survival of the Dead\"\n \t\t\t,\"?resource kg:0514 kg:7526 .\" , \"# resource film editor The Crazies (7526 is The Crazies' ID)\"\n \t\t\t,\"?resource kg:8843 kg:5600 .\" ,\"kg:5600 kg:8443 ?resource\" ]} "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q1786950 wdt:P161 ?director .\", \">// Assuming Q1786950 is the identifier for Jackie Chan or the relevant person in question, replace with actual Wikidata ID if different or unknown. \",\n \t\t  \t\t\"?director wdt:P345 wd:Q28666 .\", \">// Police Story 2\",\n \t\t  \t\t\"OPTIONAL { ?director wdt:P345 wd:Q1079555 } .\", \">// Chinese Zodiac (optional as it's not always a requirement in the question)\",\n \t\t  \t\t\"?director wdt:P345 wd:Q28665 .\", \">// Police Story\",\n \t\t  \t\t\"OPTIONAL { ?director wdt:P345 wd:Q1079556 } .\", \">// The Fearless Hyena (optional as it's not always a requirement in the question)\",\n \t\t  \t\t\"?director wdt:P58 wd:Q216956 .\", \">// 1911\"\n \t  \t\t,\"}\" ]\n} "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q206182 . ?item wdt:P1431 wd:Q206182 . ?movie wdt:P57 ?item . ?movie wdt:P58 ?item . FILTER(?movie = wd:Q378013 || ?movie = wd:Q391143 || ?movie = wd:Q594033 || ?movie = wd:Q232108)}\"\n    \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?producer WHERE {\",\n \t\t\"  kg:7911 (kg:9361/kg:7818) ?director .\",\n \t\t\"  kg:7911 (kg:9685) ?producer .\",\n \t\t\"  ?director (kg:9361/kg:7818) kg:9655, kg:0643, kg:0165, kg:7514 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q2608479 wdt:P108 ?founder; wdt:P1053 ?employee.\",\n   \t\t\t\"?founder wdt:P107 wd:Q7904; OPTIONAL{?founder wdk:P39 wd:Q16959}.\",\n   \t\t\t\"?employee wdt:P107 wd:Q7904; OPTIONAL{?employee wdk:P39 wd:Q16959}.\",\n   \t\t\t\"?founder wdt:P108 ?employerCERN; wdt:P1053 ?employerW3C.\",\n   \t\t\t\"?employerCERN wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\",\n   \t\t\t\"?employerW3C wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\",\n   \t\t\t\"?founder wdt:P108 ?employerUni; wdt:P1053 ?employerPlessey.\",\n   \t\t\t\"?employerUni wdt:P17 wd:Q24; wdt:P31 wd:Q1058896; wdt:P102 wd:Q85956.\",\n   \t\t\t\"?employerPlessey wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\"\n   \t\t\t,\"?resource ?property ?value\"\n   \t\t\t,\"}\"\n  \t\t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\t\"?founder wdt:P112 wd:Q7095994 .\",\n  \t\t\t\"?founder wdt:P108 wd:Q42944 .\",\n  \t\t\t\"?founder wdt:P108 wd:Q37033 .\",\n  \t\t\t\"?founder wdt:P108 wd:Q7432436 .\",\n  \t\t\t\"?founder wdt:P108 wd:Q7204713 .\",\n  \t\t\"}\"\n  \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\"?resource kg:3032 kg:2052 .\",\n\t\t\t\t\"?resource kg:1104 kg:9538 .\",\n\t\t\t\t\"?resource kg:1104 kg:3783 .\",\n\t\t\t\t\"?resource kg:1104 kg:7797 .\",\n\t\t\t\t\"?resource kg:1104 kg:0564 .\"\n\t\t\t,\"}\"\n\t\t]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P57 ?writerEditorProducerDirector1, ?writerEditorProducerDirector2, ?writerEditorProducerDirector3 .\\n  ?writerEditorProducerDirector1 wdt:P106 wd:Q188492 ; # occupation: screenwriter\\n                                 wdt:P106 wd:Q157476 ; # occupation: film editor\\n                                 wdt:P106 wd:Q31881 ; # occupation: film producer\\n                                 wdt:P106 wd:Q72539 . # occupation: film director\\n  ?writerEditorProducerDirector2 wdt:P106 wd:Q188492, wd:Q157476, wd:Q31881, wd:Q72539 .\\n  ?writerEditorProducerDirector3 wdt:P106 wd:Q188492, wd:Q157476, wd:Q31881, wd:Q72539 .\\n  ?writerEditorProducerDirector1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@da .\\n  ?writerEditorProducerDirector2 rdfs:label \\\"Ole John\\\"@da .\\n  ?writerEditorProducerDirector3 rdfs:label \\\"Jørgen Leth\\\"@da .\\n}\\nLIMIT 1\"]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q1687239; wdt:P58 wd:Q1687239; wdt:P1040 wd:Q1687239; wdt:P162 wd:Q1687239.}\",\n     \t\t\"{?item wdt:P57 wd:Q35979475; wdt:P58 wd:Q35979475; wdt:P1040 wd:Q35979475; wdt:P162 wd:Q35979475.}\",\n     \t\t\"{?item wdt:P57 wd:Q562108; wdt:P58 wd:Q562108; wdt:P1040 wd:Q562108; wdt:P162 wd:Q562108.}\",\n     \t\t\"{?item wdt:P31 wd:Q11424}\"\n     \t\t ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?person1 <http://example.org/8695> ?film .\",\n \t\t\t\"?person1 <http://example.org/1894> ?film .\",\n \t\t\t\"?person1 <http://example.org/9245> ?film .\",\n \t\t\t\"?person1 <http://example.org/5044> ?film .\",\n \t\t\t\"OPTIONAL { ?person1 <http://example.org/0840> \\\"kg:0840\\\" }\",\n \t\t\t\"OPTIONAL { ?person1 <http://example.org/4421> \\\"kg:4421\\\" }\",\n \t\t\t\"?person2 <http://example.org/3691> ?film .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?person WHERE {\",\n    \t\t\"  ?film1 wdt:P31 wd:Q11424. \", \">// instance of film\",\n    \t\t\"  ?film1 rdfs:label ?title1. \",\n    \t\t\"  FILTER(LANG(?title1) = 'en'). \",\n    \t\t\"  FILTER(?title1 = 'Sin City'@en). \",\n    \t\t\"  ?person wdt:P57 ?film1. \", \">// director of film1\",\n    \t\t\"  ?person wdt:P162 ?film1. \", \">// executive producer of film1\",\n    \t\t\"  ?person wdt:P162 wd:Q4980369. \", \">// executive producer of From Dusk till Dawn: The Series\",\n    \t\t\"  ?film2 wdt:P31 wd:Q11424. \",\n    \t\t\"  ?film2 rdfs:label ?title2. \",\n    \t\t\"  FILTER(LANG(?title2) = 'en'). \",\n    \t\t\"  FILTER(?title2 = 'The Adventures of Sharkboy and Lavagirl in 3-D'@en). \",\n    \t\t\"  ?person wdt:P57 ?film2. \", \">// director of film2\",\n    \t\t\"  ?person wdt:P162 ?film2. \", \">// executive producer of film2\",\n    \t\t\"}\"\n    \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P58 wd:Q192115 . ?item wdt:P57 wd:Q192115 . ?item wdt:P161 wd:Q192115 . ?item wdt:P1040 wd:Q192115 . ?item wdt:P344 wd:Q656357 . ?item wdt:P1431 wd:Q15622760}\"\n     \t\t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:8073 kg:6169 .\", \"># executive producer of From Dusk till Dawn: The Series\"\n \t\t\t,\"?resource kg:4649 kg:2632 .\", \"># director of Sin City\"\n \t\t\t,\"?resource kg:0035 kg:2632 .\", \"># screenwriter of Sin City\"\n \t\t\t,\"?resource kg:0710 kg:2632 .\", \"># star of Sin City\"\n \t\t\t,\"?resource kg:0297 kg:2632 .\", \"># editor of Sin City\"\n \t\t\t,\"?resource kg:9651 kg:2632 .\", \"># cinematographer of Sin City\"\n \t\t\t,\"?resource kg:4649 kg:0710 .\", \"># director of The Adventures of Sharkboy and Lavagirl in 3-D\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\" wd:Q123456789 p:filmDirection ?statement1 .\", \">// Replace Q123456789 with the actual Wikidata ID of \" ,\"This Night\"\n \t\t  \t\t,\"?statement1 ps:p:filmDirection ?thisNightFilm .\",\n \t\t  \t\t\"?statement1 pq:P2093 ?directorWriterCinematographer .\", \">// P2093 is for 'position held', replace if needed with the correct property ID for director, cinematographer and writer roles in context of \" ,\"This Night\"\n \t\t  \t\t,\n \t\t  \t\t\"?directorWriterCinematographer wdt:P50 ?person .\", \">// P50 is for 'author' or 'creator', adjust as necessary to link person directly if needed differently for the role(s) involved.\"\n \t\t  \t\t,\n \t\t  \t\t\"?person p:filmDirection|p:scriptWriting|p:cinematography ?statement2 .\", \">// Adjust properties based on actual Wikidata property IDs for writing and cinematography roles\"\n \t\t  \t\t,\"?statement2 ps:(p:filmDirection|p:scriptWriting|p:cinematography) ?otherFilm .\",\n \t\t  \t\t\"?otherFilm wdt:P345 ?movieId .\", \">// P345 is 'IMDb ID', adjust if using other movie identifier\"\n \t\t  \t\t,\n \t\t  \t\t\"FILTER(?movieId = 'tt1234567'@en || ?movieId = 'tt2345678'@en || ?movieId = 'tt3456789'@en)\", \">// Replace with actual IMDb IDs for \" ,\"Rio das Mortes\", \"Lili Marleen\", \"Whity\"\n \t\t  \t\t,\n \t\t  \t\t\"?statement2 pq:P1077 ?role .\", \">// P1077 is 'type of creative work', adjust if needed to filter by specific roles like writing or editing\"\n \t\t  \t\t,\n \t\t  \t\t\"?person wdt:P50 ?resource .\" ,\"\\n\",\n \t\t  \t\t\"}\" ,\"\\n\"\n \t  \t\t]\n} "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x0 ?x1 wd:Q1699716}\",\n  \t\t\"?x0 wdt:P57 ?y0.\",\n  \t\t\"?x0 wdt:P58 ?y1.\",\n  \t\t\"?x0 wdt:P1040 ?y2.\",\n  \t\t\"?y0 wdt:P58 wd:Q823767.\",\n  \t\t\"?y0 wdt:P58 wd:Q686125.\",\n  \t\t\"?y0 wdt:P58 wd:Q327427.\",\n  \t\t\"?y0 wdt:P344 ?z.\"\n  \t]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:is_director_of kg:5269 .\",\n \t\t\t\"?x kg:is_screenwriter_of ?writings .\",\n \t\t\t\"?x kg:film_editor_of ?editing .\",\n \t\t\t\"?writings (kg:is_film/kg:is_episode_of)* kg:3960 .\",\n \t\t\t\"?writings (kg:is_film/kg:is_episode_of)* kg:6224 .\",\n \t\t\t\"?writings (kg:is_film/kg:is_episode_of)* kg:1489 .\",\n \t\t\t\"?editing (kg:is_film/kg:is_episode_of)* kg:3960 .\",\n \t\t\t\"?editing (kg:is_film/kg:is_episode_of)* kg:6224 .\",\n \t\t\t\"?editing (kg:is_film/kg:is_episode_of)* kg:1489 .\",\n \t\t\t\"FILTER(?writings != kg:5269)\"\n \t\t,\"}\"]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?work WHERE {\",\n \t\t  \t\t\"?person wdt:P31 wd:Q5 .\", \">// Human (instance of human)\",\n \t\t  \t\t\"?person wdt:P106 wd:Q725498 .\", \">// Occupation: Cinematographer\",\n \t\t  \t\t\"?film wdt:P345 \\\"Night_of_the_Living_Dead\\\"@en .\", \">// English title of the film \" ,\n \t\t  \t\t\"?film wdt:P57 ?person .\", \">// cinematographer of the film\",\n \t\t  \t\t\"?work wdt:P57 ?person .\", \">// person directed work\",\n \t\t  \t\t\"FILTER(?work != ?film)\", \">// exclude Night of the Living Dead itself\",\n \t\t  \t\t\"?work wdt:P1476 ?title.\", \">// title of the work in any language\",\n \t\t  \t\t\"?work wdt:P361 wd:Q2589077 .\", \">// instance of film, episode of television series or video\",\n \t\t  \t\t\"FILTER(?title = \\\"Martin\\\"@en || ?title = \\\"Season_of_the_Witch\\\"@en || ?title = \\\"The_Crazies\\\"@en)\", \">// filter for specific titles\"\n \t\t  \t\t,\"}\" ]\n} "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"{ ?x0 wdt:P344 ?x1 . ?x1 wdt:P27 wd:Q30 . }\"\n  \t\t, \"{ ?x0 wdt:P57 ?x2 . ?x2 wdt:P58 ?x2 . ?x2 wdt:P1040 ?x2 . }\"\n  \t\t, \"{ ?x2 wdt:P57 wd:Q1903317 . }\"\n  \t\t, \"{ ?x2 wdt:P57 wd:Q2520777 . }\"\n  \t\t, \"{ ?x2 wdt:P57 wd:Q623051 . }\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:9892 kg:0476 .\",\n \t\t\t\"?x kg:5276 kg:3590 .\",\n \t\t\t\"?x kg:2900 ?y1 .\",\n \t\t\t\"?x kg:3787 ?y2 .\",\n \t\t\t\"?x kg:6216 ?y3 .\",\n \t\t\t\"kg:2918 kg:2900 ?z1 .\",\n \t\t\t\"kg:7747 kg:3787 ?z2 .\",\n \t\t\t\"kg:5164 kg:6216 ?z3 .\",\n \t\t\t\"?y1 ?p1 ?resource .\",\n \t\t\t\"?y2 ?p2 ?resource .\",\n \t\t\t\"?y3 ?p3 ?resource .\" ,\n \t\t\t\"?z1 ?q1 ?resource .\",\n \t\t\t\"?z2 ?q2 ?resource .\",\n \t\t\t\"?z3 ?q3 ?resource\"\n \t\t,\"}\"]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?person WHERE {\",\n  \t\t\"  ?person wdt:P31 wd:Q5 .\", \"description>: Writer, Cinematographer, and Director}\",\n  \t\t\"  ?person p:P1086 [ ps:P1086 wd:Q247912 ; pq:P580 ?start ] .\",\n  \t\t\"  ?person wdt:P361 wd:Q247912 .\",\n  \t\t\"  ?film wdt:P57 ?person .\",\n  \t\t\"  ?film rdfs:label ?title FILTER(LANG(?title) = 'en')\",\n  \t\t\"  FILTER(CONTAINS(?title, 'Look at Life') || CONTAINS(?title, 'Anyone Lived in a Pretty How Town') || CONTAINS(?title, 'Filmmaker'))\",\n  \t\t\"  ?swFilm wdt:P57 ?person .\",\n  \t\t\"  ?swFilm rdfs:label ?starWarsTitle FILTER(LANG(?starWarsTitle) = 'en')\",\n  \t\t\"  FILTER(CONTAINS(?starWarsTitle, 'Star Wars Episode IV A New Hope'))\",\n  \t\t\"}\"\n \t]\n} "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?item wdt:P57 wd:Q1869678; wdt:P57 wd:Q613974; wdt:P57 wd:Q1415127; wdt:P58 wd:Q1869678; wdt:P58 wd:Q613974; wdt:P58 wd:Q1415127; wdt:P344 wd:Q1869678; wdt:P344 wd:Q613974; wdt:P344 wd:Q1415127; wdt:P1431 wd:Q17738.}\"\n \t]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x kg:is_screenwriter kg:4958 . ?x kg:is_director kg:6810 . ?x kg:is_director kg:7238 . ?x kg:is_executive_producer kg:7820}\"\n \t\t \t  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q689066. # directed by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P116 wd:Q689066. # produced by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P58 wd:Q273455. # written by Jørgen Leth\",\n    \"  ?film wdt:P118 wd:Q273455. # edited by Ole John (assuming Ole John is the same as Jørgen Leth for lack of specific information)\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film \",\n    \"{\",\n    \"  wd:Q1687239 wdt:P57 ?film .\", \">// Jens Jørgen Thorsen as director\",\n    \"  wd:Q1687239 wdt:P1040 ?film .\", \">// Jens Jørgen Thorsen as editor\",\n    \"  wd:Q562108 wdt:P58 ?film .\", \">// Jørgen Leth as screenwriter\",\n    \"  wd:Q35979475 wdt:P162 ?film .\", \">// Ole John as producer\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// instance of film\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?film kg:6845 kg:0888 .\",\n  \t\t                \"?film kg:4053 kg:4300 .\",\n  \t\t                \"?film kg:1364 kg:4300 .\",\n  \t\t                \"?film kg:5191 kg:0888 .\",\n  \t\t                \"?film kg:2033 kg:6893 .\"\n  \t\t            ]\n  \t\t}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?costumeDesigner WHERE {\"\n     \t\t,\"?film wdt:P31 wd:Q11424. \"\n     \t, \"?film wdt:P57 wd:Q6890922. \"\n     \t, \"?film wdt:P169 wd:?costumeDesigner. \"\n     \t, \"?film wdt:P58 wd:Q6890922. \" ]}\n   \t\t\t\t\t\t\t       \t\t\t"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{\n \t\t\t \t\t\"query\": [\n  \t    \t\t\t\"SELECT ?resource WHERE {\"\n\t    \t\t\t,\"?film wdt:P58 wd:Q551861 .\"\n\t    \t\t\t,\"?film wdt:P1040 wd:Q551861 .\"\n\t    \t\t\t,\"?film wdt:P1324 ?costumeDesigner .\" ,\"?costumeDesigner wdt:P106 wd:Q1323191 .\"\n\t    \t\t\t,\"FILTER(?film != wd:Q2615443 && ?film != wd:Q2336453 && ?film != wd:Q3530946 && ?film != wd:Q19885882 && ?film != wd:Q19544249)\"\n\t    \t\t\t,\"?resource wdt:P58 ?costumeDesigner .\"\n\t    \t\t\t,\"}\"\n\t \t\t\t\t]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film kg:4628 <http://example/kg:7463> .\", \"># screenwriter by Xavier Dolan (kg:7463 is Xavier Dolan) \",\n \t\t\t\"?film kg:1532 ?resource .\", \"># with costume designer (?resource to be found)\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . ?person wdt:P1698 ?film ; wdt:P50 ?author . ?author wdt:P108 ?producerOrg . ?producerOrg wdt:P31 wd:Q1730879 . ?film wdt:P57 ?director . ?film wdt:P244 ?title . FILTER(?title = 'Pietà'@en || ?title = 'Moebius'@en || ?title = 'Dream'@en) }\"]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t]}\n     \t\t\t\t\t      \t\t\t"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:6404 kg:9012 .\",\n  \t\t\t\t\t\"?x kg:8978 kg:9012 .\",\n  \t\t\t\t\t\"?x kg:0023 kg:9012 .\",\n  \t\t\t\t\t\"?x kg:9726 kg:9012 .\",\n  \t\t\t\t\t\"?x kg:6404 kg:6632 .\",\n  \t\t\t\t\t\"?x kg:8978 kg:6632 .\",\n  \t\t\t\t\t\"?x kg:0023 kg:6632 .\",\n  \t\t\t\t\t\"?x kg:9726 kg:6632 .\",\n  \t\t\t\t\t\"?x kg:6404 kg:2636 .\",\n  \t\t\t\t\t\"?x kg:8978 kg:2636 .\",\n  \t\t\t\t\t\"?x kg:0023 kg:2636 .\",\n  \t\t\t\t\t\"?x kg:9726 kg:2636 .\"\n  \t\t\t\t]\n  \t\t\t\t}\n  \t\t\t \t\t\t\t\t \t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\"\n     \t,\"?film wdt:P31 wd:Q11424. \"\n     \t,\"?film wdt:P57 wd:Q688490. \" ,\"\\n\"\n     \t,\"?film wdt:P50 wd:Q688490. \" ,\"\\n\"\n     \t,\"?film wdt:P1433 wd:Q688490. \"\n   \t,\"} LIMIT 1\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1687239 wdt:P57 ?film .\", \">// Jens Jørgen Thorsen as director\",\n    \"  wd:Q562108 wdt:P58 ?film .\", \">// Jørgen Leth as screenwriter\",\n    \"  wd:Q35979475 wdt:P1040 ?film .\", \">// Ole John as film editor\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// instance of a film\"\n   \t\t]}\n   \t\t\t\t\t\t       \t\t\t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"structural-element-0\" ,\n  \t                \t\"structural-element-1\",\n  \t                \t\"structural-element-2\"\n  \t\t            ] } "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q68906. # directed by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P110 wd:Q68906. # edited by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P58 wd:Q68906. # written by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P91 wd:Q68906. # produced by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P57 wd:Q234169. # directed by Jørgen Leth\",\n    \"  ?film wdt:P110 wd:Q234169. # edited by Jørgen Leth\",\n    \"  ?film wdt:P58 wd:Q234169. # written by Jørgen Leth\",\n    \"  ?film wdt:P91 wd:Q234169. # produced by Jørgen Leth\",\n    \"  ?film wdt:P57 wd:Q68907. # directed by Ole John\",\n    \"  ?film wdt:P110 wd:Q68907. # edited by Ole John\",\n    \"  ?film wdt:P58 wd:Q68907. # written by Ole John\",\n    \"  ?film wdt:P91 wd:Q68907. # produced by Ole John\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n  \t\t\"SELECT ?film WHERE {\"\n  \t\t\t,\"?film wdt:P31 wd:Q11424 .\"\n  \t\t\t,\"?film wdt:P57 wd:Q1687239 .\"\n  \t\t\t,\"?film wdt:P1040 wd:Q562108 .\"\n  \t\t\t,\"?film wdt:P58 wd:Q562108 .\"\n  \t\t\t,\"?film wdt:P162 wd:Q35979475 .\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film kg:6197 kg:0501 .\", \">// Jens Jørgen Thorsen as director of ?film\",\n \t\t\t\"?film kg:7044 kg:2538 .\", \">// Jørgen Leth as film editor of ?film\",\n \t\t\t\"?film kg:5693 kg:3494 .\", \">// Ole John as screenwriter of ?film\",\n \t\t\t\"?film kg:1566 kg:0501 .\", \">// Jens Jørgen Thorsen as producer of ?film\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?role WHERE {\",\n    \"  wd:Q2586970 wdt:P1303 ?role .\",\n    \"  ?film wdt:P57 wd:Q2586970 .\",\n    \"  ?film wdt:P458|wdt:P140 wd:Q2586970 .\",\n    \"  ?film wdt:P58 wd:Q2586970 .\",\n    \"  FILTER(?film = wd:Q3655555 || ?film = wd:Q3655541 || ?film = wd:Q3655542) }\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n    \t,\"wd:Q25479948 wdt:P57 ?director .\"\n    \t,\"?director wdt:P1040 wd:Q5437360 .\"\n    \t,\"?director wdt:P1431 wd:Q5437360 .\"\n    \t,\"?director wdt:P58 wd:Q5437360 .\"\n    \t,\"wd:Q25479948 wdt:P57 ?resource .\"\n    \t,\"?resource wdt:P1040 wd:Q12813010 .\"\n    \t,\"?resource wdt:P1431 wd:Q12813010 .\"\n    \t,\"?resource wdt:P58 wd:Q12813010 .\"\n    \t,\"wd:Q25479948 wdt:P57 ?resource .\"\n    \t,\"?resource wdt:P1040 wd:Q6084069 .\"\n    \t,\"?resource wdt:P1431 wd:Q6084069 .\"\n    \t,\"?resource wdt:P58 wd:Q6084069 .\"\n    \t,\"}\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?director kg:title \\\"Ember\\\" .\",\n \t\t\t\"?director kg:role kg:7743 .\",\n \t\t\t\"?film1 kg:title \\\"Fate\\\" .\",\n \t\t\t\"?film2 kg:title \\\"The Confession\\\" .\",\n \t\t\t\"?film3 kg:title \\\"The Waiting Room\\\" .\",\n \t\t\t\"?director kg:edit ?film1 .\",\n \t\t\t\"?director kg:produce ?film1 .\",\n \t\t\t\"?director kg:write ?film1 .\",\n \t\t\t\"?director kg:direct ?film1 .\",\n \t\t\t\"?director kg:edit ?film2 .\",\n \t\t\t\"?director kg:produce ?film2 .\",\n \t\t\t\"?director kg:write ?film2 .\",\n \t\t\t\"?director kg:direct ?film2 .\",\n \t\t\t\"?director kg:edit ?film3 .\",\n \t\t\t\"?director kg:produce ?film3 .\",\n \t\t\t\"?director kg:write ?film3 .\",\n \t\t\t\"?director kg:direct ?film3 .\",\n \t\t\t\"?resource ?property ?object\"\n \t\t,\"}\"]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?role WHERE {\\nwd:Q76142985 wdt:P3458 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P57 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P1104 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P729 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\"]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 wd:Q5437360 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q5437360 . ?director wdt:P57 wd:Q5437360 .}\",\n  \t\t\"{?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 wd:Q6084069 . ?director wdt:P58 wd:Q6084069 . ?director wdt:P1431 wd:Q6084069 . ?director wdt:P57 wd:Q6084069 .}\",\n  \t\t\"{?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 wd:Q12813010 . ?director wdt:P58 wd:Q12813010 . ?director wdt:P1431 wd:Q12813010 . ?director wdt:P57 wd:Q12813010 .}\"\n \t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?director <http://example.org/directorOf> <http://example.org/Ember> .\",\n \t\t\t\"?director <http://example.org/filmEditorOf> <http://example.org/Fate> .\",\n \t\t\t\"?director <http://example.org/screenwriterOf> <http://example.org/The_Waiting_Room> .\",\n \t\t\t\"?director <http://example.org/executiveProducerOf> <http://example.org/The_Confession> .\",\n \t\t\t\"?director <http://example.org/directorOf> <http://example.org/The_Confession> .\",\n \t\t\t\"OPTIONAL { ?director <http://example.org/directorOf> <http://example.org/Fate> }\",\n \t\t\t\"?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type .\",\n \t\t\t\"{ ?resource <http://purl.org/dc/terms/identifier> \\\"kg:4165\\\"^^<http://www.w3.org/2001/XMLSchema#string> } UNION { ?resource <http://purl.org/dc/terms/identifier> \\\"kg:7137\\\"^^<http://www.w3.org/2001/XMLSchema#string> } UNION { ?resource <http://purl.org/dc/terms/identifier> \\\"kg:5315\\\"^^<http://www.w3.org/2001/XMLSchema#string> } UNION { ?resource <http://purl.org/dc/terms/identifier> \\\"kg:6383\\\"^^<http://www.w3.org/2001/XMLSchema#string> }\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P3457 wd:Q2118690 ;\", \"># P3457 is 'executive producer', Q2118690 is David Zucker, Jim Abrahams and Jerry Zucker (group)\"\n   \t,\"  ?film wdt:P725 wd:Q2118690 .\", \"# P725 is 'director'\"\n   \t,\"  ?film wdt:P57 wd:Q2118690 .\", \"# P57 is 'author' or 'screenwriter'\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film rdfs:label \\\"Moebius\\\"@en .\\n?film wdt:P57 ?editorCinematographer . # editor or cinematographer\\n?editorCinematographer wdt:P50 wd:Q639681 . # person with ID Q639681 (Jean-Pierre Denys)\\n\\n?film2 wdt:P31 wd:Q11424 .\\n?film2 rdfs:label \\\"One on One\\\"@en .\\n?film2 wdt:P57 ?editorCinematographer .\\n\\n?film3 wdt:P31 wd:Q11424 .\\n?film3 rdfs:label \\\"Amen.\\\"@en .\\n?film3 wdt:P57 ?editorCinematographer .\\n\\n?work wdt:P50 wd:Q639681 . # work by Jean-Pierre Denys\\n?work wdt:P411 wd:Q245577 . # executive producer of Pietà\\n?work wdt:P57 wd:Q639681 . # director of Pietà\\n\\n?resource ?property ?value.\\n}\\n\"]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?editor wdt:P1040 wd:Q13471372 . ?editor wdt:P1040 wd:Q17041657 . ?editor wdt:P1040 wd:Q462025 . ?editor wdt:P57 wd:Q483197 . ?editor wdt:P1431 wd:Q483197 . ?editor wdt:P344 wd:Q483197}\"\n \t]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:6256 kg:3231 .\", \"># ?resource is film editor of Pietà\",\n \t\t\t\"?resource kg:4656 kg:3231 .\", \"># ?resource executive produced Pietà\",\n \t\t\t\"?resource kg:8051 kg:3231 .\", \"># ?resource directed Pietà\",\n \t\t\t\"?resource kg:2400 kg:6915 .\", \"># ?resource is director of photography for Moebius\",\n \t\t\t\"?resource kg:2400 kg:8152 .\", \"># ?resource is director of photography for One on One\",\n \t\t\t\"?resource kg:2400 kg:0511 .\" ]} "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film wdt:P345 ?title.\\n  ?film wdt:P784 wd:Q21960. # edited by Rainer Werner Fassbinder\\n  ?film wdt:P1027 wd:Q21960. # directed by Rainer Werner Fassbinder\\n  ?film wdt:P1648 wd:Q21960. # starred Rainer Werner Fassbinder\\n  ?resource wdt:P57 ?film. # cinematographer of the film\\n}\\n\"]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t,\"?film wdt:P57 wd:Q44426 .\" ]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t\t\t  \t  \t\t\t"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?cinematographer\",\n \t\t\"WHERE {\",\n \t\t\t\"?film kg:7472 kg:8766 .\", \">// Fassbinder directed the film\",\n \t\t\t\"?film kg:5382 ?cinematographer .\", \">// The cinematographer of the film\",\n \t\t\t\"?film kg:6652 kg:8766 .\" ,\"\\t\\t}// Fassbinder was a cast member in the film\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?influencee ?founder WHERE {\",\n    \"  ?actor wdt:P31 wd:Q5 ;\", \"# Assuming Q5 is Human, adjust if necessary\",\n    \"         wdt:P668 wd:Q??? .\", \"# Replace with actual Wikidata ID for influence relation\",\n    \"  wd:Q??? wdt:P274 ?actor .\", \"# Replace with actual IDs for Wolfgang Ambros and Jan-Mari Carlotti\",\n    \"  wd:Q??? wdt:P274 ?actor .\", \"# Replace with actual IDs for Carolyn Dennis and Sara Dylan\",\n    \"  wd:Q??? wdt:P102 ?founder .\", \"# Replace with actual ID for Alexandria Monroe High School\"\n   \t]}\n \t\t\t\t\t\t\t\t  \t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{\n \t\t\t \t  \t\t\"query\": [\n  \t\t \t  \t\t\"{ ?item wdt:P106 wd:Q33999 . \"\n  \t\t \t  \t\t]}\n  \t\t \t\t \t  \t\t\t\t \t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?X kg:3414 kg:7420 .\",\n \t\t\t\"?X kg:3414 kg:8556 .\",\n \t\t\t\"?Y kg:7895 ?Z .\",\n \t\t\t\"?Z kg:9745 kg:1445 .\",\n \t\t\t\"?Z kg:9745 kg:9851 .\",\n \t\t\t\"?W kg:7707 ?V .\",\n \t\t\t\"?V kg:6841 kg:7805\"\n \t\t,\"}\"]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n  ?person wdt:P39 wd:Q7014;           # Member of World Wide Web Consortium (Q7014)\\n           wdt:P39 wd:Q25686;            # Member of Open Data Institute (Q25686)\\n           wdt:P108 wd:Q11676;           # Employer Plessey (Q11676)\\n           wdt:P141 wd:Q3918;            # Employed by CERN (Q3918)\\n           wdt:P141 wd:Q25056.           # Employed by School of Electronics and Computer Science, University of Southampton (Q25056)\\n}\\n\"]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n     \"SELECT ?resource WHERE {\"\n   \t,\"?resource wdt:P108 wd:Q7204713 .\"\n    ,\"?resource wdt:P108 wd:Q42944 .\"\n    ,\"?resource wdt:P108 wd:Q7432436 .\"\n    ,\"?resource wdt:P112 wd:Q7095994 .\"\n    ,\"?resource wdt:P112 wd:Q37033 .\"\n    \t,\"}\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\"  ?resource kg:2985 kg:5212 .\", \">// founded by World Wide Web Consortium and Open Data Institute\\n\",\n\t\t\t\"  ?resource kg:7697 kg:2151 .\", \">// employed by CERN\\n\",\n\t\t\t\"  ?resource kg:7166 kg:2151 .\", \">// employed by Plessey\\n\",\n\t\t\t\"  ?resource kg:9015 kg:2151 .}\", \">// employed by School of Electronics and Computer Science, University of Southampton\\n\"\n\t\t\t]}\n   \t \t\t\t\t\t      \t\t\t\t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t  \t \t\t\"query\": [\n      \"SELECT ?resource WHERE {\"\n    ]\n}\n    \t\t \t\t \t  \t \t  \t "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n   \t,\"?film1 wdt:P57 ?director .\"\n    ,\"?film1 wdt:P86 ?composer .\"\n    ,\"?film1 wdt:P1040 ?editor .\"\n    ,\"wd:Q1165050 wdt:P58 ?screenwriter .\"\n    ,\"?film1 wdt:P344 ?cinematographer .\"\n    ,\"?film1 wdt:P161 ?star .\"\n    ,\"?director wdt:P57 wd:Q192115 .\"\n    ,\"?director wdt:P57 wd:Q1653396 .\"\n    ,\"?director wdt:P57 wd:Q128493 .\"\n    ,\"FILTER(?film1 != wd:Q1165050)\"\n   \t,\"VALUES ?film1 {wd:Q1165050}\"\n    \t,\"?screenwriter wdt:P58 wd:Q1165050 .\"\n    \t,\"?cinematographer wdt:P344 wd:Q1165050 .\"\n    \t,\"?star wdt:P161 wd:Q1165050 .\"\n    \t,\"?composer wdt:P86 wd:Q1165050 .\"\n    \t,\"?editor wdt:P1040 wd:Q1165050 .\"\n   \t,\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:3045 kg:9019 .\", \"># screenwriter of Planet Terror\"\n \t\t\t,\"?resource kg:0231 kg:9019 .\", \"># director of Planet Terror\"\n \t\t\t,\"?resource kg:0777 kg:9019 .\", \"># cinematographer of Planet Terror\"\n \t\t\t,\"?resource kg:0258 kg:9019 .\", \"># star of Planet Terror\"\n \t\t\t,\"?resource kg:2781 kg:9019 .\", \"># composer of Planet Terror\"\n \t\t\t,\"?resource kg:8650 kg:4927 .\", \"># film editor of Sin City: A Dame to Kill For\"\n \t\t\t,\"?resource kg:0231 kg:4927 .\", \"># director of Sin City: A Dame to Kill For\"\n \t\t\t,\"?resource kg:8650 kg:7049 .\", \"># film editor of Machete\"\n \t\t\t,\"?resource kg:0231 kg:7049 .\", \"># director of Machete\"\n \t\t\t,\"?resource kg:8650 kg:7049 .\", \"># film editor of Sin City (redundant, but for completeness)\"\n \t\t\t,\"?resource kg:0231 kg:7049 .\" ]} "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?role ?work WHERE {\",\n    \"  wd:Q187695 wdt:P3452 ?role ;\",\n    \"          wdt:P106/wikibase:directClaim ?statement .\",\n    \"  ?statement prov:wasDerivedFrom ?source .\",\n    \"  ?source pr:P3452 [ ps:P3452 wd:Q789 ] .\",\n    \"  OPTIONAL { wd:Q187695 wdt:P106/wikibase:directClaim ?editStatement .\",\n    \"             ?editStatement prov:wasDerivedFrom ?editSource .\",\n    \"             ?editSource pr:P106 [ ps:P106 wd:Q234516 ] }\",\n    \"  FILTER ( ?role = wd:Q789 || EXISTS { ?editStatement prov:wasDerivedFrom ?editSource } )\",\n    \"}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\t\t \t  \t \t\t \t  \t\t \t\"query\": [\n     \"SELECT ?resource WHERE {\"\n    ]\n}\n   \t  \t\t \t  \t\t \t\t\t \t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { kg:5540 kg:7483 ?resource . kg:5540 kg:0982 ?resource . kg:5540 kg:2976 ?resource . kg:5540 kg:4628 ?resource . ?resource kg:6638 kg:8420 }\"\n \t]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?producer wdt:P102 wd:Q78546 ;\", \"@language:en .\", \">// Organization founded by the producer\",\n \t\t  \t\t\"?film wdt:P31 wd:Q1142419 ;\", \"@language:en .\", \">// Instance of film\",\n \t\t  \t\t\"?film wdt:P57 ?producer ;\", \"@language:en .\", \">// The producer directed the film\",\n \t\t  \t\t\"?film wdt:P50 ?producer ;\", \"@language:en .\", \">// The producer wrote the film\",\n \t\t  \t\t\"VALUES ?title { \\\"The Brahma Diamond\\\"@en \\\"His Lost Love\\\"@en \\\"The Birth of a Nation\\\"@en }\",\n \t\t  \t\t\"?film rdfs:label ?title .\",\n \t\t  \t\t\"?resource wdt:P1695 ?producer ;\", \"@language:en .\", \">// The producer is associated with the resource\",\n \t\t  \t\t\"}\"\n \t  \t\t]\n} "}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z}\",\n  \t\t\"?x wdt:P106 wd:Q3282637.\",\n  \t\t\"?x wdt:P112 wd:Q3011043.\",\n  \t\t\"?x wdt:P112 wd:Q219400.\",\n  \t\t\"?x wdt:P112 wd:Q64434913.\",\n  \t\t\"?a wdt:P57 ?x.\",\n  \t\t\"?b wdt:P58 ?x.\",\n  \t\t\"?c wdt:P57 ?x.\"\n\t \t,\n  \t\t\"?a rdfs:label 'The Brahma Diamond'@en.\",\n  \t\t\"?b rdfs:label 'His Lost Love'@en.\",\n  \t\t\"?c rdfs:label 'The Birth of a Nation'@en.\"\n \t]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\n \t\t\"?producer kg:8141/kg:2511/kg:8008 ?company .\",\n \t\t\"?producer kg:5337 ?movie1 .\",\n \t\t\"?producer kg:7404 ?movie2 .\",\n \t\t\"?movie1 a kg:7916 .\",\n \t\t\"?movie2 a kg:2641 .\",\n \t\t\"?movie1 kg:2683 ?birth_of_a_nation .\",\n \t\t\"?birth_of_a_nation a kg:2683\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P378 wd:Q123456 . # Replace Q123456 with the actual Wikidata ID of Brecha's executive producer, editor, composer, cinematographer, and director\\n}\\n\"]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?p wd:Q4959991} UNION {?x ?p ?y}\",\n     \t\t\"?y wdt:P57 ?director.\",\n     \t\t\"?y wdt:P86 ?composer.\",\n     \t\t\"?y wdt:P58 ?screenwriter.\",\n     \t\t\"?y wdt:P1040 ?editor.\",\n     \t\t\"?y wdt:P1431 ?executiveProducer.\",\n     \t\t\"?director wdt:P344 ?cinematographer.\",\n     \t\t\"wd:Q7243050 wdt:P58 ?screenwriter.\",\n     \t\t\"wd:Q5375110 wdt:P58 ?screenwriter.\"\n     \t]\n     \t}\n     \t \t\t\t\t  \t\t\t\t \t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x0 ?p0 kg:3126 .\",\n  \t\t                \"?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/FilmEditor> .\",\n  \t\t                \"?x1 ?p1 kg:3126 .\",\n  \t\t                \"?x1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/ExecutiveProducer> .\",\n  \t\t                \"?x2 ?p2 kg:3126 .\",\n  \t\t                \"?x2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/MusicComposer> .\",\n  \t\t                \"?x3 ?p3 kg:3126 .\",\n  \t\t                \"?x3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Cinematographer> .\",\n  \t\t                \"?x4 ?p4 kg:3126 .\",\n  \t\t                \"?x4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Director> .\",\n  \t\t                \"?x0 ?p5 kg:2746 .\",\n  \t\t                \"?x0 ?p6 kg:0465 .\"\n  \t\t            ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?resource WHERE {\"\n    \t\t\t,\"?resource wdt:P31 wd:Q5 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q24976929 .\" ,\"%Sally Ride Science%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q180009 .\" ,\"%Center for International Security and Cooperation%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q34567 .\" ,\"%Stanford University%\"\n    \t\t\t,\"?resource wdt:P1412 wd:Q3358 .\" ,\"%National Aeronautics and Space Administration%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q9067 .\" ,\"%University of California, San Diego%\"\n    \t\t\t,\"}\"\n]\n} "}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\t\"?resource wdt:P112 wd:Q55206 .\", \">// founded by Sally Ride Science\",\n  \t\t\t\"?resource wdt:P108 wd:Q5059715 .\", \">// employer is Center for International Security and Cooperation\",\n  \t\t\t\"?resource wdt:P108 wd:Q41506 .\", \">// employer is Stanford University\",\n  \t\t\t\"?resource wdt:P108 wd:Q23548 .\", \">// employer is National Aeronautics and Space Administration\",\n  \t\t\t\"?resource wdt:P108 wd:Q622664 .}\", \">// employer is University of California, San Diego\"\n  \t\t]}\n  \t\t \t\t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2802 ?y .\",\n \t\t\"?x kg:9752 ?z .\",\n \t\t\"?x kg:4056 ?w .\",\n \t\t\"?x kg:5717 ?v .\",\n \t\t\"?x kg:9653 ?u .\",\n \t\t\"?x kg:8685 ?t .\",\n \t\t\"?t kg:3913 ?s .\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n{\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P108 wd:Q2498706 . # workplace\\n}\\nUNION\\n{\\n?resource wdt:P108 wd:Q2498706 . # workplace\\n?resource wdt:P361 wd:Q538886 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P179 wd:Q2498706 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P361 wd:Q538886 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P179 wd:Q2498706 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P361 wd:Q538886 . # part of\\n}\\nSERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\\n}\"]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x wdt:P1040 wd:Q656357 .\",\n  \t\t                \"?x wdt:P1040 wd:Q192115 .\",\n  \t\t                \"?x wdt:P1040 wd:Q1165050 .\",\n  \t\t                \"?x wdt:P1040 wd:Q93853 .\",\n  \t\t                \"?x wdt:P57 ?y .\"\n  \t             ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:3518 kg:6479 .\", \"># star (cast member) and composer\",\n \t\t\t\"?x kg:3518 kg:8477 .\", \"># star (cast member) and screenwriter\",\n \t\t\t\"?x kg:5839 kg:1335 .\", \"># director of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\t\"?x kg:5839 kg:6288 .\", \"># director of Planet Terror\",\n \t\t\t\"?x kg:5839 kg:3082 .\", \"># director of Sin City\",\n \t\t\t\"?x kg:5839 kg:9541 .\", \"># director of Once Upon a Time in Mexico\",\n \t\t\t\"?x kg:4422 kg:1335 .\", \"># film editor of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\t\"?x kg:4422 kg:6288 .\", \"># film editor of Planet Terror\",\n \t\t\t\"?x kg:4422 kg:3082 .\", \"># film editor of Sin City\",\n \t\t\t\"?x kg:4422 kg:9541 .\", \"># film editor of Once Upon a Time in Mexico\",\n \t\t\t\"?x kg:9818 kg:6288 .\", \"># cinematographer of Planet Terror\",\n \t\t\t\"?x kg:9818 kg:3082 .\", \"># cinematographer of Sin City\",\n \t\t\t\"?x kg:9818 kg:9541 .\", \"># cinematographer of Once Upon a Time in Mexico\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t]\n \t \t\t\t}\n \t\t  \t\t\t\t\t\t\t\t\t  \t\t\t\t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n \t\t\t \t\t\"query\": [\n  \t    \t\t\t\"SELECT ?resource WHERE {\",\n\t    \t\t\t\"?x wdt:P1431 wd:Q29011 .\", \">// executive producer of Howl's Moving Castle\"\n\t    \t\t\t,\"?x wdt:P58 wd:Q29011 .\", \">// screenwriter of Howl's Moving Castle\"\n\t    \t\t\t,\"?x wdt:P108 ?resource .\" ,\">// employer of the person who is both executive producer and writer of Howl's Moving Castle\"\n\t    \t\t\t,\"VALUES ?resource { wd:Q1136386 wd:Q947907 wd:Q11490471 wd:Q11371930 wd:Q182950 wd:Q1054807 } .\" ,\"\\n\" ,\">// possible employers\"\n\t    \t\t\t,\"}\"\n\t\t \t\t]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{\n \t\t\"query\": [\n\t\t\t\"{\",\n\t\t\t\t\"?x ?r <http://kg.example/kg:2812> .\",\n\t\t\t\t\"?x <http://kg.example/kg:0338> <http://kg.example/kg:5910> .\",\n\t\t\t\t\"?x <http://kg.example/kg:0338> <http://kg.example/kg:0820> .\",\n\t\t\t\t\"?x <http://kg.example/kg:0338> <http://kg.example/kg:6491> .\",\n\t\t\t\t\"?x <http://kg.example/kg:0201> ?y .\",\n\t\t\t\t\"?x <http://kg.example/kg:4357> ?z .\"\n\t\t\t,\"}\",\n\t\t\t\"{\",\n\t\t\t\t\"?w ?r <http://kg.example/kg:2812> .\",\n\t\t\t\t\"?w <http://kg.example/kg:0338> <http://kg.example/kg:5322> .\",\n\t\t\t\t\"?w <http://kg.example/kg:0338> <http://kg.example/kg:0791> .\",\n\t\t\t\t\"?w <http://kg.example/kg:0338> <http://kg.example/kg:6191> .\"\n\t\t\t,\"}\"\n\t\t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?item wdt:P31 wd:Q5 .\"\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t      \t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t    \t\t\t\"{ ?item wdt:P57 wd:Q17738 ;\",\n  \t    \t\t\t\"       wdt:P58 wd:Q17738 ;\",\n  \t    \t\t\t\"       wdt:P1431 wd:Q17738 .\",\n  \t    \t\t\t\"?item wdt:P57 wd:Q613974 ;\",\n  \t    \t\t\t\"      wdt:P58 wd:Q613974 .\",\n  \t    \t\t\t\"?item wdt:P57 wd:Q1415127 ;\",\n  \t    \t\t\t\"      wdt:P58 wd:Q1415127 .\",\n  \t    \t\t\t\"?item wdt:P57 wd:Q208910 ;\",\n  \t    \t\t\t\"      wdt:P58 wd:Q208910 .\",\n  \t    \t\t\t\"?item wdt:P344 wd:Q1609393 ;\",\n  \t    \t\t\t\"      wdt:P57 wd:Q1609393 ;\",\n  \t    \t\t\t\"      wdt:P58 wd:Q1609393 ;\",\n  \t    \t\t\t\"      wdt:P1431 wd:Q1609393 .}\",\n  \t    \t\t\t\"{ ?item wdt:P57 wd:Q17738 ;\",\n  \t    \t\t\t\"       wdt:P58 wd:Q17738 ;\",\n  \t    \t\t\t\"       wdt:P1431 wd:Q17738 .}\"\n  \t\t      ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:6062 kg:2618 .\",\n \t\t\t\"?resource kg:7026 kg:2562 .\",\n \t\t\t\"?resource kg:6062 kg:1953 .\",\n \t\t\t\"?resource kg:6062 kg:2562 .\",\n \t\t\t\"?resource kg:6062 kg:1146 .\",\n \t\t\t\"?resource kg:6614 kg:9935 .\",\n \t\t\t\"?resource kg:7026 kg:9935 .\",\n \t\t\t\"?resource kg:4089 kg:9935 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?cinematographer ?director ?editor ?producer WHERE {\",\n \t  \t\t\"  ?film1 wdt:P31 wd:Q1142470 ;\", \"@\"\n \t  \t\t,\"    wdt:P57 wd:%cinematographer% ;\", \"@\"\n \t  \t\t,\"    wdt:P75 wd:%director% ;\", \"@\"\n \t  \t\t,\"    wdt:P1186 wd:%editor%.@\", \"@\"\n \t  \t\t,\"  ?film2 wdt:P31 wd:Q1142470 ;\", \"@\"\n \t  \t\t,\"    wdt:P98 wd:%producer%.@\", \"@\"\n \t  \t\t,\"}\", \"@\"\n \t  \t\t,\"FILTER(LANG(?title) = 'en').\", \"@\"\n \t  \t\t,\"VALUES ?film1 { wd:Q635524 wd:Q635527 }.\", \"@\"\n \t  \t\t,\"VALUES ?film2 { wd:Q189015 wd:Q189016 }.@\", \"@\"\n \t\t \t\t ]\n} "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z} UNION {?a ?b ?c}\",\n  \t\t\"?x wdt:P1040 wd:Q1473406.\",\n  \t\t\"?x wdt:P57 wd:Q2085.\",\n  \t\t\"?x wdt:P344 wd:Q3485595.\",\n  \t\t\"?a wdt:P1431 ?z.\",\n  \t\t\"?b wdt:P1431 ?c.\",\n  \t\t\"?z wdt:P1140 wd:Q1140578.\",\n  \t\t\"?c wdt:P1140 wd:Q1511905.\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?cinematographer ?director ?editor\",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 kg:3716 ?director .\", \">// ?director is the director of Rabbits and Six Men Getting Sick\",\n \t\t\t\"?film1 kg:0081 ?cinematographer .\", \">// ?cinematographer is the cinematographer of Rabbits and Six Men Getting Sick\",\n \t\t\t\"?film1 kg:5438 ?editor .\", \">// ?editor is the film editor of Rabbits and Six Men Getting Sick\",\n \t\t\t\"kg:6298 kg:2839 ?director .\", \">// ?director executive produced Twin Peaks\",\n \t\t\t\"kg:5435 kg:2839 ?director .\", \">// ?director executive produced Twin Peaks: Fire Walk with Me\",\n \t\t\t\"?sonFilm kg:2839 ?director .\", \">// ?director executive produced My Son, My Son, What Have Ye Done?\",\n \t\t\t\"FILTER(?film1 = kg:5660 || ?film1 = kg:8504)\",\n \t\t\t\"FILTER(?sonFilm = kg:4868)\"\n \t\t,\"}\" ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource1 ?resource2 WHERE {\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en').\",\n \t\t  \t\t\"?film1 wdt:P57 ?director.\",\n \t\t  \t\t\"?film1 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film1 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film2 rdfs:label ?title2 FILTER(LANG(?title2) = 'en').\",\n \t\t  \t\t\"?film2 wdt:P57 ?director.\",\n \t\t  \t\t\"?film2 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film2 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film3 rdfs:label ?title3 FILTER(LANG(?title3) = 'en').\",\n \t\t  \t\t\"?film3 wdt:P57 ?director.\",\n \t\t  \t\t\"?film3 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film3 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film4 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film4 rdfs:label ?title4 FILTER(LANG(?title4) = 'en').\",\n \t\t  \t\t\"?film4 wdt:P57 ?director.\",\n \t\t  \t\t\"?film4 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film4 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?director wdt:P107 wd:Q7092.\",\n \t\t  \t\t\"?director wdt:P1480 ?spouse1.\",\n \t\t  \t\t\"?spouse1 rdfs:label ?name1 FILTER(LANG(?name1) = 'en').\",\n \t\t  \t\t\"FILTER(?name1 = \\\"Lita Grey\\\"@en || ?name1 = \\\"Mildred Harris\\\"@en).\",\n \t\t  \t\t\"?director wdt:P1480 ?spouse2.\",\n \t\t  \t\t\"?spouse2 rdfs:label ?name2 FILTER(LANG(?name2) = 'en').\",\n \t\t  \t\t\"FILTER(?name2 = \\\"Oona O'Neill\\\"@en).\",\n \t\t  \t\t\"?resource1 wdt:P31 wd:Q5.\",\n \t\t  \t\t\"{?director wdt:P698 ?resource1} UNION {?spouse1 wdt:P698 ?resource1}\",\n \t\t  \t\t\"?resource2 wdt:P31 wd:Q5.\",\n \t\t  \t\t\"{?director wdt:P698 ?resource2} UNION {?spouse2 wdt:P698 ?resource2}\"\n \t\t  \t\t,\"}\" ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x1 wdt:P57 wd:Q374172 . ?x1 wdt:P1040 wd:Q374172 .}\",\n  \t\t\"?x1 wdt:P26 wd:Q32337 .\",\n  \t\t\"{?x2 wdt:P57 wd:Q166739 . ?x2 wdt:P1040 wd:Q166739 .}\",\n  \t\t\"?x2 wdt:P26 wd:Q241019 .\",\n  \t\t\"{?x3 wdt:P57 wd:Q2449461 . ?x3 wdt:P1040 wd:Q2449461 .}\",\n  \t\t\"?x3 wdt:P26 wd:Q32337 .\",\n  \t\t\"{?x4 wdt:P57 wd:Q45602 . ?x4 wdt:P1040 wd:Q45602 .}\",\n  \t\t\"?x4 wdt:P26 wd:Q137808 .\"\n  \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?directorEditor ?spouse WHERE {\",\n \t\t\t\"?directorEditor kg:6055 ?film .\", \"@comment: director of film\",\n \t\t\t\"?directorEditor kg:8890 ?film .\", \"@comment: editor of film\",\n \t\t\t\"?film kg:2398 ?title .\", \"@comment: the film title\",\n \t\t\t\"{?directorEditor kg:5502 kg:9015} UNION {?directorEditor kg:5502 kg:5605}\", \"@comment: married to Lita Grey or Mildred Harris\",\n \t\t\t\"?spouse kg:5384 ?title .\", \"@comment: spouse involved with The Kid\",\n \t\t\t\"OPTIONAL { ?spouse kg:8719 ?title }\", \"@comment: spouse also involved with A Woman (optional)\",\n \t\t\t\"OPTIONAL { ?spore kg:1117 ?title }\", \"@comment: spouse also involved with Modern Times (typo in 'spore' instead of 'spouse')\",\n \t\t\t\"?directorEditor kg:5028 ?spouse .\" ]} "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q89567 wdt:P136 ?resource1 . # written by\\n  wd:Q89567 wdt:P120 ?resource2 . # edited by\\n  wd:Q89567 wdt:P57 ?resource3 . # directed by\\n  ?resource (wdt:P21|wdt:P106) wd:Q6581097 .\\n}\"]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?charlieChaplin wdt:P31 wd:Q5 .\"\n  \t\t              \t\t]\n  \t\t\t          }\n  \t\t\t\t       \t\t\t\t \t\t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\n \t\t\t \t\t\"query\": [\n  \t    \t\t\t\"{?out_0 ?p_0 kg:9322}\",\n  \t\t\t\t\t\"?out_0 kg:4388 kg:7658\",\n  \t\t\t\t\t\"?out_0 kg:9313 kg:7722\",\n  \t\t\t\t\t\"?x_0 kg:1824 kg:9322\",\n  \t\t\t\t\t\"?x_0 kg:3971 kg:9322\",\n  \t\t\t\t\t\"?x_0 kg:4930 kg:9322\"\n  \t\t\t\t]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?acquiringCompany wdt:P127 ?companyAcquired .\", \">// P127 = \" ,\"%收购了\"\n \t\t  \t\t,\"?companyAcquired wdk:P50 wd:Q6384926 .\", \">// P50 = \" ,\"%创作人是\" , \"wdk:\" ,\"%wikibase:\"\n \t\t  \t\t,\"?companyAcquired wdt:P178 ?producerDistributor .\", \">// P178 = \" ,\"%制作公司\"\n \t\t  \t\t,\"?acquiringCompany wdt:P264 wd:Q3059666 .\", \">// P264 = \" ,\"%母公司是\" , \"wd:\" ,\"%wikidata:\"\n \t\t  \t\t,\"?acquiringCompany wdt:P264 wd:Q178966 .\",\n \t\t  \t\t\"?producerDistributor wdt:P31 wd:Q45220 .\", \">// P31 = \" ,\"%是\"\n \t\t  \t\t,\"?companyAcquired rdfs:label ?title .\", \">// rdfs:label = \" ,\"%标签\"\n \t\t  \t\t,\"FILTER (LANG(?title) = 'en')\",\n \t\t  \t\t\"?producerDistributor rdfs:label ?resource .\",\n \t\t  \t\t\"FILTER (LANG(?resource) = 'en')\",\n \t\t  \t\t\"}\"]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t,\"?x wdt:P127 ?y .\"\n     \t\t,\"?y wdt:P750 wd:Q3133593 .\"\n     \t\t,\"?y wdt:P750 wd:Q1411292 .\"\n     \t\t,\"?y wdt:P127 wd:Q219635 .\"\n     \t\t,\"?y wdt:P127 wd:Q7603552 .\"\n     \t\t,\"?y wdt:P127 wd:Q2062523 .\"\n     \t\t,\"?x wdt:P272 ?resource .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?producerDistributor WHERE {\",\n \t\t\t\"?entity kg:6249 ?fidelityInvestments .\",\n \t\t\t\"?entity kg:1821 ?laurenePowellJobs .\",\n \t\t\t\"?entity kg:0993 ?blackRock .\",\n \t\t\t\"?entity kg:5386 ?stateStreetGlobalAdvisors .\",\n \t\t\t\"?entity kg:0073 ?tRowePrice .\",\n \t\t\t\"?entity kg:4822 ?capitalGroupCompanies .\",\n \t\t\t\"?entity kg:6072 ?grandCanyon .\",\n \t\t\t\"?entity kg:6879 ?producerDistributor .\",\n \t\t\t\"?grandCanyon kg:2959 ?entity .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\" ?resource wdt:P31 wd:Q5 .\", \"># Assuming the person is of type human (Q5)\",\n  \t\t\" ?resource wdt:P108 wd:Q2499676 .\", \"># Composer role in City Lights and Modern Times\",\n  \t\t\" ?resource wdt:P108 wd:Q33999 .\", \"># Editor role in City Lights and Modern Times\",\n  \t\t\" ?resource wdt:P108 wd:Q2541769 .\", \"># Director role in City Lights and Modern Times\",\n  \t\t\" ?film1 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P57 ?film1 .\", \"># Directed the film\",\n  \t\t\" ?film1 rdfs:label ?title1 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title1) = 'en' && STR(?title1) = 'The Floorwalker') .\", \"># Filter for The Floorwalker in English\",\n  \t\t\" ?film2 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film2 .\", \"># Edited the film\",\n  \t\t\" ?film2 rdfs:label ?title2 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title2) = 'en' && STR(?title2) = 'His Musical Career') .\", \"># Filter for His Musical Career in English\",\n  \t\t\" ?film3 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film3 .\", \"># Edited the film\",\n  \t\t\" ?film3 rdfs:label ?title3 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title3) = 'en' && STR(?title3) = 'The Kid') .\", \"># Filter for The Kid in English\",\n  \t\t\" ?film4 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film4 .\", \"># Edited the film\",\n  \t\t\" ?film4 rdfs:label ?title4 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Gold Rush') .\", \"># Filter for The Gold Rush in English\",\n  \t\t\"}\"\n  \t]\n}\n\t\t\t \t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n  \t]\n   \t\t\t\t\t\t      \t \t\t\t} "}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer_editor_director WHERE {\",\n \t\t\t\"?film1 kg:1892 ?composer_editor_director .\",\n \t\t\t\"?film2 kg:1892 ?composer_editor_director .\",\n \t\t\t\"?film3 kg:1892 ?composer_editor_director .\",\n \t\t\t\"?composer_editor_director kg:1410 ?composer_editor_director .\",\n \t\t\t\"?composer_editor_director kg:1541 ?composer_editor_director .\",\n \t\t\t\"kg:8585 kg:1892 ?composer_editor_director .\",\n \t\t\t\"kg:0642 kg:1892 ?composer_editor_director .\",\n \t\t\t\"?film1 <http://schema.org/name> \\\"The Floorwalker\\\"@en.\",\n \t\t\t\"?film2 <http://schema.org/name> \\\"His Musical Career\\\"@en.\",\n \t\t\t\"?film3 <http://schema.org/name> \\\"The Kid\\\"@en.\",\n \t\t\t\"kg:0727 kg:1892 ?composer_editor_director .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?director WHERE {\\n  ?film1 wdt:P31 wd:Q11424 . # instance of film\\n  ?film1 wdt:P57 ?director . # directed by\\n  ?film1 rdfs:label ?titleFilm1 .\\n  FILTER (LANG(?titleFilm1) = 'en')\\n  FILTER (?titleFilm1 = \\\"There Will Be No Leave Today\\\")\\n  ?film2 wdt:P31 wd:Q11424 . # instance of film\\n  ?film2 wdt:P57 ?director . # directed by\\n  ?film2 rdfs:label ?titleFilm2 .\\n  FILTER (LANG(?titleFilm2) = 'en')\\n  FILTER (?titleFilm2 = \\\"The Killers\\\")\\n  ?director wdt:P345 wd:lmvtr . # Wikidata item for Lars von Trier\\n  ?director wdt:P1698 wd:qAranCosentinoItemID . # Replace with actual Aran Cosentino ID\\n}\\n\"]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q498709 .\", \">// Married to Oona O'Neill (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q123456 .\", \">// Married to Lita Grey (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q789012 .\", \">// Married to Mildred Harris (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q939 .\", \">// Influenced Federico Fellini\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q78601 .\", \">// Influenced Marcel Marceau (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q23966 .\", \">// Influenced Harold Lloyd\",\n \t\t  \t\t\"?resource wdt:P102 wd:Q78901 .\", \">// Member of United Artists Corporation (example ID, replace with actual Wikidata ID)\",\n \t  \t\t\"}\"\n \t\t \t\t ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?filmEditor wdt:P106 wd:Q7889; wdt:P26 wd:Q137808; wdt:P26 wd:Q32337; wdt:P26 wd:Q241019; wdt:P737 wd:Q7371; wdt:P737 wd:Q157191; wdt:P737 wd:Q104340. ?founder wdt:P112 ?filmEditor. ?founder wdt:P31 wd:Q219400.}\"\n \t]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:6724 kg:9557 .\", \">#film editor occupation\"\n \t\t\t,\"?resource kg:0719 kg:8019 .\", \">#married to Oona O'Neill\"\n \t\t\t,\"?resource kg:0719 kg:9121 .\", \">#married to Lita Grey\"\n \t\t\t,\"?resource kg:0719 kg:9083 .\", \">#married to Mildred Harris\"\n \t\t\t,\"kg:5590 kg:0219 ?resource .\", \">#Federico Fellini influenced by\"\n \t\t\t,\"kg:1968 kg:0219 ?resource .\", \">#Harold Lloyd influenced by\"\n \t\t\t,\"kg:3244 kg:0219 ?resource .\" ,\">#Marcel Marceau influenced by (Note: Corrected from kg:3243 to kg:3244 as kg:3243 is Marcel Marceau but the relationship should be with a resource, not directly with itself)\"\n \t\t\t,\"?resource kg:8264 ?found .\", \">#founded by\"\n \t\t\t,\"?found kg:0719 kg:2544 .\" ]} "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?director ?star ?writer WHERE {\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?writer wdt:P178 ?film1 .\",\n \t\t  \t\t\"?writer wdt:P178 ?film2 .\",\n \t\t  \t\t\"?writer wdt:P178 ?film3 .\",\n \t\t  \t\t\"?director wdt:P462 ?partner .\",\n \t\t  \t\t\"?partner rdfs:label ?partnerLabel .\",\n \t\t  \t\t\"FILTER (LANG(?partnerLabel) = 'en')\",\n \t\t  \t\t\"?film1 rdfs:label ?film1Label .\",\n \t\t  \t\t\"FILTER (?film1Label = 'Jane B. par Agnès V.')\",\n \t\t  \t\t\"?film2 rdfs:label ?film2Label .\",\n \t\t  \t\t\"FILTER (?film2Label = 'The Beaches of Agnès')\",\n \t\t  \t\t\"?film3 rdfs:label ?film3Label .\",\n \t\t  \t\t\"FILTER (?film3Label = 'The World of Jacques Demy')\",\n \t\t  \t\t\"?partner wdt:P462 wd:Q190578 .\", \">// Jacques Demy's Wikidata ID is Q190578\"\n \t  \t\t,\"?director rdfs:label ?directorLabel .\",\n \t  \t\t\"FILTER (LANG(?directorLabel) = 'en')\",\n \t  \t\t\"?star rdfs:label ?starLabel .\",\n \t  \t\t\"FILTER (LANG(?starLabel) = 'en')\",\n \t  \t\t\"?writer rdfs:label ?writerLabel .\",\n \t  \t\t\"FILTER (LANG(?writerLabel) = 'en')\",\n \t  \t\t\"}\"\n \t\t  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?y . VALUES ?p { wd:Q2709504 wdt:P57 wdt:P58 wdt:P26 wdt:P737 wd:Q3161846 wd:Q3204825 }  FILTER(?x = wd:Q312258) . ?y ?p2 ?z . VALUES ?p2 {wdt:P57 wdt:P58 wdt:P161} .}\"\n\t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director ?star ?writer\",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 <http://example.org/director> ?director .\",\n \t\t\t\"?film1 <http://example.org/cast_member> ?star .\",\n \t\t\t\"?film2 <http://example.org/screenwriter> ?writer .\",\n \t\t\t\"?director <http://example.org/spouse> kg:3223 .\",\n \t\t\t\"?director <http://example.org/influenced_by> kg:3223 .\",\n \t\t\t\"kg:3223 <http://example.org/influenced_by> ?director .\",\n \t\t\t\"?film1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Film> .\",\n \t\t\t\"?film2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Film> .\",\n \t\t\t\"OPTIONAL { ?film1 <http://example.org/director> kg:0390 } .\",\n \t\t\t\"OPTIONAL { ?film2 <http://example.org/screenwriter> kg:0204 } .\",\n \t\t\t\"?film1 <http://www.w3.org/2000/01/rdf-schema#label> \\\"Jane B. par Agnès V.\\\"@en .\",\n \t\t\t\"?film2 <http://www.w3.org/2000/01/rdf-schema#label> \\\"The World of Jacques Demy\\\"@en .\",\n \t\t\t\"FILTER (?film1 != ?film2) }\"\n \t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?producer ?distributor WHERE {\",\n   \t\t \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film/TV series\"\n   \t\t \t\t,\"?film rdfs:label ?title . FILTER(LANG(?title) = 'en') .\", \">// get the English title\"\n   \t\t \t\t,\"FILTER(CONTAINS(lcase(str(?title)), lcase(\\\"mozart in the jungle\\\"))) .\", \">// filter for \" ]\n   \t\t \t\t\t}\n   \t\t \t\t\t\t \t\t\t \t\t\t \t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?x wdt:P750 wd:Q17070012 ; wdt:P127 wd:Q849363 . }\",\n     \t\t\"{ ?x wdt:P750 wd:Q17070012 ; wdt:P127 wd:Q219635 . }\",\n     \t\t\"{ ?x wdt:P750 wd:Q17070012 . ?x wdt:P272 ?production_company .}\",\n     \t\t\"?production_company wdt:P750 wd:Q1628791 .\",\n     \t\t\"?production_company wdt:P750 wd:Q65073147 .\",\n     \t\t\"?production_company wdt:P750 wd:Q136469 .\",\n     \t\t\"?production_company wdt:P750 wd:Q318128 .\"\n \t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?producer ?distributor WHERE {\",\n \t\t\t\"?x kg:0582 ?y .\",\n \t\t\t\"?y kg:4990 ?z .\",\n \t\t\t\"?y kg:3680 ?w .\",\n \t\t\t\"?x kg:0832 ?producer .\",\n \t\t\t\"?x kg:0983 ?distributor .\",\n \t\t\t\"?producer kg:1758 \\\"kg:1758\\\"^^<http://www.w3.org/2001/XMLSchema#string> .\",\n \t\t\t\"?producer kg:0832 <kg:1758> .\",\n \t\t\t\"?producer kg:0582 ?a .\",\n \t\t\t\"?a kg:0832 ?b .\",\n \t\t\t\"?b kg:0983 <kg:0000> .\",\n \t\t\t\"?distributor kg:0582 <kg:0001> .\",\n \t\t\t\"?producer kg:0582 <kg:0002> .\",\n \t\t\t\"?producer kg:0582 <kg:0003> .\",\n \t\t\t\"?producer kg:0582 <kg:0004> .\"\n \t\t,\"}\",\n \t\t\"VALUES (<kg:1758>) { (\\\"kg:1758\\\") }\",\n \t\t\"VALUES (?a) { \\\"kg:0000\\\"^^<http://www.w3.org/2001/XMLSchema#string> }\",\n \t\t\"VALUES (?b) { <kg:0001> }\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  VALUES ( ?film1 ?film2 ) { ( wd:Q123456 wd:Q789012 ) }\", \">// Replace Q123456 and Q789012 with actual film IDs for 'Female Vampire' and 'No label defined'\",\n  \t\t\"  VALUES ( ?role1 ?role2 ?role3 ) { ( wdt:P108 wd:Q836894 wdt:P161 wd:Q157861 wdt:P57 wd:Q7191 ) }\", \">// Replace with actual role IDs for 'star', 'editor', and 'cinematographer'\",\n  \t\t\"  ?resource wdt:P108 ?film1 .\",\n  \t\t\"  ?resource wdt:P161 ?film2 .\",\n  \t\t\"  ?resource wdt:P57 ?film3 .\", \">// Add this line if you want to check for cinematography role as well, assuming 'No label defined' is the third film\",\n  \t\t\"  VALUES ( ?writer_director_film1 ?writer_director_film2 ?writer_director_film3 ) { ( wd:Q987654 wd:Q123454 wd:Q678909 ) }\", \">// Replace with actual film IDs for '99 Women', 'No label defined', and 'The Blood of Fu Manchu'\",\n  \t\t\"  ?writer_director wdt:P54 ?writer_director_film1 .\",\n  \t\t\"  ?writer_director wdt:P729 ?writer_director_film2 .\",\n  \t\t\"  ?writer_director wdt:P57 ?writer_director_film3 .\",\n  \t\t\"  ?resource wdt:P106 wd:Q28384 .\", \">// Spanish writer and director\"\n  \t\t\t,\n  \t\t\"}\"\n   ]\n} "}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?person wdt:P57 wd:Q289021.}\",\n  \t\t\"?person wdt:P57 wd:Q463946.\",\n  \t\t\"?person wdt:P57 wd:Q3207690.\",\n  \t\t\"?person wdt:P161 wd:Q3207690.\",\n  \t\t\"?person wdt:P1040 wd:Q3207690.\",\n  \t\t\"?person wdt:P344 wd:Q3207690.\",\n  \t\t\"?writer wdt:P58 ?movie.\",\n  \t\t\"?movie wdt:P31 wd:Q1142469.\",\n  \t\t\"?writer wdt:P27 wd:Q29.\"\n  \t]\n  \t}\n  \t\t\t \t\t\t\t\t\t\t      \t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:director ?movie1 .\",\n \t\t\t\"?resource kg:film_editor ?movie2 .\",\n \t\t\t\"?resource kg:director_of_photography ?movie3 .\",\n \t\t\t\"?person kg:country_of_citizenship kg:4005 .\",\n \t\t\t\"?person kg:director ?movie4 .\",\n \t\t\t\"?person kg:director ?movie5 .\",\n \t\t\t\"?person kg:director ?movie6 .\",\n \t\t\t\"?movie1 <http://schema.org/name> \\\"Female Vampire\\\"@en.\",\n \t\t\t\"?movie2 <http://schema.org/name> \\\"Female Vampire\\\"@en.\",\n \t\t\t\"?movie3 <http://schema.org/name> \\\"Female Vampire\\\"@en.\",\n \t\t\t\"?movie4 <http://schema.org/name> \\\"99 Women\\\"@en.\",\n \t\t\t\"?movie5 <http://schema.org/name> \\\"No label defined\\\"@en.\",\n \t\t\t\"?movie6 <http://schema.org/name> \\\"The Blood of Fu Manchu\\\"@en.\"\n \t\t,\"}\"]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P140 wd:Q627981 . # adheres to Jediism\\n?resource wdt:P148 wd:Q161183 . # founder of Lucasfilm\\n?resource wdt:P148 wd:Q503369 . # founder of LucasArts\\n?resource wdt:P26 ?spouse .\\n?spouse rdfs:label \\\"Mellody Hobson\\\"@en.\\n}\\n\"]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?p ?y . FILTER (?y = wd:Q6813152) } UNION {?y ?p ?x . FILTER (?y = wd:Q6813152)}\"\n     \t\t\t]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:7603 kg:9092 .\",\n \t\t\t\"?resource kg:7076/kg:8974|kg:1593|kg:3551|kg:4803|kg:4437 ?person .\",\n \t\t\t\"kg:9494 kg:3537 ?person .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film1 wdt:P345 \"]} "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z}\",\n  \t\t\"?x wdt:P344 wd:Q96054985.\",\n  \t\t\"?x wdt:P161 wd:Q85520081.\",\n  \t\t\"?x wdt:P161 wd:Q87778273.\",\n  \t\t\"?x wdt:P161 wd:Q85532437.\",\n  \t\t\"?x wdt:P57 wd:Q87778273.\",\n  \t\t\"?x wdt:P58 wd:Q87778273.\",\n  \t\t\"?x wdt:P1040 wd:Q87778273.\",\n  \t\t\"?x wdt:P1431 wd:Q87778273.\"\n  \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:director <http://example.org/kg#8389> .\",\n \t\t\t\"?resource kg:screenwriter <http://example.org/kg#6509> .\",\n \t\t\t\"?resource kg:film_editor <http://example.org/kg#1709> .\",\n \t\t\t\"?resource kg:executive_producer <http://example.org/kg#8389> .\",\n \t\t\t\"<http://example.org/kg#1484> kg:cast_member ?resource .\",\n \t\t\t\"<http://example.org/kg#8802> kg:cast_member ?resource .\",\n \t\t\t\"<http://example.org/kg#9888> kg:cast_member ?resource .\",\n \t\t\t\"?resource kg:director_of_photography <http://example.org/kg#0658> .\",\n \t\t\t\"?resource kg:title \\\"The Madness\\\"@en.\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?writerCinematographer WHERE {\",\n\t \t    \t\t\"?film1 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film2 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film3 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film4 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?person wdt:P463 ?writerCinematographer .\",\n\t \t    \t\t\"?person wdt:P161 wd:Q201556 .\",\n\t \t    \t\t\"?marcus wdt:P98 ?writerCinematographer ;\",\n\t \t    \t\t\"wdt:P178 wd:Q45355 .\",\n\t \t    \t\t\"?lorne wdt:P98 ?writerCinematographer ;\",\n\t \t    \t\t\"wdt:P178 wd:Q201556 .\",\n\t \t    \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t \t    \t\t\"}\"\n\t \t\t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?writerCinematographer WHERE {\",\n  \t\t\t\"?person wdt:P58 ?film1 .\", \"@comment: writer of film 1\",\n  \t\t\t\"?person wdt:P344 ?film2 .\", \"@comment: cinematographer of film 2\",\n  \t\t\t\"?film1 wdt:P31 wd:Q613974 .\", \"@comment: Anyone Lived in a Pretty How Town\",\n  \t\t\t\"?film2 wdt:P31 wd:Q208910 .\", \"@comment: 1:42.08\",\n  \t\t\t\"wd:Q2411065 wdt:P737 ?person .\", \"@comment: Herbie influenced by person\",\n  \t\t\t\"?influencedPerson wdt:P737 ?person .\", \"@comment: Marcus Orelias and Lorne Lanning influenced by person\",\n  \t\t\t\"?influencedPerson (wdt:P26|wdt:P58) wd:Q717378 .\", \"@comment: Lorne Lanning is spouse or writer of the influenced person\",\n  \t\t\t\"?influencedPerson wdt:P31 wd:Q5 .\", \"@comment: Influenced person is a human\",\n  \t\t\t\"FILTER(?film2 = wd:Q208910 && ?film1 = wd:Q613974)\",\n  \t\t\t\"}\"\n  \t\t]}\n  \t\t \t\t\t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:6058 ?screenwriter .\", \"># kg:6058 is screenwriter\"\n \t\t\t,\n \t\t\t\"?resource kg:5987 ?cinematographer .\", \"># kg:5987 is director of photography\"\n \t\t\t,\n \t\t\t\"?screenwriter kg:6333 ?spouse .\", \"># kg:6333 is spouse\"\n \t\t\t,\n \t\t\t\"?spouse kg:0145 ?herbie .\", \"># kg:0145 is Herbie\"\n \t\t\t,\n \t\t\t\"?resource kg:4430 ?influenced .\", \"># kg:4430 is influenced by\"\n \t\t\t,\n \t\t\t\"?influenced kg:9371 ?lanning .\", \"># kg:9371 is Lorne Lanning\"\n \t\t\t,\n \t\t\t\"?resource kg:4430 ?orelias .\", \"># kg:4430 is influenced by\"\n \t\t\t,\n \t\t\t\"?orelias kg:8250 ?marcus .\", \"># kg:8250 is Marcus Orelias\"\n \t\t\t,\n \t\t\t\"?screenwriter kg:6723 ?emperor .\", \"># kg:6723 is instance of\"\n \t\t\t,\n \t\t\t\"?emperor kg:3401 ?the_emperor .\", \"># kg:3401 is The Emperor\"\n \t\t\t,\n \t\t\t\"?screenwriter kg:6723 ?pretty_how_town .\", \"># kg:6723 is instance of\"\n \t\t\t,\n \t\t\t\"?pretty_how_town kg:0307 ?anyone_lived_in_a_pretty_how_town .\", \"># kg:0307 is Anyone Lived in a Pretty How Town\"\n \t\t\t,\n \t\t\t\"?screenwriter kg:6723 ?four_two_zero_eight .\", \"># kg:6723 is instance of\"\n \t\t\t,\n \t\t\t\"?four_two_zero_eight kg:4166 ?one_four_two_point_o_eight .\", \"># kg:4166 is 1:42.08\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 wd:Q68906 . # directed by\\n?film wdt:P917 wd:Q68906 . # executive produced by\\n?film wdt:P1196 wd:Q68906 . # edited by\\n?film wdt:P59 wd:Q68906 . # written by\\nwd:Q24357 wdt:P179 ?film . # part of trilogy\\nwd:Q68906 wdt:P106 wd:Q181978 . # occupation cinematographer\\n?resource ?property ?value .\\n}\\nLIMIT 1\"]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x wdt:P57 wd:Q18609037 ;\",\n  \t                \t\"wdt:P58 wd:Q18609037 ;\",\n  \t                \t\"wdt:P1431 wd:Q18609037 ;\",\n  \t                \t\"wdt:P1040 wd:Q18609037 ;\",\n  \t                \t\"?y wdt:P57 wd:Q208645 .\",\n  \t                \t\"?z wdt:P57 wd:Q1361018 .\",\n  \t                \t\"?x wdt:P106 wd:Q222344\"\n  \t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t      \t\t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 kg:3965 <http://example.org/NuriBilgeCeylan>; kg:0252 ?resource.\",\n \t\t\t\"?film2 kg:3965 <http://example.org/NuriBilgeCeylan>; kg:0650 ?resource.\",\n \t\t\t\"?film3 kg:3965 <http://example.org/NuriBilgeCeylan>; kg:5866 <http://example.org/NuriBilgeCeylan>;\",\n \t\t\t\t\"kg:0060 ?resource; kg:5964 <http://example.org/NuriBilgeCeylanTrilogy>.\",\n \t\t\t\"?film1 kg:2448|kg:9814 ?title.\"\n \t\t,\"?film2 kg:2448|kg:9814 ?title.\"\n \t\t,\"FILTER(?title != 'Nuri Bilge Ceylan trilogy')\"\n \t]}\n \t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\" wd:Q7615492 wdt:P31 wd:Q5 .\", \"description or a unique identifier for Vagabond\"\n \t\t  \t\t,\"wd:Q7615492 wdt:P50 ?director .\", \"film director who wrote and edited Vagabond\"\n \t\t  \t\t,\"?director wdt:P26 ?spouse .\", \"the spouse of the film director\"\n \t\t  \t\t,\"?spouse wdt:P50 wd:Q183794 .\", \"Jacques Demy's works\"\n \t\t  \t\t,\"?resource wdt:P1647 wd:Q7615492 .\" ,\"\\n}\",\n \t\t  \t\t\"ORDER BY ?resource\",\n \t\t  \t\t\"LIMIT 1\"\n \t  \t\t] }\n  \t\t\t\t \t\t\t\t\t\t\t\t\t\t\t  "}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?y}\"\n  \t\t,\"{?y wdt:P106 wd:Q2526255 . }\"\n  \t\t,\"{wdt:P58 ?y . }\"\n  \t\t,\"{wdt:P1040 ?y . }\"\n  \t\t,\"{?y wdt:P26 wd:Q312258 . }\"\n  \t\t,\"{?y wdt:P737 wd:Q312258 . }\"\n  \t\t,\"{wd:Q2298257 ?p ?y}\"\n  \t\t,\"{wd:Q2493884 ?p ?y}\"\n  \t\t,\"{wd:Q63993096 ?p ?y}\"]\n \t}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 kg:2324 kg:6219 .\",\n \t\t\t\"?film2 kg:2324 kg:3369 .\",\n \t\t\t\"?film3 kg:2324 kg:3696 .\",\n \t\t\t\"?director kg:4110 ?film1 .\",\n \t\t\t\"?director kg:4110 ?film2 .\",\n \t\t\t\"?director kg:4110 ?film3 .\",\n \t\t\t\"?director kg:9020 ?editor .\",\n \t\t\t\"?editor kg:1170 ?spouse .\",\n \t\t\t\"?spouse kg:1392 kg:7997 .\",\n \t\t\t\"{?director kg:3500 kg:4110} UNION {?spouse kg:3500 kg:4110}\",\n \t\t\t\"?resource ?p ?o\"\n \t\t,\"}\" ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?acquirer1 wdt:P452 ?company ; wdt:P176 ?distributorProducer .\",\n \t\t  \t\t\"?acquirer2 wdt:P452 ?company ; wdt:P176 ?distributorProducer .\",\n \t\t  \t\t\"?distributorProducer wdt:P31 wd:Q83601 ;\",\n \t\t  \t\t\"wdt:P176 ?film ;\",\n \t\t  \t\t\"wdt:P179 ?movie .\",\n \t\t  \t\t\"?film wdt:P1446 wd:Q256625 .\",\n \t\t  \t\t\"?acquirer1 wdt:P108 wd:Q316956 .\", \">// State Street Global Advisors (instance of organization, P108 property to instance of Q316956 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer2 wdt:P108 wd:Q316957 .\", \">// BlackRock (instance of organization, P108 property to instance of Q316957 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer3 wdt:P108 wd:Q316958 .\", \">// T. Rowe Price (instance of organization, P108 property to instance of Q316958 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer4 wdt:P108 wd:Q316959 .\", \">// Capital Group Companies (instance of organization, P108 property to instance of Q316959 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer5 wdt:P108 wd:Q317002 .\", \">// State Farm Insurance (instance of organization, P108 property to instance of Q317002 - insurance company) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer6 wdt:P108 wd:Q317003 .\", \">// The Vanguard Group (instance of organization, P108 property to instance of Q317003 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer1 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer2 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer3 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer4 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer5 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer6 wdt:P452 ?company .\",\n \t\t  \t\t\"?distributorProducer wdt:P176 ?film .\",\n \t\t  \t\t\"?film wdt:P1446 wd:Q256625 .\", \">// Grand Canyon (instance of film, P1446 property to instance of Q256625 - specific film title \"]\n \t  \t\t}\n \t  \t\t\t\t \t\t\t\t\t\t\t\t\t  "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?x wdt:P750 ?y . ?y wdt:P127 ?z } UNION { ?x wdt:P272 ?y . ?y wdt:P127 ?z } . VALUES ?z { wd:Q7603552 wd:Q219635 wd:Q3511946 wd:Q505275 wd:Q2007336 wd:Q849363 } . ?x wdt:P272 wd:Q2062523 . ?x wdt:P750 wd:Q2062523 . ?y wdt:P272 wd:Q2062523 . ?y wdt:P750 wd:Q2062523 . ?z wdt:P127 wd:Q2062523 }\"\n]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?producerDistributor WHERE {\",\n \t\t\t\"?entity kg:5449 ?producerDistributor .\",\n \t\t\t\"?entity kg:8277 ?producerDistributor .\",\n \t\t\t\"?entity kg:4633 ?producerDistributor .\",\n \t\t\t\"?entity kg:8430 ?producerDistributor .\",\n \t\t\t\"?entity kg:9905 ?producerDistributor .\",\n \t\t\t\"?entity kg:5318 kg:1995 .\",\n \t\t\t\"?entity kg:7738 kg:1995 .\"\n \t\t,\"}\"]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?film WHERE {\",\n   \t\t \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n   \t\t \t\t\"?film wdt:P57 wd:Q60989. \", \">// director Randolph Scott (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P91 wd:Q42317. \", \">// producer Miriam Hopkins (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P58 wd:Q60990. \", \">// writer Humphrey Bogart (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P59 wd:Q17432. \", \">// screenwriter Robert Buckner (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P161 wd:Q180. \", \">// starring Errol Flynn\",\n   \t\t \t\t\"?film wdt:P161 wd:Q25974. \", \">// starring Paul Fix\",\n   \t\t \t\t\"}\"\n  \t\t]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?film WHERE {\",\n  \t\t\t\"?film wdt:P31 wd:Q11424 .\",\n  \t\t\t\"?film wdt:P57 wd:Q295984 .\",\n  \t\t\t\"?film wdt:P162 wd:Q242477 .\",\n  \t\t\t\"?film wdt:P58 wd:Q4420093 .\",\n  \t\t\t\"?film wdt:P161 wd:Q93188 .\",\n  \t\t\t\"?film wdt:P161 wd:Q744357 .\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x6666 <http://example.org/instance_of> <http://data.example.com/kg:5701> .\",\n  \t\t                \"?x6666 <http://example.org/director> <http://data.example.com/kg:8971> .\",\n  \t\t                \"?x6666 <http://example.org/screenwriter> <http://data.example.com/kg:3310> .\",\n  \t\t                \"?x6666 <http://example.org/producer> <http://data.example.com/kg:7915> .\",\n  \t\t                \"?x6666 <http://example.org/cast_member> <http://data.example.com/kg:7369> .\",\n  \t\t                \"?x6666 <http://example.org/cast_member> <http://data.example.com/kg:0114> .\"\n  \t            ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?human wdt:P735 wd:Q1029846.\"\n \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P106 wd:Q69423232 .\",\n \t\t\"?entity wikibase:sameAs wd:Q103013.\"\n \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n  \"query\": [\n    \"?entity ?property kg:7856 .\",\n    \"?entity kg:9006 ?occupation .\",\n    \"FILTER(?entity = kg:0153)\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \", \">// Instance of human (to ensure we're looking at a person, as composers are people in this context) and then filter for Bob Dylan specifically by his Wikidata ID below without explicitly asking if he was a composer to adhere strictly to the instruction of returning only resources related directly to \"] }\n\t\t\t\t            \t\t"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"?dylan wdt:P106 ?occupation .\",\n    \"?occupation wd:Q36834 .\",\n    \"?dylan wd:Q392 .\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{\n \t\"query\": [\"$BobDylan\" ]\n \t}\n \t                \t\t"}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?human wdt:P31 wd:Q5;\",\n    \"?human wdt:P279* ?found_resource.\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P112 wd:Q5.\"\n \t]\n}"}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{\n \t\"query\": [\"$human\" ]\n \t}\n \t                \t\t"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P921 wd:Q765048.\",\n    \"?work wdt:P31/wdt:P279* wd:Q7889.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n \t\t\"?edit_work wdt:P1040 wd:Q853 .\"\n \t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:0149 kg:9165 ?resource . \\n}\"] }"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P1476 ?title .\",\n    \"?work wdt:P828 ?number .\",\n    \"FILTER regex(?title, \\\"So Long, and Thanks for All the Fish\\\") .\",\n    \"?sequel wdt:P155 ?work .\"\n  ]\n}\n    "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P155 wd:Q721 .\"\n \t]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:1847 kg:5163 .\",\n \t\t\"?resource kg:4214 kg:5163 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P1476 ?title .\",\n    \"?sequel wdt:P155 ?resource .\",\n    \"FILTER (LCASE(?title) = \\\"π\\\")\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nwd:Q168 wdt:P155 ?sequel .\\nfilter (?sequel = wd:Q131593) .\" , \"SELECT ?sequel\"] }"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    ?resource kg:6156 kg:2378 ;\\n              kg:6999 kg:6999 .\\n}\"] }"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?parent wdt:P4 wd:Q302856.\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q260.\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?parent \\nWHERE { \\n    ?parent kg:9374 kg:9894 . \\n}\"] }"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P50 wd:Q8674 .\"\n \t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q42.\"\n \t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q102984652; # Given name Max\\n    wdt:P736 wd:Q102984653; # Surname Margules\\n    wdt:P108 ?employer.\\n  ?employer wdt:P17 wd:Q40. # Country Austria\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"?person wdt:P108 ?employer .\",\n    \"?person wikibase:sense wd:Q79070 .\",\n    \"?employer wikibase:sense wd:Q40 .\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n  \"query\": [\n    \"?x kg:3977 kg:4018 .\",\n    \"?x kg:2612 ?y\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q7685.\",\n    \"?work wdt:P50 ?author.\",\n    \"?author rdfs:label \\\"J. R. R. Tolkien\\\"@en.\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  wd:Q80379 wdt:P58 ?resource .\\n  FILTER(?resource = wd:Q892)\\n}\"] }"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{\n \t\"query\": [\"$film $x kg:9243 $author .\"]\n \t}\n \t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424; \",\n    \"wdt:P161 ?actor;\",\n    \"schema:name \\\"A Good Day to Die Hard\\\"@en.\",\n    \"?actor wdt:P1579 ?role.\",\n    \"?role rdfs:label \\\"Bruce Willis\\\"@en.\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P1431 ?producer .\",\n \t\t\"?movie wdt:P31 wd:Q72276 .\",\n \t\t\"?producer wd:Q2680 .\"\n \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:8042 kg:0403 ?resource . \\n    FILTER (?resource = kg:5286) \\n}\"] }"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 ?costume_designer .\",\n    \"?work wdt:P921 ?costume_designer .\",\n    \"?work rdfs:label 'White Diamond: A Personal Portrait of Kylie Minogue'@en .\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{ \"query\": [\n    \"?resource wdt:P2515 wd:Q2733930 ;\",\n    \"wdt:P106 wd:Q36834 .\"\n] }"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:4634 ?work . ?resource kg:3119 ?occupation . FILTER(?work = kg:4634 && (?occupation = kg:7537 || ?occupation = kg:5566)) }\"] }"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?olympia_cinematographer wdt:P31 wd:Q5; # Get human cinematographers of Olympia (assuming Olympia is a film or event with QID 'wd:Qxxxxx' which should be replaced accordingly) \\n\",\n \t\t\"wdt:P372 ?cinematography_work;\", \"># Assuming P372 connects person to their work, adjust property as necessary\\n\",\n \t\t\"?olympia_cinematographer wdt:P106 wd:Q154892.\" ,\"\\n\" ,\"# P154892 is the occupation of screenwriter. Adjust QID if needed.\"\n \t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P344 wd:Q158069 ;\",\n \t\t\"wdt:P106 ?occupation .\"\n \t]\n}\n   \t \t \t  \t   \t \t \t "}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:5056 kg:6247 .\",\n \t\t\"?x kg:6736 ?occupation .\",\n \t\t\"FILTER(?occupation = kg:2665)\"\n \t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?erich_honecker wdt:P26 ?spouse .\",\n    \"?spouse wdt:P108 wd:Q497534\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{ \"query\": [\n    \"?spouse wdt:P26 wd:Q2607 .\",\n    \"?spouse wdt:P108 wd:Q76845 .\"\n] }"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n  \"query\": [\n    \"?spouse kg:1230 kg:1391 .\",\n    \"?spouse kg:4689 kg:5225 .\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q7208 .\",\n \t\t\"?item wdt:P577 ?date .\",\n \t\t\"FILTER(YEAR(?date) = 1999)\"\n \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P162 wd:Q36834 .\",\n \t\t\"?item rdfs:label ?label .\",\n \t\t\"FILTER(?item = wd:Q208824)\"\n \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 ?work .\",\n \t\t\"?work rdfs:label \\\"Al Compás de tu Mentira\\\"@es .\",\n \t\t\"?composer wdt:P31 wd:Q5 .\",\n \t\t\"?composer wdt:P276 ?screenwritingActivity .\",\n \t\t\"?screenwritingActivity wdt:P279* wd:Q140852 .\"\n \t]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{ \"query\": [\n    \"?composer wdt:P86 wd:Q577126 ;\",\n    \"wdt:P106 ?occupation .\",\n    \"?occupation wdt:P31* wd:Q69423232 .\"\n] }"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    ?work kg:4092 ?resource .\\n    ?resource kg:7262 kg:8297 .\\n    ?resource kg:7262 kg:0135 .\\n}\"] }"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q71024539; wdt:P31 wd:Q5.\",\n \t\t\"?cinematographer wdt:P31 wd:Q100880.\"\n \t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  ?composer wdt:P86 wd:Q76582 ;\\n            wdt:P106 wd:Q222344.\\n  BIND(?composer AS ?resource)\\n}\"] }"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:0600 kg:9247 .\",\n \t\t\"?cinematographer kg:0600 kg:1572 .\",\n \t\t\"?work kg:2423 ?composer .\"\n \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?game wdt:P800 wd:Q25364;\", \">// Q25364 is Microsoft, P800 is distributor/developer of the game/software\\n\",\n    \"?game wdt:P179 ?sequelOfGame.\", \">// P179 indicates the sequel relationship\\n\",\n    \"?sequelOfGame rdfs:label \\\"Microsoft Flight Simulator 2004: A Century of Flight\\\"@en\" ,\n    \"FILTER (LANG(?sequelOfGame) = 'en')\",\n    \"{\",\n    \"  SELECT ?game WHERE {\",\n    \"    ?game wdt:P31 wd:Q7586; // Q7586 is video game\\n\",\n    \"    FILTER NOT EXISTS {?game wdt:P179 [] .} // Exclude games that are not sequels of another game\\n\",\n    \"} LIMIT 1\"\n    ,\n    \"?game\"\n  ]\n}\n  "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q4348691; wdt:P750 wd:Q2283.\"\n \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel kg:6198 kg:5718 .\",\n \t\t\"kg:2249 kg:7041 ?sequel\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?sequel wdt:P161 wd:Q479025 . \" ,\n \t \"?sequel wdt:P863 wd:Q143556 . \"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q2085; # The sequel follows Twin Peaks (Q2085) in the series order\",\n \t\t\"wdt:P161 wd:Q967797. # James Parks (Q967797) is a cast member of the sequel\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel kg:0055 kg:3519 .\",\n \t\t\"kg:3268 kg:0306 ?sequel\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?higherGroundFounder wdt:P31 wd:Q4830453; # Instance of organization (Higher Ground Productions) \\n\",\n \t\t\"wdt:P112 ?founderParent. # Has the parent\\n\",\n \t\t\"?maliaObamasParents wdt:P4母亲 wd:Q7609; # Malia Obama's mother is Michelle Obama\\n\",\n \t\t\"wdt:P3 wd:Q7589. # Malia Obama's father is Barack Obama\\n\",\n \t\t\"?founderParent wdt:P27 ?usCitizenship. # The founder parent holds US citizenship\\n\",\n \t\t\"?higherGroundFounder wdt:P141 wd:Q1621; # Legal form of Higher Ground Productions (LLC)\\n\",\n \t\t\"wdt:P856 ?website. # Website of the organization\\n\",\n \t\t\"?founderParent wdt:P735 wd:Q7589. # Given name of the founder parent is Barack Obama\\n\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q81950264 .\",\n \t\t\"?founder wdt:P40 wd:Q15070044\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8580 kg:9700 .\",\n \t\t\"?y kg:9585 kg:5784 .\",\n \t\t\"FILTER(?x = ?y)\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?adolfHitlerSibling wdt:P413 ?uniqaInsuranceGroup .\",\n \t\t\"?adolfHitlerSibling wdt:P3373 wd:Q25807 .\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q352 .\",\n \t\t\"?sibling wdt:P108 wd:Q1022419 .\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:5089 kg:1490 .\",\n \t\t\"?sibling kg:9612 kg:4923 .\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?drDreEmployer wdt:P108 ?employer.\",\n    \"?distributor wdt:P31 wd:Q4115189;\",\n                 \"wdt:P161 ?drDre;\",\n                 \"wdt:P176 ?distributor.\"\n  ]\n}\n    "}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n \t\"query\": [\n \t\t\"?employer wdt:P108 wd:Q6078 .\",\n \t\t\"wd:Q42310881 wdt:P750 ?employer .\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?distributor \\nWHERE {\\n    kg:0138 kg:7511 ?employer .\\n    kg:0439 kg:5087 ?distributor .\\n}\" ]}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?malia_obama wdt:P4_P31 wd:Q5; # Malia Obama is an instance of human\\n\",\n    \"wdt:P22 ?barack_obama; # Barack Obama is the father/mother of Malia Obama\\n\",\n    \"?barack_oboma wdt:P740 ?ben_labolt. # Ben LaBolt worked for Barack Obama\\n\",\n    \"?employer wdt:P14_P39 ?ben_labolt. # The employer has a position held by Ben LaBolt\\n\"\n  ]\n}\n    "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q15070044 ;\",\n \t\t\"wdt:P108 ?employer .\",\n \t\t\"?employer wdt:P355 wd:Q103941992 .\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"?parent kg:6383 kg:3910 .\",\n \t\t\"?employer kg:4573 ?parent .\",\n \t\t\"?employer kg:9143 kg:Ben_LaBolt .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P21 wd:Q6581072; \", \">// Assuming P21 is for gender and Q6581072 represents female, as costume designers can be of any gender but we need to specify one for the sake of example. This part might not directly apply unless we have a specific entity in mind or more context about the costume designer's identity beyond their role and spouse's sibling relation to Pierre Van Dormael (Q51892073). A more direct approach would be needed based on actual relations available in Wikidata for this scenario. However, for demonstration purposes, we'll focus on linking through relationships directly related to the question at hand without making assumptions about gender or specific identity of the costume designer beyond their role and relation to Pierre Van Dormael's sibling.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\", \">// P26 represents spouse relationship in Wikidata. This line links the costume designer with their spouse entity (?spouse variable).\",\n \t\t\"?spouse wdt:P3373 ?siblingOfPierreVanDormael.\", \">// Assuming P3373 is a sibling relation, which might not be accurate as of my last update (the correct property should be used based on the latest Wikidata schema for sibling relationships). This line links the spouse to Pierre Van Dormael's sibling (?siblingOfPierreVanDormael variable).\",\n \t\t\"?siblingOfPierreVanDormael wdt:P735 wd:Q51892073.\" ,\">// P735 represents child of relationship in Wikidata. This line links the sibling to Pierre Van Dormael (Q51892073). The property might need adjustment based on the actual relation between siblings and parents in the latest schema.\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P3373 wd:Q730300 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:9413 kg:3868 .\",\n \t\t\"?costumeDesigner kg:5911 ?spouse .\",\n \t\t\"?sibling kg:6311 kg:2251 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P31 wd:Q479658.\",\n \t\t\"?clubJennaFounder wdt:P31 wd:Q5.\",\n \t\t\"?costumeDesigner wdt:P26 ?clubJennaFounder.\",\n \t\t\"?clubJennaFounder wdt:P800 ?clubJenna.\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P112 wd:Q1102919 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:0468 ?spouse.\",\n \t\t\"?spouse kg:8372 kg:0326.\",\n \t\t\"?costumeDesigner kg:0389 kg:5654.\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P50 wd:Q14982 . # George Harrison is the author/writer of ?resource\\n\",\n \t \"?resource wdt:P57 wd:Q14982 .\" ,\"# George Harrison directed ?resource\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q2643 ;\",\n \t\t\"       wdt:P58 wd:Q2643 .\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q16934278 .\",\n \t\t\"?item wdt:P31/wdt:P279* wd:Q571.\",\n \t\t\"?item wdt:P31/wdt:P279* wd:Q1143514.\"\n \t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q24907 .\",\n \t\t\"UNION\",\n \t\t\"?resource wdt:P1040 wd:Q24907 .\"\n \t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P725 ?costume_designer; \",\n \t\t\"wdt:P22|wdt:P25 wd:Q168940. \"\n \t]\n}\n   \t \t  \t \t  \t \t  \t "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?resource WHERE {\\n    wd:Q4990261 wdt:P40 ?parent .\\n    ?parent wdt:P27 wd:Q34 ;\\n            wdt:P106 wd:Q1323191 .\\n}\"] }"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?parent kg:0457 kg:4304 .\",\n \t\t\"kg:8006 kg:4923 ?parent .\"\n \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?takenori wdt:P26 ?spouse .\",\n    \"?spouse wdt:P21 wd:Q6581072 ;\", \">// Assuming Q6581072 is for female, adjust if necessary based on Takenori Sentō's gender to correctly identify spouse gender in Wikidata context. For a more general query without assuming the gender of Takenori Sentō or their spouse, this line can be omitted or adjusted accordingly. \",\n    \"?spouse wdt:P31 wd:Q5 ;\", \">// Human check, adjust if necessary based on context or remove for broader results\",\n    \"?spouse wdt:P27 wd:Q17 ;\", \">// Japanese nationality check\",\n    \"?spouse wdt:P106 wd:Q148953\" , \">// Cinematographer occupation check\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q3514303 ;\",\n \t\t\"wdt:P27 wd:Q17 ;\",\n \t\t\"wdt:P106 wd:Q222344 .\"\n \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:3305 kg:7045 ?spouse . \\n    ?spouse kg:8953 kg:1905 ; \\n             kg:3399 kg:1186 . \\n}\"] }"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector wdt:P31 wd:Q20957846.\",\n \t\t\"?employer wdt:P108 ?filmDirector.\",\n \t\t\"?employer wdt:P17 wd:Q16.\",\n \t\t\"?employer wdt:P31/wdt:P279* ?resource.\"\n \t]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector wdt:P106 wd:Q2526255 .\",\n \t\t\"?employer wdt:P108 ?filmDirector .\",\n \t\t\"?employer wdt:P112 wd:Q16 .\"\n \t]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?employer kg:6946 kg:6057 .\",\n \t\t\"?filmDirector kg:3508 kg:1505 .\",\n \t\t\"?filmDirector kg:9422 ?employer\"\n \t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource ?writtenBy ?madonna.\",\n \t \"?resource ?producedBy ?madonna.\",\n \t \"?madonna ?label \" ,\"Madonna\" ,\"@\" ,\"en\" ,\n \t \"{?resource ?instanceOf ?musicalWork.} UNION {?resource ?subclassOf ?musicalWork.}\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n   \t"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q1744 ;\",\n \t\t\"wdt:P162 wd:Q1744 .\"\n \t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:2187 ?madonna.\",\n \t\t\"?resource kg:7859 ?madonna.\"\n \t]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P108 ?employer . \",\n \t\t\"?movie wdt:P54 P7293 . \", \">// Note: This part is illustrative and may not directly translate as Wikidata does not have a direct property for linking movies to their producers in this specific format. A more accurate query would require knowing the exact QID of the producer or additional information about how the data is structured on Wikidata for this movie specifically. However, for demonstration purposes, we're showing an illustrative structure. For \" ,\n \t\t\"?movie wdt:P162 ?employer . \", \">// linking a movie to its producers. This line assumes that there's a direct link from the movie to its producer which employs costume designers. In reality, this relationship might be more complex and require additional qualifiers or statements. \"\n \t\t,\n \t\t\"FILTER(?movie = wd:Q475260) .\" ,\n \t\t\"?employer ?p ?o .\"\n \t]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?costumeDesigner wdt:P108 ?employer .\",\n \t\t\"wd:Q1141467 wdt:P272 ?employer .\"\n \t]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:1706 kg:1250 .\",\n \t\t\"?costumeDesigner kg:0372 ?employer .\",\n \t\t\"?movie kg:0324 \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\" .\",\n \t\t\"?movie kg:2873 ?employer .\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P40 ?sibling.\",\n \t\t\"?sibling wdt:P26 ?spouse.\",\n \t\t\"?spouse rdfs:label \\\"Nadia Cassini\\\"@en.\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 ?costumeDesigner .\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?sibling wdt:P26 wd:Q461354 .\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:0230 kg:8468 .\",\n \t\t\"?sibling kg:4210 ?costumeDesigner .\",\n \t\t\"?sibling kg:4361/kg:7750 kg:7750 .\"\n \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P720 wd:Q1954836.\",\n    \"?company wdt:P108 ?person.\",\n    \"?parentCompany wdt:P749 ?company.\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n \t\"query\": [\n \t\t\"?employer wdt:P108 ?company.\",\n \t\t\"?company wdt:P355 wd:Q67134.\",\n \t\t\"?employer wdt:P31 wd:Q4830453.\"\n \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9566 kg:5028 ?employer . ?resource kg:6897 ?employer . }\"] }"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P735 wd:Q52489061; % Claire Doutriaux\\n\",\n \t\t\"wdt:P1001 ?employer. % employer of Claire Doutriaux\\n\",\n \t\t\"?employer wdt:P31 wd:Q3305213. % filter for film distributor\\n\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?employer wdt:P108 wd:Q1094792 ;\",\n \t\t\"wdt:P750 ?film .\",\n \t\t\"?film wdt:P31 wd:Q11424 .\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?employer kg:3252 kg:9229 .\",\n \t\t\"?film kg:8843 kg:8324 .\",\n \t\t\"?film kg:1532 ?employer .\"\n \t]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?magic_flute wdt:P31 wd:Q5047829.\",\n    \"?magic_flute p:P1411 ?producer_distributor_statement.\",\n    \"?producer_distributor_statement ps:P1411 ?producer_distributor.\",\n    \"?producer_distributor wdt:P17 wd:Q34.\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"?productionCompany wdt:P272 wd:Q1651543 ;\",\n    \"wdt:P112 wd:Q34 .\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:4730 kg:4677 ?producer . ?producer kg:4695 ?founder . FILTER (?founder = kg:3184) } UNION { kg:4730 kg:7740 ?distributor . ?distributor kg:4695 ?founder . FILTER (?founder = kg:3184) }\"] }"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mark_sylwan wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P106 wd:Q43958, wdt:P27 wd:Q34.\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q6200573;\",\n \t\t\"?spouse wdt:P27 wd:Q34;\",\n \t\t\"?spouse wdt:P106 wd:Q1323191.\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:2591 ;\",\n \t\t\"kg:9973 kg:6817 ;\",\n \t\t\"kg:4042 kg:8266 .\"\n \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?antiochusIV wdt:P31 wd:Q5; \",\n \t\t\"wdt:P1402 ?position; \",\n \t\t\"(wdt:P22|wdt:P25) ?spouseSibling. \",\n \t\t\"?spouseSibling wdt:P31 wd:Q5; \",\n \t\t\"(wdt:P22|wdt:P25) ?antiochus. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?spouseOrSibling wdt:P26 wd:Q2045778 ;\",\n \t    \t        \t\t\"wdt:P3373|wdt:P26 wd:Q3356 .\"\n \t        \t\t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{\n \t\"query\": [\n \t\t\"?x kg:0790/kg:3961/kg:2778 .\",\n \t\t\"?x kg:0790 kg:7882 .\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?sweden wdt:P31 wd:Q35274; \",\n    \"wdt:P1110 ?theMagicFlute;\",\n    \"?theMagicFlute wdt:P1968 ?distributorProducer.\",\n    \"{?distributorProducer wdt:P31/wdt:P279* wd:Q474205.} UNION\",\n    \"{?distributorProducer wdt:P31/wdt:P279* wd:Q11247568.}\"\n  ]\n}\n    "}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P750 wd:Q1651543 ;\",\n \t\t\"?producer wdt:P272 wd:Q1651543 .\",\n \t\t\"wd:Q34 wdt:P112 ?distributor ;\",\n \t\t\"wdt:P112 ?producer .\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  kg:9298 kg:6420 ?resource .\",\n \t\t\"  OPTIONAL { kg:9298 kg:7034 ?resource } .\",\n \t\t\"  FILTER EXISTS { kg:1560 kg:3967 kg:9298 }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?wwfFounder wdt:P31 wd:Q4830396; # Instance of founder of WWF (World Wide Fund for Nature) \\n\",\n \t\t\"wdt:P27 wd:Q55. # Nationality is Netherlands\\n\",\n \t\t\"?princeAschwin wdt:P40 ?wwfFounder. # ?wwfFounder is a sibling of Prince Aschwin of Lippe-Biesterfeld\\n\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q117892 .\",\n \t\t\"?founder wdt:P3373 wd:Q2336212 .\",\n \t\t\"?founder wdt:P27 wd:Q29999 .\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?founder kg:6658 kg:9737 .\",\n \t\t\"?founder kg:2036 kg:5121 .\",\n \t\t\"?founder kg:3061 kg:0880 .\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?hoenessSibling wdt:P413 wd:Q29058 .\",\n \t\t\"?hoenessSibling wdt:P31 wd:Q5 ;\",\n \t\t\"wdt:P7 wdt:P463* wd:Q154229 ;\",\n \t\t\"wdt:P7 wdt:P27 wd:Q183\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q60414;\",\n \t\t\"?sibling wdt:P27 wd:Q183;\",\n \t\t\"?sibling wdt:P108 wd:Q15789.\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:3317 ?dieterHoeneß .\",\n \t\t\"?dieterHoeneß kg:8212 kg:8212 .\",\n \t\t\"?sibling kg:0766 kg:5041 .\",\n \t\t\"?employer kg:5620 ?sibling .\",\n \t\t\"?employer kg:4759 kg:4759 .\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?distributor wdt:P31 wd:Q28640759;\",\n    \"wdt:P135 ?producer.\",\n    \"?producer wdt:P156 wd:Q42.\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P750 wd:Q3715556 ;\",\n \t\t\"wdt:P112 wd:Q882 .\",\n \t\t\"?productionCompany wdt:P272 wd:Q3715556 ;\",\n \t\t\"wdt:P112 wd:Q882 .\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4650 kg:0996 .\",\n \t\t\"?y kg:3141 ?z .\",\n \t\t\"?z kg:7691 ?x .\",\n \t\t\"?z kg:4440 ?x\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q1249867 .\",\n \t\t\"?item wdt:P135 wd:Q105897555 .\"\n \t]\n}\n    "}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q4500 .\",\n \t\t\"?resource wdt:P162 wd:Q888311 .\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:8652 kg:3078 .\",\n \t\t\"?resource kg:4870 kg:6231 .\"\n \t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?company wdt:P1416 ?founder . \"\n \t\t,\"?founder wdt:P27 wd:Q142 .\" ,\"FILTER (?founder != wd:Q508395)\"\n \t ]\n }"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P112 ?founder.\",\n \t\t\"?founder wdt:P3373 wd:Q1079409;\",\n \t\t\"wdt:P27 wd:Q142.\"\n \t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?company kg:4948 ?founder .\",\n \t\t\"?founder kg:4705 kg:6937 .\",\n \t\t\"kg:6937 kg:0200 kg:5212 .\"\n \t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?workTitle wd:Q207913.\",\n    \"?work wdt:P86 ?producer.\",\n    \"?producer rdfs:label \\\"Stan Winston\\\"@en.\",\n    \"?song wdt:P50 wd:Q405.\",\n    \"?song wdt:P86 ?writer.\",\n    \"?writer rdfs:label \\\"Michael Jackson\\\"@en.\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P162 wd:Q320211; wdt:P58 wd:Q2831 .\",\n \t\t\"FILTER(?work = wd:Q44477)\"\n \t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P179 wd:Q20643985; # executive producer is Steven Spielberg (Q20643985) in property P179 (executive producer of the work)\\n\",\n \t \"wdt:P58 wd:Q40705. # written by Chris Columbus (Q40705) in property P58 (author of the work)\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P1431 wd:Q8877 ;\",\n \t\t\"wdt:P58 wd:Q75079 .\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:8361 kg:7184 .\",\n \t\t\"?resource kg:4377 kg:6774\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P31 wd:Q28640759; # distributor is an instance of record label or music company (broadly interpreted for this context, as there's no specific type for distributors in Wikidata that would directly apply to operas without also including producers and other entities) \\n\",\n \t\t\"wdt:P178 ?producer. # the producer is the founder/creator\\n\",\n \t\t\"?producer wdt:P242 wd:Q34 . # the producer has a country of origin which is Sweden\\n\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P750 wd:Q1651543 ;\",\n \t\t\"?producer wdt:P272 wd:Q1651543 .\",\n \t\t\"?producer wdt:P112 wd:Q34 .\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor kg:2311 kg:9238 .\",\n \t\t\"?producer kg:8602 kg:9238 .\",\n \t\t\"?producer kg:8573 kg:8167 .\"\n \t]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?henutmire wdt:P22 ?parent ;\",\n    \"wdt:P26 ?spouse ;\",\n    \"wdt:P3375 ?sibling .\",\n    \"{?parent wdt:P189 wd:Q56409675.} UNION\",\n    \"{?spouse wdt:P189 wd:Q56409675.} UNION\",\n    \"{?sibling wdt:P189 wd:Q56409675.}\"\n  ]\n}\n    "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q443473 .\",\n \t\t\"?spouse wdt:P26 wd:Q443473 .\",\n \t\t\"?sibling wdt:P3373 wd:Q443473 .\",\n \t\t\"{?parent wdt:P26 wd:Q210535.} UNION {?spouse wdt:P26 wd:Q210535.} UNION {?sibling wdt:P26 wd:Q210535.}\"\n \t]\n}\n    "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  VALUES (?henutmire) {(kg:7348)}\",\n \t\t\"  { ?spouse kg:2887 ?henutmire. FILTER(?spouse = kg:2542) } UNION\",\n \t\t\"  { ?child kg:3982 ?henutmire. FILTER(?child = kg:2542) } UNION\",\n \t\t\"  { ?sibling kg:8188 ?henutmire. FILTER(?sibling = kg:2542) }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Human (instance of human Q5) \\n\",\n \t\t\"?person wdt:P27 wd:Q16; \", \">// Canadian nationality (country of citizenship Q16 - Canada)\\n\",\n \t\t\"?person wdt:P40 wd:Q3985885; \", \">// Spouse is Jessica Drake (spouse/martial partner P40 - Jessica Drake Q3985885)\\n\",\n \t\t\"?person wdt:P106 wd:Q27823. \" , \">// Occupation as costume designer (occupation P106 - costume designer Q27823)\\n\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q233128;\",\n \t\t\"?spouse wdt:P21 wd:Q6581097;\",\n \t\t\"?spouse wdt:P27 wd:Q16;\",\n \t\t\"?spouse wdt:P106 wd:Q1323191.\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{ \"query\": [\"@subject kg:3791 kg:0382 . @subject kg:6728 kg:4504 . kg:4504 kg:2053 kg:3623 . kg:4504 kg:5779 kg:3526 .\"] }"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?sequel wdt:P31 wd:Q11424; # instance of film\\n\",\n \t \"wdt:P800 ?productionCompany; # production company\\n\",\n \t \"wdt:P155 wd:Q767955. # sequel or prequel to Between Love and Hatred (Q767955)\\n\",\n \t \"?productionCompany rdfs:label \\\"Televisa\\\"@en.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q115945; # The sequel of Between Love and Hatred (Q115945) \"\n \t\t,\"?sequel wdt:P750 wd:Q47099.\" ]\n }"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel kg:0879 kg:5106 .\",\n \t\t\"?sequel kg:3680 kg:8932 .\",\n \t\t\"?sequel kg:5175 ?producer .\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?verizon wdt:P1265 ?acquisition.\",\n \t\t\"?acquisition wdt:P31 wd:Q4830397.\",\n \t\t\"?acquisition wdt:P279* wd:Q4830397.\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n \t\"query\": [\n \t\t\"?child wdt:P40 ?parent .\",\n \t\t\"?parent wdt:P355 wd:Q467752 .\",\n \t\t\"?child wdt:P31 wd:Q4830453 .\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{\n \t\"query\": [\"$parent\", \"$child\"] }\n \t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?producer_or_distributor wdt:P31 wd:Q2540869 ;\",\n    \"wdt:P137 wd:Q7677 ;\", \">// Barbary Coast (film) Q7677 is produced by ?producer_or_distributor. This part might need adjustment based on exact relation between film and producer/distributor in Wikidata, but for simplicity, it's assumed to be a direct production link here as an example since the specific property isn't provided or commonly used directly this way in Wikidata for films and their producers/distributors without more context about the relationship type needed (e.g., P129 is for producer of work, but not specifically for film producers or distributors in a general sense that would link to Barbary Coast's production company directly by default without further exploration into specific instances or properties used for this historical context).\",\n    \"wdt:P57 wd:Q46803 ;\", \">// Mary Pickford (Q46803) is involved with ?producer_or_distributor somehow. Again, the property might need adjustment based on exact relation in Wikidata between a person and founding/being part of an organization.\",\n    \"wdt:P57 wd:Q12895 .\", \">// Charlie Chaplin (Q12895) is involved with ?producer_or_distributor somehow. Same note as above applies here too regarding the property used for this relation in Wikidata.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?producer wdt:P272 wd:Q524849 ;\",\n    \"wdt:P112/wdt:P31 wd:Q104109, wd:Q882 .\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\n \t\"query\": [\"$producer\", \"$distributor\"]\n \t}\n \t            \t\t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?pearl_jam wdt:P145 ?influence_actor.\",\n \t\t\"?astrid_young wdt:P3373 ?sibling.\",\n \t\t\"?sibling rdfs:label ?actor_name.\",\n \t\t\"?influence_actor wdt:P1302 ?astrid_young.\"\n \t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n \t\"query\": [\n \t\t\"?pearlJam wdt:P737 ?influencedActor.\",\n \t\t\"?influencedActor wdt:P106 wd:Q33999.\",\n \t\t\"?sibling wdt:P3373 wd:Q4811453.\",\n \t\t\"?sibling wdt:P737 ?influencedActor.\"\n \t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{\n \t\"query\": [\n \t\t\"?actor kg:8238 kg:6618 .\",\n \t\t\"?sibling kg:5525 kg:0994 .\",\n \t\t\"kg:1604 kg:0855 ?actor .\"\n \t]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q104982763; # Jens Jørgen Thorsen as author/editor\",\n \t\t\"?item wdt:P50 wd:Q104982764; # Ole John as author/editor\",\n \t\t\"?item wdt:P50 wd:Q104982765.  # Jørgen Leth as author/editor\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q1687239 ;\",\n \t\t\"wdt:P58 wd:Q35979475 ;\",\n \t\t\"wdt:P58 wd:Q562108 .\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:2298 kg:9960 ;\",\n \t\t\"?resource kg:2298 kg:1913 ;\",\n \t\t\"?resource kg:2298 kg:7552 .\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?miguel_albaladejo wdt:P1549 ?film.\",\n \t\t\"?costume_designer wdt:P31 wd:Q20763865;\",\n \t\t\"\\twdt:P106/wdt:P279* wd:Q158758;\",\n \t\t\"\\twdt:P1476 ?film;\",\n \t\t\"\\twdt:P414|wdt:P106 ?spanish_nationality.\",\n \t\t\"?spanish_nationality wdt:P31 wd:Q2980805.\"\n \t]\n}\n    "}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q3083718 ;\",\n \t\t\"wdt:P27 wd:Q29 ;\",\n \t\t\"wdt:P2515 ?costumeDesigner .\"\n \t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:1890 kg:3009 ;\",\n \t\t\"?sibling kg:3394 kg:9609 ;\",\n \t\t\"?film kg:1890 kg:8565 ;\",\n \t\t\"?film kg:3335 ?sibling ;\",\n \t\t\"?costumeDesigner kg:1890 kg:4627 ;\",\n \t\t\"?film kg:4627 ?costumeDesigner .\"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Instance of human (for person filter, though not strictly necessary for this specific query but good practice to ensure we're querying persons specifically if needed in broader context scenarios) \\n\",\n \t\t\"?person wdt:P21 wd:Q6581072; \", \">// Female gender\\n\",\n \t\t\"?person wdt:P39 wd:Q42334; \", \">// Composer occupation\\n\",\n \t\t\"?person wdt:P26 wd:Q42334. \" , \">// Spouse of Olof Palme (correcting the name to match the question's intent about Mattias Järvinen Palme, assuming it refers to a relation with Olof Palme as he is more widely known and has Wikidata entry Q42334)\\n\",\n \t\t\"?person wdt:P27 wd:Q34. \" , \">// Swedish nationality\\n\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P106 wd:Q36834; \",\n \t\t\"wdt:P26 ?spouse; \",\n \t\t\"wdt:P27 wd:Q34; \",\n \t\t\"wdt:P21 wd:Q6581072; \",\n \t\t\"?spouse wdt:P1503 wd:Q96203723. \"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{\n \t\"query\": [\"$composer\"]\n \t}\n \t                \t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P1476 ?title .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"FILTER(?title = \\\"Stop for Bud\\\"@en) .\",\n    \"?film wdt:P50|wdt:P95|wdt:P161 ?person .\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Jens Jørgen Thorsen\\\"@en).}\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Ole John\\\"@en).}\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Jørgen Leth\\\"@en).}\"\n  ]\n}\n    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?resource WHERE {\\n    wd:Q20729551 wdt:P162 ?producer ;\\n               wdt:P1040 ?editor .\\n    VALUES (?producer ?editor) {(wd:Q1687239 wd:Q35979475) (wd:Q562108 wd:Q35979475)} .\\n    ?resource wdt:P162 wd:Q1687239 ;\\n              wdt:P1040 wd:Q35979475 .\\n}\"] }"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film kg:3795 ?resource . \",\n \t\t\"?film kg:1205/kg:2710 ?producer1 .\",\n \t\t\"?film kg:1205/kg:3132 ?producer2 .\",\n \t\t\"?film kg:1205/kg:4688 ?producer3 .\",\n \t\t\"?film kg:0702/kg:2710 ?editor1 .\",\n \t\t\"?film kg:0702/kg:3132 ?editor2 .\",\n \t\t\"?film kg:0702/kg:4688 ?editor3 .\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?ptolemyIX wdt:P31 wd:Q5.\",\n    \"?ptolemyIX rdfs:label \\\"Ptolemy IX Lathyros\\\"@en.\",\n    \"?sibling wdt:P22 ?ptolemyIX.\",\n    \"?sibling wdt:P276 ?marriageToAntiochus.\",\n    \"?antiochus wdt:P31 wd:Q5.\",\n    \"?antiochus rdfs:label \\\"Antiochus IX Cyzicenus\\\"@en.\",\n    \"{?sibling wdt:P20 ?antiochus.} UNION {?sibling wdt:P26 ?antiochus.}\",\n    \"FILTER(?sibling != ?ptolemyIX)\"\n  ]\n}\n    "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q3340;\",\n \t\t \"wdt:P26 wd:Q296446;\",\n \t\t \"wdt:P21 wd:Q6581072.\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:0360 kg:3250 .\",\n \t\t\"?sibling kg:9407 ?gender .\",\n \t\t\"?marriage kg:9937 kg:3533 .\",\n \t\t\"?marriage kg:0360 ?sibling .\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wdt:P50\",\n    \"?author\",\n    \".\",\n    \"?item\",\n    \"wdt:P425\",\n    \"?editor\",\n    \".\",\n    \"FILTER(?editor=wd:Q16937855||?editor=wd:Q16937856||?editor=wd:Q16937857)\",\n    \"{\",\n    \"?item\",\n    \"wdt:P31\",\n    \"/\",\n    \"wdt:P279*\",\n    \"wd:Q4739008\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"?item\",\n    \"wdt:P31\",\n    \"/\",\n    \"wdt:P279*\",\n    \"wd:Q571651\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P58 wd:Q562108 ;\",\n \t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n \t\t\"?resource wdt:P1040 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P1040 wd:Q562108 ;\",\n \t\t\"?resource wdt:P1040 wd:Q35979475 .\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:5726 kg:8753 ;\",\n \t\t\"?resource kg:5726 kg:6599 ;\",\n \t\t\"?resource kg:0254 kg:2763 .\"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 ?author.\",\n    \"?work wdt:P50 wd:Q123456789, wd:Q987654321, wd:Q112233445.\",\n    \"?work wdt:P31 wd:Q571450.\",\n    \"FILTER(?author = ?director)\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P58 wd:Q1687239; wdt:P58 wd:Q562108; wdt:P58 wd:Q35979475;\",\n \t\t\"?movie wdt:P1040 wd:Q1687239; wdt:P1040 wd:Q562108; wdt:P1040 wd:Q35979475.\",\n \t\t\"FILTER (?movie = wd:Q20729551)\"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:isStopForBud kg:1771 .\",\n \t\t\"{?movie kg:screenwriter kg:0943 . ?movie kg:screenwriter kg:1474 . ?movie kg:screenwriter kg:3342 .} UNION {?movie kg:filmEditor kg:0943 . ?movie kg:filmEditor kg:1474 . ?movie kg:filmEditor kg:3342 .}\"\n \t]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P1476 ?title .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"FILTER(?title = \\\"Stop for Bud\\\"@en)\",\n    \"?film wdt:P50 ?author1 ;\",\n    \"wdt:P50 ?author2 ;\",\n    \"wdt:P50 ?author3 .\",\n    \"{?author1 rdfs:label ?name1. FILTER(LANG(?name1) = 'da' && (?name1 = \\\"Ole John\\\"@da || ?name1 = \\\"Jørgen Leth\\\"@da || ?name1 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"{?author2 rdfs:label ?name2. FILTER(LANG(?name2) = 'da' && (?name2 = \\\"Ole John\\\"@da || ?name2 = \\\"Jørgen Leth\\\"@da || ?name2 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"{?author3 rdfs:label ?name3. FILTER(LANG(?name3) = 'da' && (?name3 = \\\"Ole John\\\"@da || ?name3 = \\\"Jørgen Leth\\\"@da || ?name3 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"FILTER(?author1 != ?author2 && ?author2 != ?author3 && ?author1 != ?author3)\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q20729551;\",\n \t\t\"(wdt:P162|wdt:P1040) wd:Q35979475;\",\n \t\t\"(wdt:P162|wdt:P1040) wd:Q562108;\",\n \t\t\"(wdt:P162|wdt:P1040) wd:Q1687239.\"\n \t]\n }"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P122 ?producer .\",\n \t\t\"?item wdt:P179 ?exec_producer .\",\n \t\t\"{?producer rdfs:label \\\"Sam Simon\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?producer rdfs:label \\\"James L. Brooks\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?producer rdfs:label \\\"Matt Groening\\\"@en.}\",\n \t\t\"?exec_producer rdfs:label ?execProducerName .\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P162 wd:Q365090.\",\n \t\t\"?resource wdt:P1431 wd:Q95125.\",\n \t\t\"?resource wdt:P1431 wd:Q43994.\"\n \t]\n}\n    "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?ptolemyX wdt:P31 wd:Q5; wdt:P734 wd:Q203689.\",\n \t\t\"?ptolemyleftSibling wdt:P22 ?ptolemyX;\",\n \t\t\"wdt:P21 wd:Q6581072;\",\n \t\t\"wdt:P734 ?nameLeftSibling.\",\n \t\t\"?ptolemyIX wdt:P734 wd:Q203960; wdt:P22 ?ptolemyleftSibling.\",\n \t\t\"?ptolemyleftSibling wdt:P452 ?ptolemyIX.\"\n \t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q3340;\",\n \t\t\"wdt:P3373 wd:Q3345;\",\n \t\t\"wdt:P26 wd:Q3340;\",\n \t\t\"wdt:P21 wd:Q6581072.\"\n \t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{\n \t\"query\": [\n \t\t\"?siblingOfPtolemyX kg:3488 ?ptolemyX .\",\n \t\t\"?ptolemyX kg:5344 kg:5835 .\",\n \t\t\"?siblingOfPtolemyX kg:3488 kg:5268 .\",\n \t\t\"?siblingOfPtolemyX kg:5138 kg:5268 .\"\n \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q5394836 ;\", \">// Identify that ?work is an instance of TV series (Breaking Bad in this case, but not directly specified to keep it general for the structure example) \\n\",\n    \"wdt:P577 ?productionDate ;\", \">// Production start date\\n\",\n    \"wdt:P50 ?author .\", \">// Author/Creator\\n\",\n    \"?author wdt:P31 wd:Q5 ;\", \">// The author is a human\\n\",\n    \"wdt:P2093 wd:Q76845 ;\", \">// Vince Gilligan (by ID)\\n\",\n    \"wdt:P2093 wd:Q5621355 .\" , \">// George Mastras (by ID), this structure assumes both are primary creators which might not be accurate for the roles of direction and writing separately.\\n\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P162 wd:Q4500;\",\n \t\t\"       wdt:P162 wd:Q5542223;\",\n \t\t\"       wdt:P57 wd:Q4500;\",\n \t\t\"       wdt:P57 wd:Q5542223;\",\n \t\t\"       wdt:P58 wd:Q4500;\",\n \t\t\"       wdt:P58 wd:Q5542223.\",\n \t\t\"?work rdfs:label ?title filter (lang(?title) = 'en').\"\n \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{\n \t\"query\": [\"$BreakingBad\"]\n \t}\n \t                \t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?costumeDesigner wdt:P31 wd:Q483209.\",\n    \"?work1 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Tom at the Farm\\\"@en.\",\n    \"?work2 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Heartbeats\\\"@en.\",\n    \"?work3 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Laurence Anyways\\\"@en.\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P161 ?film .\",\n \t\t\"{?film wdt:P1040 ?costumeDesigner.} UNION \",\n \t\t\"{?film wdt:P106 wd:Q1323191.}\",\n \t\t\"FILTER(?film = wd:Q2615443 || ?film = wd:Q2336453 || ?film = wd:Q3530946)\"\n \t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4835 kg:4718 .\",\n \t\t\"?y kg:film kg:1968 ; kg:castMember ?x .\",\n \t\t\"?z kg:film kg:9065 ; kg:castMember ?x .\",\n \t\t\"?w kg:film kg:8233 ; kg:castMember ?x .\"\n \t]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P166 ?work.\",\n    \"{?work wdt:P1476 \\\"In the Park\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"Shanghaied\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"Modern Times\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"The Professor\\\"@en.}\",\n    \"?person wdt:P39 wd:Q208559.\",\n    \"?person wdt:P39 wd:Q15875315.\"\n  ]\n}\n    "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?person wdt:P31 wd:Q5.\",\n \t    \t        \t\t\"?person wdt:P161 wd:Q658822, wd:Q921678, wd:Q45602, wd:Q2718259.\",\n \t    \t        \t\t\"OPTIONAL { ?person wdt:P1040 wd:Q658822, wd:Q921678, wd:Q45602, wd:Q2718259. }\"\n \t                \t]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4097 kg:0636 .\",\n \t\t\"?x kg:7044 kg:8179 .\",\n \t\t\"?x kg:7044 kg:9013 .\",\n \t\t\"?x kg:7044 kg:7719 .\",\n \t\t\"?x kg:7044 kg:0287 .\"\n \t]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?directed_by ?person .\",\n    \"?work ?edited_by ?person .\",\n    \"{?person ?label \\\"Eduardo Sánchez\\\"@en.}\",\n    \"{?person ?label \\\"Gareth Evans\\\"@en.}\",\n    \"{?person ?label \\\"Jason Eisener\\\"@en.}\",\n    \"{?person ?label \\\"Adam Wingard\\\"@en.}\"\n  ]\n}\n    "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P57 wd:Q1291210, wd:Q4207234, wd:Q16198328, wd:Q4679987 .\",\n \t\t\"?film wdt:P1040 wd:Q1291210, wd:Q4207234, wd:Q16198328, wd:Q4679987 .\"\n \t]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:5107 ?director .\",\n \t\t\"FILTER(?director = kg:6442 || ?director = kg:6912 || ?director = kg:3907 || ?director = kg:1480) .\"\n \t]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Alexandre Rockwell\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Quentin Tarantino\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Allison Anders\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Robert Rodriguez\\\".}\"\n  ]\n}\n    "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nwd:Q1137372 wdt:P57 ?director ;\\n           wdt:P58 ?screenwriter .\\n?director wd:Q549956 , wd:Q3772 , wd:Q47284 , wd:Q2838329 .\\n?screenwriter wd:Q549956 , wd:Q3772 , wd:Q47284 , wd:Q2838329 .\" ] }"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:isFourRooms ?film .\",\n \t\t\"?film kg:hasDirector ?director1 ;\",\n \t\t\"kg:hasScreenwriter ?screenwriter1 ;\",\n \t\t\"kg:hasScreenwriter ?screenwriter2 ;\",\n \t\t\"kg:hasScreenwriter ?screenwriter3 .\",\n \t\t\"{?director1 kg:isAlexandreRockwell true.}\",\n \t\t\"{?screenwriter1 kg:isQuentinTarantino true.}\",\n \t\t\"{?screenwriter2 kg:isAllisonAnders true.}\",\n \t\t\"{?screenwriter3 kg:isRobertRodriguez true.}\"\n \t]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q11424; # Super Rhino is an instance of work (film, in this context)\\n\",\n    \"wdt:P57 ?directorProducer.\\n\", \"># Get the director/producer\\n\",\n    \"?directorProducer rdfs:label ?name .\\n\", \"># Get the name of the director/producer\\n\",\n    \"FILTER (?name IN ('Susie Essman', 'Malcolm McDowell', 'Clark Spencer', 'Miley Cyrus')) # Filter by names\\n\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P3977597 wd:Q3977597 .\",\n \t\t\"?work wdt:P57 wd:Q40220 .\",\n \t\t\"?work wdt:P57 wd:Q117392 .\",\n \t\t\"?work wdt:P57 wd:Q5127380 .\",\n \t\t\"?work wdt:P162 wd:Q4235 .\"\n \t]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{\n  \"query\": [\n    \"?director kg:0032 kg:0301 .\",\n    \"?producer1 kg:1706 kg:0301 .\",\n    \"?producer2 kg:1706 kg:0301 .\",\n    \"?producer3 kg:1706 kg:0301 .\",\n    \"{ ?director kg:9737 } UNION { ?producer1 kg:9737 } UNION { ?producer2 kg:9737 } UNION { ?producer3 kg:9737 } .\", \">// Susie Essman as director or producer role check for Super Rhino movie entity (kg:0301) in the graph. The same pattern is followed below for other entities to be checked against their roles and the movie entity. However, this query structure doesn't directly match the question's intent but follows the given instruction to return resources only based on provided properties and entities. A more precise formulation would require a different approach or additional context not provided here regarding how these entities are linked as directors/produces in the KG schema. Thus, this is an interpretation based on available data points and instructions given.\",\n    \"{ ?director kg:9813 } UNION { ?producer1 kg:9813 } UNION { ?producer2 kg:9813 } UNION { ?producer3 kg:9813 } .\",\n    \"{ ?director kg:2682 } UNION { ?producer1 kg:2682 } UNION { ?producer2 kg:2682 } UNION { ?producer3 kg:2682 } .\",\n    \"{ ?director kg:5184 } UNION { ?producer1 kg:5184 } UNION { ?producer2 kg:5184 } UNION { ?producer3 kg:5184 } .\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q147829 .\",\n \t\t\"?item wdt:P186 ?executive_produced_by .\",\n \t\t\"?item wdt:P161 ?produced_by .\",\n \t\t\"?item wdt:P750 ?edited_by .\"\n \t]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q38222 ;\",\n \t\t\"?work wdt:P1040 wd:Q38222 ;\",\n \t\t\"?work wdt:P1431 wd:Q38222 ;\",\n \t\t\"?work wdt:P162 wd:Q38222 .\"\n \t]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:8776 ?person . \",\n \t\t\"?resource kg:6572 ?person . \",\n \t\t\"?resource kg:1896 ?person . \",\n \t\t\"?resource kg:6686 ?person . \",\n \t\t\"?person kg:id 'kg:6869' . \"\n \t]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work1 wdt:P856 wd:Q7604239; # Every Man for Himself (Q7604239) instance of creative work (P856, but using P856 as placeholder since the exact property is illustrative and might not exist in Wikidata structure directly related to works).\",\n \t\t\"?work2 wdt:P856 wd:Q10207; # Passion (film) (Q10207)\",\n \t\t\"?work3 wdt:P856 wd:Q49052. # Notre musique (Q49052)\",\n \t\t\"?person wdt:P921 ?work1;\",\n \t\t\"wdt:P921 ?work2;\",\n \t\t\"wdt:P921 ?work3.\",\n \t\t\"?person wdt:P1416 wd:Q7874. # employed by Cahiers du cinéma (Q7874)\"\n \t]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P58 wd:Q972787, wd:Q672061, wd:Q3141131;\",\n \t\t\"?person wdt:P1040 wd:Q972787, wd:Q672061, wd:Q3141131;\",\n \t\t\"?person wdt:P108 wd:Q909176.\"\n \t]\n}\n   \t \t  \t \t  \t \t  \t "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2392 ?y .\",\n \t\t\"?x kg:2942 ?z .\",\n \t\t\"?x kg:isEmployedby/kg:2410 .\",\n \t\t\"?a kg:2452/kg:hasScreenwriter ?x .\",\n \t\t\"?b kg:8913/kg:hasFilmEditor ?x .\",\n \t\t\"?c kg:4179/kg:hasFilmEditor ?x .\"\n \t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q54086729 ;\", \">// Assuming Q54086729 is for TV series or specific work category, adjust as necessary based on the actual Wikidata item for Laws of Attraction\",\n    \"wdt:P57 ?producer .\",\n    \"?producer wdt:P161 wd:Q30750 ;\", \">// Q30750 for Bob Yari, replace with correct IDs for each individual\",\n    \"wdt:P161 wd:Q42988 ;\", \">// Pierce Brosnan's ID\",\n    \"wdt:P161 wd:Q106871 ;\", \">// Toby Emmerich's ID\",\n    \"wdt:P161 wd:Q5523955 .\" , \">// Elie Samaha's ID\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q819109.\",\n    \"?person1 wdt:P1431 ?movie;\",\n    \"wdt:P162 ?movie;\",\n    \"wd:Q1969128.\",\n    \"?person2 wdt:P1431 ?movie;\",\n    \"wdt:P162 ?movie;\",\n    \"wd:Q81520.\",\n    \"?person3 wdt:P1431 ?movie;\",\n    \"wdt:P162 ?movie;\",\n    \"wd:Q1295611.\",\n    \"?person4 wdt:P1431 ?movie;\",\n    \"wdt:P162 ?movie;\",\n    \"wd:Q381545.\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:id kg:9039 .\",\n \t\t\"?movie kg:executiveProducer ?execProd .\",\n \t\t\"{?execProd kg:id kg:3569.} UNION {?execProd kg:id kg:6124.} UNION {?execProd kg:id kg:4872.} UNION {?execProd kg:id kg:0074.}\",\n \t\t\"?movie kg:producer ?prod .\",\n \t\t\"{?prod kg:id kg:3569.} UNION {?prod kg:id kg:6124.} UNION {?prod kg:id kg:4872.} UNION {?prod kg:id kg:0074.}\"\n \t]\n}\n  \t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?kurosawa.\",\n    \"?kurosawa rdfs:label \\\"Akira Kurosawa\\\"@en.\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?titleFilter.\",\n    \"FILTER (regex(?titleFilter, '^Kagemusha$', 'i')).\",\n    \"?film wdt:P58 wd:Q8006;\",\n    \"?film wdt:P1040 wd:Q8006;\",\n    \"?film wdt:P162 wd:Q8006;\",\n    \"?film wdt:P1431 wd:Q8006.\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 ?director .\",\n \t\t\"?work wdt:P57 Jens_Jørgen_Thorsen .\",\n \t\t\"?work wdt:P57 Ole_John .\",\n \t\t\"?director rdfs:label \\\"Jørgen Leth\\\"@en .\",\n \t\t\"FILTER(?director != Jens_Jørgen_Thorsen && ?director != Ole_John)\",\n \t\t\"?work wdt:P31/wdt:P279* wd:Q11424 .\"\n \t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q562108 ;\",\n \t\t\"?work wdt:P57 wd:Q1687239 ;\",\n \t\t\"?work wdt:P57 wd:Q35979475 ;\",\n \t\t\"?work wdt:P58 wd:Q562108 ;\",\n \t\t\"?work wdt:P58 wd:Q1687239 ;\",\n \t\t\"?work wdt:P58 wd:Q35979475 ;\",\n \t\t\"?work wdt:P1040 wd:Q562108 ;\",\n \t\t\"?work wdt:P1040 wd:Q1687239 ;\",\n \t\t\"?work wdt:P1040 wd:Q35979475 .\"\n \t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:6545 kg:6296 ;\",\n \t\t\"?resource kg:8202 kg:6296, kg:9267 ;\",\n \t\t\"?resource kg:7913 kg:8650 .\"\n \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?directed_by ?director .\",\n \t\t\"?work ?written_by ?writer .\",\n \t\t\"?work ?edited_by ?editor .\",\n \t\t\"{?director (wdt:P1559|wdt:P2093) \\\"Ole John\\\".}\",\n \t\t\"{?writer (wdt:P1559|wdt:P2093) \\\"Jørgen Leth\\\".}\",\n \t\t\"{?editor (wdt:P1559|wdt:P2093) \\\"Jens Jørgen Thorsen\\\".}\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q35979475, wd:Q562108, wd:Q1687239 ;\",\n \t\t\"?work wdt:P58 wd:Q35979475, wd:Q562108, wd:Q1687239 ;\",\n \t\t\"?work wdt:P1040 wd:Q35979475, wd:Q562108, wd:Q1687239 .\"\n \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:2033 kg:1751 .\",\n \t\t\"?resource kg:2033 kg:2915 .\",\n \t\t\"?resource kg:2033 kg:7403 .\",\n \t\t\"?resource kg:0860 kg:1751 .\",\n \t\t\"?resource kg:0860 kg:2915 .\",\n \t\t\"?resource kg:0860 kg:7403 .\",\n \t\t\"?resource kg:2823 kg:1751 .\",\n \t\t\"?resource kg:2823 kg:2915 .\",\n \t\t\"?resource kg:2823 kg:7403 .\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P800 ?film.\",\n    \"{?film wdt:P1476 \\\"The Whip and the Body\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Hatchet for the Honeymoon\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Danger: Diabolik\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Black Sunday\\\"@en.}\",\n    \"?person wdt:P31 wd:Q209589.\",\n    \"?person wdt:P106 wd:Q210405.\"\n  ]\n}\n    "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer ?film wd:Q283699 ;\",\n \t\t\"?cinematographer ?film wd:Q629819 ;\",\n \t\t\"?cinematographer ?film wd:Q1216566 ;\",\n \t\t\"?cinematographer ?film wd:Q600762 .\",\n \t\t\"FILTER(?film = wdt:P344 || ?film = wdt:P57)\",\n \t\t\"?cinematographer wdt:P106 wd:Q3282637\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?actor wdt:P31 wd:Q5.\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate;\",\n    \"rdfs:label ?titleLabel;\",\n    \"p:P161/ps:P161 ?actor;\",\n    \"p:P337/pq:P599 ?cinematographerRole;\",\n    \"p:P57/pq:P599 ?directorRole.\",\n    \"{?film wdt:P1477 \\\"Six Men Getting Sick\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Inland Empire\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Darkened Room\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Rabbits\\\"@en.}\",\n    \"FILTER(?actor = ?cinematographerRole && ?actor = ?directorRole)\"\n  ]\n}\n   "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 wd:Q3485595, wd:Q862058, wd:Q3016313, wd:Q1473406 .\",\n \t\t\"?entity wdt:P57 wd:Q3485595, wd:Q862058, wd:Q3016313, wd:Q1473406 .\",\n \t\t\"?entity wdt:P106 wd:Q33999.\"\n \t]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n \t\"query\": [\"$actor\"]\n \t}\n \t                \t\t"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 ?directors.\",\n \t\t\"?item wdt:P920 ?writers.\",\n \t\t\"?item wdt:P189 ?exec_producers.\",\n \t\t\"{?directors (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"UNION\",\n \t\t\"{?writers (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"UNION\",\n \t\t\"{?exec_producers (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"?directors rdfs:label ?directorName.\",\n \t\t\"?writers rdfs:label ?writerName.\",\n \t\t\"?exec_producers rdfs:label ?execProducerName.\",\n \t\t\"FILTER((?directorName = \\\"David Zucker\\\"@en || ?directorName = \\\"Jim Abrahams\\\"@en || ?directorName = \\\"Jerry Zucker\\\"@en) && (?writerName = \\\"David Zucker\\\"@en || ?writerName = \\\"Jim Abrahams\\\"@en || ?writerName = \\\"Jerry Zucker\\\"@en) && (?execProducerName = \\\"David Zucker\\\"@en || ?execProducerName = \\\"Jim Abrahams\\\"@en || ?execProducerName = \\\"Jerry Zucker\\\"@en))\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P86 ?work.\",\n    \"{?work wdt:P57 ?item.} UNION\",\n    \"{?work wdt:P92 ?item.} UNION\",\n    \"{?work wdt:P58 ?item.}\",\n    \"FILTER(?item = wd:Q104315 || ?item = wd:Q166775 || ?item = wd:Q166776)\"\n  ]\n}\n    "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?work wdt:P57 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n    \"?work wdt:P58 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n    \"?work wdt:P1040 wd:Q35979475, wd:Q1687239, wd:Q562108 .\"\n  ]\n}\n  \t            \t \t  "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?film kg:7826/kg:8518 ;\", \">// Ole John as director\",\n    \"?film kg:4439/kg:8518 ;\", \">// Ole John as screenwriter\",\n    \"?film kg:8590/kg:8518 ;\", \">// Ole John as film editor\",\n    \"?film kg:7826/kg:0721 ;\", \">// Jens Jørgen Thorsen as director\",\n    \"?film kg:4439/kg:0721 ;\", \">// Jens Jørgen Thorsen as screenwriter\",\n    \"?film kg:8590/kg:0721 ;\", \">// Jens Jørgen Thorsen as film editor\",\n    \"?film kg:7826/kg:8090 ;\", \">// Jørgen Leth as director\",\n    \"?film kg:4439/kg:8090 ;\", \">// Jørgen Leth as screenwriter\",\n    \"?film kg:8590/kg:8090 .\" ,\">// Jørgen Leth as film editor\"\n  ]\n}\n   "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q761453; \", \">// P800 is for film series, Q761453 is Grindhouse (film series) as an example, but we need to find the specific work first which might be a movie or part of it. This line may require adjustment based on exact Wikidata structure for \"]} "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q47284, wd:Q522057, wd:Q358714, wd:Q298255, wd:Q3772 .\",\n \t\t\"?work wdt:P58 wd:Q47284, wd:Q522057, wd:Q358714, wd:Q298255, wd:Q3772 .\",\n \t\t\"FILTER(?work = wd:Q679023)\"\n \t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:6979 ?director1; kg:6979 ?director2; kg:6979 ?director3; kg:6979 ?director4; kg:6979 ?director5.\",\n \t\t\"?movie kg:7920 ?screenwriter1; kg:7920 ?screenwriter2; kg:7920 ?screenwriter3; kg:7920 ?screenwriter4; kg:7920 ?screenwriter5.\"\n \t]\n }\n \t            \t\t"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmProducer wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q28794898;\",\n      \"p:P160/wdt:P2860 ?movie.\",\n    \"{?movie rdfs:label \\\"Katzelmacher\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"Lili Marleen\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"Whity\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"The Niklashausen Journey\\\"@en.}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer wdt:P106 wd:Q3282637 .\",\n \t\t\"?movie1 wdt:P58 ?producer ; wdt:P1040 ?producer ; wikibase:sense/wikibase:directClaim/wdt:P31 wd:Q567519 .\",\n \t\t\"?movie2 wdt:P58 ?producer ; wdt:P1040 ?producer ; wikibase:sense/wikibase:directClaim/wdt:P31 wd:Q686125 .\",\n \t\t\"?movie3 wdt:P58 ?producer ; wdt:P1040 ?producer ; wikibase:sense/wikibase:directClaim/wdt:P31 wd:Q327427 .\",\n \t\t\"?movie4 wdt:P58 ?producer ; wdt:P1040 ?producer ; wikibase:sense/wikibase:directClaim/wdt:P31 wd:Q2789885 .\"\n \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{\n \t\"query\": [\"$filmProducer\"]\n \t}\n \t                \t\t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?directedBy ?director.\",\n    \"?work ?writtenBy ?writer.\",\n    \"{?director ?hasName \\\"Thomas Schnauz\\\".}\",\n    \"{?director ?hasName \\\"Peter Gould\\\".}\",\n    \"{?director ?hasName \\\"George Mastras\\\".}\",\n    \"{?director ?hasName \\\"Sam Catlin\\\".}\",\n    \"{?director ?hasName \\\"Vince Gilligan\\\".}\",\n    \"{?writer ?hasName \\\"Thomas Schnauz\\\".}\",\n    \"{?writer ?hasName \\\"Peter Gould\\\".}\",\n    \"{?writer ?hasName \\\"George Mastras\\\".}\",\n    \"{?writer ?hasName \\\"Sam Catlin\\\".}\",\n    \"{?writer ?hasName \\\"Vince Gilligan\\\".}\"\n  ]\n}\n   "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 wd:Q15042700, wd:Q7174311, wd:Q5542223, wd:Q7407299, wd:Q4500 .\",\n \t\t\"?item wdt:P58 wd:Q15042700, wd:Q7174311, wd:Q5542223, wd:Q7407299, wd:Q4500 .\"\n \t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:4382 kg:0768 ;\",\n \t\t\"?resource kg:4382 kg:1058 ;\",\n \t\t\"?resource kg:4382 kg:0085 ;\",\n \t\t\"?resource kg:4382 kg:0044 ;\",\n \t\t\"?resource kg:4382 kg:1644 ;\",\n \t\t\"?resource kg:7904 kg:0768 ;\",\n \t\t\"?resource kg:7904 kg:1058 ;\",\n \t\t\"?resource kg:7904 kg:0085 ;\",\n \t\t\"?resource kg:7904 kg:0044 ;\",\n \t\t\"?resource kg:7904 kg:1644 .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?directedBy ?director.\",\n \t\t\"?work ?writtenBy ?writer.\",\n \t\t\"?work ?editedBy ?editor.\",\n \t\t\"?director rdfs:label \\\"Ole John\\\"@en;\",\n \t\t\"?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en;\",\n \t\t\"?editor rdfs:label \\\"Jørgen Leth\\\"@en;\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n \t\t\"?resource wdt:P58 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P1040 wd:Q562108 .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:3394 kg:0969 .\",\n \t\t\"?resource kg:6803 kg:4347 .\",\n \t\t\"?resource kg:0323 kg:9492 .\"\n \t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmEditor wdt:P31 wd:Q20758946 ;\",\n    \"wdt:P162 ?producer .\",\n    \"?producer wdt:P50|wdt:P178 ?author .\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode IV – A New Hope\\\"@en.}\",\n    \"UNION\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode I – The Phantom Menace\\\"@en.}\",\n    \"UNION\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode VI – Return of the Jedi\\\"@en.}\",\n    \"FILTER NOT EXISTS {?movie rdfs:label \\\"Star Whores\\\"@en}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P1431 wd:Q17738 ;\",\n \t\t\"?person wdt:P1431 wd:Q165713 ;\",\n \t\t\"?person wdt:P1431 wd:Q181803 ;\",\n \t\t\"?person wdt:P1431 wd:Q3968346 ;\",\n \t\t\"?person wdt:P58 wd:Q17738 ;\",\n \t\t\"?person wdt:P58 wd:Q165713 ;\",\n \t\t\"?person wdt:P58 wd:Q181803 ;\",\n \t\t\"?person wdt:P58 wd:Q3968346 ;\",\n \t\t\"?person wdt:P106 wd:Q7042855 .\"\n \t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n \t\t\"?person kg:1706 kg:8244 .\",\n \t\t\"?person kg:2001 ?movie1 .\",\n \t\t\"?person kg:9079 ?movie1 .\",\n \t\t\"{?movie1 kg:subject kg:0534.} UNION {?movie1 kg:subject kg:8405.} UNION {?movie1 kg:subject kg:4043.} UNION {?movie1 kg:subject kg:0382.}\"\n \t]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 ?author.\",\n    \"?work wdt:P750 ?editor.\",\n    \"{?work wdt:P57 ?director1. FILTER(?director1 = wd:Q239644)}\",\n    \"{?work wdt:P57 ?director2. FILTER(?director2 = wd:Q809165)}\",\n    \"{?work wdt:P57 ?director3. FILTER(?director3 = wd:Q102570)}\",\n    \"FILTER(?author = ?editor)\",\n    \"?work rdfs:label ?titleLabel.\",\n    \"FILTER(LANG(?titleLabel) = 'en')\",\n    \"FILTER(CONTAINS(LCASE(?titleLabel), \\\"Stop for Bud\\\"))\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q35979475, wd:Q1687239, wd:Q562108;\",\n \t\t\"?work wdt:P1040 wd:Q35979475, wd:Q1687239, wd:Q562108;\",\n \t\t\"?work wdt:P58 wd:Q35979475, wd:Q1687239, wd:Q562108;\"\n \t]\n}\n    "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film kg:id kg:3258 .\",\n \t\t\"?film kg:director ?director .\",\n \t\t\"?film kg:screenwriter ?screenwriter .\",\n \t\t\"?film kg:filmEditor ?editor .\",\n \t\t\"{?director kg:id kg:1224.} UNION {?director kg:id kg:8676.} UNION {?director kg:id kg:9937.}\",\n \t\t\"{?screenwriter kg:id kg:1224.} UNION {?screenwriter kg:id kg:8676.} UNION {?screenwriter kg:id kg:9937.}\",\n \t\t\"{?editor kg:id kg:1224.} UNION {?editor kg:id kg:8676.} UNION {?editor kg:id kg:9937.}\"\n \t]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P31 wd:Q5; # instance of human\\n\",\n \t \"wdt:P2860 ?work; # writer or cinematographer work\\n\",\n \t \"{?work wdt:P1476 \\\"Anyone Lived in a Pretty How Town\\\"@en.} UNION \\n\",\n \t \"{?work wdt:P1476 \\\"1:42.08\\\"@en.} UNION \\n\",\n \t \"{?work wdt:P1476 \\\"Look at Life\\\"@en.} UNION\\n\",\n \t \"?resource wdt:P162 wd:Q35956; # executive producer of Star Wars: Episode I – The Phantom Menace\\n\",\n \t \"?resource wdt:P162 wd:Q801547.\" ] }\n \t"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P58 wd:Q613974 ;\",\n \t\t\"?entity wdt:P58 wd:Q208910 ;\",\n \t\t\"?entity wdt:P58 wd:Q1869678 ;\",\n \t\t\"?entity wdt:P1431 wd:Q165713 ;\",\n \t\t\"?entity wdt:P1431 wd:Q192403 .\"\n \t]\n}\n    "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:9276 kg:1454 .\",\n \t\t\"?x kg:9276 kg:6560 .\",\n \t\t\"?x kg:9276 kg:2752 .\",\n \t\t\"?x kg:6310 kg:1454 .\",\n \t\t\"?x kg:6310 kg:6560 .\",\n \t\t\"?x kg:6310 kg:2752 .\",\n \t\t\"?x kg:9100 kg:3763 .\",\n \t\t\"?x kg:9100 kg:7291 .\"\n \t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P577 ?release_date;\",\n    \"?film rdfs:label \\\"Uzak\\\"@en, \\\"Clouds of May\\\"@en;\",\n    \"?person wdt:P161 ?film;\",\n    \"?person wdt:P39 wd:Q10804256, wd:Q15756785, wd:Q209330, wd:Q160921;\",\n    \"FILTER(?film = wd:Q219407 || ?film = wd:Q219408)\"\n  ]\n}\n    "}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P57 ?director.\",\n \t\t\"?filmProducer wdt:P58 ?screenwriter.\",\n \t\t\"?filmProducer wdt:P1040 ?editor.\",\n \t\t\"?filmProducer wdt:P1431 ?executiveProducer.\",\n \t\t\"{?filmProducer wdt:P57 wd:Q1361018.} UNION {?filmProducer wdt:P57 wd:Q2086445.}\",\n \t\t\"{?filmProducer wdt:P58 wd:Q1361018.} UNION {?filmProducer wdt:P58 wd:Q2086445.}\",\n \t\t\"{?filmProducer wdt:P1040 wd:Q1361018.} UNION {?filmProducer wdt:P1040 wd:Q2086445.}\",\n \t\t\"{?filmProducer wdt:P1431 wd:Q1361018.} UNION {?filmProducer wdt:P1431 wd:Q2086445.}\",\n \t\t\"?filmProducer wdt:P106 wd:Q3282637.\"\n \t]\n }"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer a kg:7714;\",\n \t\t\"?producer kg:0443/kg:1486;\",\n \t\t\"?producer kg:0443/kg:5247;\",\n \t\t\"?producer kg:0443/kg:0638;\",\n \t\t\"?producer kg:0443/kg:1836;\",\n \t\t\"?film1 kg:0638 ?producer;\",\n \t\t\"?film2 kg:0638 ?producer.\",\n \t\t\"FILTER(?film1 = kg:2699 && ?film2 = kg:9862)\"\n \t]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 ?directors.\",\n            \"{?movie wdt:P986 ?writers.} UNION\",\n            \"{?movie wdt:P57 ?writers.}\",\n            \"?execProducers p:P1289/ps:P1289 wd:Q304990.\",\n            \"FILTER (?directors = wd:Q100576 && ?directors = wd:Q100577 && ?directors = wd:Q100578)\",\n            \"FILTER (?writers = wd:Q100576 && ?writers = wd:Q100577 && ?writers = wd:Q100578)\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 ?directors.\",\n            \"?movie p:P920/ps:P920 ?execProducers.\",\n            \"{?movie wdt:P920 ?writer.} UNION\",\n            \"{?movie wdt:P58 ?writer.}\",\n            \"FILTER (?directors = wd:Q147365 && ?directors = wd:Q147366 && ?directors = wd:Q147367)\",\n            \"?directors wdt:P1569 ?directorName.\",\n            \"?writer wdt:P1569 ?writerName.\",\n            \"?execProducers wdt:P1569 ?execProducerName.\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q762495; \",\n \t\t\"wdt:P136 wd:Q743221; \",\n \t\t\"wdt:P175 ?work. \",\n \t\t\"?work wdt:P1476/wd:value \\\"My Son, My Son, What Have Ye Done?\\\"@en; \",\n \t\t\"wdt:P800 wd:Q762495. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q1140578 ;\",\n \t\t\"wdt:P57 wd:Q2085 ;\",\n \t\t\"wdt:P58 wd:Q1140578 ;\",\n \t\t\"wdt:P58 wd:Q2085 ;\",\n \t\t\"wdt:P1431 wd:Q1511905 ;\",\n \t\t\"wdt:P1431 wd:Q583406 .\"\n \t]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8073 ?y .\",\n \t\t\"?x kg:3473 ?z .\",\n \t\t\"?x kg:4070 kg:1760 .\",\n \t\t\"?x kg:4070 kg:7512 .\",\n \t\t\"?x kg:4070 kg:3325 .\",\n \t\t\"?x kg:4070 kg:7851\"\n \t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film (wdt:P57|wdt:P50) ?director.\",\n    \"{?director rdfs:label 'Vilgot Sjöman'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Hans Alfredson'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Jörn Donner'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Gustaf Molander'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Ingmar Bergman'@en.}\"\n  ]\n}\n    "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P57 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546.\",\n \t\t\"?film wdt:P58 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546.\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film kg:3045 kg:0295 .\",\n \t\t\"?film kg:6767 / kg:3045 ?director .\",\n \t\t\"{?director kg:3501 kg:3501.} UNION {?director kg:1640 kg:1640.} UNION {?director kg:9491 kg:9491.} UNION {?director kg:0868 kg:0868.} UNION {?director kg:9984 kg:9984.}\",\n \t\t\"?film kg:0772 / kg:3045 ?screenwriter .\",\n \t\t\"{?screenwriter kg:3501 kg:3501.} UNION {?screenwriter kg:1640 kg:1640.} UNION {?screenwriter kg:9491 kg:9491.} UNION {?screenwriter kg:0868 kg:0868.} UNION {?screenwriter kg:9984 kg:9984.}\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?composer (wdt:P86|wdt:P1574)/wd:Q2039|?director (wdt:P166|wdt:P3375) ?work . \\n\",\n \t \"?work wdt:P31 wd:Q729. \\n\",\n \t \"{?composer wdt:P86 wd:Q2039.} UNION {?composer wdt:P1574 wd:Q2039.} \\n\",\n \t \"{?director wdt:P166 ?movie.} UNION {?director wdt:P3375 ?movie.} \\n\",\n \t \"?movie (wdt:P1477|wdt:P161)/(wdt:P86|wdt:P1574) wd:Q2039 . \\n\",\n \t \"{?movie wdt:P1477 wd:Q2039.} UNION {?movie wdt:P161 wd:Q2039.} \\n\",\n \t \"FILTER(?work = wd:Q58302 OR ?work = wd:Q1906756 OR ?work = wd:Q47755) .\"\n \t]\n}\n  \t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q550196 .\",\n \t\t\"?director wdt:P57 wd:Q192115 ;\",\n \t\t\"wdt:P57 wd:Q1653396 ;\",\n \t\t\"wdt:P57 wd:Q656357 .\",\n \t\t\"?cinematographer wdt:P344 wd:Q192115 ;\",\n \t\t\"wdt:P344 wd:Q1653396 ;\",\n \t\t\"wdt:P344 wd:Q656357 .\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:0995 kg:0507 .\",\n \t\t\"?composer kg:8464 kg:5795 .\",\n \t\t\"?composer kg:8464 kg:0641 .\",\n \t\t\"?composer kg:8464 kg:0483 .\",\n \t\t\"?composer kg:3439 kg:5795 .\",\n \t\t\"?composer kg:3439 kg:0641 .\",\n \t\t\"?composer kg:3439 kg:0483 .\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?composer wdt:P800 wd:Q247530; \", \">// A Woman of Paris (film) composer is ?composer, Q247530 is the Wikidata ID for \" ,\"A Woman of Paris\"\n    ,\"wdt:P800 wd:Q196527.\", \">// Pay Day (film) composer is also ?composer, Q196527 is the Wikidata ID for \" ,\"Pay Day\"\n    ,\"?actor wdt:P31 wd:Q5; \", \">// ?actor is an instance of human (Q5 in Wikidata represents humans or people), and he/she was both editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n    ,\"wdt:P161 ?composer; \", \">// ?actor directed films where ?composer composed the music (P161 is for director of work, but here it's used to link actor with composer as a workaround since there isn't a direct property linking actors and composers in this context)\"\n    ,\"wdt:P106 wd:Q36182; \", \">// Occupation is editor (Q36182 represents Editor in Wikidata)\"\n    ,\"p:P109 ?starringStatement. \", \">// Starred in films\"\n    ,\"?starringStatement ps:P109/wdt:P31 wd:Q11424. \" ,\"\\n// The works he starred in are instances of film (Q11424 represents Film)\"\n    ,\"FILTER(?starringStatement ?starringValue = wd:Q7586) \", \">// Modern Times\"\n    ,\"UNION FILTER(?starringStatement ?starringValue = wd:Q30985)\", \">// City Lights\"\n    ,\"UNION FILTER(?starringStatement ?starringValue = wd:Q142955)\" ,\"\\n// The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n   "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q470895 ;\",\n \t\t\"           wdt:P86 wd:Q199039 .\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7601 kg:8348 .\",\n \t\t\"?x kg:7601 kg:1769 .\",\n \t\t\"?x kg:6976 kg:7074 .\",\n \t\t\"?x kg:7559 kg:7074 .\",\n \t\t\"?x kg:7559 kg:7559 .\",\n \t\t\"?x kg:7559 kg:1720 .\"\n \t]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P161 wd:Q2305489 ;\", \">// Jim Abrahams (Q2305489) is a creator of the film (?film) via P161 (creator) property. We need to add similar lines for Jerry Zucker and David Zucker, but first we identify the QIDs for them in Wikidata which are Q70065 and Q10023 respectively.\",\n    \"?film wdt:P161 wd:Q70065 ;\", \">// Jerry Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include Jerry Zucker as one of the creators.\"\n    ,\n    \"?film wdt:P161 wd:Q10023 .\" , \">// David Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include David Zucker as one of the creators.\"\n    ]\n}\n  "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?work ?directedBy ?director .\",\n \t \"?work ?writtenBy ?writer .\",\n \t \"?work ?editedBy ?editor .\",\n \t \"VALUES (?director ?writer ?editor) {(wd:Q10483567 wd:Q10483567 wd:Q10483567) (wd:Q25906575 wd:Q25906575 wd:Q25906575) (wd:Q10483567 wd:Q25906575 wd:Q10483567)}\",\n \t \"?work a ?resource .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q4023328;\",\n \t\t      \"wdt:P58 wd:Q5836844;\",\n \t\t      \"wdt:P1040 wd:Q5658534,\",\n \t\t      \"wd:Q4022902 .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:5280 ?director .\",\n \t\t\"?movie kg:5040 ?screenwriter .\",\n \t\t\"?movie kg:2352 ?editor .\",\n \t\t\"{?director kg:id kg:2071.} UNION {?screenwriter kg:id kg:2071.} UNION {?editor kg:id kg:2071.}\",\n \t\t\"{?director kg:id kg:0938.} UNION {?screenwriter kg:id kg:0938.} UNION {?editor kg:id kg:0938.}\",\n \t\t\"{?director kg:id kg:4134.} UNION {?screenwriter kg:id kg:4134.} UNION {?editor kg:id kg:4134.}\",\n \t\t\"{?director kg:id kg:0869.} UNION {?screenwriter kg:id kg:0869.} UNION {?editor kg:id kg:0869.}\"\n \t]\n}\n   "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmEditor wdt:P31 wd:Q5.\",\n    \"?filmEditor p:P27 wd:Q480690.\",\n    \"{?filmEditor wdt:P50 wd:Q107904455.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107904455.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107904455.}\",\n    \"{?filmEditor wdt:P50 wd:Q107880455.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107880455.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107880455.}\",\n    \"{?filmEditor wdt:P50 wd:Q107904456.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107904456.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107904456.}\"\n  ]\n}\n   "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P1040 wd:Q483197 ;\",\n \t\t\"              wdt:P1040 wd:Q484679 ;\",\n \t\t\"              wdt:P1040 wd:Q13471372 ;\",\n \t\t\"              wdt:P58  wd:Q483197 ;\",\n \t\t\"              wdt:P58  wd:Q484679 ;\",\n \t\t\"              wdt:P58  wd:Q13471372 ;\",\n \t\t\"              wdt:P1431 wd:Q483197 ;\",\n \t\t\"              wdt:P1431 wd:Q484679 ;\",\n \t\t\"              wdt:P1431 wd:Q13471372 .\"\n \t]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?person kg:0214 kg:1068 .\",\n \t\t\"?person kg:3387 kg:3329 .\",\n \t\t\"?person kg:5744 kg:3329 .\",\n \t\t\"?person kg:2502 kg:3329 .\",\n \t\t\"?person kg:8387 kg:3329 .\"\n \t]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmProducer wdt:P31 wd:Q208694 ;\",\n    \"wdt:P57 ?work .\",\n    \"{?work wdt:P1476 \\\"Fate\\\"@en .} UNION\",\n    \"{?work wdt:P1476 \\\"The Confession\\\"@en .} UNION\",\n    \"{?work wdt:P1476 \\\"The Waiting Room\\\"@en .}\",\n    \"?filmProducer p:P57 [pq:P921 ?work ;\",\n    \"ps:P57 wd:Q154308] .\"\n  ]\n}\n    "}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?resource WHERE {\\n    ?resource wdt:P1431 wd:Q5437360 , wd:Q12813010 , wd:Q6084069 ;\\n              wdt:P58 wd:Q5437360 , wd:Q12813010 , wd:Q6084069 ;\\n              wdt:P1040 wd:Q5437360 , wd:Q12813010 , wd:Q6084069 .\\n}\"] }"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?person kg:0676/kg:3912 ?movie1 .\",\n \t\t\"?person kg:0676/kg:5795 ?movie2 .\",\n \t\t\"?person kg:0676/kg:4183 ?movie3 .\",\n \t\t\"{?movie1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6751.} UNION {?movie1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:9994.} UNION {?movie1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:3740.}\",\n \t\t\"{?movie2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6751.} UNION {?movie2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:9994.} UNION {?movie2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:3740.}\",\n \t\t\"{?movie3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6751.} UNION {?movie3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:9994.} UNION {?movie3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:3740.}\"\n \t]\n }"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?workDirectorProperty ?director .\",\n \t\t\"?director wdt:P31 wd:Q5 .\", \">// Ensure director is a human being (instance of Q5 - Human entity in Wikidata) for more accurate results filtering by profession below if needed. However, this might not be necessary depending on the specificity of workDirectorProperty and the nature of works listed in the question which are likely to have human directors/editors/writers only anyway.\",\n \t\t\"?director wdt:P106 wd:Q36180 .\", \">// Occupation as writer (wd:Q36180 - Writer entity in Wikidata). Adjust this line if you need to specify editor or other roles more specifically, but the question seems to be asking for a person who was both a director and married Jacques Demy, so focusing on \"] }\n \t\t    \t\t\t"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?writerEditor wdt:P58 wd:Q2298257 ;\",\n \t\t\"?writerEditor wdt:P58 wd:Q63993096 ;\",\n \t\t\"?writerEditor wdt:P58 wd:Q2493884 ;\",\n \t\t\"wd:Q312258 wdt:P26 ?writerEditor ;\",\n \t\t\"wd:Q312258 wdt:P737 ?writerEditor .\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{\n \t\"query\": [\"$filmEditor\", \"$screenwriter\"]\n \t}\n \t                \t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q294736, wd:Q294737;\",\n \t\t\"wdt:P136 wd:Q294736.\",\n \t\t\"?item rdfs:label ?name. \"\n \t]\n}\n   \t\t\t\t\t \t  \t      \t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 wd:Q166739; # director of The Floorwalker\",\n \t\t\"wdt:P58 wd:Q1140317; # screenwriter of Shoulder Arms\",\n \t\t\"wdt:P161 wd:Q1140317; # cast member of Shoulder Arms\",\n \t\t\"wdt:P57 wd:Q109116; # director of The Great Dictator\",\n \t\t\"wdt:P86 wd:Q109116. # composer of The Great Dictator\"\n \t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{\n \t\"query\": [\"$director\"]\n \t}\n \t                \t\t"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P161 ?roleStatement.\",\n    \"?roleStatement ps:P161 wd:Q28204 .\",\n    \"{?cinematographer wdt:P161 wd:Q28204.} UNION\",\n    \"{?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \" ,\"\\\\\" ,\"Planet Terror\" ,\"\\\\\" ,\")} UNION\",\n    \"{?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \" ,\"\\\\\" ,\"Sin City\" ,\"\\\\\" ,\")}\",\n    \"?cinematographer wdt:P106/wdt:P279* wd:Q360854.\",\n    \"?cinematographer wdt:P106/wdt:P279* wd:Q1108239.\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  { ?resource wdt:P344 wd:Q1165050. }\\n  UNION\\n  { ?resource wdt:P344 wd:Q192115. }\\n  UNION\\n  { ?resource wdt:P57 wd:Q1165050. }\\n  UNION\\n  { ?resource wdt:P57 wd:Q192115. }\\n  UNION\\n  { ?resource wdt:P58 wd:Q1165050. }\\n  UNION\\n  { ?resource wdt:P58 wd:Q192115. }\\n  UNION\\n  { ?resource wdt:P161 wd:Q1165050. }\\n  UNION\\n  { ?resource wdt:P161 wd:Q192115. }\\n  UNION\\n  { ?resource wdt:P1040 wd:Q1165050. }\\n  UNION\\n  { ?resource wdt:P1040 wd:Q192115. }\\n}\"] }"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:0459 .\",\n \t\t\"?x kg:6501 kg:3070 .\",\n \t\t\"?x kg:6501 kg:9590 .\",\n \t\t\"?x kg:9873 kg:3070 .\",\n \t\t\"?x kg:3834 kg:3070 .\",\n \t\t\"?x kg:9726 kg:3070 .\"\n \t]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P106 wd:Q247894.\",\n    \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wdt:P577 ?dateReleased;\",\n    \"wdt:P161 ?person;\",\n    \"rdfs:label ?titleLabel.\",\n    \"{\",\n      \"?work wdt:P161 ?person.\",\n      \"?work rdfs:label ?titleLabel.\",\n      \"FILTER(LANG(?titleLabel) = 'en').\",\n      \"FILTER(?titleLabel IN ('Contagion', 'Schizopolis', 'Ocean's Eleven', 'Full Frontal', 'Magic Mike XXL')).\",\n    \"}\",\n    \"{\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P577 ?dateReleasedMovie;\",\n      \"p:P160 [ ps:P160 ?person; pq:P2860 wd:Q186153 ].\",\n      \"?movie rdfs:label ?titleLabelMovie.\",\n      \"FILTER(LANG(?titleLabelMovie) = 'en').\",\n      \"FILTER(?titleLabelMovie IN ('Magic Mike XXL')).\"\n   ,\n    \"} UNION {\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P577 ?dateReleasedMovie;\",\n      \"p:P361 [ ps:P361 ?person; pq:P2860 wd:Q186153 ].\",\n      \"?movie rdfs:label ?titleLabelMovie.\",\n      \"FILTER(LANG(?titleLabelMovie) = 'en').\",\n      \"FILTER(?titleLabelMovie IN ('Magic Mike XXL')).\"\n   ,\n    \"} \"\n  ]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 ?cinematographer.\",\n \t\t\"?entity wdt:P161 wd:Q730888.\",\n \t\t\"?entity wdt:P161 wd:Q2082586.\",\n \t\t\"?entity wdt:P161 wd:Q205447.\",\n \t\t\"?entity wdt:P161 wd:Q1432710.\",\n \t\t\"?entity wdt:P1040 wd:Q17893055.\",\n \t\t\"?entity wdt:P1431 wd:Q17893055.\"\n \t]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; # The film is an instance of work of film (Q11424, movie or similar media franchise)\\n\",\n    \"wdt:P577 ?releaseDate; # Has a publication date\\n\",\n    \"rdfs:label \\\"Six Men Getting Sick\\\"@en; # Title in English\\n\",\n    \"?film wdt:P344 ?cinematographer. # Cinematographer of the film\\n\",\n    \"?film wdt:P125 ?editor. # Editor of the film\\n\",\n    \"{?cinematographer rdfs:label ?name.} UNION {?editor rdfs:label ?name.}\\n\",\n    \"FILTER(?name IN(\\\"The Black Ghiandola\\\", \\\"Twin Peaks\\\", \\\"Lumière and Company\\\", \\\"Dune\\\", \\\"Inland Empire\\\", \\\"Boat\\\")) # Filter for the names mentioned\\n\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer ?editor wdt:P344 wd:Q3485595 ;\",\n \t\t\"wdt:P1040 wd:Q3485595 .\",\n \t\t\"{?cinematographer wdt:P161 wd:Q56756907.} union\",\n \t\t\"{?editor wdt:P161 wd:Q56756907.}\",\n \t\t\"{?cinematographer wdt:P161 wd:Q2085.} union\",\n \t\t\"{?editor wdt:P161 wd:Q2085.}\",\n \t\t\"{?cinematographer wdt:P161 wd:Q507285.} union\",\n \t\t\"{?editor wdt:P161 wd:Q507285.}\",\n \t\t\"{?cinematographer wdt:P161 wd:Q114819.} union\",\n \t\t\"{?editor wdt:P161 wd:Q114819.}\",\n \t\t\"{?cinematographer wdt:P161 wd:Q862058.} union\",\n \t\t\"{?editor wdt:P161 wd:Q862058.}\",\n \t\t\"{?cinematographer wdt:P161 wd:Q3641257.} union\",\n \t\t\"{?editor wdt:P161 wd:Q3641257.}\"\n \t]\n}\n   "}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{\n \t\"query\": [\"$filmEditor\"]\n \t}\n \t                \t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?writer wdt:P31 wd:Q5.\",\n    \"?writer wdt:P27 wd:Q16.\",\n    \"?writer wdt:P921 wd:Q480381.\",\n    \"?writer wdt:P921 wd:Q105182.\",\n    \"wd:Q988 wdt:P800 ?writer.\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P57 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P58 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P58 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P1040 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P1040 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P26 wd:Q312258 ;\",\n \t\t\"?resource wdt:P737 wd:Q312258 .\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?confessionEditor wdt:P31 wd:Q5; # The Confession's editor is a human (instance of Q5 - Human) \\n\",\n \t\t\"wdt:P98 ?confession; # has the work 'The Confession' \\n\",\n \t\t\"wdt:P276 wd:Q40315; # and was an executive producer, cinematographer or editor\\n\",\n \t\t\"?destinyStar wdt:P31 wd:Q5; # The star of Destiny is a human (instance of Q5 - Human) \\n\",\n \t\t\"wdt:P161 ?destiny; # has the work 'Destiny' as an actor \\n\",\n \t\t\"wdt:P161 ?waitingRoom; # and also starred in 'The Waiting Room'\\n\",\n \t\t\"wdt:P161 ?thirdPage. # and also starred in 'The Third Page'\\n\"\n \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?editor ?screenwriter ?cinematographer\",\n \t\t\"WHERE {\",\n \t\t\"  wd:Q12813010 wdt:P1040 ?editor ;\",\n \t\t\"             wdt:P1431 ?executiveProducer ;\",\n \t\t\"             wdt:P344 ?cinematographer .\",\n \t\t\"  wd:Q5265241 wdt:P161 ?screenwriter ;\",\n \t\t\"            wdt:P1040 ?editor ;\",\n \t\t\"            wdt:P1431 ?executiveProducer ;\",\n \t\t\"            wdt:P344 ?cinematographer .\",\n \t\t\"  wd:Q6084069 wdt:P161 ?screenwriter ;\",\n \t\t\"            wdt:P1040 ?editor ;\",\n \t\t\"            wdt:P1431 ?executiveProducer ;\",\n \t\t\"            wdt:P344 ?cinematographer .\",\n \t\t\"  wd:Q6099428 wdt:P161 ?screenwriter ;\",\n \t\t\"            wdt:P1040 ?editor ;\",\n \t\t\"            wdt:P1431 ?executiveProducer ;\",\n \t\t\"            wdt:P344 ?cinematographer .\"\n \t\t,\n \t\t\"}\"\n \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6264 kg:4433 .\",\n \t\t\"?x kg:3037 kg:4433 .\",\n \t\t\"?x kg:6861 kg:4433 .\",\n \t\t\"?x kg:5793 kg:4320 .\",\n \t\t\"?x kg:5793 kg:5345 .\",\n \t\t\"?x kg:5793 kg:0514 .\"\n \t]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?filmLabel .\",\n    \"{?film wdt:P57 ?person.} UNION\",\n    \"{?film wdt:P98 ?person.} UNION\",\n    \"{?film wdt:P57 ?person.}\",\n    \"FILTER(?film = wd:Q1024360 || ?film = wd:Q22857 || ?film = wd:Q1024362 || ?film = wd:Q1024361)\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n    "}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P58 ?screenwriter .\",\n    \"?film wdt:P1040 ?filmEditor .\",\n    \"{?film wdt:P31 wd:Q199039.} UNION\",\n    \"{?film wdt:P31 wd:Q7042855.} UNION\",\n    \"{?film wdt:P31 wd:Q166739.} UNION\",\n    \"{?film wdt:P31 wd:Q45602.} UNION\",\n    \"{?film wdt:P31 wd:Q2445896.}\"\n  ]\n}\n   "}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor kg:8552 kg:4025, kg:2020, kg:3703; \",\n \t\t\"(kg:1897|kg:2136|kg:8876|kg:1977) ?work.\"\n \t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?writer ?executiveProducer ?editor ?work1 ?work2 .\",\n \t\t\"wd:Q5 wdt:P31 wd:Q5 ;\",\n \t\t\"?writer wdt:P983 wd:Q7064255 , wd:Q7064256 ;\", \">// Assuming Q7064255 and Q7064256 are the Wikidata IDs for The Waiting Room and Fate respectively. This line needs to be adjusted based on actual Wikidata IDs of these works and the property used for writers, executive producers, editors in Wikidata. For simplicity, P983 is hypothetically used here as a placeholder for \"] }\n"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P58 wd:Q6084069 ;\",\n \t\t\"wdt:P1431 wd:Q6084069 ;\",\n \t\t\"wdt:P1040 wd:Q6084069 ;\",\n \t\t\"wdt:P1431 wd:Q12813010 ;\",\n \t\t\"wdt:P1040 wd:Q12813010 .\"\n \t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8079 ?movie1 .\",\n \t\t\"?x kg:4979 kg:7462 .\",\n \t\t\"?x kg:7206 kg:7462 .\",\n \t\t\"?x kg:4979 kg:6844 .\",\n \t\t\"?x kg:7206 kg:6844\"\n \t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Jörn Donner\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Vilgot Sjöman\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Hans Alfredson\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Gustaf Molander\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Ingmar Bergman\\\".}\"\n  ]\n}\n    "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"{?film wdt:P57 wd:Q982339. ?film wdt:P58 wd:Q982339.}\",\n \t\t\"UNION\",\n \t\t\"{?film wdt:P57 wd:Q116760. ?film wdt:P58 wd:Q116760.}\",\n \t\t\"UNION\",\n \t\t\"{?film wdt:P57 wd:Q1033656. ?film wdt:P58 wd:Q1033656.}\",\n \t\t\"UNION\",\n \t\t\"{?film wdt:P57 wd:Q1365463. ?film wdt:P58 wd:Q1365463.}\",\n \t\t\"UNION\",\n \t\t\"{?film wdt:P57 wd:Q7546. ?film wdt:P58 wd:Q7546.}\"\n \t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film kg:9772 kg:6825 .\",\n \t\t\"?film kg:9808/kg:0106 ?director1 .\",\n \t\t\"?film kg:9808/kg:0263 ?director2 .\",\n \t\t\"?film kg:9808/kg:2442 ?director3 .\",\n \t\t\"?film kg:9808/kg:6401 ?director4 .\",\n \t\t\"?film kg:9808/kg:3926 ?director5 .\",\n \t\t\"?film kg:0265/kg:0106 ?screenwriter1 .\",\n \t\t\"?film kg:0265/kg:0263 ?screenwriter2 .\",\n \t\t\"?film kg:0265/kg:2442 ?screenwriter3 .\",\n \t\t\"?film kg:0265/kg:6401 ?screenwriter4 .\",\n \t\t\"?film kg:0265/kg:3926 ?screenwriter5\"\n \t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item p:P50 ?statement.\",\n    \"?statement ps:P50 wd:Q7604289.\",\n    \"?item p:P98 ?statement2.\",\n    \"?statement2 ps:P98 wd:Q7604289.\",\n    \"?item p:P341 ?statement3.\",\n    \"?statement3 ps:P341 wd:Q7604289.\",\n    \"?item p:P599 ?statement4.\",\n    \"?statement4 ps:P599 wd:Q7604289.\",\n    \"{\",\n      \"?item wdt:P162 wd:Q7604289;\",\n      \"wdt:P355 wd:Q7604289.\",\n    \"} UNION {\",\n      \"?item wdt:P162 wd:Q7604289.\",\n    \"} UNION {\",\n      \"?item wdt:P355 wd:Q7604289.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P161 wd:Q6084069; # Cast member of The Waiting Room (star role assumption based on context, as specific property for star isn't listed above) \",\n \t\t\"?item wdt:P1040 wd:Q6084069;\",\n \t\t\"?item wdt:P344 wd:Q6084069;\",\n \t\t\"?item wdt:P58 wd:Q6084069;\",\n \t\t\"?item wdt:P1431 wd:Q12813010; # Executive producer of The Confession\",\n \t\t\"?item wdt:P344 wd:Q12813010. # Cinematographer of The Confession\"\n \t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6630 kg:1850 .\",\n \t\t\"?x kg:1459 kg:1850 .\",\n \t\t\"?x kg:8325 kg:1850 .\",\n \t\t\"?x kg:1256 kg:1850 .\",\n \t\t\"?x kg:1368 kg:5444 .\",\n \t\t\"?x kg:8325 kg:5444 .\",\n \t\t\"?x kg:1368 kg:9231 .\"\n \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmEditorSpouse wdt:P286 ?work . \",\n \t\t\"?work rdfs:label ?titleLabelFilterLang . \",\n \t\t\"{?work rdfs:label 'The City Tramp'@en.} UNION {?work rdfs:label 'Katzelmacher'@en.} UNION {?work rdfs:label 'Why Does Herr R. Run Amok?'@en.} UNION {?work rdfs:label 'Whity'@en.} UNION {?work rdfs:label 'In a Year of 13 Moons'@en.}\",\n \t\t\"?filmEditorSpouse wdt:P286 ?work . \",\n \t\t\"?filmEditorSpouse wdt:P31 wd:Q5 . \"\n \t]\n}\n    "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P1040 ?work . \",\n \t\t\"?filmEditor wdt:P26 ?spouse . \",\n \t\t\"?spouse wdt:P58|wdt:P1040 ?work . \",\n \t\t\"{?work wdt:P31 wd:Q11424; wdt:P1476 ?title.} UNION\",\n \t\t\"{BIND(wd:Q567519 AS ?work)} UNION {BIND(wd:Q570483 AS ?work)} UNION \",\n \t\t\"{BIND(wd:Q327427 AS ?work)} UNION {BIND(wd:Q878673 AS ?work)} UNION\",\n \t\t\"{BIND(wd:Q543382 AS ?work)}.\"\n \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\"$filmEditorSpouse\"]\n \t}\n \t                \t\t"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P27 wd:Q183.\",\n    \"?item wdt:P39 wd:Q104652.\",\n    \"?item p:P800 ?statement.\",\n    \"?statement ps:P800 wd:Q210928.\",\n    \"?item p:P800 ?statement2.\",\n    \"?statement2 ps:P800 wd:Q739898.\",\n    \"?item p:P800 ?statement3.\",\n    \"?statement3 ps:P800 wd:Q56481.\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q497617 ;\",\n \t\t\"wdt:P57 wd:Q158069 ;\",\n \t\t\"wdt:P57 wd:Q156497 ;\",\n \t\t\"wdt:P58 wd:Q497617 ;\",\n \t\t\"wdt:P58 wd:Q158069 ;\",\n \t\t\"wdt:P58 wd:Q156497 ;\",\n \t\t\"wdt:P1040 wd:Q497617 ;\",\n \t\t\"wdt:P1040 wd:Q158069 ;\",\n \t\t\"wdt:P1040 wd:Q156497 ;\",\n \t\t\"?director wdt:P21 wd:Q6581072 .\"\n \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n \t\t\"?director kg:9010 ?movie1, ?movie2, ?movie3; \",\n \t\t\"?director kg:5403 ?movie1, ?movie2, ?movie3; \",\n \t\t\"?director kg:4328 ?movie1, ?movie2, ?movie3; \",\n \t\t\"?director kg:3805 kg:3823;\",\n \t\t\"?movie1 kg:9681 [];\",\n \t\t\"?movie2 kg:1652 [];\",\n \t\t\"?movie3 kg:5606 [].\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P27 wd:Q16.\",\n    \"{?person wdt:P800 wd:Q940563.} UNION\",\n    \"{?person wdt:P800 wd:Q1051825.} UNION\",\n    \"{?person wdt:P800 wd:Q714765.} UNION\",\n    \"{?person wdt:P800 wd:Q398556.}\",\n    \"?person wdt:P110 ?work.\",\n    \"FILTER(?work = wd:Q214450)\"\n  ]\n}\n    "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q219170;\",\n \t\t\"              wdt:P57 wd:Q198557;\",\n \t\t\"              wdt:P57 wd:Q219155;\",\n \t\t\"              wdt:P57 wd:Q1277329;\",\n \t\t\"              wdt:P58 wd:Q627060;\",\n \t\t\"              wdt:P1040 wd:Q627060;\",\n \t\t\"              wdt:P27 wd:Q16.\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:Person .\",\n \t\t\"?x kg:3067 kg:9199;\",\n \t\t\"?x kg:3067 kg:8180;\",\n \t\t\"?x kg:3067 kg:7971;\",\n \t\t\"?x kg:3067 kg:7961;\",\n \t\t\"?x kg:3210 kg:7526;\",\n \t\t\"?x kg:0514 kg:7526;\",\n \t\t\"?x kg:8443 kg:5600.\"\n \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director wdt:P106 wd:Q28794.\",\n    \"?director p:P162/ps:P162 wd:Q101194.\",\n    \"{?director wdt:P162 wd:Q101194.} UNION\",\n    \"{?director wdt:P57 wd:Q389526.} UNION\",\n    \"{?director wdt:P57 wd:Q1134516.} UNION\",\n    \"{?director wdt:P57 wd:Q101194.} UNION\",\n    \"{?director wdt:P57 wd:Q802040.\"\n  ]\n}\n    "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q206182 ;\",\n \t\t\"wdt:P58 ?movies ;\",\n \t\t\"wdt:P1431 wd:Q206182 .\",\n \t\t\"?movies wd:Q378013 , wd:Q391143 , wd:Q594033 , wd:Q232108 .\"\n \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{\n \t\"query\": [\n \t\t\"?director kg:9361 ?movie1 .\",\n \t\t\"?director kg:7818 ?movie1 .\",\n \t\t\"{?director kg:9361 kg:9655. ?director kg:7818 kg:9655.} UNION \",\n \t\t\"{?director kg:9361 kg:0643. ?director kg:7818 kg:0643.} UNION \",\n \t\t\"{?director kg:9361 kg:0165. ?director kg:7818 kg:0165.} UNION \",\n \t\t\"{?director kg:9361 kg:7514. ?director kg:7818 kg:7514.}\",\n \t\t\"?director kg:9361 kg:7911 .\",\n \t\t\"?director kg:9685 kg:7911 .\"\n \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person p:P800 ?statement.\",\n    \"?statement ps:P800 wd:Q2674965.\",\n    \"{?person wdt:P108 wd:Q9304;} union\",\n    \"{?person wdt:P108 wd:Q10798416;} union\",\n    \"{?person wdt:P108 wd:Q200646;} union\",\n    \"{?person wdt:P108 wd:Q5305551.}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n\t  \"?resource wdt:P112 wd:Q7095994; # Open Data Institute's founder and employee\",\n\t  \"wdt:P108 wd:Q42944; # employed by CERN\",\n\t  \"wdt:P108 wd:Q37033; # employed by World Wide Web Consortium\",\n\t  \"wdt:P108 wd:Q7432436; # employed by School of Electronics and Computer Science, University of Southampton\",\n\t  \"wdt:P108 wd:Q7204713. # employed by Plessey\"\n\t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3032 kg:2052 .\",\n \t\t\"?x kg:1104 kg:9538 .\",\n \t\t\"?x kg:1104 kg:3783 .\",\n \t\t\"?x kg:1104 kg:7797 .\",\n \t\t\"?x kg:1104 kg:0564 .\"\n \t]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P50 wd:Q16934827, wd:Q16934828, wd:Q16934829.\",\n    \"?film wdt:P36 ?editingRole.\",\n    \"?film wdt:P161 ?productionRole.\",\n    \"?film wdt:P57 ?directionRole.\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475 .\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475 .\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475 .\",\n \t\t\"?film wdt:P162 wd:Q1687239, wd:Q562108, wd:Q35979475 .\"\n \t]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film kg:9282 kg:7564 .\",\n \t\t\"?film kg:8695/kg:9282 kg:4421 .\", \">// Jens Jørgen Thorsen as screenwriter of the film, but we only return resources so we don't directly use his ID here. The same logic applies to others below.//\",\n \t\t\"?film kg:8695/kg:9282 kg:0840 .\", \">// Ole John as screenwriter of the film//\",\n \t\t\"?film kg:8695/kg:9282 kg:3691 .\", \">// Jørgen Leth as screenwriter of the film//\",\n \t\t\"?film kg:1894/kg:9282 kg:4421 .\", \">// Jens Jørgen Thorsen as director of the film//\",\n \t\t\"?film kg:1894/kg:9282 kg:0840 .\", \">// Ole John as director of the film//\",\n \t\t\"?film kg:1894/kg:9282 kg:3691 .\", \">// Jørgen Leth as director of the film//\",\n \t\t\"?film kg:5044/kg:9282 kg:4421 .\", \">// Jens Jørgen Thorsen as producer of the film//\",\n \t\t\"?film kg:5044/kg:9282 kg:0840 .\", \">// Ole John as producer of the film//\",\n \t\t\"?film kg:5044/kg:9282 kg:3691 .\", \">// Jørgen Leth as producer of the film//\",\n \t\t\"?film kg:9245/kg:9282 kg:4421 .\", \">// Jens Jørgen Thorsen as editor of the film//\",\n \t\t\"?film kg:9245/kg:9282 kg:0840 .\", \">// Ole John as editor of the film//\",\n \t\t\"?film kg:9245/kg:9282 kg:3691 .\" , \">// Jørgen Leth as editor of the film//\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?cinematography_work; \",\n \t\t\"wdt:P161 ?star; \",\n \t\t\"wdt:P36 ?editor; \",\n \t\t\"wdt:P57 ?director; \",\n \t\t\"wdt:P1294 wd:Q211408. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q192115 ;\",\n \t\t\"?entity wdt:P57 wd:Q656357 ;\",\n \t\t\"?entity wdt:P58 wd:Q192115 ;\",\n \t\t\"?entity wdt:P58 wd:Q656357 ;\",\n \t\t\"?entity wdt:P161 wd:Q192115 ;\",\n \t\t\"?entity wdt:P161 wd:Q656357 ;\",\n \t\t\"?entity wdt:P1040 wd:Q192115 ;\",\n \t\t\"?entity wdt:P1040 wd:Q656357 ;\",\n \t\t\"?entity wdt:P344 wd:Q192115 ;\",\n \t\t\"?entity wdt:P344 wd:Q656357 ;\",\n \t\t\"?entity wdt:P1431 wd:Q15622760 .\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8073 kg:6169 .\",\n \t\t\"?x kg:4649/kg:2632,kg:0710 .\",\n \t\t\"?x kg:0035/kg:2632,kg:0710 .\",\n \t\t\"?x kg:0297/kg:2632,kg:0710 .\",\n \t\t\"?x kg:9651/kg:2632,kg:0710 .\"\n \t]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?thisNightDirector ?thisNightCinematographer ?thisNightWriter\",\n    \"WHERE {\",\n    \"  ?thisNight a wd:Q11424; wdt:P57 ?thisNightDirector; wdt:P344 ?thisNightCinematographer; wdt:P925 ?thisNightWriter.\",\n    \"  ?rioDasMortes wdt:P57 ?thisNightDirector; wdt:P364 wd:Q1088888.\",\n    \"  ?liliMarleen wdt:P57 ?thisNightDirector; wdt:P364 wd:Q292556.\",\n    \"  ?whity wdt:P57 ?thisNightDirector; wdt:P364 wd:Q100085.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  ?resource wdt:P57/wdt:P58/wdt:P1040 ?x.\\n  ?resource wdt:P344 ?y.\\n  wd:Q1699716 wdt:P57|wdt:P58|wdt:P344 ?resource.\\n  wd:Q823767 wdt:P58|wdt:P1040 ?resource.\\n  wd:Q686125 wdt:P58|wdt:P1040 ?resource.\\n  wd:Q327427 wdt:P58|wdt:P1040 ?resource.\\n}\"] }"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7878 kg:5269 .\",\n \t\t\"?x kg:0343 kg:6224 .\",\n \t\t\"?x kg:0343 kg:1489 .\",\n \t\t\"?x kg:0343 kg:3960 .\",\n \t\t\"FILTER EXISTS { ?x kg:8314 kg:5269 }\",\n \t\t\"FILTER EXISTS { ?x kg:9356 kg:5269 }\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P3740 ?statement.\",\n    \"?statement ps:P3740 wd:Q296818.\",\n    \"?film1 wdt:P541 ?cinematographer.\",\n    \"FILTER(?film1 = wd:Q11273).\",\n    \"{?cinematographer p:P162 ?writeStatement. ?writeStatement ps:P162 wd:Q109558.} UNION {?cinematographer p:P161 ?directStatement. ?directStatement ps:P161 wd:Q109558.}\",\n    \"{?cinematographer p:P162 ?writeStatement2. ?writeStatement2 ps:P162 wd:Q743316.} UNION {?cinematographer p:P161 ?directStatement2. ?directStatement2 ps:P161 wd:Q743316.}\",\n    \"{?cinematographer p:P162 ?writeStatement3. ?writeStatement3 ps:P162 wd:Q805911.} UNION {?cinematographer p:P161 ?directStatement3. ?directStatement3 ps:P161 wd:Q805911.}\"\n  ]\n}\n    "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P344 wd:Q623051 ;\",\n \t\t\"wdt:P27 wd:Q30 ;\",\n \t\t\"(wdt:P57|wdt:P58|wdt:P1040) wd:Q1903317 ;\",\n \t\t\"(wdt:P57|wdt:P58|wdt:P1040) wd:Q2520777 ;\",\n \t\t\"(wdt:P57|wdt:P58|wdt:P1040) wd:Q627060 .\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer kg:5276 kg:3590 .\",\n \t\t\"?cinematographer kg:9892 kg:0476 .\",\n \t\t\"{?cinematographer kg:2900 kg:7747.} union {?cinematographer kg:2900 kg:2918.} union {?cinematographer kg:2900 kg:5164.}\",\n \t\t\"{?cinematographer kg:3787 kg:7747.} union {?cinematographer kg:3787 kg:2918.} union {?cinematographer kg:3787 kg:5164.}\",\n \t\t\"{?cinematographer kg:6216 kg:7747.} union {?cinematographer kg:6216 kg:2918.} union {?cinematographer kg:6216 kg:5164.}\"\n \t]\n }"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?film_works; \",\n \t\t\"wdt:P136 wd:Q24978666; \",\n \t\t\"wdt:P800 wd:Q114483; \",\n \t\t\"wdt:P800 wd:Q519227; \",\n \t\t\"wdt:P800 wd:Q160541; \",\n \t\t\"wdt:P162 wd:Q73480. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q613974 ;\",\n \t\t\"wdt:P57 wd:Q1415127 ;\",\n \t\t\"wdt:P57 wd:Q1869678 ;\",\n \t\t\"wdt:P58 wd:Q613974 ;\",\n \t\t\"wdt:P58 wd:Q1415127 ;\",\n \t\t\"wdt:P58 wd:Q1869678 ;\",\n \t\t\"wdt:P344 wd:Q613974 ;\",\n \t\t\"wdt:P344 wd:Q1415127 ;\",\n \t\t\"wdt:P344 wd:Q1869678 ;\",\n \t\t\"wdt:P1431 wd:Q17738 .\"\n \t]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:9966 kg:4958 .\",\n \t\t\"?x kg:9966 kg:7238 .\",\n \t\t\"?x kg:9966 kg:6810 .\",\n \t\t\"?x kg:7785 kg:4958 .\",\n \t\t\"?x kg:7785 kg:7238 .\",\n \t\t\"?x kg:7785 kg:6810 .\",\n \t\t\"?x kg:9841 kg:4958 .\",\n \t\t\"?x kg:9841 kg:7238 .\",\n \t\t\"?x kg:9841 kg:6810 .\",\n \t\t\"?x kg:7129 kg:7820 .\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"OPTIONAL { ?film wdt:P162 ?producer. }\",\n    \"OPTIONAL { ?film wdt:P921 ?writer. }\",\n    \"OPTIONAL { ?film wdt:P361 ?editor. }\",\n    \"{ ?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. }\",\n    \"{ ?director rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Jørgen Leth\\\"@en. }\",\n    \"{ ?director rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Ole John\\\"@en. }\"\n  ]\n}\n   "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108;\",\n \t\t\"?film wdt:P162 wd:Q1687239, wd:Q562108;\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2033 kg:6893 .\",\n \t\t\"?film kg:6845 kg:0888 .\",\n \t\t\"?film kg:6845 kg:4300 .\",\n \t\t\"?film kg:1364 kg:0888 .\",\n \t\t\"?film kg:1364 kg:4300 .\",\n \t\t\"?film kg:1364 kg:8595 .\",\n \t\t\"?film kg:5191 kg:0888 .\",\n \t\t\"?film kg:5191 kg:4300 .\",\n \t\t\"?film kg:5191 kg:8595 .\",\n \t\t\"?film kg:4053 kg:0888 .\",\n \t\t\"?film kg:4053 kg:4300 .\"\n \t]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; \",\n    \"wdt:P57 ?designer; \",\n    \"wdt:P9810 ?editor.\",\n    \"?designer rdfs:label \\\"Xavier Dolan\\\"@en;\",\n    \"wdt:P106 wd:Q13481256.\",\n    \"?editor rdfs:label \\\"Xavier Dolan\\\"@en;\"\n  ]\n}\n    "}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?resource WHERE {\\n    ?resource wdt:P106 wd:Q1323191 ;\\n              wdt:P58 wd:Q551861 ;\\n              wdt:P1040 wd:Q551861 .\\n}\"] }"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P50 ?author.\",\n    \"{?film wdt:P161 ?director.} UNION\",\n    \"{?film wdt:P57 ?director.}\",\n    \"{?film wdt:P92 ?editor.} UNION\",\n    \"{?film wdt:P143 ?editor.}\",\n    \"?author (wdt:P800|wdt:P162) ?film.\",\n    \"FILTER(?author = wd:Q5).\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P106 wd:Q3282637 .\",\n \t\t\"{ ?filmProducer wdt:P57 wd:Q483197. }\",\n \t\t\"{ ?filmProducer wdt:P57 wd:Q13471372. }\",\n \t\t\"{ ?filmProducer wdt:P57 wd:Q484679. }\",\n \t\t\"{ ?filmProducer wdt:P1431 wd:Q483197. }\",\n \t\t\"{ ?filmProducer wdt:P1431 wd:Q13471372. }\",\n \t\t\"{ ?filmProducer wdt:P1431 wd:Q484679. }\",\n \t\t\"{ ?filmProducer wdt:P1040 wd:Q483197. }\",\n \t\t\"{ ?filmProducer wdt:P1040 wd:Q13471372. }\",\n \t\t\"{ ?filmProducer wdt:P1040 wd:Q484679. }\"\n \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?film wdt:P57 wd:Q980665.} UNION\",\n    \"{?film wdt:P57 wd:Q1090066.} UNION\",\n    \"{?film wdt:P57 wd:Q2345462.}\",\n    \"?director (wdt:P31/wdt:P279*) wd:Q8503082.\",\n    \"FILTER (?director = wd:Q980665 || ?director = wd:Q1090066 || ?director = wd:Q2345462)\"\n  ]\n}\n    "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q1687239,wd:Q562108,wd:Q35979475;\",\n \t\t\"?film wdt:P58 wd:Q1687239,wd:Q562108,wd:Q35979475;\",\n \t\t\"?film wdt:P1040 wd:Q1687239,wd:Q562108,wd:Q35979475.\"\n \t]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film a kg:9925;\",\n \t\t\"(kg:0148/kg:2122|kg:3447|kg:5731)+ ?director.\",\n \t\t\"{?director kg:0148 kg:9685.}\",\n \t\t\"{?director kg:0148 kg:2592.}\",\n \t\t\"{?director kg:0148 kg:7313.}\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"?film wdt:P750 ?editor.\",\n    \"?film wdt:P921 ?writer.\",\n    \"?film wdt:P162 ?producer.\",\n    \"{?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?editor rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?editor rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?producer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label \\\"Ole John\\\"@en.}\"\n  ]\n}\n   "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108;\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108;\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108;\",\n \t\t\"?film wdt:P162 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5.\",\n    \"?emberDirector wdt:P85 wd:Q207649.\",\n    \"{?fate wdt:P57 ?emberDirector.}\",\n    \"{?theConfession wdt:P57 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P57 ?emberDirector.}\",\n    \"union\",\n    \"{?fate wdt:P162 ?emberDirector.}\",\n    \"{?theConfession wdt:P162 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P162 ?emberDirector.}\",\n    \"union\",\n    \"{?fate wdt:P58 ?emberDirector.}\",\n    \"{?theConfession wdt:P58 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P58 ?emberDirector.}\",\n    \"?fate rdfs:label ?fateLabel filter (lang(?fateLabel) = \\\"en\\\").\",\n    \"?theConfession rdfs:label ?theConfessionLabel filter (lang(?theConfessionLabel) = \\\"en\\\").\",\n    \"?theWaitingRoom rdfs:label ?theWaitingRoomLabel filter (lang(?theWaitingRoomLabel) = \\\"en\\\").\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q25479948; # director of Ember\",\n \t\t\"wdt:P57 ?film .\", \"># director of the film in question\",\n \t\t\"FILTER(?film IN (wd:Q5437360, wd:Q12813010, wd:Q6084069)) .\", \"># Fate, The Confession, and The Waiting Room\"\n \t\t,\n \t\t\"?director wdt:P1040 ?film; # editor of the film\",\n \t\t\"?director wdt:P58 ?film; # screenwriter of the film\",\n \t\t\"?director wdt:P1431 ?film .\", \"># executive producer of the film\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{\n \t\"query\": [\"$director\"]\n \t}\n \t                \t\t"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5.\",\n    \"?emberDirector wdt:P85 wd:Q207649.\",\n    \"{?emberDirector p:P166/psn:P166 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P39/psn:P39 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P160/psn:P160 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P57/psn:P57 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\").}\"\n  ]\n}\n   "}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q25479948; # director of Ember\",\n \t\t\"wdt:P57 ?film; # director of the film\",\n \t\t\"wdt:P1040 ?film; # editor of the film\",\n \t\t\"wdt:P58 ?film; # screenwriter of the film\",\n \t\t\"wdt:P1431 ?film. # executive producer of the film\",\n \t\t\"?film wd:Q5437360, wd:Q6084069, wd:Q12813010.\" ]\n }"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{\n  \"query\": [\n    \"?director kg:1593 ?film.\",\n    \"?director kg:4165 ?film.\",\n    \"?director kg:7137 ?film.\",\n    \"?director kg:5315 ?film.\",\n    \"?director kg:6383 ?film.\",\n    \"{?film kg:0760 kg:0760.}\",\n    \"{?film kg:2573 kg:2573.}\",\n    \"{?film kg:9396 kg:9396.}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P127 ?executive_produced_by; \",\n \t\t\"?film wdt:P57 ?directed_by; \",\n \t\t\"?film wdt:P58 ?written_by; \",\n \t\t\"{?written_by wdt:P1569 \\\"David Zucker\\\".}\",\n \t\t\"{?written_by wdt:P1569 \\\"Jim Abrahams\\\".}\",\n \t\t\"{?written_by wdt:P1569 \\\"Jerry Zucker\\\".}\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P800 ?film1.\",\n    \"?resource wdt:P800 ?film2.\",\n    \"?resource wdt:P800 ?film3.\",\n    \"?film1 rdfs:label \\\"Moebius\\\"@en.\",\n    \"?film2 rdfs:label \\\"One on One\\\"@en.\",\n    \"?film3 rdfs:label \\\"Amen.\\\"@en.\",\n    \"?resource wdt:P162 ?pietaproject.\",\n    \"?pietaproject rdfs:label \\\"Pietà\\\"@en.\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P1040 wd:Q13471372 ;\",\n \t\t\"              wdt:P1040 wd:Q17041657 ;\",\n \t\t\"              wdt:P1040 wd:Q462025 ;\",\n \t\t\"              wdt:P57 wd:Q483197 ;\",\n \t\t\"              wdt:P1431 wd:Q483197 ;\",\n \t\t\"              wdt:P344 wd:Q483197 .\"\n \t]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6256 ?y . ?x kg:8051 kg:3231 . ?x kg:4656 kg:3231 . ?x kg:2400 ?z . ?x kg:6256 kg:6915 . ?x kg:6256 kg:8152 . ?x kg:6256 kg:0511\"\n \t]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P374/wdt:P162 wd:Q9085;\",\n    \"?cinematographer wdt:P374/wdt:P57 wd:Q9085;\",\n    \"?cinematographer wdt:P374/wdt:P155 wd:Q9085.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P161 wd:Q44426; # The film has Rainer Werner Fassbinder as a cast member (starred in the film by RWF) \",\n \t\t\"?film wdt:P57 wd:Q44426; # The film was directed by Rainer Werner Fassbinder\",\n \t\t\"?film wdt:P1040 ?editor; # The editor of the film is bound to variable ?editor (edited by)\"\n \t\t,\n \t\t\"?film wdt:P2578 ?cinematographer. # The cinematographer of the film is bound to variable ?cinematographer\"\n \t]\n}\n    "}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{\n \t\"query\": [\"$cinematographer\"]\n \t}\n \t                \t\t"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n\t  \"?influencer wdt:P31 wd:Q5; # The influencer is an instance of human (actor in this context) \\n\",\n\t  \"wdt:P856 ?schoolFounder; # The school founder (Alexandria Monroe High School's founder)\\n\",\n\t  \"wdt:P740 wd:Q239156, wd:Q1025759. # Influenced Wolfgang Ambros and Jan-Mari Carlotti\\n\",\n\t  \"?schoolFounder wdt:P800 ?actor1; # The actor Carolyn Dennis is married to the school founder\\n\",\n\t  \"wdt:P800 ?actor2. # The actor Sara Dylan is also married to the school founder\\n\",\n\t  \"?actor1 rdfs:label ?name1; # Label for the first actor (Carolyn Dennis)\\n\",\n\t  \"wdt:P31 wd:Q5.\\n\", \"># The first actor is an instance of human\\n\",\n\t  \"?actor2 rdfs:label ?name2; # Label for the second actor (Sara Dylan)\\n\",\n\t  \"wdt:P31 wd:Q5. # The second actor is an instance of human\\n\"\n\t]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{\n \t\"query\": [\n \t\t\"?influencer wdt:P106 wd:Q33999.\",\n \t\t\"wd:Q45404 wdt:P737 ?influencer.\",\n \t\t\"wd:Q12949115 wdt:P737 ?influencer.\",\n \t\t\"?spouseOfCarolyn wdt:P26 wd:Q5045345.\",\n \t\t\"?spouseOfSara wdt:P26 wd:Q457433.\",\n \t\t\"wd:Q4720983 wdt:P112 ?founder.\"\n \t]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{\n \t\"query\": [\n \t\t\"?actor a kg:5877 ;\",\n \t\t\"kg:3414 kg:7420 , kg:8556 ;\",\n \t\t\"kg:7895 kg:1445, kg:9745 ;\",\n \t\t\"kg:7805 kg:6841 .\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P108 wd:Q7204713;\",\n \t\t\"?person wdt:P108 wd:Q42944;\",\n \t\t\"?person wdt:P108 wd:Q7432436;\",\n \t\t\"wd:Q37033 wdt:P112 ?person;\",\n \t\t\"wd:Q7095994 wdt:P112 ?person.\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\"$employee\"]\n \t}\n \t                \t\t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?cinematography_work; \",\n \t\t\"wdt:P161 ?star; \",\n \t\t\"wdt:P865 ?composer; \",\n \t\t\"wdt:P57 ?director_and_editor. \",\n \t\t\"?cinematography_work rdfs:label \\\"Planet Terror\\\"@en; \",\n \t\t\"wdt:P3449 wd:Q210576. \",\n \t\t\"?director_and_editor wdt:P800 wd:Q210576, wd:Q161557, wd:Q1078305.\"\n \t]\n}\n   \t\t\t\t\t  \t      \t \t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q1165050; # The entity directed Planet Terror (as a cinematographer, star, or composer would not use P57 property directly for this relation in Wikidata, but for the sake of the given instruction and properties, we assume it's about directing here) \",\n \t\t\"?entity wdt:P86 wd:Q1165050; # The entity composed Planet Terror\",\n \t\t\"?entity wdt:P58 wd:Q1165050; # The entity wrote Planet Terror\",\n \t\t\"?entity wdt:P344 wd:Q1165050; # The entity was the cinematographer for Planet Terror\",\n \t\t\"?entity wdt:P161 wd:Q1165050; # The entity starred in Planet Terror\",\n \t\t\"?entity wdt:P57 wd:Q192115; # The entity directed Sin City (general, not specific to a part)\",\n \t\t\"?entity wdt:P57 wd:Q1653396; # The entity directed Sin City: A Dame to Kill For\",\n \t\t\"?entity wdt:P57 wd:Q128493. # The entity directed Machete\"\n \t]\n }"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3045 kg:9019 .\",\n \t\t\"?x kg:0777 kg:9019 .\",\n \t\t\"?x kg:0258 kg:9019 .\",\n \t\t\"?x kg:2781 kg:9019 .\",\n \t\t\"?x kg:0231 kg:4927 .\",\n \t\t\"?x kg:0231 kg:3142 .\",\n \t\t\"?x kg:0231 kg:7049 .\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?pietaEditorAndProducer wdt:P31 wd:Q5.\",\n    \"?pietaEditorAndProducer p:P182/psn:P182 ?pietaWork.\",\n    \"FILTER(?pietaWork = wd:Q409675).\",\n    \"\",\n    \"?dreamAndMoebius wdt:P31 wd:Q11424.\",\n    \"?dreamAndMoebius rdfs:label \\\"Dream and Moebius\\\"@en.\",\n    \"\",\n    \"{?pietaEditorAndProducer p:P160/psn:P160 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P36/P36 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P58/P58 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P127/P127 ?dreamAndMoebius.}\",\n    \"\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n   "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?editor_producer wdt:P57 wd:Q483197; # director of Pietà\",\n \t\t\"?editor_producer wdt:P1040 wd:Q483197; # film editor of Pietà\",\n \t\t\"?editor_producer wdt:P58 wd:Q483197; # screenwriter of Pietà\",\n \t\t\"?editor_producer wdt:P1431 wd:Q483197; # executive producer of Pietà\",\n \t\t\"?editor_producer wdt:P57 wd:Q484679; # director of Dream\",\n \t\t\"?editor_producer wdt:P1040 wd:Q484679; # film editor of Dream\",\n \t\t\"?editor_producer wdt:P58 wd:Q484679; # screenwriter of Dream\",\n \t\t\"?editor_producer wdt:P1431 wd:Q484679; # executive producer of Dream\",\n \t\t\"?editor_producer wdt:P57 wd:Q13471372; # director of Moebius\",\n \t\t\"?editor_producer wdt:P1040 wd:Q13471372; # film editor of Moebius\",\n \t\t\"?editor_producer wdt:P58 wd:Q13471372; # screenwriter of Moebius\",\n \t\t\"?editor_producer wdt:P1431 wd:Q13471372. # executive producer of Moebius\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?editor_and_executive_producer kg:0982 ?film .\",\n \t\t\"?film kg:5540 kg:Pietà .\",\n \t\t\"?film kg:6638 kg:Dream .\",\n \t\t\"?film kg:8420 kg:Moebius .\",\n \t\t\"?editor_and_executive_producer kg:7483 ?film .\",\n \t\t\"?editor_and_executive_producer kg:2976 ?film .\",\n \t\t\"?editor_and_executive_producer kg:0982 ?film .\",\n \t\t\"?editor_and_executive_producer kg:4628 ?film .\"\n \t]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?dwGriffithProductions, ?unitedArtistsCorporation, ?davidWGriffithCorp;\",\n \t\t\"wdt:P136 wd:Q247934;\",\n \t\t\"wdt:P57 ?theBrahmaDiamond, ?hisLostLove, ?theBirthOfANation.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P106 wd:Q3282637 .\",\n \t\t\"?filmProducer wdt:P112 wd:Q3011043 ;\",\n \t\t\"wdt:P112 wd:Q64434913 ;\",\n \t\t\"wdt:P112 wd:Q219400 .\",\n \t\t\"?movie1 wdt:P57 ?filmProducer ;\",\n \t\t\"wdt:P58 ?filmProducer .\",\n \t\t\"{ ?movie1 wikibase:sense/wikibase:directSense wd:Q542216 } UNION\",\n \t\t\"{ ?movie1 wikibase:sense/wikibase:directSense wd:Q1857205 } UNION\",\n \t\t\"{ ?movie1 wikibase:sense/wikibase:directSense wd:Q220394 }\"\n \t]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\"$filmProducer\"]\n \t}\n \t                \t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P861 wd:Q20794116.\",\n    \"?item wdt:P162 ?executive_producer.\",\n    \"?item wdt:P361 wd:Q20794116.\",\n    \"wd:Q20794116 wdt:P50 ?composer.\",\n    \"wd:Q20794116 wdt:P177 ?cinematographer.\",\n    \"?item wdt:P57 ?director.\",\n    \"{\",\n      \"?film1 wdt:P50 ?item;\",\n              \"wdt:P1476 wd:Q53883888.\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P50 ?item;\",\n              \"wdt:P1476 wd:Q53900000.\",\n    \"}\"\n  ]\n}\n   "}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"?person wdt:P1431 wd:Q4959991 ;\", \">// executive producer of Brecha\\n\",\n    \"?person wdt:P1040 wd:Q7243050 ;\", \">// edited Primary!\\n\",\n    \"?person wdt:P1040 wd:Q5375110 ;\", \">// edited In Your Absence\\n\",\n    \"?person wdt:P86 wd:Q4959991 ;\", \">// composer of Brecha\\n\",\n    \"?person wdt:P57 wd:Q4959991 ;\", \">// director of Brecha\\n\",\n    \"?person wdt:P344 wd:Q4959991 .\" , \">// cinematographer of Brecha\\n\"\n] }"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7660 kg:3126 .\",\n \t\t\"?x kg:4927 kg:2746 .\",\n \t\t\"?x kg:8773 kg:2746 .\",\n \t\t\"?x kg:4927 kg:0465 .\",\n \t\t\"?x kg:8773 kg:0465\"\n \t]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P27 wd:Q30; \",\n \t\t\"wdt:P108 wd:Q496626; \",\n \t\t\"wdt:P108 wd:Q2343558; \",\n \t\t\"wdt:P108 wd:Q15847814; \",\n \t\t\"wdt:P108 wd:Q895072.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P112 wd:Q55206; # Founded Sally Ride Science\\n\",\n \t\t\"?person wdt:P108 wd:Q5059715; # Employed by Center for International Security and Cooperation\\n\",\n \t\t\"?person wdt:P108 wd:Q41506; # Employed by Stanford University\\n\",\n \t\t\"?person wdt:P108 wd:Q23548; # Employed by National Aeronautics and Space Administration\\n\",\n \t\t\"?person wdt:P108 wd:Q622664; # Employed by University of California, San Diego\\n\",\n \t\t\"?person wdt:P27 wd:Q30. # Country of citizenship is United States of America\"\n \t]\n }"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8685 kg:9653 .\",\n \t\t\"?x kg:3067 kg:2802 .\",\n \t\t\"?x kg:3067 kg:9752 .\",\n \t\t\"?x kg:3067 kg:4056 .\",\n \t\t\"?x kg:3067 kg:5717 .\",\n \t\t\"?x kg:4650 kg:3913 .\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P106/wdt:P279* wd:Q1485341.\",\n    \"?work wdt:P921 ?person.\",\n    \"?work rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work wdt:P50 ?person.} UNION\",\n    \"{?work wdt:P161 ?person.} UNION\",\n    \"{?work wdt:P345 ?person.} UNION\",\n    \"{?work wdt:P859 ?person.}\",\n    \"?work2 rdfs:label \\\"Planet Terror\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work2 wdt:P50 ?person.} UNION\",\n    \"{?work2 wdt:P161 ?person.} UNION\",\n    \"{?work2 wdt:P345 ?person.} UNION\",\n    \"{?work2 wdt:P859 ?person.}\",\n    \"?work3 rdfs:label \\\"Sin City Once Upon a Time in Mexico\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work3 wdt:P50 ?person.} UNION\",\n    \"{?work3 wdt:P161 ?person.} UNION\",\n    \"{?work3 wdt:P345 ?person.} UNION\",\n    \"{?work3 wdt:P859 ?person.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q1165050 ;\",\n \t\t\"wdt:P57 wd:Q192115 ;\",\n \t\t\"wdt:P57 wd:Q93853 ;\",\n \t\t\"wdt:P86 wd:Q1165050 ;\",\n \t\t\"wdt:P86 wd:Q192115 ;\",\n \t\t\"wdt:P86 wd:Q93853 ;\",\n \t\t\"wdt:P58 wd:Q1165050 ;\",\n \t\t\"wdt:P58 wd:Q192115 ;\",\n \t\t\"wdt:P58 wd:Q93853 ;\",\n \t\t\"wdt:P1040 wd:Q1165050 ;\",\n \t\t\"wdt:P1040 wd:Q192115 ;\",\n \t\t\"wdt:P1040 wd:Q93853 .\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?execProducerWriter wdt:P31 wd:Q5 ;\",\n    \"wdt:P856 wd:Q50442795 ;\",\n    \"p:P1416/psn:P1416 ?companies .\",\n    \"{?companies wdt:P31/wdt:P279* wd:Q4830453.}\",\n    \"FILTER (?companies = wd:Q1025804 || ?companies = wd:Q1025805 || ?companies = wd:Q665457 || ?companies = wd:Q1025809 || ?companies = wd:Q1025803 || ?companies = wd:Q1025802)\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"?execProducerWriter wdt:P58 wd:Q29011 ;\",\n \t\t\"?execProducerWriter wdt:P1431 wd:Q29011 ;\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q1136386 } UNION { ?execProducerWriter wdt:P108 wd:Q11490471 } UNION { ?execProducerWriter wdt:P108 wd:Q1054807 } ;\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q182950 } UNION { ?execProducerWriter wdt:P108 wd:Q947907 } UNION { ?execProducerWriter wdt:P108 wd:Q11371930 } .\"\n \t]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4357/kg:0338 kg:5910 ;\",\n \t\t\"?x kg:4357/kg:0338 kg:0820 ;\",\n \t\t\"?x kg:4357/kg:0338 kg:6491 ;\",\n \t\t\"?x kg:0201/kg:0338 kg:5910 ;\",\n \t\t\"?x kg:0201/kg:0338 kg:0820 ;\",\n \t\t\"?x kg:0201/kg:0338 kg:6491 ;\",\n \t\t\"?x kg:4357/kg:0338 kg:5322 ;\",\n \t\t\"?x kg:4357/kg:0338 kg:0791 ;\",\n \t\t\"?x kg:4357/kg:0338 kg:6191 .\"\n \t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P800 ?cinematographyWork .\",\n    \"FILTER (?cinematographyWork = wd:Q492675 || ?cinematographyWork = wd:Q105897555 || ?cinematographyWork = wd:Q103077575 || ?cinematographyWork = wd:Q105900075).\",\n    \"?resource wdt:P57 ?writtenWork .\",\n    \"FILTER (?writtenWork = wd:Q492675 || ?writtenWork = wd:Q105897555 || ?writtenWork = wd:Q103077575 || ?writtenWork = wd:Q105900075).\",\n    \"?resource wdt:P1629 wd:Q74148.\",\n    \"?resource wdt:P57 wd:Q74148.\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer ?item wdt:P344 wd:Q17738 .\",\n \t\t\"?cinematographer ?item wdt:P58 wd:Q613974 .\",\n \t\t\"?cinematographer ?item wdt:P58 wd:Q1609393 .\",\n \t\t\"?cinematographer ?item wdt:P58 wd:Q1415127 .\",\n \t\t\"?cinematographer ?item wdt:P58 wd:Q208910 .\",\n \t\t\"?cinematographer ?item wdt:P57 wd:Q17738 .\",\n \t\t\"?cinematographer ?item wdt:P58 wd:Q17738 .\",\n \t\t\"?cinematographer ?item wdt:P1431 wd:Q17738 .\"\n \t]\n}\n    "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6614 kg:9935 .\",\n \t\t\"?x kg:7026 kg:9935 .\",\n \t\t\"?x kg:4089 kg:9935 .\",\n \t\t\"?x kg:6062 kg:2618 .\",\n \t\t\"?x kg:6062 kg:1953 .\",\n \t\t\"?x kg:6062 kg:2562 .\",\n \t\t\"?x kg:6062 kg:1146 .\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"?editor wdt:P31 wd:Q5.\",\n    \"?editor p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"wd:Q1088799 wdt:P57 ?cinematographer;\",\n    \"wdt:P58 ?director;\",\n    \"wdt:P720 ?editor.\",\n    \"?film1 wdt:P58 ?director;\",\n    \"wdt:P361 wd:Q493819.\",\n    \"?film2 wdt:P58 ?director;\",\n    \"wdt:P361 wd:Q493819.\",\n    \"{?film1 wdt:P1476 \\\"Twin Peaks\\\".}\",\n    \"{?film2 wdt:P1476 \\\"Twin Peaks: Fire Walk with Me\\\".}\",\n    \"?film3 wdt:P58 ?director;\",\n    \"wdt:P1476 \\\"My Son, My Son, What Have Ye Done\\\".\"\n  ]\n}\n  \t            \t \t  "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 ?cinematographer .\",\n \t\t\"?entity wdt:P57 ?director .\",\n \t\t\"?entity wdt:P1040 ?editor .\",\n \t\t\"{ wd:Q1473406 wdt:P1431 ?entity. } UNION { wd:Q3485595 wdt:P1431 ?entity. }\",\n \t\t\"wd:Q2085 wdt:P1431 ?entity .\",\n \t\t\"wd:Q1140578 wdt:P1431 ?entity .\",\n \t\t\"wd:Q1511905 wdt:P1431 ?entity.\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2839 kg:6298 .\",\n \t\t\"?x kg:2839 kg:5435 .\",\n \t\t\"?x kg:2839 kg:4868 .\",\n \t\t\"?x kg:3716 kg:5660 .\",\n \t\t\"?x kg:3716 kg:8504 .\",\n \t\t\"?x kg:5438 kg:5660 .\",\n \t\t\"?x kg:5438 kg:8504 .\",\n \t\t\"?x kg:0081 kg:5660 .\",\n \t\t\"?x kg:0081 kg:8504 .\"\n \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P86 ?work1; \",\n \t\t\"wdt:P86 ?work2; \",\n \t\t\"wdt:P86 ?work3; \",\n \t\t\"wdt:P86 ?work4; \",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q190655 ];\",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q206151 ];\",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q85005 ].\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q374172;\",\n \t\t\"?person wdt:P57 wd:Q166739;\",\n \t\t\"?person wdt:P57 wd:Q2449461;\",\n \t\t\"?person wdt:P57 wd:Q45602;\",\n \t\t\"?person wdt:P1040 wd:Q374172;\",\n \t\t\"?person wdt:P1040 wd:Q166739;\",\n \t\t\"?person wdt:P1040 wd:Q2449461;\",\n \t\t\"?person wdt:P1040 wd:Q45602;\",\n \t\t\"?person wdt:P26 wd:Q32337;\",\n \t\t\"?person wdt:P26 wd:Q241019;\",\n \t\t\"?person wdt:P26 wd:Q137808.\"\n \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{\n \t\"query\": [\"$director\"]\n \t}\n \t                \t\t"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5; \",\n    \"wdt:P800 ?work; \",\n    \"wdt:P2093 wd:Q46785; \",\n    \"wdt:P3210 wd:Q46785; \",\n    \"wdt:P57 ?director. \",\n    \"?work wdt:P50 ?item; \",\n    \"wdt:P425 wd:Q46785; \",\n    \"wdt:P710 ?editor. \",\n    \"{?editor wdt:P31 wd:Q5.} UNION {?director wdt:P31 wd:Q5.}\",\n    \"?item rdfs:label ?name.\",\n    \"FILTER(LANG(?name) = 'en')\",\n    \"FILTER(?work = wd:Q46785)\"\n  ]\n}\n    "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5;\",\n \t\t\"?item wdt:P21 wd:Q6581097;\",\n \t\t\"?work1 wdt:P58 ?item;\",\n \t\t\"?work1 wdt:P57 ?item;\",\n \t\t\"?work1 wdt:P1040 ?item;\",\n \t\t\"FILTER(?work1 = wd:Q166739 || ?work1 = wd:Q214723 || ?work1 = wd:Q1070468)\"\n \t]\n }"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\n \t\"query\": [\"$Charlie_Chaplin\" ]\n \t}\n   \t            \t \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?grandCanyonDistributor wdt:P31 wd:Q7584906 ;\",\n    \"wdt:P1411 ?acquisitionEvent .\",\n    \"?acquisitionEvent wdt:P1266 wd:Q50935576 , wd:Q10856589 , wd:Q205507 , wd:Q10856584 , wd:Q10856585 .\"\n  ]\n}\n    "}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P272 ?productionCompany .\",\n \t\t\"?film wdt:P750 ?distributor .\",\n \t\t\"?film wdt:P127 wd:Q3133593 .\",\n \t\t\"?film wdt:P127 wd:Q1411292 .\",\n \t\t\"?productionCompany wdt:P127 wd:Q219635 .\",\n \t\t\"?productionCompany wdt:P127 wd:Q7603552 .\",\n \t\t\"?productionCompany wdt:P127 wd:Q3511946 .\",\n \t\t\"?productionCompany wdt:P127 wd:Q505275 .\",\n \t\t\"?film rdfs:label ?title .\",\n \t\t\"FILTER (LANG(?title) = 'en') .\",\n \t\t\"FILTER (?title = \\\"Grand Canyon\\\"@en)\"\n \t]\n }"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?film_works.\",\n \t\t\"{?film_works wdt:P31/wdt:P279* wd:Q1142422.} UNION {?film_works wdt:P31/wdt:P279* wd:Q5006568.}\",\n \t\t\"FILTER(?film_works = wd:Q181458 || ?film_works = wd:Q181460 || ?film_works = wd:Q181453 || ?film_works = wd:Q181457).\",\n \t\t\"?item wdt:P136 wd:Q29456.\"\n \t]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 ?director.\",\n \t\t\"?item wdt:P86 ?composer.\",\n \t\t\"?item wdt:P1040 ?editor.\",\n \t\t\"{?item wdt:P31 wd:Q11424; wdt:P57 ?director. ?director (wdt:P57|wdt:P86|wdt:P1040) ?item.}\",\n \t\t\"?floorwalker wdt:P57 ?director.\",\n \t\t\"?musicalCareer wdt:P1040 ?editor.\",\n \t\t\"?kid wdt:P1040 ?editor.\",\n \t\t\"?goldRush wdt:P1040 ?editor.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1410 ?composer.\",\n \t\t\"?x kg:1541 ?editor.\",\n \t\t\"?x kg:1892 kg:8585, kg:0642.\",\n \t\t\"?x kg:1892 kg:2009.\",\n \t\t\"kg:0684 kg:1541 ?x.\",\n \t\t\"kg:7670 kg:1541 ?x.\",\n \t\t\"kg:0727 kg:1541 ?x.\"\n \t]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director wdt:P800 ?film1.\",\n    \"?film1 rdfs:label \\\"There Will Be No Leave Today\\\"@en.\",\n    \"?director wdt:P800 ?film2.\",\n    \"?film2 rdfs:label \\\"The Killers\\\"@en.\",\n    \"?director p:P161/ps:P161 wd:Q73295.\", \">// Lars von Trier influenced by director (assuming P161 is the property for influence, which might not be accurate and needs to be checked in Wikidata for exact property usage regarding influences in film industry context. Influence relations can vary widely and may require more specific properties or qualifiers depending on how they are recorded in Wikidata entries. For example, \"] }\n  "}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P40 wd:Q2689768; \", \">// Oona O'Neill as child, not spouse, correcting for accurate representation in Wikidata structure might be needed based on actual data structure. Ideally, we would look for spouses but direct property for spouses may vary or require more specific qualifiers or statements to accurately represent the marriages mentioned without assuming a direct property exists that encompasses all three marriages specifically as stated in the question which could be complex due to timeframes and nature of relationships recorded in Wikidata entries. For simplicity, this example focuses on one relationship with Oona O'Neill as an indicative approach but does not fully encapsulate the full complexity of the original query's requirements accurately without further specific data exploration or correction for accurate representation based on actual Wikidata structure and properties used for such historical figures and their relationships. \",\n \t\t\"wdt:P800 wd:Q15764; \", \">// Influenced Federico Fellini (as an example, the query would need to be expanded to include all influences mentioned but for simplicity, one is shown here with the understanding that a full representation would require additional qualifiers or union of statements for each influence mentioned in the original question. The structure provided focuses on demonstrating inclusion of one such influence as indicative approach. \",\n \t\t\"wdt:P31/wdt:P279* wd:Q11424; \", \">// Film editor (classifying by occupation, this is a simplification and may require more specific qualifiers or statements based on actual Wikidata structure for accurate representation of the role as film editor. The property used here is indicative but might need adjustment based on how occupations are classified in Wikidata entries for historical figures. \",\n \t\t\"wdt:P1416 wd:Q579082.\" , \">// Founding member of United Artists (this assumes a direct property exists linking individuals to the founding of organizations which may require more specific qualifiers or statements based on actual data structure in Wikidata for accurate representation. The property used here is indicative but might need adjustment based on how such historical organizational roles are recorded in Wikidata entries. \",\n \t\t\"?person\"\n \t]\n }"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q7042855; \",\n \t\t\"wdt:P26 wd:Q137808, wd:Q32337, wd:Q241019; \",\n \t\t\"wdt:P737 wd:Q7371, wd:Q157191, wd:Q104340; \",\n \t\t\"?company wdt:P112 ?person. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{\n \t\"query\": [\"$filmEditor\"]\n \t}\n \t                \t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q208496 . \",\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q1601655 .\",\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q1601657 .\",\n \t\t\"wdt:P26 ?spouse .\",\n \t\t\"{?spouse wdt:P856 wd:Q208496.} UNION {?spouse wdt:P862 wd:Q208496.}\",\n \t\t\"?director ?star ?writer ?spouse.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 ?director.\",\n \t\t\"?resource wdt:P58 ?writer.\",\n \t\t\"?resource wdt:P161 ?star.\",\n \t\t\"{?resource rdfs:label 'The Beaches of Agnès'@en.} UNION {?resource rdfs:label 'Jane B. par Agnès V.'@en.} UNION {?resource rdfs:label 'The World of Jacques Demy'@en.}\",\n \t\t\"?director wdt:P26 wd:Q312258.\",\n \t\t\"?writer wdt:P26 wd:Q312258.\",\n \t\t\"?star wdt:P26 wd:Q312258.\",\n \t\t\"?resource wdt:P737 wd:Q312258.\"\n \t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{\n \t\"query\": [\"$director\", \"$screenwriter\", \"$cast_member\"]\n \t}\n \t                \t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// Instance of company/distributor/producer\\n\",\n    \"?company wdt:P1756 ?acquirer .\", \">// Acquired by\\n\",\n    \"{?acquirer rdfs:label \\\"The Vanguard Group\\\"@en.} UNION {?acquirer rdfs:label \\\"BlackRock\\\"@en.}\", \">// The acquirers are either The Vanguard Group or BlackRock\\n\",\n    \"?company wdt:P1758 ?product .\", \">// Product or service\\n\",\n    \"{?product rdfs:label \\\"Amazon CloudFront\\\"@en.} UNION {?product rdfs:label \\\"Kindle\\\"@en.} UNION {?product rdfs:label \\\"AbeBooks\\\"@en.}\", \">// The products are Amazon CloudFront, Kindle, and AbeBooks\\n\",\n    \"FILTER NOT EXISTS { ?company wdt:P136 wd:Q507892 }\", \">// Exclude the condition related to Mozart in the Jungle as it seems misaligned with the acquisition context provided.\\n\"\n  ]\n}\n    "}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P750 wd:Q17070012 ;\",\n \t\t\"?producer wdt:P272 wd:Q17070012 .\",\n \t\t\"{ ?resource wdt:P127 wd:Q849363. } UNION { ?resource wdt:P127 wd:Q219635. } UNION { ?resource wdt:P127 wd:Q1628791. }\",\n \t\t\"FILTER(?resource = wd:Q1628791 || ?resource = wd:Q318128 || ?resource = wd:Q136469 || ?resource = wd:Q65073147)\"\n \t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    ?producer kg:0983 kg:1758 ;\\n             kg:6716 kg:4990 ;\\n             kg:6716 kg:3680 ;\\n             kg:0832/kg:0582, kg:8018, kg:5943, kg:5071 .\\n    ?resource kg:6716 ?producer .\\n}\"] }"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q1485889.\", \">// Star (occupation subclass of actor or performer, not exact match for star but closest available in Wikidata as of my last update in 2023 and may need adjustment based on the current structure of Wikidata entities and properties. For a more precise query, you might want to use wd:Q1650918 (for film actor) or another specific subclass of performer/actor that best fits your needs).\",\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q43282.\", \">// Editor (occupation subclass of editor, similar note as above for exact match)\"\n    ,\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q1545612.\", \">// Cinematographer (occupation subclass of cinematographer, similar note as above for exact match)\"\n    ,\n    \"OPTIONAL { ?item wdt:P136 wd:Q80948. }\", \">// Genre is horror, which might be implied by the films mentioned but not directly stated in the question.\"\n    ,\n    \"?film1 wdt:P577 ?date1.\",\n    \"?film1 wdt:P161 ?item.\",\n    \"FILTER(?film1 = wd:Q208493 || ?film1 = wd:Q208494).\", \">// Female Vampire and No label defined, using Q-codes for the films. Note that 'No label defined' is not a real film title and should be replaced with the correct Wikidata item ID.\"\n    ,\n    \"?item wdt:P106 wd:Q36582.\", \">// Spanish writer (occupation)\"\n    ,\n    \"?film2 wdt:P577 ?date2.\",\n    \"?film2 wdt:P161 ?item.\",\n    \"FILTER(?film2 = wd:Q9458 || ?film2 = wd:Q208493 || ?film2 = wd:Q208494).\", \">// 99 Women, No label defined, and The Blood of Fu Manchu. Again, 'No label defined' should be replaced with the correct Wikidata item ID.\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"es\\\". }\" ,\n    \"?item\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P161 wd:Q3207690 ;\",\n \t\t\"?resource wdt:P1040 wd:Q3207690 ;\",\n \t\t\"?resource wdt:P344 wd:Q3207690 ;\",\n \t\t\"?resource wdt:P57 wd:Q289021 ;\",\n \t\t\"?resource wdt:P58 wd:Q289021 ;\",\n \t\t\"?resource wdt:P57 wd:Q463946 ;\",\n \t\t\"?resource wdt:P58 wd:Q463946 .\"\n \t]\n}\n    "}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:9847 kg:9729 .\",\n \t\t\"?x kg:7039 kg:9729 .\",\n \t\t\"?x kg:5431 kg:6836 .\",\n \t\t\"?x kg:9150 kg:6836 .\",\n \t\t\"?x kg:9150 kg:1739 .\",\n \t\t\"?x kg:9150 kg:5874 .\",\n \t\t\"?x kg:7729 kg:4005\"\n \t]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person p:P86 wd:Q40722;\", \">// Industrial Light & Magic founder (Note: This part might need adjustment as George Lucas is the founder, not a cinematographer directly in this context. The query assumes a direct relation which may not be accurate in Wikidata structure for cinematographers specifically founding ILM and THX. Adjust according to actual relations available in Wikidata.)\",\n    \"?person p:P86 wd:Q107592;\", \">// THX founder (Similar note as above applies here too)\"\n    ,\"?person wdt:P2204 ?spouse.\",\n    \"?spouse rdfs:label 'Mellody Hobson'@en.\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P106 wd:Q222344; \",\n \t\t\"wdt:P112/wdt:P112* wd:Q746676;\",\n \t\t\"wdt:P112/wdt:P112* wd:Q1044630;\",\n \t\t\"wdt:P112/wdt:P112* wd:Q258945;\",\n \t\t\"wdt:P112/wdt:P112* wd:Q242446;\",\n \t\t\"wdt:P112/wdt:P112* wd:Q216611.\",\n \t\t\"?entity wdt:P26 wd:Q6813152.\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer ?cinematographerLabel .\",\n    \"wd:Q46905 wdt:P161 ?cinematographer .\", \">// Inception (Q46905) has cinematographer (?cinematographer as star and cinematographer of the movie Inception, this might need adjustment based on exact Wikidata structure for roles played by a person in a film project. The query assumes that there is a property linking movies to their cinematographers who are also stars, which may not be directly available in Wikidata without further refinement or additional properties being used to specify roles more precisely. Adjustments would depend on the actual data model of Wikidata for such relationships.//) .\",\n    \"wd:Q1067895 wdt:P161 ?cinematographer .\", \">// Game Over (Q1067895) has cinematographer (?cinematographer as star and cinematographer of the movie Game Over, similar adjustments may be needed here too.) .\",\n    \"wd:Q243055 wdt:P161 ?cinematographer .\", \">// Liberation (Q243055) has cinematographer (?cinematographer as star and cinematographer of the movie Liberation, similar adjustments may be needed here too.) .\",\n    \"?madness wdt:P57 ?cinematographer .\", \">// The Madness (replace with QID if known) has director/producer/editor (?cinematographer) .\",\n    \"wd:Q1067895 wdt:P31 wd:Q11424. \", \">// Ensure Game Over is a film.\",\n    \"wd:Q46905 wdt:P31 wd:Q11424. \", \">// Ensure Inception is a film.\",\n    \"wd:Q243055 wdt:P31 wd:Q11424. \", \">// Ensure Liberation is a film.\",\n    \"?cinematographer wdt:P31 wd:Q5 .\", \">// ?cinematographer is a human.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer ?label .\",\n \t\t\"?film wdt:P344 ?cinematographer ;\",\n \t\t\"wdt:P161 ?star ;\",\n \t\t\"wdt:P57 ?director ;\",\n \t\t\"wdt:P58 ?screenwriter ;\",\n \t\t\"wdt:P1040 ?editor ;\",\n \t\t\"wdt:P1431 ?producer .\",\n \t\t\"?cinematographer rdfs:label ?label .\",\n \t\t\"{?film wdt:P161 wd:Q85520081.} UNION {?film wdt:P161 wd:Q96054985.} UNION {?film wdt:P161 wd:Q85532437.}\",\n \t\t\"?cinematographer ?director ;\",\n \t\t\"?cinematographer ?screenwriter ;\",\n \t\t\"?cinematographer ?producer ;\",\n \t\t\"?cinematographer ?editor .\",\n \t\t\"wd:Q87778273 wdt:P57 ?cinematographer ;\",\n \t\t\"wdt:P161 ?cinematographer ;\",\n \t\t\"wdt:P58 ?cinematographer ;\",\n \t\t\"wdt:P1040 ?cinematographer ;\",\n \t\t\"wdt:P1431 ?cinematographer .\"\n \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:Person .\",\n \t\t\"?x kg:0658 kg:1484, kg:8802, kg:9888.\",\n \t\t\"?x kg:6509 kg:8781.\",\n \t\t\"?x kg:4806 kg:8781.\",\n \t\t\"?x kg:8389 kg:8781.\",\n \t\t\"?x kg:1709 kg:8781.\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?writerCinematographer wdt:P800 wd:Q21947563; # The Emperor (film) writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q710095; # Anyone Lived in a Pretty How Town writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q21947563; # 1:42.08 (film) writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q1605076. # Herbie: Fully Loaded writer or cinematographer\\n\",\n \t \"?writerCinematographer wdt:P40 ?spouse. # married a person\\n\",\n \t \"?writerCinematographer wdt:P793 wd:Q281556. # influenced Marcus O'Reilly\\n\",\n \t \"?writerCinematographer wdt:P793 wd:Q15974810.\" ]}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"?writerCinematographer wdt:P31 wd:Q5; \",\n \t\t\"(wdt:P58|wdt:P344) wd:Q2411065, wd:Q613974, wd:Q208910, wd:Q1609393;\",\n \t\t\"wdt:P26 ?spouse;\",\n \t\t\"?writerCinematographer wdt:P737 wd:Q52306598, wd:Q717378.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{\n \t\"query\": [\"$writer\"]\n \t}\n \t                \t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P372 ?film.\",\n    \"?film wdt:P577 wd:Q189046.\", \">// Uzak's release date, used to identify the film as it might not have a direct relation with Nuri Bilge Ceylan in this context for simplicity sake. A more accurate query would require additional information or relations that directly link films to their director and cinematographer without ambiguity.\",\n    \"?film2 wdt:P577 wd:Q189043.\", \">// Clouds of May's release date, similar note as above applies here too.\"\n    ]\n}\n   "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P106 wd:Q222344 .\",\n \t\t\"?uzak wdt:P57 ?director ; wdt:P1431 ?executive_producer ; wdt:P1040 ?film_editor ; wdt:P58 ?screenwriter .\",\n \t\t\"?clouds_of_may wdt:P57 ?director ; wdt:P1431 ?executive_producer ; wdt:P1040 ?film_editor ; wdt:P58 ?screenwriter .\",\n \t\t\"wd:Q18609037 wdt:P57 ?director .\",\n \t\t\"?director rdfs:label ?name .\"\n \t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:3965 kg:5964 ; kg:0650 kg:5964 ; kg:0060 kg:5964 ; kg:5866 kg:5964 . FILTER(?film = kg:2448 || ?film = kg:9814) . kg:5964 kg:8485 ?resource . }\"] }"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P800 wd:Q760425; \", \">// Vagabond (film) written by ?director, Q760425 is the Wikidata ID for \" , \"Vagabond\", \" \"\n \t\t,\"wdt:P800 wd:Q139552;\", \">// The Gleaners and I written by ?director, Q139552 is the Wikidata ID for \" , \"The Gleaners and I\", \" \"\n \t\t,\"wdt:P800 wd:Q60745986;\", \">// Varda by Agnès written by ?director, Q60745986 is the Wikidata ID for \" , \"Varda by Agnès\", \" \"\n \t\t,\"wdt:P1365 wd:Q219845.\" , \">// ?director edited by Jacques Demy, Q219845 is the Wikidata ID for Jacques Demy. P1365 represents 'editor of work'. However, this property might not be accurate for the intended relationship; it's used here as a placeholder for demonstration purposes. The correct properties should be identified based on the actual relationships in Wikidata. \"\n \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P106 wd:Q2526255 .\",\n \t\t\"?director wdt:P58 wd:Q2493884 ;\",\n \t\t\"?director wdt:P58 wd:Q2298257 ;\",\n \t\t\"?director wdt:P58 wd:Q63993096 ;\",\n \t\t\"?director wdt:P1040 wd:Q2493884 ;\",\n \t\t\"?director wdt:P1040 wd:Q2298257 ;\",\n \t\t\"?director wdt:P1040 wd:Q63993096 .\",\n \t\t\"?director wdt:P26 ?spouse .\",\n \t\t\"?director wdt:P737 wd:Q312258\"\n \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{\n \t\"query\": [\"$filmDirector\"]\n \t}\n \t                \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q7204586.\",\n    \"?resource p:P1377 ?statement.\",\n    \"?statement ps:P1377 wd:Q196455.\",\n    \"?statement ps:P1377 wd:Q196456.\",\n    \"?statement ps:P1377 wd:Q208510.\",\n    \"?statement ps:P1377 wd:Q196457.\",\n    \"?resource p:P1377 ?statement2.\",\n    \"?statement2 ps:P1377 wd:Q196458.\",\n    \"?statement2 ps:P1377 wd:Q196459.\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P272 ?productionCompany.\",\n \t\t\"?resource wdt:P127 wd:Q849363;\",\n \t\t\"wd:Q505275;\",\n \t\t\"wd:Q219635;\",\n \t\t\"wd:Q7603552;\",\n \t\t\"wd:Q2007336.\",\n \t\t\"?resource wdt:P750 ?distributor.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?film wdt:P31 wd:Q11424; # instance of film/movie\\n\",\n \t \"wdt:P57 ?director; # directed by\\n\",\n \t \"wdt:P162 ?producer; # produced by\\n\",\n \t \"wdt:P921 wd:Q508239; # written by Randolph Scott (Q508239)\\n\",\n \t \"wdt:P921 wd:Q479025; # written by Miriam Hopkins (Q479025)\\n\",\n \t \"wdt:P921 wd:Q46845; # written by Humphrey Bogart (Q46845)\\n\",\n \t \"wdt:P921 wd:Q435595; # written by Robert Buckner (Q435595)\\n\",\n \t \"wdt:P161 wd:Q47008; # starring Errol Flynn (Q47008)\\n\",\n \t \"wdt:P161 wd:Q203856. # starring Paul Fix (Q203856)\"\n \t]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 ?director.\",\n \t\t\"?film wdt:P162 ?producer.\",\n \t\t\"?film wdt:P58 ?screenwriter1.\",\n \t\t\"?film wdt:P58 ?screenwriter2.\",\n \t\t\"?film wdt:P58 ?screenwriter3.\",\n \t\t\"?film wdt:P58 ?screenwriter4.\",\n \t\t\"?film wdt:P161 wd:Q93188.\",\n \t\t\"?film wdt:P161 wd:Q744357.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P735 wd:Q2069488 .\", \">// given name Hans\",\n    \"?resource wdt:P736 wd:Q188481 .\", \">// family name Ertl\",\n    \"OPTIONAL { ?resource wdt:P106 wd:Q211952 . }\", \">// occupation screenwriter\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q103013 wdt:P106 wd:Q69423232 .\",\n    \"  BIND(wd:Q103013 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0153 kg:9006 ?resource .\",\n    \"  FILTER(?resource = kg:7856)\",\n    \"} \"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?composer wdt:P106 wd:Q214917 .\", \">// occupation is composer\",\n    \"?composer rdfs:label 'Bob Dylan'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q392 wdt:P106 wd:Q36834 .\",\n    \"  BIND(wd:Q392 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1333 kg:4423 ?resource .\",\n    \"  FILTER(?resource = kg:3294) .\",\n    \"}\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P1785 ?discovery .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P112 wd:Q5 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4808 kg:9741 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P136 wd:Q208754 .\", \">// Andrei Tarkovsky's films (P136 is the property for 'genre' and Q208754 is 'film')\"\n    ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q853 wdt:P1040 ?resource .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0149 kg:9165 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q296475 wdt:P155 ?sequel .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q721 wdt:P155 ?sequel .\",\n    \"  FILTER(?sequel = wd:Q1042294) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5163 kg:1847 ?resource .\",\n    \"  FILTER(?resource = kg:4214) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q167 wdt:P179 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q168 wdt:P155 ?resource .\",\n    \"  ?resource wdt:P155 wd:Q131593 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2378 kg:6156 ?resource .\",\n    \"  ?resource kg:6999 kg:6999 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q187243 wdt:P22 ?parent .\",\n    \"} UNION {\",\n    \"wd:Q187243 wdt:P25 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q260 wdt:P40 ?child .\",\n \t\t\"?parent wdt:P40 wd:Q260 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  kg:9894 kg:9374 ?parent .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q42 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P58 ?work .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9298 kg:9846 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"?resource wdt:P108 wd:Q42679 .\", \">// Employed by Austria (assuming Q42679 is the correct ID for 'Austria' as an employer)\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(LANG(?label) = 'en') .\",\n    \"FILTER(?resource = wd:Q12345678) .\" ,\"\\t// Replace Q12345678 with the actual Wikidata ID for Max Margules\"\n    ]}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q79070 wdt:P108 ?resource .\",\n    \"  FILTER(?resource = wd:Q40) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2612 kg:3977 ?resource .\",\n    \"  FILTER(?resource = kg:4018) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q57274860 .\", \">// Instance of literary work\",\n    \"?resource wdt:P50 wd:Q96 .\", \">// Author is J.R.R. Tolkien\",\n    \"?resource rdfs:label 'The Hobbit: An Unexpected Journey'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q80379 wdt:P58 ?resource .\",\n    \"  FILTER(?resource = wd:Q892) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1529 kg:9243 ?resource .\",\n    \"  FILTER(?resource = kg:7293) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P577 ?date .\", \">// Publication date\",\n    \"?resource wdt:P161 wd:Q289012 .\", \">// Starring Bruce Willis\",\n    \"?resource wdt:P725 wd:Q289012 .\", \">// Executive producer Bruce Willis\",\n    \"FILTER(?resource = wd:Q43718) .\", \">// A Good Day to Die Hard\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q72276 wdt:P1431 wd:Q2680 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8042 kg:0403 ?resource .\",\n    \"  FILTER(?resource = kg:5286) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"wd:Q15639478 wdt:P108 ?costumeDesigner .\",\n    \"?costumeDesigner wdt:P106 wd:Q211756 .\",\n    \"} LIMIT 1\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"wd:Q2733930 wdt:P2515 ?costumeDesigner.\",\n    \"?costumeDesigner wdt:P106 wd:Q36834.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3119 kg:5566 .\",\n    \"?resource kg:4634 ?relatedResource .\",\n    \"?relatedResource kg:3119 kg:7537 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"?film wdt:P31 wd:Q2009654 .\", \">// Olympia (film)\",\n    \"?film wdt:P86 ?screenwriter .\",\n    \"?film wdt:P186 ?cinematographer .\",\n    \"FILTER(?cinematographer = ?screenwriter) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q158069 wdt:P344 ?resource .\",\n    \"?resource wdt:P106 wd:Q69423232 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6736 kg:5056 .\",\n    \"?resource kg:6736 kg:2665 .\",\n    \"kg:6247 kg:5056 ?resource .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P26 wd:Q174890 .\", \">// spouse of Erich Honecker\",\n    \"?person wdt:P102 wd:Q175115 .\", \">// member of Free German Youth\",\n    \"OPTIONAL { ?person wdt:P39 ?position . }\", \">// position held (if any)\",\n    \"FILTER EXISTS { ?person wdt:P108 wd:Q175115 . }\", \">// employed by Free German Youth\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q2607 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P108 wd:Q76845 .\",\n \t\t\"VALUES ?resource { ?spouse }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n \t\"query\": [\n \t\t\"?s\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?s kg:1230 ?spouse .\",\n \t\t\"?spouse kg:4689 kg:5225 .\",\n \t\t\"kg:1391 kg:1230 ?spouse .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q210746 wdt:P178 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q208824 wdt:P162 ?producer .\",\n    \"  ?producer wdt:P106 wd:Q36834 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:8795 kg:producer ?composer .\",\n    \"  ?composer kg:occupation kg:9507 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P1478 \\\"Al Compás de tu Mentira\\\" .\",\n    \"?work wdt:P86 ?composer .\",\n    \"?composer wdt:P106 wd:Q211953 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q577126 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q69423232 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7262 kg:0135 .\",\n    \"?resource kg:8297 kg:4092 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P1472 wd:Q568930 .\", \">// The Chess Players (Q568930)\",\n    \"?work wdt:P86 ?composer .\",\n    \"?composer wdt:P106 wd:Q19235 .\", \">// cinematographer (Q19235)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q76582 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q222344 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0600 kg:9247 .\",\n    \"?resource kg:2423 ?work .\",\n    \"?work kg:0600 kg:1572 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q168459 wdt:P179 ?series .\", \">// Microsoft Flight Simulator 2004 is part of a series\",\n    \"  ?sequel wdt:P179 ?series .\", \">// The sequel is also part of the same series\",\n    \"  ?sequel wdt:P31 wd:Q7397 .\", \">// The sequel is a video game\",\n    \"  ?sequel wdt:P577 ?date .\", \">// The sequel has a publication date\",\n    \"  FILTER(?date > \\\"2004-01-01T00:00:00Z\\\"^^xsd:dateTime) .\", \">// The sequel was released after 2004\",\n    \"} ORDER BY ?date LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"wd:Q4348691 wdt:P155 ?sequel .\",\n \t\t\"?sequel wdt:P750 wd:Q2283 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?sequel kg:6198 kg:5718 .\",\n \t\t\"kg:2249 kg:7041 ?sequel .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q2487569 .\", \">// Instance of television series\",\n    \"?sequel wdt:P179 wd:Q105464 .\", \">// Part of Twin Peaks\",\n    \"?sequel wdt:P161 wd:Q2093872 .\", \">// Starring James Parks\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"?sequel wdt:P155 wd:Q2085 .\",\n \t\t\"?sequel wdt:P161 wd:Q967797 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"?sequel kg:0306 kg:3268 .\",\n \t\t\"?sequel kg:0055 kg:3519 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P27 wd:Q30 .\", \">// person is from the United States\",\n    \"?person wdt:P40 wd:Q6891511 .\", \">// person has child Malia Obama\",\n    \"?company wdt:P31 wd:Q783794 .\", \">// company is an instance of film production company\",\n    \"?company wdt:P17 wd:Q30 .\", \">// company is located in the United States\",\n    \"?company wdt:P112 ?person .\", \">// person is a founder of the company\",\n    \"?company wdt:P1813 'Higher Ground Productions'@en .\", \">// company name is Higher Ground Productions\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P112 wd:Q81950264 .\",\n \t\t\"wd:Q81950264 wdt:P355* wd:Q15070044 .\",\n \t\t\"wd:Q15070044 wdt:P40 ?resource .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  kg:9700 kg:8580 ?founder .\",\n \t\t\"  ?founder kg:9585 kg:5784 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2637 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q4951718 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sibling WHERE {\",\n \t\t\"wd:Q352 wdt:P3373 ?sibling .\",\n \t\t\"?sibling wdt:P108 wd:Q1022419 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:5089 kg:1490 .\",\n \t\t\"?resource kg:9612 kg:4923 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q286479 wdt:P108 ?employer .\", \">// Dr. Dre's employer\",\n    \"  ?employer wdt:P361 wd:Q25094144 .\", \">// Animal Crossing: Pocket Camp distributor\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q6078 wdt:P108 ?employer .\",\n    \"wd:Q42310881 wdt:P750 ?employer .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:0138 kg:7511 ?employer .\",\n    \"  kg:0439 kg:5087 ?employer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q3025498 wdt:P1039 wd:Q76 .\", \">// Malia Obama's parent (Barack Obama)\",\n    \"wd:Q76 wdt:P1963 ?person .\", \">// employer of Ben LaBolt\",\n    \"?person wdt:P108 ?employer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"wd:Q103941992 wdt:P108 ?employer .\",\n \t\t\"?parent wdt:P40 wd:Q15070044 .\",\n \t\t\"?parent wdt:P108 ?employer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:3910 kg:6383 ?parent .\",\n    \"  ?parent kg:4573 kg:9143 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesignerSpouse WHERE {\",\n    \"?costumeDesigner wdt:P26 ?costumeDesignerSpouse .\",\n    \"?pierreVanDormael wdt:P31 wd:Q5 ;\",\n    \"wdt:P2067 ?costumeDesignerSpouse .\",\n    \"FILTER(?pierreVanDormael = wd:Q1234567) .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\",\n \t\t\"wd:Q730300 wdt:P3373 ?sibling.\",\n \t\t\"FILTER(?spouse = ?sibling).\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner kg:9413 kg:3868 .\",\n \t\t\"?costumeDesigner kg:5911 ?spouse .\",\n \t\t\"?spouse kg:6311 kg:2251 .\",\n \t\t\"OPTIONAL { ?resource ?p ?o }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesignerSpouse WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q20647589 .\", \">// costume designer instance\",\n    \"?costumeDesigner wdt:P26 ?costumeDesignerSpouse .\", \">// spouse of the costume designer\",\n    \"?costumeDesignerSpouse wdt:P106 wd:Q18637441 .\", \">// occupation is founder\",\n    \"?costumeDesignerSpouse wdt:P108 wd:Q29576154 .\", \">// employed by or associated with ClubJenna\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\",\n \t\t\"wd:Q1102919 wdt:P112 ?spouse.\",\n \t\t\"VALUES (?resource) {(?costumeDesigner)}\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner kg:0389 kg:5654 .\",\n \t\t\"?costumeDesigner kg:0468 ?spouse .\",\n \t\t\"kg:0326 kg:8372 ?spouse .\",\n \t\t\"VALUES ?resource { ?costumeDesigner }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q571 .\", \">// This line filters to get only instances of creative works\",\n    \"?resource wdt:P57 wd:Q9624 .\", \">// This line ensures the work was directed by George Harrison (wd:Q9624 is the Wikidata ID for George Harrison)\",\n    \"?resource wdt:P50 wd:Q9624 .\", \">// This line ensures the work was written by George Harrison\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P57 wd:Q2643 .\",\n \t\t\"?resource wdt:P58 wd:Q2643 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6370 kg:6663 .\",\n    \"?resource kg:8835 kg:6663 .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q1879642 .\", \">// Anker Sørensen (assuming Q1879642 is the correct Wikidata ID for Anker Sørensen)\",\n    \"?resource wdt:P31 wd:Q13442814 .\", \">// instance of written work\",\n    \"}\",\n    \"LIMIT 50\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q24907 .\",\n    \"OPTIONAL {?resource wdt:P1040 wd:Q24907 .}\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2050/kg:3395 true .\",\n    \"?resource kg:9127/kg:3395 true .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q123456 wdt:P1038 ?parent .\", \">// Q123456 is a placeholder for Nadja Weiss's Wikidata ID, which should be replaced with the actual ID.\",\n    \"  ?parent wdt:P27 wd:Q34 .\", \">// P27 is 'country of citizenship' and Q34 is Sweden.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q4990261 wdt:P40 ?child .\",\n \t\t\"?child wdt:P106 wd:Q1323191 .\",\n \t\t\"?child wdt:P27 wd:Q34 .\",\n \t\t\"?parent wdt:P40 wd:Q4990261 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4923 kg:8006 .\", \">// Nadja Weiss is the child of the resource (parent)\",\n    \"?resource kg:0457 kg:4304 .\", \">// The parent's country of citizenship is Sweden\",\n    \"?resource kg:1782 kg:5528 .\", \">// The parent's occupation is costume designer\",\n    \"} \"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q1054796 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P31 wd:Q5 ;\", \">// Ensure the spouse is a human\",\n    \"         wdt:P106 wd:Q228825 .\", \">// Ensure the spouse is a cinematographer\",\n    \"  OPTIONAL { ?spouse wdt:P27 wd:Q17 . }\", \">// Optionally check if the spouse is Japanese\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q3514303 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q222344 .\",\n    \"  ?spouse wdt:P27 wd:Q17 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"?spouse kg:7045 kg:3305 .\", \">// spouse of Takenori Sentō\",\n \t\t\"?spouse kg:8953 kg:1905 .\", \">// occupation is cinematographer\",\n \t\t\"?spouse kg:3399 kg:1186 .\", \">// country of citizenship is Japan\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?filmDirector wdt:P106 wd:Q2526255 ;\", \">// film director occupation\",\n    \"         wdt:P1416 ?employer .\", \">// employed by\",\n    \"  ?employer wdt:P17 wd:Q19 .\", \">// located in Canada\",\n    \"} LIMIT 1\"\n  ]\n}"}
