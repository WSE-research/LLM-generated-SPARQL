{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n    \"  wd:Q1564287 wdt:P106 ?occupation.\",\n    \"  ?occupation wdt:P31 wd:Q33968.\",\n    \"  ?screenwriter wdt:P106 ?occupation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?screenwriter WHERE { wd:Q1564287 wdt:P106 ?occupation. ?occupation wdt:P31 wd:Q33968. ?screenwriter wdt:P106 ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?occupation WHERE {\",\n      \"wd:Q103013 wdt:P106 ?occupation.\",\n      \"FILTER(?occupation = wd:Q69423232)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?occupation WHERE { wd:Q103013 wdt:P106 ?occupation. FILTER(?occupation = wd:Q69423232) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q69423232"]], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8329 kg:1788 ?occupation.\",\n            \"?occupation kg:7660 ?resource.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { kg:8329 kg:1788 ?occupation. ?occupation kg:7660 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q3769 wdt:P106 ?occupation.\",\n    \"  ?occupation wdt:P279* wd:Q639669.\",\n    \"  wd:Q3769 wdt:P452 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q3769 wdt:P106 ?occupation. ?occupation wdt:P279* wd:Q639669. wd:Q3769 wdt:P452 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q392 wdt:P106 ?occupation.\",\n    \"  FILTER(?occupation = wd:Q36834).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q392 wdt:P106 ?occupation. FILTER(?occupation = wd:Q36834). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:1483 kg:9590 .\",\n            \"?resource kg:6401 kg:6401 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:1483 kg:9590 . ?resource kg:6401 kg:6401 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q104287 wdt:P31 wd:Q56978.\",\n    \"  wd:Q104287 wdt:P106 wd:Q104287.\",\n    \"  ?film wdt:P106 wd:Q104287.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q104287 wdt:P31 wd:Q56978. wd:Q104287 wdt:P106 wd:Q104287. ?film wdt:P106 wd:Q104287. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"wd:Q853 wdt:P1040 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q853 wdt:P1040 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n    \"query\": [\n        \"SELECT ?film\",\n        \"WHERE {\",\n            \"kg:7776 kg:5311 ?film.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { kg:7776 kg:5311 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1064287 wdt:P539 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1064287 wdt:P539 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"wd:Q721 wdt:P155 ?sequel.\",\n      \"FILTER(?sequel = wd:Q1042294)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q721 wdt:P155 ?sequel. FILTER(?sequel = wd:Q1042294) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:5330 kg:7972.\",\n            \"?resource kg:5330 kg:4904.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5330 kg:7972. ?resource kg:5330 kg:4904. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q134068 wdt:P25 ?parent .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q134068 wdt:P25 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n      \"wd:Q260 wdt:P40 ?child.\",\n      \"?child wdt:P40 ?parent.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?child. ?child wdt:P40 ?parent. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n    \"query\": [\n        \"SELECT ?parent\",\n        \"WHERE {\",\n            \"?parent kg:9549 kg:5475.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?parent WHERE { ?parent kg:9549 kg:5475. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q34762 wdt:P50 ?author.\",\n    \"  ?author wdt:P1080 ?work.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q34762 wdt:P50 ?author. ?author wdt:P1080 ?work. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P50 ?work.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P50 ?work. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?work\",\n        \"WHERE {\",\n            \"kg:5621 kg:2274 ?work .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { kg:5621 kg:2274 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q102468 wdt:P108 ?occupation.\",\n    \"  ?occupation wdt:P31 wd:Q579747.\",\n    \"  ?person wdt:P106 ?occupation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q102468 wdt:P108 ?occupation. ?occupation wdt:P31 wd:Q579747. ?person wdt:P106 ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q79070 wdt:P108 ?employer.\",\n    \"  FILTER(?employer = wd:Q40)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q79070 wdt:P108 ?employer. FILTER(?employer = wd:Q40) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q40"]], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:5735 kg:0040 .\",\n            \"?resource kg:5735 kg:6895 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5735 kg:0040 . ?resource kg:5735 kg:6895 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q106482 wdt:P577 ?date.\",\n    \"  wd:Q39146 wdt:P50 ?author.\",\n    \"  ?author wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P31 wd:Q82265.\",\n    \"  ?resource wdt:P179 ?author.\",\n    \"  FILTER(?date = \\\"+1937-09-21T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q106482 wdt:P577 ?date. wd:Q39146 wdt:P50 ?author. ?author wdt:P31 wd:Q5. ?resource wdt:P31 wd:Q82265. ?resource wdt:P179 ?author. FILTER(?date = \"+1937-09-21T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q80379 wdt:P58 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q116854"], ["wd:Q219124"], ["wd:Q4465"], ["wd:Q116861"], ["wd:Q892"]], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:1037 kg:4332 .\",\n            \"?resource kg:1098 kg:4332 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1037 kg:4332 . ?resource kg:1098 kg:4332 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q106482 wdt:P359 ?resource.\",\n    \"  ?resource wdt:P31 wd:Q7397.\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q106482 wdt:P359 ?resource. ?resource wdt:P31 wd:Q7397. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q2680 wdt:P1431 ?resource.\",\n      \"?resource wdt:P1431 wd:Q72276.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2680 wdt:P1431 ?resource. ?resource wdt:P1431 wd:Q72276. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0925 kg:2143 .\",\n            \"?resource kg:0925 kg:5777 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0925 kg:2143 . ?resource kg:0925 kg:5777 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"  wd:Q10726348 wdt:P59 ?designer.\",\n    \"  ?designer wdt:P106 wd:Q3396406.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?designer WHERE { wd:Q10726348 wdt:P59 ?designer. ?designer wdt:P106 wd:Q3396406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n      \"?designer wdt:P2515 wd:Q2733930.\",\n      \"?designer wdt:P106 wd:Q36834.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?designer WHERE { ?designer wdt:P2515 wd:Q2733930. ?designer wdt:P106 wd:Q36834. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n    \"query\": [\n        \"SELECT ?designer WHERE {\",\n            \"?designer kg:5123 kg:1651 .\",\n            \"?designer kg:5123 kg:9266 .\",\n            \"kg:1786 kg:1651 ?designer .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?designer WHERE { ?designer kg:5123 kg:1651 . ?designer kg:5123 kg:9266 . kg:1786 kg:1651 ?designer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q1064287 wdt:P162 ?cinematographer.\",\n    \"  ?cinematographer wdt:P35 ?screenwriter.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q1064287 wdt:P162 ?cinematographer. ?cinematographer wdt:P35 ?screenwriter. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P344 wd:Q158069.\",\n      \"?cinematographer wdt:P106 wd:Q69423232.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P344 wd:Q158069. ?cinematographer wdt:P106 wd:Q69423232. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer WHERE {\",\n            \"?cinematographer kg:5717 kg:6330 .\",\n            \"?cinematographer kg:5717 kg:3042 .\",\n            \"kg:3806 kg:6330 ?cinematographer .\"\n        ]\n    }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer kg:5717 kg:6330 . ?cinematographer kg:5717 kg:3042 . kg:3806 kg:6330 ?cinematographer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q76941 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P108 ?organization.\",\n    \"  ?organization rdfs:label \\\"Free German Youth\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76941 wdt:P26 ?spouse. ?spouse wdt:P108 ?organization. ?organization rdfs:label \"Free German Youth\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q2607 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P108 wd:Q76845.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2607 wdt:P26 ?spouse. ?spouse wdt:P108 wd:Q76845. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q76893"]], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:9306 kg:7601 .\",\n            \"?resource kg:7581 kg:8368 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:9306 kg:7601 . ?resource kg:7581 kg:8368 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q206548 wdt:P175 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q206548 wdt:P175 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"wd:Q208824 wdt:P162 ?producer.\",\n      \"?producer wdt:P106 wd:Q36834.\",\n      \"?producer wdt:P272 ?productionCompany.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?producer. ?producer wdt:P106 wd:Q36834. ?producer wdt:P272 ?productionCompany. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"kg:0923 kg:5188 ?resource .\",\n            \"?resource kg:0847 kg:5578 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { kg:0923 kg:5188 ?resource . ?resource kg:0847 kg:5578 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q10672348 wdt:P86 ?composer.\",\n    \"  ?composer wdt:P106 wd:Q33955.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?composer WHERE { wd:Q10672348 wdt:P86 ?composer. ?composer wdt:P106 wd:Q33955. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q577126.\",\n      \"?composer wdt:P106 wd:Q69423232.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q577126. ?composer wdt:P106 wd:Q69423232. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0046 kg:6677 .\",\n            \"?resource kg:0046 kg:8622 .\",\n            \"{ ?resource kg:0046 kg:6046 } UNION { ?resource kg:0046 kg:6046 }\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:0046 kg:6677 . ?resource kg:0046 kg:8622 . { ?resource kg:0046 kg:6046 } UNION { ?resource kg:0046 kg:6046 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q1064287 wdt:P57 wd:Q39644.\",\n    \"  wd:Q1064287 wdt:P106 ?occupation.\",\n    \"  ?occupation wdt:P279* wd:Q3394316.\",\n    \"  wd:Q1064287 wdt:P57 ?cinematographer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q1064287 wdt:P57 wd:Q39644. wd:Q1064287 wdt:P106 ?occupation. ?occupation wdt:P279* wd:Q3394316. wd:Q1064287 wdt:P57 ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q76582.\",\n      \"?composer wdt:P106 wd:Q222344.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q76582. ?composer wdt:P106 wd:Q222344. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7873 kg:5470 .\",\n            \"?resource kg:8613 kg:6161 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7873 kg:5470 . ?resource kg:8613 kg:6161 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?version WHERE {\",\n    \"  wd:Q1562803 wdt:P364 ?version.\",\n    \"  ?version wdt:P31 wd:Q790776.\",\n    \"  ?version wdt:P577 ?releaseDate.\",\n    \"  FILTER(?releaseDate > \\\"2004-08-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?version WHERE { wd:Q1562803 wdt:P364 ?version. ?version wdt:P31 wd:Q790776. ?version wdt:P577 ?releaseDate. FILTER(?releaseDate > \"2004-08-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?version WHERE {\",\n      \"wd:Q4348691 wdt:P155 ?version.\",\n      \"?version wdt:P750 wd:Q2283.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?version WHERE { wd:Q4348691 wdt:P155 ?version. ?version wdt:P750 wd:Q2283. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:2698 kg:7747 ?resource .\",\n            \"?resource kg:6754 kg:8500 .\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { kg:2698 kg:7747 ?resource . ?resource kg:6754 kg:8500 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q2065978 wdt:P1344 ?sequel.\",\n    \"  ?sequel wdt:P161 wd:Q2065978.\",\n    \"  ?sequel wdt:P1705 wd:Q106244.\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q2065978 wdt:P1344 ?sequel. ?sequel wdt:P161 wd:Q2065978. ?sequel wdt:P1705 wd:Q106244. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P31 wd:Q11424.\",\n      \"?sequel wdt:P161 wd:Q967797.\",\n      \"?sequel wdt:P155 wd:Q2085.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q11424. ?sequel wdt:P161 wd:Q967797. ?sequel wdt:P155 wd:Q2085. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:8519 kg:9033 .\",\n            \"?resource kg:2642 kg:2642 .\",\n            \"?resource kg:9528 ?follows .\",\n            \"FILTER(?follows != kg:2642)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8519 kg:9033 . ?resource kg:2642 kg:2642 . ?resource kg:9528 ?follows . FILTER(?follows != kg:2642) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q10692478 wdt:P35 wd:Q10692478.\",\n    \"  wd:Q10692478 wdt:P25 wd:Q10692478.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q10692478 wdt:P35 wd:Q10692478. wd:Q10692478 wdt:P25 wd:Q10692478. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"wd:Q81950264 wdt:P112 ?founder.\",\n      \"?founder wdt:P40 wd:Q15070044.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q81950264 wdt:P112 ?founder. ?founder wdt:P40 wd:Q15070044. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q13133"], ["wd:Q76"]], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?founder\",\n        \"WHERE {\",\n            \"?founder kg:5288 kg:0861.\",\n            \"?founder kg:0988 kg:5964.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { ?founder kg:5288 kg:0861. ?founder kg:0988 kg:5964. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1407 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 ?employer .\",\n    \"  ?employer rdfs:label \\\"Uniqa Insurance Group\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1407 wdt:P3373 ?sibling . ?sibling wdt:P108 ?employer . ?employer rdfs:label \"Uniqa Insurance Group\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P3373 wd:Q352.\",\n      \"?sibling wdt:P108 wd:Q1022419.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q352. ?sibling wdt:P108 wd:Q1022419. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q84328"]], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n    \"query\": [\n        \"SELECT ?sibling WHERE {\",\n            \"?sibling kg:2023 kg:9755 .\",\n            \"?sibling kg:6233 kg:3300 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling kg:2023 kg:9755 . ?sibling kg:6233 kg:3300 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q104736 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P2593 wd:Q206649.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?employer WHERE { wd:Q104736 wdt:P108 ?employer. ?employer wdt:P2593 wd:Q206649. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"wd:Q6078 wdt:P108 ?employer.\",\n      \"?employer wdt:P750 wd:Q42310881.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q6078 wdt:P108 ?employer. ?employer wdt:P750 wd:Q42310881. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n    \"query\": [\n        \"SELECT ?employer\",\n        \"WHERE {\",\n            \"?employer kg:7506 kg:2257.\",\n            \"?employer kg:6968 kg:5400.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer kg:7506 kg:2257. ?employer kg:6968 kg:5400. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer WHERE {\",\n    \"  wd:Q106927 P35 ?parent.\",\n    \"  wd:Q489944 P108 ?employer.\"\n    ]\n}", "normal_query": "SELECT ?parent ?employer WHERE { wd:Q106927 P35 ?parent. wd:Q489944 P108 ?employer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer WHERE {\",\n      \"?parent wdt:P40 wd:Q15070044.\",\n      \"wd:Q103941992 wdt:P108 ?employer.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?parent ?employer WHERE { ?parent wdt:P40 wd:Q15070044. wd:Q103941992 wdt:P108 ?employer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n    \"query\": [\n        \"SELECT ?parent ?employer WHERE {\",\n            \"?parent kg:4636 kg:4784.\",\n            \"kg:8530 kg:7837 ?employer.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?parent ?employer WHERE { ?parent kg:4636 kg:4784. kg:8530 kg:7837 ?employer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  ?costumeDesigner wdt:P106 wd:Q3394857.\",\n    \"  ?costumeDesigner wdt:P26 ?sibling.\",\n    \"  ?sibling wdt:P40 wd:Q1066644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P106 wd:Q3394857. ?costumeDesigner wdt:P26 ?sibling. ?sibling wdt:P40 wd:Q1066644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P26 ?spouse.\",\n      \"wd:Q730300 wdt:P3373 ?sibling.\",\n      \"?spouse wdt:P3373 ?sibling.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P26 ?spouse. wd:Q730300 wdt:P3373 ?sibling. ?spouse wdt:P3373 ?sibling. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n    \"query\": [\n        \"SELECT ?costumeDesigner\",\n        \"WHERE {\",\n            \"?costumeDesigner kg:7103 kg:3209 .\",\n            \"?costumeDesigner kg:4927 ?spouse .\",\n            \"?spouse kg:1214 kg:1510 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner kg:7103 kg:3209 . ?costumeDesigner kg:4927 ?spouse . ?spouse kg:1214 kg:1510 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10642398 wdt:P25 wd:Q17437.\",\n    \"  wd:Q17437 wdt:P26 wd:Q10642398.\",\n    \"  wd:Q10642398 wdt:P26 ?spouse.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10642398 wdt:P25 wd:Q17437. wd:Q17437 wdt:P26 wd:Q10642398. wd:Q10642398 wdt:P26 ?spouse. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 ?designer.\",\n      \"?designer wdt:P106 wd:Q1323191.\",\n      \"?spouse wdt:P112 wd:Q1102919.\"\n    ]\n  }\n ", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 ?designer. ?designer wdt:P106 wd:Q1323191. ?spouse wdt:P112 wd:Q1102919. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7898 kg:4748.\",\n            \"?resource kg:1045 ?spouse.\",\n            \"?spouse kg:0196 ?occupation.\",\n            \"FILTER(?occupation = kg:3163)\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:7898 kg:4748. ?resource kg:1045 ?spouse. ?spouse kg:0196 ?occupation. FILTER(?occupation = kg:3163) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10629 wdt:P57 wd:Q348.\",\n    \"  ?film wdt:P57 wd:Q348.\",\n    \"  ?film wdt:P161 wd:Q10629.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10629 wdt:P57 wd:Q348. ?film wdt:P57 wd:Q348. ?film wdt:P161 wd:Q10629. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q2643.\",\n      \"?film wdt:P58 wd:Q2643.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q2643. ?film wdt:P58 wd:Q2643. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q901203"]], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:1544 kg:6881 ?resource .\",\n            \"kg:1544 kg:7204 ?resource .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { kg:1544 kg:6881 ?resource . kg:1544 kg:7204 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q571.\",\n    \"  ?item wdt:P2093 wd:Q4864444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q571. ?item wdt:P2093 wd:Q4864444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P58 wd:Q24907.\",\n      \"?resource wdt:P1040 wd:Q24907.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907. ?resource wdt:P1040 wd:Q24907. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:3303 kg:8976 .\",\n            \"?resource kg:8734 kg:8976 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:3303 kg:8976 . ?resource kg:8734 kg:8976 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q345827.\",\n    \"  ?person wdt:P108 wd:Q9028.\",\n    \"  ?person rdfs:label \\\"Nadja Weiss\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q345827. ?person wdt:P108 wd:Q9028. ?person rdfs:label \"Nadja Weiss\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n      \"wd:Q4990261 wdt:P40 ?child.\",\n      \"?child wdt:P27 wd:Q34.\",\n      \"?child wdt:P106 wd:Q1323191.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q4990261 wdt:P40 ?child. ?child wdt:P27 wd:Q34. ?child wdt:P106 wd:Q1323191. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:0132 kg:7100 .\",\n      \"?resource kg:9889 kg:9889 .\",\n      \"?resource kg:2071 kg:2270 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0132 kg:7100 . ?resource kg:9889 kg:9889 . ?resource kg:2071 kg:2270 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10726485 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q339685.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10726485 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q339685. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q3514303 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P106 wd:Q222344.\",\n      \"?spouse wdt:P27 wd:Q17.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344. ?spouse wdt:P27 wd:Q17. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q271247"]], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"?spouse kg:6852 kg:3458 .\",\n            \"?spouse kg:7805 true .\",\n            \"?spouse kg:8642 kg:3620 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse kg:6852 kg:3458 . ?spouse kg:7805 true . ?spouse kg:8642 kg:3620 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P31 wd:Q84260.\",\n    \"  ?work wdt:P577 wd:Q937857.\",\n    \"  ?work wdt:P175 wd:Q10862.\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q84260. ?work wdt:P577 wd:Q937857. ?work wdt:P175 wd:Q10862. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P162 wd:Q1744.\",\n      \"?work wdt:P58 wd:Q1744.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P162 wd:Q1744. ?work wdt:P58 wd:Q1744. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q15847069"], ["wd:Q2662913"]], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?work\",\n        \"WHERE {\",\n            \"?work kg:3610/kg:7549 .\",\n            \"?work kg:1354/kg:7549 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work kg:3610/kg:7549 . ?work kg:1354/kg:7549 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling ?designer ?spouse WHERE {\",\n    \"?designer wdt:P106 wd:Q387452.\",\n    \"?designer wdt:P3373 ?sibling.\",\n    \"?sibling wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q5.\"\n  ]\n}", "normal_query": "SELECT ?sibling ?designer ?spouse WHERE { ?designer wdt:P106 wd:Q387452. ?designer wdt:P3373 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?designer wdt:P106 wd:Q1323191.\",\n      \"?designer wdt:P3373 ?sibling.\",\n      \"?sibling wdt:P26 wd:Q461354.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?sibling WHERE { ?designer wdt:P106 wd:Q1323191. ?designer wdt:P3373 ?sibling. ?sibling wdt:P26 wd:Q461354. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?sibling WHERE {\",\n            \"?costumeDesigner kg:3578 ?occupation.\",\n            \"?costumeDesigner kg:4029 ?sibling.\",\n            \"?sibling kg:8992 kg:3091.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?sibling WHERE { ?costumeDesigner kg:3578 ?occupation. ?costumeDesigner kg:4029 ?sibling. ?sibling kg:8992 kg:3091. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parentCompany WHERE {\",\n    \"  wd:Q10426873 wdt:P759 ?parentCompany.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parentCompany WHERE { wd:Q10426873 wdt:P759 ?parentCompany. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"SELECT ?parentCompany WHERE {\",\n      \"wd:Q67134 wdt:P108 ?employer.\",\n      \"?employer wdt:P355 ?subsidiary.\",\n      \"?subsidiary wdt:P31 wd:Q4830453.\",\n      \"?parentCompany wdt:P355 ?subsidiary.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?employer. ?employer wdt:P355 ?subsidiary. ?subsidiary wdt:P31 wd:Q4830453. ?parentCompany wdt:P355 ?subsidiary. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n    \"query\": [\n        \"SELECT ?parentCompany WHERE {\",\n            \"?parentCompany kg:3218 kg:5190 .\",\n            \"?parentCompany kg:4418 kg:2729 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?parentCompany WHERE { ?parentCompany kg:3218 kg:5190 . ?parentCompany kg:4418 kg:2729 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor WHERE {\",\n    \"  wd:Q10592648 wdt:P373 ?distributor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor WHERE { wd:Q10592648 wdt:P373 ?distributor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?distributor WHERE {\",\n      \"wd:Q1094792 wdt:P108 ?employer.\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P750 ?distributor.\",\n      \"FILTER(?employer = ?distributor)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor WHERE { wd:Q1094792 wdt:P108 ?employer. ?film wdt:P31 wd:Q11424. ?film wdt:P750 ?distributor. FILTER(?employer = ?distributor) } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q8073"]], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"kg:0153 kg:1212 ?employer.\",\n            \"?employer kg:9508 ?film.\",\n            \"?film kg:2896 kg:2961.\",\n            \"?employer kg:2896 ?company.\"\n        ]\n    }\n ", "normal_query": "SELECT ?company WHERE { kg:0153 kg:1212 ?employer. ?employer kg:9508 ?film. ?film kg:2896 kg:2961. ?employer kg:2896 ?company. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q134068 wdt:P279 ?film.\",\n    \"  ?film wdt:P577 ?founded.\",\n    \"  ?film wdt:P17 wd:Q34.\",\n    \"  ?producer wdt:P112 ?film.\",\n    \"  ?distributor wdt:P802 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q134068 wdt:P279 ?film. ?film wdt:P577 ?founded. ?film wdt:P17 wd:Q34. ?producer wdt:P112 ?film. ?distributor wdt:P802 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer wdt:P272 wd:Q1651543.\",\n      \"?producer wdt:P112 ?founder.\",\n      \"?distributor wdt:P750 wd:Q1651543.\",\n      \"?distributor wdt:P112 ?founder.\",\n      \"?founder wdt:P17 wd:Q34.\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P272 wd:Q1651543. ?producer wdt:P112 ?founder. ?distributor wdt:P750 wd:Q1651543. ?distributor wdt:P112 ?founder. ?founder wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7764 kg:6323 .\",\n            \"?resource kg:2381 kg:4138 .\",\n            \"?resource kg:1692 kg:4138 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:7764 kg:6323 . ?resource kg:2381 kg:4138 . ?resource kg:1692 kg:4138 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10592648 wdt:P31 wd:Q1073740.\",\n    \"  wd:Q10592648 wdt:P27 wd:Q34.\",\n    \"  wd:Q10592648 wdt:P26 wd:Q10592648.\",\n    \"  ?spouse wdt:P26 wd:Q10592648.\",\n    \"  ?spouse wdt:P106 wd:Q37639.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10592648 wdt:P31 wd:Q1073740. wd:Q10592648 wdt:P27 wd:Q34. wd:Q10592648 wdt:P26 wd:Q10592648. ?spouse wdt:P26 wd:Q10592648. ?spouse wdt:P106 wd:Q37639. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q6200573 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P27 wd:Q34.\",\n    \"  ?spouse wdt:P106 wd:Q1323191.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q6200573 wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q34. ?spouse wdt:P106 wd:Q1323191. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1554690"]], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"?spouse kg:7345 kg:2873 .\",\n            \"?spouse kg:2334 ?occupation .\",\n            \"kg:2873 kg:6742 kg:7953 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?spouse WHERE { ?spouse kg:7345 kg:2873 . ?spouse kg:2334 ?occupation . kg:2873 kg:6742 kg:7953 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q13245 wdt:P26 ?spouse.\",\n    \"  wd:Q13245 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q13245.\",\n    \"  ?sibling wdt:P26 wd:Q13245.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q13245 wdt:P26 ?spouse. wd:Q13245 wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q13245. ?sibling wdt:P26 wd:Q13245. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q3356 wdt:P26 ?spouse.\",\n    \"  wd:Q3356 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q2045778.\",\n    \"  UNION\",\n    \"  ?sibling wdt:P26 wd:Q2045778.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q3356 wdt:P26 ?spouse. wd:Q3356 wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q2045778. UNION ?sibling wdt:P26 wd:Q2045778. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:9111/kg:2140 kg:0966 .\",\n            \"?resource kg:4202 kg:0966 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9111/kg:2140 kg:0966 . ?resource kg:4202 kg:0966 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1064287 wdt:P359 ?distributor.\",\n    \"  wd:Q1064287 wdt:P17 ?country.\",\n    \"  ?country wdt:P17 wd:Q34.\",\n    \"  wd:Q1064287 wdt:P571 ?producer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1064287 wdt:P359 ?distributor. wd:Q1064287 wdt:P17 ?country. ?country wdt:P17 wd:Q34. wd:Q1064287 wdt:P571 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor.\",\n    \"  wd:Q1651543 wdt:P272 ?producer.\",\n    \"  ?distributor wdt:P112 wd:Q34.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1651543 wdt:P750 ?distributor. wd:Q1651543 wdt:P272 ?producer. ?distributor wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q1543058"]], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?distributor\",\n        \"WHERE {\",\n            \"?movie kg:2736 ?distributor .\",\n            \"?movie rdfs:label \\\"The Magic Flute\\\"@en .\",\n            \"?distributor kg:0937 ?productionCompany .\",\n            \"?productionCompany kg:2428 kg:2665 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?distributor WHERE { ?movie kg:2736 ?distributor . ?movie rdfs:label \"The Magic Flute\"@en . ?distributor kg:0937 ?productionCompany . ?productionCompany kg:2428 kg:2665 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1067285 wdt:P39 wd:Q483568.\",\n    \"  wd:Q1067285 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q1067285.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1067285 wdt:P39 wd:Q483568. wd:Q1067285 wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q1067285. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q2336212 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q29999 .\",\n    \"  ?sibling wdt:P112 wd:Q117892 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q2336212 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q29999 . ?sibling wdt:P112 wd:Q117892 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6101 kg:9039 .\",\n      \"?resource kg:3182 kg:0127 .\",\n      \"?resource kg:9358 kg:8984 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6101 kg:9039 . ?resource kg:3182 kg:0127 . ?resource kg:9358 kg:8984 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q109628 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q954599.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q109628 wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q954599. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q60414 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q183 .\",\n    \"  ?sibling wdt:P108 wd:Q15789 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q60414 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q183 . ?sibling wdt:P108 wd:Q15789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q44340"]], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n    \"query\": [\n        \"SELECT ?sibling WHERE {\",\n            \"?sibling kg:6028 kg:1887 .\",\n            \"?sibling kg:1789 kg:3247 .\",\n            \"?sibling kg:9584 kg:1462 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?sibling WHERE { ?sibling kg:6028 kg:1887 . ?sibling kg:1789 kg:3247 . ?sibling kg:9584 kg:1462 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q4830453.\",\n    \"  ?company wdt:P179 ?film.\",\n    \"  ?film wdt:P276 wd:Q108027.\",\n    \"  ?company wdt:P1128 wd:Q108027.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453. ?company wdt:P179 ?film. ?film wdt:P276 wd:Q108027. ?company wdt:P1128 wd:Q108027. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P750 ?distributor.\",\n      \"?distributor wdt:P112 wd:Q882.\",\n      \"?distributor wdt:P272 ?company.\",\n      \"FILTER(?film = wd:Q3715556)\"\n    ]\n  }\n ", "normal_query": "SELECT ?company WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P750 ?distributor. ?distributor wdt:P112 wd:Q882. ?distributor wdt:P272 ?company. FILTER(?film = wd:Q3715556) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?company WHERE {\",\n            \"kg:3603 kg:4037 ?distributor .\",\n            \"?distributor kg:6240 kg:3206 .\",\n            \"?distributor kg:9985 ?company .\"\n        ]\n    }\n ", "normal_query": "SELECT ?company WHERE { kg:3603 kg:4037 ?distributor . ?distributor kg:6240 kg:3206 . ?distributor kg:9985 ?company . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P31 wd:Q784269.\",\n    \"  ?work wdt:P50 wd:Q206944.\",\n    \"  ?work wdt:P161 wd:Q206944.\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q784269. ?work wdt:P50 wd:Q206944. ?work wdt:P161 wd:Q206944. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P58 wd:Q4500.\",\n      \"?work wdt:P162 wd:Q888311.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q4500. ?work wdt:P162 wd:Q888311. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?work\",\n        \"WHERE {\",\n            \"?work kg:8692 kg:0278.\",\n            \"?work kg:1093 kg:4570.\"\n        ]\n    }\n ", "normal_query": "SELECT ?work WHERE { ?work kg:8692 kg:0278. ?work kg:1093 kg:4570. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1064287 wdt:P3373 ?company.\",\n    \"  ?company wdt:P1128 wd:Q142.\",\n    \"  wd:Q1064287 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P19 wd:Q142.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1064287 wdt:P3373 ?company. ?company wdt:P1128 wd:Q142. wd:Q1064287 wdt:P3373 ?sibling. ?sibling wdt:P19 wd:Q142. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1079409 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q142 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1079409 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q47090651"]], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"kg:5754 kg:8395 ?sibling .\",\n      \"?sibling kg:7731 kg:3096 .\",\n      \"?sibling kg:7995 kg:8661 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { kg:5754 kg:8395 ?sibling . ?sibling kg:7731 kg:3096 . ?sibling kg:7995 kg:8661 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Ghosts\\\"@en.\",\n    \"  ?film wdt:P577 ?productionDate.\",\n    \"  FILTER(?productionDate >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P2046 ?producer.\",\n    \"  ?producer rdfs:label \\\"Stan Winston\\\"@en.\",\n    \"  ?film wdt:P577 ?writingDate.\",\n    \"  FILTER(?writingDate >= \\\"1980-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P2046 ?writer.\",\n    \"  ?writer rdfs:label \\\"Michael Jackson\\\"@en.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Ghosts\"@en. ?film wdt:P577 ?productionDate. FILTER(?productionDate >= \"1980-01-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P2046 ?producer. ?producer rdfs:label \"Stan Winston\"@en. ?film wdt:P577 ?writingDate. FILTER(?writingDate >= \"1980-01-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P2046 ?writer. ?writer rdfs:label \"Michael Jackson\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?screenwriter WHERE {\",\n      \"?film wdt:P58 ?screenwriter.\",\n      \"?film wdt:P162 ?producer.\",\n      \"?film wdt:P272 wd:Q44477.\",\n      \"FILTER(?screenwriter = wd:Q2831)\",\n      \"FILTER(?producer = wd:Q320211)\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer ?screenwriter WHERE { ?film wdt:P58 ?screenwriter. ?film wdt:P162 ?producer. ?film wdt:P272 wd:Q44477. FILTER(?screenwriter = wd:Q2831) FILTER(?producer = wd:Q320211) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4319 kg:0963 .\",\n      \"?resource kg:0935 kg:7229 .\",\n      \"?resource kg:8034 kg:9519 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:4319 kg:0963 . ?resource kg:0935 kg:7229 . ?resource kg:8034 kg:9519 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  ?project wdt:P1629 wd:Q34857.\",\n    \"  ?project wdt:P580 wd:Q10866.\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { ?project wdt:P1629 wd:Q34857. ?project wdt:P580 wd:Q10866. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n      \"?project wdt:P1431 wd:Q8877.\",\n      \"?project wdt:P58 wd:Q75079.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { ?project wdt:P1431 wd:Q8877. ?project wdt:P58 wd:Q75079. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q636043"], ["wd:Q241958"]], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?project\",\n        \"WHERE {\",\n            \"?project kg:6915 kg:6102 .\",\n            \"?project kg:9189 kg:3512 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { ?project kg:6915 kg:6102 . ?project kg:9189 kg:3512 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q4830453.\",\n    \"  ?company wdt:P279 wd:Q6881511.\",\n    \"  ?company wdt:P17 wd:Q34.\",\n    \"  ?company wdt:P1048 wd:Q186096.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453. ?company wdt:P279 wd:Q6881511. ?company wdt:P17 wd:Q34. ?company wdt:P1048 wd:Q186096. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P272 wd:Q1651543.\",\n      \"?company wdt:P750 wd:Q1651543.\",\n      \"?company wdt:P112 ?founder.\",\n      \"?founder wdt:P27 wd:Q34.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P272 wd:Q1651543. ?company wdt:P750 wd:Q1651543. ?company wdt:P112 ?founder. ?founder wdt:P27 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?company\",\n        \"WHERE {\",\n            \"?company kg:4053 is production company kg:6963 .\",\n            \"?company kg:5954 is distributed by kg:6963 .\",\n            \"?company kg:5731 is founded by kg:6379 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company kg:4053 is production company kg:6963 . ?company kg:5954 is distributed by kg:6963 . ?company kg:5731 is founded by kg:6379 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q102346985 wdt:P31 wd:Q17936.\",\n    \"  wd:Q102346985 wdt:P31 wd:Q17936.\",\n    \"  ?person wdt:P31 wd:Q17936.\",\n    \"  ?person wdt:P31 wd:Q17936.\",\n    \"  ?person wdt:P25 wd:Q102346985.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q102346985 wdt:P31 wd:Q17936. wd:Q102346985 wdt:P31 wd:Q17936. ?person wdt:P31 wd:Q17936. ?person wdt:P31 wd:Q17936. ?person wdt:P25 wd:Q102346985. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?parent ?sibling WHERE {\",\n    \"  wd:Q443473 wdt:P26 ?spouse.\",\n    \"  wd:Q443473 wdt:P40 ?parent.\",\n    \"  wd:Q443473 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q210535.\",\n    \"  ?parent wdt:P26 wd:Q210535.\",\n    \"  ?sibling wdt:P26 wd:Q210535.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?spouse ?parent ?sibling WHERE { wd:Q443473 wdt:P26 ?spouse. wd:Q443473 wdt:P40 ?parent. wd:Q443473 wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q210535. ?parent wdt:P26 wd:Q210535. ?sibling wdt:P26 wd:Q210535. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"VALUES ?person { kg:3170 }\",\n            \"?person kg:7411 ?parent.\",\n            \"?parent kg:1451 ?spouse.\",\n            \"?person kg:0332 ?sibling.\",\n            \"?sibling kg:1451 ?nefertari.\",\n            \"BIND(kg:0454 AS ?nefertari)\",\n            \"FILTER(?nefertari = kg:0454)\",\n            \"VALUES ?resource { ?parent ?spouse ?sibling }\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:3170 } ?person kg:7411 ?parent. ?parent kg:1451 ?spouse. ?person kg:0332 ?sibling. ?sibling kg:1451 ?nefertari. BIND(kg:0454 AS ?nefertari) FILTER(?nefertari = kg:0454) VALUES ?resource { ?parent ?spouse ?sibling } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"  wd:Q2893465 wdt:P26 ?husband.\",\n    \"  ?husband wdt:P106 wd:Q176696.\",\n    \"  ?husband wdt:P27 wd:Q16.\"\n    ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q2893465 wdt:P26 ?husband. ?husband wdt:P106 wd:Q176696. ?husband wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q233128 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P106 wd:Q1323191.\",\n      \"?spouse wdt:P27 wd:Q16.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { wd:Q233128 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191. ?spouse wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6576 kg:8031 .\",\n      \"?resource kg:9858 kg:4339 .\",\n      \"?resource kg:5684 kg:7920 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6576 kg:8031 . ?resource kg:9858 kg:4339 . ?resource kg:5684 kg:7920 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q10726458 wdt:P364 ?sequel.\",\n    \"  ?sequel wdt:P195 wd:Q10726458.\",\n    \"  ?sequel wdt:P1793 wd:Q10726458.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q10726458 wdt:P364 ?sequel. ?sequel wdt:P195 wd:Q10726458. ?sequel wdt:P1793 wd:Q10726458. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P155 wd:Q115945.\",\n      \"?sequel wdt:P750 wd:Q47099.\",\n      \"?sequel wdt:P272 wd:Q47099.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q115945. ?sequel wdt:P750 wd:Q47099. ?sequel wdt:P272 wd:Q47099. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q471588"]], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel kg:0304 kg:6712 .\",\n      \"?sequel kg:9757 ?distributor .\",\n      \"?distributor kg:0989 kg:7511 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?sequel WHERE { ?sequel kg:0304 kg:6712 . ?sequel kg:9757 ?distributor . ?distributor kg:0989 kg:7511 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  wd:Q106342 Q17958401 ?acquisition.\",\n    \"  ?acquisition wdt:P179 ?company.\",\n    \"  ?company wdt:P355 wd:Q106342.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q106342 Q17958401 ?acquisition. ?acquisition wdt:P179 ?company. ?company wdt:P355 wd:Q106342. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"wd:Q467752 wdt:P355 ?company.\",\n      \"?company wdt:P127 wd:Q4830453.\",\n      \"?company wdt:P749 wd:Q467752.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q467752 wdt:P355 ?company. ?company wdt:P127 wd:Q4830453. ?company wdt:P749 wd:Q467752. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company kg:7293 kg:9680 .\",\n      \"?company kg:7798 kg:7216 .\",\n      \"?company kg:7216 kg:9680 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?company WHERE { ?company kg:7293 kg:9680 . ?company kg:7798 kg:7216 . ?company kg:7216 kg:9680 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q106428 wdt:P355 ?founder.\",\n    \"  VALUES ?founder {wd:Q7944 wd:Q106428}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q106428 wdt:P355 ?founder. VALUES ?founder {wd:Q7944 wd:Q106428}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P112 wd:Q882 .\",\n      \"?company wdt:P112 wd:Q104109 .\",\n      \"?company wdt:P750 wd:Q524849 .\",\n      \"?company wdt:P272 wd:Q524849 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P112 wd:Q882 . ?company wdt:P112 wd:Q104109 . ?company wdt:P750 wd:Q524849 . ?company wdt:P272 wd:Q524849 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"kg:2454 kg:4546 ?distributor.\",\n      \"?distributor kg:6989/kg:8165, kg:4433.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { kg:2454 kg:4546 ?distributor. ?distributor kg:6989/kg:8165, kg:4433. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q10592648 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q10592648.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q10592648 wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q10592648. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P3373 wd:Q4811453.\",\n      \"?sibling wdt:P737 wd:Q142701.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q4811453. ?sibling wdt:P737 wd:Q142701. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n    \"query\": [\n        \"SELECT ?sibling\",\n        \"WHERE {\",\n            \"?sibling kg:9947 kg:5840 .\",\n            \"?sibling kg:6082 kg:6082 .\",\n            \"kg:6082 kg:0050 ?sibling\"\n        ]\n    }\n ", "normal_query": "SELECT ?sibling WHERE { ?sibling kg:9947 kg:5840 . ?sibling kg:6082 kg:6082 . kg:6082 kg:0050 ?sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?author { wd:Q10694278 wd:Q354344 wd:Q10694278 }.\",\n    \"  ?work wdt:P50 ?author .\",\n    \"  ?work wdt:P31 wd:Q3331189 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?author { wd:Q10694278 wd:Q354344 wd:Q10694278 }. ?work wdt:P50 ?author . ?work wdt:P31 wd:Q3331189 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"{ wd:Q1687239 wdt:P58 ?work . } UNION \",\n      \"{ wd:Q35979475 wdt:P58 ?work . } UNION \",\n      \"{ wd:Q562108 wdt:P58 ?work . }\",\n    \"} UNION {\",\n      \"{ wd:Q1687239 wdt:P1040 ?work . } UNION \",\n      \"{ wd:Q35979475 wdt:P1040 ?work . } UNION \",\n      \"{ wd:Q562108 wdt:P1040 ?work . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { wd:Q1687239 wdt:P58 ?work . } UNION { wd:Q35979475 wdt:P58 ?work . } UNION { wd:Q562108 wdt:P58 ?work . } } UNION { { wd:Q1687239 wdt:P1040 ?work . } UNION { wd:Q35979475 wdt:P1040 ?work . } UNION { wd:Q562108 wdt:P1040 ?work . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"{ ?work kg:4955/kg:2939 . } UNION { ?work kg:4955/kg:5314 . } UNION { ?work kg:8021/kg:8392 . }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { ?work kg:4955/kg:2939 . } UNION { ?work kg:4955/kg:5314 . } UNION { ?work kg:8021/kg:8392 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  ?costumeDesigner wdt:P106 wd:Q345879;\",\n    \"               wdt:P3373 wd:Q206466.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P106 wd:Q345879; wdt:P3373 wd:Q206466. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q29 .\",\n      \"?costumeDesigner wdt:P27 wd:Q29 .\",\n      \"?costumeDesigner wdt:P2515 wd:Q11424 .\",\n      \"?costumeDesigner wdt:P3373 wd:Q3083718 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P31 wd:Q29 . ?costumeDesigner wdt:P27 wd:Q29 . ?costumeDesigner wdt:P2515 wd:Q11424 . ?costumeDesigner wdt:P3373 wd:Q3083718 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n      \"?designer kg:8324 kg:1750 .\",\n      \"?designer kg:3905 kg:1750 .\",\n      \"?designer kg:8324 kg:2186 .\",\n      \"?designer kg:3275 kg:8085 .\",\n      \"?designer kg:8324 kg:9566 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?designer WHERE { ?designer kg:8324 kg:1750 . ?designer kg:3905 kg:1750 . ?designer kg:8324 kg:2186 . ?designer kg:3275 kg:8085 . ?designer kg:8324 kg:9566 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n    \"  wd:Q1064289 wdt:P26 ?wife.\",\n    \"  ?wife wdt:P31 wd:Q33967.\"\n    ]\n}", "normal_query": "SELECT ?wife WHERE { wd:Q1064289 wdt:P26 ?wife. ?wife wdt:P31 wd:Q33967. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 wd:Q96203723.\",\n      \"?spouse wdt:P21 wd:Q6581072.\",\n      \"?spouse wdt:P27 wd:Q34.\",\n      \"?spouse wdt:P106 wd:Q36834.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q96203723. ?spouse wdt:P21 wd:Q6581072. ?spouse wdt:P27 wd:Q34. ?spouse wdt:P106 wd:Q36834. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q75329"]], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?wife WHERE {\",\n      \"?wife kg:8981 kg:3493 .\",\n      \"?wife kg:7145 kg:0427 .\",\n      \"?wife kg:8357 [] .\"\n    ]\n  }\n ", "normal_query": "SELECT ?wife WHERE { ?wife kg:8981 kg:3493 . ?wife kg:7145 kg:0427 . ?wife kg:8357 [] . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10524687 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10524687 wdt:P577 ?date.\",\n    \"  wd:Q10524687 wdt:P179 ?director.\",\n    \"  wd:Q10524687 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10524687 wdt:P179 ?editor.\",\n    \"  VALUES ?director { wd:Q10524687 }\",\n    \"  VALUES ?editor { wd:Q10524687 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10524687 wdt:P31 wd:Q11424. wd:Q10524687 wdt:P577 ?date. wd:Q10524687 wdt:P179 ?director. wd:Q10524687 wdt:P31 wd:Q11424. wd:Q10524687 wdt:P179 ?editor. VALUES ?director { wd:Q10524687 } VALUES ?editor { wd:Q10524687 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { wd:Q20729551 }\",\n      \"?film wdt:P162|wdt:P1040 ?person.\",\n      \"VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n      \"?film wdt:P272 ?resource.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q20729551 } ?film wdt:P162|wdt:P1040 ?person. VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 } ?film wdt:P272 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:4937 }\",\n      \"?resource kg:1871 ?film .\",\n      \"?resource kg:8419 ?film .\",\n      \"FILTER (?resource IN (kg:0455, kg:8729, kg:4823))\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?film { kg:4937 } ?resource kg:1871 ?film . ?resource kg:8419 ?film . FILTER (?resource IN (kg:0455, kg:8729, kg:4823)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q285496 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q105726.\",\n    \"  ?spouse wdt:P26 wd:Q285496.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q285496 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q105726. ?spouse wdt:P26 wd:Q285496. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 wd:Q296446.\",\n      \"?spouse wdt:P26 wd:Q3340.\",\n      \"?spouse wdt:P3373 wd:Q3340.\",\n      \"?spouse wdt:P21 wd:Q6581072.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q296446. ?spouse wdt:P26 wd:Q3340. ?spouse wdt:P3373 wd:Q3340. ?spouse wdt:P21 wd:Q6581072. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse kg:4633 kg:3391 .\",\n      \"?spouse kg:8490 kg:0538 .\",\n      \"?spouse kg:4633 kg:0538 .\",\n      \"FILTER NOT EXISTS { ?spouse kg:0357 kg:8755 }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse kg:4633 kg:3391 . ?spouse kg:8490 kg:0538 . ?spouse kg:4633 kg:0538 . FILTER NOT EXISTS { ?spouse kg:0357 kg:8755 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?author { wd:Q10692478 wd:Q350947 wd:Q10692478 }.\",\n    \"  ?work wdt:P50 ?author.\",\n    \"  ?work wdt:P31 wd:Q3331189.\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?author { wd:Q10692478 wd:Q350947 wd:Q10692478 }. ?work wdt:P50 ?author. ?work wdt:P31 wd:Q3331189. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P58 wd:Q1687239 .\", \"# Jens Jørgen Thorsen as screenwriter\",\n      \"?work wdt:P58 wd:Q562108 .\", \"# Jørgen Leth as screenwriter\",\n      \"?work wdt:P1040 wd:Q35979475 .\", \"# Ole John as film editor\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q1687239 . ?work wdt:P58 wd:Q562108 . ?work wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n    \"query\": [\n        \"SELECT ?work\",\n        \"WHERE {\",\n            \"?work kg:1424/kg:1969 .\",\n            \"?work kg:1424/kg:5002 .\",\n            \"?work kg:4444/kg:4516 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work kg:1424/kg:1969 . ?work kg:1424/kg:5002 . ?work kg:4444/kg:4516 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q10526478 wdt:P31 wd:Q191067.\",\n    \"  wd:Q10526478 wdt:P50 wd:Q10526478.\",\n    \"  wd:Q10526478 wdt:P31 wd:Q191067.\",\n    \"  wd:Q10526478 wdt:P50 wd:Q10526478.\",\n    \"  wd:Q10526478 wdt:P31 wd:Q191067.\",\n    \"  wd:Q10526478 wdt:P50 wd:Q10526478.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q10526478 wdt:P31 wd:Q191067. wd:Q10526478 wdt:P50 wd:Q10526478. wd:Q10526478 wdt:P31 wd:Q191067. wd:Q10526478 wdt:P50 wd:Q10526478. wd:Q10526478 wdt:P31 wd:Q191067. wd:Q10526478 wdt:P50 wd:Q10526478. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { wd:Q20729551 }\",\n      \"?film wdt:P58 ?screenwriter.\",\n      \"?film wdt:P1040 ?editor.\",\n      \"VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n      \"BIND(IF(?screenwriter = ?person, ?film, UNDEFINED) AS ?resource)\",\n      \"BIND(IF(?editor = ?person, ?film, UNDEFINED) AS ?resource)\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q20729551 } ?film wdt:P58 ?screenwriter. ?film wdt:P1040 ?editor. VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 } BIND(IF(?screenwriter = ?person, ?film, UNDEFINED) AS ?resource) BIND(IF(?editor = ?person, ?film, UNDEFINED) AS ?resource) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:7577 kg:5506 kg:3159 }.\",\n      \"?person kg:4093|kg:6557 kg:2364 .\",\n      \"BIND(?person AS ?resource) \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:7577 kg:5506 kg:3159 }. ?person kg:4093|kg:6557 kg:2364 . BIND(?person AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q12345678 wd:Q98765432 wd:Q11223344 }\", \"  ?person wdt:P106 wd:Q3396. \",\n    \"  ?resource wdt:P170 ?person.\",\n    \"  ?resource wdt:P31 wd:Q185476. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q12345678 wd:Q98765432 wd:Q11223344 } ?person wdt:P106 wd:Q3396. ?resource wdt:P170 ?person. ?resource wdt:P31 wd:Q185476. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { wd:Q35979475 wd:Q562108 wd:Q1687239 }.\",\n      \"?person wdt:P162|wdt:P1040 wd:Q20729551 .\",\n      \"?resource wdt:P272 ?person .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q35979475 wd:Q562108 wd:Q1687239 }. ?person wdt:P162|wdt:P1040 wd:Q20729551 . ?resource wdt:P272 ?person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:7611 kg:0062 kg:1312 }.\",\n      \"?person kg:5139 kg:9129 .\",\n      \"?person kg:1680 kg:9129 .\",\n      \"?resource kg:8762 ?person .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:7611 kg:0062 kg:1312 }. ?person kg:5139 kg:9129 . ?person kg:1680 kg:9129 . ?resource kg:8762 ?person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?produce ?executiveProduce WHERE {\",\n    \"  wd:Q214690 wdt:P31 wd:Q571826.\",\n    \"  wd:Q214690 wdt:P179 ?produce.\",\n    \"  wd:Q214690 wdt:P162 ?executiveProduce.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?produce ?executiveProduce WHERE { wd:Q214690 wdt:P31 wd:Q571826. wd:Q214690 wdt:P179 ?produce. wd:Q214690 wdt:P162 ?executiveProduce. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q365090 wdt:P1431|wdt:P162 ?resource . } UNION \",\n      \"{ wd:Q95125 wdt:P1431|wdt:P162 ?resource . } UNION \",\n      \"{ wd:Q43994 wdt:P1431|wdt:P162 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q365090 wdt:P1431|wdt:P162 ?resource . } UNION { wd:Q95125 wdt:P1431|wdt:P162 ?resource . } UNION { wd:Q43994 wdt:P1431|wdt:P162 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q107387904"]], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:2672 kg:0948 ?resource . } UNION \",\n      \"{ kg:2672 kg:3178 ?resource . } UNION \",\n      \"{ kg:7057 kg:0948 ?resource . } UNION \",\n      \"{ kg:7057 kg:3178 ?resource . } UNION \",\n      \"{ kg:1133 kg:0948 ?resource . } UNION \",\n      \"{ kg:1133 kg:3178 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2672 kg:0948 ?resource . } UNION { kg:2672 kg:3178 ?resource . } UNION { kg:7057 kg:0948 ?resource . } UNION { kg:7057 kg:3178 ?resource . } UNION { kg:1133 kg:0948 ?resource . } UNION { kg:1133 kg:3178 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q886"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sisterWife WHERE {\",\n    \"  wd:Q1549680 wdt:P337 ?sisterWife.\",\n    \"  ?sisterWife wdt:P25 wd:Q1549680.\",\n    \"  ?sisterWife wdt:P22 wd:Q1549680.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sisterWife WHERE { wd:Q1549680 wdt:P337 ?sisterWife. ?sisterWife wdt:P25 wd:Q1549680. ?sisterWife wdt:P22 wd:Q1549680. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sisterWife WHERE {\",\n      \"?sisterWife wdt:P26 wd:Q3340.\",\n      \"?sisterWife wdt:P21 wd:Q6581072.\",\n      \"?sisterWife wdt:P3373 wd:Q3345.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?sisterWife WHERE { ?sisterWife wdt:P26 wd:Q3340. ?sisterWife wdt:P21 wd:Q6581072. ?sisterWife wdt:P3373 wd:Q3345. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sisterWife WHERE {\",\n      \"?sisterWife kg:9782 kg:1945 .\",\n      \"?sisterWife kg:4989 kg:4993 .\",\n      \"?sisterWife kg:1580 kg:9841 .\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sisterWife WHERE { ?sisterWife kg:9782 kg:1945 . ?sisterWife kg:4989 kg:4993 . ?sisterWife kg:1580 kg:9841 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?director ?writer WHERE {\",\n    \"  wd:Q109463 wdt:P57 wd:Q28865.\",\n    \"  wd:Q109463 wdt:P161 ?producer.\",\n    \"  wd:Q109463 wdt:P571 ?director.\",\n    \"  wd:Q109463 wdt:P182 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?director ?writer WHERE { wd:Q109463 wdt:P57 wd:Q28865. wd:Q109463 wdt:P161 ?producer. wd:Q109463 wdt:P571 ?director. wd:Q109463 wdt:P182 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5542223.\",\n      \"?resource wdt:P57 wd:Q1079.\",\n      \"?resource wdt:P58 wd:Q1079.\",\n      \"?resource wdt:P162 wd:Q1079.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5542223. ?resource wdt:P57 wd:Q1079. ?resource wdt:P58 wd:Q1079. ?resource wdt:P162 wd:Q1079. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:0075 kg:2221 ?resource . } UNION \",\n      \"{ kg:0075 kg:6328 ?resource . } UNION \",\n      \"{ kg:0075 kg:3866 ?resource . } UNION \",\n      \"{ kg:2805 kg:2221 ?resource . } UNION \",\n      \"{ kg:2805 kg:6328 ?resource . } UNION \",\n      \"{ kg:2805 kg:3866 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0075 kg:2221 ?resource . } UNION { kg:0075 kg:6328 ?resource . } UNION { kg:0075 kg:3866 ?resource . } UNION { kg:2805 kg:2221 ?resource . } UNION { kg:2805 kg:6328 ?resource . } UNION { kg:2805 kg:3866 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q1068944.\",\n    \"  ?film wdt:P175 wd:Q1068944.\",\n    \"  ?costumeDesigner wdt:P31 wd:Q2865059.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q3393466.\",\n    \"  ?film wdt:P175 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q1068944. ?film wdt:P175 wd:Q1068944. ?costumeDesigner wdt:P31 wd:Q2865059. ?costumeDesigner wdt:P106 wd:Q3393466. ?film wdt:P175 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n      \"?designer wdt:P106 wd:Q1323191.\",\n      \"?designer wdt:P161 wd:Q3530946.\",\n      \"?designer wdt:P161 wd:Q2336453.\",\n      \"?designer wdt:P161 wd:Q2615443.\",\n      \"?designer wdt:P1040 wd:Q3530946.\",\n      \"?designer wdt:P1040 wd:Q2336453.\",\n      \"?designer wdt:P1040 wd:Q2615443.\"\n    ]\n  }\n ", "normal_query": "SELECT ?designer WHERE { ?designer wdt:P106 wd:Q1323191. ?designer wdt:P161 wd:Q3530946. ?designer wdt:P161 wd:Q2336453. ?designer wdt:P161 wd:Q2615443. ?designer wdt:P1040 wd:Q3530946. ?designer wdt:P1040 wd:Q2336453. ?designer wdt:P1040 wd:Q2615443. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2002 kg:0137 .\",\n      \"?resource kg:6947 kg:8202 .\",\n      \"?resource kg:6947 kg:3899 .\",\n      \"?resource kg:6947 kg:9083 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2002 kg:0137 . ?resource kg:6947 kg:8202 . ?resource kg:6947 kg:3899 . ?resource kg:6947 kg:9083 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film wdt:P31 wd:Q1065664.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P161 ?star.\",\n    \"  VALUES ?title { \\\"In the Park\\\"@en \\\"Shanghaied\\\"@en \\\"Modern Times\\\"@en \\\"The Professor\\\"@en }\",\n    \"  ?film rdfs:label ?title.\",\n    \"  FILTER (lang(?title) = 'en').\",\n    \"  BIND(COALESCE(wd:Q1065664, wd:Q239784) AS ?person).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q1065664. ?film wdt:P175 ?director. ?film wdt:P161 ?star. VALUES ?title { \"In the Park\"@en \"Shanghaied\"@en \"Modern Times\"@en \"The Professor\"@en } ?film rdfs:label ?title. FILTER (lang(?title) = 'en'). BIND(COALESCE(wd:Q1065664, wd:Q239784) AS ?person). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?film wdt:P161 ?person .\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P1040 ?person .\",\n      \"VALUES ?film {wd:Q658822 wd:Q921678 wd:Q45602 wd:Q2718259} .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P161 ?person . ?film wdt:P31 wd:Q11424 . ?film wdt:P1040 ?person . VALUES ?film {wd:Q658822 wd:Q921678 wd:Q45602 wd:Q2718259} . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?film kg:7833 kg:3190 .\",\n      \"?film kg:1634 ?person .\",\n      \"?film kg:1015 ?person .\",\n      \"VALUES ?film { kg:3219 kg:7312 kg:2793 kg:3190 }\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?film kg:7833 kg:3190 . ?film kg:1634 ?person . ?film kg:1015 ?person . VALUES ?film { kg:3219 kg:7312 kg:2793 kg:3190 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q1096278 wd:Q345647 wd:Q159934 wd:Q169394 }\",\n    \"  ?work wdt:P57 wd:Q33643.\",\n    \"  ?work wdt:P1080 ?director.\",\n    \"  ?work wdt:P2868 ?editor.\",\n    \"  FILTER(?director = ?editor)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?director { wd:Q1096278 wd:Q345647 wd:Q159934 wd:Q169394 } ?work wdt:P57 wd:Q33643. ?work wdt:P1080 ?director. ?work wdt:P2868 ?editor. FILTER(?director = ?editor) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"{ wd:Q1291210 wdt:P57 ?work . } UNION \",\n      \"{ wd:Q4679987 wdt:P57 ?work . } UNION \",\n      \"{ wd:Q4207234 wdt:P57 ?work . } UNION \",\n      \"{ wd:Q16198328 wdt:P57 ?work . }\",\n    \"}\",\n    \"UNION {\",\n      \"{ wd:Q1291210 wdt:P1040 ?work . } UNION \",\n      \"{ wd:Q4679987 wdt:P1040 ?work . } UNION \",\n      \"{ wd:Q4207234 wdt:P1040 ?work . } UNION \",\n      \"{ wd:Q16198328 wdt:P1040 ?work . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { wd:Q1291210 wdt:P57 ?work . } UNION { wd:Q4679987 wdt:P57 ?work . } UNION { wd:Q4207234 wdt:P57 ?work . } UNION { wd:Q16198328 wdt:P57 ?work . } } UNION { { wd:Q1291210 wdt:P1040 ?work . } UNION { wd:Q4679987 wdt:P1040 ?work . } UNION { wd:Q4207234 wdt:P1040 ?work . } UNION { wd:Q16198328 wdt:P1040 ?work . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n    \"query\": [\n        \"SELECT ?work WHERE {\",\n            \"{ ?work kg:6483 kg:1102 . } UNION \",\n            \"{ ?work kg:6483 kg:9172 . } UNION \",\n            \"{ ?work kg:6483 kg:8606 . } UNION \",\n            \"{ ?work kg:6483 kg:4625 . }\",\n        \"}\",\n        \"UNION {\",\n            \"{ ?work kg:8022 kg:1102 . } UNION \",\n            \"{ ?work kg:8022 kg:9172 . } UNION \",\n            \"{ ?work kg:8022 kg:8606 . } UNION \",\n            \"{ ?work kg:8022 kg:4625 . }\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { ?work kg:6483 kg:1102 . } UNION { ?work kg:6483 kg:9172 . } UNION { ?work kg:6483 kg:8606 . } UNION { ?work kg:6483 kg:4625 . } } UNION { { ?work kg:8022 kg:1102 . } UNION { ?work kg:8022 kg:9172 . } UNION { ?work kg:8022 kg:8606 . } UNION { ?work kg:8022 kg:4625 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer WHERE {\",\n    \"  wd:Q1234567 wdt:P57 wd:Q8099.\",\n    \"  wd:Q1234567 wdt:P161 ?director.\",\n    \"  wd:Q1234567 wdt:P50 ?writer.\",\n    \"  VALUES ?director {\",\n    \"    wd:Q897654 wd:Q123456 wd:Q789012 wd:Q345678\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer WHERE { wd:Q1234567 wdt:P57 wd:Q8099. wd:Q1234567 wdt:P161 ?director. wd:Q1234567 wdt:P50 ?writer. VALUES ?director { wd:Q897654 wd:Q123456 wd:Q789012 wd:Q345678 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P1705 wd:Q1137372.\",\n      \"?director wdt:P57 ?film.\",\n      \"?screenwriter wdt:P58 ?film.\",\n      \"VALUES ?director {wd:Q47284 wd:Q2838329 wd:Q3772 wd:Q549956}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?screenwriter WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P1705 wd:Q1137372. ?director wdt:P57 ?film. ?screenwriter wdt:P58 ?film. VALUES ?director {wd:Q47284 wd:Q2838329 wd:Q3772 wd:Q549956}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter WHERE {\",\n      \"?director kg:5595 kg:9620 .\",\n      \"?screenwriter kg:0937 kg:9620 .\",\n      \"FILTER (?director IN (kg:8047, kg:2759, kg:0913, kg:2202))\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?director ?screenwriter WHERE { ?director kg:5595 kg:9620 . ?screenwriter kg:0937 kg:9620 . FILTER (?director IN (kg:8047, kg:2759, kg:0913, kg:2202)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?producer WHERE {\",\n    \"  wd:Q10569248 wdt:P31 wd:Q7397.\",\n    \"  OPTIONAL { wd:Q10569248 wdt:P57 wd:Q10569248. }\",\n    \"  OPTIONAL { wd:Q10569248 wdt:P31 wd:Q10569248. }\",\n    \"  OPTIONAL { ?director wdt:P175 wd:Q10569248. }\",\n    \"  OPTIONAL { ?producer wdt:P175 wd:Q10569248. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?producer WHERE { wd:Q10569248 wdt:P31 wd:Q7397. OPTIONAL { wd:Q10569248 wdt:P57 wd:Q10569248. } OPTIONAL { wd:Q10569248 wdt:P31 wd:Q10569248. } OPTIONAL { ?director wdt:P175 wd:Q10569248. } OPTIONAL { ?producer wdt:P175 wd:Q10569248. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?director ?producer WHERE {\",\n    \"  wd:Q3977597 wdt:P57 ?director.\",\n    \"  wd:Q3977597 wdt:P162 ?producer.\",\n    \"  FILTER(?director IN (wd:Q40220, wd:Q117392, wd:Q5127380, wd:Q4235))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?producer WHERE { wd:Q3977597 wdt:P57 ?director. wd:Q3977597 wdt:P162 ?producer. FILTER(?director IN (wd:Q40220, wd:Q117392, wd:Q5127380, wd:Q4235)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q2607618", "wd:Q5127380"], ["wd:Q269214", "wd:Q4235"], ["wd:Q117392", "wd:Q4235"], ["wd:Q4235"], ["wd:Q117392"], ["wd:Q117392", "wd:Q2607618"], ["wd:Q40220"], ["wd:Q7440949", "wd:Q5127380"], ["wd:Q1018606", "wd:Q5127380"], ["wd:Q4235", "wd:Q2607618"], ["wd:Q269214", "wd:Q117392"], ["wd:Q2607618", "wd:Q40220"], ["wd:Q1018606", "wd:Q117392"], ["wd:Q4235", "wd:Q40220"], ["wd:Q269214", "wd:Q5127380"], ["wd:Q7440949", "wd:Q117392"], ["wd:Q7440949", "wd:Q40220"], ["wd:Q4235", "wd:Q5127380"], ["wd:Q117392", "wd:Q5127380"], ["wd:Q1018606", "wd:Q4235"], ["wd:Q7440949", "wd:Q4235"], ["wd:Q40220", "wd:Q5127380"], ["wd:Q1018606", "wd:Q40220"], ["wd:Q269214", "wd:Q40220"], ["wd:Q117392", "wd:Q40220"], ["wd:Q5127380"]], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?director ?producer WHERE {\",\n      \"VALUES ?person { kg:9356 kg:5093 kg:5307 kg:2703 }\",\n      \"{ ?director kg:1096 ?person .}\",\n      \"{ ?producer kg:6682 ?person .}\",\n      \"?resource kg:0709 kg:9028 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?producer WHERE { VALUES ?person { kg:9356 kg:5093 kg:5307 kg:2703 } { ?director kg:1096 ?person .} { ?producer kg:6682 ?person .} ?resource kg:0709 kg:9028 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P31 wd:Q82675.\",\n    \"  ?work wdt:P577 wd:Q4096.\",\n    \"  ?work wdt:P161 wd:Q3114.\",\n    \"  ?work wdt:P162 wd:Q3114.\",\n    \"  ?work wdt:P168 wd:Q3114.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q82675. ?work wdt:P577 wd:Q4096. ?work wdt:P161 wd:Q3114. ?work wdt:P162 wd:Q3114. ?work wdt:P168 wd:Q3114. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P58 wd:Q38222.\",\n      \"?work wdt:P1431 wd:Q38222.\",\n      \"?work wdt:P162 wd:Q38222.\",\n      \"?work wdt:P1040 wd:Q38222.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q38222. ?work wdt:P1431 wd:Q38222. ?work wdt:P162 wd:Q38222. ?work wdt:P1040 wd:Q38222. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?work WHERE {\",\n            \"?work kg:9266 kg:0613.\",\n            \"?work kg:3493 kg:0613.\",\n            \"?work kg:5643 kg:0613.\",\n            \"?work kg:8870 kg:0613.\"\n        ]\n    }\n ", "normal_query": "SELECT ?work WHERE { ?work kg:9266 kg:0613. ?work kg:3493 kg:0613. ?work kg:5643 kg:0613. ?work kg:8870 kg:0613. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P31 wd:Q33964.\",\n    \"  ?writer wdt:P50 wd:Q287644.\",\n    \"  ?writer wdt:P1080 wd:Q1066444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q33964. ?writer wdt:P50 wd:Q287644. ?writer wdt:P1080 wd:Q1066444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q972787.\",\n      \"?writer wdt:P58 wd:Q3141131.\",\n      \"?writer wdt:P58 wd:Q672061.\",\n      \"?writer wdt:P1040 wd:Q972787.\",\n      \"?writer wdt:P1040 wd:Q3141131.\",\n      \"?writer wdt:P1040 wd:Q672061.\",\n      \"?writer wdt:P108 wd:Q909176.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q972787. ?writer wdt:P58 wd:Q3141131. ?writer wdt:P58 wd:Q672061. ?writer wdt:P1040 wd:Q972787. ?writer wdt:P1040 wd:Q3141131. ?writer wdt:P1040 wd:Q672061. ?writer wdt:P108 wd:Q909176. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3353 kg:2653 .\",\n      \"?resource kg:5303 kg:2653 .\",\n      \"?resource kg:3353 kg:7573 .\",\n      \"?resource kg:5303 kg:7573 .\",\n      \"?resource kg:3353 kg:2627 .\",\n      \"?resource kg:5303 kg:2627 .\",\n      \"?resource kg:2120 kg:9335 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3353 kg:2653 . ?resource kg:5303 kg:2653 . ?resource kg:3353 kg:7573 . ?resource kg:5303 kg:7573 . ?resource kg:3353 kg:2627 . ?resource kg:5303 kg:2627 . ?resource kg:2120 kg:9335 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q3109476 wd:Q25844 wd:Q114264 wd:Q286964 }\",\n    \"  ?person wdt:P162 ?movie.\",\n    \"  ?movie rdfs:label \\\"Laws of Attraction\\\"@en.\",\n    \"  BIND(?person AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q3109476 wd:Q25844 wd:Q114264 wd:Q286964 } ?person wdt:P162 ?movie. ?movie rdfs:label \"Laws of Attraction\"@en. BIND(?person AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { wd:Q81520 wd:Q1969128 wd:Q381545 wd:Q1295611 }\",\n      \"?person wdt:P1431|wdt:P162 wd:Q819109.\",\n      \"BIND(?person AS ?resource)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q81520 wd:Q1969128 wd:Q381545 wd:Q1295611 } ?person wdt:P1431|wdt:P162 wd:Q819109. BIND(?person AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:2187 kg:0533 ?resource . } UNION \",\n      \"{ kg:2187 kg:5056 ?resource . } UNION \",\n      \"{ kg:1278 kg:0533 ?resource . } UNION \",\n      \"{ kg:1278 kg:5056 ?resource . } UNION \",\n      \"{ kg:7661 kg:0533 ?resource . } UNION \",\n      \"{ kg:7661 kg:5056 ?resource . } UNION \",\n      \"{ kg:9767 kg:0533 ?resource . } UNION \",\n      \"{ kg:9767 kg:5056 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2187 kg:0533 ?resource . } UNION { kg:2187 kg:5056 ?resource . } UNION { kg:1278 kg:0533 ?resource . } UNION { kg:1278 kg:5056 ?resource . } UNION { kg:7661 kg:0533 ?resource . } UNION { kg:7661 kg:5056 ?resource . } UNION { kg:9767 kg:0533 ?resource . } UNION { kg:9767 kg:5056 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q104965 wdt:P31 wd:Q28677.\",\n    \"  wd:Q104965 p:P577 ?statement.\",\n    \"  ?statement ps:P577 ?resource.\",\n    \"  FILTER(?resource IN (wd:P50, wd:P31, wd:P281, wd:P106))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q104965 wdt:P31 wd:Q28677. wd:Q104965 p:P577 ?statement. ?statement ps:P577 ?resource. FILTER(?resource IN (wd:P50, wd:P31, wd:P281, wd:P106)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q854990 wdt:P58 ?screenwriter.\",\n    \"  wd:Q854990 wdt:P1040 ?editor.\",\n    \"  wd:Q854990 wdt:P162 ?producer.\",\n    \"  wd:Q854990 wdt:P1431 ?executiveProducer.\",\n    \"  VALUES ?resource {wd:Q8006}.\",\n    \"  FILTER(?screenwriter = wd:Q8006).\",\n    \"  FILTER(?editor = wd:Q8006).\",\n    \"  FILTER(?producer = wd:Q8006).\",\n    \"  FILTER(?executiveProducer = wd:Q8006).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q854990 wdt:P58 ?screenwriter. wd:Q854990 wdt:P1040 ?editor. wd:Q854990 wdt:P162 ?producer. wd:Q854990 wdt:P1431 ?executiveProducer. VALUES ?resource {wd:Q8006}. FILTER(?screenwriter = wd:Q8006). FILTER(?editor = wd:Q8006). FILTER(?producer = wd:Q8006). FILTER(?executiveProducer = wd:Q8006). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q8006"]], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:6049 }\",\n      \"VALUES ?film { kg:1415 }\",\n      \"?resource kg:6880 ?film .\",\n      \"?resource kg:3149 ?film .\",\n      \"?resource kg:0779 ?film .\",\n      \"?resource kg:3712 ?film .\",\n      \"?person kg:6880 ?film .\",\n      \"?person kg:3149 ?film .\",\n      \"?person kg:0779 ?film .\",\n      \"?person kg:3712 ?film .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:6049 } VALUES ?film { kg:1415 } ?resource kg:6880 ?film . ?resource kg:3149 ?film . ?resource kg:0779 ?film . ?resource kg:3712 ?film . ?person kg:6880 ?film . ?person kg:3149 ?film . ?person kg:0779 ?film . ?person kg:3712 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  ?project wdt:P31 wd:Q5769284.\",\n    \"  ?project wdt:P106 wd:Q3393466.\",\n    \"  ?project wdt:P57 wd:Q1066224.\",\n    \"  ?project wdt:P161 wd:Q844644.\",\n    \"  ?project wdt:P161 wd:Q393944.\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { ?project wdt:P31 wd:Q5769284. ?project wdt:P106 wd:Q3393466. ?project wdt:P57 wd:Q1066224. ?project wdt:P161 wd:Q844644. ?project wdt:P161 wd:Q393944. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n      \"?project wdt:P57 wd:Q562108.\",\n      \"?project wdt:P57 wd:Q1687239.\",\n      \"?project wdt:P57 wd:Q35979475.\",\n      \"?project wdt:P58 wd:Q562108.\",\n      \"?project wdt:P58 wd:Q1687239.\",\n      \"?project wdt:P58 wd:Q35979475.\",\n      \"?project wdt:P1040 wd:Q562108.\",\n      \"?project wdt:P1040 wd:Q1687239.\",\n      \"?project wdt:P1040 wd:Q35979475.\"\n    ]\n  }\n ", "normal_query": "SELECT ?project WHERE { ?project wdt:P57 wd:Q562108. ?project wdt:P57 wd:Q1687239. ?project wdt:P57 wd:Q35979475. ?project wdt:P58 wd:Q562108. ?project wdt:P58 wd:Q1687239. ?project wdt:P58 wd:Q35979475. ?project wdt:P1040 wd:Q562108. ?project wdt:P1040 wd:Q1687239. ?project wdt:P1040 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?project\",\n    \"WHERE {\",\n      \"?project kg:0289 kg:0365.\",\n      \"?project kg:4637 kg:3287.\",\n      \"?project kg:7265 kg:4530.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { ?project kg:0289 kg:0365. ?project kg:4637 kg:3287. ?project kg:7265 kg:4530. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P31 wd:Q82955.\",\n    \"  ?work wdt:P57 wd:Q460464.\",\n    \"  ?work wdt:P161 wd:Q1062444.\",\n    \"  ?work wdt:P31 wd:Q82955.\",\n    \"  ?work wdt:P170 wd:Q1062444.\",\n    \"  ?work wdt:P170 wd:Q1062444.\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q82955. ?work wdt:P57 wd:Q460464. ?work wdt:P161 wd:Q1062444. ?work wdt:P31 wd:Q82955. ?work wdt:P170 wd:Q1062444. ?work wdt:P170 wd:Q1062444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P57 wd:Q35979475.\",\n      \"?work wdt:P57 wd:Q562108.\",\n      \"?work wdt:P57 wd:Q1687239.\",\n      \"?work wdt:P58 wd:Q35979475.\",\n      \"?work wdt:P58 wd:Q562108.\",\n      \"?work wdt:P58 wd:Q1687239.\",\n      \"?work wdt:P1040 wd:Q35979475.\",\n      \"?work wdt:P1040 wd:Q562108.\",\n      \"?work wdt:P1040 wd:Q1687239.\"\n    ]\n  }\n ", "normal_query": "SELECT ?work WHERE { ?work wdt:P57 wd:Q35979475. ?work wdt:P57 wd:Q562108. ?work wdt:P57 wd:Q1687239. ?work wdt:P58 wd:Q35979475. ?work wdt:P58 wd:Q562108. ?work wdt:P58 wd:Q1687239. ?work wdt:P1040 wd:Q35979475. ?work wdt:P1040 wd:Q562108. ?work wdt:P1040 wd:Q1687239. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work kg:9712 kg:5238.\",\n      \"?work kg:2466 kg:7889.\",\n      \"?work kg:9552 kg:2197.\"\n    ]\n  }\n ", "normal_query": "SELECT ?work WHERE { ?work kg:9712 kg:5238. ?work kg:2466 kg:7889. ?work kg:9552 kg:2197. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 }\", \"  ?film wdt:P162 ?cinematographer.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?producer wdt:P31 wd:Q336429. \",\n    \"  ?producer wdt:P106 wd:Q819965. \",\n    \"  ?producer wdt:P175 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 } ?film wdt:P162 ?cinematographer. ?film wdt:P571 ?director. ?producer wdt:P31 wd:Q336429. ?producer wdt:P106 wd:Q819965. ?producer wdt:P175 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"?person wdt:P106 wd:Q3282637 .\",\n      \"VALUES ?film {wd:Q629819 wd:Q600762 wd:Q1216566 wd:Q283699} .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?director WHERE { ?film wdt:P57 ?director . ?film wdt:P344 ?cinematographer . ?person wdt:P106 wd:Q3282637 . VALUES ?film {wd:Q629819 wd:Q600762 wd:Q1216566 wd:Q283699} . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q55438", "wd:Q7876409"], ["wd:Q55438"], ["wd:Q55438", "wd:Q4776916"], ["wd:Q7876409", "wd:Q1356749"], ["wd:Q55438", "wd:Q1356749"]], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2265 ?film.\",\n      \"?film kg:6263 kg:0627.\",\n      \"VALUES ?film { kg:2063 kg:7198 kg:7085 kg:7705 }\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:2265 ?film. ?film kg:6263 kg:0627. VALUES ?film { kg:2063 kg:7198 kg:7085 kg:7705 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q87654321 }\",\n    \"  ?film wdt:P106 wd:Q33967.\",\n    \"  ?film wdt:P162 wd:Q33967.\",\n    \"  ?film wdt:P178 wd:Q33967.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q87654321 } ?film wdt:P106 wd:Q33967. ?film wdt:P162 wd:Q33967. ?film wdt:P178 wd:Q33967. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?film wdt:P57 ?person .\",\n      \"?film wdt:P106 wd:Q33999 .\",\n      \"?film wdt:P344 ?person .\",\n      \"VALUES ?film {wd:Q3016313 wd:Q862058 wd:Q3485595 wd:Q1473406} .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P57 ?person . ?film wdt:P106 wd:Q33999 . ?film wdt:P344 ?person . VALUES ?film {wd:Q3016313 wd:Q862058 wd:Q3485595 wd:Q1473406} . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:5713/kg:0113 .\",\n      \"?person kg:5713/kg:9038 .\",\n      \"?person kg:5713/kg:1977 .\",\n      \"?person kg:5713/kg:9628 .\",\n      \"?person kg:9234/kg:0113 .\",\n      \"?person kg:9234/kg:9038 .\",\n      \"?person kg:9234/kg:1977 .\",\n      \"?person kg:9234/kg:9628 .\",\n      \"?person kg:5366/kg:0113 .\",\n      \"?person kg:5366/kg:9038 .\",\n      \"?person kg:5366/kg:1977 .\",\n      \"?person kg:5366/kg:9628 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:5713/kg:0113 . ?person kg:5713/kg:9038 . ?person kg:5713/kg:1977 . ?person kg:5713/kg:9628 . ?person kg:9234/kg:0113 . ?person kg:9234/kg:9038 . ?person kg:9234/kg:1977 . ?person kg:9234/kg:9628 . ?person kg:5366/kg:0113 . ?person kg:5366/kg:9038 . ?person kg:5366/kg:1977 . ?person kg:5366/kg:9628 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P31 wd:Q82459.\",\n    \"  ?work wdt:P674 ?director.\",\n    \"  ?director wdt:P106 wd:Q3393466.\",\n    \"  ?director wdt:P106 wd:Q10864925.\",\n    \"  ?director wdt:P106 wd:Q174443.\",\n    \"  ?work wdt:P161 ?producer.\",\n    \"  ?producer wdt:P106 wd:Q3393466.\",\n    \"  ?producer wdt:P106 wd:Q10864925.\",\n    \"  ?producer wdt:P106 wd:Q174443.\",\n    \"  ?work wdt:P175 ?writer.\",\n    \"  ?writer wdt:P106 wd:Q3393466.\",\n    \"  ?writer wdt:P106 wd:Q10864925.\",\n    \"  ?writer wdt:P106 wd:Q174443.\"\n    ]\n  }\n ", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q82459. ?work wdt:P674 ?director. ?director wdt:P106 wd:Q3393466. ?director wdt:P106 wd:Q10864925. ?director wdt:P106 wd:Q174443. ?work wdt:P161 ?producer. ?producer wdt:P106 wd:Q3393466. ?producer wdt:P106 wd:Q10864925. ?producer wdt:P106 wd:Q174443. ?work wdt:P175 ?writer. ?writer wdt:P106 wd:Q3393466. ?writer wdt:P106 wd:Q10864925. ?writer wdt:P106 wd:Q174443. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q10674258 wd:Q396944 }\",\n    \"  VALUES ?editor { wd:Q10674258 wd:Q396944 }\",\n    \"  VALUES ?writer { wd:Q10674258 wd:Q396944 }\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P162 ?editor.\",\n    \"  ?film wdt:P162 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q10674258 wd:Q396944 } VALUES ?editor { wd:Q10674258 wd:Q396944 } VALUES ?writer { wd:Q10674258 wd:Q396944 } ?film wdt:P571 ?director. ?film wdt:P162 ?editor. ?film wdt:P162 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P57 wd:Q1687239.\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q35979475.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q562108.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q35979475. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q562108. ?film wdt:P58 wd:Q35979475. ?film wdt:P58 wd:Q1687239. ?film wdt:P58 wd:Q562108. ?film wdt:P1040 wd:Q35979475. ?film wdt:P1040 wd:Q1687239. ?film wdt:P1040 wd:Q562108. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:0677/kg:7862 .\",\n      \"?film kg:4848/kg:7862 .\",\n      \"?film kg:8507/kg:7862 .\",\n      \"?film kg:0677/kg:3772 .\",\n      \"?film kg:4848/kg:3772 .\",\n      \"?film kg:8507/kg:3772 .\",\n      \"?film kg:0677/kg:7339 .\",\n      \"?film kg:4848/kg:7339 .\",\n      \"?film kg:8507/kg:7339 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:0677/kg:7862 . ?film kg:4848/kg:7862 . ?film kg:8507/kg:7862 . ?film kg:0677/kg:3772 . ?film kg:4848/kg:3772 . ?film kg:8507/kg:3772 . ?film kg:0677/kg:7339 . ?film kg:4848/kg:7339 . ?film kg:8507/kg:7339 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q109627 wd:Q34588 wd:Q219944 wd:Q11969 wd:Q11969 }.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q10800.\",\n    \"  ?director wdt:P106 wd:Q33969.\",\n    \"  ?film wdt:P179 ?director .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q109627 wd:Q34588 wd:Q219944 wd:Q11969 wd:Q11969 }. ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q10800. ?director wdt:P106 wd:Q33969. ?film wdt:P179 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie rdfs:label \\\"Grindhouse\\\"@en.\",\n      \"?movie wdt:P57 ?director.\",\n      \"?movie wdt:P58 ?screenwriter.\",\n      \"VALUES ?director {\",\n        \"wd:Q358714 wd:Q298255 wd:Q679023 wd:Q522057 wd:Q47284 wd:Q3772\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?screenwriter WHERE { ?movie wdt:P31 wd:Q11424. ?movie rdfs:label \"Grindhouse\"@en. ?movie wdt:P57 ?director. ?movie wdt:P58 ?screenwriter. VALUES ?director { wd:Q358714 wd:Q298255 wd:Q679023 wd:Q522057 wd:Q47284 wd:Q3772 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0123 kg:2115 .\",\n      \"?resource kg:2062 kg:2115 .\",\n      \"{ ?resource kg:0795 } UNION { ?resource kg:8328 } UNION { ?resource kg:1454 } UNION { ?resource kg:9736 } UNION { ?resource kg:2406 }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0123 kg:2115 . ?resource kg:2062 kg:2115 . { ?resource kg:0795 } UNION { ?resource kg:8328 } UNION { ?resource kg:1454 } UNION { ?resource kg:9736 } UNION { ?resource kg:2406 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  VALUES ?film { wd:Q1069478 wd:Q253444 wd:Q150944 wd:Q150944 }.\",\n    \"  ?film wdt:P161 ?filmProducer.\",\n    \"  ?filmProducer wdt:P106 wd:Q3393872.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmProducer WHERE { VALUES ?film { wd:Q1069478 wd:Q253444 wd:Q150944 wd:Q150944 }. ?film wdt:P161 ?filmProducer. ?filmProducer wdt:P106 wd:Q3393872. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer wdt:P106 wd:Q3282637.\",\n      \"?producer wdt:P58 wd:Q567519.\",\n      \"?producer wdt:P58 wd:Q686125.\",\n      \"?producer wdt:P58 wd:Q327427.\",\n      \"?producer wdt:P58 wd:Q2789885.\",\n      \"?producer wdt:P1040 wd:Q567519.\",\n      \"?producer wdt:P1040 wd:Q686125.\",\n      \"?producer wdt:P1040 wd:Q327427.\",\n      \"?producer wdt:P1040 wd:Q2789885.\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637. ?producer wdt:P58 wd:Q567519. ?producer wdt:P58 wd:Q686125. ?producer wdt:P58 wd:Q327427. ?producer wdt:P58 wd:Q2789885. ?producer wdt:P1040 wd:Q567519. ?producer wdt:P1040 wd:Q686125. ?producer wdt:P1040 wd:Q327427. ?producer wdt:P1040 wd:Q2789885. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer\",\n    \"WHERE {\",\n      \"?producer kg:9570 kg:1121 .\",\n      \"?producer kg:6788 kg:1392 .\",\n      \"?producer kg:6788 kg:5270 .\",\n      \"?producer kg:6788 kg:5693 .\",\n      \"?producer kg:6788 kg:3942 .\",\n      \"?producer kg:3259 kg:1392 .\",\n      \"?producer kg:3259 kg:5270 .\",\n      \"?producer kg:3259 kg:5693 .\",\n      \"?producer kg:3259 kg:3942 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer kg:9570 kg:1121 . ?producer kg:6788 kg:1392 . ?producer kg:6788 kg:5270 . ?producer kg:6788 kg:5693 . ?producer kg:6788 kg:3942 . ?producer kg:3259 kg:1392 . ?producer kg:3259 kg:5270 . ?producer kg:3259 kg:5693 . ?producer kg:3259 kg:3942 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  VALUES ?director { wd:Q1062457 wd:Q389944 wd:Q156994 wd:Q156994 wd:Q156994 }\",\n    \"  VALUES ?writer { wd:Q1062457 wd:Q389944 wd:Q156994 wd:Q156994 wd:Q156994 }\",\n    \"  ?project wdt:P57 wd:Q1062457.\",\n    \"  ?project wdt:P58 wd:Q389944.\",\n    \"  ?project wdt:P58 wd:Q156994.\",\n    \"  ?project wdt:P58 wd:Q156994.\",\n    \"  ?project wdt:P58 wd:Q156994.\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { VALUES ?director { wd:Q1062457 wd:Q389944 wd:Q156994 wd:Q156994 wd:Q156994 } VALUES ?writer { wd:Q1062457 wd:Q389944 wd:Q156994 wd:Q156994 wd:Q156994 } ?project wdt:P57 wd:Q1062457. ?project wdt:P58 wd:Q389944. ?project wdt:P58 wd:Q156994. ?project wdt:P58 wd:Q156994. ?project wdt:P58 wd:Q156994. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n      \"{ ?project wdt:P57 wd:Q15042700 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q15042700 . }\",\n      \"{ ?project wdt:P57 wd:Q7174311 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q7174311 . }\",\n      \"{ ?project wdt:P57 wd:Q5542223 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q5542223 . }\",\n      \"{ ?project wdt:P57 wd:Q7407299 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q7407299 . }\",\n      \"{ ?project wdt:P57 wd:Q4500 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q4500 . }\"\n    ]\n  }\n ", "normal_query": "SELECT ?project WHERE { { ?project wdt:P57 wd:Q15042700 . } UNION { ?project wdt:P58 wd:Q15042700 . } { ?project wdt:P57 wd:Q7174311 . } UNION { ?project wdt:P58 wd:Q7174311 . } { ?project wdt:P57 wd:Q5542223 . } UNION { ?project wdt:P58 wd:Q5542223 . } { ?project wdt:P57 wd:Q7407299 . } UNION { ?project wdt:P58 wd:Q7407299 . } { ?project wdt:P57 wd:Q4500 . } UNION { ?project wdt:P58 wd:Q4500 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?project\",\n    \"WHERE {\",\n      \"{ ?project kg:0286 kg:0982 . } UNION \",\n      \"{ ?project kg:0286 kg:2196 . } UNION \",\n      \"{ ?project kg:0286 kg:6928 . } UNION \",\n      \"{ ?project kg:0286 kg:6899 . } UNION \",\n      \"{ ?project kg:0286 kg:4558 . }\",\n    \"}\",\n    \"UNION {\",\n      \"{ ?project kg:5267 kg:0982 . } UNION \",\n      \"{ ?project kg:5267 kg:2196 . } UNION \",\n      \"{ ?project kg:5267 kg:6928 . } UNION \",\n      \"{ ?project kg:5267 kg:6899 . } UNION \",\n      \"{ ?project kg:5267 kg:4558 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { { ?project kg:0286 kg:0982 . } UNION { ?project kg:0286 kg:2196 . } UNION { ?project kg:0286 kg:6928 . } UNION { ?project kg:0286 kg:6899 . } UNION { ?project kg:0286 kg:4558 . } } UNION { { ?project kg:5267 kg:0982 . } UNION { ?project kg:5267 kg:2196 . } UNION { ?project kg:5267 kg:6928 . } UNION { ?project kg:5267 kg:6899 . } UNION { ?project kg:5267 kg:4558 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor WHERE {\",\n    \"  ?production wdt:P175 ?director.\",\n    \"  ?production wdt:P582 ?writer.\",\n    \"  ?production wdt:P694 ?editor.\",\n    \"  ?production wdt:P1066 wd:Q346644. \",\n    \"  ?production wdt:P175 wd:Q346644. \",\n    \"  ?production wdt:P289 wd:Q346644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor WHERE { ?production wdt:P175 ?director. ?production wdt:P582 ?writer. ?production wdt:P694 ?editor. ?production wdt:P1066 wd:Q346644. ?production wdt:P175 wd:Q346644. ?production wdt:P289 wd:Q346644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?production ?director ?screenwriter ?editor WHERE {\",\n    \"  ?production wdt:P57 ?director.\",\n    \"  ?production wdt:P58 ?screenwriter.\",\n    \"  ?production wdt:P1040 ?editor.\",\n    \"  ?production wdt:P161 wd:Q35979475.\",\n    \"  ?production wdt:P161 wd:Q1687239.\",\n    \"  ?production wdt:P161 wd:Q562108.\"\n    ]\n}", "normal_query": "SELECT ?production ?director ?screenwriter ?editor WHERE { ?production wdt:P57 ?director. ?production wdt:P58 ?screenwriter. ?production wdt:P1040 ?editor. ?production wdt:P161 wd:Q35979475. ?production wdt:P161 wd:Q1687239. ?production wdt:P161 wd:Q562108. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6229 ?production .\",\n      \"?resource kg:4344 ?production .\",\n      \"?resource kg:0618 ?production .\",\n      \"?production kg:3628 kg:3628 .\",\n      \"?production kg:7861 kg:7861 .\",\n      \"?production kg:8050 kg:8050 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6229 ?production . ?resource kg:4344 ?production . ?resource kg:0618 ?production . ?production kg:3628 kg:3628 . ?production kg:7861 kg:7861 . ?production kg:8050 kg:8050 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P31 wd:Q2064985.\",\n      \"?filmEditor wdt:P106 wd:Q33937.\",\n      \"?filmEditor wdt:P106 wd:Q1086291.\",\n      \"?filmEditor wdt:P106 wd:Q45667.\",\n      \"?filmEditor wdt:P106 wd:Q33937.\",\n      \"?filmEditor wdt:P106 wd:Q1086291.\",\n      \"?filmEditor wdt:P106 wd:Q45667.\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P31 wd:Q2064985. ?filmEditor wdt:P106 wd:Q33937. ?filmEditor wdt:P106 wd:Q1086291. ?filmEditor wdt:P106 wd:Q45667. ?filmEditor wdt:P106 wd:Q33937. ?filmEditor wdt:P106 wd:Q1086291. ?filmEditor wdt:P106 wd:Q45667. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855.\",\n      \"?filmEditor wdt:P58 wd:Q17738.\",\n      \"?filmEditor wdt:P58 wd:Q165713.\",\n      \"?filmEditor wdt:P58 wd:Q181803.\",\n      \"?filmEditor wdt:P58 wd:Q3968346.\",\n      \"?filmEditor wdt:P1431 wd:Q17738.\",\n      \"?filmEditor wdt:P1431 wd:Q165713.\",\n      \"?filmEditor wdt:P1431 wd:Q181803.\",\n      \"?filmEditor wdt:P1431 wd:Q3968346.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855. ?filmEditor wdt:P58 wd:Q17738. ?filmEditor wdt:P58 wd:Q165713. ?filmEditor wdt:P58 wd:Q181803. ?filmEditor wdt:P58 wd:Q3968346. ?filmEditor wdt:P1431 wd:Q17738. ?filmEditor wdt:P1431 wd:Q165713. ?filmEditor wdt:P1431 wd:Q181803. ?filmEditor wdt:P1431 wd:Q3968346. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7901/kg:9486 .\",\n      \"?resource kg:7901/kg:8729 .\",\n      \"?resource kg:7901/kg:9870 .\",\n      \"?resource kg:7901/kg:4212 .\",\n      \"?resource kg:7901/kg:2824 .\",\n      \"?resource kg:7901/kg:3339 .\",\n      \"?resource kg:7901/kg:7215 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:7901/kg:9486 . ?resource kg:7901/kg:8729 . ?resource kg:7901/kg:9870 . ?resource kg:7901/kg:4212 . ?resource kg:7901/kg:2824 . ?resource kg:7901/kg:3339 . ?resource kg:7901/kg:7215 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q12345678 wd:Q98765432 wd:Q11223344 }\", \"  ?person wdt:P31 wd:Q5.\", \"  ?resource wdt:P1705 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q12345678 wd:Q98765432 wd:Q11223344 } ?person wdt:P31 wd:Q5. ?resource wdt:P1705 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor ?screenwriter WHERE {\",\n    \"  wd:Q20729551 wdt:P57 ?director.\",\n    \"  wd:Q20729551 wdt:P1040 ?editor.\",\n    \"  wd:Q20729551 wdt:P58 ?screenwriter.\",\n    \"  VALUES ?director { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"  VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"  VALUES ?screenwriter { wd:Q35979475 wd:Q1687239 wd:Q562108 }\"\n    ]\n}", "normal_query": "SELECT ?director ?editor ?screenwriter WHERE { wd:Q20729551 wdt:P57 ?director. wd:Q20729551 wdt:P1040 ?editor. wd:Q20729551 wdt:P58 ?screenwriter. VALUES ?director { wd:Q35979475 wd:Q1687239 wd:Q562108 } VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 } VALUES ?screenwriter { wd:Q35979475 wd:Q1687239 wd:Q562108 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:2342 kg:1653 kg:6976 }.\",\n      \"?person kg:8356 kg:7483 .\",\n      \"?person kg:1684 kg:7483 .\",\n      \"?person kg:1733 kg:7483 .\",\n      \"BIND(?person AS ?resource) \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:2342 kg:1653 kg:6976 }. ?person kg:8356 kg:7483 . ?person kg:1684 kg:7483 . ?person kg:1733 kg:7483 . BIND(?person AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P162 wd:Q34579;\",\n    \"          wdt:P1080 wd:Q11424;\",\n    \"          wdt:P577 wd:Q11424.\",\n    \"  ?person wdt:P162 wd:Q34579;\",\n    \"          wdt:P577 wd:Q10800.\",\n    \"  ?person wdt:P162 wd:Q34579;\",\n    \"          wdt:P577 wd:Q10800.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P162 wd:Q34579; wdt:P1080 wd:Q11424; wdt:P577 wd:Q11424. ?person wdt:P162 wd:Q34579; wdt:P577 wd:Q10800. ?person wdt:P162 wd:Q34579; wdt:P577 wd:Q10800. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1431 wd:Q192403.\",\n      \"?person wdt:P1431 wd:Q165713.\",\n      \"?person wdt:P58 wd:Q613974.\",\n      \"?person wdt:P58 wd:Q208910.\",\n      \"?person wdt:P58 wd:Q1869678.\",\n      \"?person wdt:P344 wd:Q613974.\",\n      \"?person wdt:P344 wd:Q208910.\",\n      \"?person wdt:P344 wd:Q1869678.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P1431 wd:Q192403. ?person wdt:P1431 wd:Q165713. ?person wdt:P58 wd:Q613974. ?person wdt:P58 wd:Q208910. ?person wdt:P58 wd:Q1869678. ?person wdt:P344 wd:Q613974. ?person wdt:P344 wd:Q208910. ?person wdt:P344 wd:Q1869678. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?person WHERE {\",\n            \"?person kg:8695 kg:3675 .\",\n            \"?person kg:8695 kg:4438 .\",\n            \"?person kg:3076 kg:7257 .\",\n            \"?person kg:4014 kg:7257 .\",\n            \"?person kg:3076 kg:4002 .\",\n            \"?person kg:4014 kg:4002 .\",\n            \"?person kg:3076 kg:2498 .\",\n            \"?person kg:4014 kg:2498 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:8695 kg:3675 . ?person kg:8695 kg:4438 . ?person kg:3076 kg:7257 . ?person kg:4014 kg:7257 . ?person kg:3076 kg:4002 . ?person kg:4014 kg:4002 . ?person kg:3076 kg:2498 . ?person kg:4014 kg:2498 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor ?executiveProducer WHERE {\",\n    \"  wd:Q1234567 wdt:P571 ?director.\",\n    \"  wd:Q1234567 wdt:P98 ?writer.\",\n    \"  wd:Q1234567 wdt:P106 ?editor.\",\n    \"  wd:Q1234567 wdt:P106 ?executiveProducer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor ?executiveProducer WHERE { wd:Q1234567 wdt:P571 ?director. wd:Q1234567 wdt:P98 ?writer. wd:Q1234567 wdt:P106 ?editor. wd:Q1234567 wdt:P106 ?executiveProducer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor ?producer WHERE {\",\n    \"  wd:Q2086445 wdt:P57 ?director.\",\n    \"  wd:Q2086445 wdt:P58 ?writer.\",\n    \"  wd:Q2086445 wdt:P1040 ?editor.\",\n    \"  wd:Q2086445 wdt:P1431 ?producer.\",\n    \"  wd:Q1361018 wdt:P57 ?director.\",\n    \"  wd:Q1361018 wdt:P58 ?writer.\",\n    \"  wd:Q1361018 wdt:P1040 ?editor.\",\n    \"  wd:Q1361018 wdt:P1431 ?producer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor ?producer WHERE { wd:Q2086445 wdt:P57 ?director. wd:Q2086445 wdt:P58 ?writer. wd:Q2086445 wdt:P1040 ?editor. wd:Q2086445 wdt:P1431 ?producer. wd:Q1361018 wdt:P57 ?director. wd:Q1361018 wdt:P58 ?writer. wd:Q1361018 wdt:P1040 ?editor. wd:Q1361018 wdt:P1431 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q724172", "wd:Q95889269"], ["wd:Q724172"]], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter ?editor ?executiveProducer WHERE {\",\n      \"?film kg:4746 ?director .\",\n      \"?film kg:3862 ?screenwriter .\",\n      \"?film kg:2045 ?editor .\",\n      \"?film kg:1324 ?executiveProducer .\",\n      \"VALUES ?film { kg:8748 kg:1533 }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?screenwriter ?editor ?executiveProducer WHERE { ?film kg:4746 ?director . ?film kg:3862 ?screenwriter . ?film kg:2045 ?editor . ?film kg:1324 ?executiveProducer . VALUES ?film { kg:8748 kg:1533 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  wd:Q1234567 wdt:P50 ?director.\",\n    \"  wd:Q1234567 wdt:P98 ?writer.\",\n    \"  wd:Q1234567 wdt:P162 ?producer.\",\n    \"  VALUES ?director { wd:Q1234568 wd:Q1234569 wd:Q1234570 }\",\n    \"  VALUES ?writer { wd:Q1234568 wd:Q1234569 wd:Q1234570 }\",\n    \"  VALUES ?producer { wd:Q1234568 wd:Q1234569 wd:Q1234570 }\",\n    \"  BIND(wd:Q1234567 AS ?movie)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { wd:Q1234567 wdt:P50 ?director. wd:Q1234567 wdt:P98 ?writer. wd:Q1234567 wdt:P162 ?producer. VALUES ?director { wd:Q1234568 wd:Q1234569 wd:Q1234570 } VALUES ?writer { wd:Q1234568 wd:Q1234569 wd:Q1234570 } VALUES ?producer { wd:Q1234568 wd:Q1234569 wd:Q1234570 } BIND(wd:Q1234567 AS ?movie) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1234567 wdt:P50 ?director.\",\n    \"  wd:Q1234567 wdt:P1686 ?writer.\",\n    \"  wd:Q1234567 wdt:P1928 ?producer.\",\n    \"  VALUES ?director { wd:Q100000 wd:Q100001 wd:Q100002 }\",\n    \"  VALUES ?writer { wd:Q100000 wd:Q100001 wd:Q100002 }\",\n    \"  VALUES ?producer { wd:Q100000 wd:Q100001 wd:Q100002 }\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1234567 wdt:P50 ?director. wd:Q1234567 wdt:P1686 ?writer. wd:Q1234567 wdt:P1928 ?producer. VALUES ?director { wd:Q100000 wd:Q100001 wd:Q100002 } VALUES ?writer { wd:Q100000 wd:Q100001 wd:Q100002 } VALUES ?producer { wd:Q100000 wd:Q100001 wd:Q100002 } ?film wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33984.\",\n    \"  ?person wdt:P57 wd:Q2066139.\",\n    \"  ?person wdt:P57 wd:Q1066664.\",\n    \"  ?person wdt:P57 wd:Q186075.\",\n    \"  ?person wdt:P57 wd:Q203924.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33984. ?person wdt:P57 wd:Q2066139. ?person wdt:P57 wd:Q1066664. ?person wdt:P57 wd:Q186075. ?person wdt:P57 wd:Q203924. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1140578.\",\n      \"?person wdt:P57 wd:Q2085.\",\n      \"?person wdt:P58 wd:Q1140578.\",\n      \"?person wdt:P58 wd:Q2085.\",\n      \"?person wdt:P1431 wd:Q1140578.\",\n      \"?person wdt:P1431 wd:Q2085.\",\n      \"?person wdt:P1431 wd:Q1511905.\",\n      \"?person wdt:P1431 wd:Q583406.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1140578. ?person wdt:P57 wd:Q2085. ?person wdt:P58 wd:Q1140578. ?person wdt:P58 wd:Q2085. ?person wdt:P1431 wd:Q1140578. ?person wdt:P1431 wd:Q2085. ?person wdt:P1431 wd:Q1511905. ?person wdt:P1431 wd:Q583406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:8250 kg:8673.\",\n      \"?person kg:8250 kg:3424.\",\n      \"?person kg:9095 kg:8673.\",\n      \"?person kg:9095 kg:3424.\",\n      \"?person kg:9095 kg:6685.\",\n      \"?person kg:9095 kg:8911.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:8250 kg:8673. ?person kg:8250 kg:3424. ?person kg:9095 kg:8673. ?person kg:9095 kg:3424. ?person kg:9095 kg:6685. ?person kg:9095 kg:8911. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1064278 wd:Q35944 wd:Q128347 wd:Q156967 wd:Q1064278 }.\",\n    \"  ?film wdt:P57 wd:Q33643. \",\n    \"  ?director wdt:P31 wd:Q3396126. \",\n    \"  ?film wdt:P161 ?director. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1064278 wd:Q35944 wd:Q128347 wd:Q156967 wd:Q1064278 }. ?film wdt:P57 wd:Q33643. ?director wdt:P31 wd:Q3396126. ?film wdt:P161 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P57 wd:Q116760.\",\n      \"?film wdt:P58 wd:Q116760.\",\n      \"?film wdt:P57 wd:Q1033656.\",\n      \"?film wdt:P58 wd:Q1033656.\",\n      \"?film wdt:P57 wd:Q982339.\",\n      \"?film wdt:P58 wd:Q982339.\",\n      \"?film wdt:P57 wd:Q7546.\",\n      \"?film wdt:P58 wd:Q7546.\",\n      \"?film wdt:P57 wd:Q1365463.\",\n      \"?film wdt:P58 wd:Q1365463.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q116760. ?film wdt:P58 wd:Q116760. ?film wdt:P57 wd:Q1033656. ?film wdt:P58 wd:Q1033656. ?film wdt:P57 wd:Q982339. ?film wdt:P58 wd:Q982339. ?film wdt:P57 wd:Q7546. ?film wdt:P58 wd:Q7546. ?film wdt:P57 wd:Q1365463. ?film wdt:P58 wd:Q1365463. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film kg:0018 kg:8677 .\",\n      \"?film kg:2253 kg:8473 .\",\n      \"?film kg:2253 kg:6967 .\",\n      \"?film kg:2253 kg:6905 .\",\n      \"?film kg:2253 kg:3385 .\",\n      \"?film kg:2253 kg:9987 .\",\n      \"?film kg:8834 kg:8473 .\",\n      \"?film kg:8834 kg:6967 .\",\n      \"?film kg:8834 kg:6905 .\",\n      \"?film kg:8834 kg:3385 .\",\n      \"?film kg:8834 kg:9987 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:0018 kg:8677 . ?film kg:2253 kg:8473 . ?film kg:2253 kg:6967 . ?film kg:2253 kg:6905 . ?film kg:2253 kg:3385 . ?film kg:2253 kg:9987 . ?film kg:8834 kg:8473 . ?film kg:8834 kg:6967 . ?film kg:8834 kg:6905 . ?film kg:8834 kg:3385 . ?film kg:8834 kg:9987 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?star ?director ?cinematographer WHERE {\",\n    \"  wd:Q1074268 wdt:P86 ?composer.\",\n    \"  ?composer wdt:P35 ?star.\",\n    \"  ?composer wdt:P57 ?director.\",\n    \"  ?composer wdt:P93 ?cinematographer.\",\n    \"  VALUES ?movie {\",\n    \"    wd:Q1082464 wd:Q1082465 wd:Q1082466\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer ?star ?director ?cinematographer WHERE { wd:Q1074268 wdt:P86 ?composer. ?composer wdt:P35 ?star. ?composer wdt:P57 ?director. ?composer wdt:P93 ?cinematographer. VALUES ?movie { wd:Q1082464 wd:Q1082465 wd:Q1082466 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q550196.\",\n      \"?composer wdt:P57 wd:Q192115.\",\n      \"?composer wdt:P57 wd:Q1653396.\",\n      \"?composer wdt:P57 wd:Q656357.\",\n      \"?composer wdt:P161 wd:Q192115.\",\n      \"?composer wdt:P161 wd:Q1653396.\",\n      \"?composer wdt:P161 wd:Q656357.\",\n      \"?composer wdt:P344 wd:Q192115.\",\n      \"?composer wdt:P344 wd:Q1653396.\",\n      \"?composer wdt:P344 wd:Q656357.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q550196. ?composer wdt:P57 wd:Q192115. ?composer wdt:P57 wd:Q1653396. ?composer wdt:P57 wd:Q656357. ?composer wdt:P161 wd:Q192115. ?composer wdt:P161 wd:Q1653396. ?composer wdt:P161 wd:Q656357. ?composer wdt:P344 wd:Q192115. ?composer wdt:P344 wd:Q1653396. ?composer wdt:P344 wd:Q656357. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:5687 kg:6804.\",\n            \"?resource kg:1669 kg:9737.\",\n            \"?resource kg:0943 kg:9737.\",\n            \"?resource kg:7667 kg:9737.\",\n            \"?resource kg:7667 kg:4329.\",\n            \"?resource kg:7667 kg:7674.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:5687 kg:6804. ?resource kg:1669 kg:9737. ?resource kg:0943 kg:9737. ?resource kg:7667 kg:9737. ?resource kg:7667 kg:4329. ?resource kg:7667 kg:7674. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q2048357 wdt:P170 ?composer.\",\n    \"  ?composer wdt:P169 ?film1.\",\n    \"  ?film1 rdfs:label \\\"A Woman of Paris\\\"@en.\",\n    \"  ?composer wdt:P169 ?film2.\",\n    \"  ?film2 rdfs:label \\\"Pay Day\\\"@en.\",\n    \"  ?editor wdt:P35 ?film3.\",\n    \"  ?film3 rdfs:label \\\"Modern Times\\\"@en.\",\n    \"  ?star wdt:P169 ?film4.\",\n    \"  ?film4 rdfs:label \\\"City Lights\\\"@en.\",\n    \"  ?editor wdt:P35 ?film5.\",\n    \"  ?film5 rdfs:label \\\"The Essanay-Chaplin Revue of 1916\\\"@en.\"\n    ]\n  }\n ", "normal_query": "SELECT ?composer WHERE { wd:Q2048357 wdt:P170 ?composer. ?composer wdt:P169 ?film1. ?film1 rdfs:label \"A Woman of Paris\"@en. ?composer wdt:P169 ?film2. ?film2 rdfs:label \"Pay Day\"@en. ?editor wdt:P35 ?film3. ?film3 rdfs:label \"Modern Times\"@en. ?star wdt:P169 ?film4. ?film4 rdfs:label \"City Lights\"@en. ?editor wdt:P35 ?film5. ?film5 rdfs:label \"The Essanay-Chaplin Revue of 1916\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q470895 .\",\n      \"?composer wdt:P86 wd:Q199039 .\",\n      \"?composer wdt:P1040 wd:Q238211 .\",\n      \"?composer wdt:P1040 wd:Q45602 .\",\n      \"?composer wdt:P1040 wd:Q3986814 .\",\n      \"?composer wdt:P161 wd:Q238211 .\",\n      \"?composer wdt:P161 wd:Q45602 .\",\n      \"?composer wdt:P161 wd:Q3986814 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q470895 . ?composer wdt:P86 wd:Q199039 . ?composer wdt:P1040 wd:Q238211 . ?composer wdt:P1040 wd:Q45602 . ?composer wdt:P1040 wd:Q3986814 . ?composer wdt:P161 wd:Q238211 . ?composer wdt:P161 wd:Q45602 . ?composer wdt:P161 wd:Q3986814 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3584 kg:9350 .\",\n      \"?resource kg:3584 kg:8907 .\",\n      \"?resource kg:1558 kg:2929 .\",\n      \"?resource kg:1558 kg:6990 .\",\n      \"?resource kg:7599 kg:3709 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3584 kg:9350 . ?resource kg:3584 kg:8907 . ?resource kg:1558 kg:2929 . ?resource kg:1558 kg:6990 . ?resource kg:7599 kg:3709 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P57 wd:Q608964.\",\n    \"  ?movie wdt:P161 wd:Q106664;\",\n    \"  wdt:P162 wd:Q106664;\",\n    \"  wdt:P57 wd:Q38964.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q608964. ?movie wdt:P161 wd:Q106664; wdt:P162 wd:Q106664; wdt:P57 wd:Q38964. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  VALUES ?director { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 }\",\n    \"  VALUES ?writer { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 }\",\n    \"  VALUES ?editor { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 }\",\n    \"  ?project wdt:P571 ?director.\",\n    \"  ?project wdt:P582 ?writer.\",\n    \"  ?project wdt:P31 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { VALUES ?director { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 } VALUES ?writer { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 } VALUES ?editor { wd:Q105964278 wd:Q3009344 wd:Q105964279 wd:Q105964280 } ?project wdt:P571 ?director. ?project wdt:P582 ?writer. ?project wdt:P31 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q74535"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n      \"?project wdt:P57 wd:Q4023328.\",\n      \"?project wdt:P58 wd:Q4023328.\",\n      \"?project wdt:P1040 wd:Q4023328.\",\n      \"?project wdt:P57 wd:Q5836844.\",\n      \"?project wdt:P58 wd:Q5836844.\",\n      \"?project wdt:P1040 wd:Q5836844.\",\n      \"?project wdt:P57 wd:Q5658534.\",\n      \"?project wdt:P58 wd:Q5658534.\",\n      \"?project wdt:P1040 wd:Q5658534.\",\n      \"?project wdt:P57 wd:Q4022902.\",\n      \"?project wdt:P58 wd:Q4022902.\",\n      \"?project wdt:P1040 wd:Q4022902.\"\n    ]\n  }\n ", "normal_query": "SELECT ?project WHERE { ?project wdt:P57 wd:Q4023328. ?project wdt:P58 wd:Q4023328. ?project wdt:P1040 wd:Q4023328. ?project wdt:P57 wd:Q5836844. ?project wdt:P58 wd:Q5836844. ?project wdt:P1040 wd:Q5836844. ?project wdt:P57 wd:Q5658534. ?project wdt:P58 wd:Q5658534. ?project wdt:P1040 wd:Q5658534. ?project wdt:P57 wd:Q4022902. ?project wdt:P58 wd:Q4022902. ?project wdt:P1040 wd:Q4022902. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n      \"?project kg:5097/kg:6145 .\",\n      \"?project kg:5097/kg:2932 .\",\n      \"?project kg:5097/kg:4231 .\",\n      \"?project kg:5097/kg:4009 .\",\n      \"?project kg:9452/kg:6145 .\",\n      \"?project kg:9452/kg:2932 .\",\n      \"?project kg:9452/kg:4231 .\",\n      \"?project kg:9452/kg:4009 .\",\n      \"?project kg:7928/kg:6145 .\",\n      \"?project kg:7928/kg:2932 .\",\n      \"?project kg:7928/kg:4231 .\",\n      \"?project kg:7928/kg:4009 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?project WHERE { ?project kg:5097/kg:6145 . ?project kg:5097/kg:2932 . ?project kg:5097/kg:4231 . ?project kg:5097/kg:4009 . ?project kg:9452/kg:6145 . ?project kg:9452/kg:2932 . ?project kg:9452/kg:4231 . ?project kg:9452/kg:4009 . ?project kg:7928/kg:6145 . ?project kg:7928/kg:2932 . ?project kg:7928/kg:4231 . ?project kg:7928/kg:4009 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  ?filmEditor wdt:P31 wd:Q2064985.\",\n    \"  ?filmEditor wdt:P106 wd:Q33937.\",\n    \"  ?filmEditor wdt:P1080 wd:Q124464.\",\n    \"  ?filmEditor wdt:P1080 wd:Q50646.\",\n    \"  ?filmEditor wdt:P1080 wd:Q37934.\"\n    ]\n}", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P31 wd:Q2064985. ?filmEditor wdt:P106 wd:Q33937. ?filmEditor wdt:P1080 wd:Q124464. ?filmEditor wdt:P1080 wd:Q50646. ?filmEditor wdt:P1080 wd:Q37934. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P1040 wd:Q13471372 .\",\n      \"?filmEditor wdt:P58 wd:Q13471372 .\",\n      \"?filmEditor wdt:P1431 wd:Q13471372 .\",\n      \"?filmEditor wdt:P106 wd:Q7042855 .\",\n      \"?filmEditor wdt:P1040 wd:Q484679 .\",\n      \"?filmEditor wdt:P58 wd:Q484679 .\",\n      \"?filmEditor wdt:P1431 wd:Q484679 .\",\n      \"?filmEditor wdt:P1040 wd:Q483197 .\",\n      \"?filmEditor wdt:P58 wd:Q483197 .\",\n      \"?filmEditor wdt:P1431 wd:Q483197 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P1040 wd:Q13471372 . ?filmEditor wdt:P58 wd:Q13471372 . ?filmEditor wdt:P1431 wd:Q13471372 . ?filmEditor wdt:P106 wd:Q7042855 . ?filmEditor wdt:P1040 wd:Q484679 . ?filmEditor wdt:P58 wd:Q484679 . ?filmEditor wdt:P1431 wd:Q484679 . ?filmEditor wdt:P1040 wd:Q483197 . ?filmEditor wdt:P58 wd:Q483197 . ?filmEditor wdt:P1431 wd:Q483197 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1433/kg:3570 .\",\n      \"?resource kg:1433/kg:6357 .\",\n      \"?resource kg:1433/kg:9419 .\",\n      \"?resource kg:1433/kg:2395 .\",\n      \"?resource kg:1433/kg:4257 .\",\n      \"?resource kg:1433/kg:8287 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:1433/kg:3570 . ?resource kg:1433/kg:6357 . ?resource kg:1433/kg:9419 . ?resource kg:1433/kg:2395 . ?resource kg:1433/kg:4257 . ?resource kg:1433/kg:8287 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film (wdt:P577|wdt:P1686) ?producer.\",\n    \"  ?film rdfs:label ?title.\",\n    \"  FILTER(?title IN ('Fate', 'The Confession', 'The Waiting Room'))\",\n    \"  ?producer wdt:P30 ?role.\",\n    \"  FILTER(?role IN (wd:Q1246785, wd:Q931842, wd:Q1086640))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film (wdt:P577|wdt:P1686) ?producer. ?film rdfs:label ?title. FILTER(?title IN ('Fate', 'The Confession', 'The Waiting Room')) ?producer wdt:P30 ?role. FILTER(?role IN (wd:Q1246785, wd:Q931842, wd:Q1086640)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer wdt:P106 wd:Q3282637.\",\n      \"?producer wdt:P1431 wd:Q5437360.\",\n      \"?producer wdt:P1431 wd:Q12813010.\",\n      \"?producer wdt:P1431 wd:Q6084069.\",\n      \"?producer wdt:P58 wd:Q5437360.\",\n      \"?producer wdt:P58 wd:Q12813010.\",\n      \"?producer wdt:P58 wd:Q6084069.\",\n      \"?producer wdt:P1040 wd:Q5437360.\",\n      \"?producer wdt:P1040 wd:Q12813010.\",\n      \"?producer wdt:P1040 wd:Q6084069.\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637. ?producer wdt:P1431 wd:Q5437360. ?producer wdt:P1431 wd:Q12813010. ?producer wdt:P1431 wd:Q6084069. ?producer wdt:P58 wd:Q5437360. ?producer wdt:P58 wd:Q12813010. ?producer wdt:P58 wd:Q6084069. ?producer wdt:P1040 wd:Q5437360. ?producer wdt:P1040 wd:Q12813010. ?producer wdt:P1040 wd:Q6084069. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer kg:0440 kg:1742 .\",\n      \"?producer kg:8750 kg:1742 .\",\n      \"?producer kg:6372 kg:1742 .\",\n      \"?producer kg:0440 kg:0001 .\",\n      \"?producer kg:8750 kg:0001 .\",\n      \"?producer kg:6372 kg:0001 .\",\n      \"?producer kg:0440 kg:9766 .\",\n      \"?producer kg:8750 kg:9766 .\",\n      \"?producer kg:6372 kg:9766 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer kg:0440 kg:1742 . ?producer kg:8750 kg:1742 . ?producer kg:6372 kg:1742 . ?producer kg:0440 kg:0001 . ?producer kg:8750 kg:0001 . ?producer kg:6372 kg:0001 . ?producer kg:0440 kg:9766 . ?producer kg:8750 kg:9766 . ?producer kg:6372 kg:9766 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P577 ?date.\",\n    \"  FILTER(?date >= \\\"1960-01-01T00:00:00Z\\\"^^xsd:dateTime && ?date < \\\"2023-10-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P58 ?writer.\",\n    \"  ?writer wdt:P463 wd:Q79444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?date. FILTER(?date >= \"1960-01-01T00:00:00Z\"^^xsd:dateTime && ?date < \"2023-10-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P58 ?writer. ?writer wdt:P463 wd:Q79444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q2493884.\",\n      \"?writer wdt:P1040 wd:Q63993096.\",\n      \"?writer wdt:P1040 wd:Q2298257.\",\n      \"?writer wdt:P26 wd:Q312258.\",\n      \"?writer wdt:P737 wd:Q312258.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q2493884. ?writer wdt:P1040 wd:Q63993096. ?writer wdt:P1040 wd:Q2298257. ?writer wdt:P26 wd:Q312258. ?writer wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:0378 kg:4098 .\",\n      \"?writer kg:3972 kg:6351 .\",\n      \"?writer kg:3972 kg:7801 .\",\n      \"?writer kg:8833 kg:8782 .\",\n      \"?writer kg:8577 kg:8782 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:0378 kg:4098 . ?writer kg:3972 kg:6351 . ?writer kg:3972 kg:7801 . ?writer kg:8833 kg:8782 . ?writer kg:8577 kg:8782 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 wd:Q198606.\",\n    \"  ?film wdt:P175 wd:Q11424.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 wd:Q198606.\",\n    \"  ?film wdt:P175 wd:Q11424.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 wd:Q198606.\",\n    \"  ?film wdt:P175 wd:Q11424.\",\n    \"  ?director wdt:P31 wd:Q11424.\",\n    \"  ?director wdt:P577 wd:Q198606.\",\n    \"  ?director wdt:P175 wd:Q11424.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 wd:Q198606. ?film wdt:P175 wd:Q11424. ?film wdt:P31 wd:Q11424. ?film wdt:P577 wd:Q198606. ?film wdt:P175 wd:Q11424. ?film wdt:P31 wd:Q11424. ?film wdt:P577 wd:Q198606. ?film wdt:P175 wd:Q11424. ?director wdt:P31 wd:Q11424. ?director wdt:P577 wd:Q198606. ?director wdt:P175 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q166739.\",\n      \"?director wdt:P86 wd:Q1140317.\",\n      \"?director wdt:P58 wd:Q1140317.\",\n      \"?director wdt:P161 wd:Q1140317.\",\n      \"?director wdt:P57 wd:Q109116.\",\n      \"?director wdt:P86 wd:Q109116.\",\n      \"?director wdt:P58 wd:Q109116.\",\n      \"?director wdt:P161 wd:Q109116.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q166739. ?director wdt:P86 wd:Q1140317. ?director wdt:P58 wd:Q1140317. ?director wdt:P161 wd:Q1140317. ?director wdt:P57 wd:Q109116. ?director wdt:P86 wd:Q109116. ?director wdt:P58 wd:Q109116. ?director wdt:P161 wd:Q109116. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8521 kg:0540.\",\n      \"?resource kg:2027 kg:6175.\",\n      \"?resource kg:3835 kg:6175.\",\n      \"?resource kg:8521 kg:6175.\",\n      \"?resource kg:4961 kg:6175.\",\n      \"?resource kg:2027 kg:7067.\",\n      \"?resource kg:3835 kg:7067.\",\n      \"?resource kg:8521 kg:7067.\",\n      \"?resource kg:4961 kg:7067.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8521 kg:0540. ?resource kg:2027 kg:6175. ?resource kg:3835 kg:6175. ?resource kg:8521 kg:6175. ?resource kg:4961 kg:6175. ?resource kg:2027 kg:7067. ?resource kg:3835 kg:7067. ?resource kg:8521 kg:7067. ?resource kg:4961 kg:7067. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q1234567 p:P108 ?statement1.\",\n    \"  ?statement1 ps:P108 wd:Q1234567; pq:P39 ?role1.\",\n    \"  ?statement1 prov:wasDerivedFrom ?source1.\",\n    \"  ?source1 pr:P31 wd:Q11424.\",\n    \"  wd:Q1234568 p:P108 ?statement2.\",\n    \"  ?statement2 ps:P108 wd:Q1234567; pq:P39 ?role2.\",\n    \"  ?statement2 prov:wasDerivedFrom ?source2.\",\n    \"  ?source2 pr:P31 wd:Q11424.\",\n    \"  FILTER (?role1 = wd:Q805674 AND ?role2 = wd:Q805674).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q1234567 p:P108 ?statement1. ?statement1 ps:P108 wd:Q1234567; pq:P39 ?role1. ?statement1 prov:wasDerivedFrom ?source1. ?source1 pr:P31 wd:Q11424. wd:Q1234568 p:P108 ?statement2. ?statement2 ps:P108 wd:Q1234567; pq:P39 ?role2. ?statement2 prov:wasDerivedFrom ?source2. ?source2 pr:P31 wd:Q11424. FILTER (?role1 = wd:Q805674 AND ?role2 = wd:Q805674). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P161 wd:Q1165050.\",\n      \"?cinematographer wdt:P57 wd:Q1165050.\",\n      \"?cinematographer wdt:P58 wd:Q1165050.\",\n      \"?cinematographer wdt:P1040 wd:Q1165050.\",\n      \"?cinematographer wdt:P344 wd:Q1165050.\",\n      \"?cinematographer wdt:P57 wd:Q192115.\",\n      \"?cinematographer wdt:P58 wd:Q192115.\",\n      \"?cinematographer wdt:P1040 wd:Q192115.\",\n      \"?cinematographer wdt:P344 wd:Q192115.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P161 wd:Q1165050. ?cinematographer wdt:P57 wd:Q1165050. ?cinematographer wdt:P58 wd:Q1165050. ?cinematographer wdt:P1040 wd:Q1165050. ?cinematographer wdt:P344 wd:Q1165050. ?cinematographer wdt:P57 wd:Q192115. ?cinematographer wdt:P58 wd:Q192115. ?cinematographer wdt:P1040 wd:Q192115. ?cinematographer wdt:P344 wd:Q192115. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer kg:6254 kg:8571 .\",\n      \"?cinematographer kg:6254 kg:7570 .\",\n      \"?cinematographer kg:4600 kg:8571 .\",\n      \"?cinematographer kg:4600 kg:7570 .\",\n      \"?cinematographer kg:9668 kg:8571 .\",\n      \"?cinematographer kg:9668 kg:7570 .\",\n      \"?cinematographer kg:7569 kg:8571 .\",\n      \"?cinematographer kg:7569 kg:7570 .\",\n      \"?cinematographer kg:4610 kg:8571 .\",\n      \"?cinematographer kg:4610 kg:7570 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer kg:6254 kg:8571 . ?cinematographer kg:6254 kg:7570 . ?cinematographer kg:4600 kg:8571 . ?cinematographer kg:4600 kg:7570 . ?cinematographer kg:9668 kg:8571 . ?cinematographer kg:9668 kg:7570 . ?cinematographer kg:7569 kg:8571 . ?cinematographer kg:7569 kg:7570 . ?cinematographer kg:4610 kg:8571 . ?cinematographer kg:4610 kg:7570 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  wd:Q10642378 wdt:P162 ?cinematographer.\",\n    \"  wd:Q10642378 wdt:P95 ?editor.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\",\n    \"  ?cinematographer wdt:P1066 wd:Q10642378.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer ?editor WHERE { wd:Q10642378 wdt:P162 ?cinematographer. wd:Q10642378 wdt:P95 ?editor. ?cinematographer wdt:P1066 wd:Q10642378. ?cinematographer wdt:P1066 wd:Q10642378. ?cinematographer wdt:P1066 wd:Q10642378. ?cinematographer wdt:P1066 wd:Q10642378. ?cinematographer wdt:P1066 wd:Q10642378. ?cinematographer wdt:P1066 wd:Q10642378. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P161 ?cinematographer.\",\n      \"?film wdt:P1040 ?cinematographer.\",\n      \"?film wdt:P344 ?cinematographer.\",\n      \"VALUES ?film {\",\n        \"wd:Q507285\",\n        \"wd:Q862058\",\n        \"wd:Q114819\",\n        \"wd:Q2085\",\n        \"wd:Q3641257\",\n        \"wd:Q3485595\",\n        \"wd:Q56756907\"\n      ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P161 ?cinematographer. ?film wdt:P1040 ?cinematographer. ?film wdt:P344 ?cinematographer. VALUES ?film { wd:Q507285 wd:Q862058 wd:Q114819 wd:Q2085 wd:Q3641257 wd:Q3485595 wd:Q56756907 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n      \"?cinematographer kg:9765 kg:5484.\",\n      \"?cinematographer kg:8903 kg:9422.\",\n      \"?cinematographer kg:8903 kg:6104.\",\n      \"?cinematographer kg:8903 kg:9344.\",\n      \"?cinematographer kg:8903 kg:2112.\",\n      \"?cinematographer kg:8903 kg:9491.\",\n      \"?cinematographer kg:8903 kg:4868.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer kg:9765 kg:5484. ?cinematographer kg:8903 kg:9422. ?cinematographer kg:8903 kg:6104. ?cinematographer kg:8903 kg:9344. ?cinematographer kg:8903 kg:2112. ?cinematographer kg:8903 kg:9491. ?cinematographer kg:8903 kg:4868. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?editor ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P577 ?year.\",\n    \"  ?film wdt:P175 ?writer.\",\n    \"  ?film wdt:P98 ?editor.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?person wdt:P26 wd:Q30446.\",\n    \"  ?person wdt:P106 wd:Q3393466.\",\n    \"  ?person wdt:P108 wd:Q574106.\",\n    \"  ?film wdt:P26 ?person.\",\n    \"  FILTER(?year >= 1985 && ?year <= 2000)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?editor ?director WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?year. ?film wdt:P175 ?writer. ?film wdt:P98 ?editor. ?film wdt:P571 ?director. ?person wdt:P26 wd:Q30446. ?person wdt:P106 wd:Q3393466. ?person wdt:P108 wd:Q574106. ?film wdt:P26 ?person. FILTER(?year >= 1985 && ?year <= 2000) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q2493884.\",\n      \"?person wdt:P57 wd:Q2298257.\",\n      \"?person wdt:P58 wd:Q2493884.\",\n      \"?person wdt:P58 wd:Q2298257.\",\n      \"?person wdt:P1040 wd:Q2493884.\",\n      \"?person wdt:P1040 wd:Q2298257.\",\n      \"?person wdt:P26 wd:Q312258.\",\n      \"?person wdt:P737 wd:Q312258.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q2493884. ?person wdt:P57 wd:Q2298257. ?person wdt:P58 wd:Q2493884. ?person wdt:P58 wd:Q2298257. ?person wdt:P1040 wd:Q2493884. ?person wdt:P1040 wd:Q2298257. ?person wdt:P26 wd:Q312258. ?person wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2694 kg:6708 .\",\n      \"?resource kg:0393 kg:6708 .\",\n      \"?resource kg:5087 .\",\n      \"?resource kg:9098 .\",\n      \"?resource kg:9175 kg:6337 .\",\n      \"?resource kg:5873 kg:6337 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:2694 kg:6708 . ?resource kg:0393 kg:6708 . ?resource kg:5087 . ?resource kg:9098 . ?resource kg:9175 kg:6337 . ?resource kg:5873 kg:6337 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor ?executiveProducer ?cinematographer WHERE {\",\n    \"  wd:Q10726485 p:P31 wd:Q11424.\",\n    \"  wd:Q10726485 wdt:P577 ?date.\",\n    \"  wd:Q10726485 wdt:P161 ?editor.\",\n    \"  wd:Q10726485 wdt:P162 ?executiveProducer.\",\n    \"  wd:Q10726485 wdt:P163 ?cinematographer.\",\n    \"  ?editor wdt:P31 wd:Q33999.\",\n    \"  ?executiveProducer wdt:P31 wd:Q33999.\",\n    \"  ?cinematographer wdt:P31 wd:Q33999.\",\n    \"  ?editor wdt:P452 ?destiny.\",\n    \"  ?executiveProducer wdt:P452 ?waitingRoom.\",\n    \"  ?cinematographer wdt:P452 ?thirdPage.\",\n    \"  ?destiny wdt:P31 wd:Q10800976.\",\n    \"  ?waitingRoom wdt:P31 wd:Q10800976.\",\n    \"  ?thirdPage wdt:P31 wd:Q10800976.\"\n    ]\n  }\n ", "normal_query": "SELECT ?editor ?executiveProducer ?cinematographer WHERE { wd:Q10726485 p:P31 wd:Q11424. wd:Q10726485 wdt:P577 ?date. wd:Q10726485 wdt:P161 ?editor. wd:Q10726485 wdt:P162 ?executiveProducer. wd:Q10726485 wdt:P163 ?cinematographer. ?editor wdt:P31 wd:Q33999. ?executiveProducer wdt:P31 wd:Q33999. ?cinematographer wdt:P31 wd:Q33999. ?editor wdt:P452 ?destiny. ?executiveProducer wdt:P452 ?waitingRoom. ?cinematographer wdt:P452 ?thirdPage. ?destiny wdt:P31 wd:Q10800976. ?waitingRoom wdt:P31 wd:Q10800976. ?thirdPage wdt:P31 wd:Q10800976. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?editor ?executiveProducer ?cinematographer WHERE {\",\n    \"  wd:Q12813010 wdt:P1040 ?editor.\",\n    \"  wd:Q12813010 wdt:P1431 ?executiveProducer.\",\n    \"  wd:Q12813010 wdt:P344 ?cinematographer.\",\n    \"  ?editor wdt:P161 wd:Q5265241.\",\n    \"  ?editor wdt:P58 wd:Q5265241.\",\n    \"  ?executiveProducer wdt:P161 wd:Q6099428.\",\n    \"  ?executiveProducer wdt:P58 wd:Q6099428.\",\n    \"  ?cinematographer wdt:P161 wd:Q6084069.\",\n    \"  ?cinematographer wdt:P58 wd:Q6084069.\"\n    ]\n  }\n ", "normal_query": "SELECT ?editor ?executiveProducer ?cinematographer WHERE { wd:Q12813010 wdt:P1040 ?editor. wd:Q12813010 wdt:P1431 ?executiveProducer. wd:Q12813010 wdt:P344 ?cinematographer. ?editor wdt:P161 wd:Q5265241. ?editor wdt:P58 wd:Q5265241. ?executiveProducer wdt:P161 wd:Q6099428. ?executiveProducer wdt:P58 wd:Q6099428. ?cinematographer wdt:P161 wd:Q6084069. ?cinematographer wdt:P58 wd:Q6084069. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ ?resource kg:4163 kg:9523 . } UNION \",\n      \"{ ?resource kg:6971 kg:9523 . } UNION \",\n      \"{ ?resource kg:8006 kg:9523 . }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?resource kg:4163 kg:9946 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2123 kg:9946 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2874 kg:9946 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:4163 kg:0948 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2123 kg:0948 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2874 kg:0948 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:4163 kg:3463 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2123 kg:3463 . }\",\n    \"FILTER NOT EXISTS { ?resource kg:2874 kg:3463 . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4163 kg:9523 . } UNION { ?resource kg:6971 kg:9523 . } UNION { ?resource kg:8006 kg:9523 . } } FILTER NOT EXISTS { ?resource kg:4163 kg:9946 . } FILTER NOT EXISTS { ?resource kg:2123 kg:9946 . } FILTER NOT EXISTS { ?resource kg:2874 kg:9946 . } FILTER NOT EXISTS { ?resource kg:4163 kg:0948 . } FILTER NOT EXISTS { ?resource kg:2123 kg:0948 . } FILTER NOT EXISTS { ?resource kg:2874 kg:0948 . } FILTER NOT EXISTS { ?resource kg:4163 kg:3463 . } FILTER NOT EXISTS { ?resource kg:2123 kg:3463 . } FILTER NOT EXISTS { ?resource kg:2874 kg:3463 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q87654321 }\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P106 wd:Q339695.\",\n    \"  ?film wdt:P161 ?filmEditor.\",\n    \"  ?filmEditor wdt:P106 wd:Q339695.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q87654321 } ?film wdt:P31 wd:Q11424. ?film wdt:P106 wd:Q339695. ?film wdt:P161 ?filmEditor. ?filmEditor wdt:P106 wd:Q339695. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855.\",\n      \"?filmEditor wdt:P57 wd:Q199039.\",\n      \"?filmEditor wdt:P57 wd:Q45602.\",\n      \"?filmEditor wdt:P57 wd:Q166739.\",\n      \"?filmEditor wdt:P57 wd:Q2445896.\",\n      \"?filmEditor wdt:P58 wd:Q199039.\",\n      \"?filmEditor wdt:P58 wd:Q45602.\",\n      \"?filmEditor wdt:P58 wd:Q166739.\",\n      \"?filmEditor wdt:P58 wd:Q2445896.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855. ?filmEditor wdt:P57 wd:Q199039. ?filmEditor wdt:P57 wd:Q45602. ?filmEditor wdt:P57 wd:Q166739. ?filmEditor wdt:P57 wd:Q2445896. ?filmEditor wdt:P58 wd:Q199039. ?filmEditor wdt:P58 wd:Q45602. ?filmEditor wdt:P58 wd:Q166739. ?filmEditor wdt:P58 wd:Q2445896. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8046/kg:3822 .\",\n      \"?resource kg:8046/kg:6336 .\",\n      \"?resource kg:8046/kg:1978 .\",\n      \"?resource kg:8046/kg:7742 .\",\n      \"?resource kg:8046/kg:9435 .\",\n      \"?resource kg:8046/kg:7167 .\",\n      \"?resource kg:8046/kg:8783 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8046/kg:3822 . ?resource kg:8046/kg:6336 . ?resource kg:8046/kg:1978 . ?resource kg:8046/kg:7742 . ?resource kg:8046/kg:9435 . ?resource kg:8046/kg:7167 . ?resource kg:8046/kg:8783 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor WHERE {\",\n    \"  wd:Q107246985 wdt:P50 ?writer.\",\n    \"  wd:Q107246985 wdt:P383 ?executiveProducer.\",\n    \"  wd:Q107246985 wdt:P106 ?editor.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer ?executiveProducer ?editor WHERE { wd:Q107246985 wdt:P50 ?writer. wd:Q107246985 wdt:P383 ?executiveProducer. wd:Q107246985 wdt:P106 ?editor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P58 wd:Q6084069 .\",\n      \"?person wdt:P1431 wd:Q6084069 .\",\n      \"?person wdt:P1040 wd:Q6084069 .\",\n      \"?person wdt:P58 wd:Q5437360 .\",\n      \"?person wdt:P1431 wd:Q5437360 .\",\n      \"?person wdt:P1040 wd:Q5437360 .\",\n      \"?person wdt:P58 wd:Q12813010 .\",\n      \"?person wdt:P1431 wd:Q12813010 .\",\n      \"?person wdt:P1040 wd:Q12813010 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P58 wd:Q6084069 . ?person wdt:P1431 wd:Q6084069 . ?person wdt:P1040 wd:Q6084069 . ?person wdt:P58 wd:Q5437360 . ?person wdt:P1431 wd:Q5437360 . ?person wdt:P1040 wd:Q5437360 . ?person wdt:P58 wd:Q12813010 . ?person wdt:P1431 wd:Q12813010 . ?person wdt:P1040 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0403 kg:3108 .\",\n      \"?resource kg:2878 kg:3108 .\",\n      \"?resource kg:0108 kg:3108 .\",\n      \"?resource kg:0403 kg:7304 .\",\n      \"?resource kg:2878 kg:7304 .\",\n      \"?resource kg:0108 kg:7304 .\",\n      \"?resource kg:0403 kg:7556 .\",\n      \"?resource kg:2878 kg:7556 .\",\n      \"?resource kg:0108 kg:7556 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0403 kg:3108 . ?resource kg:2878 kg:3108 . ?resource kg:0108 kg:3108 . ?resource kg:0403 kg:7304 . ?resource kg:2878 kg:7304 . ?resource kg:0108 kg:7304 . ?resource kg:0403 kg:7556 . ?resource kg:2878 kg:7556 . ?resource kg:0108 kg:7556 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q106427 wd:Q35984 wd:Q106427 wd:Q106427 wd:Q106427 }.\",\n    \"  ?film wdt:P57 wd:Q106427 .\",\n    \"  ?film wdt:P31 wd:Q11424.}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q106427 wd:Q35984 wd:Q106427 wd:Q106427 wd:Q106427 }. ?film wdt:P57 wd:Q106427 . ?film wdt:P31 wd:Q11424.} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P57 wd:Q982339.\",\n      \"?film wdt:P57 wd:Q116760.\",\n      \"?film wdt:P57 wd:Q1033656.\",\n      \"?film wdt:P57 wd:Q7546.\",\n      \"?film wdt:P57 wd:Q1365463.\",\n      \"?film wdt:P58 wd:Q982339.\",\n      \"?film wdt:P58 wd:Q116760.\",\n      \"?film wdt:P58 wd:Q1033656.\",\n      \"?film wdt:P58 wd:Q7546.\",\n      \"?film wdt:P58 wd:Q1365463.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q982339. ?film wdt:P57 wd:Q116760. ?film wdt:P57 wd:Q1033656. ?film wdt:P57 wd:Q7546. ?film wdt:P57 wd:Q1365463. ?film wdt:P58 wd:Q982339. ?film wdt:P58 wd:Q116760. ?film wdt:P58 wd:Q1033656. ?film wdt:P58 wd:Q7546. ?film wdt:P58 wd:Q1365463. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film kg:4781 kg:3111 .\",\n      \"?film kg:1292/kg:6386 .\",\n      \"?film kg:1292/kg:5297 .\",\n      \"?film kg:1292/kg:5117 .\",\n      \"?film kg:1292/kg:1650 .\",\n      \"?film kg:1292/kg:8407 .\",\n      \"?film kg:1039/kg:6386 .\",\n      \"?film kg:1039/kg:5297 .\",\n      \"?film kg:1039/kg:5117 .\",\n      \"?film kg:1039/kg:1650 .\",\n      \"?film kg:1039/kg:8407 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:4781 kg:3111 . ?film kg:1292/kg:6386 . ?film kg:1292/kg:5297 . ?film kg:1292/kg:5117 . ?film kg:1292/kg:1650 . ?film kg:1292/kg:8407 . ?film kg:1039/kg:6386 . ?film kg:1039/kg:5297 . ?film kg:1039/kg:5117 . ?film kg:1039/kg:1650 . ?film kg:1039/kg:8407 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P1686 ?executiveProducer.\",\n    \"  ?film wdt:P1099 ?cinematographer.\",\n    \"  ?person wdt:P31 wd:Q28640.\",\n    \"  ?person wdt:P175 ?actorRole.\",\n    \"  ?person wdt:P1099 ?editorRole.\",\n    \"  ?person wdt:P1686 ?writerRole.\",\n    \"  VALUES ?film {wd:Q23456789 wd:Q98765432}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P1686 ?executiveProducer. ?film wdt:P1099 ?cinematographer. ?person wdt:P31 wd:Q28640. ?person wdt:P175 ?actorRole. ?person wdt:P1099 ?editorRole. ?person wdt:P1686 ?writerRole. VALUES ?film {wd:Q23456789 wd:Q98765432}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1431 wd:Q6084069.\",\n      \"?person wdt:P1431 wd:Q5265241.\",\n      \"?person wdt:P1431 wd:Q12813010.\",\n      \"?person wdt:P344 wd:Q6084069.\",\n      \"?person wdt:P344 wd:Q5265241.\",\n      \"?person wdt:P344 wd:Q12813010.\",\n      \"?person wdt:P1040 wd:Q6084069.\",\n      \"?person wdt:P1040 wd:Q5265241.\",\n      \"?person wdt:P1040 wd:Q12813010.\",\n      \"?person wdt:P58 wd:Q6084069.\",\n      \"?person wdt:P58 wd:Q5265241.\",\n      \"?person wdt:P58 wd:Q12813010.\",\n      \"?person wdt:P161 wd:Q6084069.\",\n      \"?person wdt:P161 wd:Q5265241.\",\n      \"?person wdt:P161 wd:Q12813010.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P1431 wd:Q6084069. ?person wdt:P1431 wd:Q5265241. ?person wdt:P1431 wd:Q12813010. ?person wdt:P344 wd:Q6084069. ?person wdt:P344 wd:Q5265241. ?person wdt:P344 wd:Q12813010. ?person wdt:P1040 wd:Q6084069. ?person wdt:P1040 wd:Q5265241. ?person wdt:P1040 wd:Q12813010. ?person wdt:P58 wd:Q6084069. ?person wdt:P58 wd:Q5265241. ?person wdt:P58 wd:Q12813010. ?person wdt:P161 wd:Q6084069. ?person wdt:P161 wd:Q5265241. ?person wdt:P161 wd:Q12813010. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ ?resource kg:5397 kg:7690 . } UNION { ?resource kg:5397 kg:4125 . } UNION { ?resource kg:5397 kg:4516 . }\",\n      \"{ ?resource kg:8008 kg:7690 . } UNION { ?resource kg:8008 kg:4125 . } UNION { ?resource kg:8008 kg:4516 . }\",\n      \"?resource kg:4870 ?film .\",\n      \"?resource kg:1635 ?film .\",\n      \"?resource kg:5844 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5397 kg:7690 . } UNION { ?resource kg:5397 kg:4125 . } UNION { ?resource kg:5397 kg:4516 . } { ?resource kg:8008 kg:7690 . } UNION { ?resource kg:8008 kg:4125 . } UNION { ?resource kg:8008 kg:4516 . } ?resource kg:4870 ?film . ?resource kg:1635 ?film . ?resource kg:5844 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q2064985 wdt:P31 wd:Q7397.\",\n    \"  wd:Q2064985 wdt:P26 wd:Q2064985_spouse.\",\n    \"  ?spouse wdt:P106 wd:Q339695;\",\n    \"         wdt:P170 wd:Q2064985_movies.\",\n    \"}\",\n    \"VALUES ?movies {wd:Q1124400 wd:Q1124401 wd:Q1124402 wd:Q1124403 wd:Q1124404}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2064985 wdt:P31 wd:Q7397. wd:Q2064985 wdt:P26 wd:Q2064985_spouse. ?spouse wdt:P106 wd:Q339695; wdt:P170 wd:Q2064985_movies. } VALUES ?movies {wd:Q1124400 wd:Q1124401 wd:Q1124402 wd:Q1124403 wd:Q1124404} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"VALUES ?film { wd:Q878673 wd:Q567519 wd:Q543382 wd:Q327427 wd:Q570483 }\",\n      \"?spouse wdt:P26 ?editor.\",\n      \"?editor wdt:P1040 ?film.\",\n      \"?editor wdt:P106 wd:Q7042855.\",\n      \"?spouse wdt:P58 ?film.\"\n    ]\n  }\n ", "normal_query": "SELECT ?spouse WHERE { VALUES ?film { wd:Q878673 wd:Q567519 wd:Q543382 wd:Q327427 wd:Q570483 } ?spouse wdt:P26 ?editor. ?editor wdt:P1040 ?film. ?editor wdt:P106 wd:Q7042855. ?spouse wdt:P58 ?film. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?film kg:2960 ?director.\",\n      \"?director kg:8794 ?spouse.\",\n      \"?spouse kg:6405 kg:7957.\",\n      \"VALUES ?film { kg:4703 kg:2308 kg:9613 kg:3549 kg:9634 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?film kg:2960 ?director. ?director kg:8794 ?spouse. ?spouse kg:6405 kg:7957. VALUES ?film { kg:4703 kg:2308 kg:9613 kg:3549 kg:9634 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmMaker WHERE {\",\n    \"  ?filmMaker wdt:P106 wd:Q33949.\",\n    \"  ?filmMaker wdt:P571 ?birthDate.\",\n    \"  ?filmMaker wdt:P21 wd:Q6581072.\",\n    \"  ?filmMaker wdt:P1080 ?work.\",\n    \"  ?work wdt:P31 wd:Q494942.\",\n    \"  ?work wdt:P179 ?director.\",\n    \"  ?work wdt:P50 ?writer.\",\n    \"  ?work wdt:P98 ?editor.\",\n    \"  FILTER(?filmMaker = ?director && ?filmMaker = ?writer && ?filmMaker = ?editor).\",\n    \"  VALUES ?work {wd:Q1234567 wd:Q8765432 wd:Q9876543}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmMaker WHERE { ?filmMaker wdt:P106 wd:Q33949. ?filmMaker wdt:P571 ?birthDate. ?filmMaker wdt:P21 wd:Q6581072. ?filmMaker wdt:P1080 ?work. ?work wdt:P31 wd:Q494942. ?work wdt:P179 ?director. ?work wdt:P50 ?writer. ?work wdt:P98 ?editor. FILTER(?filmMaker = ?director && ?filmMaker = ?writer && ?filmMaker = ?editor). VALUES ?work {wd:Q1234567 wd:Q8765432 wd:Q9876543}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P21 wd:Q6581072.\",\n      \"?filmEditor wdt:P57 wd:Q497617.\",\n      \"?filmEditor wdt:P57 wd:Q158069.\",\n      \"?filmEditor wdt:P57 wd:Q156497.\",\n      \"?filmEditor wdt:P58 wd:Q497617.\",\n      \"?filmEditor wdt:P58 wd:Q158069.\",\n      \"?filmEditor wdt:P58 wd:Q156497.\",\n      \"?filmEditor wdt:P1040 wd:Q497617.\",\n      \"?filmEditor wdt:P1040 wd:Q158069.\",\n      \"?filmEditor wdt:P1040 wd:Q156497.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P21 wd:Q6581072. ?filmEditor wdt:P57 wd:Q497617. ?filmEditor wdt:P57 wd:Q158069. ?filmEditor wdt:P57 wd:Q156497. ?filmEditor wdt:P58 wd:Q497617. ?filmEditor wdt:P58 wd:Q158069. ?filmEditor wdt:P58 wd:Q156497. ?filmEditor wdt:P1040 wd:Q497617. ?filmEditor wdt:P1040 wd:Q158069. ?filmEditor wdt:P1040 wd:Q156497. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?person kg:4957 ?film .\",\n      \"?person kg:3486 ?film .\",\n      \"?person kg:0469 ?film .\",\n      \"?person kg:7114 true .\",\n      \"VALUES ?film { kg:3675 kg:7567 kg:8706 }\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?person kg:4957 ?film . ?person kg:3486 ?film . ?person kg:0469 ?film . ?person kg:7114 true . VALUES ?film { kg:3675 kg:7567 kg:8706 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"  ?editor wdt:P31 wd:Q33967.\",\n    \"  ?editor wdt:P2868 \\\"The Crazies\\\".\",\n    \"  ?editor wdt:P400 wd:Q56646.\",\n    \"  ?editor wdt:P106 wd:Q33967.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor WHERE { ?editor wdt:P31 wd:Q33967. ?editor wdt:P2868 \"The Crazies\". ?editor wdt:P400 wd:Q56646. ?editor wdt:P106 wd:Q33967. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P58 wd:Q219170 .\", \"# Day of the Dead\",\n      \"?person wdt:P58 wd:Q219155 .\", \"# Dawn of the Dead\",\n      \"?person wdt:P58 wd:Q198557 .\", \"# Monkey Shines\",\n      \"?person wdt:P58 wd:Q1277329 .\", \"# Survival of the Dead\",\n      \"?person wdt:P57 wd:Q627060 .\", \"# The Crazies\",\n      \"?person wdt:P1040 wd:Q627060 .\", \"# The Crazies\",\n      \"?person wdt:P27 wd:Q16 .\", \"# Canada\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P58 wd:Q219170 . ?person wdt:P58 wd:Q219155 . ?person wdt:P58 wd:Q198557 . ?person wdt:P58 wd:Q1277329 . ?person wdt:P57 wd:Q627060 . ?person wdt:P1040 wd:Q627060 . ?person wdt:P27 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:4112 kg:3077.\",\n      \"?person kg:6796 kg:3778.\",\n      \"?person kg:6796 kg:5806.\",\n      \"?person kg:6796 kg:1818.\",\n      \"?person kg:2946 kg:1818.\",\n      \"?person kg:6796 kg:8393.\",\n      \"?person kg:8393 kg:0019.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:4112 kg:3077. ?person kg:6796 kg:3778. ?person kg:6796 kg:5806. ?person kg:6796 kg:1818. ?person kg:2946 kg:1818. ?person kg:6796 kg:8393. ?person kg:8393 kg:0019. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n    \"  wd:Q1072468 wdt:P571 ?director.\",\n    \"  wd:Q1072468 wdt:P139 ?executiveProducer.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?executiveProducer wdt:P31 wd:Q33999.\",\n    \"  ?director wdt:P571 ?movie1.\",\n    \"  ?executiveProducer wdt:P571 ?movie2.\",\n    \"  ?movie1 wdt:P31 wd:Q1048626.\",\n    \"  ?movie2 wdt:P31 wd:Q1048626.\",\n    \"  ?director wdt:P571 ?movie3.\",\n    \"  ?executiveProducer wdt:P571 ?movie4.\",\n    \"  ?movie3 wdt:P31 wd:Q1048626.\",\n    \"  ?movie4 wdt:P31 wd:Q1048626.\",\n    \"  ?director wdt:P571 ?movie5.\",\n    \"  ?executiveProducer wdt:P571 ?movie6.\",\n    \"  ?movie5 wdt:P31 wd:Q1048626.\",\n    \"  ?movie6 wdt:P31 wd:Q1048626.\",\n    \"  ?director wdt:P571 ?movie7.\",\n    \"  ?executiveProducer wdt:P571 ?movie8.\",\n    \"  ?movie7 wdt:P31 wd:Q1048626.\",\n    \"  ?movie8 wdt:P31 wd:Q1048626.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?executiveProducer WHERE { wd:Q1072468 wdt:P571 ?director. wd:Q1072468 wdt:P139 ?executiveProducer. ?director wdt:P31 wd:Q33999. ?executiveProducer wdt:P31 wd:Q33999. ?director wdt:P571 ?movie1. ?executiveProducer wdt:P571 ?movie2. ?movie1 wdt:P31 wd:Q1048626. ?movie2 wdt:P31 wd:Q1048626. ?director wdt:P571 ?movie3. ?executiveProducer wdt:P571 ?movie4. ?movie3 wdt:P31 wd:Q1048626. ?movie4 wdt:P31 wd:Q1048626. ?director wdt:P571 ?movie5. ?executiveProducer wdt:P571 ?movie6. ?movie5 wdt:P31 wd:Q1048626. ?movie6 wdt:P31 wd:Q1048626. ?director wdt:P571 ?movie7. ?executiveProducer wdt:P571 ?movie8. ?movie7 wdt:P31 wd:Q1048626. ?movie8 wdt:P31 wd:Q1048626. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n      \"?movie wdt:P57 ?director.\",\n      \"?movie wdt:P1431 ?executiveProducer.\",\n      \"VALUES ?movie {wd:Q206182}\",\n      \"?otherMovie wdt:P57 ?director.\",\n      \"?otherMovie wdt:P1431 ?executiveProducer.\",\n      \"VALUES ?otherMovie {wd:Q378013 wd:Q391143 wd:Q594033 wd:Q232108}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?executiveProducer WHERE { ?movie wdt:P57 ?director. ?movie wdt:P1431 ?executiveProducer. VALUES ?movie {wd:Q206182} ?otherMovie wdt:P57 ?director. ?otherMovie wdt:P1431 ?executiveProducer. VALUES ?otherMovie {wd:Q378013 wd:Q391143 wd:Q594033 wd:Q232108} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q36970"]], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n    \"query\": [\n        \"SELECT ?director ?executiveProducer WHERE {\",\n            \"?movie kg:3421 ?director .\",\n            \"?movie kg:7107 ?executiveProducer .\",\n            \"VALUES ?movie { kg:8467 }\",\n            \"FILTER ( ?director = ?executiveProducer )\",\n        \"}\",\n        \"SELECT ?director WHERE {\",\n            \"kg:2393 kg:3421 ?director .\",\n            \"kg:0536 kg:3421 ?director .\",\n            \"kg:2798 kg:3421 ?director .\",\n            \"kg:1055 kg:3421 ?director .\",\n        \"}\",\n        \"SELECT ?screenwriter WHERE {\",\n            \"kg:2393 kg:5272 ?screenwriter .\",\n            \"kg:0536 kg:5272 ?screenwriter .\",\n            \"kg:2798 kg:5272 ?screenwriter .\",\n            \"kg:1055 kg:5272 ?screenwriter .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?director ?executiveProducer WHERE { ?movie kg:3421 ?director . ?movie kg:7107 ?executiveProducer . VALUES ?movie { kg:8467 } FILTER ( ?director = ?executiveProducer ) } SELECT ?director WHERE { kg:2393 kg:3421 ?director . kg:0536 kg:3421 ?director . kg:2798 kg:3421 ?director . kg:1055 kg:3421 ?director . } SELECT ?screenwriter WHERE { kg:2393 kg:5272 ?screenwriter . kg:0536 kg:5272 ?screenwriter . kg:2798 kg:5272 ?screenwriter . kg:1055 kg:5272 ?screenwriter . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P179 wd:Q1062336.\",\n    \"  ?person wdt:P108 wd:Q1062336.\",\n    \"  ?person wdt:P108 wd:Q45666.\",\n    \"  ?person wdt:P108 wd:Q79346.\",\n    \"  ?person wdt:P108 wd:Q20661.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P179 wd:Q1062336. ?person wdt:P108 wd:Q1062336. ?person wdt:P108 wd:Q45666. ?person wdt:P108 wd:Q79346. ?person wdt:P108 wd:Q20661. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P112 wd:Q7095994.\",\n      \"?person wdt:P108 wd:Q37033.\",\n      \"?person wdt:P108 wd:Q42944.\",\n      \"?person wdt:P108 wd:Q7432436.\",\n      \"?person wdt:P108 wd:Q7204713.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P112 wd:Q7095994. ?person wdt:P108 wd:Q37033. ?person wdt:P108 wd:Q42944. ?person wdt:P108 wd:Q7432436. ?person wdt:P108 wd:Q7204713. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4034/kg:9078 .\",\n      \"?resource kg:4034/kg:0863 .\",\n      \"?resource kg:4034/kg:5015 .\",\n      \"?resource kg:4034/kg:5933 .\",\n      \"?resource kg:4034/kg:6742 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:4034/kg:9078 . ?resource kg:4034/kg:0863 . ?resource kg:4034/kg:5015 . ?resource kg:4034/kg:5933 . ?resource kg:4034/kg:6742 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P31 wd:Q11424.\",\n    \"  ?movie wdt:P577 ?date.\",\n    \"  ?movie wdt:P1680 wd:Q934444.\",\n    \"  ?movie wdt:P1680 wd:Q1059642.\",\n    \"  ?movie wdt:P1680 wd:Q75364.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P577 ?date. ?movie wdt:P1680 wd:Q934444. ?movie wdt:P1680 wd:Q1059642. ?movie wdt:P1680 wd:Q75364. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P57 wd:Q1687239.\",\n      \"?movie wdt:P57 wd:Q35979475.\",\n      \"?movie wdt:P57 wd:Q562108.\",\n      \"?movie wdt:P1040 wd:Q1687239.\",\n      \"?movie wdt:P1040 wd:Q35979475.\",\n      \"?movie wdt:P1040 wd:Q562108.\",\n      \"?movie wdt:P58 wd:Q1687239.\",\n      \"?movie wdt:P58 wd:Q35979475.\",\n      \"?movie wdt:P58 wd:Q562108.\",\n      \"?movie wdt:P162 wd:Q1687239.\",\n      \"?movie wdt:P162 wd:Q35979475.\",\n      \"?movie wdt:P162 wd:Q562108.\"\n    ]\n  }\n ", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P57 wd:Q1687239. ?movie wdt:P57 wd:Q35979475. ?movie wdt:P57 wd:Q562108. ?movie wdt:P1040 wd:Q1687239. ?movie wdt:P1040 wd:Q35979475. ?movie wdt:P1040 wd:Q562108. ?movie wdt:P58 wd:Q1687239. ?movie wdt:P58 wd:Q35979475. ?movie wdt:P58 wd:Q562108. ?movie wdt:P162 wd:Q1687239. ?movie wdt:P162 wd:Q35979475. ?movie wdt:P162 wd:Q562108. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie kg:2226 kg:1439 .\",\n      \"?movie kg:8129 kg:7110 .\",\n      \"?movie kg:8129 kg:2361 .\",\n      \"?movie kg:8129 kg:0116 .\",\n      \"?movie kg:1174 kg:7110 .\",\n      \"?movie kg:1174 kg:2361 .\",\n      \"?movie kg:1174 kg:0116 .\",\n      \"?movie kg:2722 kg:7110 .\",\n      \"?movie kg:2722 kg:2361 .\",\n      \"?movie kg:2722 kg:0116 .\",\n      \"?movie kg:0980 kg:7110 .\",\n      \"?movie kg:0980 kg:2361 .\",\n      \"?movie kg:0980 kg:0116 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?movie WHERE { ?movie kg:2226 kg:1439 . ?movie kg:8129 kg:7110 . ?movie kg:8129 kg:2361 . ?movie kg:8129 kg:0116 . ?movie kg:1174 kg:7110 . ?movie kg:1174 kg:2361 . ?movie kg:1174 kg:0116 . ?movie kg:2722 kg:7110 . ?movie kg:2722 kg:2361 . ?movie kg:2722 kg:0116 . ?movie kg:0980 kg:7110 . ?movie kg:0980 kg:2361 . ?movie kg:0980 kg:0116 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P106 wd:Q33988.\",\n      \"?person wdt:P57 wd:Q24860.\",\n      \"?person wdt:P57 wd:Q106366.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P57 wd:Q24860. ?person wdt:P57 wd:Q106366. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P58 wd:Q192115.\",\n      \"?person wdt:P57 wd:Q192115.\",\n      \"?person wdt:P344 wd:Q192115.\",\n      \"?person wdt:P161 wd:Q192115.\",\n      \"?person wdt:P1040 wd:Q192115.\",\n      \"?person wdt:P58 wd:Q656357.\",\n      \"?person wdt:P57 wd:Q656357.\",\n      \"?person wdt:P344 wd:Q656357.\",\n      \"?person wdt:P161 wd:Q656357.\",\n      \"?person wdt:P1040 wd:Q656357.\",\n      \"?person wdt:P1431 wd:Q15622760.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P58 wd:Q192115. ?person wdt:P57 wd:Q192115. ?person wdt:P344 wd:Q192115. ?person wdt:P161 wd:Q192115. ?person wdt:P1040 wd:Q192115. ?person wdt:P58 wd:Q656357. ?person wdt:P57 wd:Q656357. ?person wdt:P344 wd:Q656357. ?person wdt:P161 wd:Q656357. ?person wdt:P1040 wd:Q656357. ?person wdt:P1431 wd:Q15622760. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?person WHERE {\",\n            \"?person kg:8401 kg:5842 .\",\n            \"?person kg:6948 kg:5842 .\",\n            \"?person kg:9575 kg:5842 .\",\n            \"?person kg:3797 kg:5842 .\",\n            \"?person kg:5397 kg:5842 .\",\n            \"?person kg:6106 kg:1113 .\",\n            \"?person kg:8401 kg:6130 .\",\n            \"?person kg:6948 kg:6130 .\",\n            \"?person kg:9575 kg:6130 .\",\n            \"?person kg:3797 kg:6130 .\",\n            \"?person kg:5397 kg:6130 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:8401 kg:5842 . ?person kg:6948 kg:5842 . ?person kg:9575 kg:5842 . ?person kg:3797 kg:5842 . ?person kg:5397 kg:5842 . ?person kg:6106 kg:1113 . ?person kg:8401 kg:6130 . ?person kg:6948 kg:6130 . ?person kg:9575 kg:6130 . ?person kg:3797 kg:6130 . ?person kg:5397 kg:6130 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film1 wdt:P31 wd:Q11424.\",\n    \"  ?film1 rdfs:label \\\"This Night\\\"@en.\",\n    \"  ?film1 wdt:P571 ?director1.\",\n    \"  ?film1 wdt:P162 ?writer1.\",\n    \"  ?film1 wdt:P860 ?cinematographer1.\",\n    \"  ?film2 rdfs:label \\\"Rio das Mortes\\\"@en.\",\n    \"  ?film2 wdt:P31 wd:Q11424.\",\n    \"  ?film2 wdt:P571 ?director2.\",\n    \"  ?film2 wdt:P162 ?writer2.\",\n    \"  ?film2 wdt:P860 ?cinematographer2.\",\n    \"  ?film3 rdfs:label \\\"Lili Marleen\\\"@en.\",\n    \"  ?film3 wdt:P31 wd:Q11424.\",\n    \"  ?film3 wdt:P571 ?director3.\",\n    \"  ?film3 wdt:P162 ?writer3.\",\n    \"  ?film3 wdt:P860 ?cinematographer3.\",\n    \"  ?film4 rdfs:label \\\"Whity\\\"@en.\",\n    \"  ?film4 wdt:P31 wd:Q11424.\",\n    \"  ?film4 wdt:P571 ?director4.\",\n    \"  ?film4 wdt:P162 ?writer4.\",\n    \"  ?film4 wdt:P860 ?cinematographer4.\",\n    \"  BIND(COALESCE(?director1, ?writer1, ?cinematographer1) AS ?person).\",\n    \"  FILTER(?person = ?director2 && ?person = ?writer2 && ?person = ?cinematographer2).\",\n    \"  FILTER(?person = ?director3 && ?person = ?writer3 && ?person = ?cinematographer3).\",\n    \"  FILTER(?person = ?director4 && ?person = ?writer4 && ?person = ?cinematographer4).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 rdfs:label \"This Night\"@en. ?film1 wdt:P571 ?director1. ?film1 wdt:P162 ?writer1. ?film1 wdt:P860 ?cinematographer1. ?film2 rdfs:label \"Rio das Mortes\"@en. ?film2 wdt:P31 wd:Q11424. ?film2 wdt:P571 ?director2. ?film2 wdt:P162 ?writer2. ?film2 wdt:P860 ?cinematographer2. ?film3 rdfs:label \"Lili Marleen\"@en. ?film3 wdt:P31 wd:Q11424. ?film3 wdt:P571 ?director3. ?film3 wdt:P162 ?writer3. ?film3 wdt:P860 ?cinematographer3. ?film4 rdfs:label \"Whity\"@en. ?film4 wdt:P31 wd:Q11424. ?film4 wdt:P571 ?director4. ?film4 wdt:P162 ?writer4. ?film4 wdt:P860 ?cinematographer4. BIND(COALESCE(?director1, ?writer1, ?cinematographer1) AS ?person). FILTER(?person = ?director2 && ?person = ?writer2 && ?person = ?cinematographer2). FILTER(?person = ?director3 && ?person = ?writer3 && ?person = ?cinematographer3). FILTER(?person = ?director4 && ?person = ?writer4 && ?person = ?cinematographer4). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1699716.\",\n      \"?person wdt:P58 wd:Q1699716.\",\n      \"?person wdt:P344 wd:Q1699716.\",\n      \"?person wdt:P58 wd:Q823767.\",\n      \"?person wdt:P1040 wd:Q823767.\",\n      \"?person wdt:P58 wd:Q686125.\",\n      \"?person wdt:P1040 wd:Q686125.\",\n      \"?person wdt:P58 wd:Q327427.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1699716. ?person wdt:P58 wd:Q1699716. ?person wdt:P344 wd:Q1699716. ?person wdt:P58 wd:Q823767. ?person wdt:P1040 wd:Q823767. ?person wdt:P58 wd:Q686125. ?person wdt:P1040 wd:Q686125. ?person wdt:P58 wd:Q327427. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:0671/kg:2058.\",\n      \"?person kg:1289/kg:2058.\",\n      \"?person kg:9084/kg:2058.\",\n      \"?person kg:1289/kg:0618.\",\n      \"?person kg:7206/kg:0618.\",\n      \"?person kg:1289/kg:8658.\",\n      \"?person kg:7206/kg:8658.\",\n      \"?person kg:1289/kg:3976.\",\n      \"?person kg:7206/kg:3976.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:0671/kg:2058. ?person kg:1289/kg:2058. ?person kg:9084/kg:2058. ?person kg:1289/kg:0618. ?person kg:7206/kg:0618. ?person kg:1289/kg:8658. ?person kg:7206/kg:8658. ?person kg:1289/kg:3976. ?person kg:7206/kg:3976. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1067248 wdt:P31 wd:Q594658.\",\n    \"  wd:Q1067248 wdt:P170 wd:Q30.\",\n    \"  ?film wdt:P57 wd:Q1067248.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  FILTER(?film IN (wd:Q19344, wd:Q11424, wd:Q594658))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1067248 wdt:P31 wd:Q594658. wd:Q1067248 wdt:P170 wd:Q30. ?film wdt:P57 wd:Q1067248. ?film wdt:P31 wd:Q11424. FILTER(?film IN (wd:Q19344, wd:Q11424, wd:Q594658)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P57 wd:Q623051.\",\n      \"?cinematographer wdt:P27 wd:Q30.\",\n      \"?cinematographer wdt:P344 wd:Q623051.\",\n      \"?cinematographer wdt:P58 wd:Q1903317.\",\n      \"?cinematographer wdt:P58 wd:Q2520777.\",\n      \"?cinematographer wdt:P58 wd:Q627060.\",\n      \"?cinematographer wdt:P1040 wd:Q1903317.\",\n      \"?cinematographer wdt:P1040 wd:Q2520777.\",\n      \"?cinematographer wdt:P1040 wd:Q627060.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P57 wd:Q623051. ?cinematographer wdt:P27 wd:Q30. ?cinematographer wdt:P344 wd:Q623051. ?cinematographer wdt:P58 wd:Q1903317. ?cinematographer wdt:P58 wd:Q2520777. ?cinematographer wdt:P58 wd:Q627060. ?cinematographer wdt:P1040 wd:Q1903317. ?cinematographer wdt:P1040 wd:Q2520777. ?cinematographer wdt:P1040 wd:Q627060. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8173 kg:5535 .\",\n      \"?resource kg:8173 kg:3266 .\",\n      \"?resource kg:8173 kg:8900 .\",\n      \"?resource kg:5180 kg:5535 .\",\n      \"?resource kg:5180 kg:3266 .\",\n      \"?resource kg:5180 kg:8900 .\",\n      \"?resource kg:7874 kg:5535 .\",\n      \"?resource kg:7874 kg:3266 .\",\n      \"?resource kg:7874 kg:8900 .\",\n      \"?resource kg:7456 kg:7350 .\",\n      \"?resource kg:5570 kg:5235 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8173 kg:5535 . ?resource kg:8173 kg:3266 . ?resource kg:8173 kg:8900 . ?resource kg:5180 kg:5535 . ?resource kg:5180 kg:3266 . ?resource kg:5180 kg:8900 . ?resource kg:7874 kg:5535 . ?resource kg:7874 kg:3266 . ?resource kg:7874 kg:8900 . ?resource kg:7456 kg:7350 . ?resource kg:5570 kg:5235 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?year.\",\n    \"  ?film wdt:P1680 ?writer.\",\n    \"  ?film wdt:P1696 ?cinematographer.\",\n    \"  ?film wdt:P1697 ?director.\",\n    \"  FILTER(?year >= 2000).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?director WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?year. ?film wdt:P1680 ?writer. ?film wdt:P1696 ?cinematographer. ?film wdt:P1697 ?director. FILTER(?year >= 2000). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1869678.\",\n      \"?person wdt:P57 wd:Q613974.\",\n      \"?person wdt:P57 wd:Q1415127.\",\n      \"?person wdt:P58 wd:Q17738.\",\n      \"?person wdt:P1431 wd:Q17738.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1869678. ?person wdt:P57 wd:Q613974. ?person wdt:P57 wd:Q1415127. ?person wdt:P58 wd:Q17738. ?person wdt:P1431 wd:Q17738. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:8283 kg:9563.\",\n      \"?writer kg:8283 kg:5200.\",\n      \"?writer kg:8283 kg:8423.\",\n      \"?writer kg:3209 kg:9563.\",\n      \"?writer kg:3209 kg:5200.\",\n      \"?writer kg:3209 kg:8423.\",\n      \"?writer kg:4667 kg:9563.\",\n      \"?writer kg:4667 kg:5200.\",\n      \"?writer kg:4667 kg:8423.\",\n      \"?writer kg:9456 kg:5527.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:8283 kg:9563. ?writer kg:8283 kg:5200. ?writer kg:8283 kg:8423. ?writer kg:3209 kg:9563. ?writer kg:3209 kg:5200. ?writer kg:3209 kg:8423. ?writer kg:4667 kg:9563. ?writer kg:4667 kg:5200. ?writer kg:4667 kg:8423. ?writer kg:9456 kg:5527. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P168 ?producer.\",\n    \"  ?film wdt:P190 ?writer.\",\n    \"  ?film wdt:P30 ?editor.\",\n    \"  VALUES ?director { wd:Q242570 }\",\n    \"  VALUES ?producer { wd:Q242570 }\",\n    \"  VALUES ?writer { wd:Q242570 }\",\n    \"  VALUES ?editor { wd:Q242570 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P168 ?producer. ?film wdt:P190 ?writer. ?film wdt:P30 ?editor. VALUES ?director { wd:Q242570 } VALUES ?producer { wd:Q242570 } VALUES ?writer { wd:Q242570 } VALUES ?editor { wd:Q242570 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P57 wd:Q1687239.\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P162 wd:Q1687239.\",\n      \"?film wdt:P162 wd:Q562108.\",\n      \"?film wdt:P162 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q35979475.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q35979475.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q35979475. ?film wdt:P162 wd:Q1687239. ?film wdt:P162 wd:Q562108. ?film wdt:P162 wd:Q35979475. ?film wdt:P58 wd:Q1687239. ?film wdt:P58 wd:Q562108. ?film wdt:P58 wd:Q35979475. ?film wdt:P1040 wd:Q1687239. ?film wdt:P1040 wd:Q562108. ?film wdt:P1040 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:4621 kg:5363 .\",\n      \"?film kg:7637 kg:6236 .\",\n      \"?film kg:7637 kg:2605 .\",\n      \"?film kg:7637 kg:8120 .\",\n      \"?film kg:2246 kg:6236 .\",\n      \"?film kg:2246 kg:2605 .\",\n      \"?film kg:2246 kg:8120 .\",\n      \"?film kg:5446 kg:6236 .\",\n      \"?film kg:5446 kg:2605 .\",\n      \"?film kg:5446 kg:8120 .\",\n      \"?film kg:8645 kg:6236 .\",\n      \"?film kg:8645 kg:2605 .\",\n      \"?film kg:8645 kg:8120 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:4621 kg:5363 . ?film kg:7637 kg:6236 . ?film kg:7637 kg:2605 . ?film kg:7637 kg:8120 . ?film kg:2246 kg:6236 . ?film kg:2246 kg:2605 . ?film kg:2246 kg:8120 . ?film kg:5446 kg:6236 . ?film kg:5446 kg:2605 . ?film kg:5446 kg:8120 . ?film kg:8645 kg:6236 . ?film kg:8645 kg:2605 . ?film kg:8645 kg:8120 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film (wdt:P577|wdt:P1686) ?date.\",\n    \"  ?film wdt:P1097 ?person.\",\n    \"  ?film rdfs:label \\\"Pietà\\\"@en.\",\n    \"  ?film2 wdt:P31 wd:Q11424.\",\n    \"  ?film2 (wdt:P577|wdt:P1686) ?date2.\",\n    \"  ?film2 wdt:P1097 ?person2.\",\n    \"  ?film2 rdfs:label \\\"Moebius\\\"@en.\",\n    \"  ?film3 wdt:P31 wd:Q11424.\",\n    \"  ?film3 (wdt:P577|wdt:P1686) ?date3.\",\n    \"  ?film3 wdt:P1097 ?person3.\",\n    \"  ?film3 rdfs:label \\\"Dream\\\"@en.\",\n    \"  FILTER (?person = ?person2 && ?person = ?person3)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q11424. ?film (wdt:P577|wdt:P1686) ?date. ?film wdt:P1097 ?person. ?film rdfs:label \"Pietà\"@en. ?film2 wdt:P31 wd:Q11424. ?film2 (wdt:P577|wdt:P1686) ?date2. ?film2 wdt:P1097 ?person2. ?film2 rdfs:label \"Moebius\"@en. ?film3 wdt:P31 wd:Q11424. ?film3 (wdt:P577|wdt:P1686) ?date3. ?film3 wdt:P1097 ?person3. ?film3 rdfs:label \"Dream\"@en. FILTER (?person = ?person2 && ?person = ?person3) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q484679 .\", \"# director of Dream\",\n      \"?person wdt:P57 wd:Q3282637 .\", \"# director of Pietà\",\n      \"?person wdt:P57 wd:Q13471372 .\", \"# director of Moebius\",\n      \"?person wdt:P58 wd:Q484679 .\", \"# screenwriter of Dream\",\n      \"?person wdt:P58 wd:Q3282637 .\", \"# screenwriter of Pietà\",\n      \"?person wdt:P58 wd:Q13471372 .\", \"# screenwriter of Moebius\",\n      \"?person wdt:P1040 wd:Q484679 .\", \"# editor of Dream\",\n      \"?person wdt:P1040 wd:Q3282637 .\", \"# editor of Pietà\",\n      \"?person wdt:P1040 wd:Q13471372 .\", \"# editor of Moebius\",\n      \"?person wdt:P1431 wd:Q484679 .\", \"# executive producer of Dream\",\n      \"?person wdt:P1431 wd:Q3282637 .\", \"# executive producer of Pietà\",\n      \"?person wdt:P1431 wd:Q13471372 .\", \"# executive producer of Moebius\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q484679 . ?person wdt:P57 wd:Q3282637 . ?person wdt:P57 wd:Q13471372 . ?person wdt:P58 wd:Q484679 . ?person wdt:P58 wd:Q3282637 . ?person wdt:P58 wd:Q13471372 . ?person wdt:P1040 wd:Q484679 . ?person wdt:P1040 wd:Q3282637 . ?person wdt:P1040 wd:Q13471372 . ?person wdt:P1431 wd:Q484679 . ?person wdt:P1431 wd:Q3282637 . ?person wdt:P1431 wd:Q13471372 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:5472 kg:1602.\",\n      \"?person kg:5472 kg:0621.\",\n      \"?person kg:5472 kg:5575.\",\n      \"?person kg:2644 kg:1602.\",\n      \"?person kg:2644 kg:0621.\",\n      \"?person kg:2644 kg:5575.\",\n      \"?person kg:9732 kg:1602.\",\n      \"?person kg:9732 kg:0621.\",\n      \"?person kg:9732 kg:5575.\",\n      \"?person kg:2926 kg:1602.\",\n      \"?person kg:2926 kg:0621.\",\n      \"?person kg:2926 kg:5575.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:5472 kg:1602. ?person kg:5472 kg:0621. ?person kg:5472 kg:5575. ?person kg:2644 kg:1602. ?person kg:2644 kg:0621. ?person kg:2644 kg:5575. ?person kg:9732 kg:1602. ?person kg:9732 kg:0621. ?person kg:9732 kg:5575. ?person kg:2926 kg:1602. ?person kg:2926 kg:0621. ?person kg:2926 kg:5575. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P57 wd:Q608964.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P57 wd:Q608964. ?film wdt:P57 wd:Q608964. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P57 wd:Q1687239.\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q35979475.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q35979475. ?film wdt:P1040 wd:Q1687239. ?film wdt:P1040 wd:Q562108. ?film wdt:P1040 wd:Q35979475. ?film wdt:P58 wd:Q1687239. ?film wdt:P58 wd:Q562108. ?film wdt:P58 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:6365 kg:6315 .\",\n      \"?film kg:0254/kg:9845 .\",\n      \"?film kg:0254/kg:4819 .\",\n      \"?film kg:0254/kg:5417 .\",\n      \"?film kg:6378/kg:9845 .\",\n      \"?film kg:6378/kg:4819 .\",\n      \"?film kg:6378/kg:5417 .\",\n      \"?film kg:2023/kg:9845 .\",\n      \"?film kg:2023/kg:4819 .\",\n      \"?film kg:2023/kg:5417 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:6365 kg:6315 . ?film kg:0254/kg:9845 . ?film kg:0254/kg:4819 . ?film kg:0254/kg:5417 . ?film kg:6378/kg:9845 . ?film kg:6378/kg:4819 . ?film kg:6378/kg:5417 . ?film kg:2023/kg:9845 . ?film kg:2023/kg:4819 . ?film kg:2023/kg:5417 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P986 ?editor.\",\n    \"  ?film wdt:P106 ?writer.\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  VALUES ?director { wd:Q345760 }\",\n    \"  VALUES ?editor { wd:Q345760 }\",\n    \"  VALUES ?writer { wd:Q345760 }\",\n    \"  VALUES ?producer { wd:Q345760 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P986 ?editor. ?film wdt:P106 ?writer. ?film wdt:P162 ?producer. VALUES ?director { wd:Q345760 } VALUES ?editor { wd:Q345760 } VALUES ?writer { wd:Q345760 } VALUES ?producer { wd:Q345760 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film wdt:P57 wd:Q1687239.\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q35979475.\",\n      \"?film wdt:P162 wd:Q1687239.\",\n      \"?film wdt:P162 wd:Q562108.\",\n      \"?film wdt:P162 wd:Q35979475.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q35979475. ?film wdt:P1040 wd:Q1687239. ?film wdt:P1040 wd:Q562108. ?film wdt:P1040 wd:Q35979475. ?film wdt:P58 wd:Q1687239. ?film wdt:P58 wd:Q562108. ?film wdt:P58 wd:Q35979475. ?film wdt:P162 wd:Q1687239. ?film wdt:P162 wd:Q562108. ?film wdt:P162 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:2858 kg:2375 .\",\n      \"?film kg:4593/kg:0596 .\",\n      \"?film kg:4593/kg:4796 .\",\n      \"?film kg:4593/kg:1382 .\",\n      \"?film kg:3050/kg:0596 .\",\n      \"?film kg:3050/kg:4796 .\",\n      \"?film kg:3050/kg:1382 .\",\n      \"?film kg:4885/kg:0596 .\",\n      \"?film kg:4885/kg:4796 .\",\n      \"?film kg:4885/kg:1382 .\",\n      \"?film kg:5891/kg:0596 .\",\n      \"?film kg:5891/kg:4796 .\",\n      \"?film kg:5891/kg:1382 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:2858 kg:2375 . ?film kg:4593/kg:0596 . ?film kg:4593/kg:4796 . ?film kg:4593/kg:1382 . ?film kg:3050/kg:0596 . ?film kg:3050/kg:4796 . ?film kg:3050/kg:1382 . ?film kg:4885/kg:0596 . ?film kg:4885/kg:4796 . ?film kg:4885/kg:1382 . ?film kg:5891/kg:0596 . ?film kg:5891/kg:4796 . ?film kg:5891/kg:1382 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?write ?produce ?direct WHERE {\",\n    \"  wd:Q10724698 p:P57 wd:Q34644.\",\n    \"  wd:Q10724698 p:P161 ?director.\",\n    \"  OPTIONAL { ?director wdt:P31 wd:Q33969. }\",\n    \"  OPTIONAL { ?director wdt:P57 ?edit. }\",\n    \"  OPTIONAL { ?director wdt:P58 ?write. }\",\n    \"  OPTIONAL { ?director wdt:P102 ?produce. }\",\n    \"  OPTIONAL { ?director wdt:P346 ?direct. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?write ?produce ?direct WHERE { wd:Q10724698 p:P57 wd:Q34644. wd:Q10724698 p:P161 ?director. OPTIONAL { ?director wdt:P31 wd:Q33969. } OPTIONAL { ?director wdt:P57 ?edit. } OPTIONAL { ?director wdt:P58 ?write. } OPTIONAL { ?director wdt:P102 ?produce. } OPTIONAL { ?director wdt:P346 ?direct. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q25479948.\",\n      \"?director wdt:P57 wd:Q5437360.\",\n      \"?director wdt:P1040 wd:Q5437360.\",\n      \"?director wdt:P58 wd:Q5437360.\",\n      \"?director wdt:P1431 wd:Q5437360.\",\n      \"?director wdt:P57 wd:Q12813010.\",\n      \"?director wdt:P1040 wd:Q12813010.\",\n      \"?director wdt:P58 wd:Q12813010.\",\n      \"?director wdt:P1431 wd:Q12813010.\",\n      \"?director wdt:P57 wd:Q6084069.\",\n      \"?director wdt:P1040 wd:Q6084069.\",\n      \"?director wdt:P58 wd:Q6084069.\",\n      \"?director wdt:P1431 wd:Q6084069.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q25479948. ?director wdt:P57 wd:Q5437360. ?director wdt:P1040 wd:Q5437360. ?director wdt:P58 wd:Q5437360. ?director wdt:P1431 wd:Q5437360. ?director wdt:P57 wd:Q12813010. ?director wdt:P1040 wd:Q12813010. ?director wdt:P58 wd:Q12813010. ?director wdt:P1431 wd:Q12813010. ?director wdt:P57 wd:Q6084069. ?director wdt:P1040 wd:Q6084069. ?director wdt:P58 wd:Q6084069. ?director wdt:P1431 wd:Q6084069. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director kg:4146 kg:7931.\",\n      \"?director kg:4146 kg:0732.\",\n      \"?director kg:4146 kg:4638.\",\n      \"?director kg:4146 kg:3865.\",\n      \"?director kg:1254 kg:0732.\",\n      \"?director kg:1254 kg:4638.\",\n      \"?director kg:1254 kg:3865.\",\n      \"?director kg:2420 kg:0732.\",\n      \"?director kg:2420 kg:4638.\",\n      \"?director kg:2420 kg:3865.\",\n      \"?director kg:4640 kg:0732.\",\n      \"?director kg:4640 kg:4638.\",\n      \"?director kg:4640 kg:3865.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director kg:4146 kg:7931. ?director kg:4146 kg:0732. ?director kg:4146 kg:4638. ?director kg:4146 kg:3865. ?director kg:1254 kg:0732. ?director kg:1254 kg:4638. ?director kg:1254 kg:3865. ?director kg:2420 kg:0732. ?director kg:2420 kg:4638. ?director kg:2420 kg:3865. ?director kg:4640 kg:0732. ?director kg:4640 kg:4638. ?director kg:4640 kg:3865. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor ?executiveProducer WHERE {\",\n    \"  wd:Q10724698 p:P57 wd:Q346766.\",\n    \"  wd:Q10724698 p:P161 ?director.\",\n    \"  OPTIONAL { ?director wdt:P161 ?writer. }\",\n    \"  OPTIONAL { ?director wdt:P356 ?editor. }\",\n    \"  OPTIONAL { ?director wdt:P2074 ?executiveProducer. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor ?executiveProducer WHERE { wd:Q10724698 p:P57 wd:Q346766. wd:Q10724698 p:P161 ?director. OPTIONAL { ?director wdt:P161 ?writer. } OPTIONAL { ?director wdt:P356 ?editor. } OPTIONAL { ?director wdt:P2074 ?executiveProducer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q25479948.\",\n      \"?director wdt:P57 wd:Q5437360.\",\n      \"?director wdt:P1040 wd:Q5437360.\",\n      \"?director wdt:P1431 wd:Q5437360.\",\n      \"?director wdt:P58 wd:Q5437360.\",\n      \"?director wdt:P57 wd:Q6084069.\",\n      \"?director wdt:P1040 wd:Q6084069.\",\n      \"?director wdt:P1431 wd:Q6084069.\",\n      \"?director wdt:P58 wd:Q6084069.\",\n      \"?director wdt:P57 wd:Q12813010.\",\n      \"?director wdt:P1040 wd:Q12813010.\",\n      \"?director wdt:P1431 wd:Q12813010.\",\n      \"?director wdt:P58 wd:Q12813010.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q25479948. ?director wdt:P57 wd:Q5437360. ?director wdt:P1040 wd:Q5437360. ?director wdt:P1431 wd:Q5437360. ?director wdt:P58 wd:Q5437360. ?director wdt:P57 wd:Q6084069. ?director wdt:P1040 wd:Q6084069. ?director wdt:P1431 wd:Q6084069. ?director wdt:P58 wd:Q6084069. ?director wdt:P57 wd:Q12813010. ?director wdt:P1040 wd:Q12813010. ?director wdt:P1431 wd:Q12813010. ?director wdt:P58 wd:Q12813010. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director kg:5227 kg:6201.\",\n      \"?director kg:2761 kg:6579.\",\n      \"?director kg:6499 kg:6581.\",\n      \"?director kg:6581 kg:6579.\",\n      \"?director kg:0346 kg:6579.\",\n      \"?director kg:2761 kg:6581.\",\n      \"?director kg:6499 kg:6581.\",\n      \"?director kg:0346 kg:6581.\",\n      \"?director kg:2761 kg:0890.\",\n      \"?director kg:6581 kg:0890.\",\n      \"?director kg:0346 kg:0890.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director kg:5227 kg:6201. ?director kg:2761 kg:6579. ?director kg:6499 kg:6581. ?director kg:6581 kg:6579. ?director kg:0346 kg:6579. ?director kg:2761 kg:6581. ?director kg:6499 kg:6581. ?director kg:0346 kg:6581. ?director kg:2761 kg:0890. ?director kg:6581 kg:0890. ?director kg:0346 kg:0890. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 wd:Q108626.\",\n    \"  ?film wdt:P161 wd:Q30684.\",\n    \"  ?film wdt:P161 wd:Q59764.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 wd:Q108626. ?film wdt:P161 wd:Q30684. ?film wdt:P161 wd:Q59764. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?film (wdt:P57 | wdt:P168) ?editor.\",\n      \"?film rdfs:label \\\"Moebius\\\"@en.\",\n      \"?film rdfs:label \\\"One on One\\\"@en.\",\n      \"?film rdfs:label \\\"Amen\\\"@en.\",\n      \"?film rdfs:label \\\"Pieta\\\"@en.\",\n      \"?editor wdt:P106 wd:Q34528.\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?editor WHERE { ?film wdt:P31 wd:Q11424. ?film (wdt:P57 | wdt:P168) ?editor. ?film rdfs:label \"Moebius\"@en. ?film rdfs:label \"One on One\"@en. ?film rdfs:label \"Amen\"@en. ?film rdfs:label \"Pieta\"@en. ?editor wdt:P106 wd:Q34528. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q13471372.\",\n      \"?person wdt:P57 wd:Q17041657.\",\n      \"?person wdt:P57 wd:Q462025.\",\n      \"?person wdt:P57 wd:Q483197.\",\n      \"?person wdt:P1040 wd:Q13471372.\",\n      \"?person wdt:P1040 wd:Q17041657.\",\n      \"?person wdt:P1040 wd:Q462025.\",\n      \"?person wdt:P1040 wd:Q483197.\",\n      \"?person wdt:P344 wd:Q13471372.\",\n      \"?person wdt:P344 wd:Q17041657.\",\n      \"?person wdt:P344 wd:Q462025.\",\n      \"?person wdt:P344 wd:Q483197.\",\n      \"?person wdt:P1431 wd:Q483197.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q13471372. ?person wdt:P57 wd:Q17041657. ?person wdt:P57 wd:Q462025. ?person wdt:P57 wd:Q483197. ?person wdt:P1040 wd:Q13471372. ?person wdt:P1040 wd:Q17041657. ?person wdt:P1040 wd:Q462025. ?person wdt:P1040 wd:Q483197. ?person wdt:P344 wd:Q13471372. ?person wdt:P344 wd:Q17041657. ?person wdt:P344 wd:Q462025. ?person wdt:P344 wd:Q483197. ?person wdt:P1431 wd:Q483197. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:0039 kg:9181.\",\n      \"?person kg:0039 kg:3285.\",\n      \"?person kg:0039 kg:5838.\",\n      \"?person kg:0039 kg:4511.\",\n      \"?person kg:0372 kg:4511.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:0039 kg:9181. ?person kg:0039 kg:3285. ?person kg:0039 kg:5838. ?person kg:0039 kg:4511. ?person kg:0372 kg:4511. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P1902 wd:Q76747.\",\n    \"  ?person wdt:P1902 wd:Q134064.\",\n    \"  ?person wdt:P108 wd:Q50667.\",\n    \"  ?person wdt:P108 wd:Q134064.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P1902 wd:Q76747. ?person wdt:P1902 wd:Q134064. ?person wdt:P108 wd:Q50667. ?person wdt:P108 wd:Q134064. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P108 wd:Q37033.\",\n      \"?person wdt:P108 wd:Q7095994.\",\n      \"?person wdt:P108 wd:Q42944.\",\n      \"?person wdt:P108 wd:Q7204713.\",\n      \"?person wdt:P108 wd:Q7432436.\",\n      \"?person wdt:P112 wd:Q37033.\",\n      \"?person wdt:P112 wd:Q7095994.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q37033. ?person wdt:P108 wd:Q7095994. ?person wdt:P108 wd:Q42944. ?person wdt:P108 wd:Q7204713. ?person wdt:P108 wd:Q7432436. ?person wdt:P112 wd:Q37033. ?person wdt:P112 wd:Q7095994. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:8444 kg:2585 .\",\n      \"?person kg:8444 kg:9985 .\",\n      \"?person kg:0878 kg:2585 .\",\n      \"?person kg:0878 kg:9985 .\",\n      \"?person kg:8444 kg:8837 .\",\n      \"?person kg:8444 kg:7604 .\",\n      \"?person kg:8444 kg:5786 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:8444 kg:2585 . ?person kg:8444 kg:9985 . ?person kg:0878 kg:2585 . ?person kg:0878 kg:9985 . ?person kg:8444 kg:8837 . ?person kg:8444 kg:7604 . ?person kg:8444 kg:5786 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?leadActor ?composer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P580 ?releaseDate.\",\n    \"  ?film wdt:P161 ?writer.\",\n    \"  ?film wdt:P39 ?leadActor.\",\n    \"  ?film wdt:P244 ?composer.\",\n    \"  ?film wdt:P175 ?cinematographer.\",\n    \"  ?director wdt:P1080 ?sinCityDirected.\",\n    \"  ?director wdt:P39 ?sinCityEdited.\",\n    \"  FILTER(?releaseDate = \\\"2007-04-06\\\"^^xsd:date).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?leadActor ?composer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P175 ?director. ?film wdt:P580 ?releaseDate. ?film wdt:P161 ?writer. ?film wdt:P39 ?leadActor. ?film wdt:P244 ?composer. ?film wdt:P175 ?cinematographer. ?director wdt:P1080 ?sinCityDirected. ?director wdt:P39 ?sinCityEdited. FILTER(?releaseDate = \"2007-04-06\"^^xsd:date). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1165050.\",\n      \"?person wdt:P86 wd:Q192115.\",\n      \"?person wdt:P58 wd:Q1165050.\",\n      \"?person wdt:P344 wd:Q1165050.\",\n      \"?person wdt:P1040 wd:Q192115.\",\n      \"?person wdt:P1040 wd:Q1653396.\",\n      \"?person wdt:P1040 wd:Q128493.\",\n      \"?person wdt:P57 wd:Q1653396.\",\n      \"?person wdt:P57 wd:Q128493.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1165050. ?person wdt:P86 wd:Q192115. ?person wdt:P58 wd:Q1165050. ?person wdt:P344 wd:Q1165050. ?person wdt:P1040 wd:Q192115. ?person wdt:P1040 wd:Q1653396. ?person wdt:P1040 wd:Q128493. ?person wdt:P57 wd:Q1653396. ?person wdt:P57 wd:Q128493. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?leadActor ?composer\",\n    \"WHERE {\",\n      \"?movie kg:7326 kg:1457.\",\n      \"?movie kg:9880 ?leadActor.\",\n      \"?movie kg:6683 ?writer.\",\n      \"?movie kg:1594 ?composer.\",\n      \"?movie kg:6750 ?cinematographer.\",\n      \"?movie kg:5977 ?editor.\",\n      \"?movie kg:7326 kg:9537.\",\n      \"?movie kg:7326 kg:8257.\",\n      \"?movie kg:7326 kg:3207.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?leadActor ?composer WHERE { ?movie kg:7326 kg:1457. ?movie kg:9880 ?leadActor. ?movie kg:6683 ?writer. ?movie kg:1594 ?composer. ?movie kg:6750 ?cinematographer. ?movie kg:5977 ?editor. ?movie kg:7326 kg:9537. ?movie kg:7326 kg:8257. ?movie kg:7326 kg:3207. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer ?editor WHERE {\",\n    \"  wd:Q123456789 wdt:P57 ?director .\", \"  wd:Q123456789 wdt:P108 ?executiveProducer .\",\n    \"  wd:Q123456789 wdt:P108 ?editor .\",\n    \"  ?director wdt:P31 wd:Q339695.\",\n    \"  ?executiveProducer wdt:P31 wd:Q339695.\",\n    \"  ?editor wdt:P31 wd:Q339695.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?executiveProducer ?editor WHERE { wd:Q123456789 wdt:P57 ?director . wd:Q123456789 wdt:P108 ?executiveProducer . wd:Q123456789 wdt:P108 ?editor . ?director wdt:P31 wd:Q339695. ?executiveProducer wdt:P31 wd:Q339695. ?editor wdt:P31 wd:Q339695. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer ?editor WHERE {\",\n    \"  wd:Q483197 wdt:P57 ?director.\",\n    \"  wd:Q483197 wdt:P1431 ?executiveProducer.\",\n    \"  wd:Q483197 wdt:P1040 ?editor.\",\n    \"  ?director wdt:P57 wd:Q484679.\",\n    \"  ?executiveProducer wdt:P1431 wd:Q484679.\",\n    \"  ?editor wdt:P1040 wd:Q484679.\",\n    \"  ?director wdt:P57 wd:Q13471372.\",\n    \"  ?executiveProducer wdt:P1431 wd:Q13471372.\",\n    \"  ?editor wdt:P1040 wd:Q13471372.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?executiveProducer ?editor WHERE { wd:Q483197 wdt:P57 ?director. wd:Q483197 wdt:P1431 ?executiveProducer. wd:Q483197 wdt:P1040 ?editor. ?director wdt:P57 wd:Q484679. ?executiveProducer wdt:P1431 wd:Q484679. ?editor wdt:P1040 wd:Q484679. ?director wdt:P57 wd:Q13471372. ?executiveProducer wdt:P1431 wd:Q13471372. ?editor wdt:P1040 wd:Q13471372. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer ?editor\",\n    \"WHERE {\",\n      \"?director kg:9521 kg:5562 .\",\n      \"?director kg:9521 kg:2746 .\",\n      \"?executiveProducer kg:0874 kg:5562 .\",\n      \"?executiveProducer kg:0874 kg:2746 .\",\n      \"?editor kg:6091 kg:5562 .\",\n      \"?editor kg:6091 kg:2746 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?executiveProducer ?editor WHERE { ?director kg:9521 kg:5562 . ?director kg:9521 kg:2746 . ?executiveProducer kg:0874 kg:5562 . ?executiveProducer kg:0874 kg:2746 . ?editor kg:6091 kg:5562 . ?editor kg:6091 kg:2746 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q106728 wdt:P31 wd:Q5.\",\n    \"  wd:Q106728 wdt:P106 wd:Q494771.\",\n    \"  wd:Q106728 wdt:P106 wd:Q103622.\",\n    \"  wd:Q106728 wdt:P106 wd:Q503694.\",\n    \"  ?film wdt:P577 wd:Q106728.\",\n    \"  ?film wdt:P112 wd:Q106728.\",\n    \"  VALUES ?film {\",\n    \"    wd:Q394644\",\n    \"    wd:Q564344\",\n    \"    wd:Q106728\"\n    ,\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q106728 wdt:P31 wd:Q5. wd:Q106728 wdt:P106 wd:Q494771. wd:Q106728 wdt:P106 wd:Q103622. wd:Q106728 wdt:P106 wd:Q503694. ?film wdt:P577 wd:Q106728. ?film wdt:P112 wd:Q106728. VALUES ?film { wd:Q394644 wd:Q564344 wd:Q106728 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q28306.\",\n      \"?film wdt:P58 wd:Q28306.\",\n      \"wd:Q28306 wdt:P112 wd:Q3011043.\",\n      \"wd:Q28306 wdt:P112 wd:Q220394.\",\n      \"wd:Q28306 wdt:P112 wd:Q64434913.\",\n      \"wd:Q28306 wdt:P106 wd:Q3282637.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q28306. ?film wdt:P58 wd:Q28306. wd:Q28306 wdt:P112 wd:Q3011043. wd:Q28306 wdt:P112 wd:Q220394. wd:Q28306 wdt:P112 wd:Q64434913. wd:Q28306 wdt:P106 wd:Q3282637. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9383/kg:4739 .\",\n      \"?resource kg:9383/kg:2555 .\",\n      \"?resource kg:9383/kg:9546 .\",\n      \"?resource kg:8812/kg:2810 .\",\n      \"?resource kg:7158/kg:5308 .\",\n      \"?resource kg:3018/kg:5308 .\",\n      \"?resource kg:7158/kg:465 .\",\n      \"?resource kg:3018/kg:465 .\",\n      \"?resource kg:7158/kg:5981 .\",\n      \"?resource kg:3018/kg:5981 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9383/kg:4739 . ?resource kg:9383/kg:2555 . ?resource kg:9383/kg:9546 . ?resource kg:8812/kg:2810 . ?resource kg:7158/kg:5308 . ?resource kg:3018/kg:5308 . ?resource kg:7158/kg:465 . ?resource kg:3018/kg:465 . ?resource kg:7158/kg:5981 . ?resource kg:3018/kg:5981 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P57 wd:Q24860.\",\n    \"  ?person wdt:P161 wd:Q24860.\",\n    \"  ?person wdt:P108 wd:Q24860.\",\n    \"  ?person wdt:P359 wd:Q24860.\",\n    \"  ?person wdt:P175 wd:Q24860.\",\n    \"  ?person wdt:P161 wd:Q24860.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P57 wd:Q24860. ?person wdt:P161 wd:Q24860. ?person wdt:P108 wd:Q24860. ?person wdt:P359 wd:Q24860. ?person wdt:P175 wd:Q24860. ?person wdt:P161 wd:Q24860. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1431 wd:Q4959991.\",\n      \"?person wdt:P57 wd:Q4959991.\",\n      \"?person wdt:P86 wd:Q4959991.\",\n      \"?person wdt:P344 wd:Q4959991.\",\n      \"?person wdt:P1040 wd:Q7243050.\",\n      \"?person wdt:P58 wd:Q7243050.\",\n      \"?person wdt:P1040 wd:Q5375110.\",\n      \"?person wdt:P58 wd:Q5375110.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P1431 wd:Q4959991. ?person wdt:P57 wd:Q4959991. ?person wdt:P86 wd:Q4959991. ?person wdt:P344 wd:Q4959991. ?person wdt:P1040 wd:Q7243050. ?person wdt:P58 wd:Q7243050. ?person wdt:P1040 wd:Q5375110. ?person wdt:P58 wd:Q5375110. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:0770 kg:0804 .\",\n      \"?person kg:0770 kg:2931 .\",\n      \"?person kg:6733 kg:1638 .\",\n      \"?person kg:0923 kg:1638 .\",\n      \"?person kg:1984 kg:1638 .\",\n      \"?person kg:1879 kg:1638 .\",\n      \"?person kg:1298 kg:1638 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:0770 kg:0804 . ?person kg:0770 kg:2931 . ?person kg:6733 kg:1638 . ?person kg:0923 kg:1638 . ?person kg:1984 kg:1638 . ?person kg:1879 kg:1638 . ?person kg:1298 kg:1638 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P19 wd:Q76.\",\n    \"  ?person wdt:P1416 wd:Q1080265.\",\n    \"  ?person wdt:P1416 wd:Q34528.\",\n    \"  ?person wdt:P1416 wd:Q796.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P19 wd:Q76. ?person wdt:P1416 wd:Q1080265. ?person wdt:P1416 wd:Q34528. ?person wdt:P1416 wd:Q796. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P108 wd:Q5059715.\",\n      \"?person wdt:P108 wd:Q41506.\",\n      \"?person wdt:P108 wd:Q23548.\",\n      \"?person wdt:P108 wd:Q622664.\",\n      \"?person wdt:P108 wd:Q55206.\",\n      \"?person wdt:P27 wd:Q30.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q5059715. ?person wdt:P108 wd:Q41506. ?person wdt:P108 wd:Q23548. ?person wdt:P108 wd:Q622664. ?person wdt:P108 wd:Q55206. ?person wdt:P27 wd:Q30. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:2472/kg:0862 kg:5939 .\",\n      \"?person kg:2472/kg:6627 kg:6725 .\",\n      \"?person kg:2472/kg:0485 .\",\n      \"?person kg:2472/kg:8517 .\",\n      \"?person kg:2472/kg:9642 .\",\n      \"?person kg:2472/kg:9594 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:2472/kg:0862 kg:5939 . ?person kg:2472/kg:6627 kg:6725 . ?person kg:2472/kg:0485 . ?person kg:2472/kg:8517 . ?person kg:2472/kg:9642 . ?person kg:2472/kg:9594 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P1680 ?director.\",\n    \"  ?film wdt:P175 ?writer.\",\n    \"  ?film wdt:P93 ?cinematographer.\",\n    \"  ?film wdt:P244 ?editor.\",\n    \"  ?film wdt:P175 ?composer.\",\n    \"  VALUES ?film {\",\n    \"    wd:Q806444\",\n    \"    wd:Q39244\",\n    \"    wd:Q11424\",\n    \"    wd:Q11424\"\n    ,\n    \"  }\",\n    \"  ?person wdt:P577 ?releaseDate.\",\n    \"  FILTER(?director = ?writer)\",\n    \"  FILTER(?director = ?cinematographer)\",\n    \"  FILTER(?director = ?editor)\",\n    \"  FILTER(?director = ?composer)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P1680 ?director. ?film wdt:P175 ?writer. ?film wdt:P93 ?cinematographer. ?film wdt:P244 ?editor. ?film wdt:P175 ?composer. VALUES ?film { wd:Q806444 wd:Q39244 wd:Q11424 wd:Q11424 } ?person wdt:P577 ?releaseDate. FILTER(?director = ?writer) FILTER(?director = ?cinematographer) FILTER(?director = ?editor) FILTER(?director = ?composer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q656357.\",\n      \"?person wdt:P58 wd:Q656357.\",\n      \"?person wdt:P1040 wd:Q656357.\",\n      \"?person wdt:P344 wd:Q656357.\",\n      \"?person wdt:P57 wd:Q192115.\",\n      \"?person wdt:P86 wd:Q192115.\",\n      \"?person wdt:P57 wd:Q1165050.\",\n      \"?person wdt:P161 wd:Q1165050.\",\n      \"?person wdt:P86 wd:Q93853.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q656357. ?person wdt:P58 wd:Q656357. ?person wdt:P1040 wd:Q656357. ?person wdt:P344 wd:Q656357. ?person wdt:P57 wd:Q192115. ?person wdt:P86 wd:Q192115. ?person wdt:P57 wd:Q1165050. ?person wdt:P161 wd:Q1165050. ?person wdt:P86 wd:Q93853. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?person WHERE {\",\n            \"{ ?person kg:6886 kg:9344. } UNION \",\n            \"{ ?person kg:6886 kg:0404. } UNION \",\n            \"{ ?person kg:6886 kg:2043. } UNION \",\n            \"{ ?person kg:6886 kg:4401. } UNION \",\n            \"{ ?person kg:9344 kg:9344. } UNION \",\n            \"{ ?person kg:9344 kg:0404. } UNION \",\n            \"{ ?person kg:9344 kg:2043. } UNION \",\n            \"{ ?person kg:9344 kg:4401. } UNION \",\n            \"{ ?person kg:8596 kg:9344. } UNION \",\n            \"{ ?person kg:8596 kg:0404. } UNION \",\n            \"{ ?person kg:8596 kg:2043. } UNION \",\n            \"{ ?person kg:8596 kg:4401. } UNION \",\n            \"{ ?person kg:3341 kg:9344. } UNION \",\n            \"{ ?person kg:3341 kg:0404. } UNION \",\n            \"{ ?person kg:3341 kg:2043. } UNION \",\n            \"{ ?person kg:3341 kg:4401. } UNION \",\n            \"{ ?person kg:8181 kg:9344. } UNION \",\n            \"{ ?person kg:8181 kg:0404. } UNION \",\n            \"{ ?person kg:8181 kg:2043. } UNION \",\n            \"{ ?person kg:8181 kg:4401. } UNION \",\n            \"{ ?person kg:4129 kg:9344. } UNION \",\n            \"{ ?person kg:4129 kg:0404. } UNION \",\n            \"{ ?person kg:4129 kg:2043. } UNION \",\n            \"{ ?person kg:4129 kg:4401. }\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { { ?person kg:6886 kg:9344. } UNION { ?person kg:6886 kg:0404. } UNION { ?person kg:6886 kg:2043. } UNION { ?person kg:6886 kg:4401. } UNION { ?person kg:9344 kg:9344. } UNION { ?person kg:9344 kg:0404. } UNION { ?person kg:9344 kg:2043. } UNION { ?person kg:9344 kg:4401. } UNION { ?person kg:8596 kg:9344. } UNION { ?person kg:8596 kg:0404. } UNION { ?person kg:8596 kg:2043. } UNION { ?person kg:8596 kg:4401. } UNION { ?person kg:3341 kg:9344. } UNION { ?person kg:3341 kg:0404. } UNION { ?person kg:3341 kg:2043. } UNION { ?person kg:3341 kg:4401. } UNION { ?person kg:8181 kg:9344. } UNION { ?person kg:8181 kg:0404. } UNION { ?person kg:8181 kg:2043. } UNION { ?person kg:8181 kg:4401. } UNION { ?person kg:4129 kg:9344. } UNION { ?person kg:4129 kg:0404. } UNION { ?person kg:4129 kg:2043. } UNION { ?person kg:4129 kg:4401. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q10594 }\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P1082 ?person.\",\n    \"  VALUES ?organization { wd:Q47556 wd:Q10594 wd:Q10594 wd:Q10594 wd:Q10594 wd:Q10594 }\",\n    \"  ?resource wdt:P31 ?organization.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q10594 } ?person wdt:P31 wd:Q5. ?person wdt:P106 wd:Q33988. ?resource wdt:P1082 ?person. VALUES ?organization { wd:Q47556 wd:Q10594 wd:Q10594 wd:Q10594 wd:Q10594 wd:Q10594 } ?resource wdt:P31 ?organization. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P108 wd:Q1136386 .\",\n      \"?resource wdt:P108 wd:Q947907 .\",\n      \"?resource wdt:P108 wd:Q11371930 .\",\n      \"?resource wdt:P108 wd:Q182950 .\",\n      \"?resource wdt:P108 wd:Q11490471 .\",\n      \"?resource wdt:P108 wd:Q1054807 .\",\n      \"?resource wdt:P58 wd:Q29011 .\",\n      \"?resource wdt:P1431 wd:Q29011 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q1136386 . ?resource wdt:P108 wd:Q947907 . ?resource wdt:P108 wd:Q11371930 . ?resource wdt:P108 wd:Q182950 . ?resource wdt:P108 wd:Q11490471 . ?resource wdt:P108 wd:Q1054807 . ?resource wdt:P58 wd:Q29011 . ?resource wdt:P1431 wd:Q29011 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?role { kg:2791 kg:4582 }\",\n      \"?person ?role kg:3829.\",\n      \"?person kg:9948 ?employer.\",\n      \"VALUES ?employer { kg:6160 kg:6651 kg:2192 kg:7740 kg:9463 kg:1188 }\",\n      \"BIND(?employer AS ?resource)\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?role { kg:2791 kg:4582 } ?person ?role kg:3829. ?person kg:9948 ?employer. VALUES ?employer { kg:6160 kg:6651 kg:2192 kg:7740 kg:9463 kg:1188 } BIND(?employer AS ?resource) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P169 ?director.\",\n    \"  ?film wdt:P1080 ?writer.\",\n    \"  ?film wdt:P344 ?cinematographer.\",\n    \"  VALUES ?film {\",\n    \"    wd:Q275944\",\n    \"    wd:Q608344\",\n    \"    wd:Q1064644\",\n    \"    wd:Q1064644\"\n    ,\n    \"  }\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  FILTER(?releaseDate < \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?director wdt:P344 ?cinematographer.\",\n    \"  ?writer wdt:P577 ?releaseDate.\",\n    \"  FILTER(?releaseDate < \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?writer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P169 ?director. ?film wdt:P1080 ?writer. ?film wdt:P344 ?cinematographer. VALUES ?film { wd:Q275944 wd:Q608344 wd:Q1064644 wd:Q1064644 } ?film wdt:P577 ?releaseDate. FILTER(?releaseDate < \"2000-01-01T00:00:00Z\"^^xsd:dateTime). ?director wdt:P344 ?cinematographer. ?writer wdt:P577 ?releaseDate. FILTER(?releaseDate < \"2000-01-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1609393.\",\n      \"?person wdt:P58 wd:Q1609393.\",\n      \"?person wdt:P57 wd:Q613974.\",\n      \"?person wdt:P58 wd:Q613974.\",\n      \"?person wdt:P57 wd:Q1415127.\",\n      \"?person wdt:P58 wd:Q1415127.\",\n      \"?person wdt:P57 wd:Q208910.\",\n      \"?person wdt:P344 wd:Q208910.\",\n      \"?person wdt:P57 wd:Q17738.\",\n      \"?person wdt:P58 wd:Q17738.\",\n      \"?person wdt:P1431 wd:Q17738.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1609393. ?person wdt:P58 wd:Q1609393. ?person wdt:P57 wd:Q613974. ?person wdt:P58 wd:Q613974. ?person wdt:P57 wd:Q1415127. ?person wdt:P58 wd:Q1415127. ?person wdt:P57 wd:Q208910. ?person wdt:P344 wd:Q208910. ?person wdt:P57 wd:Q17738. ?person wdt:P58 wd:Q17738. ?person wdt:P1431 wd:Q17738. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7242 kg:0815 .\",\n            \"?resource kg:7242 kg:4375 .\",\n            \"?resource kg:7242 kg:4519 .\",\n            \"?resource kg:7242 kg:2452 .\",\n            \"?resource kg:8434 kg:2634 .\",\n            \"?resource kg:7592 kg:0815 .\",\n            \"?resource kg:7592 kg:4375 .\",\n            \"?resource kg:7592 kg:4519 .\",\n            \"?resource kg:7592 kg:2452 .\",\n            \"?resource kg:0296 kg:0815 .\",\n            \"?resource kg:0296 kg:4375 .\",\n            \"?resource kg:0296 kg:4519 .\",\n            \"?resource kg:0296 kg:2452 .\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:7242 kg:0815 . ?resource kg:7242 kg:4375 . ?resource kg:7242 kg:4519 . ?resource kg:7242 kg:2452 . ?resource kg:8434 kg:2634 . ?resource kg:7592 kg:0815 . ?resource kg:7592 kg:4375 . ?resource kg:7592 kg:4519 . ?resource kg:7592 kg:2452 . ?resource kg:0296 kg:0815 . ?resource kg:0296 kg:4375 . ?resource kg:0296 kg:4519 . ?resource kg:0296 kg:2452 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Rabbits\\\"@en.\",\n    \"  ?film wdt:P162 ?cinematographer.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  ?film wdt:P90 ?editor.\",\n    \"  ?film wdt:P38 ?executiveProducer.\",\n    \"  ?executiveProducer rdfs:label \\\"Twin Peaks\\\"@en.\",\n    \"  ?executiveProducer rdfs:label \\\"Twin Peaks: Fire Walk with Me\\\"@en.\",\n    \"  ?executiveProducer rdfs:label \\\"My Son, My Son, What Have Ye Done?\\\"@en.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Rabbits\"@en. ?film wdt:P162 ?cinematographer. ?film wdt:P57 ?director. ?film wdt:P90 ?editor. ?film wdt:P38 ?executiveProducer. ?executiveProducer rdfs:label \"Twin Peaks\"@en. ?executiveProducer rdfs:label \"Twin Peaks: Fire Walk with Me\"@en. ?executiveProducer rdfs:label \"My Son, My Son, What Have Ye Done?\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1473406.\",\n      \"?person wdt:P57 wd:Q3485595.\",\n      \"?person wdt:P1040 wd:Q1473406.\",\n      \"?person wdt:P1040 wd:Q3485595.\",\n      \"?person wdt:P344 wd:Q1473406.\",\n      \"?person wdt:P344 wd:Q3485595.\",\n      \"?person wdt:P1431 wd:Q2085.\",\n      \"?person wdt:P1431 wd:Q1140578.\",\n      \"?person wdt:P1431 wd:Q1511905.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1473406. ?person wdt:P57 wd:Q3485595. ?person wdt:P1040 wd:Q1473406. ?person wdt:P1040 wd:Q3485595. ?person wdt:P344 wd:Q1473406. ?person wdt:P344 wd:Q3485595. ?person wdt:P1431 wd:Q2085. ?person wdt:P1431 wd:Q1140578. ?person wdt:P1431 wd:Q1511905. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:4187/kg:9557 .\",\n      \"?person kg:4187/kg:7819 .\",\n      \"?person kg:3443/kg:9557 .\",\n      \"?person kg:3443/kg:7819 .\",\n      \"?person kg:4376/kg:9557 .\",\n      \"?person kg:4376/kg:7819 .\",\n      \"?person kg:4560/kg:6263 .\",\n      \"?person kg:4560/kg:6602 .\",\n      \"?person kg:4560/kg:9722 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:4187/kg:9557 . ?person kg:4187/kg:7819 . ?person kg:3443/kg:9557 . ?person kg:3443/kg:7819 . ?person kg:4376/kg:9557 . ?person kg:4376/kg:7819 . ?person kg:4560/kg:6263 . ?person kg:4560/kg:6602 . ?person kg:4560/kg:9722 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n    \"  VALUES ?film { wd:Q1234567 wd:Q8901234 wd:Q5678901 wd:Q2345678 }\", \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P161 ?editor.\",\n    \"  ?director wdt:P26 wd:Q1234567.\", \"?editor wdt:P26 wd:Q8901234.\",\n    \"  ?director wdt:P26 wd:Q5678901.\",\n    \"  ?editor wdt:P26 wd:Q2345678.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?editor WHERE { VALUES ?film { wd:Q1234567 wd:Q8901234 wd:Q5678901 wd:Q2345678 } ?film wdt:P571 ?director. ?film wdt:P161 ?editor. ?director wdt:P26 wd:Q1234567. ?editor wdt:P26 wd:Q8901234. ?director wdt:P26 wd:Q5678901. ?editor wdt:P26 wd:Q2345678. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n      \"?director wdt:P57 wd:Q374172 .\",\n      \"?director wdt:P57 wd:Q166739 .\",\n      \"?director wdt:P57 wd:Q2449461 .\",\n      \"?director wdt:P57 wd:Q45602 .\",\n      \"?editor wdt:P1040 wd:Q374172 .\",\n      \"?editor wdt:P1040 wd:Q166739 .\",\n      \"?editor wdt:P1040 wd:Q2449461 .\",\n      \"?editor wdt:P1040 wd:Q45602 .\",\n      \"?director wdt:P26 wd:Q32337 .\",\n      \"?director wdt:P26 wd:Q241019 .\",\n      \"?editor wdt:P26 wd:Q137808 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?editor WHERE { ?director wdt:P57 wd:Q374172 . ?director wdt:P57 wd:Q166739 . ?director wdt:P57 wd:Q2449461 . ?director wdt:P57 wd:Q45602 . ?editor wdt:P1040 wd:Q374172 . ?editor wdt:P1040 wd:Q166739 . ?editor wdt:P1040 wd:Q2449461 . ?editor wdt:P1040 wd:Q45602 . ?director wdt:P26 wd:Q32337 . ?director wdt:P26 wd:Q241019 . ?editor wdt:P26 wd:Q137808 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n      \"?director kg:0674 kg:0802 .\",\n      \"?director kg:0674 kg:8420 .\",\n      \"?director kg:0674 kg:6094 .\",\n      \"?director kg:0674 kg:2607 .\",\n      \"?editor kg:3374 kg:0802 .\",\n      \"?editor kg:3374 kg:8420 .\",\n      \"?editor kg:3374 kg:6094 .\",\n      \"?editor kg:3374 kg:2607 .\",\n      \"?director kg:1521 kg:3253 .\",\n      \"?director kg:1521 kg:2766 .\",\n      \"?director kg:1521 kg:1588 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?editor WHERE { ?director kg:0674 kg:0802 . ?director kg:0674 kg:8420 . ?director kg:0674 kg:6094 . ?director kg:0674 kg:2607 . ?editor kg:3374 kg:0802 . ?editor kg:3374 kg:8420 . ?editor kg:3374 kg:6094 . ?editor kg:3374 kg:2607 . ?director kg:1521 kg:3253 . ?director kg:1521 kg:2766 . ?director kg:1521 kg:1588 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q6581072.\",\n    \"  ?person wdt:P109 wd:Q4233718.\",\n    \"  ?person wdt:P106 wd:Q3393466.\",\n    \"  ?person wdt:P106 wd:Q156928.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q6581072. ?person wdt:P109 wd:Q4233718. ?person wdt:P106 wd:Q3393466. ?person wdt:P106 wd:Q156928. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"wd:Q882 wdt:P31 wd:Q5.\",\n      \"wd:Q882 wdt:P21 wd:Q6581097.\",\n      \"?work wdt:P57 wd:Q882.\",\n      \"?work wdt:P58 wd:Q882.\",\n      \"?work wdt:P1040 wd:Q882.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?work WHERE { wd:Q882 wdt:P31 wd:Q5. wd:Q882 wdt:P21 wd:Q6581097. ?work wdt:P57 wd:Q882. ?work wdt:P58 wd:Q882. ?work wdt:P1040 wd:Q882. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2715 kg:8562 .\",\n      \"?resource kg:2241 kg:2114 .\",\n      \"?resource kg:9280 ?film .\",\n      \"?resource kg:7397 ?film .\",\n      \"?resource kg:6986 ?film .\",\n      \"FILTER(?resource = kg:2139)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2715 kg:8562 . ?resource kg:2241 kg:2114 . ?resource kg:9280 ?film . ?resource kg:7397 ?film . ?resource kg:6986 ?film . FILTER(?resource = kg:2139) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q783794.\",\n    \"  ?company wdt:P2067 wd:Q56061.\",\n    \"  ?company wdt:P126 wd:Q1062266.\",\n    \"  ?company wdt:P126 wd:Q34896.\",\n    \"  ?company wdt:P126 wd:Q572790.\",\n    \"  ?company wdt:P126 wd:Q1062266.\",\n    \"  ?company wdt:P126 wd:Q34896.\",\n    \"  ?company wdt:P126 wd:Q572790.\",\n    \"  ?company wdt:P126 wd:Q1062266.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q783794. ?company wdt:P2067 wd:Q56061. ?company wdt:P126 wd:Q1062266. ?company wdt:P126 wd:Q34896. ?company wdt:P126 wd:Q572790. ?company wdt:P126 wd:Q1062266. ?company wdt:P126 wd:Q34896. ?company wdt:P126 wd:Q572790. ?company wdt:P126 wd:Q1062266. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P750 wd:Q2062523.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q3133593.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q1411292.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q219635.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q505275.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q3511946.\",\n      \"?company wdt:P127/^wdt:P127* wd:Q7603552.\"\n    ]\n  }\n ", "normal_query": "SELECT ?company WHERE { ?company wdt:P750 wd:Q2062523. ?company wdt:P127/^wdt:P127* wd:Q3133593. ?company wdt:P127/^wdt:P127* wd:Q1411292. ?company wdt:P127/^wdt:P127* wd:Q219635. ?company wdt:P127/^wdt:P127* wd:Q505275. ?company wdt:P127/^wdt:P127* wd:Q3511946. ?company wdt:P127/^wdt:P127* wd:Q7603552. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company kg:1549/kg:3187 kg:3172 .\",\n      \"?company kg:1549/kg:2351 .\",\n      \"?company kg:1549/kg:1023 .\",\n      \"?company kg:1549/kg:4856 .\",\n      \"?company kg:1549/kg:7596 .\",\n      \"?company kg:1549/kg:5524 .\",\n      \"?company kg:1549/kg:5601 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company kg:1549/kg:3187 kg:3172 . ?company kg:1549/kg:2351 . ?company kg:1549/kg:1023 . ?company kg:1549/kg:4856 . ?company kg:1549/kg:7596 . ?company kg:1549/kg:5524 . ?company kg:1549/kg:5601 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P161 ?director.\",\n    \"  ?film wdt:P1098 ?star.\",\n    \"  ?film rdfs:label \\\"There Will Be No Leave Today\\\"@en.\",\n    \"  ?film2 wdt:P31 wd:Q11424.\",\n    \"  ?film2 wdt:P577 ?releaseDate2.\",\n    \"  ?film2 wdt:P161 ?director2.\",\n    \"  ?film2 wdt:P1098 ?star2.\",\n    \"  ?film2 rdfs:label \\\"The Killers\\\"@en.\",\n    \"  FILTER(?director = ?director2 && ?star = ?star2)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P161 ?director. ?film wdt:P1098 ?star. ?film rdfs:label \"There Will Be No Leave Today\"@en. ?film2 wdt:P31 wd:Q11424. ?film2 wdt:P577 ?releaseDate2. ?film2 wdt:P161 ?director2. ?film2 wdt:P1098 ?star2. ?film2 rdfs:label \"The Killers\"@en. FILTER(?director = ?director2 && ?star = ?star2) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  ?filmEditor wdt:P106 wd:Q385479.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50987.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50987.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50987.\" ,\"  ?filmEditor wdt:P1082 wd:Q133444.\",\"  ?filmEditor wdt:P1082 wd:Q133444.\",\"  ?filmEditor wdt:P1", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder wdt:P112 wd:Q241019.\",\n      \"?founder wdt:P26 wd:Q137808.\",\n      \"?founder wdt:P26 wd:Q32337.\",\n      \"?founder wdt:P26 wd:Q241019.\",\n      \"?founder wdt:P737 wd:Q7371.\",\n      \"?founder wdt:P737 wd:Q157191.\",\n      \"?founder wdt:P737 wd:Q104340.\",\n      \"?founder wdt:P106 wd:Q7042855.\"\n    ]\n  }\n ", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P112 wd:Q241019. ?founder wdt:P26 wd:Q137808. ?founder wdt:P26 wd:Q32337. ?founder wdt:P26 wd:Q241019. ?founder wdt:P737 wd:Q7371. ?founder wdt:P737 wd:Q157191. ?founder wdt:P737 wd:Q104340. ?founder wdt:P106 wd:Q7042855. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder kg:5368 kg:4320 .\",\n      \"?founder kg:9609 kg:6642 .\",\n      \"?founder kg:9609 kg:0424 .\",\n      \"?founder kg:9609 kg:4418 .\",\n      \"?founder kg:4505 kg:3750 .\",\n      \"?founder kg:4505 kg:9414 .\",\n      \"?founder kg:4505 kg:9016 .\",\n      \"?founder kg:2541 kg:7462 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?founder WHERE { ?founder kg:5368 kg:4320 . ?founder kg:9609 kg:6642 . ?founder kg:9609 kg:0424 . ?founder kg:9609 kg:4418 . ?founder kg:4505 kg:3750 . ?founder kg:4505 kg:9414 . ?founder kg:4505 kg:9016 . ?founder kg:2541 kg:7462 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q12345679 }\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  ?film wdt:P175 ?star.\",\n    \"  ?film wdt:P140 ?writer.\",\n    \"  ?director wdt:P26 wd:Q386954.\",\n    \"  ?director wdt:P106 wd:Q339695.\"\n    ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q12345679 } ?film wdt:P57 ?director. ?film wdt:P175 ?star. ?film wdt:P140 ?writer. ?director wdt:P26 wd:Q386954. ?director wdt:P106 wd:Q339695. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P161 ?star .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?director wdt:P26 wd:Q312258 .\",\n      \"?director wdt:P737 wd:Q312258 .\",\n      \"VALUES ?film {wd:Q3161846 wd:Q2709504 wd:Q3204825} .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film wdt:P57 ?director . ?film wdt:P161 ?star . ?film wdt:P58 ?writer . ?director wdt:P26 wd:Q312258 . ?director wdt:P737 wd:Q312258 . VALUES ?film {wd:Q3161846 wd:Q2709504 wd:Q3204825} . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n      \"VALUES ?film { kg:2720 kg:1428 kg:9534 }.\",\n      \"?film kg:8751 ?director .\",\n      \"?film kg:5571 ?star .\",\n      \"?film kg:2163 ?writer .\",\n      \"?director kg:4393 kg:7335 .\",\n      \"?director kg:1806 kg:7335 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { VALUES ?film { kg:2720 kg:1428 kg:9534 }. ?film kg:8751 ?director . ?film kg:5571 ?star . ?film kg:2163 ?writer . ?director kg:4393 kg:7335 . ?director kg:1806 kg:7335 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P31 wd:Q783794.\",\n    \"  ?company wdt:P2061 wd:Q503674.\",\n    \"  ?company wdt:P2061 wd:Q1062309.\",\n    \"  ?company wdt:P2061 wd:Q805422.\",\n    \"  ?company wdt:P2061 wd:Q768561.\",\n    \"  ?company wdt:P2061 wd:Q39144.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q783794. ?company wdt:P2061 wd:Q503674. ?company wdt:P2061 wd:Q1062309. ?company wdt:P2061 wd:Q805422. ?company wdt:P2061 wd:Q768561. ?company wdt:P2061 wd:Q39144. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P750 wd:Q17070012.\",\n      \"?company wdt:P127/wdt:P31 wd:Q849363.\",\n      \"?company wdt:P127/wdt:P31 wd:Q219635.\",\n      \"?company wdt:P272 wd:Q1628791.\",\n      \"?company wdt:P272 wd:Q65073147.\",\n      \"?company wdt:P272 wd:Q136469.\",\n      \"?company wdt:P272 wd:Q318128.\"\n    ]\n  }\n ", "normal_query": "SELECT ?company WHERE { ?company wdt:P750 wd:Q17070012. ?company wdt:P127/wdt:P31 wd:Q849363. ?company wdt:P127/wdt:P31 wd:Q219635. ?company wdt:P272 wd:Q1628791. ?company wdt:P272 wd:Q65073147. ?company wdt:P272 wd:Q136469. ?company wdt:P272 wd:Q318128. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company kg:4947 kg:6814.\",\n      \"?company kg:8165/kg:8044 kg:2485.\",\n      \"?company kg:8165/kg:8044 kg:3637.\",\n      \"?company kg:8165/kg:8044 kg:1784.\",\n      \"?company kg:8165/kg:8044 kg:8332.\",\n      \"?company kg:8165/kg:8044 kg:0479.\",\n      \"?company kg:8165/kg:8044 kg:0464.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?company WHERE { ?company kg:4947 kg:6814. ?company kg:8165/kg:8044 kg:2485. ?company kg:8165/kg:8044 kg:3637. ?company kg:8165/kg:8044 kg:1784. ?company kg:8165/kg:8044 kg:8332. ?company kg:8165/kg:8044 kg:0479. ?company kg:8165/kg:8044 kg:0464. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P172 wd:Q483.\",\n    \"  ?film1 wdt:P175 ?person.\",\n    \"  ?film1 wdt:P161 wd:Q1066264.\",\n    \"  ?film1 wdt:P162 wd:Q1066264.\",\n    \"  ?film1 wdt:P359 wd:Q1066264.\",\n    \"  ?film2 wdt:P175 ?person.\",\n    \"  ?film2 wdt:P161 wd:Q186075.\",\n    \"  ?film2 wdt:P359 wd:Q186075.\",\n    \"  ?film3 wdt:P175 ?person.\",\n    \"  ?film3 wdt:P161 wd:Q483.\",\n    \"  ?film3 wdt:P359 wd:Q483.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P106 wd:Q33988. ?person wdt:P172 wd:Q483. ?film1 wdt:P175 ?person. ?film1 wdt:P161 wd:Q1066264. ?film1 wdt:P162 wd:Q1066264. ?film1 wdt:P359 wd:Q1066264. ?film2 wdt:P175 ?person. ?film2 wdt:P161 wd:Q186075. ?film2 wdt:P359 wd:Q186075. ?film3 wdt:P175 ?person. ?film3 wdt:P161 wd:Q483. ?film3 wdt:P359 wd:Q483. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P27 wd:Q29 .\",\n      \"?person wdt:P57 wd:Q3207690 .\",\n      \"?person wdt:P1040 wd:Q3207690 .\",\n      \"?person wdt:P58 wd:Q289021 .\",\n      \"?person wdt:P57 wd:Q463946 .\",\n      \"?person wdt:P1040 wd:Q463946 .\",\n      \"?person wdt:P58 wd:Q4004365 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P27 wd:Q29 . ?person wdt:P57 wd:Q3207690 . ?person wdt:P1040 wd:Q3207690 . ?person wdt:P58 wd:Q289021 . ?person wdt:P57 wd:Q463946 . ?person wdt:P1040 wd:Q463946 . ?person wdt:P58 wd:Q4004365 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8325 kg:2955 .\",\n      \"?resource kg:8501 kg:2955 .\",\n      \"?resource kg:6914 kg:2955 .\",\n      \"?resource kg:8501 kg:0414 .\",\n      \"?resource kg:8325 kg:0414 .\",\n      \"?resource kg:8501 kg:9100 .\",\n      \"?resource kg:6914 kg:9100 .\",\n      \"?resource kg:8325 kg:9100 .\",\n      \"?resource kg:8501 kg:1223 .\",\n      \"?resource kg:6914 kg:1223 .\",\n      \"?resource kg:8325 kg:1223 .\",\n      \"?resource kg:3675 kg:8626 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8325 kg:2955 . ?resource kg:8501 kg:2955 . ?resource kg:6914 kg:2955 . ?resource kg:8501 kg:0414 . ?resource kg:8325 kg:0414 . ?resource kg:8501 kg:9100 . ?resource kg:6914 kg:9100 . ?resource kg:8325 kg:9100 . ?resource kg:8501 kg:1223 . ?resource kg:6914 kg:1223 . ?resource kg:8325 kg:1223 . ?resource kg:3675 kg:8626 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q270468 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q3393465.\",\n    \"  ?spouse wdt:P31 wd:Q3393465.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q270468 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q3393465. ?spouse wdt:P31 wd:Q3393465. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q6813152 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P106 wd:Q222344.\",\n      \"?spouse wdt:P112 wd:Q746676.\",\n      \"?spouse wdt:P112 wd:Q1044630.\",\n      \"?spouse wdt:P112 wd:Q242446.\",\n      \"?spouse wdt:P112 wd:Q216611.\",\n      \"?spouse wdt:P112 wd:Q258945.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q6813152 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344. ?spouse wdt:P112 wd:Q746676. ?spouse wdt:P112 wd:Q1044630. ?spouse wdt:P112 wd:Q242446. ?spouse wdt:P112 wd:Q216611. ?spouse wdt:P112 wd:Q258945. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8556 kg:9449 ?spouse.\",\n      \"?spouse kg:8076 kg:1091.\",\n      \"?spouse kg:7813 kg:3610.\",\n      \"?spouse kg:7813 kg:8063.\",\n      \"?spouse kg:7813 kg:5144.\",\n      \"?spouse kg:7813 kg:8877.\",\n      \"?spouse kg:7813 kg:1879.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8556 kg:9449 ?spouse. ?spouse kg:8076 kg:1091. ?spouse kg:7813 kg:3610. ?spouse kg:7813 kg:8063. ?spouse kg:7813 kg:5144. ?spouse kg:7813 kg:8877. ?spouse kg:7813 kg:1879. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?star WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P1686 ?cinematographer.\",\n    \"  ?film wdt:P109 ?star.\",\n    \"  ?film rdfs:label \\\"Inception\\\"@en.\",\n    \"  ?film2 wdt:P31 wd:Q11424.\",\n    \"  ?film2 wdt:P577 ?releaseDate2.\",\n    \"  ?film2 wdt:P1686 ?cinematographer2.\",\n    \"  ?film2 wdt:P109 ?star2.\",\n    \"  ?film2 rdfs:label \\\"Game Over\\\"@en.\",\n    \"  ?film3 wdt:P31 wd:Q11424.\",\n    \"  ?film3 wdt:P577 ?releaseDate3.\",\n    \"  ?film3 wdt:P1686 ?cinematographer3.\",\n    \"  ?film3 wdt:P109 ?star3.\",\n    \"  ?film3 rdfs:label \\\"Liberation\\\"@en.\",\n    \"  ?film4 wdt:P31 wd:Q11424.\",\n    \"  ?film4 wdt:P577 ?releaseDate4.\",\n    \"  ?film4 wdt:P1686 ?cinematographer4.\",\n    \"  ?film4 wdt:P109 ?star4.\",\n    \"  ?film4 rdfs:label \\\"The Madness\\\"@en.\",\n    \"  ?film4 wdt:P577 ?releaseDate4.\",\n    \"  ?film4 wdt:P1686 ?cinematographer4.\",\n    \"  ?film4 wdt:P109 ?star4.\",\n    \"  ?film4 wdt:P582 ?writer.\",\n    \"  ?film4 wdt:P571 ?director.\",\n    \"  ?film4 wdt:P366 ?executiveProducer.\",\n    \"  ?film4 wdt:P906 ?editor.\",\n    \"  FILTER (?cinematographer = ?cinematographer2)\",\n    \"  FILTER (?star = ?star2)\",\n    \"  FILTER (?cinematographer = ?cinematographer3)\",\n    \"  FILTER (?star = ?star3)\",\n    \"  FILTER (?cinematographer = ?cinematographer4)\",\n    \"  FILTER (?star = ?star4)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?star WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P1686 ?cinematographer. ?film wdt:P109 ?star. ?film rdfs:label \"Inception\"@en. ?film2 wdt:P31 wd:Q11424. ?film2 wdt:P577 ?releaseDate2. ?film2 wdt:P1686 ?cinematographer2. ?film2 wdt:P109 ?star2. ?film2 rdfs:label \"Game Over\"@en. ?film3 wdt:P31 wd:Q11424. ?film3 wdt:P577 ?releaseDate3. ?film3 wdt:P1686 ?cinematographer3. ?film3 wdt:P109 ?star3. ?film3 rdfs:label \"Liberation\"@en. ?film4 wdt:P31 wd:Q11424. ?film4 wdt:P577 ?releaseDate4. ?film4 wdt:P1686 ?cinematographer4. ?film4 wdt:P109 ?star4. ?film4 rdfs:label \"The Madness\"@en. ?film4 wdt:P577 ?releaseDate4. ?film4 wdt:P1686 ?cinematographer4. ?film4 wdt:P109 ?star4. ?film4 wdt:P582 ?writer. ?film4 wdt:P571 ?director. ?film4 wdt:P366 ?executiveProducer. ?film4 wdt:P906 ?editor. FILTER (?cinematographer = ?cinematographer2) FILTER (?star = ?star2) FILTER (?cinematographer = ?cinematographer3) FILTER (?star = ?star3) FILTER (?cinematographer = ?cinematographer4) FILTER (?star = ?star4) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q85520081.\",\n      \"?person wdt:P57 wd:Q96054985.\",\n      \"?person wdt:P57 wd:Q85532437.\",\n      \"?person wdt:P161 wd:Q85520081.\",\n      \"?person wdt:P161 wd:Q96054985.\",\n      \"?person wdt:P161 wd:Q85532437.\",\n      \"?person wdt:P58 wd:Q87778273.\",\n      \"?person wdt:P57 wd:Q87778273.\",\n      \"?person wdt:P1431 wd:Q87778273.\",\n      \"?person wdt:P1040 wd:Q87778273.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q85520081. ?person wdt:P57 wd:Q96054985. ?person wdt:P57 wd:Q85532437. ?person wdt:P161 wd:Q85520081. ?person wdt:P161 wd:Q96054985. ?person wdt:P161 wd:Q85532437. ?person wdt:P58 wd:Q87778273. ?person wdt:P57 wd:Q87778273. ?person wdt:P1431 wd:Q87778273. ?person wdt:P1040 wd:Q87778273. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:3026 kg:1786.\",\n      \"?person kg:3026 kg:4083.\",\n      \"?person kg:3026 kg:0590.\",\n      \"?person kg:1594 kg:4752.\",\n      \"?person kg:2395 kg:4752.\",\n      \"?person kg:6680 kg:4752.\",\n      \"?person kg:1348 kg:1786.\",\n      \"?person kg:1348 kg:4083.\",\n      \"?person kg:1348 kg:0590.\",\n      \"?person kg:1505 kg:1786.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person kg:3026 kg:1786. ?person kg:3026 kg:4083. ?person kg:3026 kg:0590. ?person kg:1594 kg:4752. ?person kg:2395 kg:4752. ?person kg:6680 kg:4752. ?person kg:1348 kg:1786. ?person kg:1348 kg:4083. ?person kg:1348 kg:0590. ?person kg:1505 kg:1786. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  VALUES ?film { wd:Q1056427 wd:Q398044 wd:Q1056427 wd:Q1056427 }\",\n    \"  ?film wdt:P577 ?writer.\",\n    \"  ?film wdt:P162 ?cinematographer.\",\n    \"  ?writer wdt:P31 wd:Q5.\",\n    \"  ?cinematographer wdt:P31 wd:Q5.\",\n    \"  ?writer wdt:P40 ?spouse.\",\n    \"  ?spouse wdt:P269 ?influencedPerson.\",\n    \"  VALUES ?influencedPerson { wd:Q78644 wd:Q31444 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { VALUES ?film { wd:Q1056427 wd:Q398044 wd:Q1056427 wd:Q1056427 } ?film wdt:P577 ?writer. ?film wdt:P162 ?cinematographer. ?writer wdt:P31 wd:Q5. ?cinematographer wdt:P31 wd:Q5. ?writer wdt:P40 ?spouse. ?spouse wdt:P269 ?influencedPerson. VALUES ?influencedPerson { wd:Q78644 wd:Q31444 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q613974 .\",\n      \"?writer wdt:P58 wd:Q208910 .\",\n      \"?writer wdt:P58 wd:Q1609393 .\",\n      \"?writer wdt:P58 wd:Q2411065 .\",\n      \"?writer wdt:P344 wd:Q613974 .\",\n      \"?writer wdt:P344 wd:Q208910 .\",\n      \"?writer wdt:P344 wd:Q1609393 .\",\n      \"?writer wdt:P344 wd:Q2411065 .\",\n      \"?writer wdt:P26 wd:Q52306598 .\",\n      \"?writer wdt:P737 wd:Q717378 .\",\n      \"?writer wdt:P737 wd:Q52306598 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q613974 . ?writer wdt:P58 wd:Q208910 . ?writer wdt:P58 wd:Q1609393 . ?writer wdt:P58 wd:Q2411065 . ?writer wdt:P344 wd:Q613974 . ?writer wdt:P344 wd:Q208910 . ?writer wdt:P344 wd:Q1609393 . ?writer wdt:P344 wd:Q2411065 . ?writer wdt:P26 wd:Q52306598 . ?writer wdt:P737 wd:Q717378 . ?writer wdt:P737 wd:Q52306598 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"?writer kg:2129 kg:2044 .\",\n            \"?writer kg:6371 kg:3949 .\",\n            \"?writer kg:4097 kg:3949 .\",\n            \"?writer kg:4097 kg:1488 .\",\n            \"?writer kg:4097 kg:1736 .\",\n            \"?writer kg:5258 kg:4998 ?spouse .\",\n            \"?spouse kg:2129 kg:2044 .\",\n            \"?spouse kg:3628 kg:5258 .\",\n            \"?spouse kg:7321 kg:4998 ?writer .\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?writer WHERE { ?writer kg:2129 kg:2044 . ?writer kg:6371 kg:3949 . ?writer kg:4097 kg:3949 . ?writer kg:4097 kg:1488 . ?writer kg:4097 kg:1736 . ?writer kg:5258 kg:4998 ?spouse . ?spouse kg:2129 kg:2044 . ?spouse kg:3628 kg:5258 . ?spouse kg:7321 kg:4998 ?writer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P161 ?director.\",\n    \"  ?director wdt:P106 wd:Q33988.\",\n    \"  ?film rdfs:label \\\"Uzak\\\"@en .\",\n    \"  ?film rdfs:label \\\"Clouds of May\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P161 ?director. ?director wdt:P106 wd:Q33988. ?film rdfs:label \"Uzak\"@en . ?film rdfs:label \"Clouds of May\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P58 ?director.\",\n      \"?film wdt:P1040 ?director.\",\n      \"?film wdt:P1431 ?director.\",\n      \"VALUES ?film {wd:Q2086445 wd:Q1361018}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P57 ?director. ?film wdt:P58 ?director. ?film wdt:P1040 ?director. ?film wdt:P1431 ?director. VALUES ?film {wd:Q2086445 wd:Q1361018}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q724172"]], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director kg:7293 kg:9595 .\",\n      \"?director kg:7293 kg:8115 .\",\n      \"?director kg:7293 kg:6756 .\",\n      \"?director kg:9796 kg:8115 .\",\n      \"?director kg:9796 kg:6756 .\",\n      \"?director kg:3493 kg:8115 .\",\n      \"?director kg:3493 kg:6756 .\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director kg:7293 kg:9595 . ?director kg:7293 kg:8115 . ?director kg:7293 kg:6756 . ?director kg:9796 kg:8115 . ?director kg:9796 kg:6756 . ?director kg:3493 kg:8115 . ?director kg:3493 kg:6756 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084672.\",\n    \"  ?film wdt:P57 wd:Q198444.\",\n    \"  ?film wdt:P161 ?director.\",\n    \"  ?director wdt:P106 wd:Q3393466.\",\n    \"  ?director wdt:P26 wd:Q57464.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P31 wd:Q1084672. ?film wdt:P57 wd:Q198444. ?film wdt:P161 ?director. ?director wdt:P106 wd:Q3393466. ?director wdt:P26 wd:Q57464. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P1040 wd:Q2298257 .\",\n      \"?director wdt:P1040 wd:Q2493884 .\",\n      \"?director wdt:P1040 wd:Q63993096 .\",\n      \"?director wdt:P26 wd:Q312258 .\",\n      \"?director wdt:P737 wd:Q312258 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P1040 wd:Q2298257 . ?director wdt:P1040 wd:Q2493884 . ?director wdt:P1040 wd:Q63993096 . ?director wdt:P26 wd:Q312258 . ?director wdt:P737 wd:Q312258 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director\",\n    \"WHERE {\",\n      \"?director kg:1597 kg:6665 .\",\n      \"?director kg:3248 kg:6665 .\",\n      \"?director kg:0834 kg:4401 .\",\n      \"?director kg:0834 kg:3793 .\",\n      \"?director kg:0834 kg:8360 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director kg:1597 kg:6665 . ?director kg:3248 kg:6665 . ?director kg:0834 kg:4401 . ?director kg:0834 kg:3793 . ?director kg:0834 kg:8360 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1064273 wdt:P1598 ?distributor.\",\n    \"  wd:Q1064273 wdt:P1598 ?producer.\",\n    \"  ?distributor wdt:P1598 ?acquirer.\",\n    \"  VALUES ?acquirer {\",\n    \"    wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1064273 wdt:P1598 ?distributor. wd:Q1064273 wdt:P1598 ?producer. ?distributor wdt:P1598 ?acquirer. VALUES ?acquirer { wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273 wd:Q1064273 } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q2007336 wdt:P127 ?distributor.\",\n    \"  wd:Q2007336 wdt:P127 ?producer.\",\n    \"  ?distributor wdt:P127 wd:Q849363.\",\n    \"  ?distributor wdt:P127 wd:Q505275.\",\n    \"  ?distributor wdt:P127 wd:Q219635.\",\n    \"  ?distributor wdt:P127 wd:Q3511946.\",\n    \"  ?distributor wdt:P127 wd:Q7603552.\",\n    \"  ?producer wdt:P272 wd:Q2062523.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q2007336 wdt:P127 ?distributor. wd:Q2007336 wdt:P127 ?producer. ?distributor wdt:P127 wd:Q849363. ?distributor wdt:P127 wd:Q505275. ?distributor wdt:P127 wd:Q219635. ?distributor wdt:P127 wd:Q3511946. ?distributor wdt:P127 wd:Q7603552. ?producer wdt:P272 wd:Q2062523. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?distributor kg:4122 is distributed by ?producer.\",\n      \"?producer kg:0622 is owned by kg:8425.\",\n      \"?producer kg:0622 is owned by kg:3467.\",\n      \"?producer kg:0622 is owned by kg:8849.\",\n      \"?producer kg:0622 is owned by kg:7561.\",\n      \"?producer kg:0622 is owned by kg:9245.\",\n      \"?producer kg:0622 is owned by kg:1950.\",\n      \"?distributor kg:3255 is production company.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor kg:4122 is distributed by ?producer. ?producer kg:0622 is owned by kg:8425. ?producer kg:0622 is owned by kg:3467. ?producer kg:0622 is owned by kg:8849. ?producer kg:0622 is owned by kg:7561. ?producer kg:0622 is owned by kg:9245. ?producer kg:0622 is owned by kg:1950. ?distributor kg:3255 is production company. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P161 wd:Q208497.\",\n    \"  ?movie wdt:P356 wd:Q108646.\",\n    \"  ?movie wdt:P356 wd:Q108646.\",\n    \"  ?movie wdt:P356 wd:Q27946.\",\n    \"  ?movie wdt:P356 wd:Q108646.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P161 wd:Q208497. ?movie wdt:P356 wd:Q108646. ?movie wdt:P356 wd:Q108646. ?movie wdt:P356 wd:Q27946. ?movie wdt:P356 wd:Q108646. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie wdt:P58 wd:Q295984.\",\n      \"?movie wdt:P57 wd:Q242477.\",\n      \"?movie wdt:P57 wd:Q16390.\",\n      \"?movie wdt:P57 wd:Q4420093.\",\n      \"?movie wdt:P162 wd:Q295984.\",\n      \"?movie wdt:P162 wd:Q242477.\",\n      \"?movie wdt:P162 wd:Q16390.\",\n      \"?movie wdt:P162 wd:Q4420093.\",\n      \"?movie wdt:P58 wd:Q295984.\",\n      \"?movie wdt:P58 wd:Q242477.\",\n      \"?movie wdt:P58 wd:Q16390.\",\n      \"?movie wdt:P58 wd:Q4420093.\",\n      \"?movie wdt:P161 wd:Q93188.\",\n      \"?movie wdt:P161 wd:Q744357.\"\n    ]\n  }\n ", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424. ?movie wdt:P58 wd:Q295984. ?movie wdt:P57 wd:Q242477. ?movie wdt:P57 wd:Q16390. ?movie wdt:P57 wd:Q4420093. ?movie wdt:P162 wd:Q295984. ?movie wdt:P162 wd:Q242477. ?movie wdt:P162 wd:Q16390. ?movie wdt:P162 wd:Q4420093. ?movie wdt:P58 wd:Q295984. ?movie wdt:P58 wd:Q242477. ?movie wdt:P58 wd:Q16390. ?movie wdt:P58 wd:Q4420093. ?movie wdt:P161 wd:Q93188. ?movie wdt:P161 wd:Q744357. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n      \"?movie kg:4101 kg:1860 .\",\n      \"?movie kg:9112 kg:0279 .\",\n      \"?movie kg:9112 kg:6595 .\",\n      \"?movie kg:9112 kg:1608 .\",\n      \"?movie kg:3082 kg:4602 .\",\n      \"?movie kg:3580 kg:0743 .\",\n      \"?movie kg:3580 kg:8323 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie kg:4101 kg:1860 . ?movie kg:9112 kg:0279 . ?movie kg:9112 kg:6595 . ?movie kg:9112 kg:1608 . ?movie kg:3082 kg:4602 . ?movie kg:3580 kg:0743 . ?movie kg:3580 kg:8323 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q1340289 wdt:P31 wd:Q5.\",\n    \"wd:Q1340289 wdt:P106 wd:Q36656. \",\n    \"?resource wdt:P31 ?type .\",\n    \"}\",\n  \"limit\" , \": 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1340289 wdt:P31 wd:Q5. wd:Q1340289 wdt:P106 wd:Q36656. ?resource wdt:P31 ?type . } limit : 100 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q103013 wdt:P106 wd:Q69423232 .\",\n      \"BIND(wd:Q103013 AS ?resource) \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q103013 wdt:P106 wd:Q69423232 . BIND(wd:Q103013 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q103013"]], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ kg:8329 kg:1788 kg:7660 . }\",\n      \"UNION\",\n      \"{ ?resource kg:1788 kg:7660 . }\"\n      ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8329 kg:1788 kg:7660 . } UNION { ?resource kg:1788 kg:7660 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q396 wdt:P106 wd:Q36834 .\",\n    \"?resource wdt:P279* wd:Q571 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q396 wdt:P106 wd:Q36834 . ?resource wdt:P279* wd:Q571 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q392 wdt:P106 wd:Q36834 .\",\n      \"BIND(wd:Q392 AS ?resource) }\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q392 wdt:P106 wd:Q36834 . BIND(wd:Q392 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q392"]], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \" kg:6401 kg:1483 kg:9590 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { kg:6401 kg:1483 kg:9590 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P58 wd:Q79609 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 wd:Q79609 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film wdt:P1040 wd:Q853 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1040 wd:Q853 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q281988"]], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film kg:5311 kg:7776 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:5311 kg:7776 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sequel WHERE {\",\n      \"wd:Q185932 wdt:P156 ?sequel .\",\n      \"?sequel wdt:P179* wd:Q40495 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q185932 wdt:P156 ?sequel . ?sequel wdt:P179* wd:Q40495 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q1042294 wdt:P155 ?resource.\",\n      \"FILTER(?resource = wd:Q721).\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1042294 wdt:P155 ?resource. FILTER(?resource = wd:Q721). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q721"]], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:5330 kg:7972 .\",\n      \"FILTER (?resource = kg:4904) }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5330 kg:7972 . FILTER (?resource = kg:4904) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?father ?mother WHERE {\",\n    \"wd:Q76519 wdt:P22 ?father.\",\n    \"wd:Q76519 wdt:P25 ?mother.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?father ?mother WHERE { wd:Q76519 wdt:P22 ?father. wd:Q76519 wdt:P25 ?mother. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parent WHERE {\",\n      \"wd:Q260 wdt:P40 ?parent.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parents WHERE {\",\n    \"  kg:5475 kg:9549 ?parents .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parents WHERE { kg:5475 kg:9549 ?parents . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q42569.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q42569. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"wd:Q42 wdt:P50 ?work .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P50 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ kg:5621 kg:2274 ?work . }\",\n        \"UNION\",\n        \"{ ?work dbo:author kg:5621 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { kg:5621 kg:2274 ?work . } UNION { ?work dbo:author kg:5621 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P2861 wd:Q40794 .\",\n    \"?resource wdt:P108 wd:Q7854 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2861 wd:Q40794 . ?resource wdt:P108 wd:Q7854 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q79070 wdt:P108 wd:Q40 .\",\n      \"BIND(wd:Q79070 AS ?resource) }\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 wd:Q40 . BIND(wd:Q79070 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q79070"]], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:5735 kg:0040 .\",\n      \"?resource kg:6895 kg:0040 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5735 kg:0040 . ?resource kg:6895 kg:0040 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q9274 .\",\n    \"?resource wdt:P31 wd:Q3331189 .\",\n    \"?resource rdfs:label \\\"The Hobbit: An Unexpected Journey\\\"@en .\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q9274 . ?resource wdt:P31 wd:Q3331189 . ?resource rdfs:label \"The Hobbit: An Unexpected Journey\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q80379 wdt:P58 wd:Q892 .\",\n      \"BIND(wd:Q80379 AS ?resource)\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 wd:Q892 . BIND(wd:Q80379 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q80379"]], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ kg:1098 kg:1037 kg:4332 . }\",\n      \"UNION\",\n      \"{ kg:1098 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1098 kg:1037 kg:4332 . } UNION { kg:1098 <http://www.w3.org/1999/02//22-rdf-syntax-ns> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q108623 wdt:P345 ?producer.\",\n    \"?producer wdt:P39 ?position.\",\n    \"?position wdt:P279* wd:Q15116571.\",\n    \"BIND(wd:Q108623 AS ?resource).\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q108623 wdt:P345 ?producer. ?producer wdt:P39 ?position. ?position wdt:P279* wd:Q15116571. BIND(wd:Q108623 AS ?resource). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q72276 wdt:P1431 ?resource .\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"FILTER(?resource = wd:Q2680)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q72276 wdt:P1431 ?resource . ?resource wdt:P31 wd:Q5 . FILTER(?resource = wd:Q2680) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q2680"]], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:0925 kg:5777 .\",\n      \"?resource kg:2143 kg:5777 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0925 kg:5777 . ?resource kg:2143 kg:5777 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"wd:Q1529768 wdt:P345 ?costumeDesigner.\",\n    \"?costumeDesigner wdt:P31 wd:Q5.\",\n    \"?costumeDesigner wdt:P106 wd:Q36834.\",\n    \"?composer wdt:P31 wd:Q5.\",\n    \"?composer wdt:P106 wd:Q21794.\",\n    \"{ ?costumeDesigner wdt:P21 ?composer } UNION { ?composer wdt:P21 ?costumeDesigner }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q1529768 wdt:P345 ?costumeDesigner. ?costumeDesigner wdt:P31 wd:Q5. ?costumeDesigner wdt:P106 wd:Q36834. ?composer wdt:P31 wd:Q5. ?composer wdt:P106 wd:Q21794. { ?costumeDesigner wdt:P21 ?composer } UNION { ?composer wdt:P21 ?costumeDesigner } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P2515 wd:Q2733930 .\",\n          \"?resource wdt:P106 wd:Q36834 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P2515 wd:Q2733930 . ?resource wdt:P106 wd:Q36834 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:1786 ?film .\",\n          \"?resource kg:5123 kg:1651 .\",\n          \"?resource kg:5123 kg:9266 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1786 ?film . ?resource kg:5123 kg:1651 . ?resource kg:5123 kg:9266 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q180943 wdt:P527 ?cinematographer.\",\n    \"  ?cinematographer wdt:P31 wd:Q5362855;\",\n    \"                   wdt:P31 wd:Q339154.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q180943 wdt:P527 ?cinematographer. ?cinematographer wdt:P31 wd:Q5362855; wdt:P31 wd:Q339154. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q69423232 .\",\n          \"?resource wdt:P344 wd:Q158069 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q69423232 . ?resource wdt:P344 wd:Q158069 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:5717 kg:3042 .\",\n          \"?resource kg:6330 kg:3806 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5717 kg:3042 . ?resource kg:6330 kg:3806 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q79853 wdt:P26 ?spouse.\",\n    \"?spouse wdt:P108 ?organization.\",\n    \"?organization wdt:P31 wd:Q46970.\",\n    \"BIND(?organization AS ?resource).\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79853 wdt:P26 ?spouse. ?spouse wdt:P108 ?organization. ?organization wdt:P31 wd:Q46970. BIND(?organization AS ?resource). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"{ wd:Q2607 wdt:P26 ?spouse. }\",\n        \"UNION\",\n        \"{ ?spouse wdt:P26 wd:Q2607. }\",\n        \"?spouse wdt:P108 wd:Q76845.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { { wd:Q2607 wdt:P26 ?spouse. } UNION { ?spouse wdt:P26 wd:Q2607. } ?spouse wdt:P108 wd:Q76845. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q76893"]], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8368 kg:7581 ?spouse . } UNION { ?spouse kg:7581 kg:8368 . }\",\n        \"?spouse kg:9306 kg:7601 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8368 kg:7581 ?spouse . } UNION { ?spouse kg:7581 kg:8368 . } ?spouse kg:9306 kg:7601 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q19820 wdt:P31 wd:Q5.\",\n    \"?resource wdt:P175 wd:Q19820 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q19820 wdt:P31 wd:Q5. ?resource wdt:P175 wd:Q19820 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q208824 wdt:P162 ?producer.\",\n      \"?producer wdt:P106 wd:Q36834.\",\n      \"BIND(?producer AS ?resource)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q208824 wdt:P162 ?producer. ?producer wdt:P106 wd:Q36834. BIND(?producer AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q7542"]], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ kg:0923 kg:5188 ?resource . } UNION \",\n      \"{ kg:0923 kg:3182 ?resource . }\"\n      ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0923 kg:5188 ?resource . } UNION { kg:0923 kg:3182 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q106254987 wdt:P175 ?composer.\",\n    \"  ?composer wdt:P31 wd:Q5.\",\n    \"  ?composer wdt:P106 wd:Q108705.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q106254987 wdt:P175 ?composer. ?composer wdt:P31 wd:Q5. ?composer wdt:P106 wd:Q108705. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P86 wd:Q577126 .\",\n          \"?resource wdt:P106 wd:Q69423232 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P86 wd:Q577126 . ?resource wdt:P106 wd:Q69423232 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0046 kg:8622 .\",\n          \"?resource kg:0046 kg:677 .\",\n          \"?resource kg:6046 kg:Al_Compás_de_tu_Mentira .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0046 kg:8622 . ?resource kg:0046 kg:677 . ?resource kg:6046 kg:Al_Compás_de_tu_Mentira . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n      \"{\",\n        \"wd:Q170896 wdt:P50 ?composer.\",\n        \"?composer wdt:P31 wd:Q5.\",\n        \"?composer wdt:P106 wd:Q245068.\",\n      \"} UNION {\",\n        \"wd:Q170896 wdt:P86 ?composer.\",\n        \"?composer wdt:P31 wd:Q5.\",\n        \"?composer wdt:P106 wd:Q245068.\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?composer WHERE { { wd:Q170896 wdt:P50 ?composer. ?composer wdt:P31 wd:Q5. ?composer wdt:P106 wd:Q245068. } UNION { wd:Q170896 wdt:P86 ?composer. ?composer wdt:P31 wd:Q5. ?composer wdt:P106 wd:Q245068. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?composer WHERE {\",\n        \"{\",\n          \"?composer wdt:P86 wd:Q76582 .\",\n          \"?composer wdt:P106 wd:Q222344 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { { ?composer wdt:P86 wd:Q76582 . ?composer wdt:P106 wd:Q222344 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:7873 kg:5470 .\",\n          \"?resource kg:8613 kg:6161 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7873 kg:5470 . ?resource kg:8613 kg:6161 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q725096 ;\",\n    \"      wdt:P158 ?follows .\",\n    \"wd:Q404628 wdt:P156 ?follows .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q725096 ; wdt:P158 ?follows . wd:Q404628 wdt:P156 ?follows . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?item WHERE {\",\n      \"?item wdt:P155 wd:Q4348691 .\",\n      \"?item wdt:P750 wd:Q2283 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P155 wd:Q4348691 . ?item wdt:P750 wd:Q2283 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2698 kg:7747 ?resource . }\",\n        \"UNION\",\n        \"{ ?resource kg:7747 kg:2698 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2698 kg:7747 ?resource . } UNION { ?resource kg:7747 kg:2698 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q2085381;\",\n    \"       wdt:P161 wd:Q7414909.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q2085381; wdt:P161 wd:Q7414909. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sequel WHERE {\",\n        \"{\",\n          \"?sequel wdt:P31 wd:Q483394 .\",\n          \"?sequel wdt:P161 wd:Q967797 .\",\n          \"?sequel wdt:P155 ?predecessor .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { { ?sequel wdt:P31 wd:Q483394 . ?sequel wdt:P161 wd:Q967797 . ?sequel wdt:P155 ?predecessor . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9528 kg:2642 .\",\n          \"?resource kg:8519 kg:9033 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9528 kg:2642 . ?resource kg:8519 kg:9033 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?founder WHERE {\",\n    \"wd:Q18690427 wdt:P3320 ?company .\",\n    \"?company wdt:P155 ?founder .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q18690427 wdt:P3320 ?company . ?company wdt:P155 ?founder . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n  \"query\":\n    [\n      \"SELECT ?founder WHERE {\",\n        \"{ wd:Q81950264 wdt:P112 ?founder. }\",\n        \"UNION\",\n        \"{ ?founder wdt:P355 wd:Q81950264. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { { wd:Q81950264 wdt:P112 ?founder. } UNION { ?founder wdt:P355 wd:Q81950264. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n  \"query\":\n    [\n      \"SELECT ?founder WHERE {\",\n        \"{ kg:0861 kg:5288 ?founder . }\",\n        \"UNION\",\n        \"{ ?subsidiary kg:8328 kg:0861 . ?subsidiary kg:5288 ?founder . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { { kg:0861 kg:5288 ?founder . } UNION { ?subsidiary kg:8328 kg:0861 . ?subsidiary kg:5288 ?founder . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q352 . \",\n    \"  ?sibling wdt:P3373 wd:Q36491 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q352 . ?sibling wdt:P3373 wd:Q36491 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{ wd:Q352 wdt:P3373 ?sibling . } UNION \",\n        \"{ ?sibling wdt:P3373 wd:Q352 . }\",\n        \"?sibling wdt:P108 wd:Q1022419 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { wd:Q352 wdt:P3373 ?sibling . } UNION { ?sibling wdt:P3373 wd:Q352 . } ?sibling wdt:P108 wd:Q1022419 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q84328"]], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{ kg:9755 kg:2023 ?sibling . } UNION { ?sibling kg:2023 kg:9755 . }\",\n        \"?sibling kg:6233 kg:3300 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { kg:9755 kg:2023 ?sibling . } UNION { ?sibling kg:2023 kg:9755 . } ?sibling kg:6233 kg:3300 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employer WHERE {\",\n    \"?DrDre wdt:P108 ?employer .\",\n    \"?employer wdt:P750 wd:Q3296499 .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employer WHERE { ?DrDre wdt:P108 ?employer . ?employer wdt:P750 wd:Q3296499 . SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n        \"{ wd:Q6078 wdt:P108 ?employer. }\",\n        \"UNION\",\n        \"{ wd:Q42310881 wdt:P750 ?employer. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { { wd:Q6078 wdt:P108 ?employer. } UNION { wd:Q42310881 wdt:P750 ?employer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q312"], ["wd:Q368215"], ["wd:Q3070866"], ["wd:Q79576"]], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2257 kg:7506 ?resource . } UNION \",\n        \"{ kg:5400 kg:6968 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:2257 kg:7506 ?resource . } UNION { kg:5400 kg:6968 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?parent ?employer WHERE {\",\n    \"wd:Q1549620 wdt:P40 ?parent .\",\n    \"wd:Q387666 wdt:P108 ?employer .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?parent ?employer WHERE { wd:Q1549620 wdt:P40 ?parent . wd:Q387666 wdt:P108 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parent ?employer WHERE {\",\n        \"{ wd:Q15070044 wdt:P40 ?parent. }\",\n        \"UNION\",\n        \"{ wd:Q103941992 wdt:P108 ?employer. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?parent ?employer WHERE { { wd:Q15070044 wdt:P40 ?parent. } UNION { wd:Q103941992 wdt:P108 ?employer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q381880"], ["wd:Q440885"], ["wd:Q103946926"], ["wd:Q2935433"], ["wd:Q76"], ["wd:Q4858123"]], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parent ?employer WHERE {\",\n        \"{ kg:4784 kg:4636 ?parent . }\",\n        \"UNION\",\n        \"{ kg:8530 kg:7837 ?employer . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?parent ?employer WHERE { { kg:4784 kg:4636 ?parent . } UNION { kg:8530 kg:7837 ?employer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?sibling wdt:P31 wd:Q1052281;\",\n      \"        wdt:P7 wd:Q49642.\",\n      \"?costumeDesigner wdt:P26 ?sibling;\",\n      \"                wdt:P106 wd:Q329765.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?sibling wdt:P31 wd:Q1052281; wdt:P7 wd:Q49642. ?costumeDesigner wdt:P26 ?sibling; wdt:P106 wd:Q329765. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"wd:Q730300 wdt:P3373 ?sibling.\",\n        \"?sibling wdt:P26 ?spouse.\",\n        \"?spouse wdt:P106 wd:Q1323191.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q730300 wdt:P3373 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1355948"]], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:4927 ?spouse .\",\n          \"?spouse kg:7103 kg:3209 .\",\n          \"?resource kg:1214 kg:1510 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4927 ?spouse . ?spouse kg:7103 kg:3209 . ?resource kg:1214 kg:1510 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q5 .\",\n      \"?costumeDesigner wdt:P106 wd:Q2498767 .\",\n      \"?costumeDesigner wdt:P26 ?spouse .\",\n      \"?spouse wdt:P39 wd:Q530113 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P106 wd:Q2498767 . ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P39 wd:Q530113 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"{\",\n          \"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n          \"?costumeDesigner wdt:P26 ?spouse .\",\n          \"wd:Q1102919 wdt:P112 ?spouse .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { { ?costumeDesigner wdt:P106 wd:Q1323191 . ?costumeDesigner wdt:P26 ?spouse . wd:Q1102919 wdt:P112 ?spouse . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?costumeDesigner kg:3163 kg:0196 .\",\n          \"?costumeDesigner kg:1045 ?spouse .\",\n          \"kg:4748 kg:7898 ?founder .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?costumeDesigner kg:3163 kg:0196 . ?costumeDesigner kg:1045 ?spouse . kg:4748 kg:7898 ?founder . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5398426;\",\n    \"         wdt:P50 wd:Q22970;\",\n    \"         wdt:P57 wd:Q22970.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5398426; wdt:P50 wd:Q22970; wdt:P57 wd:Q22970. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2643 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q2643 wdt:P58 ?resource. }\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2643 wdt:P57 ?resource. } UNION { wd:Q2643 wdt:P58 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1544 kg:6881 ?resource . } UNION \",\n        \"{ kg:1544 kg:7204 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1544 kg:6881 ?resource . } UNION { kg:1544 kg:7204 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q47461344 .\",\n    \"?resource wdt:P50 ?author .\",\n    \"?author rdfs:label \\\"Anker Sørensen\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47461344 . ?resource wdt:P50 ?author . ?author rdfs:label \"Anker Sørensen\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P58 wd:Q24907.} UNION \",\n        \"{?resource wdt:P1040 wd:Q24907.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P58 wd:Q24907.} UNION {?resource wdt:P1040 wd:Q24907.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource kg:3303 kg:8976 . } UNION \",\n      \"{ ?resource kg:8734 kg:8976 . }\"\n      ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3303 kg:8976 . } UNION { ?resource kg:8734 kg:8976 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2487909 .\",\n    \"?resource rdfs:label \\\"Nadja Weiss\\\"@en .\",\n    \"{ ?resource wdt:P22 ?parent .\",\n    \"  { ?parent wdt:P27 wd:Q34 } UNION \",\n    \"  { ?parent wdt:P19 wd:Q34 }\",\n    \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2487909 . ?resource rdfs:label \"Nadja Weiss\"@en . { ?resource wdt:P22 ?parent . { ?parent wdt:P27 wd:Q34 } UNION { ?parent wdt:P19 wd:Q34 } } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q4990261 wdt:P40 ?parent. } UNION { wd:Q4990261 wdt:P355 ?parent. }\",\n        \"?parent wdt:P27 wd:Q34.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q4990261 wdt:P40 ?parent. } UNION { wd:Q4990261 wdt:P355 ?parent. } ?parent wdt:P27 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:7100 kg:0132 ?parent . } UNION { ?parent kg:0132 kg:7100 . }\",\n        \"?parent kg:2071 kg:2270 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:7100 kg:0132 ?parent . } UNION { ?parent kg:0132 kg:7100 . } ?parent kg:2071 kg:2270 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q10732698 wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q5;\",\n    \"       wdt:P106 wd:Q10870559;\",\n    \"       wdt:P27 wd:Q17.}\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10732698 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5; wdt:P106 wd:Q10870559; wdt:P27 wd:Q17.} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q3514303 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P106 wd:Q222344;\",\n      \"wdt:P27 wd:Q17.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344; wdt:P27 wd:Q17. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q271247"]], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3458 kg:6852 ?spouse . } UNION { ?spouse kg:6852 kg:3458 . }\",\n        \"?spouse kg:6350 kg:7805 ;\",\n        \"       kg:8642 kg:3620 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3458 kg:6852 ?spouse . } UNION { ?spouse kg:6852 kg:3458 . } ?spouse kg:6350 kg:7805 ; kg:8642 kg:3620 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P31 wd:Q47461344 .\",\n    \"?work wdt:P50 wd:Q1801 .\",\n    \"?work wdt:P279* wd:Q11424 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q47461344 . ?work wdt:P50 wd:Q1801 . ?work wdt:P279* wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{?work wdt:P58 wd:Q1744.} UNION {?work wdt:P162 wd:Q1744.}\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?work WHERE { {?work wdt:P58 wd:Q1744.} UNION {?work wdt:P162 wd:Q1744.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1415550"], ["wd:Q65503596"], ["wd:Q2288916"], ["wd:Q3154724"], ["wd:Q1137020"], ["wd:Q18650966"], ["wd:Q2085811"], ["wd:Q73683147"], ["wd:Q155358"], ["wd:Q64536761"], ["wd:Q1181198"], ["wd:Q1342432"], ["wd:Q2292939"], ["wd:Q1791553"], ["wd:Q48802479"], ["wd:Q106077046"], ["wd:Q112317382"], ["wd:Q1070284"], ["wd:Q108824622"], ["wd:Q595370"], ["wd:Q391206"], ["wd:Q15730470"], ["wd:Q478311"], ["wd:Q939998"], ["wd:Q64985706"], ["wd:Q24568907"], ["wd:Q779710"], ["wd:Q18658521"], ["wd:Q2083640"], ["wd:Q764769"], ["wd:Q1276677"], ["wd:Q154467"], ["wd:Q1509118"], ["wd:Q2069044"], ["wd:Q1420677"], ["wd:Q151880"], ["wd:Q2634539"], ["wd:Q74604410"], ["wd:Q2712744"], ["wd:Q252447"], ["wd:Q642470"], ["wd:Q65502611"], ["wd:Q264286"], ["wd:Q1193897"], ["wd:Q3876014"], ["wd:Q110977345"], ["wd:Q107301448"], ["wd:Q63928602"], ["wd:Q582091"], ["wd:Q478324"], ["wd:Q1142018"], ["wd:Q235340"], ["wd:Q1921394"], ["wd:Q65500929"], ["wd:Q1280732"], ["wd:Q1235550"], ["wd:Q2288909"], ["wd:Q74600673"], ["wd:Q111832621"], ["wd:Q73674320"], ["wd:Q63147187"], ["wd:Q1122620"], ["wd:Q1342443"], ["wd:Q841867"], ["wd:Q1909419"], ["wd:Q746450"], ["wd:Q73804841"], ["wd:Q1137622"], ["wd:Q746665"], ["wd:Q19158918"], ["wd:Q15847069"], ["wd:Q20800508"], ["wd:Q1509040"], ["wd:Q67505010"], ["wd:Q1018488"], ["wd:Q19363014"], ["wd:Q2291771"], ["wd:Q632665"], ["wd:Q1407276"], ["wd:Q67501413"], ["wd:Q910943"], ["wd:Q1987158"], ["wd:Q5274312"], ["wd:Q67503123"], ["wd:Q2000957"], ["wd:Q746862"], ["wd:Q1576306"], ["wd:Q2263965"], ["wd:Q1635691"], ["wd:Q972806"], ["wd:Q2423183"], ["wd:Q2291361"], ["wd:Q1817809"], ["wd:Q2085975"], ["wd:Q64842240"], ["wd:Q20046281"], ["wd:Q483778"], ["wd:Q155335"], ["wd:Q2662913"], ["wd:Q187561"], ["wd:Q2025568"], ["wd:Q584740"], ["wd:Q2265103"], ["wd:Q81660339"], ["wd:Q946478"], ["wd:Q2292256"]], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ ?work kg:3610 kg:7549 . } UNION \",\n        \"{ ?work kg:2777 kg:7549 . } UNION \",\n        \"{ ?work kg:1354 kg:7549 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { { ?work kg:3610 kg:7549 . } UNION { ?work kg:2777 kg:7549 . } UNION { ?work kg:1354 kg:7549 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q2439875 .\",\n      \"?costumeDesigner wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P26 wd:Q1051296 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { ?costumeDesigner wdt:P106 wd:Q2439875 . ?costumeDesigner wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q1051296 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{\",\n          \"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n          \"?costumeDesigner wdt:P3373 ?sibling .\",\n          \"?sibling wdt:P26 wd:Q461354 .\",\n        \"} UNION {\",\n          \"?costumeDesigner wdt:P97 wd:Q1323191 .\",\n          \"?costumeDesigner wdt:P3373 ?sibling .\",\n          \"?sibling wdt:P26 wd:Q461354 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { ?costumeDesigner wdt:P106 wd:Q1323191 . ?costumeDesigner wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q461354 . } UNION { ?costumeDesigner wdt:P97 wd:Q1323191 . ?costumeDesigner wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q461354 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q5993204"]], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?costumeDesigner kg:1730 kg:3578 .\",\n          \"?sibling kg:4029 ?costumeDesigner .\",\n          \"?sibling kg:8992 kg:3091 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?costumeDesigner kg:1730 kg:3578 . ?sibling kg:4029 ?costumeDesigner . ?sibling kg:8992 kg:3091 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?parentCompany WHERE {\",\n    \"wd:Q106239 wdt:P108 ?parentCompany .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?parentCompany WHERE { wd:Q106239 wdt:P108 ?parentCompany . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parentCompany WHERE {\",\n        \"{ wd:Q67134 wdt:P108 ?employer . } UNION { wd:Q67134 wdt:P40 ?employer . }\",\n        \"?employer (wdt:P355|(wdt:P31/wdt:P279*)) ?parentCompany .\",\n        \"?parentCompany wdt:P31/wdt:P279* wd:Q4830453 . }\"\n     ]\n}", "normal_query": "SELECT ?parentCompany WHERE { { wd:Q67134 wdt:P108 ?employer . } UNION { wd:Q67134 wdt:P40 ?employer . } ?employer (wdt:P355|(wdt:P31/wdt:P279*)) ?parentCompany . ?parentCompany wdt:P31/wdt:P279* wd:Q4830453 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q271812"], ["wd:Q265618"], ["wd:Q781027"], ["wd:Q48767526"], ["wd:Q35886"]], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parentCompany WHERE {\",\n      \"{ kg:5190 kg:3218 ?employer . } UNION { kg:5190 kg:8237 ?child . ?child kg:3218 ?employer . }\",\n      \"?employer kg:4418 kg:2729 .\",\n      \"?parentCompany kg:2352* ?employer .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?parentCompany WHERE { { kg:5190 kg:3218 ?employer . } UNION { kg:5190 kg:8237 ?child . ?child kg:3218 ?employer . } ?employer kg:4418 kg:2729 . ?parentCompany kg:2352* ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?company WHERE {\",\n    \"wd:Q29758604 wdt:P108 ?company .\",\n    \"?company wdt:P31 wd:Q103246 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q29758604 wdt:P108 ?company . ?company wdt:P31 wd:Q103246 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n      \"wd:Q1094792 wdt:P108 ?company .\",\n      \"?film wdt:P750 ?company ;\",\n      \"wdt:P31 wd:Q11424 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q1094792 wdt:P108 ?company . ?film wdt:P750 ?company ; wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q8073"]], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ kg:0153 kg:1212 ?company . } UNION \",\n        \"{ ?film kg:9508 ?company ; kg:2896 kg:2961 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?company WHERE { { kg:0153 kg:1212 ?company . } UNION { ?film kg:9508 ?company ; kg:2896 kg:2961 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q483250 .\",\n    \"?resource wdt:P17 wd:Q34 .\",\n    \"?resource wdt:P674 wd:Q192044 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q483250 . ?resource wdt:P17 wd:Q34 . ?resource wdt:P674 wd:Q192044 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1651543 wdt:P272 ?resource. } UNION \",\n        \"{ wd:Q1651543 wdt:P750 ?resource. }\",\n        \"?resource wdt:P112 wd:Q34.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1651543 wdt:P272 ?resource. } UNION { wd:Q1651543 wdt:P750 ?resource. } ?resource wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1543058"]], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4138 kg:7764 ?producer . } UNION { kg:4138 kg:2381 ?distributor . }\",\n        \"?producer kg:1692 kg:6323 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4138 kg:7764 ?producer . } UNION { kg:4138 kg:2381 ?distributor . } ?producer kg:1692 kg:6323 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q123456 wdt:P26 ?spouse .\",\n    \"?spouse wdt:P106 wd:Q187923 .\",\n    \"BIND(?spouse AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q123456 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q187923 . BIND(?spouse AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"{ wd:Q6200573 wdt:P26 ?spouse. }\",\n        \"UNION\",\n        \"{ ?spouse wdt:P26 wd:Q6200573. }\",\n      \"?spouse wdt:P106 wd:Q1323191;\",\n            \"wdt:P27 wd:Q34.\",\n    \"}\"\n     ]\n}", "normal_query": "SELECT ?spouse WHERE { { wd:Q6200573 wdt:P26 ?spouse. } UNION { ?spouse wdt:P26 wd:Q6200573. } ?spouse wdt:P106 wd:Q1323191; wdt:P27 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1554690"]], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:7616 kg:2873 .\",\n          \"?resource kg:7345 ?spouse .\",\n          \"?spouse kg:6742 kg:7953 .\",\n          \"?spouse kg:9940 kg:2334 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7616 kg:2873 . ?resource kg:7345 ?spouse . ?spouse kg:6742 kg:7953 . ?spouse kg:9940 kg:2334 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q310986 wdt:P26 ?spouse .\",\n    \"  wd:Q310986 wdt:P3373 ?sibling .\",\n    \"  ?spouse wdt:P26 wd:Q310986 .\",\n    \"  ?sibling wdt:P26 wd:Q310986 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q310986 wdt:P26 ?spouse . wd:Q310986 wdt:P3373 ?sibling . ?spouse wdt:P26 wd:Q310986 . ?sibling wdt:P26 wd:Q310986 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q3356 wdt:P26 ?spouse . ?spouse wdt:P26 wd:Q2045778 } UNION \",\n        \"{ wd:Q3356 wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q2045778 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q3356 wdt:P26 ?spouse . ?spouse wdt:P26 wd:Q2045778 } UNION { wd:Q3356 wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q2045778 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"{ kg:0966 kg:9111 ?spouse . ?spouse kg:4202 kg:0966 } UNION \",\n    \"{ kg:0966 kg:2140 ?sibling . ?sibling kg:4202 kg:0966 }\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0966 kg:9111 ?spouse . ?spouse kg:4202 kg:0966 } UNION { kg:0966 kg:2140 ?sibling . ?sibling kg:4202 kg:0966 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film rdfs:label \\\"The Magic Flute\\\"@en .\",\n    \"?film wdt:P750 ?distributor .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?distributor wdt:P17 wd:Q34 .\",\n    \"?producer wdt:P17 wd:Q34 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"The Magic Flute\"@en . ?film wdt:P750 ?distributor . ?film wdt:P162 ?producer . ?distributor wdt:P17 wd:Q34 . ?producer wdt:P17 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?distributor ?producer WHERE {\",\n        \"{ wd:Q1651543 wdt:P750 ?distributor . } UNION \",\n        \"{ wd:Q1651543 wdt:P272 ?producer . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { { wd:Q1651543 wdt:P750 ?distributor . } UNION { wd:Q1651543 wdt:P272 ?producer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6852 kg:2736 ?resource . } UNION \",\n        \"{ kg:6852 kg:0937 ?resource . }\",\n        \"?resource kg:2428 kg:2665 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:6852 kg:2736 ?resource . } UNION { kg:6852 kg:0937 ?resource . } ?resource kg:2428 kg:2665 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?sibling wdt:P31 wd:Q1051437; # sibling of Prince Aschwin of Lippe-Biesterfeld\",\n    \"wdt:P26 wd:Q98383; # Dutch nationality\",\n    \"wdt:P3320 wd:Q166514. # founder of World Wide Fund for Nature\",\n    \"?resource wdt:P3320 ?sibling.} # resource founded by the sibling\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?sibling wdt:P31 wd:Q1051437; wdt:P26 wd:Q98383; wdt:P3320 wd:Q166514. ?resource wdt:P3320 ?sibling.} LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sibling WHERE {\",\n      \"{ wd:Q2336212 wdt:P3373 ?sibling . } UNION { ?sibling wdt:P3373 wd:Q2336212 . }\",\n      \"?sibling wdt:P27 wd:Q29999 ;\",\n      \"wdt:P112 wd:Q117892 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sibling WHERE { { wd:Q2336212 wdt:P3373 ?sibling . } UNION { ?sibling wdt:P3373 wd:Q2336212 . } ?sibling wdt:P27 wd:Q29999 ; wdt:P112 wd:Q117892 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8984 kg:9358 ?sibling . } UNION { ?sibling kg:9358 kg:8984 . }\",\n        \"?sibling kg:0127 kg:3182 .\",\n        \"kg:9039 kg:6101 ?resource .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8984 kg:9358 ?sibling . } UNION { ?sibling kg:9358 kg:8984 . } ?sibling kg:0127 kg:3182 . kg:9039 kg:6101 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 wd:Q70498 .\",\n    \"?resource wdt:P108 wd:Q157173 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q70498 . ?resource wdt:P108 wd:Q157173 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{ wd:Q60414 wdt:P3373 ?sibling . } UNION { ?sibling wdt:P3373 wd:Q60414 . }\",\n        \"?sibling wdt:P27 wd:Q183 ;\",\n        \"wdt:P108 wd:Q15789 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { wd:Q60414 wdt:P3373 ?sibling . } UNION { ?sibling wdt:P3373 wd:Q60414 . } ?sibling wdt:P27 wd:Q183 ; wdt:P108 wd:Q15789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q44340"]], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1887 kg:6028 ?sibling . } UNION { ?sibling kg:6028 kg:1887 . }\",\n        \"?sibling kg:9584 kg:1462 .\",\n        \"?resource kg:1789 kg:3247 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1887 kg:6028 ?sibling . } UNION { ?sibling kg:6028 kg:1887 . } ?sibling kg:9584 kg:1462 . ?resource kg:1789 kg:3247 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P178* wd:Q56029 .\",\n      \"?company wdt:P31 wd:Q43229 .\",\n      \"?company wdt:P1128 wd:Q1237969 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P178* wd:Q56029 . ?company wdt:P31 wd:Q43229 . ?company wdt:P1128 wd:Q1237969 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ wd:Q3715556 wdt:P750 ?company. } UNION \",\n        \"{ wd:Q3715556 wdt:P272 ?company. }\",\n        \"?company wdt:P112 wd:Q882.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { wd:Q3715556 wdt:P750 ?company. } UNION { wd:Q3715556 wdt:P272 ?company. } ?company wdt:P112 wd:Q882. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q219400"]], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ kg:3103 kg:4037 ?company . } UNION \",\n        \"{ kg:3603 kg:9985 ?company . }\",\n        \"?company kg:6240 kg:3206 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { kg:3103 kg:4037 ?company . } UNION { kg:3603 kg:9985 ?company . } ?company kg:6240 kg:3206 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P50 wd:Q1342698 .\",\n      \"?work wdt:P162 wd:Q799999 .\" ,\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q1342698 . ?work wdt:P162 wd:Q799999 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q744911"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{\",\n          \"?work wdt:P58 wd:Q4500 .\",\n          \"?work wdt:P162 wd:Q888311 .\",\n        \"} UNION \",\n        \"{\",\n          \"?work wdt:P58 wd:Q4500 .\",\n          \"?work wdt:P272 ?company .\",\n          \"?company wdt:P162 wd:Q888311 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P58 wd:Q4500 . ?work wdt:P162 wd:Q888311 . } UNION { ?work wdt:P58 wd:Q4500 . ?work wdt:P272 ?company . ?company wdt:P162 wd:Q888311 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q744911"]], "gold": [["wd:Q744911"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:8692 kg:0278 . } UNION \",\n        \"{ ?resource kg:1093 kg:4570 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8692 kg:0278 . } UNION { ?resource kg:1093 kg:4570 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sibling WHERE {\",\n    \"wd:Q1234567 wdt:P3373 ?sibling .\",\n    \"?sibling wdt:P27 wd:Q142 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1234567 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n      \"wd:Q1079409 wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P27 wd:Q142 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1079409 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q47090651"]], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{ kg:5754 kg:8202 ?sibling . } UNION \",\n        \"{ ?sibling kg:8395 kg:5754 . }\",\n        \"?sibling kg:7731 kg:3096 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { kg:5754 kg:8202 ?sibling . } UNION { ?sibling kg:8395 kg:5754 . } ?sibling kg:7731 kg:3096 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P50 wd:Q967281 .\",\n        \"?film wdt:P58 wd:Q35191 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P50 wd:Q35191 .\",\n        \"?film wdt:P58 wd:Q967281 .\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P50 wd:Q967281 . ?film wdt:P58 wd:Q35191 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P50 wd:Q35191 . ?film wdt:P58 wd:Q967281 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q44477 wdt:P162 wd:Q320211 . } UNION \",\n        \"{ wd:Q44477 wdt:P58 wd:Q2831 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q44477 wdt:P162 wd:Q320211 . } UNION { wd:Q44477 wdt:P58 wd:Q2831 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:7229 kg:0935 kg:8034 . } UNION \",\n        \"{ kg:0963 kg:4319 kg:8034 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:7229 kg:0935 kg:8034 . } UNION { kg:0963 kg:4319 kg:8034 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?project WHERE {\",\n      \"?project wdt:P31 wd:Q386724 .\",\n      \"?project wdt:P162 wd:Q9504 .\",\n      \"?project wdt:P58 wd:Q37928 .\" ,\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?project WHERE { ?project wdt:P31 wd:Q386724 . ?project wdt:P162 wd:Q9504 . ?project wdt:P58 wd:Q37928 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?project WHERE {\",\n        \"{ ?project wdt:P1431 wd:Q8877 . } UNION \",\n        \"{ ?project wdt:P58 wd:Q75079 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { { ?project wdt:P1431 wd:Q8877 . } UNION { ?project wdt:P58 wd:Q75079 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q192403"], ["wd:Q99395721"], ["wd:Q241958"], ["wd:Q60756556"], ["wd:Q2411962"], ["wd:Q547744"], ["wd:Q55279915"], ["wd:Q3512046"], ["wd:Q28406248"], ["wd:Q72638293"], ["wd:Q940102"], ["wd:Q939084"], ["wd:Q1548602"], ["wd:Q230552"], ["wd:Q955389"], ["wd:Q2661044"], ["wd:Q109331"], ["wd:Q156597"], ["wd:Q208048"], ["wd:Q1247235"], ["wd:Q261759"], ["wd:Q1102220"], ["wd:Q24251026"], ["wd:Q636906"], ["wd:Q636043"], ["wd:Q218591"], ["wd:Q2407965"], ["wd:Q15072814"], ["wd:Q598499"], ["wd:Q1134678"], ["wd:Q725578"], ["wd:Q22350906"], ["wd:Q117789100"], ["wd:Q30607989"], ["wd:Q1315247"], ["wd:Q1049095"], ["wd:Q60770992"], ["wd:Q5755738"], ["wd:Q2947967"], ["wd:Q2067509"], ["wd:Q957894"], ["wd:Q51416"], ["wd:Q16872886"], ["wd:Q6151665"], ["wd:Q379873"], ["wd:Q158474"], ["wd:Q191100"], ["wd:Q917608"], ["wd:Q4016118"], ["wd:Q2308392"], ["wd:Q34220038"], ["wd:Q571014"], ["wd:Q42708010"], ["wd:Q2975711"], ["wd:Q232250"], ["wd:Q91540"], ["wd:Q327713"], ["wd:Q4339513"], ["wd:Q171453"], ["wd:Q602094"], ["wd:Q309621"], ["wd:Q418809"], ["wd:Q928429"], ["wd:Q3362144"], ["wd:Q21877685"], ["wd:Q232774"]], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n  \"query\":\n    [\n      \"SELECT ?project WHERE {\",\n        \"{ kg:6102 kg:6915 ?project . } UNION \",\n        \"{ kg:3512 kg:9189 ?project . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { { kg:6102 kg:6915 ?project . } UNION { kg:3512 kg:9189 ?project . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 .\",\n    \"?company wdt:P17 wd:Q34 .\",\n    \"?film wdt:P692 ?company ;\",\n    \"wdt:P31 wd:Q11424 ;\",\n    \"wdt:P577 ?date ;\",\n    \"rdfs:label \\\"The Magic Flute\\\"@en .\",\n    \"}\",\n    \"ORDER BY ?date\"\n   ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P17 wd:Q34 . ?film wdt:P692 ?company ; wdt:P31 wd:Q11424 ; wdt:P577 ?date ; rdfs:label \"The Magic Flute\"@en . } ORDER BY ?date LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ wd:Q1651543 wdt:P272 ?company. }\",\n        \"UNION\",\n        \"{ wd:Q1651543 wdt:P750 ?company. }\",\n        \"?company wdt:P17 wd:Q34.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { wd:Q1651543 wdt:P272 ?company. } UNION { wd:Q1651543 wdt:P750 ?company. } ?company wdt:P17 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q1543058"]], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:5954 kg:6963 .\",\n      \"?resource kg:4053 kg:6871 .\",\n      \"kg:6871 kg:5731 kg:6379 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5954 kg:6963 . ?resource kg:4053 kg:6871 . kg:6871 kg:5731 kg:6379 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?parent wdt:P25 ?Henutmire .\",\n      \"?parent wdt:P26 ?Nefertarilllala .\",\n      \"BIND(?parent AS ?resource)\",\n    \"} UNION {\",\n      \"?spouse wdt:P31 wd:Q4975840 .\",\n      \"?spouse wdt:P26 ?Henutmire .\",\n      \"?spouse wdt:P26 ?Nefertarilllala .\",\n      \"BIND(?spouse AS ?resource)\",\n    \"} UNION {\",\n      \"?sibling wdt:P31 wd:Q101352 .\",\n      \"?sibling wdt:P3373 ?Henutmire .\",\n      \"?sibling wdt:P26 ?Nefertarilllala .\",\n      \"BIND(?sibling AS ?resource)\",\n    \"}\",\n  \"}\" ]\n}", "normal_query": "SELECT ?resource WHERE { { ?parent wdt:P25 ?Henutmire . ?parent wdt:P26 ?Nefertarilllala . BIND(?parent AS ?resource) } UNION { ?spouse wdt:P31 wd:Q4975840 . ?spouse wdt:P26 ?Henutmire . ?spouse wdt:P26 ?Nefertarilllala . BIND(?spouse AS ?resource) } UNION { ?sibling wdt:P31 wd:Q101352 . ?sibling wdt:P3373 ?Henutmire . ?sibling wdt:P26 ?Nefertarilllala . BIND(?sibling AS ?resource) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q64971"], ["wd:Q859838"], ["wd:Q87072"], ["wd:Q310808"], ["wd:Q16066414"], ["wd:Q68898"], ["wd:Q130752"], ["wd:Q2679435"], ["wd:Q40027"], ["wd:Q3667489"], ["wd:Q359797"], ["wd:Q4968133"], ["wd:Q36812"], ["wd:Q175620"], ["wd:Q3606858"], ["wd:Q680982"], ["wd:Q163043"], ["wd:Q171136"], ["wd:Q40058"], ["wd:Q1542943"], ["wd:Q69927"], ["wd:Q62025"], ["wd:Q682736"], ["wd:Q1050903"], ["wd:Q75244017"], ["wd:Q447586"], ["wd:Q442033"], ["wd:Q2445086"], ["wd:Q2005044"], ["wd:Q213766"], ["wd:Q63786"], ["wd:Q150726"], ["wd:Q964094"], ["wd:Q2412713"], ["wd:Q443078"], ["wd:Q59681643"], ["wd:Q470056"], ["wd:Q152157"], ["wd:Q3345"], ["wd:Q75390085"], ["wd:Q312938"], ["wd:Q156657"], ["wd:Q2188802"], ["wd:Q69960"], ["wd:Q40060"], ["wd:Q528401"], ["wd:Q641286"], ["wd:Q713468"], ["wd:Q1050767"], ["wd:Q311452"], ["wd:Q105961"], ["wd:Q215012"], ["wd:Q76268024"], ["wd:Q83520"], ["wd:Q40234"], ["wd:Q933448"], ["wd:Q182070"], ["wd:Q76368137"], ["wd:Q7350517"], ["wd:Q84475"], ["wd:Q93541"], ["wd:Q242862"], ["wd:Q78622"], ["wd:Q72929"], ["wd:Q101094"], ["wd:Q58025"], ["wd:Q288925"], ["wd:Q61245"], ["wd:Q130822"], ["wd:Q69785"], ["wd:Q4353213"], ["wd:Q261802"], ["wd:Q1057939"], ["wd:Q162819"], ["wd:Q242555"], ["wd:Q60511"], ["wd:Q111602852"], ["wd:Q706438"], ["wd:Q634058"], ["wd:Q326738"], ["wd:Q95637"], ["wd:Q380868"], ["wd:Q650182"], ["wd:Q236586"], ["wd:Q143867"], ["wd:Q2190766"], ["wd:Q112866"], ["wd:Q39957"], ["wd:Q6533419"], ["wd:Q444189"], ["wd:Q302"], ["wd:Q312311"], ["wd:Q7287750"], ["wd:Q95292"], ["wd:Q2241510"], ["wd:Q237712"], ["wd:Q113003516"], ["wd:Q28057662"], ["wd:Q230068"], ["wd:Q3817942"], ["wd:Q64215"], ["wd:Q57669"], ["wd:Q75373756"], ["wd:Q285330"], ["wd:Q237793"], ["wd:Q441822"], ["wd:Q80986"], ["wd:Q60386"], ["wd:Q231063"], ["wd:Q260555"], ["wd:Q64779612"], ["wd:Q213658"], ["wd:Q273018"], ["wd:Q107211659"], ["wd:Q15072599"], ["wd:Q78702"], ["wd:Q648201"], ["wd:Q94651215"], ["wd:Q3910"], ["wd:Q232094"], ["wd:Q33550"], ["wd:Q65946"], ["wd:Q60295"], ["wd:Q423078"], ["wd:Q64965"], ["wd:Q542899"], ["wd:Q869665"], ["wd:Q238609"], ["wd:Q3889699"], ["wd:Q68238"], ["wd:Q121248270"], ["wd:Q1330169"], ["wd:Q918866"], ["wd:Q75251149"], ["wd:Q4858727"], ["wd:Q169512"], ["wd:Q2295856"], ["wd:Q313857"], ["wd:Q17410449"], ["wd:Q75766288"], ["wd:Q565815"], ["wd:Q29363798"], ["wd:Q48688096"], ["wd:Q62385"], ["wd:Q116507601"], ["wd:Q75389126"], ["wd:Q2533570"], ["wd:Q75381628"], ["wd:Q233913"], ["wd:Q272476"], ["wd:Q74649"], ["wd:Q354389"], ["wd:Q58020"], ["wd:Q65236"], ["wd:Q180123"], ["wd:Q824322"], ["wd:Q1359322"], ["wd:Q78713"], ["wd:Q96078993"], ["wd:Q555313"], ["wd:Q310867"], ["wd:Q355254"], ["wd:Q375325"], ["wd:Q445177"], ["wd:Q16674326"], ["wd:Q525192"], ["wd:Q76343"], ["wd:Q1960833"], ["wd:Q8688594"], ["wd:Q70926"], ["wd:Q371203"], ["wd:Q124493"], ["wd:Q213573"], ["wd:Q69249"], ["wd:Q75253715"], ["wd:Q41680"], ["wd:Q299946"], ["wd:Q3109791"], ["wd:Q66636"], ["wd:Q82032"], ["wd:Q110845"], ["wd:Q40023"], ["wd:Q694197"], ["wd:Q3821483"], ["wd:Q6261492"], ["wd:Q58632"], ["wd:Q104831881"], ["wd:Q1027587"], ["wd:Q3769073"], ["wd:Q1895147"], ["wd:Q560275"], ["wd:Q66551"], ["wd:Q581536"], ["wd:Q25420257"], ["wd:Q75323639"], ["wd:Q75298990"], ["wd:Q5736994"], ["wd:Q2793231"], ["wd:Q62144"], ["wd:Q9717"], ["wd:Q75250829"], ["wd:Q42393069"], ["wd:Q657822"], ["wd:Q18675004"], ["wd:Q82732"], ["wd:Q832544"], ["wd:Q2535281"], ["wd:Q337651"], ["wd:Q1894727"], ["wd:Q165349"], ["wd:Q64515"], ["wd:Q6351902"], ["wd:Q336796"], ["wd:Q22694832"], ["wd:Q64193"], ["wd:Q193901"], ["wd:Q451204"], ["wd:Q657137"], ["wd:Q311646"], ["wd:Q5286811"], ["wd:Q89182"], ["wd:Q153319"], ["wd:Q57536"], ["wd:Q12279392"], ["wd:Q16561357"], ["wd:Q343969"], ["wd:Q143880"], ["wd:Q335754"], ["wd:Q466305"], ["wd:Q54054"], ["wd:Q75239603"], ["wd:Q978079"], ["wd:Q6219636"], ["wd:Q1653603"], ["wd:Q768822"], ["wd:Q157009"], ["wd:Q67214"], ["wd:Q75323649"], ["wd:Q4971091"], ["wd:Q100324342"], ["wd:Q17277976"], ["wd:Q50922"], ["wd:Q8963"], ["wd:Q231054"], ["wd:Q40901"], ["wd:Q68922"], ["wd:Q440434"], ["wd:Q164512"], ["wd:Q237706"], ["wd:Q237263"], ["wd:Q31191472"], ["wd:Q63062"], ["wd:Q735831"], ["wd:Q155004"], ["wd:Q3340"], ["wd:Q1634568"], ["wd:Q5922802"], ["wd:Q466947"], ["wd:Q23659419"], ["wd:Q325948"], ["wd:Q15450045"], ["wd:Q3767405"], ["wd:Q70636"], ["wd:Q3290878"], ["wd:Q63770"], ["wd:Q71176"], ["wd:Q31191209"], ["wd:Q506060"], ["wd:Q95273"], ["wd:Q76076739"], ["wd:Q3300404"], ["wd:Q6473571"], ["wd:Q878392"], ["wd:Q242159"], ["wd:Q1145491"], ["wd:Q318811"], ["wd:Q566403"], ["wd:Q5852556"], ["wd:Q487442"], ["wd:Q61447"], ["wd:Q3292297"], ["wd:Q86997"], ["wd:Q76159497"], ["wd:Q75245854"], ["wd:Q109074"], ["wd:Q324913"], ["wd:Q75392606"], ["wd:Q165883"], ["wd:Q75392592"], ["wd:Q76550"], ["wd:Q1360918"], ["wd:Q10303799"], ["wd:Q53114"], ["wd:Q123371"], ["wd:Q112870"], ["wd:Q40258"], ["wd:Q63609"], ["wd:Q280856"], ["wd:Q711701"], ["wd:Q743783"], ["wd:Q1913992"], ["wd:Q381871"], ["wd:Q454929"], ["wd:Q236459"], ["wd:Q501493"], ["wd:Q3335928"], ["wd:Q1722781"], ["wd:Q40003"], ["wd:Q317710"], ["wd:Q96843"], ["wd:Q1226606"], ["wd:Q271104"], ["wd:Q269493"], ["wd:Q5343569"], ["wd:Q1590241"], ["wd:Q336106"], ["wd:Q352981"], ["wd:Q61362"], ["wd:Q1234458"], ["wd:Q63605"], ["wd:Q3837639"], ["wd:Q231876"], ["wd:Q289590"], ["wd:Q15189"], ["wd:Q237754"], ["wd:Q271801"], ["wd:Q75324158"], ["wd:Q3434236"], ["wd:Q75390088"], ["wd:Q3350"], ["wd:Q525229"], ["wd:Q71795"], ["wd:Q1337363"], ["wd:Q74001"], ["wd:Q2342723"], ["wd:Q5479089"], ["wd:Q63010"], ["wd:Q2513872"], ["wd:Q527324"], ["wd:Q702722"], ["wd:Q86396"], ["wd:Q9682"], ["wd:Q75294944"], ["wd:Q75391289"], ["wd:Q62482"], ["wd:Q5363652"], ["wd:Q2117878"], ["wd:Q1991420"], ["wd:Q558946"], ["wd:Q168667"], ["wd:Q2300129"], ["wd:Q4919368"], ["wd:Q335270"], ["wd:Q3504210"], ["wd:Q107122881"], ["wd:Q75392595"], ["wd:Q75788353"], ["wd:Q569335"], ["wd:Q209579"], ["wd:Q151754"], ["wd:Q230031"], ["wd:Q75391327"], ["wd:Q333862"], ["wd:Q1774948"], ["wd:Q55874694"], ["wd:Q160770"], ["wd:Q39576"], ["wd:Q333628"], ["wd:Q12286450"], ["wd:Q299925"], ["wd:Q1131643"], ["wd:Q5086017"], ["wd:Q327436"], ["wd:Q96907"], ["wd:Q221145"], ["wd:Q269405"], ["wd:Q700152"], ["wd:Q75383345"], ["wd:Q78664"], ["wd:Q66847"], ["wd:Q51797"], ["wd:Q328606"], ["wd:Q75290754"], ["wd:Q11739616"], ["wd:Q709699"], ["wd:Q75259201"], ["wd:Q75389120"], ["wd:Q742124"], ["wd:Q346"], ["wd:Q12967"], ["wd:Q336970"], ["wd:Q41610"], ["wd:Q238458"], ["wd:Q262518"], ["wd:Q61444"], ["wd:Q45967"], ["wd:Q25483821"], ["wd:Q86181"], ["wd:Q3847115"], ["wd:Q4284240"], ["wd:Q69701"], ["wd:Q1641737"], ["wd:Q61268429"], ["wd:Q62959"], ["wd:Q153344"], ["wd:Q16692155"], ["wd:Q117174"], ["wd:Q329555"], ["wd:Q4351694"], ["wd:Q75392603"], ["wd:Q237740"], ["wd:Q49438459"], ["wd:Q3847523"], ["wd:Q240407"], ["wd:Q57302"], ["wd:Q548112"], ["wd:Q151628"], ["wd:Q75249491"], ["wd:Q101014"], ["wd:Q60560"], ["wd:Q108621"], ["wd:Q14515330"], ["wd:Q6205725"], ["wd:Q7167346"], ["wd:Q269946"], ["wd:Q2376474"], ["wd:Q62043"], ["wd:Q25483430"], ["wd:Q1405880"], ["wd:Q87916"], ["wd:Q7287939"], ["wd:Q45420"], ["wd:Q526743"], ["wd:Q694358"], ["wd:Q21175657"], ["wd:Q234308"], ["wd:Q453113"], ["wd:Q3120486"], ["wd:Q3852380"], ["wd:Q63277"], ["wd:Q125649"], ["wd:Q206223"], ["wd:Q155566"], ["wd:Q102561"], ["wd:Q75345693"], ["wd:Q450806"], ["wd:Q61996595"], ["wd:Q1183342"], ["wd:Q75305308"], ["wd:Q102322"], ["wd:Q1339"], ["wd:Q701736"], ["wd:Q524105"], ["wd:Q91230"], ["wd:Q2755975"], ["wd:Q6206644"], ["wd:Q699738"], ["wd:Q53442"], ["wd:Q62150"], ["wd:Q816862"], ["wd:Q88596"], ["wd:Q571387"], ["wd:Q6779770"], ["wd:Q130586"], ["wd:Q80251"], ["wd:Q3012130"], ["wd:Q53870738"], ["wd:Q240860"], ["wd:Q160539"], ["wd:Q86832"], ["wd:Q468968"], ["wd:Q203829"], ["wd:Q242876"], ["wd:Q3560127"], ["wd:Q456830"], ["wd:Q112096"], ["wd:Q97053"], ["wd:Q48622"], ["wd:Q16783700"], ["wd:Q65224640"], ["wd:Q465382"], ["wd:Q37030"], ["wd:Q80261"], ["wd:Q75262771"], ["wd:Q448983"], ["wd:Q526000"], ["wd:Q75389124"], ["wd:Q65655"], ["wd:Q239487"], ["wd:Q267483"], ["wd:Q40247"], ["wd:Q777858"], ["wd:Q75273508"], ["wd:Q220822"], ["wd:Q9348705"], ["wd:Q17175138"], ["wd:Q44384"], ["wd:Q108948099"], ["wd:Q39952"], ["wd:Q160541"], ["wd:Q2553862"], ["wd:Q86953"], ["wd:Q409520"], ["wd:Q229419"], ["wd:Q1246330"], ["wd:Q216362"], ["wd:Q96078992"], ["wd:Q153330"], ["wd:Q39996"], ["wd:Q18397177"], ["wd:Q215988"], ["wd:Q213671"], ["wd:Q74876"], ["wd:Q60657"], ["wd:Q571404"], ["wd:Q3744974"], ["wd:Q565467"], ["wd:Q40022"], ["wd:Q834625"], ["wd:Q715191"], ["wd:Q70787"], ["wd:Q51752"], ["wd:Q75388550"], ["wd:Q2219186"], ["wd:Q47538633"], ["wd:Q4056989"], ["wd:Q1424876"], ["wd:Q335793"], ["wd:Q39595"], ["wd:Q3608090"], ["wd:Q1724451"], ["wd:Q3052486"], ["wd:Q540767"], ["wd:Q203840"], ["wd:Q43274"], ["wd:Q234482"], ["wd:Q730045"], ["wd:Q20752232"], ["wd:Q703780"], ["wd:Q204418"], ["wd:Q161167"], ["wd:Q1577727"], ["wd:Q234251"], ["wd:Q231688"], ["wd:Q3771665"], ["wd:Q1884324"], ["wd:Q53456"], ["wd:Q100324334"], ["wd:Q5331882"], ["wd:Q1343523"], ["wd:Q38302"], ["wd:Q112273240"], ["wd:Q98022"], ["wd:Q55100844"], ["wd:Q325842"], ["wd:Q24040015"], ["wd:Q131125"], ["wd:Q162302"], ["wd:Q230863"], ["wd:Q2607440"], ["wd:Q506527"], ["wd:Q527160"], ["wd:Q11682002"], ["wd:Q715048"], ["wd:Q456936"], ["wd:Q77555"], ["wd:Q2641127"], ["wd:Q9254722"], ["wd:Q160558"], ["wd:Q361663"], ["wd:Q231682"], ["wd:Q96078995"], ["wd:Q518846"], ["wd:Q116728"], ["wd:Q452976"], ["wd:Q75389127"], ["wd:Q75389123"], ["wd:Q181261"], ["wd:Q568421"], ["wd:Q16004"], ["wd:Q1555570"], ["wd:Q84321649"], ["wd:Q450760"], ["wd:Q601136"], ["wd:Q759591"], ["wd:Q104772"], ["wd:Q1164707"], ["wd:Q64194"], ["wd:Q62139"], ["wd:Q1438630"], ["wd:Q451828"], ["wd:Q182021"], ["wd:Q67721"], ["wd:Q84122"], ["wd:Q3486444"], ["wd:Q1227872"], ["wd:Q14441"], ["wd:Q61213"], ["wd:Q296003"], ["wd:Q539111"], ["wd:Q159575"], ["wd:Q57668"], ["wd:Q158140"], ["wd:Q39938"], ["wd:Q216300"], ["wd:Q4003107"], ["wd:Q2426845"], ["wd:Q12286004"], ["wd:Q18684270"], ["wd:Q130005"], ["wd:Q75253711"], ["wd:Q55845974"], ["wd:Q63769"], ["wd:Q342343"], ["wd:Q113733"], ["wd:Q458385"], ["wd:Q1235379"], ["wd:Q18216984"], ["wd:Q70936"], ["wd:Q487290"], ["wd:Q3732150"], ["wd:Q174504"], ["wd:Q75324112"], ["wd:Q170194"], ["wd:Q302561"], ["wd:Q18216982"], ["wd:Q3611688"], ["wd:Q154971"], ["wd:Q2900825"], ["wd:Q61277"], ["wd:Q1348373"], ["wd:Q271827"], ["wd:Q572145"], ["wd:Q2525208"], ["wd:Q17181913"], ["wd:Q541118"], ["wd:Q1058391"], ["wd:Q132455"], ["wd:Q94761676"], ["wd:Q9215"], ["wd:Q4468059"], ["wd:Q442252"], ["wd:Q96537"], ["wd:Q1657677"], ["wd:Q2783067"], ["wd:Q108603124"], ["wd:Q3299484"], ["wd:Q229671"], ["wd:Q270169"], ["wd:Q59904"], ["wd:Q154920"], ["wd:Q50848258"], ["wd:Q152316"], ["wd:Q75279624"], ["wd:Q158143"], ["wd:Q5362878"], ["wd:Q76335515"], ["wd:Q705129"], ["wd:Q642899"], ["wd:Q1929817"], ["wd:Q2529965"], ["wd:Q233966"], ["wd:Q453699"], ["wd:Q28121035"], ["wd:Q78635"], ["wd:Q1941886"], ["wd:Q38281"], ["wd:Q7504"], ["wd:Q85848"], ["wd:Q75271350"], ["wd:Q781899"], ["wd:Q75273387"], ["wd:Q922418"], ["wd:Q275876"], ["wd:Q1643432"], ["wd:Q75317725"], ["wd:Q292123"], ["wd:Q75490473"], ["wd:Q570974"], ["wd:Q50993"], ["wd:Q54013"], ["wd:Q1747562"], ["wd:Q75345626"], ["wd:Q15646541"], ["wd:Q646338"], ["wd:Q452972"], ["wd:Q75766291"], ["wd:Q65053"], ["wd:Q261883"], ["wd:Q2535485"], ["wd:Q367901"], ["wd:Q75279615"], ["wd:Q659488"], ["wd:Q87066"], ["wd:Q496421"], ["wd:Q16647757"], ["wd:Q75766285"], ["wd:Q213698"], ["wd:Q563316"], ["wd:Q95205105"], ["wd:Q118320"], ["wd:Q451969"], ["wd:Q67871"], ["wd:Q241179"], ["wd:Q76968"], ["wd:Q78515"], ["wd:Q87556"], ["wd:Q657591"], ["wd:Q319954"], ["wd:Q298162"], ["wd:Q20875"], ["wd:Q546008"], ["wd:Q61889367"], ["wd:Q127318"], ["wd:Q3260992"], ["wd:Q112108"], ["wd:Q2016614"], ["wd:Q433395"], ["wd:Q154952"], ["wd:Q150512"], ["wd:Q110370660"], ["wd:Q912904"], ["wd:Q68575"], ["wd:Q229413"], ["wd:Q153815"], ["wd:Q156774"], ["wd:Q289957"], ["wd:Q34460"], ["wd:Q9722"], ["wd:Q15043373"], ["wd:Q75390089"], ["wd:Q1753529"], ["wd:Q7321381"], ["wd:Q46369290"], ["wd:Q230878"], ["wd:Q727938"], ["wd:Q63240"], ["wd:Q92267"], ["wd:Q445880"], ["wd:Q5177066"], ["wd:Q60907"], ["wd:Q1491934"], ["wd:Q46991646"], ["wd:Q626032"], ["wd:Q4593"], ["wd:Q712916"], ["wd:Q635"], ["wd:Q445456"], ["wd:Q6205576"], ["wd:Q8049824"], ["wd:Q70840"], ["wd:Q268896"], ["wd:Q28925642"], ["wd:Q590227"], ["wd:Q3721825"], ["wd:Q213759"], ["wd:Q2006303"], ["wd:Q3609589"], ["wd:Q86349"], ["wd:Q555409"], ["wd:Q62954"], ["wd:Q76368144"], ["wd:Q76480"], ["wd:Q153819"], ["wd:Q75323641"], ["wd:Q78807571"], ["wd:Q4767446"], ["wd:Q62273"], ["wd:Q6752693"], ["wd:Q254545"], ["wd:Q51746"], ["wd:Q546533"], ["wd:Q63820"], ["wd:Q943180"], ["wd:Q53117"], ["wd:Q669639"], ["wd:Q83643764"], ["wd:Q2102874"], ["wd:Q23903090"], ["wd:Q453771"], ["wd:Q467592"], ["wd:Q75250698"], ["wd:Q18340105"], ["wd:Q560806"], ["wd:Q75767583"], ["wd:Q232151"], ["wd:Q229816"], ["wd:Q3847576"], ["wd:Q20498724"], ["wd:Q435016"], ["wd:Q75389122"]], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q443473 wdt:P40 ?parent. ?parent wdt:P26 wd:Q210535 } UNION \",\n        \"{ wd:Q443473 wdt:P26 wd:Q210535 } UNION \",\n        \"{ wd:Q443473 wdt:P3373 ?sibling. ?sibling wdt:P26 wd:Q210535 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q443473 wdt:P40 ?parent. ?parent wdt:P26 wd:Q210535 } UNION { wd:Q443473 wdt:P26 wd:Q210535 } UNION { wd:Q443473 wdt:P3373 ?sibling. ?sibling wdt:P26 wd:Q210535 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3170 kg:7411 ?parent . ?parent kg:0454 kg:0454 } UNION \",\n        \"{ kg:3170 kg:1451 ?spouse . ?spouse kg:0454 kg:0454 } UNION \",\n        \"{ kg:3170 kg:0332 ?sibling . ?sibling kg:0454 kg:0454 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3170 kg:7411 ?parent . ?parent kg:0454 kg:0454 } UNION { kg:3170 kg:1451 ?spouse . ?spouse kg:0454 kg:0454 } UNION { kg:3170 kg:0332 ?sibling . ?sibling kg:0454 kg:0454 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?husband WHERE {\",\n    \"wd:Q16029387 wdt:P26 ?husband.\",\n    \"?husband wdt:P27 wd:Q16.\",\n    \"?husband wdt:P106 wd:Q548909.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q16029387 wdt:P26 ?husband. ?husband wdt:P27 wd:Q16. ?husband wdt:P106 wd:Q548909. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\":\n  [\n    \"SELECT ?husband WHERE {\",\n      \"wd:Q233128 wdt:P26 ?husband.\",\n      \"?husband wdt:P27 wd:Q16;\",\n      \"wdt:P106 wd:Q1323191;\",\n      \"wdt:P21 wd:Q6581097.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?husband WHERE { wd:Q233128 wdt:P26 ?husband. ?husband wdt:P27 wd:Q16; wdt:P106 wd:Q1323191; wdt:P21 wd:Q6581097. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q896740"]], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:6576 kg:8031 .\",\n          \"?resource kg:9858 kg:4339 .\",\n          \"?resource kg:5684 kg:7920 .\",\n          \"?resource kg:0697 kg:3644 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6576 kg:8031 . ?resource kg:9858 kg:4339 . ?resource kg:5684 kg:7920 . ?resource kg:0697 kg:3644 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q278406 .\",\n    \"?sequel wdt:P577 ?publicationDate .\",\n    \"?sequel wdt:P123 wd:Q967246 .\",\n    \"?sequel wdt:P275 wd:Q80955 .\",\n    \"}\",\n  \"}\"]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q278406 . ?sequel wdt:P577 ?publicationDate . ?sequel wdt:P123 wd:Q967246 . ?sequel wdt:P275 wd:Q80955 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sequel WHERE {\",\n        \"{ ?sequel wdt:P162|wdt:P31|wdt:P750|wdt:P272 wd:Q47099 . } UNION \",\n        \"{ ?sequel wdt:P155 wd:Q115945 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { { ?sequel wdt:P162|wdt:P31|wdt:P750|wdt:P272 wd:Q47099 . } UNION { ?sequel wdt:P155 wd:Q115945 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q6002647"], ["wd:Q5639057"], ["wd:Q910489"], ["wd:Q5826208"], ["wd:Q5965702"], ["wd:Q469935"], ["wd:Q6121459"], ["wd:Q115945"], ["wd:Q6095478"], ["wd:Q3338905"], ["wd:Q3293213"], ["wd:Q18378180"], ["wd:Q47015367"], ["wd:Q65160215"], ["wd:Q1247340"], ["wd:Q108429674"], ["wd:Q64840256"], ["wd:Q2986886"], ["wd:Q657393"], ["wd:Q5016031"], ["wd:Q478032"], ["wd:Q18844734"], ["wd:Q951360"], ["wd:Q3518335"], ["wd:Q1249545"], ["wd:Q18462972"], ["wd:Q4189489"], ["wd:Q5977976"], ["wd:Q721341"], ["wd:Q3286002"], ["wd:Q3287399"], ["wd:Q991337"], ["wd:Q5903684"], ["wd:Q1247625"], ["wd:Q60824925"], ["wd:Q21070705"], ["wd:Q3281241"], ["wd:Q3875028"], ["wd:Q15890282"], ["wd:Q3292788"], ["wd:Q6025672"], ["wd:Q5980645"], ["wd:Q6827072"], ["wd:Q5862691"], ["wd:Q68173512"], ["wd:Q4300948"], ["wd:Q7167725"], ["wd:Q1532287"], ["wd:Q25972352"], ["wd:Q9019341"], ["wd:Q478170"], ["wd:Q1065443"], ["wd:Q5684718"], ["wd:Q18416648"], ["wd:Q302627"], ["wd:Q110643257"], ["wd:Q15215803"], ["wd:Q103303848"], ["wd:Q5793089"], ["wd:Q6169796"], ["wd:Q5813737"], ["wd:Q259944"], ["wd:Q1107377"], ["wd:Q17489923"], ["wd:Q1192781"], ["wd:Q16587354"], ["wd:Q1247653"], ["wd:Q5849616"], ["wd:Q6466395"], ["wd:Q1166261"], ["wd:Q105438970"], ["wd:Q3282946"], ["wd:Q77209421"], ["wd:Q13772873"], ["wd:Q15144746"], ["wd:Q3284750"], ["wd:Q5885859"], ["wd:Q1849434"], ["wd:Q3327359"], ["wd:Q104767388"], ["wd:Q3293153"], ["wd:Q966903"], ["wd:Q6763195"], ["wd:Q56788"], ["wd:Q1041641"], ["wd:Q3089774"], ["wd:Q9049047"], ["wd:Q1248347"], ["wd:Q15701845"], ["wd:Q304798"], ["wd:Q7245132"], ["wd:Q5826493"], ["wd:Q77208515"], ["wd:Q9091293"], ["wd:Q13756762"], ["wd:Q3292845"], ["wd:Q3281637"], ["wd:Q9081548"], ["wd:Q3293132"], ["wd:Q19931429"], ["wd:Q5825991"], ["wd:Q26865719"], ["wd:Q18341045"], ["wd:Q1445755"], ["wd:Q6412206"], ["wd:Q19921776"], ["wd:Q6012388"], ["wd:Q5824535"], ["wd:Q1660433"], ["wd:Q112871943"], ["wd:Q5813383"], ["wd:Q5406561"], ["wd:Q1042321"], ["wd:Q5826357"], ["wd:Q5829169"], ["wd:Q3010575"], ["wd:Q5351238"], ["wd:Q6022359"], ["wd:Q3338922"], ["wd:Q1247973"], ["wd:Q65163061"], ["wd:Q9005071"], ["wd:Q3293238"], ["wd:Q262123"], ["wd:Q28324950"], ["wd:Q80899513"], ["wd:Q3563503"], ["wd:Q1970694"], ["wd:Q1248414"], ["wd:Q786576"], ["wd:Q2918371"], ["wd:Q4305433"], ["wd:Q5966024"], ["wd:Q898048"], ["wd:Q56275357"], ["wd:Q6147904"], ["wd:Q484789"], ["wd:Q309220"], ["wd:Q1247303"], ["wd:Q6338760"], ["wd:Q18378139"], ["wd:Q6123436"], ["wd:Q5826210"], ["wd:Q265961"], ["wd:Q5968384"], ["wd:Q259494"], ["wd:Q5967756"], ["wd:Q6161681"], ["wd:Q13772853"], ["wd:Q112672826"], ["wd:Q1323981"], ["wd:Q2882688"], ["wd:Q29391726"], ["wd:Q30163196"], ["wd:Q6100798"], ["wd:Q3235260"], ["wd:Q9019286"], ["wd:Q6036013"], ["wd:Q1067609"], ["wd:Q18464507"], ["wd:Q9019078"], ["wd:Q25245637"], ["wd:Q3286363"], ["wd:Q20902344"], ["wd:Q10360001"], ["wd:Q3280565"], ["wd:Q6024255"], ["wd:Q5352485"], ["wd:Q10325741"], ["wd:Q19801736"], ["wd:Q30570421"], ["wd:Q3704822"], ["wd:Q5894839"], ["wd:Q1248378"], ["wd:Q60291192"], ["wd:Q1247595"], ["wd:Q20724893"], ["wd:Q978407"], ["wd:Q3050322"], ["wd:Q3287359"], ["wd:Q6137089"], ["wd:Q38113767"], ["wd:Q63089508"], ["wd:Q260936"], ["wd:Q111947988"], ["wd:Q5826575"], ["wd:Q1249218"], ["wd:Q111372385"], ["wd:Q708018"], ["wd:Q169678"], ["wd:Q1249557"], ["wd:Q8771203"], ["wd:Q5915076"], ["wd:Q19890822"], ["wd:Q304767"], ["wd:Q6462998"], ["wd:Q106471541"], ["wd:Q3283865"], ["wd:Q105438971"], ["wd:Q530294"], ["wd:Q21780598"], ["wd:Q3292881"], ["wd:Q6081118"], ["wd:Q9092591"], ["wd:Q5813078"], ["wd:Q21403406"], ["wd:Q47629070"], ["wd:Q5671818"], ["wd:Q18472352"], ["wd:Q8350921"], ["wd:Q8261761"], ["wd:Q55771980"], ["wd:Q3284516"], ["wd:Q7933861"], ["wd:Q3285791"], ["wd:Q1247327"], ["wd:Q1247446"], ["wd:Q5528068"], ["wd:Q20018178"], ["wd:Q64768714"], ["wd:Q4358632"], ["wd:Q5824888"], ["wd:Q67641502"], ["wd:Q400571"], ["wd:Q5813814"], ["wd:Q10315072"], ["wd:Q2481548"], ["wd:Q3281886"], ["wd:Q108168338"], ["wd:Q1049929"], ["wd:Q308249"], ["wd:Q973224"], ["wd:Q28443767"], ["wd:Q5727610"], ["wd:Q6123135"], ["wd:Q581279"], ["wd:Q4358486"], ["wd:Q3293167"], ["wd:Q6044017"], ["wd:Q9032210"], ["wd:Q2881294"], ["wd:Q3282329"], ["wd:Q8963776"], ["wd:Q1247180"], ["wd:Q10387591"], ["wd:Q5971110"], ["wd:Q471577"], ["wd:Q6044025"], ["wd:Q7428294"], ["wd:Q3279181"], ["wd:Q3281378"], ["wd:Q5753857"], ["wd:Q2908347"], ["wd:Q3287378"], ["wd:Q30111490"], ["wd:Q3287365"], ["wd:Q6004851"], ["wd:Q3616492"], ["wd:Q6071422"], ["wd:Q3218724"], ["wd:Q1247433"], ["wd:Q10315116"], ["wd:Q5968290"], ["wd:Q969150"], ["wd:Q5650277"], ["wd:Q1532846"], ["wd:Q3293230"], ["wd:Q3558525"], ["wd:Q5399187"], ["wd:Q654402"], ["wd:Q5654693"], ["wd:Q3234172"], ["wd:Q1248433"], ["wd:Q15215805"], ["wd:Q111018941"], ["wd:Q4358580"], ["wd:Q26244624"], ["wd:Q59662075"], ["wd:Q110962056"], ["wd:Q3293145"], ["wd:Q8773533"], ["wd:Q4849771"], ["wd:Q7664512"], ["wd:Q1248289"], ["wd:Q6003873"], ["wd:Q1248358"], ["wd:Q19871355"], ["wd:Q1704424"], ["wd:Q41497589"], ["wd:Q5671604"], ["wd:Q5825200"], ["wd:Q109278610"], ["wd:Q16490975"], ["wd:Q106430871"], ["wd:Q3282792"], ["wd:Q5515929"], ["wd:Q1248731"], ["wd:Q47007429"], ["wd:Q1247351"], ["wd:Q3140037"], ["wd:Q599355"], ["wd:Q28091176"], ["wd:Q11681389"], ["wd:Q51329551"], ["wd:Q9077664"], ["wd:Q970991"], ["wd:Q309212"], ["wd:Q3282303"], ["wd:Q5779549"], ["wd:Q6448127"], ["wd:Q6146491"], ["wd:Q96413708"], ["wd:Q3281116"], ["wd:Q6024244"], ["wd:Q9016324"], ["wd:Q5967028"], ["wd:Q247550"], ["wd:Q3338912"], ["wd:Q27613956"], ["wd:Q56280510"], ["wd:Q908345"], ["wd:Q5858244"], ["wd:Q1249376"], ["wd:Q106234101"], ["wd:Q1029183"], ["wd:Q22251948"], ["wd:Q2894326"], ["wd:Q5825485"], ["wd:Q1827351"], ["wd:Q5676887"], ["wd:Q280974"], ["wd:Q379295"], ["wd:Q5800817"], ["wd:Q5651720"], ["wd:Q3281699"], ["wd:Q619507"], ["wd:Q5350894"], ["wd:Q5971580"], ["wd:Q53889642"], ["wd:Q5149061"], ["wd:Q1248310"], ["wd:Q6067871"], ["wd:Q1527312"], ["wd:Q1249577"], ["wd:Q63519974"], ["wd:Q20002437"], ["wd:Q28518280"], ["wd:Q1249551"], ["wd:Q5946509"], ["wd:Q308242"], ["wd:Q24278992"], ["wd:Q31553"], ["wd:Q1249591"], ["wd:Q2890948"], ["wd:Q8352418"], ["wd:Q5575056"], ["wd:Q7506362"], ["wd:Q3280712"], ["wd:Q52360514"], ["wd:Q514103"], ["wd:Q9076085"], ["wd:Q3616398"], ["wd:Q3282770"], ["wd:Q3283923"], ["wd:Q772293"], ["wd:Q1755779"], ["wd:Q9069239"], ["wd:Q109284712"], ["wd:Q96381994"], ["wd:Q8042007"], ["wd:Q2587881"], ["wd:Q5840250"], ["wd:Q10264555"], ["wd:Q5804270"], ["wd:Q1248297"], ["wd:Q5796881"], ["wd:Q10380690"], ["wd:Q108485809"], ["wd:Q18479208"], ["wd:Q65162571"], ["wd:Q50203460"], ["wd:Q1975034"], ["wd:Q964201"], ["wd:Q3283862"], ["wd:Q913989"], ["wd:Q28600122"], ["wd:Q64003"], ["wd:Q1247844"], ["wd:Q3286384"], ["wd:Q5840155"], ["wd:Q67225037"], ["wd:Q748510"], ["wd:Q6124908"], ["wd:Q6155669"], ["wd:Q1247440"], ["wd:Q28055360"], ["wd:Q3293223"], ["wd:Q7314137"], ["wd:Q18123902"], ["wd:Q730604"], ["wd:Q94828"], ["wd:Q5825232"], ["wd:Q18467756"], ["wd:Q4300956"], ["wd:Q587812"], ["wd:Q8192884"], ["wd:Q96592238"], ["wd:Q422527"], ["wd:Q3214110"], ["wd:Q471588"], ["wd:Q3293205"], ["wd:Q8341392"], ["wd:Q1247658"], ["wd:Q11702343"], ["wd:Q6006530"], ["wd:Q1068166"], ["wd:Q10997080"], ["wd:Q3293159"], ["wd:Q5762688"], ["wd:Q64623707"], ["wd:Q5824873"], ["wd:Q590426"], ["wd:Q1249345"], ["wd:Q4817724"], ["wd:Q924727"], ["wd:Q5661949"], ["wd:Q6117580"], ["wd:Q4291231"], ["wd:Q1065778"], ["wd:Q34379921"], ["wd:Q6128992"], ["wd:Q630206"], ["wd:Q16942035"], ["wd:Q745033"], ["wd:Q18486774"], ["wd:Q3050319"], ["wd:Q8774004"], ["wd:Q17636299"], ["wd:Q56556188"], ["wd:Q3616390"], ["wd:Q2841846"], ["wd:Q23646682"], ["wd:Q3616396"], ["wd:Q6131497"], ["wd:Q38231178"], ["wd:Q8240313"], ["wd:Q2997626"], ["wd:Q2044778"], ["wd:Q3063025"], ["wd:Q1249585"], ["wd:Q56345784"], ["wd:Q30111392"], ["wd:Q1346564"], ["wd:Q5999196"], ["wd:Q5853655"], ["wd:Q5804482"], ["wd:Q3281871"], ["wd:Q97860469"], ["wd:Q923735"], ["wd:Q1069461"], ["wd:Q9094608"], ["wd:Q937143"], ["wd:Q16847836"], ["wd:Q6140805"], ["wd:Q5853657"], ["wd:Q5758954"], ["wd:Q1068083"], ["wd:Q5320216"], ["wd:Q5682292"], ["wd:Q125867196"], ["wd:Q3284553"], ["wd:Q1261532"], ["wd:Q1248340"], ["wd:Q21780601"], ["wd:Q8052796"], ["wd:Q16744071"], ["wd:Q4694569"], ["wd:Q105966650"], ["wd:Q6466124"], ["wd:Q1248428"], ["wd:Q5966820"], ["wd:Q6872251"], ["wd:Q4747624"], ["wd:Q44925"], ["wd:Q1249565"], ["wd:Q750824"], ["wd:Q646174"], ["wd:Q4189960"], ["wd:Q2916294"], ["wd:Q1080808"], ["wd:Q3050345"], ["wd:Q9091304"], ["wd:Q731147"], ["wd:Q3338900"], ["wd:Q17372502"], ["wd:Q100502032"], ["wd:Q5408836"], ["wd:Q481703"], ["wd:Q16339691"], ["wd:Q1249600"], ["wd:Q1249051"], ["wd:Q30041947"], ["wd:Q9056586"], ["wd:Q5980643"], ["wd:Q753674"], ["wd:Q5832278"], ["wd:Q5966091"], ["wd:Q2919072"], ["wd:Q1247420"], ["wd:Q5886914"], ["wd:Q18464367"], ["wd:Q29920065"], ["wd:Q8355047"], ["wd:Q18485164"], ["wd:Q9030046"], ["wd:Q3283000"], ["wd:Q1970784"], ["wd:Q281695"], ["wd:Q18844730"], ["wd:Q2849436"], ["wd:Q1780808"], ["wd:Q5827168"], ["wd:Q2997713"], ["wd:Q464736"], ["wd:Q9080428"], ["wd:Q3280680"], ["wd:Q781299"], ["wd:Q5768773"], ["wd:Q47313890"], ["wd:Q59194377"]], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0304 kg:6712 .\",\n          \"?resource kg:9757 kg:7511 .\",\n          \"?resource kg:3056 kg:7511 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0304 kg:6712 . ?resource kg:9757 kg:7511 . ?resource kg:3056 kg:7511 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n      \"?company wdt:P749 wd:Q1032685 .\",\n      \"?company wdt:P31 wd:Q783794 .\",\n      \"?company wdt:P1234 ?subsidiary .\",\n      \"?subsidiary wdt:P749 ?parentCompany .\",\n      \"FILTER(?parentCompany = ?company)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P749 wd:Q1032685 . ?company wdt:P31 wd:Q783794 . ?company wdt:P1234 ?subsidiary . ?subsidiary wdt:P749 ?parentCompany . FILTER(?parentCompany = ?company) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{\",\n          \"?company wdt:P355 wd:Q467752 .\",\n          \"wd:Q467752 wdt:P127 ?company .\",\n        \"} UNION {\",\n          \"?company wdt:P749 wd:Q467752 .\",\n          \"wd:Q467752 wdt:P355 ?company .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { ?company wdt:P355 wd:Q467752 . wd:Q467752 wdt:P127 ?company . } UNION { ?company wdt:P749 wd:Q467752 . wd:Q467752 wdt:P355 ?company . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ kg:9680 kg:7293 ?subsidiary . } UNION { kg:9680 kg:6888 ?subsidiary . }\",\n        \"?subsidiary kg:7216 ?parent .\",\n        \"?company kg:7293 ?subsidiary .\",\n        \"?company kg:7216 ?parent .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { kg:9680 kg:7293 ?subsidiary . } UNION { kg:9680 kg:6888 ?subsidiary . } ?subsidiary kg:7216 ?parent . ?company kg:7293 ?subsidiary . ?company kg:7216 ?parent . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q168924 wdt:P31/wdt:P279* wd:Q5398426 .\",\n    \"  wd:Q106181 wdt:P31/wdt:P279* wd:Q5398426 .\",\n    \"  ?resource wdt:P178* wd:Q486741 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q168924 wdt:P31/wdt:P279* wd:Q5398426 . wd:Q106181 wdt:P31/wdt:P279* wd:Q5398426 . ?resource wdt:P178* wd:Q486741 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q524849 wdt:P112 ?resource. } UNION \",\n        \"{ wd:Q524849 wdt:P750 ?resource. } UNION \",\n        \"{ wd:Q524849 wdt:P272 ?resource. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q524849 wdt:P112 ?resource. } UNION { wd:Q524849 wdt:P750 ?resource. } UNION { wd:Q524849 wdt:P272 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2454 kg:4546 ?resource . } UNION \",\n        \"{ kg:2454 kg:3706 ?resource . }\",\n        \"{ ?resource kg:6989 kg:8165 . } UNION \",\n        \"{ ?resource kg:6989 kg:4433 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:2454 kg:4546 ?resource . } UNION { kg:2454 kg:3706 ?resource . } { ?resource kg:6989 kg:8165 . } UNION { ?resource kg:6989 kg:4433 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q4856901 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P25 ?band .\",\n    \"  ?band wdt:P136 wd:Q1049964 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q4856901 wdt:P3373 ?sibling . ?sibling wdt:P25 ?band . ?band wdt:P136 wd:Q1049964 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{\",\n          \"wd:Q4811453 wdt:P3373 ?sibling.\",\n          \"?sibling wdt:P106 wd:Q33999;\",\n            \"wdt:P737 wd:Q142701.\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { wd:Q4811453 wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q33999; wdt:P737 wd:Q142701. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?sibling kg:9947 kg:5840 .\",\n          \"?sibling kg:5993 ?occupation .\",\n          \"kg:6082 kg:0050 ?sibling .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?sibling kg:9947 kg:5840 . ?sibling kg:5993 ?occupation . kg:6082 kg:0050 ?sibling . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"{ ?work wdt:P50 wd:Q1239674 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q18601969 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q1239681 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P50 wd:Q1239674 . } UNION { ?work wdt:P50 wd:Q18601969 . } UNION { ?work wdt:P50 wd:Q1239681 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ wd:Q1687239 wdt:P58|wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q35979475 wdt:P58|wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q562108 wdt:P58|wdt:P1040 ?work. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { wd:Q1687239 wdt:P58|wdt:P1040 ?work. } UNION { wd:Q35979475 wdt:P58|wdt:P1040 ?work. } UNION { wd:Q562108 wdt:P58|wdt:P1040 ?work. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{?resource kg:4955 kg:2939.} UNION \",\n        \"{?resource kg:8021 kg:2939.} UNION \",\n        \"{?resource kg:4955 kg:5314.} UNION \",\n        \"{?resource kg:8021 kg:5314.} UNION \",\n        \"{?resource kg:4955 kg:8392.} UNION \",\n        \"{?resource kg:8021 kg:8392.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { {?resource kg:4955 kg:2939.} UNION {?resource kg:8021 kg:2939.} UNION {?resource kg:4955 kg:5314.} UNION {?resource kg:8021 kg:5314.} UNION {?resource kg:4955 kg:8392.} UNION {?resource kg:8021 kg:8392.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2487900 .\",\n    \"?resource wdt:P3320 wd:Q3810479 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2487900 . ?resource wdt:P3320 wd:Q3810479 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"?resource wdt:P31 wd:Q11424 ;\",\n                   \"wdt:P3373 wd:Q3083718 ;\",\n                   \"wdt:P2515 ?film .\",\n        \"wd:Q3083718 wdt:P27 wd:Q29 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 ; wdt:P3373 wd:Q3083718 ; wdt:P2515 ?film . wd:Q3083718 wdt:P27 wd:Q29 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8324 kg:1750 .\",\n          \"?resource kg:3905 kg:1750 .\",\n          \"?resource kg:3275 kg:8085 .\",\n          \"?resource kg:9566 ?film .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8324 kg:1750 . ?resource kg:3905 kg:1750 . ?resource kg:3275 kg:8085 . ?resource kg:9566 ?film . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q10586974 wdt:P26 ?wife.\",\n    \"?wife wdt:P31 wd:Q5;\",\n    \"      wdt:P106 wd:Q36834.\",\n    \"BIND(?wife AS ?resource)\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q10586974 wdt:P26 ?wife. ?wife wdt:P31 wd:Q5; wdt:P106 wd:Q36834. BIND(?wife AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q96203723 wdt:P26 ?spouse.\",\n          \"?spouse wdt:P27 wd:Q34;\",\n                  \"wdt:P106 wd:Q36834;\",\n                  \"wdt:P21 wd:Q6581072.\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q96203723 wdt:P26 ?spouse. ?spouse wdt:P27 wd:Q34; wdt:P106 wd:Q36834; wdt:P21 wd:Q6581072. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3516 kg:8981 ?resource . } UNION { ?resource kg:8981 kg:3516 . }\",\n        \"?resource kg:3493 kg:0427 .\",\n        \"?resource kg:9843 kg:8357 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3516 kg:8981 ?resource . } UNION { ?resource kg:8981 kg:3516 . } ?resource kg:3493 kg:0427 . ?resource kg:9843 kg:8357 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P50 wd:Q6187969 .\",\n        \"?film wdt:P50 wd:Q6187970 .\",\n        \"?film wdt:P50 wd:Q34295 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P86 wd:Q6187969 .\",\n        \"?film wdt:P86 wd:Q6187970 .\",\n        \"?film wdt:P86 wd:Q34295 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P50 wd:Q6187969 . ?film wdt:P50 wd:Q6187970 . ?film wdt:P50 wd:Q34295 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P86 wd:Q6187969 . ?film wdt:P86 wd:Q6187970 . ?film wdt:P86 wd:Q34295 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q562108 . }\",\n      \"} LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P162 wd:Q562108 . } UNION { wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P1040 wd:Q562108 . } } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4937 kg:1871 ?resource . } UNION \",\n        \"{ kg:4937 kg:8419 ?resource . } UNION \",\n        \"{ kg:4937 kg:5393 ?resource . }\",\n      \"FILTER (?resource IN (kg:0455, kg:8729, kg:4823))\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4937 kg:1871 ?resource . } UNION { kg:4937 kg:8419 ?resource . } UNION { kg:4937 kg:5393 ?resource . } FILTER (?resource IN (kg:0455, kg:8729, kg:4823)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q310629 wdt:P26 ?spouse.\",\n    \"?spouse wdt:P451* wd:Q37896;\",\n    \"wdt:P26 wd:Q310629.}\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q310629 wdt:P26 ?spouse. ?spouse wdt:P451* wd:Q37896; wdt:P26 wd:Q310629.} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q6581072 wdt:P26 ?resource.\",\n          \"?resource wdt:P3373 wd:Q3340.\",\n          \"?resource wdt:P21 wd:Q6581072.\"\n        ,\n      \"} UNION {\",\n          \"wd:Q296446 wdt:P26 ?resource.\",\n          \"?resource wdt:P3373 wd:Q3340.\",\n          \"?resource wdt:P21 wd:Q6581072.\"\n        ,\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q6581072 wdt:P26 ?resource. ?resource wdt:P3373 wd:Q3340. ?resource wdt:P21 wd:Q6581072. } UNION { wd:Q296446 wdt:P26 ?resource. ?resource wdt:P3373 wd:Q3340. ?resource wdt:P21 wd:Q6581072. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0357 kg:8755 .\",\n    \"?resource kg:4633 kg:3391 .\",\n    \"?resource kg:4633 kg:0538 .\",\n    \"?resource kg:8490 kg:0538 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0357 kg:8755 . ?resource kg:4633 kg:3391 . ?resource kg:4633 kg:0538 . ?resource kg:8490 kg:0538 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"{ ?work wdt:P50 wd:Q1239674 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q1811396 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q1811396 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P50 wd:Q1239674 . } UNION { ?work wdt:P50 wd:Q1811396 . } UNION { ?work wdt:P50 wd:Q1811396 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ wd:Q1687239 wdt:P58|wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q562108  wdt:P58|wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q35979475 wdt:P58|wdt:P1040 ?work. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { wd:Q1687239 wdt:P58|wdt:P1040 ?work. } UNION { wd:Q562108 wdt:P58|wdt:P1040 ?work. } UNION { wd:Q35979475 wdt:P58|wdt:P1040 ?work. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{?resource kg:1424 kg:1969.} UNION \",\n        \"{?resource kg:1424 kg:5002.} UNION \",\n        \"{?resource kg:1424 kg:4516.} UNION \",\n        \"{?resource kg:4444 kg:1969.} UNION \",\n        \"{?resource kg:4444 kg:5002.} UNION \",\n        \"{?resource kg:4444 kg:4516.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { {?resource kg:1424 kg:1969.} UNION {?resource kg:1424 kg:5002.} UNION {?resource kg:1424 kg:4516.} UNION {?resource kg:4444 kg:1969.} UNION {?resource kg:4444 kg:5002.} UNION {?resource kg:4444 kg:4516.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"{ ?work wdt:P50 wd:Q1239674 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q1811396 . } UNION \",\n      \"{ ?work wdt:P50 wd:Q10511681 . }\",\n      \"?work wdt:P2867 ?editor .\",\n      \"VALUES ?editor { wd:Q1239674 wd:Q1811396 wd:Q10511681 }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P50 wd:Q1239674 . } UNION { ?work wdt:P50 wd:Q1811396 . } UNION { ?work wdt:P50 wd:Q10511681 . } ?work wdt:P2867 ?editor . VALUES ?editor { wd:Q1239674 wd:Q1811396 wd:Q10511681 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q20729551 wdt:P58 ?screenwriter . } UNION \",\n      \"{ wd:Q20729551 wdt:P1040 ?editor . }\",\n      \"VALUES ?resource { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P58 ?screenwriter . } UNION { wd:Q20729551 wdt:P1040 ?editor . } VALUES ?resource { wd:Q35979475 wd:Q1687239 wd:Q562108 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q35979475"], ["wd:Q562108"], ["wd:Q1687239"]], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2364 kg:6557 ?resource . } UNION \",\n        \"{ kg:2364 kg:4093 ?resource . } UNION \",\n        \"{ kg:3159 kg:6557 kg:2364 . BIND(kg:3159 AS ?resource) } UNION \",\n        \"{ kg:3159 kg:4093 kg:2364 . BIND(kg:3159 AS ?resource) } UNION \",\n        \"{ kg:7577 kg:6557 kg:2364 . BIND(kg:7577 AS ?resource) } UNION \",\n        \"{ kg:7577 kg:4093 kg:2364 . BIND(kg:7577 AS ?resource) } UNION \",\n        \"{ kg:5506 kg:6557 kg:2364 . BIND(kg:5506 AS ?resource) } UNION \",\n        \"{ kg:5506 kg:4093 kg:2364 . BIND(kg:5506 AS ?resource) }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2364 kg:6557 ?resource . } UNION { kg:2364 kg:4093 ?resource . } UNION { kg:3159 kg:6557 kg:2364 . BIND(kg:3159 AS ?resource) } UNION { kg:3159 kg:4093 kg:2364 . BIND(kg:3159 AS ?resource) } UNION { kg:7577 kg:6557 kg:2364 . BIND(kg:7577 AS ?resource) } UNION { kg:7577 kg:4093 kg:2364 . BIND(kg:7577 AS ?resource) } UNION { kg:5506 kg:6557 kg:2364 . BIND(kg:5506 AS ?resource) } UNION { kg:5506 kg:4093 kg:2364 . BIND(kg:5506 AS ?resource) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P31 wd:Q5398426 . } UNION \",\n      \"{ ?resource wdt:P31 wd:Q70208 . } UNION \",\n      \"{ ?resource wdt:P31 wd:Q1156260 . }\",\n      \"?resource wdt:P1433 wd:Q19842654 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5398426 . } UNION { ?resource wdt:P31 wd:Q70208 . } UNION { ?resource wdt:P31 wd:Q1156260 . } ?resource wdt:P1433 wd:Q19842654 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q562108 . }\",\n      \"} LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P162 wd:Q562108 . } UNION { wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P1040 wd:Q562108 . } } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9129 kg:5139 ?editor . FILTER(?editor IN (kg:7611, kg:0062, kg:1312)) }\",\n        \"UNION\",\n        \"{ kg:9129 kg:1680 ?producer . FILTER(?producer IN (kg:7611, kg:0062, kg:1312)) }\",\n        \"UNION\",\n        \"{ kg:9129 kg:8762 ?company . FILTER(?company IN (kg:7611, kg:0062, kg:1312)) }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9129 kg:5139 ?editor . FILTER(?editor IN (kg:7611, kg:0062, kg:1312)) } UNION { kg:9129 kg:1680 ?producer . FILTER(?producer IN (kg:7611, kg:0062, kg:1312)) } UNION { kg:9129 kg:8762 ?company . FILTER(?company IN (kg:7611, kg:0062, kg:1312)) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q207491 wdt:P31/wdt:P279* ?role . } UNION \",\n      \"{ wd:Q560829 wdt:P31/wdt:P279* ?role . } UNION \",\n      \"{ wd:Q43505 wdt:P31/wdt:P279* ?role . }\",\n      \"?resource p:P31/ps:P31 ?role .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q207491 wdt:P31/wdt:P279* ?role . } UNION { wd:Q560829 wdt:P31/wdt:P279* ?role . } UNION { wd:Q43505 wdt:P31/wdt:P279* ?role . } ?resource p:P31/ps:P31 ?role . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q130376619"], ["wd:Q89817604"], ["wd:Q114554817"], ["wd:Q108607779"], ["wd:Q89816390"], ["wd:Q114835181"], ["wd:Q109534982"], ["wd:Q89808453"], ["wd:Q17109716"], ["wd:Q20972086"], ["wd:Q89811149"], ["wd:Q112968248"], ["wd:Q89818493"], ["wd:Q89811235"], ["wd:Q89811014"], ["wd:Q89816238"], ["wd:Q90573732"], ["wd:Q89808348"], ["wd:Q321811"], ["wd:Q89811154"], ["wd:Q89817418"], ["wd:Q90244121"], ["wd:Q89808810"], ["wd:Q18463035"], ["wd:Q89818522"], ["wd:Q89811016"], ["wd:Q101018408"], ["wd:Q116995791"], ["wd:Q12307998"], ["wd:Q89816351"], ["wd:Q17075394"], ["wd:Q89812589"], ["wd:Q89816644"], ["wd:Q89818061"], ["wd:Q89808323"], ["wd:Q89816322"], ["wd:Q89815800"], ["wd:Q89818439"], ["wd:Q16257849"], ["wd:Q89816366"], ["wd:Q89806462"], ["wd:Q89818557"], ["wd:Q89816783"], ["wd:Q89818025"], ["wd:Q27629600"], ["wd:Q19619384"], ["wd:Q89808482"], ["wd:Q114835151"], ["wd:Q89816882"], ["wd:Q89811141"], ["wd:Q89817006"], ["wd:Q3538497"], ["wd:Q109585935"], ["wd:Q90806092"], ["wd:Q11263362"], ["wd:Q89818443"], ["wd:Q89816684"], ["wd:Q4584910"], ["wd:Q114765114"], ["wd:Q89818563"], ["wd:Q89816277"], ["wd:Q89812725"], ["wd:Q623429"], ["wd:Q89806192"], ["wd:Q12190229"], ["wd:Q89816871"], ["wd:Q61752729"], ["wd:Q29328686"], ["wd:Q89815244"], ["wd:Q89816750"], ["wd:Q89818554"], ["wd:Q89817480"], ["wd:Q89811988"], ["wd:Q89816617"], ["wd:Q89818519"], ["wd:Q89816860"], ["wd:Q110891732"], ["wd:Q114834984"], ["wd:Q19390007"], ["wd:Q89817499"], ["wd:Q89817485"], ["wd:Q89817233"], ["wd:Q877619"], ["wd:Q89816643"], ["wd:Q4851214"], ["wd:Q28936479"], ["wd:Q89815635"], ["wd:Q8272977"], ["wd:Q89816888"], ["wd:Q6730611"], ["wd:Q89803646"], ["wd:Q89818456"], ["wd:Q113826525"], ["wd:Q111372928"], ["wd:Q89817409"], ["wd:Q89817600"], ["wd:Q107063739"], ["wd:Q111062272"], ["wd:Q130634660"], ["wd:L1144567-S2"], ["wd:Q89817412"], ["wd:Q20007239"], ["wd:Q90573727"], ["wd:Q108394602"], ["wd:Q114835185"], ["wd:Q89816647"], ["wd:Q89818490"], ["wd:Q90577714"], ["wd:Q41493"], ["wd:Q16210461"], ["wd:Q89808477"], ["wd:Q89818531"], ["wd:Q217192"], ["wd:Q28039691"], ["wd:Q89816831"], ["wd:Q89818470"], ["wd:Q745799"], ["wd:Q125122580"], ["wd:Q114451635"], ["wd:Q89808359"], ["wd:Q90231752"], ["wd:Q116202544"], ["wd:Q89816358"], ["wd:Q89816639"], ["wd:Q19384904"], ["wd:Q90229144"], ["wd:Q89811186"], ["wd:Q20108722"], ["wd:Q118733129"], ["wd:Q89817415"], ["wd:Q7636970"], ["wd:Q109283906"], ["wd:Q89808388"], ["wd:Q89816843"], ["wd:Q89816795"], ["wd:Q114765077"], ["wd:Q89816702"], ["wd:Q89816605"], ["wd:Q1948186"], ["wd:Q89815881"], ["wd:Q21596919"], ["wd:Q89806138"], ["wd:Q13094517"], ["wd:Q16955903"], ["wd:Q28249090"], ["wd:Q2105922"], ["wd:Q28933241"], ["wd:Q89816403"], ["wd:Q89815832"], ["wd:Q89811950"], ["wd:Q114828677"], ["wd:Q19382397"], ["wd:Q89816289"], ["wd:Q16821413"], ["wd:Q89818074"], ["wd:Q89816746"], ["wd:Q89816383"], ["wd:Q87351260"], ["wd:Q114818791"], ["wd:Q19874865"], ["wd:Q22286926"], ["wd:Q28943239"], ["wd:Q29327833"], ["wd:Q28914360"], ["wd:Q90577019"], ["wd:Q89818037"], ["wd:Q114688543"], ["wd:Q114835008"], ["wd:Q89806134"], ["wd:Q89818537"], ["wd:Q16715531"], ["wd:Q111631682"], ["wd:Q89818508"], ["wd:Q89815248"], ["wd:Q111730756"], ["wd:Q113468552"], ["wd:Q89816806"], ["wd:Q89812734"], ["wd:Q89806195"], ["wd:Q18482605"], ["wd:Q89803117"], ["wd:Q111187844"], ["wd:Q113860037"], ["wd:Q130634719"], ["wd:Q89816896"], ["wd:Q89812599"], ["wd:Q89816711"], ["wd:Q89816656"], ["wd:Q89812732"], ["wd:Q89816549"], ["wd:Q221956"], ["wd:Q89817985"], ["wd:Q2271773"], ["wd:Q89818404"], ["wd:Q89816658"], ["wd:Q89808381"], ["wd:Q89816558"], ["wd:Q89816625"], ["wd:Q89818571"], ["wd:Q89816524"], ["wd:Q89803632"], ["wd:Q60628165"], ["wd:Q111174452"], ["wd:Q89813286"], ["wd:Q89808392"], ["wd:Q29870405"], ["wd:Q89815817"], ["wd:Q90592376"], ["wd:Q89816194"], ["wd:Q89817936"], ["wd:Q28717128"], ["wd:Q89816890"], ["wd:Q89808383"], ["wd:Q1592700"], ["wd:Q89816611"], ["wd:Q113988050"], ["wd:Q10637715"], ["wd:Q89810025"], ["wd:Q89816312"], ["wd:Q19382400"], ["wd:Q89817523"], ["wd:Q89816242"], ["wd:Q89806102"], ["wd:Q28228250"], ["wd:Q28947307"], ["wd:Q189297"], ["wd:Q89816883"], ["wd:Q61975017"], ["wd:Q89818582"], ["wd:Q89817432"], ["wd:Q89816763"], ["wd:Q60628769"], ["wd:Q89816629"], ["wd:Q89816354"], ["wd:Q113502450"], ["wd:Q89817531"], ["wd:Q89815863"], ["wd:Q210443"], ["wd:Q48994196"], ["wd:Q30329670"], ["wd:Q89817464"], ["wd:Q89816136"], ["wd:Q89808436"], ["wd:Q89806100"], ["wd:Q111181461"], ["wd:Q27918457"], ["wd:Q6483665"], ["wd:Q89816415"], ["wd:Q89812643"], ["wd:Q89818510"], ["wd:Q89816551"], ["wd:Q130376588"], ["wd:Q29027051"], ["wd:Q89816811"], ["wd:Q89808472"], ["wd:Q89816785"], ["wd:Q510060"], ["wd:Q89806118"], ["wd:Q114824006"], ["wd:Q89816899"], ["wd:Q4449902"], ["wd:Q110413437"], ["wd:Q29102902"], ["wd:Q109974084"], ["wd:Q114818795"], ["wd:Q19885891"], ["wd:Q89812874"], ["wd:Q89813288"], ["wd:Q89816849"], ["wd:Q29940705"], ["wd:Q116110613"], ["wd:Q89816594"], ["wd:Q25446546"], ["wd:Q90232813"], ["wd:Q89815869"], ["wd:Q24322"], ["wd:Q89817999"], ["wd:Q112429965"], ["wd:Q89812708"], ["wd:Q89815874"], ["wd:Q89816634"], ["wd:Q89817988"], ["wd:Q90155588"], ["wd:Q117459892"], ["wd:Q90237881"], ["wd:Q89806479"], ["wd:Q111170170"], ["wd:Q89811157"], ["wd:Q89803650"], ["wd:Q89816700"], ["wd:Q119628110"], ["wd:Q89803122"], ["wd:Q89811007"], ["wd:Q113634293"], ["wd:Q109238973"], ["wd:Q89815888"], ["wd:Q113634165"], ["wd:Q89816269"], ["wd:Q89808819"], ["wd:Q89817422"], ["wd:Q109003140"], ["wd:Q28963166"], ["wd:Q21142417"], ["wd:Q18481016"], ["wd:Q111296375"], ["wd:Q11902258"], ["wd:Q89816569"], ["wd:Q90236054"], ["wd:Q63860173"], ["wd:Q89817942"], ["wd:Q89816541"], ["wd:Q89816726"], ["wd:Q89817996"], ["wd:Q89806090"], ["wd:Q10677833"], ["wd:Q18465293"], ["wd:Q89806093"], ["wd:Q89817599"], ["wd:Q2891628"], ["wd:Q105605371"], ["wd:Q4561847"], ["wd:Q114835144"], ["wd:Q89816513"], ["wd:Q28642643"], ["wd:Q111955496"], ["wd:Q89811970"], ["wd:Q89818099"], ["wd:Q89806200"], ["wd:Q7854897"], ["wd:Q19375851"], ["wd:Q89816410"], ["wd:Q89808353"], ["wd:Q89811975"], ["wd:Q11061435"], ["wd:Q18529916"], ["wd:Q89808329"], ["wd:Q89817533"], ["wd:Q89818004"], ["wd:Q89816183"], ["wd:Q114566729"], ["wd:Q89816274"], ["wd:Q89818079"], ["wd:Q89816672"], ["wd:Q89816728"], ["wd:Q25697055"], ["wd:Q89816858"], ["wd:Q89816608"], ["wd:Q106690005"], ["wd:Q89817459"], ["wd:Q114818797"], ["wd:Q89812633"], ["wd:Q114823998"], ["wd:Q89818081"], ["wd:Q17375288"], ["wd:Q116311879"], ["wd:Q19429033"], ["wd:Q89816374"], ["wd:Q106206640"], ["wd:Q89816854"], ["wd:Q89811934"], ["wd:Q111738315"], ["wd:Q16821209"], ["wd:Q89818034"], ["wd:Q116877951"], ["wd:Q21142312"], ["wd:Q89806165"], ["wd:Q105992890"], ["wd:Q9197822"], ["wd:Q89816776"], ["wd:Q114818794"], ["wd:Q109790360"], ["wd:Q89815632"], ["wd:Q90229934"], ["wd:Q220161"], ["wd:Q110582784"], ["wd:Q89809631"], ["wd:Q21604747"], ["wd:Q89815837"], ["wd:Q68542701"], ["wd:Q89816151"], ["wd:Q89806791"], ["wd:Q89814837"], ["wd:Q89812481"], ["wd:Q89816733"], ["wd:Q18009147"], ["wd:Q89812585"], ["wd:Q21512700"], ["wd:Q29327834"], ["wd:Q115411428"], ["wd:Q89806126"], ["wd:Q4919413"], ["wd:Q7728912"], ["wd:Q28003114"], ["wd:Q666909"], ["wd:Q87721112"], ["wd:Q130049527"], ["wd:Q22129152"], ["wd:Q89816997"], ["wd:Q89818437"], ["wd:Q114824009"], ["wd:Q27848494"], ["wd:Q112872147"], ["wd:Q89812618"], ["wd:Q106109931"], ["wd:Q89816500"], ["wd:Q89808344"], ["wd:Q114828676"], ["wd:Q101052540"], ["wd:Q109407237"], ["wd:Q47036229"], ["wd:Q89817491"], ["wd:Q89816675"], ["wd:Q19893658"], ["wd:Q25432078"], ["wd:Q108415277"], ["wd:Q89816199"], ["wd:Q111309099"], ["wd:Q89817502"], ["wd:Q89810021"], ["wd:Q28717125"], ["wd:Q89811979"], ["wd:Q89816765"], ["wd:Q116758161"], ["wd:Q28642629"], ["wd:Q89816779"], ["wd:Q19895552"], ["wd:Q89817438"], ["wd:Q89816757"], ["wd:Q89816832"], ["wd:Q89816661"], ["wd:Q89808854"], ["wd:Q89814839"], ["wd:Q89818516"], ["wd:Q89816798"], ["wd:Q3011118"], ["wd:Q89816613"], ["wd:Q89815261"], ["wd:Q123472071"], ["wd:Q28943216"], ["wd:Q89806451"], ["wd:Q89806169"], ["wd:Q111372913"], ["wd:Q114835172"], ["wd:Q89806104"], ["wd:Q89811021"], ["wd:Q89808871"], ["wd:Q45311620"], ["wd:Q89811963"], ["wd:Q12337279"], ["wd:Q89818580"], ["wd:Q89812714"], ["wd:Q89817488"], ["wd:Q89816852"], ["wd:Q113757602"], ["wd:Q89803638"], ["wd:Q23580887"], ["wd:Q89817513"], ["wd:Q89816846"], ["wd:Q89818088"], ["wd:Q89816546"], ["wd:Q21142377"], ["wd:Q90577678"], ["wd:Q89808400"], ["wd:Q89806468"], ["wd:Q28943242"], ["wd:Q89815763"], ["wd:Q89808885"], ["wd:Q109416875"], ["wd:Q89815791"], ["wd:Q89816362"], ["wd:Q17280171"], ["wd:Q89816827"], ["wd:Q89817508"], ["wd:Q109339721"], ["wd:Q21009775"], ["wd:Q18479612"], ["wd:Q89816818"], ["wd:Q89816705"], ["wd:Q89816864"], ["wd:Q30553720"], ["wd:Q28943245"], ["wd:Q89803613"], ["wd:Q90237884"], ["wd:Q89806086"], ["wd:Q89808386"], ["wd:Q114798432"], ["wd:Q582680"], ["wd:Q89806435"], ["wd:Q89803629"], ["wd:Q114786944"], ["wd:Q89808805"], ["wd:Q89816666"], ["wd:Q117460009"], ["wd:Q89818528"], ["wd:Q113697208"], ["wd:Q111731107"], ["wd:Q89818058"], ["wd:Q89816596"], ["wd:Q89816531"], ["wd:Q89816878"], ["wd:Q106206637"], ["wd:Q89816989"], ["wd:Q27629790"], ["wd:Q123158626"], ["wd:Q23885391"], ["wd:Q114835062"], ["wd:Q30329660"], ["wd:Q89817441"], ["wd:Q12307988"], ["wd:Q89816988"], ["wd:Q89806161"], ["wd:Q89808367"], ["wd:Q113115029"], ["wd:Q89816737"], ["wd:Q12606548"], ["wd:Q89816863"], ["wd:Q89816134"], ["wd:Q130271703"], ["wd:Q106206641"], ["wd:Q114345118"], ["wd:Q89806186"], ["wd:Q89815830"], ["wd:Q89815877"], ["wd:Q89816568"], ["wd:Q89816406"], ["wd:Q89812637"], ["wd:Q16910544"], ["wd:Q114823990"], ["wd:Q89807951"], ["wd:Q89816721"], ["wd:Q30329666"], ["wd:Q11387452"], ["wd:Q89817424"], ["wd:Q10585106"], ["wd:Q935310"], ["wd:Q90235089"], ["wd:Q89812621"], ["wd:Q25439273"], ["wd:Q114818719"], ["wd:Q27794967"], ["wd:Q10313984"], ["wd:Q19881459"], ["wd:Q114633540"], ["wd:Q89815250"], ["wd:Q29940641"], ["wd:Q89816677"], ["wd:Q89806445"], ["wd:Q89816985"], ["wd:Q108693177"], ["wd:Q89803618"], ["wd:Q89816332"], ["wd:Q89816841"], ["wd:Q16210028"], ["wd:Q89817504"], ["wd:Q89817475"], ["wd:Q89806217"], ["wd:Q89817236"], ["wd:Q89808331"], ["wd:Q1624096"], ["wd:Q89818030"], ["wd:Q124813125"], ["wd:Q31884967"], ["wd:Q20104484"], ["wd:Q106206638"], ["wd:Q114823999"], ["wd:Q1565988"], ["wd:Q89816652"], ["wd:Q89818084"], ["wd:Q89816632"], ["wd:Q89817494"], ["wd:Q89806210"], ["wd:Q90235933"], ["wd:Q114818692"], ["wd:Q89816388"], ["wd:Q89816585"], ["wd:Q89806156"], ["wd:Q89818076"], ["wd:Q89808017"], ["wd:Q89818414"], ["wd:Q89806116"], ["wd:Q89815859"], ["wd:Q89817496"], ["wd:Q89810995"], ["wd:Q89815786"], ["wd:Q89817977"], ["wd:Q89816527"], ["wd:Q130631829"], ["wd:Q90234706"], ["wd:Q192630"], ["wd:Q108702158"], ["wd:Q30329651"], ["wd:Q89815757"], ["wd:Q23042381"], ["wd:Q89812596"], ["wd:Q116326267"], ["wd:Q89812629"], ["wd:Q89818579"], ["wd:Q89814842"], ["wd:Q25387907"], ["wd:Q90235422"], ["wd:Q11123494"], ["wd:Q16448748"], ["wd:Q108523273"], ["wd:Q89812571"], ["wd:Q4167312"], ["wd:Q28922462"], ["wd:Q18332506"], ["wd:Q89818406"], ["wd:Q89817023"], ["wd:Q89812567"], ["wd:Q89812722"], ["wd:Q108371207"], ["wd:Q3926631"], ["wd:Q29310294"], ["wd:Q89816381"], ["wd:Q28943241"], ["wd:Q89812561"], ["wd:Q89815584"], ["wd:Q89808411"], ["wd:Q89812728"], ["wd:Q89817228"], ["wd:Q89818495"], ["wd:Q89816682"], ["wd:Q12717059"], ["wd:Q1647158"], ["wd:Q89818092"], ["wd:Q89816793"], ["wd:Q89816716"], ["wd:Q16253213"], ["wd:Q16495023"], ["wd:Q89817455"], ["wd:Q12717942"], ["wd:Q17887372"], ["wd:Q29328175"], ["wd:Q89815768"], ["wd:Q89807957"], ["wd:Q89810013"], ["wd:Q89816326"], ["wd:Q89817000"], ["wd:Q89817954"], ["wd:Q90592227"], ["wd:Q89806458"], ["wd:Q2282399"], ["wd:Q111917713"], ["wd:Q18702179"], ["wd:Q89816731"], ["wd:Q117459904"], ["wd:Q18737104"], ["wd:Q89816748"], ["wd:Q89808808"], ["wd:Q89806144"], ["wd:Q114834218"], ["wd:Q4769685"], ["wd:Q131561066"], ["wd:Q18639039"], ["wd:Q89816588"], ["wd:Q89803614"], ["wd:Q89816650"], ["wd:Q89816165"], ["wd:Q89812640"], ["wd:Q17374044"], ["wd:Q90232506"], ["wd:Q89818587"], ["wd:Q89812547"], ["wd:Q89807962"], ["wd:Q111339699"], ["wd:Q114823995"], ["wd:Q89818006"], ["wd:Q89818591"], ["wd:Q89817003"], ["wd:Q16933785"], ["wd:Q89815743"], ["wd:Q89817419"], ["wd:Q89816690"], ["wd:Q89816825"], ["wd:Q89806207"], ["wd:Q116758156"], ["wd:Q29328454"], ["wd:Q114821041"], ["wd:Q89816886"], ["wd:Q89816627"], ["wd:Q28114360"], ["wd:Q18351973"], ["wd:Q89811952"], ["wd:Q24231964"], ["wd:Q41662"], ["wd:Q1079806"], ["wd:Q89818046"], ["wd:Q16211503"], ["wd:Q89808326"], ["wd:Q89818428"], ["wd:Q89816507"], ["wd:Q28708439"], ["wd:Q18285303"], ["wd:Q28810547"], ["wd:Q89818426"], ["wd:Q89815259"], ["wd:Q89817511"], ["wd:Q7260950"], ["wd:Q89815855"], ["wd:Q131192062"], ["wd:Q113509849"], ["wd:Q47227732"], ["wd:Q29328814"], ["wd:Q90231923"], ["wd:Q89816140"], ["wd:Q89816834"], ["wd:Q89817406"], ["wd:Q89816161"], ["wd:Q89818576"], ["wd:Q17055518"], ["wd:Q124827418"], ["wd:Q89818445"], ["wd:Q90573702"], ["wd:Q89816687"], ["wd:Q89817404"], ["wd:Q108428083"], ["wd:Q111174470"], ["wd:Q89806223"], ["wd:Q112110581"], ["wd:Q89811941"], ["wd:Q111452939"], ["wd:Q18696305"], ["wd:Q15628696"], ["wd:Q89816693"], ["wd:Q89811190"], ["wd:Q89812553"], ["wd:Q89816761"], ["wd:Q89806204"], ["wd:Q185091"], ["wd:Q10593422"], ["wd:Q89816582"], ["wd:Q89816772"], ["wd:Q130554834"], ["wd:Q90580482"], ["wd:Q89808895"], ["wd:Q18128243"], ["wd:Q110291191"], ["wd:Q89811019"], ["wd:Q89811242"], ["wd:Q89815885"], ["wd:Q89818009"], ["wd:Q17984266"], ["wd:Q238577"], ["wd:Q89818500"], ["wd:Q89807968"], ["wd:Q90579036"], ["wd:Q117719975"], ["wd:Q112600021"], ["wd:Q28641166"], ["wd:Q89811162"], ["wd:Q89806153"], ["wd:Q89812711"], ["wd:Q7201622"], ["wd:Q89816709"], ["wd:Q89816515"], ["wd:Q111169292"], ["wd:Q113826237"], ["wd:Q89816172"], ["wd:Q89816663"], ["wd:Q89806430"], ["wd:Q89817467"], ["wd:Q89818431"], ["wd:Q89816345"], ["wd:Q18362199"], ["wd:Q89817442"], ["wd:Q43080939"], ["wd:Q113518838"], ["wd:Q89817428"], ["wd:Q1427744"], ["wd:Q89815040"], ["wd:Q89816667"], ["wd:Q89818066"], ["wd:Q25430069"], ["wd:Q105944398"], ["wd:Q89817931"], ["wd:Q17136409"], ["wd:Q89808362"], ["wd:Q89808833"], ["wd:Q1672164"], ["wd:Q124172004"], ["wd:Q89818505"], ["wd:Q13188916"], ["wd:Q16761133"], ["wd:Q89816502"], ["wd:Q89817518"], ["wd:Q89807981"], ["wd:Q89817993"], ["wd:Q108068261"], ["wd:Q114818787"], ["wd:Q89806096"], ["wd:Q89806171"], ["wd:Q89816143"], ["wd:Q131604834"], ["wd:Q89817425"], ["wd:Q28642655"], ["wd:Q90229135"], ["wd:Q1065821"], ["wd:Q89816707"], ["wd:Q89816877"], ["wd:Q115411956"], ["wd:Q89806189"], ["wd:Q89816534"], ["wd:Q89817932"], ["wd:Q16265947"], ["wd:Q89811002"], ["wd:Q89803621"], ["wd:Q89816576"], ["wd:L1413478"], ["wd:Q89806220"], ["wd:Q89811173"], ["wd:Q89816376"], ["wd:Q89818039"], ["wd:Q89816520"], ["wd:Q29870735"], ["wd:Q89818453"], ["wd:Q28874775"], ["wd:Q112876521"], ["wd:Q89816741"], ["wd:Q89817939"], ["wd:Q89816188"], ["wd:Q17157128"], ["wd:Q114834997"], ["wd:Q89815776"], ["wd:Q89818421"], ["wd:Q114835021"], ["wd:Q27629587"], ["wd:Q89808377"], ["wd:Q123246417"], ["wd:Q500699"], ["wd:Q29913096"], ["wd:Q89816284"], ["wd:Q2418744"], ["wd:Q89812609"], ["wd:Q28641872"], ["wd:Q89818012"], ["wd:Q89816636"], ["wd:Q90235415"], ["wd:Q131192124"], ["wd:Q90577449"], ["wd:Q108332542"], ["wd:Q89818021"], ["wd:Q89818464"], ["wd:Q113638623"], ["wd:Q21711340"], ["wd:Q89815639"], ["wd:Q89818534"], ["wd:Q89808891"], ["wd:Q89806530"], ["wd:Q89816156"], ["wd:Q89808829"], ["wd:Q89811956"], ["wd:Q5941940"], ["wd:Q114834993"], ["wd:Q28936480"], ["wd:Q89811171"], ["wd:Q104672472"], ["wd:Q89806083"], ["wd:Q90575739"], ["wd:Q114632946"], ["wd:Q18347794"], ["wd:Q29474504"], ["wd:Q89808340"], ["wd:Q89808374"], ["wd:Q89818567"], ["wd:Q89808446"], ["wd:Q89816602"], ["wd:Q89817435"], ["wd:Q114835194"], ["wd:Q108674955"], ["wd:Q16210403"], ["wd:Q89816767"], ["wd:Q117459992"], ["wd:Q108265986"], ["wd:Q90234995"], ["wd:Q89808864"], ["wd:Q89815694"], ["wd:Q89815795"], ["wd:Q89816801"], ["wd:Q89808822"], ["wd:Q89818442"], ["wd:Q116969557"], ["wd:Q89816577"], ["wd:Q4848703"], ["wd:Q16525357"], ["wd:Q70449444"], ["wd:Q89816316"], ["wd:Q89806098"], ["wd:Q89815240"], ["wd:Q113947394"], ["wd:Q89803643"], ["wd:Q89811948"], ["wd:Q89816510"], ["wd:Q89815865"], ["wd:Q48838216"], ["wd:Q90576504"], ["wd:Q89807979"], ["wd:Q89816622"], ["wd:Q89816874"], ["wd:Q89818467"], ["wd:Q89816395"], ["wd:Q89816789"], ["wd:Q12379779"], ["wd:Q5506181"], ["wd:Q89818078"], ["wd:Q89806225"], ["wd:Q89815749"], ["wd:Q89818513"], ["wd:Q109878011"], ["wd:Q109762186"], ["wd:Q89811194"], ["wd:Q89806106"], ["wd:Q27629576"], ["wd:Q113339888"], ["wd:Q16961788"], ["wd:Q89812716"], ["wd:Q89806105"], ["wd:Q17007327"], ["wd:Q27630023"], ["wd:Q89816816"], ["wd:Q89803128"], ["wd:Q89808849"], ["wd:Q16967795"], ["wd:Q17110519"], ["wd:Q114835054"], ["wd:Q89811012"], ["wd:Q89811010"], ["wd:Q89808335"], ["wd:Q89817461"], ["wd:Q109297643"], ["wd:Q89811938"], ["wd:Q89812556"], ["wd:Q108216333"], ["wd:Q89817478"], ["wd:Q110954472"], ["wd:Q89803625"], ["wd:Q89815589"], ["wd:Q21070392"], ["wd:Q28943243"], ["wd:Q89816697"], ["wd:Q89815593"], ["wd:Q89811138"], ["wd:Q89818432"], ["wd:Q21665474"], ["wd:Q89812593"], ["wd:Q89816723"], ["wd:Q89818548"], ["wd:Q89806474"], ["wd:Q89812603"], ["wd:Q89818086"], ["wd:Q59284452"], ["wd:Q59386908"], ["wd:Q107410905"], ["wd:Q114835163"], ["wd:Q89808369"], ["wd:Q89811165"], ["wd:Q89815781"], ["wd:Q89811146"], ["wd:Q89815841"], ["wd:Q89818055"], ["wd:Q89817516"], ["wd:Q89816838"], ["wd:Q28642218"], ["wd:Q19714547"], ["wd:Q89816814"], ["wd:Q89818561"], ["wd:Q89816580"], ["wd:Q89806173"], ["wd:Q109002248"], ["wd:Q89803125"], ["wd:Q89806080"], ["wd:Q89803114"], ["wd:Q89818449"], ["wd:Q29870196"], ["wd:Q89810991"], ["wd:Q89812575"], ["wd:Q89806441"], ["wd:Q18646927"], ["wd:Q89818502"], ["wd:Q89816202"], ["wd:Q19866974"], ["wd:Q20687168"], ["wd:Q23579307"], ["wd:Q2555459"], ["wd:Q89816494"], ["wd:Q89812613"], ["wd:Q112205880"], ["wd:Q89817945"], ["wd:Q16211204"], ["wd:Q90234565"], ["wd:Q89812542"], ["wd:Q89815826"], ["wd:Q89818423"], ["wd:Q19769268"], ["wd:Q35071920"], ["wd:Q111313927"], ["wd:Q114789518"], ["wd:Q28641562"], ["wd:Q89816224"], ["wd:Q89816296"]], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q365090 wdt:P162|wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q95125 wdt:P162|wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q43994 wdt:P162|wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q365090 wdt:P162|wdt:P1431 ?resource. } UNION { wd:Q95125 wdt:P162|wdt:P1431 ?resource. } UNION { wd:Q43994 wdt:P162|wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q107387904"]], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{ kg:2672 kg:0948|kg:3178 ?resource. } UNION \",\n        \"{ kg:7057 kg:0948|kg:3178 ?resource. } UNION \",\n        \"{ kg:1133 kg:0948|kg:3178 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { kg:2672 kg:0948|kg:3178 ?resource. } UNION { kg:7057 kg:0948|kg:3178 ?resource. } UNION { kg:1133 kg:0948|kg:3178 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q886"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sisterWife WHERE {\",\n    \"?sisterWife wdt:P31 wd:Q5; \",\n    \"wdt:P26 ?brotherSibling; \",\n    \"wdt:P27 ?husband. \",\n    \"{ ?brotherSibling wdt:P40 wd:Q39618 } UNION { ?brotherSibling wdt:P40 wd:Q39651 } .\",\n    \"?husband wdt:P40 wd:Q39627. \",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sisterWife WHERE { ?sisterWife wdt:P31 wd:Q5; wdt:P26 ?brotherSibling; wdt:P27 ?husband. { ?brotherSibling wdt:P40 wd:Q39618 } UNION { ?brotherSibling wdt:P40 wd:Q39651 } . ?husband wdt:P40 wd:Q39627. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sisterWife WHERE {\",\n        \"{ wd:Q3340 wdt:P26 ?sisterWife. } UNION \",\n        \"{ wd:Q3345 wdt:P3373 ?sisterWife. } UNION \",\n        \"{ wd:Q3340 wdt:P3373 ?sisterWife. }\",\n      \"?sisterWife wdt:P21 wd:Q6581072.\",\n    \"}\"\n     ]\n}", "normal_query": "SELECT ?sisterWife WHERE { { wd:Q3340 wdt:P26 ?sisterWife. } UNION { wd:Q3345 wdt:P3373 ?sisterWife. } UNION { wd:Q3340 wdt:P3373 ?sisterWife. } ?sisterWife wdt:P21 wd:Q6581072. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q40023"], ["wd:Q451204"], ["wd:Q40027"]], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"{ kg:1945 kg:9782 ?resource . } UNION \",\n    \"{ kg:1600 kg:4989 ?resource . } UNION \",\n    \"{ kg:4993 kg:4989 ?resource . } UNION \",\n    \"{ ?resource kg:9841 true . }\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1945 kg:9782 ?resource . } UNION { kg:1600 kg:4989 ?resource . } UNION { kg:4993 kg:4989 ?resource . } UNION { ?resource kg:9841 true . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q134257 wdt:P31 wd:Q608959 . } UNION \",\n      \"{ wd:Q134257 wdt:P31 wd:Q248564 . } UNION \",\n      \"{ wd:Q134257 wdt:P31 wd:Q209151 . }\",\n      \"?resource wdt:P161 wd:Q134257 ;\",\n      \"wdt:P162 wd:Q134257 ;\",\n      \"wdt:P58 wd:Q134257 . }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q134257 wdt:P31 wd:Q608959 . } UNION { wd:Q134257 wdt:P31 wd:Q248564 . } UNION { wd:Q134257 wdt:P31 wd:Q209151 . } ?resource wdt:P161 wd:Q134257 ; wdt:P162 wd:Q134257 ; wdt:P58 wd:Q134257 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q5542223 wdt:P58|wdt:P57|wdt:P162 ?resource. } UNION \",\n        \"{ wd:Q4500 wdt:P58|wdt:P57|wdt:P162 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q5542223 wdt:P58|wdt:P57|wdt:P162 ?resource. } UNION { wd:Q4500 wdt:P58|wdt:P57|wdt:P162 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:0075 kg:2221|kg:3866|kg:6328 ?resource . } UNION \",\n        \"{ kg:2805 kg:2221|kg:3866|kg:6328 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0075 kg:2221|kg:3866|kg:6328 ?resource . } UNION { kg:2805 kg:2221|kg:3866|kg:6328 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P106 wd:Q2498761 .\",\n        \"?resource p:P166 ?starringStatement .\",\n        \"?starringStatement ps:P166 wd:Q3505474 .\",\n        \"?resource p:P68 ?editingStatement .\",\n        \"?editingStatement ps:P68 wd:Q3505474 .\",\n      \"} UNION {\",\n        \"?resource wdt:P123 wd:Q3505474 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . ?resource p:P166 ?starringStatement . ?starringStatement ps:P166 wd:Q3505474 . ?resource p:P68 ?editingStatement . ?editingStatement ps:P68 wd:Q3505474 . } UNION { ?resource wdt:P123 wd:Q3505474 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2615443 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q2336453 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q3530946 wdt:P1040 ?resource. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2615443 wdt:P161 ?resource. } UNION { wd:Q2336453 wdt:P1040 ?resource. } UNION { wd:Q3530946 wdt:P1040 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:2002 kg:6947 .\",\n          \"?resource kg:7277 kg:8202 .\",\n          \"?resource kg:7277 kg:3899 .\",\n          \"?resource kg:7277 kg:9083 .\",\n        \"} UNION {\",\n          \"?resource kg:2002 kg:6947 .\",\n          \"?resource kg:2002 kg:0137 .\",\n          \"?resource kg:7277 kg:8202 .\",\n          \"?resource kg:7277 kg:3899 .\",\n          \"?resource kg:7277 kg:9083 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2002 kg:6947 . ?resource kg:7277 kg:8202 . ?resource kg:7277 kg:3899 . ?resource kg:7277 kg:9083 . } UNION { ?resource kg:2002 kg:6947 . ?resource kg:2002 kg:0137 . ?resource kg:7277 kg:8202 . ?resource kg:7277 kg:3899 . ?resource kg:7277 kg:9083 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P2867 wd:Q49047, wd:Q154316, wd:Q154317, wd:Q154318 .\",\n    \"?resource wdt:P161 ?film .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film rdfs:label \\\"In the Park\\\"@en, \\\"Shanghaied\\\"@en, \\\"Modern Times\\\"@en, \\\"The Professor\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2867 wd:Q49047, wd:Q154316, wd:Q154317, wd:Q154318 . ?resource wdt:P161 ?film . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"In the Park\"@en, \"Shanghaied\"@en, \"Modern Times\"@en, \"The Professor\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q658822 wdt:P31 wd:Q5 . } UNION \",\n        \"{ wd:Q921678 wdt:P31 wd:Q5 . } UNION \",\n        \"{ wd:Q45602 wdt:P31 wd:Q5 . } UNION \",\n        \"{ wd:Q2718259 wdt:P31 wd:Q5 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q658822 wdt:P31 wd:Q5 . } UNION { wd:Q921678 wdt:P31 wd:Q5 . } UNION { wd:Q45602 wdt:P31 wd:Q5 . } UNION { wd:Q2718259 wdt:P31 wd:Q5 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3219 kg:1634 ?editor . } UNION \",\n        \"{ kg:7312 kg:1015 ?star . } UNION \",\n        \"{ kg:2793 kg:1634 ?editor . } UNION \",\n        \"{ kg:7833 kg:1015 ?star . } UNION \",\n        \"{ kg:7258 kg:1634 ?editor . } UNION \",\n        \"{ kg:7258 kg:1015 ?star . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3219 kg:1634 ?editor . } UNION { kg:7312 kg:1015 ?star . } UNION { kg:2793 kg:1634 ?editor . } UNION { kg:7833 kg:1015 ?star . } UNION { kg:7258 kg:1634 ?editor . } UNION { kg:7258 kg:1015 ?star . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n    \"{ ?work wdt:P50 wd:Q1342698 . } UNION \",\n    \"{ ?work wdt:P57 wd:Q1342698 . } UNION \",\n    \"{ ?work wdt:P50 wd:Q1342700 . } UNION \",\n    \"{ ?work wdt:P57 wd:Q1342700 . } UNION \",\n    \"{ ?work wdt:P50 wd:Q6159869 . } UNION \",\n    \"{ ?work wdt:P57 wd:Q6159869 . } UNION \",\n    \"{ ?work wdt:P50 wd:Q423026 . } UNION \",\n    \"{ ?work wdt:P57 wd:Q423026 . }\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P50 wd:Q1342698 . } UNION { ?work wdt:P57 wd:Q1342698 . } UNION { ?work wdt:P50 wd:Q1342700 . } UNION { ?work wdt:P57 wd:Q1342700 . } UNION { ?work wdt:P50 wd:Q6159869 . } UNION { ?work wdt:P57 wd:Q6159869 . } UNION { ?work wdt:P50 wd:Q423026 . } UNION { ?work wdt:P57 wd:Q423026 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ wd:Q16198328 wdt:P57 ?work. } UNION \",\n        \"{ wd:Q4679987 wdt:P57 ?work. } UNION \",\n        \"{ wd:Q4207234 wdt:P57 ?work. } UNION \",\n        \"{ wd:Q1291210 wdt:P57 ?work. } UNION \",\n        \"{ wd:Q16198328 wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q4679987 wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q4207234 wdt:P1040 ?work. } UNION \",\n        \"{ wd:Q1291210 wdt:P1040 ?work. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { wd:Q16198328 wdt:P57 ?work. } UNION { wd:Q4679987 wdt:P57 ?work. } UNION { wd:Q4207234 wdt:P57 ?work. } UNION { wd:Q1291210 wdt:P57 ?work. } UNION { wd:Q16198328 wdt:P1040 ?work. } UNION { wd:Q4679987 wdt:P1040 ?work. } UNION { wd:Q4207234 wdt:P1040 ?work. } UNION { wd:Q1291210 wdt:P1040 ?work. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource WHERE {\",\n    \"{ ?resource kg:6483 kg:1102 . } UNION \",\n    \"{ ?resource kg:6483 kg:9172 . } UNION \",\n    \"{ ?resource kg:6483 kg:8606 . } UNION \",\n    \"{ ?resource kg:6483 kg:4625 . } UNION \",\n    \"{ ?resource kg:8022 kg:1102 . } UNION \",\n    \"{ ?resource kg:8022 kg:9172 . } UNION \",\n    \"{ ?resource kg:8022 kg:8606 . } UNION \",\n    \"{ ?resource kg:8022 kg:4625 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:6483 kg:1102 . } UNION { ?resource kg:6483 kg:9172 . } UNION { ?resource kg:6483 kg:8606 . } UNION { ?resource kg:6483 kg:4625 . } UNION { ?resource kg:8022 kg:1102 . } UNION { ?resource kg:8022 kg:9172 . } UNION { ?resource kg:8022 kg:8606 . } UNION { ?resource kg:8022 kg:4625 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P31 wd:Q24857920 .}\",\n      \"{?resource wdt:P57 wd:Q650157 .}\",\n      \"{?resource wdt:P57 wd:Q189691 .}\",\n      \"{?resource wdt:P57 wd:Q432967 .}\",\n      \"{?resource wdt:P57 wd:Q308768 .}\",\n      \"{?resource wdt:P58 wd:Q650157 .}\",\n      \"{?resource wdt:P58 wd:Q189691 .}\",\n      \"{?resource wdt:P58 wd:Q432967 .}\",\n      \"{?resource wdt:P58 wd:Q308768 .}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P31 wd:Q24857920 .} {?resource wdt:P57 wd:Q650157 .} {?resource wdt:P57 wd:Q189691 .} {?resource wdt:P57 wd:Q432967 .} {?resource wdt:P57 wd:Q308768 .} {?resource wdt:P58 wd:Q650157 .} {?resource wdt:P58 wd:Q189691 .} {?resource wdt:P58 wd:Q432967 .} {?resource wdt:P58 wd:Q308768 .} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1137372 wdt:P57 ?director . } UNION { wd:Q1137372 wdt:P58 ?screenwriter . }\",\n        \"VALUES (?person) {(wd:Q47284)(wd:Q2838329)(wd:Q3772)(wd:Q549956)}\",\n        \"{ ?director wdt:P57 ?person . } UNION { ?screenwriter wdt:P58 ?person . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1137372 wdt:P57 ?director . } UNION { wd:Q1137372 wdt:P58 ?screenwriter . } VALUES (?person) {(wd:Q47284)(wd:Q2838329)(wd:Q3772)(wd:Q549956)} { ?director wdt:P57 ?person . } UNION { ?screenwriter wdt:P58 ?person . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5595 kg:0937 kg:9620 . } UNION \",\n        \"{ kg:5595 kg:5595 kg:9620 . } UNION \",\n        \"{ kg:2759 kg:0937 kg:9620 . } UNION \",\n        \"{ kg:2759 kg:5595 kg:9620 . } UNION \",\n        \"{ kg:8047 kg:0937 kg:9620 . } UNION \",\n        \"{ kg:8047 kg:5595 kg:9620 . } UNION \",\n        \"{ kg:2202 kg:0937 kg:9620 . } UNION \",\n        \"{ kg:2202 kg:5595 kg:9620 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5595 kg:0937 kg:9620 . } UNION { kg:5595 kg:5595 kg:9620 . } UNION { kg:2759 kg:0937 kg:9620 . } UNION { kg:2759 kg:5595 kg:9620 . } UNION { kg:8047 kg:0937 kg:9620 . } UNION { kg:8047 kg:5595 kg:9620 . } UNION { kg:2202 kg:0937 kg:9620 . } UNION { kg:2202 kg:5595 kg:9620 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q106593487 wdt:P57 ?director . } UNION { wd:Q106593487 wdt:P162 ?producer . }\",\n      \"VALUES (?person) {(wd:Q7648589) (wd:Q215627) (wd:Q5116079) (wd:Q35498)}\",\n      \"{ ?director wdt:P31 wd:Q5 . } UNION { ?producer wdt:P31 wd:Q5 . }\",\n      \"?person wdt:P31 wd:Q5 ; wdt:P279* wd:Q6625963 .\",\n      \"BIND(IF(BOUND(?director), ?director, ?producer) AS ?resource)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q106593487 wdt:P57 ?director . } UNION { wd:Q106593487 wdt:P162 ?producer . } VALUES (?person) {(wd:Q7648589) (wd:Q215627) (wd:Q5116079) (wd:Q35498)} { ?director wdt:P31 wd:Q5 . } UNION { ?producer wdt:P31 wd:Q5 . } ?person wdt:P31 wd:Q5 ; wdt:P279* wd:Q6625963 . BIND(IF(BOUND(?director), ?director, ?producer) AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q40220 wdt:P57|wdt:P162 ?resource. } UNION \",\n        \"{ wd:Q117392 wdt:P57|wdt:P162 ?resource. } UNION \",\n        \"{ wd:Q5127380 wdt:P57|wdt:P162 ?resource. } UNION \",\n        \"{ wd:Q4235 wdt:P57|wdt:P162 ?resource. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q40220 wdt:P57|wdt:P162 ?resource. } UNION { wd:Q117392 wdt:P57|wdt:P162 ?resource. } UNION { wd:Q5127380 wdt:P57|wdt:P162 ?resource. } UNION { wd:Q4235 wdt:P57|wdt:P162 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9356 kg:1096 ?resource . } UNION \",\n        \"{ kg:9356 kg:6682 ?resource . } UNION \",\n        \"{ kg:5093 kg:1096 ?resource . } UNION \",\n        \"{ kg:5093 kg:6682 ?resource . } UNION \",\n        \"{ kg:5307 kg:1096 ?resource . } UNION \",\n        \"{ kg:5307 kg:6682 ?resource . } UNION \",\n        \"{ kg:2703 kg:1096 ?resource . } UNION \",\n        \"{ kg:2703 kg:6682 ?resource . }\",\n      \"FILTER (?resource = kg:9028) }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9356 kg:1096 ?resource . } UNION { kg:9356 kg:6682 ?resource . } UNION { kg:5093 kg:1096 ?resource . } UNION { kg:5093 kg:6682 ?resource . } UNION { kg:5307 kg:1096 ?resource . } UNION { kg:5307 kg:6682 ?resource . } UNION { kg:2703 kg:1096 ?resource . } UNION { kg:2703 kg:6682 ?resource . } FILTER (?resource = kg:9028) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q5398426 .\",\n      \"?work wdt:P50 wd:Q37985 .\",\n      \"?work wdt:P162 wd:Q37985 .\",\n      \"?work wdt:P272 wd:Q37985 .\",\n      \"?work wdt:P1040 wd:Q37985 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q5398426 . ?work wdt:P50 wd:Q37985 . ?work wdt:P162 wd:Q37985 . ?work wdt:P272 wd:Q37985 . ?work wdt:P1040 wd:Q37985 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q17738"]]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"?work wdt:P58 wd:Q38222 .\",\n        \"?work wdt:P1040 wd:Q38222 .\",\n        \"?work wdt:P162 wd:Q38222 .\",\n        \"?work wdt:P1431 wd:Q38222 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q38222 . ?work wdt:P1040 wd:Q38222 . ?work wdt:P162 wd:Q38222 . ?work wdt:P1431 wd:Q38222 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q17738"]], "gold": [["wd:Q17738"]]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{?work kg:9266 kg:0613.} UNION \",\n        \"{?work kg:3493 kg:0613.} UNION \",\n        \"{?work kg:5643 kg:0613.} UNION \",\n        \"{?work kg:8870 kg:0613.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { {?work kg:9266 kg:0613.} UNION {?work kg:3493 kg:0613.} UNION {?work kg:5643 kg:0613.} UNION {?work kg:8870 kg:0613.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q17738"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?writer WHERE {\",\n    \"?writer wdt:P31 wd:Q5 .\",\n    \"?writer wdt:P50 wd:Q274698, wd:Q274699, wd:Q274700 .\",\n    \"?writer wdt:P1037 wd:Q1021179 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q5 . ?writer wdt:P50 wd:Q274698, wd:Q274699, wd:Q274700 . ?writer wdt:P1037 wd:Q1021179 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P58 wd:Q972787.} UNION \",\n        \"{?resource wdt:P1040 wd:Q972787.} UNION \",\n        \"{?resource wdt:P58 wd:Q3141131.} UNION \",\n        \"{?resource wdt:P1040 wd:Q3141131.} UNION \",\n        \"{?resource wdt:P58 wd:Q672061.} UNION \",\n        \"{?resource wdt:P1040 wd:Q672061.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P58 wd:Q972787.} UNION {?resource wdt:P1040 wd:Q972787.} UNION {?resource wdt:P58 wd:Q3141131.} UNION {?resource wdt:P1040 wd:Q3141131.} UNION {?resource wdt:P58 wd:Q672061.} UNION {?resource wdt:P1040 wd:Q672061.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:3353 kg:2653.} UNION \",\n        \"{?resource kg:3353 kg:7573.} UNION \",\n        \"{?resource kg:3353 kg:2627.} UNION \",\n        \"{?resource kg:5303 kg:2653.} UNION \",\n        \"{?resource kg:5303 kg:7573.} UNION \",\n        \"{?resource kg:5303 kg:2627.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:3353 kg:2653.} UNION {?resource kg:3353 kg:7573.} UNION {?resource kg:3353 kg:2627.} UNION {?resource kg:5303 kg:2653.} UNION {?resource kg:5303 kg:7573.} UNION {?resource kg:5303 kg:2627.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867 ;\",\n      \"wdt:P50 wd:Q967240 ;\",\n      \"wdt:P162 wd:Q1065904 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867 ;\",\n      \"wdt:P50 wd:Q1065904 ;\",\n      \"wdt:P162 wd:Q967240 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867 ;\",\n      \"wdt:P50 wd:Q1065904 ;\",\n      \"wdt:P162 wd:Q1065904 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867 ;\",\n      \"wdt:P50 wd:Q1065904 ;\",\n      \"wdt:P162 wd:Q1065904 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q24867 ; wdt:P50 wd:Q967240 ; wdt:P162 wd:Q1065904 . } { ?resource wdt:P31 wd:Q24867 ; wdt:P50 wd:Q1065904 ; wdt:P162 wd:Q967240 . } { ?resource wdt:P31 wd:Q24867 ; wdt:P50 wd:Q1065904 ; wdt:P162 wd:Q1065904 . } { ?resource wdt:P31 wd:Q24867 ; wdt:P50 wd:Q1065904 ; wdt:P162 wd:Q1065904 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q819109 wdt:P1431 wd:Q81520 . } UNION \",\n        \"{ wd:Q819109 wdt:P674 wd:Q81520 . } UNION \",\n        \"{ wd:Q819109 wdt:P1431 wd:Q1969128 . } UNION \",\n        \"{ wd:Q819109 wdt:P674 wd:Q1969128 . } UNION \",\n        \"{ wd:Q819109 wdt:P1532 wd:Q1969128 . } UNION \",\n        \"{ wd:Q819109 wdt:P1431 wd:Q381545 . } UNION \",\n        \"{ wd:Q819109 wdt:P674 wd:Q381545 . } UNION \",\n        \"{ wd:Q819109 wdt:P1532 wd:Q381545 . } UNION \",\n        \"{ wd:Q819109 wdt:P162 wd:Q1295611 . } UNION \",\n        \"{ wd:Q819109 wdt:P1431 wd:Q1295611 . } UNION \",\n        \"{ wd:Q819109 wdt:P674 wd:Q1295611 . } UNION \",\n        \"{ wd:Q819109 wdt:P1532 wd:Q1295611 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q819109 wdt:P1431 wd:Q81520 . } UNION { wd:Q819109 wdt:P674 wd:Q81520 . } UNION { wd:Q819109 wdt:P1431 wd:Q1969128 . } UNION { wd:Q819109 wdt:P674 wd:Q1969128 . } UNION { wd:Q819109 wdt:P1532 wd:Q1969128 . } UNION { wd:Q819109 wdt:P1431 wd:Q381545 . } UNION { wd:Q819109 wdt:P674 wd:Q381545 . } UNION { wd:Q819109 wdt:P1532 wd:Q381545 . } UNION { wd:Q819109 wdt:P162 wd:Q1295611 . } UNION { wd:Q819109 wdt:P1431 wd:Q1295611 . } UNION { wd:Q819109 wdt:P674 wd:Q1295611 . } UNION { wd:Q819109 wdt:P1532 wd:Q1295611 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2187 kg:0533|kg:5056 kg:5622 . } UNION \",\n        \"{ kg:1278 kg:0533|kg:5056 kg:5622 . } UNION \",\n        \"{ kg:9767 kg:0533|kg:5056 kg:5622 . } UNION \",\n        \"{ kg:7661 kg:0533|kg:5056 kg:5622 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2187 kg:0533|kg:5056 kg:5622 . } UNION { kg:1278 kg:0533|kg:5056 kg:5622 . } UNION { kg:9767 kg:0533|kg:5056 kg:5622 . } UNION { kg:7661 kg:0533|kg:5056 kg:5622 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q134207 wdt:P50 ?writer .\",\n    \"wd:Q134207 wdt:P86 ?editor .\",\n    \"wd:Q134207 wdt:P162 ?producer .\",\n    \"wd:Q134207 wdt:P279 ?executiveProducer .\",\n    \"VALUES (?writer ?editor ?producer ?executiveProducer) {(wd:Q135418) }\",\n    \"BIND(wd:Q134207 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q134207 wdt:P50 ?writer . wd:Q134207 wdt:P86 ?editor . wd:Q134207 wdt:P162 ?producer . wd:Q134207 wdt:P279 ?executiveProducer . VALUES (?writer ?editor ?producer ?executiveProducer) {(wd:Q135418) } BIND(wd:Q134207 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q854990 wdt:P58 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P123 wd:Q8006 . } UNION\",\n        \"{ wd:Q854990 wdt:P162 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P1431 wd:Q8006 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q854990 wdt:P58 wd:Q8006 . } UNION { wd:Q854990 wdt:P123 wd:Q8006 . } UNION { wd:Q854990 wdt:P162 wd:Q8006 . } UNION { wd:Q854990 wdt:P1431 wd:Q8006 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6880 kg:3149 kg:6049 kg:3712 kg:0779 kg:1415 kg:9626 }\",\n          \"?resource dbo:writer|dbo:editor|dbo:producer|dbo:executiveProducer|dbo:productionCompany ?entity .\",\n        \"FILTER (?entity IN (kg:6880, kg:3149, kg:6049, kg:3712, kg:0779, kg:1415, kg:9626)) .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:6880 kg:3149 kg:6049 kg:3712 kg:0779 kg:1415 kg:9626 } ?resource dbo:writer|dbo:editor|dbo:producer|dbo:executiveProducer|dbo:productionCompany ?entity . FILTER (?entity IN (kg:6880, kg:3149, kg:6049, kg:3712, kg:0779, kg:1415, kg:9626)) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?project WHERE {\",\n      \"{ ?project wdt:P57 dbr:Jørgen_Leth . } UNION \",\n      \"{ ?project wdt:P58 dbr:Jørgen_Leth . } UNION \",\n      \"{ ?project wdt:P639 dbr:Jørgen_Leth . } UNION \",\n      \"{ ?project wdt:P57 dbr:Jens_Jørgen_Thorsen . } UNION \",\n      \"{ ?project wdt:P58 dbr:Jens_Jørgen_Thorsen . } UNION \",\n      \"{ ?project wdt:P639 dbr:Jens_Jørgen_Thorsen . } UNION \",\n      \"{ ?project wdt:P57 dbr:Ole_John . } UNION \",\n      \"{ ?project wdt:P58 dbr:Ole_John . } UNION \",\n      \"{ ?project wdt:P639 dbr:Ole_John . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { { ?project wdt:P57 dbr:Jørgen_Leth . } UNION { ?project wdt:P58 dbr:Jørgen_Leth . } UNION { ?project wdt:P639 dbr:Jørgen_Leth . } UNION { ?project wdt:P57 dbr:Jens_Jørgen_Thorsen . } UNION { ?project wdt:P58 dbr:Jens_Jørgen_Thorsen . } UNION { ?project wdt:P639 dbr:Jens_Jørgen_Thorsen . } UNION { ?project wdt:P57 dbr:Ole_John . } UNION { ?project wdt:P58 dbr:Ole_John . } UNION { ?project wdt:P639 dbr:Ole_John . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?project WHERE {\",\n        \"{?project wdt:P57 wd:Q562108.} UNION \",\n        \"{?project wdt:P31 wd:Q11424.} UNION \",\n        \"{?project wdt:P58 wd:Q562108.} UNION \",\n        \"{?project wdt:P1040 wd:Q562108.} UNION \",\n        \"{?project wdt:P57 wd:Q35979475.} UNION \",\n        \"{?project wdt:P58 wd:Q35979475.} UNION \",\n        \"{?project wdt:P1040 wd:Q35979475.} UNION \",\n        \"{?project wdt:P57 wd:Q1687239.} UNION \",\n        \"{?project wdt:P58 wd:Q1687239.} UNION \",\n        \"{?project wdt:P1040 wd:Q1687239.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { {?project wdt:P57 wd:Q562108.} UNION {?project wdt:P31 wd:Q11424.} UNION {?project wdt:P58 wd:Q562108.} UNION {?project wdt:P1040 wd:Q562108.} UNION {?project wdt:P57 wd:Q35979475.} UNION {?project wdt:P58 wd:Q35979475.} UNION {?project wdt:P1040 wd:Q35979475.} UNION {?project wdt:P57 wd:Q1687239.} UNION {?project wdt:P58 wd:Q1687239.} UNION {?project wdt:P1040 wd:Q1687239.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q18428"], ["wd:Q106428"], ["wd:Q25858"], ["wd:Q75546"], ["wd:Q72162"], ["wd:Q2632905"], ["wd:Q49003"], ["wd:Q82297"], ["wd:Q54991"], ["wd:Q73843"], ["wd:Q123558"], ["wd:Q118976"], ["wd:Q25454"], ["wd:Q29600"], ["wd:Q15061875"], ["wd:Q40187"], ["wd:Q19303"], ["wd:Q24515"], ["wd:Q39946"], ["wd:Q50941"], ["wd:Q29327"], ["wd:Q59595"], ["wd:Q20728974"], ["wd:Q25513"], ["wd:Q28193"], ["wd:Q34414"], ["wd:Q43408"], ["wd:Q93432"], ["wd:Q3715598"], ["wd:Q127021"], ["wd:Q125925"], ["wd:Q54993"], ["wd:Q59318"], ["wd:Q77151"], ["wd:Q119704"], ["wd:Q72168"], ["wd:Q59503"], ["wd:Q34499"], ["wd:Q52021"], ["wd:Q94106"], ["wd:Q55002"], ["wd:Q54990"], ["wd:Q80437"], ["wd:Q20729306"], ["wd:Q117359"], ["wd:Q117378"], ["wd:Q24910"], ["wd:Q115844"], ["wd:Q117090"], ["wd:Q104137"], ["wd:Q31786"], ["wd:Q42198"], ["wd:Q45384"], ["wd:Q71847"], ["wd:Q74958"], ["wd:Q20495792"], ["wd:Q93701"], ["wd:Q109110"], ["wd:Q11621"], ["wd:Q93459"], ["wd:Q76582"], ["wd:Q53096"], ["wd:Q117698"], ["wd:Q54975"], ["wd:Q80538"], ["wd:Q17450"], ["wd:Q12337293"], ["wd:Q593"], ["wd:Q116585"], ["wd:Q59530"], ["wd:Q49396"], ["wd:Q61872"], ["wd:Q26644"], ["wd:Q53115"], ["wd:Q3544221"], ["wd:Q107761"], ["wd:Q93868"], ["wd:Q114435"], ["wd:Q114819"], ["wd:Q24075"], ["wd:Q94133"], ["wd:Q20496466"], ["wd:Q112365"], ["wd:Q114665"], ["wd:Q75569"], ["wd:Q20729354"], ["wd:Q82224"], ["wd:Q84022"], ["wd:Q31198"], ["wd:Q84006"], ["wd:Q53719"], ["wd:Q74535"], ["wd:Q102244"], ["wd:Q72172"], ["wd:Q24196"], ["wd:Q32780"], ["wd:Q80227"], ["wd:Q112744"], ["wd:Q82155"], ["wd:Q48984"], ["wd:Q75000"], ["wd:Q94284"], ["wd:Q41132"], ["wd:Q60021"], ["wd:Q117934"], ["wd:Q80660"], ["wd:Q39960"], ["wd:Q127542"], ["wd:Q60506"], ["wd:Q125404"], ["wd:Q25617"], ["wd:Q113428"], ["wd:Q28936"], ["wd:Q31864"], ["wd:Q83612"], ["wd:Q19827613"], ["wd:Q27149"], ["wd:Q126974"], ["wd:Q126266"], ["wd:Q12018"], ["wd:Q20456"], ["wd:Q82321"], ["wd:Q27204"], ["wd:Q19358"], ["wd:Q38235"], ["wd:Q62730"], ["wd:Q123097"], ["wd:Q25157"], ["wd:Q72330"], ["wd:Q39956"], ["wd:Q29603"], ["wd:Q93591"], ["wd:Q93670"], ["wd:Q54992"], ["wd:Q20729025"], ["wd:Q20728399"], ["wd:Q36169"], ["wd:Q84064"], ["wd:Q33554333"], ["wd:Q32734"], ["wd:Q117696"], ["wd:Q125772"], ["wd:Q64148"], ["wd:Q72925"], ["wd:Q122623"], ["wd:Q127421"], ["wd:Q128320"], ["wd:Q13908"], ["wd:Q125058"], ["wd:Q59426"], ["wd:Q108946"], ["wd:Q33545283"], ["wd:Q82223"], ["wd:Q127011"], ["wd:Q109767"], ["wd:Q39975"], ["wd:Q25491"], ["wd:Q82374"], ["wd:Q20742993"], ["wd:Q113171"], ["wd:Q11618"], ["wd:Q19827198"], ["wd:Q22432"], ["wd:Q71960"], ["wd:Q24154"], ["wd:Q115597"], ["wd:Q54984"], ["wd:Q33191"], ["wd:Q59502"], ["wd:Q19352"], ["wd:Q118707"], ["wd:Q127129"], ["wd:Q72450"], ["wd:Q116171"], ["wd:Q117315"], ["wd:Q8594"], ["wd:Q40074"], ["wd:Q18444"], ["wd:Q59026"], ["wd:Q59610"], ["wd:Q107724"], ["wd:Q37762878"], ["wd:Q54966"], ["wd:Q59931"], ["wd:Q76479"], ["wd:Q20495867"], ["wd:Q59572"], ["wd:Q18437"], ["wd:Q28891"], ["wd:Q63278"], ["wd:Q126896"], ["wd:Q35951"], ["wd:Q123742"], ["wd:Q33548598"], ["wd:Q81597"], ["wd:Q50929"], ["wd:Q68029"], ["wd:Q39999"], ["wd:Q74579"], ["wd:Q60016"], ["wd:Q18423"], ["wd:Q38815"], ["wd:Q49903"], ["wd:Q31791"], ["wd:Q25994"], ["wd:Q26801"], ["wd:Q83739"], ["wd:Q73451"], ["wd:Q39422"], ["wd:Q126370"], ["wd:Q79503"], ["wd:Q102235"], ["wd:Q24953"], ["wd:Q25069"], ["wd:Q47075"], ["wd:Q108297"], ["wd:Q82388"], ["wd:Q62665"], ["wd:Q42051"], ["wd:Q56864"], ["wd:Q51743"], ["wd:Q116187"], ["wd:Q122652"], ["wd:Q114115"], ["wd:Q93539"], ["wd:Q54980"], ["wd:Q38970"], ["wd:Q23871"], ["wd:Q106316"], ["wd:Q125076"], ["wd:Q56768"], ["wd:Q112572"], ["wd:Q59566"], ["wd:Q102754"], ["wd:Q32228"], ["wd:Q62163"], ["wd:Q59721"], ["wd:Q77009"], ["wd:Q18964"], ["wd:Q36055"], ["wd:Q25460"], ["wd:Q117311056"], ["wd:Q54989"], ["wd:Q4479"], ["wd:Q18405"], ["wd:Q54967"], ["wd:Q93443"], ["wd:Q47654"], ["wd:Q56862"], ["wd:Q71920"], ["wd:Q19356"], ["wd:Q62513"], ["wd:Q64146"], ["wd:Q123166"], ["wd:Q116349"], ["wd:Q26751"], ["wd:Q18967"], ["wd:Q75641"], ["wd:Q46044"], ["wd:Q50714"], ["wd:Q49498"], ["wd:Q61955"], ["wd:Q108006"], ["wd:Q108525"], ["wd:Q40119"], ["wd:Q115512"], ["wd:Q20728839"], ["wd:Q124697"], ["wd:Q20728537"], ["wd:Q46361"], ["wd:Q102225"], ["wd:Q127414"], ["wd:Q51732"], ["wd:Q118713"], ["wd:Q115214"], ["wd:Q34643"], ["wd:Q54973"], ["wd:Q54979"], ["wd:Q124701"], ["wd:Q18439"], ["wd:Q58354"], ["wd:Q38297"], ["wd:Q33148"], ["wd:Q46916"], ["wd:Q73583"], ["wd:Q20728648"], ["wd:Q58439"], ["wd:Q116468"], ["wd:Q93721"], ["wd:Q83703"], ["wd:Q33139"], ["wd:Q33189"], ["wd:Q60818"], ["wd:Q82937"], ["wd:Q114108"], ["wd:Q60296"], ["wd:Q113149"], ["wd:Q18418"], ["wd:Q6074"], ["wd:Q59249"], ["wd:Q73457"], ["wd:Q28776"], ["wd:Q33562123"], ["wd:Q12331250"], ["wd:Q18331"], ["wd:Q33109"], ["wd:Q19089"], ["wd:Q81995"], ["wd:Q54987"], ["wd:Q83542"], ["wd:Q106506"], ["wd:Q32424"], ["wd:Q54968"], ["wd:Q45839"], ["wd:Q18416"], ["wd:Q112635"], ["wd:Q20728983"], ["wd:Q118829"], ["wd:Q81224"], ["wd:Q29871"], ["wd:Q81487"], ["wd:Q104814"], ["wd:Q50962"], ["wd:Q74443"], ["wd:Q20493791"], ["wd:Q72962"], ["wd:Q63991"], ["wd:Q107270"], ["wd:Q109116"], ["wd:Q59498"], ["wd:Q50861"], ["wd:Q45988"], ["wd:Q72321"], ["wd:Q45388"], ["wd:Q80409"], ["wd:Q59240"], ["wd:Q115890"], ["wd:Q19827552"], ["wd:Q118914"], ["wd:Q4430"], ["wd:Q126261"], ["wd:Q24258"], ["wd:Q82989"], ["wd:Q108586"], ["wd:Q27128"], ["wd:Q81145"], ["wd:Q110203"], ["wd:Q24151"], ["wd:Q107226"], ["wd:Q115210"], ["wd:Q18407"], ["wd:Q94478"], ["wd:Q74671"], ["wd:Q120105"], ["wd:Q5590"], ["wd:Q80509"], ["wd:Q20652996"], ["wd:Q63366"], ["wd:Q126699"], ["wd:Q46386"], ["wd:Q58118"], ["wd:Q60792"], ["wd:Q94033"], ["wd:Q25005"], ["wd:Q25760"], ["wd:Q61874"], ["wd:Q72273"], ["wd:Q38561"], ["wd:Q114876"], ["wd:Q26970"], ["wd:Q64211"], ["wd:Q115537"], ["wd:Q23892"], ["wd:Q60362"], ["wd:Q23771"], ["wd:Q54974"], ["wd:Q36739"], ["wd:Q64110"], ["wd:Q27751"], ["wd:Q81037"], ["wd:Q35738"], ["wd:Q33671"], ["wd:Q48734"], ["wd:Q93853"], ["wd:Q94347"], ["wd:Q20495869"], ["wd:Q17738"], ["wd:Q115394"], ["wd:Q59501"], ["wd:Q46609"], ["wd:Q4659909"], ["wd:Q59722"], ["wd:Q53481"], ["wd:Q20728738"], ["wd:Q30931"], ["wd:Q54986"], ["wd:Q59423"], ["wd:Q18397"], ["wd:Q127439"], ["wd:Q113052"], ["wd:Q124246"], ["wd:Q55020"], ["wd:Q32217"], ["wd:Q24871"], ["wd:Q59687"], ["wd:Q106440"], ["wd:Q54985"], ["wd:Q8907"], ["wd:Q64017"], ["wd:Q102438"], ["wd:Q40085"], ["wd:Q83630"], ["wd:Q18401"], ["wd:Q83505"], ["wd:Q71978"], ["wd:Q127367"], ["wd:Q106571"], ["wd:Q73028"], ["wd:Q20729186"], ["wd:Q73627"], ["wd:Q62746"], ["wd:Q110278"], ["wd:Q4733"], ["wd:Q32686"], ["wd:Q110397"], ["wd:Q29446"], ["wd:Q59346"], ["wd:Q114415"], ["wd:Q19827656"], ["wd:Q111772"], ["wd:Q31148"], ["wd:Q56217"], ["wd:Q59789"], ["wd:Q25598"], ["wd:Q63009"], ["wd:Q80379"], ["wd:Q48980"], ["wd:Q32786"], ["wd:Q107894"], ["wd:Q32241"], ["wd:Q18442"], ["wd:Q45794"], ["wd:Q126357"], ["wd:Q116426"], ["wd:Q61044114"], ["wd:Q127632"], ["wd:Q45273"], ["wd:Q19311"], ["wd:Q109135"], ["wd:Q41854"], ["wd:Q51173"], ["wd:Q19827249"], ["wd:Q127055"], ["wd:Q59495"], ["wd:Q54978"], ["wd:Q127045"], ["wd:Q110043"], ["wd:Q59531"], ["wd:Q49398"], ["wd:Q20494666"], ["wd:Q28267"], ["wd:Q16516"], ["wd:Q44085"], ["wd:Q50937"], ["wd:Q116068"], ["wd:Q105993"], ["wd:Q4739"], ["wd:Q46717"], ["wd:Q126800"], ["wd:Q105598"], ["wd:Q40071"], ["wd:Q43228"], ["wd:Q118114"], ["wd:Q120626"], ["wd:Q25139"], ["wd:Q40182"], ["wd:Q113549"], ["wd:Q111655"], ["wd:Q46477"], ["wd:Q32910"], ["wd:Q25188"], ["wd:Q74504"], ["wd:Q72090"], ["wd:Q59543"], ["wd:Q80204"], ["wd:Q1358956"], ["wd:Q45394"], ["wd:Q25518"], ["wd:Q106182"], ["wd:Q94792"], ["wd:Q35725"], ["wd:Q54274"], ["wd:Q15618"], ["wd:Q2875"], ["wd:Q26665"], ["wd:Q29313"], ["wd:Q45987"], ["wd:Q59408"], ["wd:Q29733"], ["wd:Q64151"], ["wd:Q83730"], ["wd:Q39970"], ["wd:Q33530923"], ["wd:Q107167"], ["wd:Q25468"], ["wd:Q19320"], ["wd:Q33131"], ["wd:Q41315"], ["wd:Q8547"], ["wd:Q59084"], ["wd:Q93564"], ["wd:Q53095"], ["wd:Q83649"], ["wd:Q3242"], ["wd:Q8328"], ["wd:Q25521"], ["wd:Q74437"], ["wd:Q32790"], ["wd:Q81044"], ["wd:Q2201"], ["wd:Q33548639"], ["wd:Q39969"], ["wd:Q54981"], ["wd:Q42047"], ["wd:Q43900"], ["wd:Q61696"], ["wd:Q43838"], ["wd:Q126376"], ["wd:Q18411"], ["wd:Q80959"], ["wd:Q125672"], ["wd:Q54994"], ["wd:Q112329"], ["wd:Q4005"], ["wd:Q59073"], ["wd:Q118011"], ["wd:Q127427"], ["wd:Q38365"], ["wd:Q18321"], ["wd:Q45679"], ["wd:Q41483"], ["wd:Q39409"], ["wd:Q25600"], ["wd:Q70069"], ["wd:Q86427"], ["wd:Q82426"], ["wd:Q32535"], ["wd:Q23395"], ["wd:Q26162"], ["wd:Q29867"], ["wd:Q74315"], ["wd:Q24815"], ["wd:Q29355"], ["wd:Q94348"], ["wd:Q126183"], ["wd:Q126281"], ["wd:Q108543"], ["wd:Q127536"], ["wd:Q123259"], ["wd:Q25057"], ["wd:Q45860"], ["wd:Q46918"], ["wd:Q23896"], ["wd:Q59438"], ["wd:Q94686"], ["wd:Q127430"], ["wd:Q29697"], ["wd:Q64173"], ["wd:Q25471"], ["wd:Q49006"], ["wd:Q74014"], ["wd:Q60487"], ["wd:Q33598262"], ["wd:Q54971"], ["wd:Q28289"], ["wd:Q112747"], ["wd:Q18409"], ["wd:Q115385"], ["wd:Q7216"], ["wd:Q25552"], ["wd:Q4444"], ["wd:Q44396"], ["wd:Q47221"], ["wd:Q112461"], ["wd:Q110206"], ["wd:Q25835"], ["wd:Q117988"], ["wd:Q46533"], ["wd:Q63516"], ["wd:Q64083"], ["wd:Q112420"], ["wd:Q116845"], ["wd:Q54976"], ["wd:Q74643"], ["wd:Q80608"], ["wd:Q18402"], ["wd:Q83005"], ["wd:Q118985"], ["wd:Q82327"], ["wd:Q24980"], ["wd:Q51750"], ["wd:Q73651"], ["wd:Q26060"], ["wd:Q120484"], ["wd:Q19355"], ["wd:Q93500"], ["wd:Q127267"], ["wd:Q25519"], ["wd:Q124358"], ["wd:Q14320"], ["wd:Q126387"], ["wd:Q61875"], ["wd:Q19827265"], ["wd:Q61953"], ["wd:Q39005"], ["wd:Q24618"], ["wd:Q50961"], ["wd:Q115202"], ["wd:Q128187"], ["wd:Q31971"], ["wd:Q18421"], ["wd:Q80246"], ["wd:Q53105"], ["wd:Q18395"], ["wd:Q80507"], ["wd:Q25086"], ["wd:Q59653"], ["wd:Q63980"], ["wd:Q116905"], ["wd:Q126257"], ["wd:Q24933"], ["wd:Q83594"], ["wd:Q119889"], ["wd:Q112562"], ["wd:Q3208"], ["wd:Q49018"], ["wd:Q19322"], ["wd:Q125494"], ["wd:Q112616"], ["wd:Q18415"], ["wd:Q18429"], ["wd:Q31540"], ["wd:Q27338"], ["wd:Q74568"], ["wd:Q3997"], ["wd:Q117031"], ["wd:Q121810"], ["wd:Q126245"], ["wd:Q81789"], ["wd:Q40115"], ["wd:Q94943"], ["wd:Q105031"], ["wd:Q122713"], ["wd:Q45268"], ["wd:Q83767"], ["wd:Q12319701"], ["wd:Q43836"], ["wd:Q47703"], ["wd:Q63026"], ["wd:Q107914"], ["wd:Q27536"], ["wd:Q595"], ["wd:Q20653260"], ["wd:Q3589"], ["wd:Q115993"], ["wd:Q127665"], ["wd:Q53669"], ["wd:Q82847"], ["wd:Q80318"], ["wd:Q110138"], ["wd:Q45386"], ["wd:Q20729551"], ["wd:Q60794"], ["wd:Q80609"], ["wd:Q19827120"], ["wd:Q18399"], ["wd:Q93689"], ["wd:Q82413"], ["wd:Q18433"], ["wd:Q127897"], ["wd:Q61957"], ["wd:Q64144"], ["wd:Q112633"], ["wd:Q103474"], ["wd:Q20493693"], ["wd:Q93778"], ["wd:Q26391"], ["wd:Q115686"], ["wd:Q1365"], ["wd:Q27513"], ["wd:Q75539"], ["wd:Q80557"], ["wd:Q119526"], ["wd:Q126123"], ["wd:Q59317"], ["wd:Q49021"], ["wd:Q72002"], ["wd:Q74341"], ["wd:Q59534"], ["wd:Q20729285"], ["wd:Q91540"], ["wd:Q20757119"], ["wd:Q76827"], ["wd:Q25511"], ["wd:Q111788"], ["wd:Q116852"], ["wd:Q82949"], ["wd:Q44280"], ["wd:Q19827283"], ["wd:Q25539"], ["wd:Q19405"], ["wd:Q4941"], ["wd:Q3092"], ["wd:Q58109"], ["wd:Q24732"], ["wd:Q20495794"], ["wd:Q74750"], ["wd:Q25508"], ["wd:Q93622"], ["wd:Q106871"], ["wd:Q83656"], ["wd:Q93876"], ["wd:Q20728937"], ["wd:Q77013"], ["wd:Q82860"], ["wd:Q27343"], ["wd:Q16458"], ["wd:Q73279"], ["wd:Q33551705"], ["wd:Q126135"], ["wd:Q25524"], ["wd:Q23089"], ["wd:Q24911"], ["wd:Q48904"], ["wd:Q117464"], ["wd:Q25947"], ["wd:Q59567"], ["wd:Q47296"], ["wd:Q4657"], ["wd:Q115380"], ["wd:Q25482"], ["wd:Q29816"], ["wd:Q118739"], ["wd:Q83495"], ["wd:Q2345"], ["wd:Q43846"], ["wd:Q51757"], ["wd:Q25503"], ["wd:Q4815"], ["wd:Q126637"], ["wd:Q25466"], ["wd:Q51121"], ["wd:Q83789"], ["wd:Q105387"], ["wd:Q19069"], ["wd:Q16453"], ["wd:Q27411"], ["wd:Q41754"], ["wd:Q81898"], ["wd:Q112612"], ["wd:Q24585"], ["wd:Q116928"], ["wd:Q127376"], ["wd:Q24340"], ["wd:Q93741"], ["wd:Q115484"], ["wd:Q59634"], ["wd:Q126492"], ["wd:Q82352"], ["wd:Q44662"], ["wd:Q51737"], ["wd:Q72909"], ["wd:Q106819"], ["wd:Q76450263"], ["wd:Q126676"], ["wd:Q71861"], ["wd:Q20756682"], ["wd:Q59612"], ["wd:Q112477"], ["wd:Q32433"], ["wd:Q54982"], ["wd:Q74636"], ["wd:Q54983"], ["wd:Q44447"], ["wd:Q112831"], ["wd:Q86791"], ["wd:Q44935"], ["wd:Q113392"], ["wd:Q49410"], ["wd:Q115760"], ["wd:Q32303"], ["wd:Q26265"], ["wd:Q105624"], ["wd:Q75593"], ["wd:Q93512"], ["wd:Q115776"], ["wd:Q83791"], ["wd:Q103569"], ["wd:Q116734"], ["wd:Q19268"], ["wd:Q58972"], ["wd:Q60464"], ["wd:Q62976"], ["wd:Q73803"], ["wd:Q127760"], ["wd:Q46551"], ["wd:Q49729"], ["wd:Q4471"], ["wd:Q72276"], ["wd:Q112275"], ["wd:Q80289"], ["wd:Q25506"], ["wd:Q94286"], ["wd:Q18441"], ["wd:Q3187"], ["wd:Q5890"], ["wd:Q36190"], ["wd:Q25479"], ["wd:Q4536"], ["wd:Q31212"], ["wd:Q38226"], ["wd:Q20475"], ["wd:Q43925"], ["wd:Q46637"], ["wd:Q58553"], ["wd:Q28234"], ["wd:Q372"], ["wd:Q18954"], ["wd:Q74319"], ["wd:Q108745"], ["wd:Q26659"], ["wd:Q71785"], ["wd:Q127551"], ["wd:Q45692"], ["wd:Q76824"], ["wd:Q109331"], ["wd:Q93790"], ["wd:Q45672"], ["wd:Q107325"], ["wd:Q3998"], ["wd:Q46568"], ["wd:Q102448"], ["wd:Q126652"], ["wd:Q54970"], ["wd:Q18403"], ["wd:Q105702"], ["wd:Q38143"], ["wd:Q27178"], ["wd:Q51416"], ["wd:Q94922"], ["wd:Q19276"], ["wd:Q81845"], ["wd:Q105801"], ["wd:Q114076"], ["wd:Q119341"], ["wd:Q93774"], ["wd:Q82519"], ["wd:Q20494789"], ["wd:Q122113"], ["wd:Q84147"], ["wd:Q118375"], ["wd:Q32011"], ["wd:Q19827722"], ["wd:Q72325"], ["wd:Q52442"], ["wd:Q29658"], ["wd:Q20729238"], ["wd:Q43911"], ["wd:Q120231"], ["wd:Q16403"], ["wd:Q93750"], ["wd:Q77597"], ["wd:Q94448"], ["wd:Q109564"], ["wd:Q83623"], ["wd:Q18431"], ["wd:Q107940"], ["wd:Q73987448"], ["wd:Q58619"], ["wd:Q83103"], ["wd:Q126372"], ["wd:Q11593"], ["wd:Q28312"], ["wd:Q104123"], ["wd:Q116235"], ["wd:Q110354"], ["wd:Q126382"], ["wd:Q127250"], ["wd:Q19827405"], ["wd:Q45318"], ["wd:Q51734"], ["wd:Q73944"], ["wd:Q25043"], ["wd:Q59660"], ["wd:Q80617"], ["wd:Q12308456"], ["wd:Q116149"], ["wd:Q124612"], ["wd:Q28196"], ["wd:Q12340101"], ["wd:Q45304"], ["wd:Q16782"], ["wd:Q45793"], ["wd:Q110365"], ["wd:Q44686"], ["wd:Q51668"], ["wd:Q19827698"], ["wd:Q11928"], ["wd:Q60072"], ["wd:Q33544555"], ["wd:Q38486"], ["wd:Q50969"], ["wd:Q43968"], ["wd:Q59391"], ["wd:Q84220"], ["wd:Q113268"], ["wd:Q53703"], ["wd:Q61877"], ["wd:Q115749"], ["wd:Q44578"], ["wd:Q19393"]], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:0289 kg:0365.} UNION \",\n        \"{?resource kg:4737 kg:0365.} UNION \",\n        \"{?resource kg:7265 kg:0365.} UNION \",\n        \"{?resource kg:0289 kg:3287.} UNION \",\n        \"{?resource kg:4737 kg:3287.} UNION \",\n        \"{?resource kg:7265 kg:3287.} UNION \",\n        \"{?resource kg:0289 kg:4530.} UNION \",\n        \"{?resource kg:4737 kg:4530.} UNION \",\n        \"{?resource kg:7265 kg:4530.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:0289 kg:0365.} UNION {?resource kg:4737 kg:0365.} UNION {?resource kg:7265 kg:0365.} UNION {?resource kg:0289 kg:3287.} UNION {?resource kg:4737 kg:3287.} UNION {?resource kg:7265 kg:3287.} UNION {?resource kg:0289 kg:4530.} UNION {?resource kg:4737 kg:4530.} UNION {?resource kg:7265 kg:4530.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q386724; \",\n        \"wdt:P57 ?director; \",\n        \"wdt:P50 ?writer; \",\n        \"wdt:P98 ?editor. \",\n      \"{ ?director wdt:P31 wd:Q5382826 } UNION { ?director wdt:P31 wd:Q488205 } .\",\n      \"{ ?writer wdt:P31 wd:Q5382826 } UNION { ?writer wdt:P31 wd:Q488205 } .\",\n      \"{ ?editor wdt:P31 wd:Q5382826 } UNION { ?editor wdt:P31 wd:Q488205 } .\",\n      \"?director rdfs:label \\\"Ole John\\\"@en. \",\n      \"?writer rdfs:label \\\"Jørgen Leth\\\"@en. \",\n      \"?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q386724; wdt:P57 ?director; wdt:P50 ?writer; wdt:P98 ?editor. { ?director wdt:P31 wd:Q5382826 } UNION { ?director wdt:P31 wd:Q488205 } . { ?writer wdt:P31 wd:Q5382826 } UNION { ?writer wdt:P31 wd:Q488205 } . { ?editor wdt:P31 wd:Q5382826 } UNION { ?editor wdt:P31 wd:Q488205 } . ?director rdfs:label \"Ole John\"@en. ?writer rdfs:label \"Jørgen Leth\"@en. ?editor rdfs:label \"Jens Jørgen Thorsen\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{?work wdt:P57 wd:Q35979475.} UNION \",\n        \"{?work wdt:P57 wd:Q1687239.} UNION \",\n        \"{?work wdt:P57 wd:Q562108.} UNION \",\n        \"{?work wdt:P58 wd:Q35979475.} UNION \",\n        \"{?work wdt:P58 wd:Q1687239.} UNION \",\n        \"{?work wdt:P58 wd:Q562108.} UNION \",\n        \"{?work wdt:P1040 wd:Q35979475.} UNION \",\n        \"{?work wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?work wdt:P1040 wd:Q562108.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { {?work wdt:P57 wd:Q35979475.} UNION {?work wdt:P57 wd:Q1687239.} UNION {?work wdt:P57 wd:Q562108.} UNION {?work wdt:P58 wd:Q35979475.} UNION {?work wdt:P58 wd:Q1687239.} UNION {?work wdt:P58 wd:Q562108.} UNION {?work wdt:P1040 wd:Q35979475.} UNION {?work wdt:P1040 wd:Q1687239.} UNION {?work wdt:P1040 wd:Q562108.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?work WHERE {\",\n        \"{ ?work kg:9712 kg:5238 . } UNION \",\n        \"{ ?work kg:9712 kg:2197 . } UNION \",\n        \"{ ?work kg:9712 kg:7889 . } UNION \",\n        \"{ ?work kg:2466 kg:5238 . } UNION \",\n        \"{ ?work kg:2466 kg:2197 . } UNION \",\n        \"{ ?work kg:2466 kg:7889 . } UNION \",\n        \"{ ?work kg:9552 kg:5238 . } UNION \",\n        \"{ ?work kg:9552 kg:2197 . } UNION \",\n        \"{ ?work kg:9552 kg:7889 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { { ?work kg:9712 kg:5238 . } UNION { ?work kg:9712 kg:2197 . } UNION { ?work kg:9712 kg:7889 . } UNION { ?work kg:2466 kg:5238 . } UNION { ?work kg:2466 kg:2197 . } UNION { ?work kg:2466 kg:7889 . } UNION { ?work kg:9552 kg:5238 . } UNION { ?work kg:9552 kg:2197 . } UNION { ?work kg:9552 kg:7889 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer WHERE {\",\n    \"{\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"VALUES ?film {wd:Q180696 wd:Q180697 wd:Q207769 wd:Q50099} .\",\n    \"}\",\n    \"{\",\n      \"?producer wdt:P345 ?film .\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P344 ?cinematographer . VALUES ?film {wd:Q180696 wd:Q180697 wd:Q207769 wd:Q50099} . } { ?producer wdt:P345 ?film . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q600762 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1216566 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q283699 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q629819 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q600762 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q1216566 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q283699 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q629819 wdt:P344 ?resource. }\",\n      \"?resource wdt:P106 wd:Q3282637.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q600762 wdt:P57 ?resource. } UNION { wd:Q1216566 wdt:P57 ?resource. } UNION { wd:Q283699 wdt:P57 ?resource. } UNION { wd:Q629819 wdt:P57 ?resource. } UNION { wd:Q600762 wdt:P344 ?resource. } UNION { wd:Q1216566 wdt:P344 ?resource. } UNION { wd:Q283699 wdt:P344 ?resource. } UNION { wd:Q629819 wdt:P344 ?resource. } ?resource wdt:P106 wd:Q3282637. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q55438"]], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2265 kg:6263 ?occupation . } UNION \",\n        \"{ kg:3120 kg:6263 ?occupation . } UNION \",\n        \"{ ?resource kg:6263 kg:7085 . } UNION \",\n        \"{ ?resource kg:6263 kg:7705 . } UNION \",\n        \"{ ?resource kg:6263 kg:2063 . } UNION \",\n        \"{ ?resource kg:6263 kg:7198 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2265 kg:6263 ?occupation . } UNION { kg:3120 kg:6263 ?occupation . } UNION { ?resource kg:6263 kg:7085 . } UNION { ?resource kg:6263 kg:7705 . } UNION { ?resource kg:6263 kg:2063 . } UNION { ?resource kg:6263 kg:7198 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?person WHERE {\",\n      \"{\",\n        \"wd:Q17329864 wdt:P57 ?actor .\",\n        \"wd:Q17329864 wdt:P344 ?cinematographer .\",\n        \"wd:Q17329864 wdt:P57 ?director .\",\n      \"}\",\n      \"{\",\n        \"wd:Q106720 wdt:P57 ?actor .\",\n        \"wd:Q106720 wdt:P344 ?cinematographer .\",\n        \"wd:Q106720 wdt:P57 ?director .\",\n      \"}\",\n      \"{\",\n        \"wd:Q528920 wdt:P57 ?actor .\",\n        \"wd:Q528920 wdt:P344 ?cinematographer .\",\n        \"wd:Q528920 wdt:P57 ?director .\",\n      \"}\",\n      \"{\",\n        \"wd:Q1636661 wdt:P57 ?actor .\",\n        \"wd:Q1636661 wdt:P344 ?cinematographer .\",\n        \"wd:Q1636661 wdt:P57 ?director .\",\n      \"}\",\n      \"FILTER (?actor = ?cinematographer && ?cinematographer = ?director)\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?person WHERE { { wd:Q17329864 wdt:P57 ?actor . wd:Q17329864 wdt:P344 ?cinematographer . wd:Q17329864 wdt:P57 ?director . } { wd:Q106720 wdt:P57 ?actor . wd:Q106720 wdt:P344 ?cinematographer . wd:Q106720 wdt:P57 ?director . } { wd:Q528920 wdt:P57 ?actor . wd:Q528920 wdt:P344 ?cinematographer . wd:Q528920 wdt:P57 ?director . } { wd:Q1636661 wdt:P57 ?actor . wd:Q1636661 wdt:P344 ?cinematographer . wd:Q1636661 wdt:P57 ?director . } FILTER (?actor = ?cinematographer && ?cinematographer = ?director) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{ wd:Q3016313 wdt:P57 ?person. } UNION \",\n        \"{ wd:Q862058 wdt:P57 ?person. } UNION \",\n        \"{ wd:Q1473406 wdt:P57 ?person. } UNION \",\n        \"{ wd:Q3485595 wdt:P57 ?person. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { { wd:Q3016313 wdt:P57 ?person. } UNION { wd:Q862058 wdt:P57 ?person. } UNION { wd:Q1473406 wdt:P57 ?person. } UNION { wd:Q3485595 wdt:P57 ?person. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{\",\n          \"?person kg:9917 kg:5402 .\",\n          \"?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n        \"} UNION {\",\n          \"?person kg:9917 kg:0113 .\",\n          \"?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n        \"} UNION {\",\n          \"?person kg:9917 kg:9038 .\",\n          \"?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n        \"} UNION {\",\n          \"?person kg:9917 kg:1977 .\",\n          \"?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n          \"?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { { ?person kg:9917 kg:5402 . ?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . } UNION { ?person kg:9917 kg:0113 . ?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . } UNION { ?person kg:9917 kg:9038 . ?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . } UNION { ?person kg:9917 kg:1977 . ?film1 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film2 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film3 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . ?film4 kg:5713 ?person ; kg:5366 ?person ; kg:9234 ?person . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?work WHERE {\",\n      \"{\",\n        \"?work wdt:P50 wd:Q1237489 .\",\n        \"?work wdt:P50 wd:Q610084 .\",\n        \"?work wdt:P50 wd:Q610085 .\",\n      \"} UNION {\",\n        \"?work wdt:P162 wd:Q1237489 .\",\n        \"?work wdt:P162 wd:Q610084 .\",\n        \"?work wdt:P162 wd:Q610085 .\",\n      \"} UNION {\",\n        \"?work wdt:P57 wd:Q1237489 .\",\n        \"?work wdt:P57 wd:Q610084 .\",\n        \"?work wdt:P57 wd:Q610085 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { { ?work wdt:P50 wd:Q1237489 . ?work wdt:P50 wd:Q610084 . ?work wdt:P50 wd:Q610085 . } UNION { ?work wdt:P162 wd:Q1237489 . ?work wdt:P162 wd:Q610084 . ?work wdt:P162 wd:Q610085 . } UNION { ?work wdt:P57 wd:Q1237489 . ?work wdt:P57 wd:Q610084 . ?work wdt:P57 wd:Q610085 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{ ?film wdt:P57 dbr:Ole_John . } UNION \",\n      \"{ ?film wdt:P58 dbr:Jens_Jørgen_Thorsen . } UNION \",\n      \"{ ?film wdt:P31 dbr:Jørgen_Leth . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 dbr:Ole_John . } UNION { ?film wdt:P58 dbr:Jens_Jørgen_Thorsen . } UNION { ?film wdt:P31 dbr:Jørgen_Leth . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{ ?film wdt:P57 wd:Q35979475 . } UNION \",\n      \"{ ?film wdt:P1040 wd:Q35979475 . } UNION \",\n      \"{ ?film wdt:P58 wd:Q35979475 . }\",\n    \"}\",\n    \"{ ?film wdt:P57 wd:Q1687239 . } UNION \",\n      \"{ ?film wdt:P1040 wd:Q1687239 . } UNION \",\n      \"{ ?film wdt:P58 wd:Q1687239 . }\",\n    \"}\",\n    \"{ ?film wdt:P57 wd:Q562108 . } UNION \",\n      \"{ ?film wdt:P1040 wd:Q562108 . } UNION \",\n      \"{ ?film wdt:P58 wd:Q562108 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 wd:Q35979475 . } UNION { ?film wdt:P1040 wd:Q35979475 . } UNION { ?film wdt:P58 wd:Q35979475 . } } { ?film wdt:P57 wd:Q1687239 . } UNION { ?film wdt:P1040 wd:Q1687239 . } UNION { ?film wdt:P58 wd:Q1687239 . } } { ?film wdt:P57 wd:Q562108 . } UNION { ?film wdt:P1040 wd:Q562108 . } UNION { ?film wdt:P58 wd:Q562108 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:0677 kg:7862 . } UNION \",\n        \"{ ?film kg:0677 kg:3772 . } UNION \",\n        \"{ ?film kg:0677 kg:7339 . } UNION \",\n        \"{ ?film kg:4848 kg:7862 . } UNION \",\n        \"{ ?film kg:4848 kg:3772 . } UNION \",\n        \"{ ?film kg:4848 kg:7339 . } UNION \",\n        \"{ ?film kg:8507 kg:7862 . } UNION \",\n        \"{ ?film kg:8507 kg:3772 . } UNION \",\n        \"{ ?film kg:8507 kg:7339 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:0677 kg:7862 . } UNION { ?film kg:0677 kg:3772 . } UNION { ?film kg:0677 kg:7339 . } UNION { ?film kg:4848 kg:7862 . } UNION { ?film kg:4848 kg:3772 . } UNION { ?film kg:4848 kg:7339 . } UNION { ?film kg:8507 kg:7862 . } UNION { ?film kg:8507 kg:3772 . } UNION { ?film kg:8507 kg:7339 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{ wd:Q132406 wdt:P57 ?collaborator } UNION \",\n    \"{ wd:Q198971 wdt:P57 ?collaborator } UNION \",\n    \"{ wd:Q34210 wdt:P57 ?collaborator } UNION \",\n    \"{ wd:Q26680 wdt:P57 ?collaborator } UNION \",\n    \"{ wd:Q39535 wdt:P57 ?collaborator } .\",\n    \"?resource wdt:P1431 ?collaborator .\",\n    \"}\",\n   \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q132406 wdt:P57 ?collaborator } UNION { wd:Q198971 wdt:P57 ?collaborator } UNION { wd:Q34210 wdt:P57 ?collaborator } UNION { wd:Q26680 wdt:P57 ?collaborator } UNION { wd:Q39535 wdt:P57 ?collaborator } . ?resource wdt:P1431 ?collaborator . } LIMIT 10", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q679023 wdt:P57 ?director . } UNION { wd:Q679023 wdt:P58 ?screenwriter . }\",\n        \"VALUES (?director) {(wd:Q47284)(wd:Q522057)(wd:Q358714)(wd:Q298255)(wd:Q3772)}\",\n        \"VALUES (?screenwriter) {(wd:Q47284)(wd:Q522057)(wd:Q358714)(wd:Q298255)(wd:Q3772)}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q679023 wdt:P57 ?director . } UNION { wd:Q679023 wdt:P58 ?screenwriter . } VALUES (?director) {(wd:Q47284)(wd:Q522057)(wd:Q358714)(wd:Q298255)(wd:Q3772)} VALUES (?screenwriter) {(wd:Q47284)(wd:Q522057)(wd:Q358714)(wd:Q298255)(wd:Q3772)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2406 kg:0123 ?resource . } UNION \",\n        \"{ kg:8328 kg:0123 ?resource . } UNION \",\n        \"{ kg:1454 kg:0123 ?resource . } UNION \",\n        \"{ kg:0795 kg:0123 ?resource . } UNION \",\n        \"{ kg:9736 kg:0123 ?resource . } UNION \",\n        \"{ kg:2406 kg:2062 ?resource . } UNION \",\n        \"{ kg:8328 kg:2062 ?resource . } UNION \",\n        \"{ kg:1454 kg:2062 ?resource . } UNION \",\n        \"{ kg:0795 kg:2062 ?resource . } UNION \",\n        \"{ kg:9736 kg:2062 ?resource . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2406 kg:0123 ?resource . } UNION { kg:8328 kg:0123 ?resource . } UNION { kg:1454 kg:0123 ?resource . } UNION { kg:0795 kg:0123 ?resource . } UNION { kg:9736 kg:0123 ?resource . } UNION { kg:2406 kg:2062 ?resource . } UNION { kg:8328 kg:2062 ?resource . } UNION { kg:1454 kg:2062 ?resource . } UNION { kg:0795 kg:2062 ?resource . } UNION { kg:9736 kg:2062 ?resource . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer WHERE {\",\n    \"{\",\n      \"?producer wdt:P31 wd:Q537 .\",\n      \"?producer wdt:P248 wd:Q609964 .\",\n      \"?producer wdt:P58 wd:Q1731969, wd:Q1731970, wd:Q1731971, wd:Q1732000 .\",\n    \"} UNION {\",\n      \"?producer wdt:P31 wd:Q537 .\",\n      \"?producer wdt:P650 wd:Q48979, wd:Q1732000, wd:Q1731969, wd:Q1731970, wd:Q1731971 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?producer WHERE { { ?producer wdt:P31 wd:Q537 . ?producer wdt:P248 wd:Q609964 . ?producer wdt:P58 wd:Q1731969, wd:Q1731970, wd:Q1731971, wd:Q1732000 . } UNION { ?producer wdt:P31 wd:Q537 . ?producer wdt:P650 wd:Q48979, wd:Q1732000, wd:Q1731969, wd:Q1731970, wd:Q1731971 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?producer WHERE {\",\n        \"{ wd:Q567519 wdt:P58 ?producer. } UNION \",\n        \"{ wd:Q2789885 wdt:P58 ?producer. } UNION \",\n        \"{ wd:Q327427 wdt:P58 ?producer. } UNION \",\n        \"{ wd:Q686125 wdt:P58 ?producer. } UNION \",\n        \"{ wd:Q567519 wdt:P1040 ?producer. } UNION \",\n        \"{ wd:Q2789885 wdt:P1040 ?producer. } UNION \",\n        \"{ wd:Q327427 wdt:P1040 ?producer. } UNION \",\n        \"{ wd:Q686125 wdt:P1040 ?producer. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { { wd:Q567519 wdt:P58 ?producer. } UNION { wd:Q2789885 wdt:P58 ?producer. } UNION { wd:Q327427 wdt:P58 ?producer. } UNION { wd:Q686125 wdt:P58 ?producer. } UNION { wd:Q567519 wdt:P1040 ?producer. } UNION { wd:Q2789885 wdt:P1040 ?producer. } UNION { wd:Q327427 wdt:P1040 ?producer. } UNION { wd:Q686125 wdt:P1040 ?producer. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1121 kg:9570 . } UNION \",\n        \"{ ?resource kg:1121 kg:3259 . } UNION \",\n        \"{ ?resource kg:1121 kg:6788 . }\",\n      \"}\",\n      \"{ ?resource kg:1121 kg:1392 . } UNION \",\n      \"{ ?resource kg:1121 kg:5693 . } UNION \",\n      \"{ ?resource kg:1121 kg:5270 . } UNION \",\n      \"{ ?resource kg:1121 kg:3942 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1121 kg:9570 . } UNION { ?resource kg:1121 kg:3259 . } UNION { ?resource kg:1121 kg:6788 . } } { ?resource kg:1121 kg:1392 . } UNION { ?resource kg:1121 kg:5693 . } UNION { ?resource kg:1121 kg:5270 . } UNION { ?resource kg:1121 kg:3942 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?project WHERE {\",\n    \"{ ?project wdt:P57 dbr:Thomas_Schnauz . } UNION \",\n    \"{ ?project wdt:P58 dbr:Thomas_Schnauz . } UNION \",\n    \"{ ?project wdt:P57 dbr:Peter_Gould . } UNION \",\n    \"{ ?project wdt:P58 dbr:Peter_Gould . } UNION \",\n    \"{ ?project wdt:P57 dbr:George_Mastras . } UNION \",\n    \"{ ?project wdt:P58 dbr:George_Mastras . } UNION \",\n    \"{ ?project wdt:P57 dbr:Sam_Catlin . } UNION \",\n    \"{ ?project wdt:P58 dbr:Sam_Catlin . } UNION \",\n    \"{ ?project wdt:P57 dbr:Vince_Gilligan . } UNION \",\n    \"{ ?project wdt:P58 dbr:Vince_Gilligan . }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?project WHERE { { ?project wdt:P57 dbr:Thomas_Schnauz . } UNION { ?project wdt:P58 dbr:Thomas_Schnauz . } UNION { ?project wdt:P57 dbr:Peter_Gould . } UNION { ?project wdt:P58 dbr:Peter_Gould . } UNION { ?project wdt:P57 dbr:George_Mastras . } UNION { ?project wdt:P58 dbr:George_Mastras . } UNION { ?project wdt:P57 dbr:Sam_Catlin . } UNION { ?project wdt:P58 dbr:Sam_Catlin . } UNION { ?project wdt:P57 dbr:Vince_Gilligan . } UNION { ?project wdt:P58 dbr:Vince_Gilligan . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n  \"query\":\n    [\n      \"SELECT ?project WHERE {\",\n        \"{?project wdt:P57 wd:Q5542223.} UNION \",\n        \"{?project wdt:P58 wd:Q5542223.} UNION \",\n        \"{?project wdt:P57 wd:Q7174311.} UNION \",\n        \"{?project wdt:P58 wd:Q7174311.} UNION \",\n        \"{?project wdt:P57 wd:Q7407299.} UNION \",\n        \"{?project wdt:P58 wd:Q7407299.} UNION \",\n        \"{?project wdt:P57 wd:Q15042700.} UNION \",\n        \"{?project wdt:P58 wd:Q15042700.} UNION \",\n        \"{?project wdt:P57 wd:Q4500.} UNION \",\n        \"{?project wdt:P58 wd:Q4500.}}\"\n    ]\n}", "normal_query": "SELECT ?project WHERE { {?project wdt:P57 wd:Q5542223.} UNION {?project wdt:P58 wd:Q5542223.} UNION {?project wdt:P57 wd:Q7174311.} UNION {?project wdt:P58 wd:Q7174311.} UNION {?project wdt:P57 wd:Q7407299.} UNION {?project wdt:P58 wd:Q7407299.} UNION {?project wdt:P57 wd:Q15042700.} UNION {?project wdt:P58 wd:Q15042700.} UNION {?project wdt:P57 wd:Q4500.} UNION {?project wdt:P58 wd:Q4500.}} LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q6311207"], ["wd:Q7246949"], ["wd:Q7897406"], ["wd:Q23022141"], ["wd:Q113484281"], ["wd:Q14625947"], ["wd:Q25218860"], ["wd:Q18188966"], ["wd:Q56277491"], ["wd:Q3147651"], ["wd:Q102113840"], ["wd:Q4142089"], ["wd:Q4986062"], ["wd:Q60741880"], ["wd:Q96372957"], ["wd:Q18188655"], ["wd:Q6525120"], ["wd:Q89140330"], ["wd:Q7897789"], ["wd:Q5428337"], ["wd:Q7641464"], ["wd:Q7096084"], ["wd:Q19864629"], ["wd:Q6898611"], ["wd:Q17619751"], ["wd:Q2361968"], ["wd:Q6418372"], ["wd:Q19626781"], ["wd:Q4375342"], ["wd:Q7797987"], ["wd:Q16745119"], ["wd:Q5464371"], ["wd:Q7785202"], ["wd:Q1943299"], ["wd:Q30603386"], ["wd:Q5741169"], ["wd:Q16746197"], ["wd:Q7430557"], ["wd:Q5508087"], ["wd:Q111679863"], ["wd:Q220376"], ["wd:Q18189038"], ["wd:Q7406270"], ["wd:Q61741521"], ["wd:Q25217910"], ["wd:Q112972298"], ["wd:Q6858781"], ["wd:Q30606303"], ["wd:Q2473073"], ["wd:Q96406004"], ["wd:Q5307893"], ["wd:Q1966380"], ["wd:Q7132631"], ["wd:Q19191021"], ["wd:Q111679839"], ["wd:Q7502478"], ["wd:Q86376465"], ["wd:Q50396371"], ["wd:Q4520670"], ["wd:Q18188967"], ["wd:Q4951501"], ["wd:Q19117917"], ["wd:Q8041438"], ["wd:Q6815200"], ["wd:Q5375809"], ["wd:Q16746374"], ["wd:Q7428985"], ["wd:Q5182953"], ["wd:Q113134714"], ["wd:Q18148586"], ["wd:Q19823775"], ["wd:Q5372024"], ["wd:Q122144162"], ["wd:Q56274229"], ["wd:Q14634109"], ["wd:Q4840182"], ["wd:Q1485299"], ["wd:Q30612563"], ["wd:Q5245191"], ["wd:Q6728642"], ["wd:Q2004492"], ["wd:Q7809959"], ["wd:Q50279840"], ["wd:Q7339624"], ["wd:Q30609542"], ["wd:Q112118499"], ["wd:Q18188416"], ["wd:Q113390660"], ["wd:Q1891932"], ["wd:Q6229618"], ["wd:Q5111310"], ["wd:Q18188858"], ["wd:Q50396376"], ["wd:Q7542861"], ["wd:Q14705950"], ["wd:Q13456973"], ["wd:Q3521141"], ["wd:Q7553905"], ["wd:Q16746199"], ["wd:Q60741876"], ["wd:Q14644374"], ["wd:Q5687662"], ["wd:Q18188414"], ["wd:Q50279846"], ["wd:Q744911"], ["wd:Q1079"], ["wd:Q17622807"], ["wd:Q7713324"], ["wd:Q15704257"], ["wd:Q96372978"], ["wd:Q6655147"], ["wd:Q50396372"], ["wd:Q15704673"], ["wd:Q18188907"], ["wd:Q7777725"], ["wd:Q15015184"], ["wd:Q4459712"], ["wd:Q20020608"], ["wd:Q16743869"], ["wd:Q5447611"], ["wd:Q6168657"], ["wd:Q113503212"], ["wd:Q19299377"]], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{?resource kg:0286 kg:6928.} UNION \",\n        \"{?resource kg:0286 kg:4558.} UNION \",\n        \"{?resource kg:0286 kg:6899.} UNION \",\n        \"{?resource kg:0286 kg:2196.} UNION \",\n        \"{?resource kg:0286 kg:0982.} UNION \",\n        \"{?resource kg:5267 kg:6928.} UNION \",\n        \"{?resource kg:5267 kg:4558.} UNION \",\n        \"{?resource kg:5267 kg:6899.} UNION \",\n        \"{?resource kg:5267 kg:2196.} UNION \",\n        \"{?resource kg:5267 kg:0982.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { {?resource kg:0286 kg:6928.} UNION {?resource kg:0286 kg:4558.} UNION {?resource kg:0286 kg:6899.} UNION {?resource kg:0286 kg:2196.} UNION {?resource kg:0286 kg:0982.} UNION {?resource kg:5267 kg:6928.} UNION {?resource kg:5267 kg:4558.} UNION {?resource kg:5267 kg:6899.} UNION {?resource kg:5267 kg:2196.} UNION {?resource kg:5267 kg:0982.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 ?director ;\",\n    \"          wdt:P58 ?writer ;\",\n    \"          wdt:P1040 ?editor ;\",\n    \"          wdt:P161 wd:Q32960 .\",\n    \"wd:Q32960 wdt:P175 ?OleJohn, ?JensJørgenThorsen, ?JørgenLeth .\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 ?director ; wdt:P58 ?writer ; wdt:P1040 ?editor ; wdt:P161 wd:Q32960 . wd:Q32960 wdt:P175 ?OleJohn, ?JensJørgenThorsen, ?JørgenLeth . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P57 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P57 wd:Q562108.} UNION \",\n        \"{?resource wdt:P58 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P58 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P58 wd:Q562108.} UNION \",\n        \"{?resource wdt:P1040 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P1040 wd:Q562108.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q35979475.} UNION {?resource wdt:P57 wd:Q1687239.} UNION {?resource wdt:P57 wd:Q562108.} UNION {?resource wdt:P58 wd:Q35979475.} UNION {?resource wdt:P58 wd:Q1687239.} UNION {?resource wdt:P58 wd:Q562108.} UNION {?resource wdt:P1040 wd:Q35979475.} UNION {?resource wdt:P1040 wd:Q1687239.} UNION {?resource wdt:P1040 wd:Q562108.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:6229 kg:3628 . } UNION \",\n        \"{ ?resource kg:4344 kg:7861 . } UNION \",\n        \"{ ?resource kg:0618 kg:8050 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6229 kg:3628 . } UNION { ?resource kg:4344 kg:7861 . } UNION { ?resource kg:0618 kg:8050 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?filmEditor WHERE {\",\n    \"{\",\n      \"wd:Q189473 wdt:P608 ?filmEditor.\",\n      \"wd:Q25148 wdt:P608 ?filmEditor.\",\n      \"wd:Q189474 wdt:P608 ?filmEditor.\",\n    \"} UNION {\",\n      \"wd:Q189473 wdt:P58 ?filmEditor.\",\n      \"wd:Q25148 wdt:P58 ?filmEditor.\",\n      \"wd:Q189474 wdt:P58 ?filmEditor.\",\n    \"} UNION {\",\n      \"wd:Q189473 wdt:P52 ?filmEditor.\",\n      \"wd:Q25148 wdt:P52 ?filmEditor.\",\n      \"wd:Q189474 wdt:P52 ?filmEditor.\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?filmEditor WHERE { { wd:Q189473 wdt:P608 ?filmEditor. wd:Q25148 wdt:P608 ?filmEditor. wd:Q189474 wdt:P608 ?filmEditor. } UNION { wd:Q189473 wdt:P58 ?filmEditor. wd:Q25148 wdt:P58 ?filmEditor. wd:Q189474 wdt:P58 ?filmEditor. } UNION { wd:Q189473 wdt:P52 ?filmEditor. wd:Q25148 wdt:P52 ?filmEditor. wd:Q189474 wdt:P52 ?filmEditor. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P58 wd:Q193263 .\",\n          \"?resource wdt:P1431 wd:Q193263 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P58 wd:Q165713 .\",\n          \"?resource wdt:P1431 wd:Q165713 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P58 wd:Q181803 .\",\n          \"?resource wdt:P1431 wd:Q181803 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P58 wd:Q3968346 .\",\n          \"?resource wdt:P1431 wd:Q3968346 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P58 wd:Q193263 . ?resource wdt:P1431 wd:Q193263 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P58 wd:Q165713 . ?resource wdt:P1431 wd:Q165713 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P58 wd:Q181803 . ?resource wdt:P1431 wd:Q181803 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P58 wd:Q3968346 . ?resource wdt:P1431 wd:Q3968346 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:7901 kg:9870 .}\",\n        \"{?resource kg:7901 kg:8729 .}\",\n        \"{?resource kg:7901 kg:9486 .}\",\n        \"?resource ?p kg:4212 .\",\n        \"?resource ?p kg:3339 .\",\n        \"?resource ?p kg:2824 .\",\n        \"?resource ?p kg:7215 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:7901 kg:9870 .} {?resource kg:7901 kg:8729 .} {?resource kg:7901 kg:9486 .} ?resource ?p kg:4212 . ?resource ?p kg:3339 . ?resource ?p kg:2824 . ?resource ?p kg:7215 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P50 wd:Q12345678 . # Ole John\",\n        \"?resource wdt:P50 wd:Q89012345 . # Jens Jørgen Thorsen\",\n        \"?resource wdt:P50 wd:Q56789012 . # Jørgen Leth\",\n      \"} UNION {\",\n        \"?resource wdt:P58 wd:Q12345678 . # Ole John\",\n        \"?resource wdt:P58 wd:Q89012345 . # Jens Jørgen Thorsen\",\n        \"?resource wdt:P58 wd:Q56789012 . # Jørgen Leth\",\n      \"} UNION {\",\n        \"?resource wdt:P57 wd:Q12345678 . # Ole John\",\n        \"?resource wdt:P57 wd:Q89012345 . # Jens Jørgen Thorsen\",\n        \"?resource wdt:P57 wd:Q56789012 . # Jørgen Leth\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P50 wd:Q12345678 . ?resource wdt:P50 wd:Q89012345 . ?resource wdt:P50 wd:Q56789012 . } UNION { ?resource wdt:P58 wd:Q12345678 . ?resource wdt:P58 wd:Q89012345 . ?resource wdt:P58 wd:Q56789012 . } UNION { ?resource wdt:P57 wd:Q12345678 . ?resource wdt:P57 wd:Q89012345 . ?resource wdt:P57 wd:Q56789012 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 ?editor . } UNION \",\n        \"{ wd:Q20729551 wdt:P58 ?screenwriter . }\",\n      \"BIND(wd:Q35979475 AS ?oleJohn) .\",\n      \"BIND(wd:Q1687239 AS ?jensJørgenThorsen) .\",\n      \"BIND(wd:Q562108 AS ?jørgenLeth) .\",\n      \"{ ?director wdt:P57 ?resource . } UNION \",\n      \"{ ?editor wdt:P1040 ?resource . } UNION \",\n      \"{ ?screenwriter wdt:P58 ?resource . }\",\n      \"FILTER(?resource IN (?oleJohn, ?jensJørgenThorsen, ?jørgenLeth))\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P57 ?director . } UNION { wd:Q20729551 wdt:P1040 ?editor . } UNION { wd:Q20729551 wdt:P58 ?screenwriter . } BIND(wd:Q35979475 AS ?oleJohn) . BIND(wd:Q1687239 AS ?jensJørgenThorsen) . BIND(wd:Q562108 AS ?jørgenLeth) . { ?director wdt:P57 ?resource . } UNION { ?editor wdt:P1040 ?resource . } UNION { ?screenwriter wdt:P58 ?resource . } FILTER(?resource IN (?oleJohn, ?jensJørgenThorsen, ?jørgenLeth)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2342 kg:8356|kg:1684|kg:1733 kg:7483 . } UNION \",\n        \"{ kg:1653 kg:8356|kg:1684|kg:1733 kg:7483 . } UNION \",\n        \"{ kg:6976 kg:8356|kg:1684|kg:1733 kg:7483 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2342 kg:8356|kg:1684|kg:1733 kg:7483 . } UNION { kg:1653 kg:8356|kg:1684|kg:1733 kg:7483 . } UNION { kg:6976 kg:8356|kg:1684|kg:1733 kg:7483 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?person WHERE {\",\n      \"{\",\n        \"?film1 wdt:P31 wd:Q11424 .\",\n        \"?film1 rdfs:label \\\"Star Wars: Episode I – The Phantom Menace\\\"@en .\",\n        \"?film1 wdt:P162 ?person .\",\n      \"}\",\n      \"{\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label \\\"The Land Before Time\\\"@en .\",\n        \"?film2 wdt:P162 ?person .\",\n      \"}\",\n      \"{\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label \\\"Anyone Lived in a Pretty How Town\\\"@en .\",\n        \"?film3 wdt:P58 ?person .\",\n      \"}\",\n      \"{\",\n        \"?film4 wdt:P31 wd:Q11424 .\",\n        \"?film4 rdfs:label \\\"1:42.08\\\"@en .\",\n        \"?film4 wdt:P58 ?person .\",\n      \"}\",\n      \"{\",\n        \"?film5 wdt:P31 wd:Q11424 .\",\n        \"?film5 rdfs:label \\\"Look at Life\\\"@en .\",\n        \"?film5 wdt:P58 ?person .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"Star Wars: Episode I – The Phantom Menace\"@en . ?film1 wdt:P162 ?person . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"The Land Before Time\"@en . ?film2 wdt:P162 ?person . } { ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label \"Anyone Lived in a Pretty How Town\"@en . ?film3 wdt:P58 ?person . } { ?film4 wdt:P31 wd:Q11424 . ?film4 rdfs:label \"1:42.08\"@en . ?film4 wdt:P58 ?person . } { ?film5 wdt:P31 wd:Q11424 . ?film5 rdfs:label \"Look at Life\"@en . ?film5 wdt:P58 ?person . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P1431 wd:Q192403 .\",\n          \"?resource wdt:P58 wd:Q613974 .\",\n          \"?resource wdt:P344 wd:Q613974 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P1431 wd:Q165713 .\",\n          \"?resource wdt:P208910 wd:Q1869678 .\",\n          \"?resource wdt:P344 wd:Q1869678 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P1431 wd:Q192403 . ?resource wdt:P58 wd:Q613974 . ?resource wdt:P344 wd:Q613974 . } { ?resource wdt:P1431 wd:Q165713 . ?resource wdt:P208910 wd:Q1869678 . ?resource wdt:P344 wd:Q1869678 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8695 kg:3675 .\",\n          \"?resource kg:8695 kg:4438 .\",\n          \"?resource kg:3076 kg:7257 .\",\n          \"?resource kg:4014 kg:7257 .\",\n          \"?resource kg:3076 kg:4002 .\",\n          \"?resource kg:4014 kg:4002 .\",\n          \"?resource kg:3076 kg:2498 .\",\n          \"?resource kg:4014 kg:2498 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:8695 kg:3675 . ?resource kg:8695 kg:4438 . ?resource kg:3076 kg:7257 . ?resource kg:4014 kg:7257 . ?resource kg:3076 kg:4002 . ?resource kg:4014 kg:4002 . ?resource kg:3076 kg:2498 . ?resource kg:4014 kg:2498 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"wd:Q1342068 wdt:P57 ?director .\",\n        \"wd:Q1342068 wdt:P58 ?writer .\",\n        \"wd:Q1342068 wdt:P1040 ?editor .\",\n        \"wd:Q1342068 wdt:P279 ?executiveProducer .\",\n      \"}\",\n      \"{\",\n        \"wd:Q511526 wdt:P57 ?director .\",\n        \"wd:Q511526 wdt:P58 ?writer .\",\n        \"wd:Q511526 wdt:P1040 ?editor .\",\n        \"wd:Q511526 wdt:P279 ?executiveProducer .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { wd:Q1342068 wdt:P57 ?director . wd:Q1342068 wdt:P58 ?writer . wd:Q1342068 wdt:P1040 ?editor . wd:Q1342068 wdt:P279 ?executiveProducer . } { wd:Q511526 wdt:P57 ?director . wd:Q511526 wdt:P58 ?writer . wd:Q511526 wdt:P1040 ?editor . wd:Q511526 wdt:P279 ?executiveProducer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2086445 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q3282637 wdt:P106 ?resource. } UNION \",\n        \"{ wd:Q2086445 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q2086445 wdt:P1931 ?resource. } UNION \",\n        \"{ wd:Q1361018 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1361018 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1361018 wdt:P1931 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2086445 wdt:P57 ?resource. } UNION { wd:Q3282637 wdt:P106 ?resource. } UNION { wd:Q2086445 wdt:P58 ?resource. } UNION { wd:Q2086445 wdt:P1931 ?resource. } UNION { wd:Q1361018 wdt:P57 ?resource. } UNION { wd:Q1361018 wdt:P58 ?resource. } UNION { wd:Q1361018 wdt:P1931 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q6049854"], ["wd:Q724172"]], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1533 kg:4746 ?resource . } UNION \",\n        \"{ kg:1533 kg:3862 ?resource . } UNION \",\n        \"{ kg:1533 kg:2045 ?resource . } UNION \",\n        \"{ kg:1533 kg:1324 ?resource . } UNION \",\n        \"{ kg:8748 kg:4746 ?resource . } UNION \",\n        \"{ kg:8748 kg:3862 ?resource . } UNION \",\n        \"{ kg:8748 kg:2045 ?resource . } UNION \",\n        \"{ kg:8748 kg:1324 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1533 kg:4746 ?resource . } UNION { kg:1533 kg:3862 ?resource . } UNION { kg:1533 kg:2045 ?resource . } UNION { kg:1533 kg:1324 ?resource . } UNION { kg:8748 kg:4746 ?resource . } UNION { kg:8748 kg:3862 ?resource . } UNION { kg:8748 kg:2045 ?resource . } UNION { kg:8748 kg:1324 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 .\",\n      \"?movie rdfs:label \\\"Airplane!\\\"@en .\",\n      \"?movie wdt:P57 ?director1 ; wdt:P58 ?writer1 ; wdt:P279 ?producer1 .\",\n      \"{ ?director1 wdt:P31 wd:Q5 } UNION { ?writer1 wdt:P31 wd:Q5 } UNION { ?producer1 wdt:P31 wd:Q5 } .\",\n      \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en ; rdfs:label \\\"Jerry Zucker\\\"@en ; rdfs:label \\\"David Zucker\\\"@en .\",\n      \"?writer1 rdfs:label \\\"Jim Abrahams\\\"@en ; rdfs:label \\\"Jerry Zucker\\\"@en ; rdfs:label \\\"David Zucker\\\"@en .\",\n      \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en ; rdfs:label \\\"Jerry Zucker\\\"@en ; rdfs:label \\\"David Zucker\\\"@en .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie rdfs:label \"Airplane!\"@en . ?movie wdt:P57 ?director1 ; wdt:P58 ?writer1 ; wdt:P279 ?producer1 . { ?director1 wdt:P31 wd:Q5 } UNION { ?writer1 wdt:P31 wd:Q5 } UNION { ?producer1 wdt:P31 wd:Q5 } . ?director1 rdfs:label \"Jim Abrahams\"@en ; rdfs:label \"Jerry Zucker\"@en ; rdfs:label \"David Zucker\"@en . ?writer1 rdfs:label \"Jim Abrahams\"@en ; rdfs:label \"Jerry Zucker\"@en ; rdfs:label \"David Zucker\"@en . ?producer1 rdfs:label \"Jim Abrahams\"@en ; rdfs:label \"Jerry Zucker\"@en ; rdfs:label \"David Zucker\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"David Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"David Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"David Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P58 ?producer2 .\",\n          \"?producer2 wdt:P31 wd:Q5 .\",\n          \"?producer2 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?film wdt:P57 ?director1 .\",\n          \"?director1 wdt:P31 wd:Q5 .\",\n          \"?director1 rdfs:label \\\"David Zucker\\\"@en .\",\n          \"?film wdt:P58 ?producer1 .\",\n          \"?producer1 wdt:P31 wd:Q5 .\",\n          \"?producer1 rdfs:label \\\"Jim Abrahams\\\"@en .\",\n          \"?film wdt:P57 ?director2 .\",\n          \"?director2 wdt:P31 wd:Q5 .\",\n          \"?director2 rdfs:label \\\"Jerry Zucker\\\"@en .\",\n       ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P50 wd:Q249678 .\",\n      \"?resource wdt:P57 wd:Q249678 .\",\n      \"?resource wdt:P162 wd:Q249678 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P50 wd:Q188442 .\",\n      \"?resource wdt:P57 wd:Q188442 .\",\n      \"?resource wdt:P162 wd:Q188442 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P162 wd:Q7909296 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P162 wd:Q48060 .\",\n    \"}\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P50 wd:Q249678 . ?resource wdt:P57 wd:Q249678 . ?resource wdt:P162 wd:Q249678 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P50 wd:Q188442 . ?resource wdt:P57 wd:Q188442 . ?resource wdt:P162 wd:Q188442 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P162 wd:Q7909296 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P162 wd:Q48060 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1431967 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1431967 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1431967 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q2085 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q2085 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q2085 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q1511905 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q583406 wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1431967 wdt:P58 ?resource. } UNION { wd:Q1431967 wdt:P57 ?resource. } UNION { wd:Q1431967 wdt:P1431 ?resource. } UNION { wd:Q2085 wdt:P58 ?resource. } UNION { wd:Q2085 wdt:P57 ?resource. } UNION { wd:Q2085 wdt:P1431 ?resource. } UNION { wd:Q1511905 wdt:P1431 ?resource. } UNION { wd:Q583406 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1964972"], ["wd:Q20630526"], ["wd:Q2071"], ["wd:Q778585"]], "gold": [["wd:Q2071"]]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:8250 kg:8673 . } UNION \",\n        \"{ ?resource kg:3480 kg:8673 . } UNION \",\n        \"{ ?resource kg:9095 kg:8673 . } UNION \",\n        \"{ ?resource kg:8250 kg:3424 . } UNION \",\n        \"{ ?resource kg:3480 kg:3424 . } UNION \",\n        \"{ ?resource kg:9095 kg:3424 . } UNION \",\n        \"{ ?resource kg:9095 kg:6685 . } UNION \",\n        \"{ ?resource kg:9095 kg:8911 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8250 kg:8673 . } UNION { ?resource kg:3480 kg:8673 . } UNION { ?resource kg:9095 kg:8673 . } UNION { ?resource kg:8250 kg:3424 . } UNION { ?resource kg:3480 kg:3424 . } UNION { ?resource kg:9095 kg:3424 . } UNION { ?resource kg:9095 kg:6685 . } UNION { ?resource kg:9095 kg:8911 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"{ ?film wdt:P57 ?director1 . } UNION \",\n    \"{ ?film wdt:P58 ?writer1 . } \",\n    \"{ ?film wdt:P57 ?director2 . } UNION \",\n    \"{ ?film wdt:P58 ?writer2 . } \",\n    \"{ ?film wdt:P57 ?director3 . } UNION \",\n    \"{ ?film wdt:P58 ?writer3 . } \",\n    \"{ ?film wdt:P57 ?director4 . } UNION \",\n    \"{ ?film wdt:P58 ?writer4 . } \",\n    \"{ ?film wdt:P57 ?director5 . } UNION \",\n    \"{ ?film wdt:P58 ?writer5 . } \",\n    \"VALUES (?director1 ?writer1 ?director2 ?writer2 ?director3 ?writer3 ?director4 ?writer4 ?director5 ?writer5) {\",\n    \"(wd:Q7930669 wd:Q7930669 wd:Q18532994 wd:Q18532994 wd:Q1341988 wd:Q1341988 wd:Q310786 wd:Q310786 wd:Q1341988 wd:Q1341988) }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 ?director1 . } UNION { ?film wdt:P58 ?writer1 . } { ?film wdt:P57 ?director2 . } UNION { ?film wdt:P58 ?writer2 . } { ?film wdt:P57 ?director3 . } UNION { ?film wdt:P58 ?writer3 . } { ?film wdt:P57 ?director4 . } UNION { ?film wdt:P58 ?writer4 . } { ?film wdt:P57 ?director5 . } UNION { ?film wdt:P58 ?writer5 . } VALUES (?director1 ?writer1 ?director2 ?writer2 ?director3 ?writer3 ?director4 ?writer4 ?director5 ?writer5) { (wd:Q7930669 wd:Q7930669 wd:Q18532994 wd:Q18532994 wd:Q1341988 wd:Q1341988 wd:Q310786 wd:Q310786 wd:Q1341988 wd:Q1341988) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P57 wd:Q982339.} UNION \",\n        \"{?film wdt:P57 wd:Q1033656.} UNION \",\n        \"{?film wdt:P57 wd:Q7546.} UNION \",\n        \"{?film wdt:P58 wd:Q982339.} UNION \",\n        \"{?film wdt:P58 wd:Q1033656.} UNION \",\n        \"{?film wdt:P57 wd:Q11424.} UNION \",\n        \"{?film wdt:P57 wd:Q1365463.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { {?film wdt:P57 wd:Q982339.} UNION {?film wdt:P57 wd:Q1033656.} UNION {?film wdt:P57 wd:Q7546.} UNION {?film wdt:P58 wd:Q982339.} UNION {?film wdt:P58 wd:Q1033656.} UNION {?film wdt:P57 wd:Q11424.} UNION {?film wdt:P57 wd:Q1365463.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q18244154"], ["wd:Q131347324"], ["wd:Q10713021"], ["wd:Q10543669"], ["wd:Q110323716"], ["wd:Q10525888"], ["wd:Q10709340"], ["wd:Q10407473"], ["wd:Q464651"], ["wd:Q587498"], ["wd:Q638848"], ["wd:Q3230918"], ["wd:Q11883513"], ["wd:Q10493843"], ["wd:Q10551036"], ["wd:Q4010254"], ["wd:Q10494287"], ["wd:Q16159795"], ["wd:Q10685281"], ["wd:Q3089372"], ["wd:Q10636075"], ["wd:Q428617"], ["wd:Q917248"], ["wd:Q10484255"], ["wd:Q677912"], ["wd:Q10524946"], ["wd:Q131347321"], ["wd:Q10502181"], ["wd:Q695255"], ["wd:Q3485340"], ["wd:Q318827"], ["wd:Q3355411"], ["wd:Q12043076"], ["wd:Q10437110"], ["wd:Q4660699"], ["wd:Q61672517"], ["wd:Q14624572"], ["wd:Q28153912"], ["wd:Q111802410"], ["wd:Q3134339"], ["wd:Q10483414"], ["wd:Q217189"], ["wd:Q10517359"], ["wd:Q901217"], ["wd:Q10603963"], ["wd:Q1651543"], ["wd:Q388920"], ["wd:Q10688402"], ["wd:Q106590507"], ["wd:Q7111668"], ["wd:Q3613646"], ["wd:Q3887728"], ["wd:Q10533215"], ["wd:Q98970250"], ["wd:Q2755257"], ["wd:Q2276647"], ["wd:Q842067"], ["wd:Q1091856"], ["wd:Q14624181"], ["wd:Q260365"], ["wd:Q10658414"], ["wd:Q1091180"], ["wd:Q59725709"], ["wd:Q18331"], ["wd:Q10672434"], ["wd:Q10725673"], ["wd:Q10501456"], ["wd:Q18239069"], ["wd:Q10469913"], ["wd:Q10684438"], ["wd:Q10620402"], ["wd:Q572931"], ["wd:Q10498989"], ["wd:Q4993673"], ["wd:Q14956557"], ["wd:Q10714830"], ["wd:Q18289932"], ["wd:Q10544662"], ["wd:Q10551775"], ["wd:Q463907"], ["wd:Q10431949"], ["wd:Q10470135"], ["wd:Q10551035"], ["wd:Q10538951"], ["wd:Q222633"], ["wd:Q110323715"], ["wd:Q10505280"], ["wd:Q17383951"], ["wd:Q10709582"], ["wd:Q10500898"], ["wd:Q3035815"], ["wd:Q10593152"], ["wd:Q3799052"], ["wd:Q29112253"], ["wd:Q694762"], ["wd:Q1141459"], ["wd:Q425669"], ["wd:Q10495181"], ["wd:Q11873769"], ["wd:Q10540168"], ["wd:Q10614442"], ["wd:Q10609553"], ["wd:Q1078890"], ["wd:Q388846"], ["wd:Q3061212"], ["wd:Q131347322"], ["wd:Q322572"], ["wd:Q3222385"], ["wd:Q1108471"], ["wd:Q3205208"], ["wd:Q10468702"], ["wd:Q107293403"], ["wd:Q921612"], ["wd:Q3210583"], ["wd:Q10522506"], ["wd:Q830874"], ["wd:Q1078811"], ["wd:Q10535570"], ["wd:Q705893"], ["wd:Q3153203"], ["wd:Q974427"], ["wd:Q3793044"], ["wd:Q16939844"], ["wd:Q27243415"], ["wd:Q10551795"], ["wd:Q16089019"], ["wd:Q10493949"], ["wd:Q1079728"], ["wd:Q592902"], ["wd:Q259831"], ["wd:Q10397281"], ["wd:Q784465"], ["wd:Q1047872"], ["wd:Q3818378"], ["wd:Q10696908"], ["wd:Q10483486"], ["wd:Q10483182"], ["wd:Q1066211"], ["wd:Q10654932"], ["wd:Q4504957"], ["wd:Q3733851"], ["wd:Q918111"], ["wd:Q753141"], ["wd:Q10483506"], ["wd:Q10605121"], ["wd:Q239756"], ["wd:Q21079521"], ["wd:Q18693284"], ["wd:Q1188701"], ["wd:Q110323714"], ["wd:Q1187530"], ["wd:Q837070"], ["wd:Q10714831"], ["wd:Q10705206"], ["wd:Q3224616"], ["wd:Q131347319"], ["wd:Q10661700"], ["wd:Q10551751"], ["wd:Q15260475"], ["wd:Q265203"], ["wd:Q2276637"], ["wd:Q10697935"], ["wd:Q5347794"], ["wd:Q98098574"], ["wd:Q131347317"], ["wd:Q10551815"], ["wd:Q64768851"], ["wd:Q1141100"], ["wd:Q4973909"], ["wd:Q10687404"], ["wd:Q131347315"], ["wd:Q2703659"], ["wd:Q221354"], ["wd:Q10686490"], ["wd:Q4766801"], ["wd:Q761987"], ["wd:Q10468727"], ["wd:Q165651"]], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:2253 kg:8473 . } UNION \",\n        \"{ ?film kg:2253 kg:6905 . } UNION \",\n        \"{ ?film kg:2253 kg:6967 . } UNION \",\n        \"{ ?film kg:2253 kg:3385 . } UNION \",\n        \"{ ?film kg:2253 kg:9987 . } UNION \",\n        \"{ ?film kg:8834 kg:8473 . } UNION \",\n        \"{ ?film kg:8834 kg:6905 . } UNION \",\n        \"{ ?film kg:8834 kg:6967 . } UNION \",\n        \"{ ?film kg:8834 kg:3385 . } UNION \",\n        \"{ ?film kg:8834 kg:9987 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:2253 kg:8473 . } UNION { ?film kg:2253 kg:6905 . } UNION { ?film kg:2253 kg:6967 . } UNION { ?film kg:2253 kg:3385 . } UNION { ?film kg:2253 kg:9987 . } UNION { ?film kg:8834 kg:8473 . } UNION { ?film kg:8834 kg:6905 . } UNION { ?film kg:8834 kg:6967 . } UNION { ?film kg:8834 kg:3385 . } UNION { ?film kg:8834 kg:9987 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"{\",\n      \"?composer wdt:P31 wd:Q5.\",\n      \"?composer wdt:P800 wd:Q249678.\",\n      \"?composer wdt:P57 wd:Q1060169.\",\n      \"?composer wdt:P58 wd:Q1060169.\",\n      \"?composer wdt:P345 wd:Q1060169.\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5.\",\n      \"?composer wdt:P800 wd:Q270537.\",\n      \"?composer wdt:P57 wd:Q270537.\",\n      \"?composer wdt:P58 wd:Q270537.\",\n      \"?composer wdt:P345 wd:Q270537.\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5.\",\n      \"?composer wdt:P800 wd:Q692289.\",\n      \"?composer wdt:P57 wd:Q692289.\",\n      \"?composer wdt:P345 wd:Q692289.\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5.\",\n      \"?composer wdt:P725 wd:Q1060169.\",\n      \"?composer wdt:P58 wd:Q483118.\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?composer WHERE { { ?composer wdt:P31 wd:Q5. ?composer wdt:P800 wd:Q249678. ?composer wdt:P57 wd:Q1060169. ?composer wdt:P58 wd:Q1060169. ?composer wdt:P345 wd:Q1060169. } UNION { ?composer wdt:P31 wd:Q5. ?composer wdt:P800 wd:Q270537. ?composer wdt:P57 wd:Q270537. ?composer wdt:P58 wd:Q270537. ?composer wdt:P345 wd:Q270537. } UNION { ?composer wdt:P31 wd:Q5. ?composer wdt:P800 wd:Q692289. ?composer wdt:P57 wd:Q692289. ?composer wdt:P345 wd:Q692289. } UNION { ?composer wdt:P31 wd:Q5. ?composer wdt:P725 wd:Q1060169. ?composer wdt:P58 wd:Q483118. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q550196 wdt:P86 ?composer.\",\n          \"?composer wdt:P57 wd:Q43229; wdt:P161 wd:Q43229; wdt:P344 wd:Q43229.\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"wd:Q550196 wdt:P86 ?composer.\",\n          \"?composer wdt:P57 wd:Q192115; wdt:P161 wd:Q192115; wdt:P344 wd:Q192115.\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"wd:Q550196 wdt:P86 ?composer.\",\n          \"?composer wdt:P57 wd:Q1653396; wdt:P161 wd:Q1653396; wdt:P344 wd:Q1653396.\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"wd:Q550196 wdt:P86 ?composer.\",\n          \"?composer wdt:P57 wd:Q656357; wdt:P161 wd:Q656357; wdt:P344 wd:Q656357.\",\n        \"}\",\n      \"BIND(?composer AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q550196 wdt:P86 ?composer. ?composer wdt:P57 wd:Q43229; wdt:P161 wd:Q43229; wdt:P344 wd:Q43229. } UNION { wd:Q550196 wdt:P86 ?composer. ?composer wdt:P57 wd:Q192115; wdt:P161 wd:Q192115; wdt:P344 wd:Q192115. } UNION { wd:Q550196 wdt:P86 ?composer. ?composer wdt:P57 wd:Q1653396; wdt:P161 wd:Q1653396; wdt:P344 wd:Q1653396. } UNION { wd:Q550196 wdt:P86 ?composer. ?composer wdt:P57 wd:Q656357; wdt:P161 wd:Q656357; wdt:P344 wd:Q656357. } BIND(?composer AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:5687 kg:6804 .\",\n          \"?resource kg:9737 kg:1669 ;\",\n                    \"?kg:4329 kg:1669 ;\",\n                    \"?kg:7674 kg:1669 .\",\n        \"}\",\n        \"UNION\",\n        \"{\",\n          \"?resource kg:5687 kg:6804 .\",\n          \"?resource kg:9737 kg:0943 ;\",\n                    \"?kg:4329 kg:0943 ;\",\n                    \"?kg:7674 kg:0943 .\",\n        \"}\",\n        \"UNION\",\n        \"{\",\n          \"?resource kg:5687 kg:6804 .\",\n          \"?resource kg:9737 kg:7667 ;\",\n                    \"?kg:4329 kg:7667 ;\",\n                    \"?kg:7674 kg:7667 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5687 kg:6804 . ?resource kg:9737 kg:1669 ; ?kg:4329 kg:1669 ; ?kg:7674 kg:1669 . } UNION { ?resource kg:5687 kg:6804 . ?resource kg:9737 kg:0943 ; ?kg:4329 kg:0943 ; ?kg:7674 kg:0943 . } UNION { ?resource kg:5687 kg:6804 . ?resource kg:9737 kg:7667 ; ?kg:4329 kg:7667 ; ?kg:7674 kg:7667 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n      \"{\",\n        \"?composer wdt:P31 wd:Q5.\",\n        \"?composer wdt:P800 wd:Q249678.\",\n        \"?composer wdt:P800 wd:Q249679.\",\n      \"} UNION {\",\n        \"?composer wdt:P31 wd:Q5.\",\n        \"?composer wdt:P58 ?film_edited.\",\n        \"?film_edited wdt:P31 wd:Q11424.\",\n        \"?film_edited wdt:P1476 wd:Q109613896.\",\n      \"} UNION {\",\n        \"?composer wdt:P31 wd:Q5.\",\n        \"?composer wdt:P58 ?film_starred.\",\n        \"?film_starred wdt:P31 wd:Q11424.\",\n        \"?film_starred wdt:P161 ?composer.\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { { ?composer wdt:P31 wd:Q5. ?composer wdt:P800 wd:Q249678. ?composer wdt:P800 wd:Q249679. } UNION { ?composer wdt:P31 wd:Q5. ?composer wdt:P58 ?film_edited. ?film_edited wdt:P31 wd:Q11424. ?film_edited wdt:P1476 wd:Q109613896. } UNION { ?composer wdt:P31 wd:Q5. ?composer wdt:P58 ?film_starred. ?film_starred wdt:P31 wd:Q11424. ?film_starred wdt:P161 ?composer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q470895 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q199039 wdt:P86 ?resource. } .\",\n        \"{ wd:Q238211 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q3986814 wdt:P1040 ?resource. } .\",\n        \"{ wd:Q238211 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q3986814 wdt:P161 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q470895 wdt:P86 ?resource. } UNION { wd:Q199039 wdt:P86 ?resource. } . { wd:Q238211 wdt:P1040 ?resource. } UNION { wd:Q45602 wdt:P1040 ?resource. } UNION { wd:Q3986814 wdt:P1040 ?resource. } . { wd:Q238211 wdt:P161 ?resource. } UNION { wd:Q45602 wdt:P161 ?resource. } UNION { wd:Q3986814 wdt:P161 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q882"]], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9350 kg:3584 ?composer . } UNION { kg:8907 kg:3584 ?composer . }\",\n        \"{ kg:6990 kg:1558 ?editor . } UNION { kg:2929 kg:1558 ?editor . } UNION { kg:3709 kg:1558 ?editor . }\",\n        \"{ kg:6990 kg:7599 ?star . } UNION { kg:2929 kg:7599 ?star . } UNION { kg:3709 kg:7599 ?star . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9350 kg:3584 ?composer . } UNION { kg:8907 kg:3584 ?composer . } { kg:6990 kg:1558 ?editor . } UNION { kg:2929 kg:1558 ?editor . } UNION { kg:3709 kg:1558 ?editor . } { kg:6990 kg:7599 ?star . } UNION { kg:2929 kg:7599 ?star . } UNION { kg:3709 kg:7599 ?star . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?movie WHERE {\",\n      \"?movie wdt:P31 wd:Q11424 .\",\n      \"{ ?movie wdt:P680 wd:Q560976 . } UNION \",\n      \"{ ?movie wdt:P58 wd:Q560976 . } UNION \",\n      \"{ ?movie wdt:P57 wd:Q560976 . }\",\n      \"{ ?movie wdt:P344 wd:Q120749 . } UNION \",\n      \"{ ?movie wdt:P58 wd:Q120749 . } UNION \",\n      \"{ ?movie wdt:P57 wd:Q120749 . }\",\n      \"{ ?movie wdt:P344 wd:Q120606 . } UNION \",\n      \"{ ?movie wdt:P58 wd:Q120606 . } UNION \",\n      \"{ ?movie wdt:P57 wd:Q120606 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . { ?movie wdt:P680 wd:Q560976 . } UNION { ?movie wdt:P58 wd:Q560976 . } UNION { ?movie wdt:P57 wd:Q560976 . } { ?movie wdt:P344 wd:Q120749 . } UNION { ?movie wdt:P58 wd:Q120749 . } UNION { ?movie wdt:P57 wd:Q120749 . } { ?movie wdt:P344 wd:Q120606 . } UNION { ?movie wdt:P58 wd:Q120606 . } UNION { ?movie wdt:P57 wd:Q120606 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?project WHERE {\",\n    \"{ ?project wdt:P57 dbr:Yūdai_Yamaguchi . } UNION \",\n    \"{ ?project wdt:P58 dbr:Yūdai_Yamaguchi . } UNION \",\n    \"{ ?project wdt:P609 dbr:Yūdai_Yamaguchi . } UNION \",\n    \"{ ?project wdt:P57 dbr:Ernesto_Díaz_Espinoza . } UNION \",\n    \"{ ?project wdt:P58 dbr:Ernesto_Díaz_Espinoza . } UNION \",\n    \"{ ?project wdt:P609 dbr:Ernesto_Díaz_Espinoza . } UNION \",\n    \"{ ?project wdt:P57 dbr:Adrián_García_Bogliano . } UNION \",\n    \"{ ?project wdt:P58 dbr:Adrián_García_Bogliano . } UNION \",\n    \"{ ?project wdt:P609 dbr:Adrián_García_Bogliano . } UNION \",\n    \"{ ?project wdt:P57 dbr:Yoshihiro_Nishimura . } UNION \",\n    \"{ ?project wdt:P58 dbr:Yoshihiro_Nishimura . } UNION \",\n    \"{ ?project wdt:P609 dbr:Yoshihiro_Nishimura . }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?project WHERE { { ?project wdt:P57 dbr:Yūdai_Yamaguchi . } UNION { ?project wdt:P58 dbr:Yūdai_Yamaguchi . } UNION { ?project wdt:P609 dbr:Yūdai_Yamaguchi . } UNION { ?project wdt:P57 dbr:Ernesto_Díaz_Espinoza . } UNION { ?project wdt:P58 dbr:Ernesto_Díaz_Espinoza . } UNION { ?project wdt:P609 dbr:Ernesto_Díaz_Espinoza . } UNION { ?project wdt:P57 dbr:Adrián_García_Bogliano . } UNION { ?project wdt:P58 dbr:Adrián_García_Bogliano . } UNION { ?project wdt:P609 dbr:Adrián_García_Bogliano . } UNION { ?project wdt:P57 dbr:Yoshihiro_Nishimura . } UNION { ?project wdt:P58 dbr:Yoshihiro_Nishimura . } UNION { ?project wdt:P609 dbr:Yoshihiro_Nishimura . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q74535"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\":\n  [\n    \"SELECT ?project WHERE {\",\n      \"{ ?project wdt:P57 wd:Q4022902 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q4022902 . } UNION \",\n      \"{ ?project wdt:P1040 wd:Q4022902 . } UNION \",\n      \"{ ?project wdt:P57 wd:Q5836844 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q5836844 . } UNION \",\n      \"{ ?project wdt:P1040 wd:Q5836844 . } UNION \",\n      \"{ ?project wdt:P57 wd:Q4023328 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q4023328 . } UNION \",\n      \"{ ?project wdt:P1040 wd:Q4023328 . } UNION \",\n      \"{ ?project wdt:P57 wd:Q5658534 . } UNION \",\n      \"{ ?project wdt:P58 wd:Q5658534 . } UNION \",\n      \"{ ?project wdt:P1040 wd:Q5658534 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?project WHERE { { ?project wdt:P57 wd:Q4022902 . } UNION { ?project wdt:P58 wd:Q4022902 . } UNION { ?project wdt:P1040 wd:Q4022902 . } UNION { ?project wdt:P57 wd:Q5836844 . } UNION { ?project wdt:P58 wd:Q5836844 . } UNION { ?project wdt:P1040 wd:Q5836844 . } UNION { ?project wdt:P57 wd:Q4023328 . } UNION { ?project wdt:P58 wd:Q4023328 . } UNION { ?project wdt:P1040 wd:Q4023328 . } UNION { ?project wdt:P57 wd:Q5658534 . } UNION { ?project wdt:P58 wd:Q5658534 . } UNION { ?project wdt:P1040 wd:Q5658534 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q3025926"], ["wd:Q20041714"], ["wd:Q7680607"], ["wd:Q3303813"], ["wd:Q14644726"], ["wd:Q3196679"], ["wd:Q4479"], ["wd:Q3278809"], ["wd:Q17031022"], ["wd:Q113564919"], ["wd:Q15789889"], ["wd:Q107489413"], ["wd:Q4185689"], ["wd:Q15040686"], ["wd:Q2097243"], ["wd:Q14917908"], ["wd:Q7912980"], ["wd:Q8047273"], ["wd:Q23758675"], ["wd:Q6135156"], ["wd:Q5245529"], ["wd:Q5785753"], ["wd:Q7758473"], ["wd:Q11267611"], ["wd:Q74535"], ["wd:Q11345791"], ["wd:Q117661591"], ["wd:Q1644593"], ["wd:Q210744"], ["wd:Q11327985"], ["wd:Q75267360"], ["wd:Q30911363"], ["wd:Q2827739"], ["wd:Q18590634"], ["wd:Q86753196"], ["wd:Q18393811"]], "gold": [["wd:Q74535"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:5097 kg:6145 . } UNION \",\n        \"{ ?resource kg:5097 kg:2932 . } UNION \",\n        \"{ ?resource kg:5097 kg:4231 . } UNION \",\n        \"{ ?resource kg:5097 kg:4009 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5097 kg:6145 . } UNION { ?resource kg:5097 kg:2932 . } UNION { ?resource kg:5097 kg:4231 . } UNION { ?resource kg:5097 kg:4009 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P58 ?editor .\",\n        \"?editor wdt:P673 wd:Q10960786 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P58 ?writer .\",\n        \"?writer wdt:P673 wd:Q10960786 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P58 ?producer .\",\n        \"?producer wdt:P673 wd:Q10960786 .\",\n      \"}\",\n      \"{\",\n        \"?film wdt:P1476 wd:Q20823050 .\",\n      \"} UNION {\",\n        \"?film wdt:P1476 wd:Q196944 .\",\n      \"} UNION {\",\n        \"?film wdt:P1476 wd:Q2385099 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?editor . ?editor wdt:P673 wd:Q10960786 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?writer . ?writer wdt:P673 wd:Q10960786 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?producer . ?producer wdt:P673 wd:Q10960786 . } { ?film wdt:P1476 wd:Q20823050 . } UNION { ?film wdt:P1476 wd:Q196944 . } UNION { ?film wdt:P1476 wd:Q2385099 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q7042855 wdt:P1040 ?filmEditor. } UNION \",\n        \"{ wd:Q7042855 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q7042855 wdt:P1431 ?executiveProducer. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q7042855 wdt:P1040 ?filmEditor. } UNION { wd:Q7042855 wdt:P58 ?writer. } UNION { wd:Q7042855 wdt:P1431 ?executiveProducer. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1433 kg:6055 . } UNION \",\n        \"{ ?resource kg:1433 kg:6357 . } UNION \",\n        \"{ ?resource kg:1433 kg:9419 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1433 kg:6055 . } UNION { ?resource kg:1433 kg:6357 . } UNION { ?resource kg:1433 kg:9419 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer WHERE {\",\n    \"{\",\n      \"?movie1 wdt:P31 wd:Q11424 .\",\n      \"?movie1 rdfs:label \\\"Fate\\\"@en .\",\n      \"?movie1 wdt:P162 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie2 wdt:P31 wd:Q11424 .\",\n      \"?movie2 rdfs:label \\\"The Confession\\\"@en .\",\n      \"?movie2 wdt:P162 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie3 wdt:P31 wd:Q11424 .\",\n      \"?movie3 rdfs:label \\\"The Waiting Room\\\"@en .\",\n      \"?movie3 wdt:P162 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie1 wdt:P8205 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie2 wdt:P8205 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie3 wdt:P8205 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie1 wdt:P58 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie2 wdt:P58 ?producer .\",\n    \"}\",\n    \"{\",\n      \"?movie3 wdt:P58 ?producer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { { ?movie1 wdt:P31 wd:Q11424 . ?movie1 rdfs:label \"Fate\"@en . ?movie1 wdt:P162 ?producer . } { ?movie2 wdt:P31 wd:Q11424 . ?movie2 rdfs:label \"The Confession\"@en . ?movie2 wdt:P162 ?producer . } { ?movie3 wdt:P31 wd:Q11424 . ?movie3 rdfs:label \"The Waiting Room\"@en . ?movie3 wdt:P162 ?producer . } { ?movie1 wdt:P8205 ?producer . } { ?movie2 wdt:P8205 ?producer . } { ?movie3 wdt:P8205 ?producer . } { ?movie1 wdt:P58 ?producer . } { ?movie2 wdt:P58 ?producer . } { ?movie3 wdt:P58 ?producer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?producer WHERE {\",\n        \"{ wd:Q5437360 wdt:P1431 ?producer. } UNION \",\n        \"{ wd:Q5437360 wdt:P1040 ?producer. } UNION \",\n        \"{ wd:Q5437360 wdt:P58 ?producer. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { { wd:Q5437360 wdt:P1431 ?producer. } UNION { wd:Q5437360 wdt:P1040 ?producer. } UNION { wd:Q5437360 wdt:P58 ?producer. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?producer WHERE {\",\n        \"{ kg:0001 kg:1754 ?occupation . } UNION \",\n        \"{ kg:9766 kg:1754 ?occupation . } UNION \",\n        \"{ kg:1742 kg:1754 ?occupation . }\",\n      \"FILTER (?occupation IN (kg:8750, kg:6372, kg:0075))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { { kg:0001 kg:1754 ?occupation . } UNION { kg:9766 kg:1754 ?occupation . } UNION { kg:1742 kg:1754 ?occupation . } FILTER (?occupation IN (kg:8750, kg:6372, kg:0075)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?writerEditor WHERE {\",\n    \"{\",\n      \"?writerEditor wdt:P31 wd:Q5 .\",\n      \"?writerEditor wdt:P26 wd:Q90487 .\",\n      \"?writerEditor wdt:P50 wd:Q1214 .\",\n    \"} UNION {\",\n      \"?writerEditor wdt:P31 wd:Q5 .\",\n      \"?writerEditor wdt:P26 wd:Q90487 .\",\n      \"?writerEditor wdt:P1435 wd:Q1214 .\",\n    \"}\",\n    \"{\",\n      \"wd:Q1214 p:P50 ?statement .\",\n      \"?statement ps:P50 ?writerEditor .\",\n      \"?statement pq:P642 wd:Q90487 .\",\n    \"} UNION {\",\n      \"wd:Q1214 p:P1435 ?statement .\",\n      \"?statement ps:P1435 ?writerEditor .\",\n      \"?statement pq:P642 wd:Q90487 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?writerEditor WHERE { { ?writerEditor wdt:P31 wd:Q5 . ?writerEditor wdt:P26 wd:Q90487 . ?writerEditor wdt:P50 wd:Q1214 . } UNION { ?writerEditor wdt:P31 wd:Q5 . ?writerEditor wdt:P26 wd:Q90487 . ?writerEditor wdt:P1435 wd:Q1214 . } { wd:Q1214 p:P50 ?statement . ?statement ps:P50 ?writerEditor . ?statement pq:P642 wd:Q90487 . } UNION { wd:Q1214 p:P1435 ?statement . ?statement ps:P1435 ?writerEditor . ?statement pq:P642 wd:Q90487 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q2493884 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q63993096 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q217069 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q2493884 wdt:P1040 ?resource. } UNION \",\n      \"{ wd:Q63993096 wdt:P1040 ?resource. } UNION \",\n      \"{ wd:Q217069 wdt:P1040 ?resource. }\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2493884 wdt:P58 ?resource. } UNION { wd:Q63993096 wdt:P58 ?resource. } UNION { wd:Q217069 wdt:P58 ?resource. } UNION { wd:Q2493884 wdt:P1040 ?resource. } UNION { wd:Q63993096 wdt:P1040 ?resource. } UNION { wd:Q217069 wdt:P1040 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4098 kg:0378 ?resource . } UNION \",\n        \"{ kg:4098 kg:3972 ?resource . } UNION \",\n        \"{ kg:7801 kg:0378 ?resource . } UNION \",\n        \"{ kg:7801 kg:3972 ?resource . } UNION \",\n        \"{ kg:6351 kg:0378 ?resource . } UNION \",\n        \"{ kg:6351 kg:3972 ?resource . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4098 kg:0378 ?resource . } UNION { kg:4098 kg:3972 ?resource . } UNION { kg:7801 kg:0378 ?resource . } UNION { kg:7801 kg:3972 ?resource . } UNION { kg:6351 kg:0378 ?resource . } UNION { kg:6351 kg:3972 ?resource . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film1 wdt:P31 wd:Q11424 .\",\n        \"?film1 rdfs:label \\\"The Floorwalker\\\"@en .\",\n        \"?film1 wdt:P57 ?director .\",\n      \"}\",\n      \"{\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label \\\"Shoulder Arms\\\"@en .\",\n        \"?film2 wdt:P57 ?director .\",\n        \"?film2 wdt:P58 ?director .\",\n        \"?film2 wdt:P161 ?director .\",\n        \"?film2 wdt:P86 ?director .\",\n      \"}\",\n      \"{\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label \\\"The Great Dictator\\\"@en .\",\n        \"?film3 wdt:P57 ?director .\",\n        \"?film3 wdt:P58 ?director .\",\n        \"?film3 wdt:P161 ?director .\",\n        \"?film3 wdt:P86 ?director .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"The Floorwalker\"@en . ?film1 wdt:P57 ?director . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"Shoulder Arms\"@en . ?film2 wdt:P57 ?director . ?film2 wdt:P58 ?director . ?film2 wdt:P161 ?director . ?film2 wdt:P86 ?director . } { ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label \"The Great Dictator\"@en . ?film3 wdt:P57 ?director . ?film3 wdt:P58 ?director . ?film3 wdt:P161 ?director . ?film3 wdt:P86 ?director . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q166739 .\",\n          \"?resource wdt:P86 wd:Q109116 ;\",\n            \"wdt:P58 wd:Q109116 ;\",\n              \"wdt:P161 wd:Q109116 .\",\n        \"}\",\n          \"{\",\n            \"?resource wdt:P57 wd:Q1140317 ;\",\n              \"wdt:P86 wd:Q1140317 ;\",\n                \"wdt:P58 wd:Q1140317 ;\",\n                  \"wdt:P161 wd:Q1140317 .\",\n          \"}\",\n        \"}\",\n    \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q166739 . ?resource wdt:P86 wd:Q109116 ; wdt:P58 wd:Q109116 ; wdt:P161 wd:Q109116 . } { ?resource wdt:P57 wd:Q1140317 ; wdt:P86 wd:Q1140317 ; wdt:P58 wd:Q1140317 ; wdt:P161 wd:Q1140317 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8521 kg:0540 .\",\n          \"?resource kg:8521 kg:6175 .\",\n          \"?resource kg:8521 kg:7067 .\",\n          \"?resource kg:2027 kg:6175 .\",\n          \"?resource kg:2027 kg:7067 .\",\n          \"?resource kg:3835 kg:6175 .\",\n          \"?resource kg:3835 kg:7067 .\",\n          \"?resource kg:4961 kg:6175 .\",\n          \"?resource kg:4961 kg:7067 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8521 kg:0540 . ?resource kg:8521 kg:6175 . ?resource kg:8521 kg:7067 . ?resource kg:2027 kg:6175 . ?resource kg:2027 kg:7067 . ?resource kg:3835 kg:6175 . ?resource kg:3835 kg:7067 . ?resource kg:4961 kg:6175 . ?resource kg:4961 kg:7067 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?cinematographer WHERE {\",\n    \"{\",\n      \"?film1 wdt:P31 wd:Q11424 .\",\n      \"?film1 rdfs:label \\\"Planet Terror\\\"@en .\",\n      \"?film1 wdt:P57 ?cinematographer .\",\n      \"?film1 wdt:P58 ?director .\",\n      \"?film1 wdt:P344 ?editor .\",\n      \"?film1 wdt:P50 ?writer .\",\n      \"?film1 wdt:P161 ?star .\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P31 wd:Q11424 .\",\n      \"?film2 rdfs:label \\\"Sin City\\\"@en .\",\n      \"?film2 wdt:P57 ?cinematographer .\",\n      \"?film2 wdt:P58 ?director .\",\n      \"?film2 wdt:P344 ?editor .\",\n      \"?film2 wdt:P50 ?writer .\",\n      \"?film2 wdt:P161 ?star .\",\n    \"}\",\n    \"FILTER(?cinematographer = ?director && ?director = ?editor && ?editor = ?writer && ?writer = ?star)\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?cinematographer WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"Planet Terror\"@en . ?film1 wdt:P57 ?cinematographer . ?film1 wdt:P58 ?director . ?film1 wdt:P344 ?editor . ?film1 wdt:P50 ?writer . ?film1 wdt:P161 ?star . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"Sin City\"@en . ?film2 wdt:P57 ?cinematographer . ?film2 wdt:P58 ?director . ?film2 wdt:P344 ?editor . ?film2 wdt:P50 ?writer . ?film2 wdt:P161 ?star . } FILTER(?cinematographer = ?director && ?director = ?editor && ?editor = ?writer && ?writer = ?star) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?cinematographer WHERE {\",\n        \"{ wd:Q1165050 wdt:P57 ?cinematographer. } UNION \",\n        \"{ wd:Q192115 wdt:P58 ?cinematographer. } UNION \",\n        \"{ wd:Q1165050 wdt:P344 ?cinematographer. } UNION \",\n        \"{ wd:Q192115 wdt:P161 ?cinematographer. } UNION \",\n        \"{ wd:Q1165050 wdt:P1040 ?cinematographer. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { { wd:Q1165050 wdt:P57 ?cinematographer. } UNION { wd:Q192115 wdt:P58 ?cinematographer. } UNION { wd:Q1165050 wdt:P344 ?cinematographer. } UNION { wd:Q192115 wdt:P161 ?cinematographer. } UNION { wd:Q1165050 wdt:P1040 ?cinematographer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q134133"], ["wd:Q335587"], ["wd:Q265547"], ["wd:Q503027"], ["wd:Q729618"], ["wd:Q4790350"], ["wd:Q183178"], ["wd:Q5127328"], ["wd:Q230817"], ["wd:Q1344405"], ["wd:Q3833357"], ["wd:Q228871"], ["wd:Q511255"], ["wd:Q193668"], ["wd:Q192887"], ["wd:Q228692"], ["wd:Q3059246"], ["wd:Q303957"], ["wd:Q47284"], ["wd:Q7707912"], ["wd:Q207676"], ["wd:Q6162394"], ["wd:Q213574"], ["wd:Q733776"], ["wd:Q24045732"], ["wd:Q1985488"], ["wd:Q7291478"], ["wd:Q178552"], ["wd:Q220584"], ["wd:Q233038"], ["wd:Q483148"], ["wd:Q483771"], ["wd:Q44077"], ["wd:Q2680"], ["wd:Q168847"], ["wd:Q235072"], ["wd:Q4124915"]], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8571 kg:6254 ?resource . } UNION \",\n        \"{ kg:8571 kg:4600 ?resource . } UNION \",\n        \"{ kg:8571 kg:9668 ?resource . } UNION \",\n        \"{ kg:8571 kg:7569 ?resource . } UNION \",\n        \"{ kg:8571 kg:4610 ?resource . }\",\n      \"}\",\n      \"{\",\n        \"{ kg:7570 kg:6254 ?resource . } UNION \",\n        \"{ kg:7570 kg:4600 ?resource . } UNION \",\n        \"{ kg:7570 kg:9668 ?resource . } UNION \",\n        \"{ kg:7570 kg:7569 ?resource . } UNION \",\n        \"{ kg:7570 kg:4610 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8571 kg:6254 ?resource . } UNION { kg:8571 kg:4600 ?resource . } UNION { kg:8571 kg:9668 ?resource . } UNION { kg:8571 kg:7569 ?resource . } UNION { kg:8571 kg:4610 ?resource . } } { { kg:7570 kg:6254 ?resource . } UNION { kg:7570 kg:4600 ?resource . } UNION { kg:7570 kg:9668 ?resource . } UNION { kg:7570 kg:7569 ?resource . } UNION { kg:7570 kg:4610 ?resource . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"{\",\n      \"?resource wdt:P496 wd:Q208729 .\",\n      \"?resource wdt:P58 wd:Q208729 .\",\n      \"?resource p:P161 ?casting1 .\",\n      \"?casting1 ps:P161 wd:Q433690 .\",\n    \"}\",\n    \"{\",\n      \"?resource p:P161 ?casting2 .\",\n      \"?casting2 ps:P161 wd:Q578117 .\",\n    \"}\",\n    \"{\",\n      \"?resource p:P161 ?casting3 .\",\n      \"?casting3 ps:P161 wd:Q49042 .\",\n    \"}\",\n    \"{\",\n      \"?resource p:P161 ?casting4 .\",\n      \"?casting4 ps:P161 wd:Q578113 .\",\n    \"}\",\n    \"{\",\n      \"?resource p:P161 ?casting5 .\",\n      \"?casting5 ps:P161 wd:Q209808 .\",\n    \"}\",\n    \"{\",\n      \"?resource p:P161 ?casting6 .\",\n      \"?casting6 ps:P161 wd:Q4753689 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . { ?resource wdt:P496 wd:Q208729 . ?resource wdt:P58 wd:Q208729 . ?resource p:P161 ?casting1 . ?casting1 ps:P161 wd:Q433690 . } { ?resource p:P161 ?casting2 . ?casting2 ps:P161 wd:Q578117 . } { ?resource p:P161 ?casting3 . ?casting3 ps:P161 wd:Q49042 . } { ?resource p:P161 ?casting4 . ?casting4 ps:P161 wd:Q578113 . } { ?resource p:P161 ?casting5 . ?casting5 ps:P161 wd:Q209808 . } { ?resource p:P161 ?casting6 . ?casting6 ps:P161 wd:Q4753689 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q3485595 .\",\n          \"?resource wdt:P344 wd:Q3485595 .\",\n          \"?resource wdt:P161 wd:Q57656907 .\",\n          \"?resource wdt:P161 wd:Q2085 .\",\n          \"?resource wdt:P161 wd:Q507285 .\",\n          \"?resource wdt:P161 wd:Q862058 .\",\n          \"?resource wdt:P161 wd:Q114819 .\",\n          \"?resource wdt:P161 wd:Q3641257 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P1040 wd:Q3485595 . ?resource wdt:P344 wd:Q3485595 . ?resource wdt:P161 wd:Q57656907 . ?resource wdt:P161 wd:Q2085 . ?resource wdt:P161 wd:Q507285 . ?resource wdt:P161 wd:Q862058 . ?resource wdt:P161 wd:Q114819 . ?resource wdt:P161 wd:Q3641257 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9765 kg:5484 .\",\n          \"?resource kg:7911 kg:5484 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:8903 kg:9422 .\",\n          \"?resource kg:8903 kg:6104 .\",\n          \"?resource kg:8903 kg:9344 .\",\n          \"?resource kg:8903 kg:2112 .\",\n          \"?resource kg:8903 kg:9491 .\",\n          \"?resource kg:8903 kg:4868 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9765 kg:5484 . ?resource kg:7911 kg:5484 . } { ?resource kg:8903 kg:9422 . ?resource kg:8903 kg:6104 . ?resource kg:8903 kg:9344 . ?resource kg:8903 kg:2112 . ?resource kg:8903 kg:9491 . ?resource kg:8903 kg:4868 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 wd:Q48970 .\",\n    \"?resource wdt:P106 wd:Q36180 .\",\n    \"?resource wdt:P106 wd:Q2526255 .\",\n    \"?resource wdt:P106 wd:Q497114 .\",\n    \"?resource wdt:P3320 wd:Q844707 .\",\n    \"?resource wdt:P3320 wd:Q535141 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q48970 . ?resource wdt:P106 wd:Q36180 . ?resource wdt:P106 wd:Q2526255 . ?resource wdt:P106 wd:Q497114 . ?resource wdt:P3320 wd:Q844707 . ?resource wdt:P3320 wd:Q535141 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q2493884.} UNION {?resource wdt:P57 wd:Q2298257.}\",\n        \"{?resource wdt:P58 wd:Q2493884.} UNION {?resource wdt:P58 wd:Q2298257.}\",\n        \"{?resource wdt:P1040 wd:Q2493884.} UNION {?resource wdt:P1040 wd:Q2298257.}\",\n        \"?resource wdt:P26 wd:Q312258.\",\n        \"?resource wdt:P737 wd:Q312258.\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q2493884.} UNION {?resource wdt:P57 wd:Q2298257.} {?resource wdt:P58 wd:Q2493884.} UNION {?resource wdt:P58 wd:Q2298257.} {?resource wdt:P1040 wd:Q2493884.} UNION {?resource wdt:P1040 wd:Q2298257.} ?resource wdt:P26 wd:Q312258. ?resource wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:6708 kg:0393 . } UNION \",\n        \"{ ?resource kg:2694 kg:6708 . } UNION \",\n        \"{ ?resource kg:0393 kg:9098 . } UNION \",\n        \"{ ?resource kg:2694 kg:9098 . } UNION \",\n        \"{ ?resource kg:0393 kg:5087 . } UNION \",\n        \"{ ?resource kg:2694 kg:5087 . } UNION \",\n        \"{ ?resource kg:5873 kg:6337 . } UNION \",\n        \"{ ?resource kg:9175 kg:6337 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6708 kg:0393 . } UNION { ?resource kg:2694 kg:6708 . } UNION { ?resource kg:0393 kg:9098 . } UNION { ?resource kg:2694 kg:9098 . } UNION { ?resource kg:0393 kg:5087 . } UNION { ?resource kg:2694 kg:5087 . } UNION { ?resource kg:5873 kg:6337 . } UNION { ?resource kg:9175 kg:6337 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?editor ?executiveProducer ?cinematographer WHERE {\",\n      \"{\",\n        \"?film1 wdt:P31 wd:Q11424 .\",\n        \"?film1 rdfs:label 'The Confession'@en .\",\n        \"?film1 wdt:P98 ?editor .\",\n        \"?film1 wdt:P162 ?executiveProducer .\",\n        \"?film1 wdt:P345 ?cinematographer .\",\n      \"}\",\n      \"{\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label 'Destiny'@en .\",\n        \"?film2 wdt:P57 ?editor .\",\n        \"?film2 wdt:P58 ?executiveProducer .\",\n        \"?film2 wdt:P345 ?cinematographer .\",\n      \"}\",\n      \"{\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label 'The Waiting Room'@en .\",\n        \"?film3 wdt:P57 ?editor .\",\n        \"?film3 wdt:P58 ?executiveProducer .\",\n        \"?film3 wdt:P345 ?cinematographer .\",\n      \"}\",\n      \"{\",\n        \"?film4 wdt:P31 wd:Q11424 .\",\n        \"?film4 rdfs:label 'The Third Page'@en .\",\n        \"?film4 wdt:P57 ?editor .\",\n        \"?film4 wdt:P58 ?executiveProducer .\",\n        \"?film4 wdt:P345 ?cinematographer .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor ?executiveProducer ?cinematographer WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label 'The Confession'@en . ?film1 wdt:P98 ?editor . ?film1 wdt:P162 ?executiveProducer . ?film1 wdt:P345 ?cinematographer . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label 'Destiny'@en . ?film2 wdt:P57 ?editor . ?film2 wdt:P58 ?executiveProducer . ?film2 wdt:P345 ?cinematographer . } { ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label 'The Waiting Room'@en . ?film3 wdt:P57 ?editor . ?film3 wdt:P58 ?executiveProducer . ?film3 wdt:P345 ?cinematographer . } { ?film4 wdt:P31 wd:Q11424 . ?film4 rdfs:label 'The Third Page'@en . ?film4 wdt:P57 ?editor . ?film4 wdt:P58 ?executiveProducer . ?film4 wdt:P345 ?cinematographer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q12813010 wdt:P1040 ?editor . } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?executiveProducer . } UNION \",\n        \"{ wd:Q12813010 wdt:P344 ?cinematographer . }\",\n      \"}\",\n      \"{ ?resource wdt:P58 wd:Q6099428 ; wdt:P58 wd:Q6084069 ; wdt:P58 wd:Q5265241 . } UNION \",\n      \"{ ?resource wdt:P161 wd:Q6099428 ; wdt:P161 wd:Q6084069 ; wdt:P161 wd:Q5265241 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q12813010 wdt:P1040 ?editor . } UNION { wd:Q12813010 wdt:P1431 ?executiveProducer . } UNION { wd:Q12813010 wdt:P344 ?cinematographer . } } { ?resource wdt:P58 wd:Q6099428 ; wdt:P58 wd:Q6084069 ; wdt:P58 wd:Q5265241 . } UNION { ?resource wdt:P161 wd:Q6099428 ; wdt:P161 wd:Q6084069 ; wdt:P161 wd:Q5265241 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:4163 kg:9523 .\",\n          \"?resource kg:6971 kg:9523 .\",\n          \"?resource kg:8006 kg:9523 .\",\n          \"?resource kg:2874 ?film .\",\n          \"?resource kg:2123 ?film .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource kg:4163 kg:9523 .\",\n          \"?resource kg:6971 kg:9523 .\",\n          \"?resource kg:8006 kg:9523 .\",\n          \"?resource kg:2874 ?film .\",\n          \"?resource kg:2123 ?film .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource kg:4163 kg:9523 .\",\n          \"?resource kg:6971 kg:9523 .\",\n          \"?resource kg:8006 kg:9523 .\",\n          \"?resource kg:2874 ?film .\",\n          \"?resource kg:2123 ?film .\",\n        \"}\",\n      \"FILTER (?film IN (kg:9946, kg:0948, kg:3463))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:4163 kg:9523 . ?resource kg:6971 kg:9523 . ?resource kg:8006 kg:9523 . ?resource kg:2874 ?film . ?resource kg:2123 ?film . } UNION { ?resource kg:4163 kg:9523 . ?resource kg:6971 kg:9523 . ?resource kg:8006 kg:9523 . ?resource kg:2874 ?film . ?resource kg:2123 ?film . } UNION { ?resource kg:4163 kg:9523 . ?resource kg:6971 kg:9523 . ?resource kg:8006 kg:9523 . ?resource kg:2874 ?film . ?resource kg:2123 ?film . } FILTER (?film IN (kg:9946, kg:0948, kg:3463)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?filmEditor WHERE {\",\n    \"{\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 ?filmEditor .\",\n      \"?film wdt:P58 ?filmEditor .\",\n      \"?film wdt:P50 ?filmEditor .\",\n      \"VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926}\",\n    \"} UNION {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P50 ?filmEditor .\",\n      \"VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926}\",\n    \"} UNION {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 ?filmEditor .\",\n      \"VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926}\",\n    \"} UNION {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P58 ?filmEditor .\",\n      \"VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926}\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?filmEditor WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?filmEditor . ?film wdt:P58 ?filmEditor . ?film wdt:P50 ?filmEditor . VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926} } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P50 ?filmEditor . VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926} } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?filmEditor . VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926} } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?filmEditor . VALUES ?film {wd:Q163924 wd:Q180847 wd:Q163925 wd:Q163926} } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q199039 .\",\n          \"?resource wdt:P58 wd:Q199039 .\",\n          \"?resource wdt:P1040 wd:Q199039 .\",\n        \"} UNION {\",\n          \"?resource wdt:P57 wd:Q2445896 .\",\n          \"?resource wdt:P58 wd:Q2445896 .\",\n          \"?resource wdt:P1040 wd:Q2445896 .\",\n        \"} UNION {\",\n          \"?resource wdt:P57 wd:Q166739 .\",\n          \"?resource wdt:P58 wd:Q166739 .\",\n          \"?resource wdt:P1040 wd:Q166739 .\",\n        \"} UNION {\",\n          \"?resource wdt:P57 wd:Q45602 .\",\n          \"?resource wdt:P58 wd:Q45602 .\",\n          \"?resource wdt:P1040 wd:Q45602 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q199039 . ?resource wdt:P58 wd:Q199039 . ?resource wdt:P1040 wd:Q199039 . } UNION { ?resource wdt:P57 wd:Q2445896 . ?resource wdt:P58 wd:Q2445896 . ?resource wdt:P1040 wd:Q2445896 . } UNION { ?resource wdt:P57 wd:Q166739 . ?resource wdt:P58 wd:Q166739 . ?resource wdt:P1040 wd:Q166739 . } UNION { ?resource wdt:P57 wd:Q45602 . ?resource wdt:P58 wd:Q45602 . ?resource wdt:P1040 wd:Q45602 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8046 kg:1978 .\",\n          \"?resource kg:3822 kg:7167 .\",\n          \"?resource kg:6336 kg:7167 .\",\n          \"?resource kg:8783 kg:7167 .\",\n        \"} UNION {\",\n          \"?resource kg:8046 kg:1978 .\",\n          \"?resource kg:3822 kg:8148 .\",\n          \"?resource kg:6336 kg:8148 .\",\n          \"?resource kg:8783 kg:8148 .\",\n        \"} UNION {\",\n          \"?resource kg:8046 kg:1978 .\",\n          \"?resource kg:3822 kg:7742 .\",\n          \"?resource kg:6336 kg:7742 .\",\n          \"?resource kg:8783 kg:7742 .\",\n        \"} UNION {\",\n          \"?resource kg:8046 kg:1978 .\",\n          \"?resource kg:3822 kg:9435 .\",\n          \"?resource kg:6336 kg:9435 .\",\n          \"?resource kg:8783 kg:9435 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8046 kg:1978 . ?resource kg:3822 kg:7167 . ?resource kg:6336 kg:7167 . ?resource kg:8783 kg:7167 . } UNION { ?resource kg:8046 kg:1978 . ?resource kg:3822 kg:8148 . ?resource kg:6336 kg:8148 . ?resource kg:8783 kg:8148 . } UNION { ?resource kg:8046 kg:1978 . ?resource kg:3822 kg:7742 . ?resource kg:6336 kg:7742 . ?resource kg:8783 kg:7742 . } UNION { ?resource kg:8046 kg:1978 . ?resource kg:3822 kg:9435 . ?resource kg:6336 kg:9435 . ?resource kg:8783 kg:9435 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P31 wd:Q5 . } UNION \",\n      \"{ ?resource wdt:P31 wd:Q2831380 . } UNION \",\n      \"{ ?resource wdt:P31 wd:Q667077 . }\",\n      \"?resource wdt:P50 wd:Q104994496 .\",\n      \"?resource wdt:P162 wd:Q104994496 .\",\n      \"?resource wdt:P837 wd:Q104994496 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . } UNION { ?resource wdt:P31 wd:Q2831380 . } UNION { ?resource wdt:P31 wd:Q667077 . } ?resource wdt:P50 wd:Q104994496 . ?resource wdt:P162 wd:Q104994496 . ?resource wdt:P837 wd:Q104994496 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q6084069 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q6084069 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q6084069 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q5437360 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q5437360 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q5437360 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P1040 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q6084069 wdt:P58 ?resource. } UNION { wd:Q6084069 wdt:P1431 ?resource. } UNION { wd:Q6084069 wdt:P1040 ?resource. } UNION { wd:Q5437360 wdt:P58 ?resource. } UNION { wd:Q5437360 wdt:P1431 ?resource. } UNION { wd:Q5437360 wdt:P1040 ?resource. } UNION { wd:Q12813010 wdt:P58 ?resource. } UNION { wd:Q12813010 wdt:P1431 ?resource. } UNION { wd:Q12813010 wdt:P1040 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q34670"], ["wd:Q187261"]], "gold": [["wd:Q187261"]]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3108 kg:2878 ?resource. } UNION \",\n        \"{ kg:3108 kg:0403 ?resource. } UNION \",\n        \"{ kg:3108 kg:0108 ?resource. } UNION \",\n        \"{ kg:7304 kg:2878 ?resource. } UNION \",\n        \"{ kg:7304 kg:0403 ?resource. } UNION \",\n        \"{ kg:7304 kg:0108 ?resource. } UNION \",\n        \"{ kg:7556 kg:2878 ?resource. } UNION \",\n        \"{ kg:7556 kg:0403 ?resource. } UNION \",\n        \"{ kg:7556 kg:0108 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3108 kg:2878 ?resource. } UNION { kg:3108 kg:0403 ?resource. } UNION { kg:3108 kg:0108 ?resource. } UNION { kg:7304 kg:2878 ?resource. } UNION { kg:7304 kg:0403 ?resource. } UNION { kg:7304 kg:0108 ?resource. } UNION { kg:7556 kg:2878 ?resource. } UNION { kg:7556 kg:0403 ?resource. } UNION { kg:7556 kg:0108 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"{ ?film wdt:P57 ?director . } UNION { ?film wdt:P58 ?writer . }\",\n    \"VALUES ?directorWriter { wd:Q1236490 wd:Q310688 wd:Q313769 wd:Q332087 wd:Q123516 }\",\n    \"{ ?film wdt:P57 ?directorWriter . } UNION { ?film wdt:P58 ?directorWriter . }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 ?director . } UNION { ?film wdt:P58 ?writer . } VALUES ?directorWriter { wd:Q1236490 wd:Q310688 wd:Q313769 wd:Q332087 wd:Q123516 } { ?film wdt:P57 ?directorWriter . } UNION { ?film wdt:P58 ?directorWriter . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P57 wd:Q982339.} UNION \",\n        \"{?film wdt:P57 wd:Q116760.} UNION \",\n        \"{?film wdt:P57 wd:Q1424.} UNION \",\n        \"{?film wdt:P58 wd:Q982339.} UNION \",\n        \"{?film wdt:P58 wd:Q1033656.} UNION \",\n        \"{?film wdt:P57 wd:Q7546.} UNION \",\n        \"{?film wdt:P57 wd:Q1365463.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { {?film wdt:P57 wd:Q982339.} UNION {?film wdt:P57 wd:Q116760.} UNION {?film wdt:P57 wd:Q1424.} UNION {?film wdt:P58 wd:Q982339.} UNION {?film wdt:P58 wd:Q1033656.} UNION {?film wdt:P57 wd:Q7546.} UNION {?film wdt:P57 wd:Q1365463.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q18244154"], ["wd:Q131347324"], ["wd:Q10713021"], ["wd:Q10543669"], ["wd:Q110323716"], ["wd:Q10525888"], ["wd:Q10709340"], ["wd:Q10407473"], ["wd:Q464651"], ["wd:Q587498"], ["wd:Q638848"], ["wd:Q3230918"], ["wd:Q11883513"], ["wd:Q10493843"], ["wd:Q10551036"], ["wd:Q4010254"], ["wd:Q10494287"], ["wd:Q16159795"], ["wd:Q10685281"], ["wd:Q3089372"], ["wd:Q10636075"], ["wd:Q428617"], ["wd:Q917248"], ["wd:Q10484255"], ["wd:Q677912"], ["wd:Q10524946"], ["wd:Q131347321"], ["wd:Q10502181"], ["wd:Q695255"], ["wd:Q3485340"], ["wd:Q318827"], ["wd:Q3355411"], ["wd:Q12043076"], ["wd:Q14955344"], ["wd:Q10437110"], ["wd:Q4660699"], ["wd:Q61672517"], ["wd:Q14624572"], ["wd:Q28153912"], ["wd:Q14955486"], ["wd:Q111802410"], ["wd:Q3134339"], ["wd:Q10483414"], ["wd:Q217189"], ["wd:Q10517359"], ["wd:Q901217"], ["wd:Q10603963"], ["wd:Q1651543"], ["wd:Q388920"], ["wd:Q10688402"], ["wd:Q106590507"], ["wd:Q7111668"], ["wd:Q3613646"], ["wd:Q3887728"], ["wd:Q10533215"], ["wd:Q98970250"], ["wd:Q2755257"], ["wd:Q2276647"], ["wd:Q842067"], ["wd:Q10493804"], ["wd:Q1091856"], ["wd:Q14624181"], ["wd:Q18331"], ["wd:Q260365"], ["wd:Q1091180"], ["wd:Q59725709"], ["wd:Q10672434"], ["wd:Q10725673"], ["wd:Q10501456"], ["wd:Q18239069"], ["wd:Q10469913"], ["wd:Q10684438"], ["wd:Q10620402"], ["wd:Q572931"], ["wd:Q10498989"], ["wd:Q4993673"], ["wd:Q14956557"], ["wd:Q10714830"], ["wd:Q18289932"], ["wd:Q10689518"], ["wd:Q10544662"], ["wd:Q10551775"], ["wd:Q463907"], ["wd:Q10431949"], ["wd:Q10470135"], ["wd:Q10551035"], ["wd:Q10538951"], ["wd:Q222633"], ["wd:Q110323715"], ["wd:Q18242683"], ["wd:Q10505280"], ["wd:Q17383951"], ["wd:Q10709582"], ["wd:Q10500898"], ["wd:Q3035815"], ["wd:Q10593152"], ["wd:Q3799052"], ["wd:Q29112253"], ["wd:Q694762"], ["wd:Q1141459"], ["wd:Q5975957"], ["wd:Q10405097"], ["wd:Q425669"], ["wd:Q10495181"], ["wd:Q11873769"], ["wd:Q10540168"], ["wd:Q5100994"], ["wd:Q10614442"], ["wd:Q10609553"], ["wd:Q2054210"], ["wd:Q18243871"], ["wd:Q1078890"], ["wd:Q388846"], ["wd:Q3061212"], ["wd:Q131347322"], ["wd:Q322572"], ["wd:Q3222385"], ["wd:Q1108471"], ["wd:Q3205208"], ["wd:Q10468702"], ["wd:Q107293403"], ["wd:Q921612"], ["wd:Q3210583"], ["wd:Q10522506"], ["wd:Q830874"], ["wd:Q1078811"], ["wd:Q10535570"], ["wd:Q705893"], ["wd:Q3153203"], ["wd:Q974427"], ["wd:Q3793044"], ["wd:Q16939844"], ["wd:Q27243415"], ["wd:Q10551795"], ["wd:Q16089019"], ["wd:Q10493949"], ["wd:Q1079728"], ["wd:Q592902"], ["wd:Q18245334"], ["wd:Q259831"], ["wd:Q10397281"], ["wd:Q1354974"], ["wd:Q1047872"], ["wd:Q784465"], ["wd:Q3818378"], ["wd:Q10546530"], ["wd:Q10483486"], ["wd:Q4657246"], ["wd:Q10483182"], ["wd:Q10696908"], ["wd:Q1066211"], ["wd:Q6032813"], ["wd:Q10654932"], ["wd:Q4504957"], ["wd:Q3733851"], ["wd:Q918111"], ["wd:Q753141"], ["wd:Q10483506"], ["wd:Q10605121"], ["wd:Q239756"], ["wd:Q21079521"], ["wd:Q18693284"], ["wd:Q1188701"], ["wd:Q110323714"], ["wd:Q1187530"], ["wd:Q837070"], ["wd:Q10714831"], ["wd:Q10705206"], ["wd:Q5404942"], ["wd:Q3224616"], ["wd:Q131347319"], ["wd:Q10661700"], ["wd:Q14955437"], ["wd:Q10551751"], ["wd:Q4638734"], ["wd:Q15260475"], ["wd:Q265203"], ["wd:Q2276637"], ["wd:Q10697935"], ["wd:Q10613032"], ["wd:Q5347794"], ["wd:Q98098574"], ["wd:Q131347317"], ["wd:Q10551815"], ["wd:Q14955386"], ["wd:Q64768851"], ["wd:Q1141100"], ["wd:Q4973909"], ["wd:Q10687404"], ["wd:Q131347315"], ["wd:Q14955462"], ["wd:Q2703659"], ["wd:Q221354"], ["wd:Q4930817"], ["wd:Q10686490"], ["wd:Q4766801"], ["wd:Q761987"], ["wd:Q10468727"], ["wd:Q165651"]], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film kg:1292 kg:6386.} UNION \",\n        \"{?film kg:1292 kg:5297.} UNION \",\n        \"{?film kg:1039 kg:6386.} UNION \",\n        \"{?film kg:1039 kg:5297.} UNION \",\n        \"{?film kg:1472 kg:5117.} UNION \",\n        \"{?film kg:1472 kg:1650.} UNION \",\n        \"{?film kg:1472 kg:8407.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { {?film kg:1292 kg:6386.} UNION {?film kg:1292 kg:5297.} UNION {?film kg:1039 kg:6386.} UNION {?film kg:1039 kg:5297.} UNION {?film kg:1472 kg:5117.} UNION {?film kg:1472 kg:1650.} UNION {?film kg:1472 kg:8407.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P496 wd:Q2087254 .\",\n    \"?resource wdt:P58 wd:Q2087254 .\",\n    \"?resource wdt:P31 wd:Q28389 .\",\n    \"?resource wdt:P673 ?film1 .\",\n    \"?resource wdt:P673 ?film2 .\",\n    \"?film1 rdfs:label \\\"The Waiting Room\\\"@en .\",\n    \"?film2 rdfs:label \\\"Destiny The Confession\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P496 wd:Q2087254 . ?resource wdt:P58 wd:Q2087254 . ?resource wdt:P31 wd:Q28389 . ?resource wdt:P673 ?film1 . ?resource wdt:P673 ?film2 . ?film1 rdfs:label \"The Waiting Room\"@en . ?film2 rdfs:label \"Destiny The Confession\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q6084069 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q5265241 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?resource. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q6084069 wdt:P1431 ?resource. } UNION { wd:Q5265241 wdt:P1431 ?resource. } UNION { wd:Q12813010 wdt:P1431 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:7690 kg:5397|kg:8008 ?resource. } UNION { kg:4125 kg:5397|kg:8008 ?resource. }\",\n        \"?resource a kg:1635 ; a kg:5844 ; a kg:4870 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:7690 kg:5397|kg:8008 ?resource. } UNION { kg:4125 kg:5397|kg:8008 ?resource. } ?resource a kg:1635 ; a kg:5844 ; a kg:4870 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n      \"{\",\n        \"?editor wdt:P31 wd:Q5;\",\n        \"       wdt:P106 wd:Q2405480.\",\n        \"?editor wdt:P26 ?spouse.\",\n      \"}\",\n      \"UNION\",\n      \"{\",\n        \"?editor wdt:P31 wd:Q5;\",\n        \"       wdt:P106 wd:Q2405480.\",\n        \"?editor wdt:P4514 ?spouse.\",\n      \"}\",\n      \"{\",\n        \"?spouse wdt:P31 wd:Q5;\",\n        \"       wdt:P361* wd:Q278931;\",\n        \"       wdt:P50 ?film1.\",\n        \"       wdt:P57 ?film2.\",\n        \"       wdt:P57 ?film3.\",\n        \"       wdt:P57 ?film4.\",\n        \"       wdt:P57 ?film5.\",\n      \"}\",\n      \"{\",\n        \"?film1 wdt:P31 wd:Q11424;\",\n        \"      rdfs:label \\\"The City Tramp\\\"@en.\",\n      \"}\",\n      \"{\",\n        \"?film2 wdt:P31 wd:Q11424;\",\n        \"      rdfs:label \\\"Katzelmacher\\\"@en.\",\n      \"}\",\n      \"{\",\n        \"?film3 wdt:P31 wd:Q11424;\",\n        \"      rdfs:label \\\"Why Does Herr R. Run Amok?\\\"@en.\",\n      \"}\",\n      \"{\",\n        \"?film4 wdt:P31 wd:Q11424;\",\n        \"      rdfs:label \\\"Whity\\\"@en.\",\n      \"}\",\n      \"{\",\n        \"?film5 wdt:P31 wd:Q11424;\",\n        \"      rdfs:label \\\"In a Year of 13 Moons\\\"@en.\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { { ?editor wdt:P31 wd:Q5; wdt:P106 wd:Q2405480. ?editor wdt:P26 ?spouse. } UNION { ?editor wdt:P31 wd:Q5; wdt:P106 wd:Q2405480. ?editor wdt:P4514 ?spouse. } { ?spouse wdt:P31 wd:Q5; wdt:P361* wd:Q278931; wdt:P50 ?film1. wdt:P57 ?film2. wdt:P57 ?film3. wdt:P57 ?film4. wdt:P57 ?film5. } { ?film1 wdt:P31 wd:Q11424; rdfs:label \"The City Tramp\"@en. } { ?film2 wdt:P31 wd:Q11424; rdfs:label \"Katzelmacher\"@en. } { ?film3 wdt:P31 wd:Q11424; rdfs:label \"Why Does Herr R. Run Amok?\"@en. } { ?film4 wdt:P31 wd:Q11424; rdfs:label \"Whity\"@en. } { ?film5 wdt:P31 wd:Q11424; rdfs:label \"In a Year of 13 Moons\"@en. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q570483 wdt:P58 ?person.\",\n          \"wd:Q567519 wdt:P58 ?person.\",\n          \"wd:Q327427 wdt:P58 ?person.\",\n          \"wd:Q878673 wdt:P58 ?person.\",\n          \"wd:Q543382 wdt:P58 ?person.\",\n        \"}\",\n        \"{\",\n          \"?person wdt:P106 wd:Q7042855.\",\n          \"?person wdt:P26 ?spouse.\",\n          \"?spouse wdt:P106 wdt:P1040.\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q570483 wdt:P58 ?person. wd:Q567519 wdt:P58 ?person. wd:Q327427 wdt:P58 ?person. wd:Q878673 wdt:P58 ?person. wd:Q543382 wdt:P58 ?person. } { ?person wdt:P106 wd:Q7042855. ?person wdt:P26 ?spouse. ?spouse wdt:P106 wdt:P1040. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4703 kg:2308 ?screenwriter . } UNION \",\n        \"{ kg:9634 kg:2517 ?director . } UNION \",\n        \"{ kg:3549 kg:2308 ?screenwriter . } UNION \",\n        \"{ kg:9613 kg:2517 ?director . } UNION \",\n        \"{ kg:2308 kg:2308 ?screenwriter . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4703 kg:2308 ?screenwriter . } UNION { kg:9634 kg:2517 ?director . } UNION { kg:3549 kg:2308 ?screenwriter . } UNION { kg:9613 kg:2517 ?director . } UNION { kg:2308 kg:2308 ?screenwriter . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?filmmaker WHERE {\",\n    \"?filmmaker wdt:P31 wd:Q5 .\",\n    \"?filmmaker wdt:P21 wd:Q6581072 .\",\n    \"?film1 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 .\",\n    \"?film1 wdt:P1476 \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@en .\",\n    \"?film2 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 .\",\n    \"?film2 wdt:P1476 \\\"Olympia\\\"@en .\",\n    \"?film3 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 .\",\n    \"?film3 wdt:P1476 \\\"Triumph of the Will\\\"@en .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?filmmaker WHERE { ?filmmaker wdt:P31 wd:Q5 . ?filmmaker wdt:P21 wd:Q6581072 . ?film1 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 . ?film1 wdt:P1476 \"Tag der Freiheit: Unsere Wehrmacht\"@en . ?film2 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 . ?film2 wdt:P1476 \"Olympia\"@en . ?film3 wdt:P57 ?filmmaker ; wdt:P31 wd:Q11424 . ?film3 wdt:P1476 \"Triumph of the Will\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P58 wd:Q156497.} UNION \",\n        \"{?resource wdt:P57 wd:Q156497.} UNION \",\n        \"{?resource wdt:P1040 wd:Q156497.} UNION \",\n        \"{?resource wdt:P58 wd:Q23167.} UNION \",\n        \"{?resource wdt:P57 wd:Q23167.} UNION \",\n        \"{?resource wdt:P1040 wd:Q23167.} UNION \",\n        \"{?resource wdt:P58 wd:Q158069.} UNION \",\n        \"{?resource wdt:P57 wd:Q158069.} UNION \",\n        \"{?resource wdt:P1040 wd:Q158069.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P58 wd:Q156497.} UNION {?resource wdt:P57 wd:Q156497.} UNION {?resource wdt:P1040 wd:Q156497.} UNION {?resource wdt:P58 wd:Q23167.} UNION {?resource wdt:P57 wd:Q23167.} UNION {?resource wdt:P1040 wd:Q23167.} UNION {?resource wdt:P58 wd:Q158069.} UNION {?resource wdt:P57 wd:Q158069.} UNION {?resource wdt:P1040 wd:Q158069.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:4957 kg:3675.} UNION \",\n        \"{?resource kg:4957 kg:8706.} UNION \",\n        \"{?resource kg:4957 kg:7567.} UNION \",\n        \"{?resource kg:3486 kg:3675.} UNION \",\n        \"{?resource kg:3486 kg:8706.} UNION \",\n        \"{?resource kg:3486 kg:7567.} UNION \",\n        \"{?resource kg:0469 kg:3675.} UNION \",\n        \"{?resource kg:0469 kg:8706.} UNION \",\n        \"{?resource kg:0469 kg:7567.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:4957 kg:3675.} UNION {?resource kg:4957 kg:8706.} UNION {?resource kg:4957 kg:7567.} UNION {?resource kg:3486 kg:3675.} UNION {?resource kg:3486 kg:8706.} UNION {?resource kg:3486 kg:7567.} UNION {?resource kg:0469 kg:3675.} UNION {?resource kg:0469 kg:8706.} UNION {?resource kg:0469 kg:7567.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P27 wd:Q16 .\",\n    \"?resource wdt:P495 wd:Q8051161 .\",\n    \"?resource wdt:P58 ?film1 .\",\n    \"?resource wdt:P31 wd:Q277609 .\",\n    \"?resource wdt:P58 ?film2 .\",\n    \"?resource wdt:P58 ?film3 .\",\n    \"?resource wdt:P58 ?film4 .\",\n    \"?resource wdt:P58 ?film5 .\",\n    \"{ ?film1 wdt:P31 wd:Q277609 ; rdfs:label \\\"The Crazies\\\"@en } UNION { ?film1 wdt:P31 wd:Q277609 ; skos:altLabel \\\"The Crazies\\\"@en }\",\n    \"{ ?film2 wdt:P31 wd:Q277609 ; rdfs:label \\\"Day of the Dead\\\"@en } UNION { ?film2 wdt:P31 wd:Q277609 ; skos:altLabel \\\"Day of the Dead\\\"@en }\",\n    \"{ ?film3 wdt:P31 wd:Q277609 ; rdfs:label \\\"Monkey Shines\\\"@en } UNION { ?film3 wdt:P31 wd:Q277609 ; skos:altLabel \\\"Monkey Shines\\\"@en }\",\n    \"{ ?film4 wdt:P31 wd:Q277609 ; rdfs:label \\\"Dawn of the Dead\\\"@en } UNION { ?film4 wdt:P31 wd:Q277609 ; skos:altLabel \\\"Dawn of the Dead\\\"@en }\",\n    \"{ ?film5 wdt:P31 wd:Q277609 ; rdfs:label \\\"Survival of the Dead\\\"@en } UNION { ?film5 wdt:P31 wd:Q277609 ; skos:altLabel \\\"Survival of the Dead\\\"@en }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q16 . ?resource wdt:P495 wd:Q8051161 . ?resource wdt:P58 ?film1 . ?resource wdt:P31 wd:Q277609 . ?resource wdt:P58 ?film2 . ?resource wdt:P58 ?film3 . ?resource wdt:P58 ?film4 . ?resource wdt:P58 ?film5 . { ?film1 wdt:P31 wd:Q277609 ; rdfs:label \"The Crazies\"@en } UNION { ?film1 wdt:P31 wd:Q277609 ; skos:altLabel \"The Crazies\"@en } { ?film2 wdt:P31 wd:Q277609 ; rdfs:label \"Day of the Dead\"@en } UNION { ?film2 wdt:P31 wd:Q277609 ; skos:altLabel \"Day of the Dead\"@en } { ?film3 wdt:P31 wd:Q277609 ; rdfs:label \"Monkey Shines\"@en } UNION { ?film3 wdt:P31 wd:Q277609 ; skos:altLabel \"Monkey Shines\"@en } { ?film4 wdt:P31 wd:Q277609 ; rdfs:label \"Dawn of the Dead\"@en } UNION { ?film4 wdt:P31 wd:Q277609 ; skos:altLabel \"Dawn of the Dead\"@en } { ?film5 wdt:P31 wd:Q277609 ; rdfs:label \"Survival of the Dead\"@en } UNION { ?film5 wdt:P31 wd:Q277609 ; skos:altLabel \"Survival of the Dead\"@en } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q219155 .\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P57 wd:Q219155 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q627060 .\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P1040 wd:Q627060 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q198557 .\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P57 wd:Q198557 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P27 wd:Q16 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P50 wd:Q219170 .\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P58 wd:Q219170 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q1277329 .\",\n          \"?resource wdt:P496 wd:Q1277329 .\",\n          \"?resource wdt:P31 wd:Q5 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P58 wd:Q219155 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P57 wd:Q219155 . } { ?resource wdt:P58 wd:Q627060 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P1040 wd:Q627060 . } { ?resource wdt:P58 wd:Q198557 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P57 wd:Q198557 . } { ?resource wdt:P27 wd:Q16 . } { ?resource wdt:P50 wd:Q219170 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P58 wd:Q219170 . } { ?resource wdt:P58 wd:Q1277329 . ?resource wdt:P496 wd:Q1277329 . ?resource wdt:P31 wd:Q5 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:6796 kg:1818 .\",\n          \"?resource kg:2946 kg:1818 .\",\n          \"?resource kg:3077 kg:4112 .\",\n          \"?resource kg:5806 kg:6796 .\",\n          \"?resource kg:5806 kg:2946 .\",\n          \"?resource kg:3778 kg:4112 .\",\n          \"?resource kg:0019 kg:6796 .\",\n          \"?resource kg:0019 kg:2946 .\",\n          \"?resource kg:3439 kg:8393 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6796 kg:1818 . ?resource kg:2946 kg:1818 . ?resource kg:3077 kg:4112 . ?resource kg:5806 kg:6796 . ?resource kg:5806 kg:2946 . ?resource kg:3778 kg:4112 . ?resource kg:0019 kg:6796 . ?resource kg:0019 kg:2946 . ?resource kg:3439 kg:8393 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"wd:Q186045 wdt:P31 wd:Q279689 .\",\n        \"wd:Q186045 wdt:P57 ?director .\",\n        \"wd:Q186045 wdt:P162 ?executiveProducer .\",\n      \"}\",\n      \"{\",\n        \"wd:Q39548 wdt:P31 wd:Q279689 .\",\n        \"wd:Q39548 wdt:P57 ?director .\",\n        \"wd:Q39548 wdt:P50 ?screenwriter .\",\n      \"}\",\n      \"{\",\n        \"wd:Q126066 wdt:P31 wd:Q279689 .\",\n        \"wd:Q126066 wdt:P57 ?director .\",\n        \"wd:Q126066 wdt:P50 ?screenwriter .\",\n      \"}\",\n      \"{\",\n        \"wd:Q38948 wdt:P31 wd:Q279689 .\",\n        \"wd:Q38948 wdt:P57 ?director .\",\n        \"wd:Q38948 wdt:P50 ?screenwriter .\",\n      \"}\",\n      \"{\",\n        \"wd:Q126065 wdt:P31 wd:Q279689 .\",\n        \"wd:Q126065 wdt:P57 ?director .\",\n        \"wd:Q126065 wdt:P50 ?screenwriter .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { wd:Q186045 wdt:P31 wd:Q279689 . wd:Q186045 wdt:P57 ?director . wd:Q186045 wdt:P162 ?executiveProducer . } { wd:Q39548 wdt:P31 wd:Q279689 . wd:Q39548 wdt:P57 ?director . wd:Q39548 wdt:P50 ?screenwriter . } { wd:Q126066 wdt:P31 wd:Q279689 . wd:Q126066 wdt:P57 ?director . wd:Q126066 wdt:P50 ?screenwriter . } { wd:Q38948 wdt:P31 wd:Q279689 . wd:Q38948 wdt:P57 ?director . wd:Q38948 wdt:P50 ?screenwriter . } { wd:Q126065 wdt:P31 wd:Q279689 . wd:Q126065 wdt:P57 ?director . wd:Q126065 wdt:P50 ?screenwriter . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director WHERE {\",\n        \"{ wd:Q206182 wdt:P57 ?director. } UNION { wd:Q206182 wdt:P1431 ?director. }\",\n        \"?director wdt:P57 wd:Q391143.\",\n        \"?director wdt:P57 wd:Q378013.\",\n        \"?director wdt:P56 wd:Q232108.\",\n        \"?director wdt:P57 wd:Q594033.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?director WHERE { { wd:Q206182 wdt:P57 ?director. } UNION { wd:Q206182 wdt:P1431 ?director. } ?director wdt:P57 wd:Q391143. ?director wdt:P57 wd:Q378013. ?director wdt:P56 wd:Q232108. ?director wdt:P57 wd:Q594033. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8467 kg:3421|kg:7107 ?directorProducer. } UNION { kg:8467 kg:5272 ?writer. }\",\n        \"?movie kg:3421 ?directorProducer; kg:5272 ?writer.\",\n        \"VALUES ?movie { kg:2393 kg:0536 kg:2798 kg:1055 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8467 kg:3421|kg:7107 ?directorProducer. } UNION { kg:8467 kg:5272 ?writer. } ?movie kg:3421 ?directorProducer; kg:5272 ?writer. VALUES ?movie { kg:2393 kg:0536 kg:2798 kg:1055 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 wd:Q249677 .\",\n    \"?resource wdt:P108 wd:Q151898 .\",\n    \"?resource wdt:P1344 wd:Q1057041 .\",\n    \"?resource wdt:P126* wd:Q151898 .\",\n    \"?resource wdt:P126* wd:Q1057041 .\",\n    \"?resource wdt:P126* wd:Q336030 .\",\n    \"?resource wdt:P126* wd:Q899002 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q249677 . ?resource wdt:P108 wd:Q151898 . ?resource wdt:P1344 wd:Q1057041 . ?resource wdt:P126* wd:Q151898 . ?resource wdt:P126* wd:Q1057041 . ?resource wdt:P126* wd:Q336030 . ?resource wdt:P126* wd:Q899002 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P108 wd:Q42944.} UNION \",\n        \"{?resource wdt:P108 wd:Q37033.} UNION \",\n        \"{?resource wdt:P108 wd:Q7204713.} UNION \",\n        \"{?resource wdt:P108 wd:Q7432436.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P108 wd:Q42944.} UNION {?resource wdt:P108 wd:Q37033.} UNION {?resource wdt:P108 wd:Q7204713.} UNION {?resource wdt:P108 wd:Q7432436.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1579821"], ["wd:Q43954169"], ["wd:Q63966878"], ["wd:Q15052128"], ["wd:Q55097980"], ["wd:Q57909530"], ["wd:Q60227311"], ["wd:Q64854112"], ["wd:Q57095111"], ["wd:Q56956048"], ["wd:Q60255049"], ["wd:Q57087709"], ["wd:Q59751646"], ["wd:Q67500738"], ["wd:Q79724371"], ["wd:Q63409944"], ["wd:Q59510437"], ["wd:Q53443276"], ["wd:Q56849337"], ["wd:Q60656401"], ["wd:Q59750766"], ["wd:Q67378102"], ["wd:Q1032963"], ["wd:Q53463521"], ["wd:Q67470367"], ["wd:Q90408220"], ["wd:Q89063393"], ["wd:Q58315640"], ["wd:Q63390061"], ["wd:Q55433580"], ["wd:Q64857698"], ["wd:Q64860531"], ["wd:Q57635068"], ["wd:Q55008221"], ["wd:Q55076838"], ["wd:Q67220443"], ["wd:Q57416543"], ["wd:Q15145161"], ["wd:Q64857896"], ["wd:Q80"], ["wd:Q6163986"], ["wd:Q11919389"], ["wd:Q53284080"], ["wd:Q53506223"], ["wd:Q89508163"], ["wd:Q59082432"], ["wd:Q64857987"], ["wd:Q184592"], ["wd:Q88003958"], ["wd:Q64855359"], ["wd:Q57414602"], ["wd:Q64866883"], ["wd:Q95956948"], ["wd:Q53285043"], ["wd:Q59563456"], ["wd:Q47543088"], ["wd:Q53465303"], ["wd:Q55095818"], ["wd:Q63754483"], ["wd:Q64857857"], ["wd:Q64857872"], ["wd:Q59684273"], ["wd:Q57934192"], ["wd:Q62760775"], ["wd:Q55005202"], ["wd:Q67220581"], ["wd:Q85361629"], ["wd:Q56992693"], ["wd:Q64857953"], ["wd:Q43829735"], ["wd:Q64707109"], ["wd:Q7781924"], ["wd:Q59471507"], ["wd:Q59491951"], ["wd:Q59554056"], ["wd:Q64864347"], ["wd:Q57305579"], ["wd:Q64857702"], ["wd:Q43216244"], ["wd:Q26936205"], ["wd:Q56854360"], ["wd:Q15901871"], ["wd:Q80744051"], ["wd:Q27050188"], ["wd:Q58888543"], ["wd:Q51462053"], ["wd:Q58878269"], ["wd:Q58827822"], ["wd:Q64855339"], ["wd:Q64861778"], ["wd:Q64864843"], ["wd:Q53283550"], ["wd:Q60618481"], ["wd:Q63487498"], ["wd:Q30512793"], ["wd:Q54957734"], ["wd:Q55007482"], ["wd:Q17308816"], ["wd:Q91526404"], ["wd:Q88661011"], ["wd:Q3762636"], ["wd:Q514831"], ["wd:Q1351285"], ["wd:Q87075829"], ["wd:Q55063548"], ["wd:Q60191855"], ["wd:Q57007899"], ["wd:Q56885138"], ["wd:Q67220068"], ["wd:Q67378162"], ["wd:Q61831016"], ["wd:Q54957985"], ["wd:Q87001060"], ["wd:Q92837573"], ["wd:Q67651031"], ["wd:Q90383087"], ["wd:Q61824502"], ["wd:Q3147282"], ["wd:Q67469956"], ["wd:Q91198547"], ["wd:Q95972574"], ["wd:Q1599157"], ["wd:Q554631"], ["wd:Q64857762"], ["wd:Q67650882"], ["wd:Q1528248"], ["wd:Q37621058"], ["wd:Q67651054"], ["wd:Q1930694"], ["wd:Q64864821"], ["wd:Q53243879"], ["wd:Q56477097"], ["wd:Q64857171"], ["wd:Q53463335"], ["wd:Q53284219"], ["wd:Q56604530"], ["wd:Q54181519"], ["wd:Q57759396"], ["wd:Q59583624"], ["wd:Q64855493"], ["wd:Q64863353"], ["wd:Q91329958"], ["wd:Q58826319"], ["wd:Q64038636"], ["wd:Q57398476"], ["wd:Q83182853"], ["wd:Q57085461"], ["wd:Q9388349"], ["wd:Q87143740"], ["wd:Q87818814"], ["wd:Q667841"], ["wd:Q57653617"], ["wd:Q64855387"], ["wd:Q57443875"], ["wd:Q43274823"], ["wd:Q58370788"], ["wd:Q64863662"], ["wd:Q57027847"], ["wd:Q64038658"], ["wd:Q441154"], ["wd:Q201229"], ["wd:Q42321185"], ["wd:Q64857998"], ["wd:Q92425505"], ["wd:Q64866863"], ["wd:Q28924975"], ["wd:Q62560080"], ["wd:Q64551828"], ["wd:Q91623676"], ["wd:Q92746982"], ["wd:Q91262932"], ["wd:Q94688057"], ["wd:Q54034353"], ["wd:Q57172851"], ["wd:Q57702311"], ["wd:Q62036470"], ["wd:Q88470388"], ["wd:Q104779"], ["wd:Q39540544"], ["wd:Q12414237"], ["wd:Q57443843"], ["wd:Q60168771"], ["wd:Q48087360"], ["wd:Q64865239"], ["wd:Q57015437"], ["wd:Q59563943"], ["wd:Q57943258"], ["wd:Q58387457"], ["wd:Q59389575"], ["wd:Q59866189"], ["wd:Q64857705"], ["wd:Q92051139"], ["wd:Q64856080"], ["wd:Q6229977"], ["wd:Q63413725"], ["wd:Q55068098"], ["wd:Q67650895"], ["wd:Q60618443"], ["wd:Q74156078"], ["wd:Q30747376"], ["wd:Q58509703"], ["wd:Q58621368"], ["wd:Q88146179"], ["wd:Q90122676"], ["wd:Q50777114"], ["wd:Q61188284"], ["wd:Q64865760"], ["wd:Q64855364"], ["wd:Q92363525"], ["wd:Q57080080"], ["wd:Q49262497"], ["wd:Q58904374"], ["wd:Q6834532"], ["wd:Q56425461"], ["wd:Q64861768"], ["wd:Q58385153"], ["wd:Q58887518"], ["wd:Q2283225"], ["wd:Q54198032"], ["wd:Q67651018"], ["wd:Q59752940"], ["wd:Q55063742"], ["wd:Q57055627"], ["wd:Q58888414"], ["wd:Q57176629"], ["wd:Q67650777"], ["wd:Q54946530"], ["wd:Q90232720"], ["wd:Q66439767"], ["wd:Q1515185"], ["wd:Q1322326"], ["wd:Q15080603"], ["wd:Q57065692"], ["wd:Q64858123"], ["wd:Q57127963"], ["wd:Q57422469"], ["wd:Q2824517"], ["wd:Q28064398"], ["wd:Q57697837"], ["wd:Q64861601"], ["wd:Q67378160"], ["wd:Q2732347"], ["wd:Q57410899"], ["wd:Q64857652"], ["wd:Q60664579"], ["wd:Q1793575"], ["wd:Q67220173"], ["wd:Q15834172"], ["wd:Q58881183"], ["wd:Q67470512"], ["wd:Q64861616"], ["wd:Q64857763"], ["wd:Q67468632"], ["wd:Q57315444"], ["wd:Q59485603"], ["wd:Q63184442"], ["wd:Q103614"], ["wd:Q57613434"], ["wd:Q87822100"], ["wd:Q37647544"], ["wd:Q67220367"], ["wd:Q87747398"], ["wd:Q60667945"], ["wd:Q64551830"], ["wd:Q43089436"], ["wd:Q89026185"], ["wd:Q79379511"], ["wd:Q57163055"], ["wd:Q64857779"], ["wd:Q83397052"], ["wd:Q29419104"], ["wd:Q54040758"], ["wd:Q60041300"], ["wd:Q41187149"], ["wd:Q56604512"], ["wd:Q56640593"], ["wd:Q1737883"], ["wd:Q64764249"], ["wd:Q57076520"], ["wd:Q55007036"], ["wd:Q58649977"], ["wd:Q56944250"], ["wd:Q59485591"], ["wd:Q67482185"], ["wd:Q83011278"], ["wd:Q88721955"], ["wd:Q67410308"], ["wd:Q66605756"], ["wd:Q5444891"], ["wd:Q64867010"], ["wd:Q59651028"], ["wd:Q153178"], ["wd:Q15965153"], ["wd:Q54953361"], ["wd:Q62058459"], ["wd:Q64012279"], ["wd:Q81416271"], ["wd:Q57421299"], ["wd:Q60866595"], ["wd:Q95464375"], ["wd:Q91151113"], ["wd:Q58492424"], ["wd:Q64863681"], ["wd:Q64038641"], ["wd:Q67650845"], ["wd:Q59142278"], ["wd:Q57305840"], ["wd:Q92741952"], ["wd:Q57048707"], ["wd:Q26213570"], ["wd:Q61711495"], ["wd:Q1229020"], ["wd:Q113992698"], ["wd:Q92397857"], ["wd:Q64552155"], ["wd:Q55018050"], ["wd:Q64866782"], ["wd:Q12714078"], ["wd:Q83883708"], ["wd:Q64858302"], ["wd:Q55092063"], ["wd:Q59492209"], ["wd:Q441993"], ["wd:Q90232724"], ["wd:Q76511585"], ["wd:Q64857674"], ["wd:Q81197414"], ["wd:Q23042989"], ["wd:Q89571672"], ["wd:Q87453082"], ["wd:Q89752333"], ["wd:Q58236754"], ["wd:Q57172806"], ["wd:Q64855436"], ["wd:Q57690541"], ["wd:Q64858046"], ["wd:Q1526786"], ["wd:Q53283777"], ["wd:Q58376350"], ["wd:Q50923771"], ["wd:Q61088475"], ["wd:Q91636"], ["wd:Q119499"], ["wd:Q42321190"], ["wd:Q64857773"], ["wd:Q57391796"], ["wd:Q95974968"], ["wd:Q59392538"], ["wd:Q87294899"], ["wd:Q67220024"], ["wd:Q87362064"], ["wd:Q53461530"], ["wd:Q64857931"], ["wd:Q59516927"], ["wd:Q59590497"], ["wd:Q64858029"], ["wd:Q67468068"], ["wd:Q364608"], ["wd:Q23840678"], ["wd:Q67470529"], ["wd:Q64855363"], ["wd:Q60319282"], ["wd:Q58878911"], ["wd:Q57909573"], ["wd:Q67650694"], ["wd:Q2850406"], ["wd:Q81382111"], ["wd:Q1679950"], ["wd:Q38230505"], ["wd:Q19904538"], ["wd:Q79724728"], ["wd:Q55067844"], ["wd:Q87804760"], ["wd:Q67650720"], ["wd:Q53284366"], ["wd:Q30090470"], ["wd:Q64856020"], ["wd:Q28914639"], ["wd:Q53593307"], ["wd:Q87602864"], ["wd:Q93146580"], ["wd:Q55086992"], ["wd:Q709562"], ["wd:Q442643"], ["wd:Q1424955"], ["wd:Q59650995"], ["wd:Q67482745"], ["wd:Q86450146"], ["wd:Q91345431"], ["wd:Q60762353"], ["wd:Q7351896"], ["wd:Q57909590"], ["wd:Q91825931"], ["wd:Q64858251"], ["wd:Q59384804"], ["wd:Q87895244"], ["wd:Q88390208"], ["wd:Q17521164"], ["wd:Q53443173"], ["wd:Q82194333"], ["wd:Q56480603"], ["wd:Q153210"], ["wd:Q53467240"], ["wd:Q15173099"], ["wd:Q50992398"], ["wd:Q59389194"], ["wd:Q56481184"], ["wd:Q67220133"], ["wd:Q54946754"], ["wd:Q57412212"], ["wd:Q59472188"], ["wd:Q53283502"], ["wd:Q67469826"], ["wd:Q29253985"], ["wd:Q56090111"], ["wd:Q59422352"], ["wd:Q59292154"], ["wd:Q64857936"], ["wd:Q58317806"], ["wd:Q70610043"], ["wd:Q88065562"], ["wd:Q83130154"], ["wd:Q17496912"], ["wd:Q90525501"], ["wd:Q30745608"], ["wd:Q67470479"], ["wd:Q91001127"], ["wd:Q67468529"], ["wd:Q55091786"], ["wd:Q57420201"], ["wd:Q61716729"], ["wd:Q64855318"], ["wd:Q64855894"], ["wd:Q64854243"], ["wd:Q64865380"], ["wd:Q20472489"], ["wd:Q55086323"], ["wd:Q56854980"], ["wd:Q88090015"], ["wd:Q64857861"], ["wd:Q95933899"], ["wd:Q64692510"], ["wd:Q67483035"], ["wd:Q64857503"], ["wd:Q55086913"], ["wd:Q67483450"], ["wd:Q59489300"], ["wd:Q91965414"], ["wd:Q1719021"], ["wd:Q64866055"], ["wd:Q92126941"], ["wd:Q67483188"], ["wd:Q57391748"], ["wd:Q57547212"], ["wd:Q64856387"], ["wd:Q57686589"], ["wd:Q39389421"], ["wd:Q87662462"], ["wd:Q55007253"], ["wd:Q60545322"], ["wd:Q64856586"], ["wd:Q86358169"], ["wd:Q59403765"], ["wd:Q74546481"], ["wd:Q90895869"], ["wd:Q63466835"], ["wd:Q39993588"], ["wd:Q49828374"], ["wd:Q57329051"], ["wd:Q63408297"], ["wd:Q61650334"], ["wd:Q57438881"], ["wd:Q1906263"], ["wd:Q53524957"], ["wd:Q57403143"], ["wd:Q67220432"], ["wd:Q59522400"], ["wd:Q67469966"], ["wd:Q87753271"], ["wd:Q87910875"], ["wd:Q81374393"], ["wd:Q67220546"], ["wd:Q24054872"], ["wd:Q64858312"], ["wd:Q64863103"], ["wd:Q87772863"], ["wd:Q95956960"], ["wd:Q67220452"], ["wd:Q56992557"], ["wd:Q56997166"], ["wd:Q46826387"], ["wd:Q59200022"], ["wd:Q64862687"], ["wd:Q64866885"], ["wd:Q64866910"], ["wd:Q1967632"], ["wd:Q56654535"], ["wd:Q57739877"], ["wd:Q90870038"], ["wd:Q16299885"], ["wd:Q59491498"], ["wd:Q79368409"], ["wd:Q91056898"], ["wd:Q67469610"], ["wd:Q42111543"], ["wd:Q64864875"], ["wd:Q364713"], ["wd:Q55060487"], ["wd:Q56501531"], ["wd:Q53283196"], ["wd:Q57420782"], ["wd:Q58667602"], ["wd:Q64053084"], ["wd:Q57749869"], ["wd:Q90108596"], ["wd:Q53282717"], ["wd:Q64857659"], ["wd:Q59857600"], ["wd:Q67220446"], ["wd:Q57445071"], ["wd:Q67466090"], ["wd:Q82194285"], ["wd:Q71587422"], ["wd:Q88580303"], ["wd:Q64096106"], ["wd:Q24251208"], ["wd:Q57305554"], ["wd:Q64865358"], ["wd:Q5616905"], ["wd:Q56479669"], ["wd:Q55004500"], ["wd:Q88896463"], ["wd:Q655289"], ["wd:Q64857827"], ["wd:Q67470192"], ["wd:Q64857713"], ["wd:Q67651104"], ["wd:Q79944943"], ["wd:Q58224861"], ["wd:Q350305"], ["wd:Q55061294"], ["wd:Q57473981"], ["wd:Q58370781"], ["wd:Q56461535"], ["wd:Q67483158"], ["wd:Q67260409"], ["wd:Q95326196"], ["wd:Q57789116"], ["wd:Q57044444"], ["wd:Q85857136"], ["wd:Q57260628"], ["wd:Q64503641"], ["wd:Q73660651"], ["wd:Q59284152"], ["wd:Q90288968"], ["wd:Q82560390"], ["wd:Q54255802"], ["wd:Q15263795"], ["wd:Q88649737"], ["wd:Q64859977"], ["wd:Q43093387"], ["wd:Q67468666"], ["wd:Q53467544"], ["wd:Q67482083"], ["wd:Q38915551"], ["wd:Q5638313"], ["wd:Q53283330"], ["wd:Q57691318"], ["wd:Q58330090"], ["wd:Q64855767"], ["wd:Q86962508"], ["wd:Q56885185"], ["wd:Q15881934"], ["wd:Q56641640"], ["wd:Q54239483"], ["wd:Q65557416"], ["wd:Q67220275"], ["wd:Q56458784"], ["wd:Q5992052"], ["wd:Q59818371"], ["wd:Q64858105"], ["wd:Q31199793"], ["wd:Q64589685"], ["wd:Q64857725"], ["wd:Q59674761"], ["wd:Q64857620"], ["wd:Q54957500"], ["wd:Q67650909"], ["wd:Q96029854"], ["wd:Q57444403"], ["wd:Q92643542"], ["wd:Q63791735"], ["wd:Q64857971"], ["wd:Q1770174"], ["wd:Q76176687"], ["wd:Q59394162"], ["wd:Q60220968"], ["wd:Q55017132"], ["wd:Q59696762"], ["wd:Q52984365"], ["wd:Q56570593"], ["wd:Q62995650"], ["wd:Q64857682"], ["wd:Q76521682"], ["wd:Q51725303"], ["wd:Q56595814"], ["wd:Q58888404"], ["wd:Q60040999"], ["wd:Q55092020"], ["wd:Q20983586"], ["wd:Q60573390"], ["wd:Q55004446"], ["wd:Q58811064"], ["wd:Q79572697"], ["wd:Q55006953"], ["wd:Q64855380"], ["wd:Q56993091"], ["wd:Q96084840"], ["wd:Q54957560"], ["wd:Q69465157"], ["wd:Q54208426"], ["wd:Q57447877"], ["wd:Q59510438"], ["wd:Q54255770"], ["wd:Q67466565"], ["wd:Q30123583"], ["wd:Q57690165"], ["wd:Q86652650"], ["wd:Q5134690"], ["wd:Q57412468"], ["wd:Q59483358"], ["wd:Q55005062"], ["wd:Q85108322"], ["wd:Q56285695"], ["wd:Q15020902"], ["wd:Q67378934"], ["wd:Q64781584"], ["wd:Q64858039"], ["wd:Q63974986"], ["wd:Q67220522"], ["wd:Q64858103"], ["wd:Q56482356"], ["wd:Q57411488"], ["wd:Q57306545"], ["wd:Q57429263"], ["wd:Q58354405"], ["wd:Q59752622"], ["wd:Q203461"], ["wd:Q92749"], ["wd:Q64858144"], ["wd:Q64857614"], ["wd:Q125474422"], ["wd:Q53460786"], ["wd:Q66771471"], ["wd:Q2086091"], ["wd:Q57196929"], ["wd:Q58818081"], ["wd:Q63980392"], ["wd:Q56595883"], ["wd:Q64856100"], ["wd:Q64857684"], ["wd:Q30106737"], ["wd:Q57014839"], ["wd:Q58331017"], ["wd:Q67220316"], ["wd:Q22668109"], ["wd:Q88893357"], ["wd:Q18629209"], ["wd:Q54255889"], ["wd:Q18132175"], ["wd:Q91645698"], ["wd:Q12060704"], ["wd:Q57162999"], ["wd:Q57385909"], ["wd:Q63488649"], ["wd:Q57934082"], ["wd:Q86409269"], ["wd:Q60864555"], ["wd:Q50760654"], ["wd:Q58329320"], ["wd:Q87411580"], ["wd:Q64589677"], ["wd:Q55076994"], ["wd:Q59491503"], ["wd:Q58485650"], ["wd:Q26936556"], ["wd:Q53524812"], ["wd:Q93489294"], ["wd:Q58782251"], ["wd:Q16193595"], ["wd:Q55087001"], ["wd:Q56597229"], ["wd:Q89443356"], ["wd:Q87325808"], ["wd:Q61697477"], ["wd:Q370077"], ["wd:Q64858238"], ["wd:Q87364248"], ["wd:Q55059385"], ["wd:Q67500159"], ["wd:Q59208337"], ["wd:Q54182336"], ["wd:Q64857558"], ["wd:Q4890009"], ["wd:Q56451979"], ["wd:Q55004935"], ["wd:Q57215151"], ["wd:Q67377774"], ["wd:Q88889833"], ["wd:Q92913603"], ["wd:Q56867369"], ["wd:Q58402920"], ["wd:Q64855562"], ["wd:Q64857864"], ["wd:Q64864299"], ["wd:Q65953485"], ["wd:Q6761598"], ["wd:Q91454"], ["wd:Q59573991"], ["wd:Q63357340"], ["wd:Q57422015"], ["wd:Q63976550"], ["wd:Q67483007"], ["wd:Q56604711"], ["wd:Q67467226"], ["wd:Q53538668"], ["wd:Q88301243"], ["wd:Q21708036"], ["wd:Q50326999"], ["wd:Q28726950"], ["wd:Q91726665"], ["wd:Q64551839"], ["wd:Q64862869"], ["wd:Q64862668"], ["wd:Q67483505"], ["wd:Q49828211"], ["wd:Q64857482"], ["wd:Q73200565"], ["wd:Q64859937"], ["wd:Q57494061"], ["wd:Q89114528"], ["wd:Q56482174"], ["wd:Q67468939"], ["wd:Q40140799"], ["wd:Q53283627"], ["wd:Q24942946"], ["wd:Q57317057"], ["wd:Q91985871"], ["wd:Q56604091"], ["wd:Q67651094"], ["wd:Q53283703"], ["wd:Q64857426"], ["wd:Q60492025"], ["wd:Q58235154"], ["wd:Q617878"], ["wd:Q569705"], ["wd:Q30509082"], ["wd:Q983183"], ["wd:Q57060129"], ["wd:Q64858322"], ["wd:Q88208651"], ["wd:Q64764248"], ["wd:Q52685250"], ["wd:Q57170858"], ["wd:Q57612653"], ["wd:Q60737538"], ["wd:Q94747714"], ["wd:Q5396133"], ["wd:Q59153418"], ["wd:Q64551814"], ["wd:Q82310846"], ["wd:Q24256667"], ["wd:Q116386"], ["wd:Q54959461"], ["wd:Q57164443"], ["wd:Q61088497"], ["wd:Q64864429"], ["wd:Q59857773"], ["wd:Q53284530"], ["wd:Q89291268"], ["wd:Q55865195"], ["wd:Q64857989"], ["wd:Q60618458"], ["wd:Q47487723"], ["wd:Q60438723"], ["wd:Q64863715"], ["wd:Q64864335"], ["wd:Q55004463"], ["wd:Q64855811"], ["wd:Q86596810"], ["wd:Q56441775"], ["wd:Q53286183"], ["wd:Q192715"], ["wd:Q53953420"], ["wd:Q64857618"], ["wd:Q64857961"], ["wd:Q92215044"], ["wd:Q87822975"], ["wd:Q91586893"], ["wd:Q59699369"], ["wd:Q59347469"], ["wd:Q64857838"], ["wd:Q64855335"], ["wd:Q15854669"], ["wd:Q53953422"], ["wd:Q56604540"], ["wd:Q58327552"], ["wd:Q59492194"], ["wd:Q64857587"], ["wd:Q54957887"], ["wd:Q83132346"], ["wd:Q85906868"], ["wd:Q86878335"], ["wd:Q87584966"], ["wd:Q57479164"], ["wd:Q67466403"], ["wd:Q40289624"], ["wd:Q54957805"], ["wd:Q50225709"], ["wd:Q18685104"], ["wd:Q54182188"], ["wd:Q64858119"], ["wd:Q2473997"], ["wd:Q54946878"], ["wd:Q53285185"], ["wd:Q60914460"], ["wd:Q53283922"], ["wd:Q92911649"], ["wd:Q87189239"], ["wd:Q21166181"], ["wd:Q54957919"], ["wd:Q57737841"], ["wd:Q58319243"], ["wd:Q88093882"], ["wd:Q1782155"], ["wd:Q59205135"], ["wd:Q60667451"], ["wd:Q56884292"], ["wd:Q74469900"], ["wd:Q55008870"], ["wd:Q64052139"], ["wd:Q56991181"], ["wd:Q64781569"], ["wd:Q53443892"], ["wd:Q56461546"], ["wd:Q53816700"], ["wd:Q11936764"], ["wd:Q55004374"], ["wd:Q67220048"], ["wd:Q53282882"], ["wd:Q1687583"], ["wd:Q59259777"], ["wd:Q60018436"], ["wd:Q54958023"], ["wd:Q90470893"], ["wd:Q67470696"], ["wd:Q56492872"], ["wd:Q84883106"], ["wd:Q67220028"], ["wd:Q67470073"], ["wd:Q54198350"], ["wd:Q87602297"], ["wd:Q67466905"], ["wd:Q67468440"], ["wd:Q53460937"], ["wd:Q44836217"], ["wd:Q64857590"], ["wd:Q87797905"], ["wd:Q58379815"], ["wd:Q43370965"], ["wd:Q54957847"], ["wd:Q64861079"], ["wd:Q63342052"], ["wd:Q86380475"], ["wd:Q64855403"], ["wd:Q64857432"], ["wd:Q91438648"], ["wd:Q64341938"], ["wd:Q64864295"], ["wd:Q89865933"], ["wd:Q2149938"], ["wd:Q56551114"], ["wd:Q64858304"], ["wd:Q53476390"], ["wd:Q67500552"], ["wd:Q15450063"], ["wd:Q57746308"], ["wd:Q58397612"], ["wd:Q86578782"], ["wd:Q42321192"], ["wd:Q53284673"], ["wd:Q56749886"], ["wd:Q54957816"], ["wd:Q86702057"], ["wd:Q64862792"], ["wd:Q57067846"], ["wd:Q64858196"], ["wd:Q66724745"], ["wd:Q83034619"], ["wd:Q61829298"], ["wd:Q58352797"], ["wd:Q94481342"], ["wd:Q64856313"], ["wd:Q59572138"], ["wd:Q94447592"], ["wd:Q67378120"], ["wd:Q57419326"], ["wd:Q75561892"], ["wd:Q56640255"], ["wd:Q57077365"], ["wd:Q56605891"], ["wd:Q62102318"], ["wd:Q61808611"], ["wd:Q55086923"], ["wd:Q56648183"], ["wd:Q3355912"], ["wd:Q57198587"], ["wd:Q58827832"], ["wd:Q89507962"], ["wd:Q56640584"], ["wd:Q56509038"], ["wd:Q90606417"], ["wd:Q57736204"], ["wd:Q12269533"], ["wd:Q55068519"], ["wd:Q92002098"], ["wd:Q672378"], ["wd:Q64589679"], ["wd:Q84910217"], ["wd:Q85352623"], ["wd:Q57327044"], ["wd:Q64864469"], ["wd:Q57002417"], ["wd:Q59749863"], ["wd:Q64863762"], ["wd:Q27516058"], ["wd:Q53458510"], ["wd:Q54182281"], ["wd:Q64857701"], ["wd:Q58681049"], ["wd:Q58377212"], ["wd:Q59759347"], ["wd:Q3435171"], ["wd:Q64857940"], ["wd:Q88978317"], ["wd:Q58371696"], ["wd:Q58335887"], ["wd:Q2076024"], ["wd:Q55028816"], ["wd:Q19956414"], ["wd:Q90473486"], ["wd:Q21820002"], ["wd:Q54957866"], ["wd:Q57171665"], ["wd:Q57429712"], ["wd:Q59439470"], ["wd:Q37382568"], ["wd:Q1744047"], ["wd:Q59269447"], ["wd:Q79823836"], ["wd:Q53465679"], ["wd:Q91115835"], ["wd:Q64551811"], ["wd:Q59938255"], ["wd:Q86391885"], ["wd:Q578084"], ["wd:Q53475843"], ["wd:Q62055788"], ["wd:Q1553486"], ["wd:Q1033005"], ["wd:Q85237120"], ["wd:Q23759707"], ["wd:Q55098019"], ["wd:Q67482789"], ["wd:Q7688074"], ["wd:Q53285103"], ["wd:Q55008108"], ["wd:Q21542865"], ["wd:Q59832046"], ["wd:Q88977939"], ["wd:Q64856772"], ["wd:Q58611740"], ["wd:Q67220299"], ["wd:Q3435587"], ["wd:Q58623467"], ["wd:Q57909605"], ["wd:Q18280732"], ["wd:Q54040943"], ["wd:Q56593614"], ["wd:Q42803084"], ["wd:Q75604284"], ["wd:Q64857680"], ["wd:Q85107808"], ["wd:Q57066018"], ["wd:Q85687381"], ["wd:Q84571676"], ["wd:Q59387752"]], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:8250 kg:9078 . } UNION \",\n        \"{ ?resource kg:4034 kg:5015 . } UNION \",\n        \"{ ?resource kg:4034 kg:0863 . } UNION \",\n        \"{ ?resource kg:4034 kg:6742 . } UNION \",\n        \"{ ?resource kg:4034 kg:5933 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8250 kg:9078 . } UNION { ?resource kg:4034 kg:5015 . } UNION { ?resource kg:4034 kg:0863 . } UNION { ?resource kg:4034 kg:6742 . } UNION { ?resource kg:4034 kg:5933 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\",\n    \"{ ?movie wdt:P58 ?person . } UNION \",\n    \"{ ?movie wdt:P607 ?person . } UNION \",\n    \"{ ?movie wdt:P162 ?person . } UNION \",\n    \"{ ?movie wdt:P57 ?person . }\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person rdfs:label ?name filter (lang(?name) = \\\"en\\\") .\",\n    \"FILTER (?name IN (\\\"Jens Jørgen Thorsen\\\", \\\"Ole John\\\", \\\"Jørgen Leth\\\")) .\",\n    \"}\",\n   \"GROUP BY ?movie \",\n   \"HAVING (COUNT(DISTINCT ?person) = 3)\"\n   ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . { ?movie wdt:P58 ?person . } UNION { ?movie wdt:P607 ?person . } UNION { ?movie wdt:P162 ?person . } UNION { ?movie wdt:P57 ?person . } ?person wdt:P31 wd:Q5 . ?person rdfs:label ?name filter (lang(?name) = \"en\") . FILTER (?name IN (\"Jens Jørgen Thorsen\", \"Ole John\", \"Jørgen Leth\")) . } GROUP BY ?movie HAVING (COUNT(DISTINCT ?person) = 3) LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?movie WHERE {\",\n        \"{\",\n          \"?movie wdt:P31 wd:Q11424 .\",\n          \"?movie wdt:P58 wd:Q1687239 .\",\n          \"?movie wdt:P1040 wd:Q1687239 .\",\n          \"?movie wdt:P162 wd:Q1687239 .\",\n          \"?movie wdt:P57 wd:Q1687239 .\",\n        \"}\",\n        \"{\",\n          \"?movie wdt:P31 wd:Q11424 .\",\n          \"?movie wdt:P58 wd:Q35979475 .\",\n          \"?movie wdt:P1040 wd:Q35979475 .\",\n          \"?movie wdt:P162 wd:Q35979475 .\",\n          \"?movie wdt:P57 wd:Q35979475 .\",\n        \"}\",\n        \"{\",\n          \"?movie wdt:P31 wd:Q11424 .\",\n          \"?movie wdt:P58 wd:Q562108 .\",\n          \"?movie wdt:P1040 wd:Q562108 .\",\n          \"?movie wdt:P162 wd:Q562108 .\",\n          \"?movie wdt:P57 wd:Q562108 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P58 wd:Q1687239 . ?movie wdt:P1040 wd:Q1687239 . ?movie wdt:P162 wd:Q1687239 . ?movie wdt:P57 wd:Q1687239 . } { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P58 wd:Q35979475 . ?movie wdt:P1040 wd:Q35979475 . ?movie wdt:P162 wd:Q35979475 . ?movie wdt:P57 wd:Q35979475 . } { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P58 wd:Q562108 . ?movie wdt:P1040 wd:Q562108 . ?movie wdt:P162 wd:Q562108 . ?movie wdt:P57 wd:Q562108 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:2722 kg:7110 . } UNION \",\n        \"{ ?film kg:2722 kg:0980 . } UNION \",\n        \"{ ?film kg:2722 kg:2361 . } UNION \",\n        \"{ ?film kg:1439 kg:7110 . } UNION \",\n        \"{ ?film kg:1439 kg:0980 . } UNION \",\n        \"{ ?film kg:1439 kg:2361 . } UNION \",\n        \"{ ?film kg:1174 kg:7110 . } UNION \",\n        \"{ ?film kg:1174 kg:0980 . } UNION \",\n        \"{ ?film kg:1174 kg:2361 . } UNION \",\n        \"{ ?film kg:0116 kg:7110 . } UNION \",\n        \"{ ?film kg:0116 kg:0980 . } UNION \",\n        \"{ ?film kg:0116 kg:2361 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:2722 kg:7110 . } UNION { ?film kg:2722 kg:0980 . } UNION { ?film kg:2722 kg:2361 . } UNION { ?film kg:1439 kg:7110 . } UNION { ?film kg:1439 kg:0980 . } UNION { ?film kg:1439 kg:2361 . } UNION { ?film kg:1174 kg:7110 . } UNION { ?film kg:1174 kg:0980 . } UNION { ?film kg:1174 kg:2361 . } UNION { ?film kg:0116 kg:7110 . } UNION { ?film kg:0116 kg:0980 . } UNION { ?film kg:0116 kg:2361 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q48791 .\",\n      \"?resource wdt:P2600 wd:Q1188657 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q879616 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q192115 wdt:P57 ?resource .\",\n          \"wd:Q656357 wdt:P48 ?resource .\",\n          \"wd:Q656357 wdt:P1040 ?resource .\",\n          \"wd:Q656357 wdt:P161 ?resource .\",\n          \"wd:Q656357 wdt:P344 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q192115 wdt:P58 ?resource .\",\n          \"wd:Q192115 wdt:P1040 ?resource .\",\n          \"wd:Q192115 wdt:P344 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q656357 wdt:P58 ?resource .\",\n          \"wd:Q656357 wdt:P1040 ?resource .\",\n          \"wd:Q656357 wdt:P161 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q192115 wdt:P58 ?resource .\",\n          \"wd:Q192115 wdt:P1040 ?resource .\",\n          \"wd:Q656357 wdt:P161 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q192115 wdt:P58 ?resource .\",\n          \"wd:Q192115 wdt:P1040 ?resource .\",\n          \"wd:Q656357 wdt:P344 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q192115 wdt:P58 ?resource .\",\n          \"wd:Q656357 wdt:P1040 ?resource .\",\n          \"wd:Q656357 wdt:P161 ?resource .\",\n        \"}\",\n        \"{\",\n          \"wd:Q192115 wdt:P58 ?resource .\",\n          \"wd:Q40404 wdt:P1431 ?resource .\",\n          \"wd:Q656357 wdt:P161 ?resource .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q192115 wdt:P57 ?resource . wd:Q656357 wdt:P48 ?resource . wd:Q656357 wdt:P1040 ?resource . wd:Q656357 wdt:P161 ?resource . wd:Q656357 wdt:P344 ?resource . } { wd:Q192115 wdt:P58 ?resource . wd:Q192115 wdt:P1040 ?resource . wd:Q192115 wdt:P344 ?resource . } { wd:Q656357 wdt:P58 ?resource . wd:Q656357 wdt:P1040 ?resource . wd:Q656357 wdt:P161 ?resource . } { wd:Q192115 wdt:P58 ?resource . wd:Q192115 wdt:P1040 ?resource . wd:Q656357 wdt:P161 ?resource . } { wd:Q192115 wdt:P58 ?resource . wd:Q192115 wdt:P1040 ?resource . wd:Q656357 wdt:P344 ?resource . } { wd:Q192115 wdt:P58 ?resource . wd:Q656357 wdt:P1040 ?resource . wd:Q656357 wdt:P161 ?resource . } { wd:Q192115 wdt:P58 ?resource . wd:Q40404 wdt:P1431 ?resource . wd:Q656357 wdt:P161 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:6106 kg:8401 . } UNION \",\n        \"{ ?resource kg:6106 kg:3797 . } UNION \",\n        \"{ ?resource kg:6106 kg:5397 . } UNION \",\n        \"{ ?resource kg:6106 kg:6948 . } UNION \",\n        \"{ ?resource kg:6106 kg:9575 . } UNION \",\n        \"{ ?resource kg:5842 kg:8401 . } UNION \",\n        \"{ ?resource kg:5842 kg:3797 . } UNION \",\n        \"{ ?resource kg:5842 kg:5397 . } UNION \",\n        \"{ ?resource kg:5842 kg:6948 . } UNION \",\n        \"{ ?resource kg:5842 kg:9575 . } UNION \",\n        \"{ ?resource kg:1113 kg:6106 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6106 kg:8401 . } UNION { ?resource kg:6106 kg:3797 . } UNION { ?resource kg:6106 kg:5397 . } UNION { ?resource kg:6106 kg:6948 . } UNION { ?resource kg:6106 kg:9575 . } UNION { ?resource kg:5842 kg:8401 . } UNION { ?resource kg:5842 kg:3797 . } UNION { ?resource kg:5842 kg:5397 . } UNION { ?resource kg:5842 kg:6948 . } UNION { ?resource kg:5842 kg:9575 . } UNION { ?resource kg:1113 kg:6106 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label \\\"This Night\\\"@en .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film wdt:P344 ?cinematographer .\",\n        \"?film wdt:P58 ?writer .\",\n      \"}\",\n      \"{\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label \\\"Rio das Mortes\\\"@en .\",\n        \"?film2 wdt:P58 ?writer2 .\",\n        \"?film2 wdt:P68 ?editor2 .\",\n      \"}\",\n      \"{\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label \\\"Lili Marleen\\\"@en .\",\n        \"?film3 wdt:P58 ?writer3 .\",\n        \"?film3 wdt:P68 ?editor3 .\",\n      \"}\",\n      \"{\",\n        \"?film4 wdt:P31 wd:Q11424 .\",\n        \"?film4 rdfs:label \\\"Whity\\\"@en .\",\n        \"?film4 wdt:P58 ?writer4 .\",\n        \"?film4 wdt:P68 ?editor4 .\",\n      \"}\",\n      \"BIND(IF((?director = ?cinematographer) && (?director = ?writer) && (?director = ?writer2) && (?director = ?editor2) && (?director = ?writer3) && (?director = ?editor3) && (?director = ?writer4) && (?director = ?editor4), ?director, \\\"No Match\\\") AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"This Night\"@en . ?film wdt:P57 ?director . ?film wdt:P344 ?cinematographer . ?film wdt:P58 ?writer . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"Rio das Mortes\"@en . ?film2 wdt:P58 ?writer2 . ?film2 wdt:P68 ?editor2 . } { ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label \"Lili Marleen\"@en . ?film3 wdt:P58 ?writer3 . ?film3 wdt:P68 ?editor3 . } { ?film4 wdt:P31 wd:Q11424 . ?film4 rdfs:label \"Whity\"@en . ?film4 wdt:P58 ?writer4 . ?film4 wdt:P68 ?editor4 . } BIND(IF((?director = ?cinematographer) && (?director = ?writer) && (?director = ?writer2) && (?director = ?editor2) && (?director = ?writer3) && (?director = ?editor3) && (?director = ?writer4) && (?director = ?editor4), ?director, \"No Match\") AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{\",\n          \"wd:Q1699716 wdt:P57 ?person .\",\n          \"wd:Q1699716 wdt:P344 ?person .\",\n          \"wd:Q1699716 wdt:P58 ?person .\",\n        \"}\",\n        \"{\",\n          \"wd:Q823767 wdt:P58 ?person .\",\n          \"wd:Q823767 wdt:P1040 ?person .\",\n        \"}\",\n        \"{\",\n          \"wd:Q686125 wdt:P58 ?person .\",\n          \"wd:Q686125 wdt:P1040 ?person .\",\n        \"}\",\n        \"{\",\n          \"wd:Q327427 wdt:P58 ?person .\",\n          \"wd:Q327427 wdt:P1040 ?person .\",\n        \"}\"\n      ]\n    }", "normal_query": "SELECT ?person WHERE { { wd:Q1699716 wdt:P57 ?person . wd:Q1699716 wdt:P344 ?person . wd:Q1699716 wdt:P58 ?person . } { wd:Q823767 wdt:P58 ?person . wd:Q823767 wdt:P1040 ?person . } { wd:Q686125 wdt:P58 ?person . wd:Q686125 wdt:P1040 ?person . } { wd:Q327427 wdt:P58 ?person . wd:Q327427 wdt:P1040 ?person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{\",\n          \"?person kg:0671 kg:2058 .\",\n          \"?person kg:1289 kg:2058 .\",\n          \"?person kg:9084 kg:2058 .\",\n          \"?person kg:1289 kg:0618 .\",\n          \"?person kg:7206 kg:0618 .\",\n          \"?person kg:1289 kg:8658 .\",\n          \"?person kg:7206 kg:8658 .\",\n          \"?person kg:1289 kg:3976 .\",\n          \"?person kg:7206 kg:3976 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { { ?person kg:0671 kg:2058 . ?person kg:1289 kg:2058 . ?person kg:9084 kg:2058 . ?person kg:1289 kg:0618 . ?person kg:7206 kg:0618 . ?person kg:1289 kg:8658 . ?person kg:7206 kg:8658 . ?person kg:1289 kg:3976 . ?person kg:7206 kg:3976 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P27 wd:Q30 .\",\n    \"?resource wdt:P496 wd:Q859695 .\",\n    \"?resource wdt:P58 ?film .\",\n    \"{ ?film wdt:P1476 'Night of the Living Dead'@en } UNION { ?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865) }\",\n    \"?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865)\",\n    \"?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q30 . ?resource wdt:P496 wd:Q859695 . ?resource wdt:P58 ?film . { ?film wdt:P1476 'Night of the Living Dead'@en } UNION { ?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865) } ?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865) ?film wdt:P3027 ?edit ; ?direct ; ?write . FILTER(?edit = wd:Q195865 && ?direct = wd:Q195865 && ?write = wd:Q195865) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q2520777 .\",\n          \"?resource wdt:P1040 wd:Q2520777 .\",\n          \"?resource wdt:P344 wd:Q623051 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q2520777 .\",\n          \"?resource wdt:P1040 wd:Q2520777 .\",\n          \"?resource wdt:P344 wd:Q623051 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q2520777 .\",\n          \"?resource wdt:P59 wd:Q2520777 .\",\n          \"?resource wdt:P344 wd:Q623051 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q2520777 . ?resource wdt:P1040 wd:Q2520777 . ?resource wdt:P344 wd:Q623051 . } { ?resource wdt:P58 wd:Q2520777 . ?resource wdt:P1040 wd:Q2520777 . ?resource wdt:P344 wd:Q623051 . } { ?resource wdt:P58 wd:Q2520777 . ?resource wdt:P59 wd:Q2520777 . ?resource wdt:P344 wd:Q623051 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:7456 kg:7350 .\",\n          \"?resource kg:8173 kg:3266 ;\",\n                    \"?kg:5180 kg:3266 ;\",\n                    \"?kg:7874 kg:3266 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:7456 kg:7350 .\",\n          \"?resource kg:8173 kg:5535 ;\",\n                    \"?kg:5180 kg:5535 ;\",\n                    \"?kg:7874 kg:5535 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:7456 kg:7350 .\",\n          \"?resource kg:8173 kg:8900 ;\",\n                    \"?kg:5180 kg:8900 ;\",\n                    \"?kg:7874 kg:8900 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7456 kg:7350 . ?resource kg:8173 kg:3266 ; ?kg:5180 kg:3266 ; ?kg:7874 kg:3266 . } { ?resource kg:7456 kg:7350 . ?resource kg:8173 kg:5535 ; ?kg:5180 kg:5535 ; ?kg:7874 kg:5535 . } { ?resource kg:7456 kg:7350 . ?resource kg:8173 kg:8900 ; ?kg:5180 kg:8900 ; ?kg:7874 kg:8900 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P50 wd:Q249678 .\",\n      \"?resource wdt:P86 wd:Q249678 .\",\n      \"?resource wdt:P58 wd:Q249678 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P50 wd:Q4831185 .\",\n      \"?resource wdt:P2600 wd:Q4831185 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P57 wd:Q963516 .\",\n      \"?resource wdt:P248 wd:Q963516 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P50 wd:Q7955 .\",\n      \"?resource wdt:P248 wd:Q7955 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P50 wd:Q249678 . ?resource wdt:P86 wd:Q249678 . ?resource wdt:P58 wd:Q249678 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P50 wd:Q4831185 . ?resource wdt:P2600 wd:Q4831185 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P57 wd:Q963516 . ?resource wdt:P248 wd:Q963516 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P50 wd:Q7955 . ?resource wdt:P248 wd:Q7955 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q613974 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q613974 wdt:P2080 ?resource. } UNION \",\n        \"{ wd:Q613974 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q15127 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q15127 wdt:P2080 ?resource. } UNION \",\n        \"{ wd:Q15127 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q1869678 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1869678 wdt:P2080 ?resource. } UNION \",\n        \"{ wd:Q1869678 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q613974 wdt:P57 ?resource. } UNION { wd:Q613974 wdt:P2080 ?resource. } UNION { wd:Q613974 wdt:P344 ?resource. } UNION { wd:Q15127 wdt:P57 ?resource. } UNION { wd:Q15127 wdt:P2080 ?resource. } UNION { wd:Q15127 wdt:P344 ?resource. } UNION { wd:Q1869678 wdt:P57 ?resource. } UNION { wd:Q1869678 wdt:P2080 ?resource. } UNION { wd:Q1869678 wdt:P344 ?resource. } UNION { wd:Q17738 wdt:P58 ?resource. } UNION { wd:Q17738 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q38222"]], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:3209 kg:9563 . } UNION \",\n        \"{ ?resource kg:8283 kg:9563 . } UNION \",\n        \"{ ?resource kg:4667 kg:9563 . } UNION \",\n        \"{ ?resource kg:3209 kg:5200 . } UNION \",\n        \"{ ?resource kg:8283 kg:5200 . } UNION \",\n        \"{ ?resource kg:4667 kg:5200 . } UNION \",\n        \"{ ?resource kg:3209 kg:8423 . } UNION \",\n        \"{ ?resource kg:8283 kg:8423 . } UNION \",\n        \"{ ?resource kg:4667 kg:8423 . } UNION \",\n        \"{ ?resource kg:8283 kg:5527 . } UNION \",\n        \"{ ?resource kg:9456 kg:5527 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3209 kg:9563 . } UNION { ?resource kg:8283 kg:9563 . } UNION { ?resource kg:4667 kg:9563 . } UNION { ?resource kg:3209 kg:5200 . } UNION { ?resource kg:8283 kg:5200 . } UNION { ?resource kg:4667 kg:5200 . } UNION { ?resource kg:3209 kg:8423 . } UNION { ?resource kg:8283 kg:8423 . } UNION { ?resource kg:4667 kg:8423 . } UNION { ?resource kg:8283 kg:5527 . } UNION { ?resource kg:9456 kg:5527 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P58 ?writer .\",\n    \"?film wdt:P1040 ?editor .\",\n    \"{ ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21198 } .\",\n    \"{ ?producer wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q21198 } .\",\n    \"{ ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21198 } .\",\n    \"{ ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21198 } .\",\n    \"?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en .\",\n    \"?producer rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"?writer rdfs:label \\\"Ole John\\\"@en .\",\n    \"?editor rdfs:label \\\"Ole John\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P162 ?producer . ?film wdt:P58 ?writer . ?film wdt:P1040 ?editor . { ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21198 } . { ?producer wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q21198 } . { ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21198 } . { ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21198 } . ?director rdfs:label \"Jens Jørgen Thorsen\"@en . ?producer rdfs:label \"Jørgen Leth\"@en . ?writer rdfs:label \"Ole John\"@en . ?editor rdfs:label \"Ole John\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P58 wd:Q1687239 .\",\n          \"?film wdt:P57 wd:Q1687239 .\",\n          \"?film wdt:P1040 wd:Q1687239 .\",\n          \"?film wdt:P162 wd:Q1687239 .\",\n        \"} UNION {\",\n          \"?film wdt:P58 wd:Q562108 .\",\n          \"?film wdt:P57 wd:Q562108 .\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P193 ?production_company .\",\n        \"} UNION {\",\n          \"?film wdt:P57 wd:Q35979475 .\",\n          \"?film wdt:P58 wd:Q35979475 .\",\n          \"?film wdt:P1040 wd:Q35979475 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P162 wd:Q1687239 . } UNION { ?film wdt:P58 wd:Q562108 . ?film wdt:P57 wd:Q562108 . ?film wdt:P31 wd:Q11424 . ?film wdt:P193 ?production_company . } UNION { ?film wdt:P57 wd:Q35979475 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P1040 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q20757119"], ["wd:Q20728937"], ["wd:Q73987448"], ["wd:Q20729238"], ["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:4621 kg:5363 . } UNION \",\n        \"{ ?film kg:7637 kg:6236 . } UNION \",\n        \"{ ?film kg:8645 kg:6236 . } UNION \",\n        \"{ ?film kg:5446 kg:6236 . } UNION \",\n        \"{ ?film kg:2246 kg:6236 . } UNION \",\n        \"{ ?film kg:7976 kg:6236 . } UNION \",\n        \"{ ?film kg:7637 kg:2605 . } UNION \",\n        \"{ ?film kg:8645 kg:2605 . } UNION \",\n        \"{ ?film kg:5446 kg:2605 . } UNION \",\n        \"{ ?film kg:2246 kg:2605 . } UNION \",\n        \"{ ?film kg:7976 kg:2605 . } UNION \",\n        \"{ ?film kg:7637 kg:8120 . } UNION \",\n        \"{ ?film kg:8645 kg:8120 . } UNION \",\n        \"{ ?film kg:5446 kg:8120 . } UNION \",\n        \"{ ?film kg:2246 kg:8120 . } UNION \",\n        \"{ ?film kg:7976 kg:8120 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:4621 kg:5363 . } UNION { ?film kg:7637 kg:6236 . } UNION { ?film kg:8645 kg:6236 . } UNION { ?film kg:5446 kg:6236 . } UNION { ?film kg:2246 kg:6236 . } UNION { ?film kg:7976 kg:6236 . } UNION { ?film kg:7637 kg:2605 . } UNION { ?film kg:8645 kg:2605 . } UNION { ?film kg:5446 kg:2605 . } UNION { ?film kg:2246 kg:2605 . } UNION { ?film kg:7976 kg:2605 . } UNION { ?film kg:7637 kg:8120 . } UNION { ?film kg:8645 kg:8120 . } UNION { ?film kg:5446 kg:8120 . } UNION { ?film kg:2246 kg:8120 . } UNION { ?film kg:7976 kg:8120 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES (?film) { wd:Q1209864 wd:Q13577699 wd:Q158396 } \",\n    \"  ?film wdt:P50 ?writer .\",\n    \"  ?film wdt:P162 ?executiveProducer .\",\n    \"  ?film wdt:P1040 ?editor .\",\n    \"  ?film wdt:P57 ?director .\",\n    \"  FILTER(?writer = ?executiveProducer && ?executiveProducer = ?editor && ?editor = ?director) \",\n    \"  BIND(?writer AS ?resource)\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES (?film) { wd:Q1209864 wd:Q13577699 wd:Q158396 } ?film wdt:P50 ?writer . ?film wdt:P162 ?executiveProducer . ?film wdt:P1040 ?editor . ?film wdt:P57 ?director . FILTER(?writer = ?executiveProducer && ?executiveProducer = ?editor && ?editor = ?director) BIND(?writer AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{ wd:Q483197 p:P57/pq:P282 ?director. } UNION \",\n        \"{ wd:Q483197 p:P58/pq:P282 ?writer. } UNION \",\n        \"{ wd:Q483197 p:P1040/pq:P282 ?editor. } UNION \",\n        \"{ wd:Q483197 p:P1431/pq:P282 ?execProducer. }\",\n        \"{ wd:Q13471372 p:P57/pq:P282 ?director. } UNION \",\n        \"{ wd:Q13471372 p:P58/pq:P282 ?writer. } UNION \",\n        \"{ wd:Q13471372 p:P1040/pq:P282 ?editor. } UNION \",\n        \"{ wd:Q13471372 p:P1431/pq:P282 ?execProducer. }\",\n        \"{ wd:Q484679 p:P57/pq:P282 ?director. } UNION \",\n        \"{ wd:Q484679 p:P58/pq:P282 ?writer. } UNION \",\n        \"{ wd:Q484679 p:P1040/pq:P282 ?editor. } UNION \",\n        \"{ wd:Q484679 p:P1431/pq:P282 ?execProducer. }\",\n      \"BIND(IF((?director = ?writer) && (?writer = ?editor) && (?editor = ?execProducer), ?director, \\\"\\\") AS ?person)\",\n      \"FILTER(?person != \\\"\\\")\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { { wd:Q483197 p:P57/pq:P282 ?director. } UNION { wd:Q483197 p:P58/pq:P282 ?writer. } UNION { wd:Q483197 p:P1040/pq:P282 ?editor. } UNION { wd:Q483197 p:P1431/pq:P282 ?execProducer. } { wd:Q13471372 p:P57/pq:P282 ?director. } UNION { wd:Q13471372 p:P58/pq:P282 ?writer. } UNION { wd:Q13471372 p:P1040/pq:P282 ?editor. } UNION { wd:Q13471372 p:P1431/pq:P282 ?execProducer. } { wd:Q484679 p:P57/pq:P282 ?director. } UNION { wd:Q484679 p:P58/pq:P282 ?writer. } UNION { wd:Q484679 p:P1040/pq:P282 ?editor. } UNION { wd:Q484679 p:P1431/pq:P282 ?execProducer. } BIND(IF((?director = ?writer) && (?writer = ?editor) && (?editor = ?execProducer), ?director, \"\") AS ?person) FILTER(?person != \"\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?person WHERE {\",\n        \"{ ?person kg:5472 kg:1602 . } UNION \",\n        \"{ ?person kg:5831 kg:1602 . } UNION \",\n        \"{ ?person kg:2926 kg:1602 . } UNION \",\n        \"{ ?person kg:9732 kg:1602 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { { ?person kg:5472 kg:1602 . } UNION { ?person kg:5831 kg:1602 . } UNION { ?person kg:2926 kg:1602 . } UNION { ?person kg:9732 kg:1602 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P58 ?editor .\",\n    \"?film wdt:P50 ?director .\",\n    \"?film wdt:P57 ?writer .\",\n    \"{ ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21198 } .\",\n    \"{ ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21198 } .\",\n    \"{ ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21198 } .\",\n    \"?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en .\",\n    \"?director rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"?writer rdfs:label \\\"Ole John\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?editor . ?film wdt:P50 ?director . ?film wdt:P57 ?writer . { ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21198 } . { ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21198 } . { ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21198 } . ?editor rdfs:label \"Jens Jørgen Thorsen\"@en . ?director rdfs:label \"Jørgen Leth\"@en . ?writer rdfs:label \"Ole John\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{\",\n          \"?film wdt:P57 wd:Q1687239 .\",\n          \"?film wdt:P58 wd:Q1687239 .\",\n          \"?film wdt:P1040 wd:Q1687239 .\",\n        \"}\",\n        \"{\",\n          \"?film wdt:P57 wd:Q562108 .\",\n          \"?film wdt:P58 wd:Q562108 .\",\n          \"?film wdt:P1040 wd:Q562108 .\",\n        \"}\",\n        \"{\",\n          \"?film wdt:P57 wd:Q35979475 .\",\n          \"?film wdt:P58 wd:Q35979475 .\",\n          \"?film wdt:P1040 wd:Q35979475 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 wd:Q1687239 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P1040 wd:Q1687239 . } { ?film wdt:P57 wd:Q562108 . ?film wdt:P58 wd:Q562108 . ?film wdt:P1040 wd:Q562108 . } { ?film wdt:P57 wd:Q35979475 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P1040 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:0254 kg:4819 . } UNION \",\n        \"{ ?film kg:6378 kg:4819 . } UNION \",\n        \"{ ?film kg:2023 kg:4819 . } UNION \",\n        \"{ ?film kg:0254 kg:5417 . } UNION \",\n        \"{ ?film kg:6378 kg:5417 . } UNION \",\n        \"{ ?film kg:2023 kg:5417 . } UNION \",\n        \"{ ?film kg:0254 kg:9845 . } UNION \",\n        \"{ ?film kg:6378 kg:9845 . } UNION \",\n        \"{ ?film kg:2023 kg:9845 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:0254 kg:4819 . } UNION { ?film kg:6378 kg:4819 . } UNION { ?film kg:2023 kg:4819 . } UNION { ?film kg:0254 kg:5417 . } UNION { ?film kg:6378 kg:5417 . } UNION { ?film kg:2023 kg:5417 . } UNION { ?film kg:0254 kg:9845 . } UNION { ?film kg:6378 kg:9845 . } UNION { ?film kg:2023 kg:9845 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 wd:Q6180969, wd:Q1340065, wd:Q1051194 .\",\n    \"?film wdt:P58 wd:Q6180969, wd:Q1340065, wd:Q1051194 .\",\n    \"?film wdt:P52 wd:Q6180969, wd:Q1340065, wd:Q1051194 .\",\n    \"?film wdt:P162 wd:Q6180969, wd:Q1340065, wd:Q1051194 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q6180969, wd:Q1340065, wd:Q1051194 . ?film wdt:P58 wd:Q6180969, wd:Q1340065, wd:Q1051194 . ?film wdt:P52 wd:Q6180969, wd:Q1340065, wd:Q1051194 . ?film wdt:P162 wd:Q6180969, wd:Q1340065, wd:Q1051194 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P58 wd:Q1687239 .\",\n          \"?film wdt:P57 wd:Q1687239 .\",\n          \"?film wdt:P1040 wd:Q1687239 .\",\n          \"?film wdt:P162 wd:Q1687239 .\",\n        \"} UNION {\",\n          \"?film wdt:P58 wd:Q562108 .\",\n          \"?film wdt:P57 wd:Q562108 .\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P193 ?production_company .\",\n        \"} UNION {\",\n          \"?film wdt:P57 wd:Q35979475 .\",\n          \"?film wdt:P58 wd:Q35979475 .\",\n          \"?film wdt:P1040 wd:Q35979475 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P162 wd:Q1687239 . } UNION { ?film wdt:P58 wd:Q562108 . ?film wdt:P57 wd:Q562108 . ?film wdt:P31 wd:Q11424 . ?film wdt:P193 ?production_company . } UNION { ?film wdt:P57 wd:Q35979475 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P1040 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q20757119"], ["wd:Q20728937"], ["wd:Q73987448"], ["wd:Q20729238"], ["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film kg:2858 kg:2375 .}\",\n        \"{?film kg:4593 kg:0596 .}\",\n        \"{?film kg:4593 kg:4796 .}\",\n        \"{?film kg:4593 kg:1382 .}\",\n        \"{?film kg:3050 kg:0596 .}\",\n        \"{?film kg:3050 kg:4796 .}\",\n        \"{?film kg:3050 kg:1382 .}\",\n        \"{?film kg:4885 kg:0596 .}\",\n        \"{?film kg:4885 kg:4796 .}\",\n        \"{?film kg:4885 kg:1382 .}\",\n        \"{?film kg:5891 kg:0596 .}\",\n        \"{?film kg:5891 kg:4796 .}\",\n        \"{?film kg:5891 kg:1382 .}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { {?film kg:2858 kg:2375 .} {?film kg:4593 kg:0596 .} {?film kg:4593 kg:4796 .} {?film kg:4593 kg:1382 .} {?film kg:3050 kg:0596 .} {?film kg:3050 kg:4796 .} {?film kg:3050 kg:1382 .} {?film kg:4885 kg:0596 .} {?film kg:4885 kg:4796 .} {?film kg:4885 kg:1382 .} {?film kg:5891 kg:0596 .} {?film kg:5891 kg:4796 .} {?film kg:5891 kg:1382 .} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q24867;\",\n        \"wdt:P50 ?director.\",\n        \"wd:Q123456 wdt:P50 ?director.\",\n        \"wd:Q123456 wdt:P58 ?editor.\",\n        \"wd:Q123456 wdt:P57 ?writer.\",\n        \"wd:Q123456 wdt:P279 ?executiveProducer.\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q24867;\",\n        \"wdt:P50 ?director.\",\n        \"wd:Q654321 wdt:P50 ?director.\",\n        \"wd:Q654321 wdt:P58 ?editor.\",\n        \"wd:Q654321 wdt:P57 ?writer.\",\n        \"wd:Q654321 wdt:P279 ?executiveProducer.\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q24867;\",\n        \"wdt:P50 ?director.\",\n        \"wd:Q987654 wdt:P50 ?director.\",\n        \"wd:Q987654 wdt:P58 ?editor.\",\n        \"wd:Q987654 wdt:P57 ?writer.\",\n        \"wd:Q987654 wdt:P279 ?executiveProducer.\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q24867; wdt:P50 ?director. wd:Q123456 wdt:P50 ?director. wd:Q123456 wdt:P58 ?editor. wd:Q123456 wdt:P57 ?writer. wd:Q123456 wdt:P279 ?executiveProducer. } { ?resource wdt:P31 wd:Q24867; wdt:P50 ?director. wd:Q654321 wdt:P50 ?director. wd:Q654321 wdt:P58 ?editor. wd:Q654321 wdt:P57 ?writer. wd:Q654321 wdt:P279 ?executiveProducer. } { ?resource wdt:P31 wd:Q24867; wdt:P50 ?director. wd:Q987654 wdt:P50 ?director. wd:Q987654 wdt:P58 ?editor. wd:Q987654 wdt:P57 ?writer. wd:Q987654 wdt:P279 ?executiveProducer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q25479948 wdt:P57 ?director. } UNION \",\n        \"{ wd:Q5437360 wdt:P1040 ?editor. } UNION \",\n        \"{ wd:Q5437360 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q5437360 wdt:P1431 ?executiveProducer. } UNION \",\n        \"{ wd:Q5437360 wdt:P57 ?director2. } UNION \",\n        \"{ wd:Q12813010 wdt:P1040 ?editor2. } UNION \",\n        \"{ wd:Q12813010 wdt:P58 ?writer2. } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?executiveProducer2. } UNION \",\n        \"{ wd:Q12813010 wdt:P57 ?director3. } UNION \",\n        \"{ wd:Q6084069 wdt:P1040 ?editor3. } UNION \",\n        \"{ wd:Q6084069 wdt:P58 ?writer3. } UNION \",\n        \"{ wd:Q6084069 wdt:P1431 ?executiveProducer3. } UNION \",\n        \"{ wd:Q6084069 wdt:P57 ?director4. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q25479948 wdt:P57 ?director. } UNION { wd:Q5437360 wdt:P1040 ?editor. } UNION { wd:Q5437360 wdt:P58 ?writer. } UNION { wd:Q5437360 wdt:P1431 ?executiveProducer. } UNION { wd:Q5437360 wdt:P57 ?director2. } UNION { wd:Q12813010 wdt:P1040 ?editor2. } UNION { wd:Q12813010 wdt:P58 ?writer2. } UNION { wd:Q12813010 wdt:P1431 ?executiveProducer2. } UNION { wd:Q12813010 wdt:P57 ?director3. } UNION { wd:Q6084069 wdt:P1040 ?editor3. } UNION { wd:Q6084069 wdt:P58 ?writer3. } UNION { wd:Q6084069 wdt:P1431 ?executiveProducer3. } UNION { wd:Q6084069 wdt:P57 ?director4. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:7931 kg:4146 ?director . } UNION \",\n        \"{ ?film kg:4146 ?director ; a ?type . FILTER(?type IN (kg:0732, kg:4638, kg:3865)) }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:7931 kg:4146 ?director . } UNION { ?film kg:4146 ?director ; a ?type . FILTER(?type IN (kg:0732, kg:4638, kg:3865)) } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?ember wdt:P57 ?director .\",\n        \"?ember wdt:P31 wd:Q2085381 .\",\n        \"?ember rdfs:label \\\"Ember\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?fate wdt:P57 ?director ;\",\n          \"wdt:P50 ?director ;\",\n          \"wdt:P86 ?director ;\",\n          \"wdt:P279* wd:Q3455803 .\",\n        \"?fate rdfs:label \\\"Fate\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?waitingRoom wdt:P57 ?director ;\",\n          \"wdt:P50 ?director ;\",\n          \"wdt:P86 ?director ;\",\n          \"wdt:P279* wd:Q3455803 .\",\n        \"?waitingRoom rdfs:label \\\"The Waiting Room\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?confession wdt:P57 ?director ;\",\n          \"wdt:P50 ?director ;\",\n          \"wdt:P86 ?director ;\",\n          \"wdt:P279* wd:Q3455803 .\",\n        \"?confession rdfs:label \\\"The Confession\\\"@en .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?ember wdt:P57 ?director . ?ember wdt:P31 wd:Q2085381 . ?ember rdfs:label \"Ember\"@en . } { ?fate wdt:P57 ?director ; wdt:P50 ?director ; wdt:P86 ?director ; wdt:P279* wd:Q3455803 . ?fate rdfs:label \"Fate\"@en . } { ?waitingRoom wdt:P57 ?director ; wdt:P50 ?director ; wdt:P86 ?director ; wdt:P279* wd:Q3455803 . ?waitingRoom rdfs:label \"The Waiting Room\"@en . } { ?confession wdt:P57 ?director ; wdt:P50 ?director ; wdt:P86 ?director ; wdt:P279* wd:Q3455803 . ?confession rdfs:label \"The Confession\"@en . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director WHERE {\",\n        \"{ wd:Q25479948 wdt:P57 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q6084069 wdt:P57 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q25479948 wdt:P1040 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q6084069 wdt:P1040 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q25479948 wdt:P31 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q6084069 wdt:P31 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q25479948 wdt:P58 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q6084069 wdt:P58 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q25479948 wdt:P1431 ?director. }\",\n        \"UNION\",\n        \"{ wd:Q6084069 wdt:P1431 ?director. }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?director WHERE { { wd:Q25479948 wdt:P57 ?director. } UNION { wd:Q6084069 wdt:P57 ?director. } UNION { wd:Q25479948 wdt:P1040 ?director. } UNION { wd:Q6084069 wdt:P1040 ?director. } UNION { wd:Q25479948 wdt:P31 ?director. } UNION { wd:Q6084069 wdt:P31 ?director. } UNION { wd:Q25479948 wdt:P58 ?director. } UNION { wd:Q6084069 wdt:P58 ?director. } UNION { wd:Q25479948 wdt:P1431 ?director. } UNION { wd:Q6084069 wdt:P1431 ?director. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5227 kg:2761 ?resource . } UNION \",\n        \"{ kg:5227 kg:6581 ?resource . } UNION \",\n        \"{ kg:5227 kg:0346 ?resource . } UNION \",\n        \"{ kg:5227 kg:5227 ?resource . }\",\n      \"FILTER (?resource IN (kg:6597, kg:6581, kg:6201))\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5227 kg:2761 ?resource . } UNION { kg:5227 kg:6581 ?resource . } UNION { kg:5227 kg:0346 ?resource . } UNION { kg:5227 kg:5227 ?resource . } FILTER (?resource IN (kg:6597, kg:6581, kg:6201)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q906889 .\",\n      \"?film wdt:P58 wd:Q906889 .\",\n      \"?film wdt:P3320 wd:Q906889 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q906889 . ?film wdt:P58 wd:Q906889 . ?film wdt:P3320 wd:Q906889 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?editor WHERE {\",\n    \"{\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P58 ?editor .\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"FILTER (?editor = ?cinematographer) .\",\n      \"VALUES ?film {wd:Q169720 wd:Q169725 wd:Q180699 wd:Q39495} .\",\n    \"}\",\n    \"{\",\n      \"wd:Q39495 wdt:P271 ?editor .\",\n    \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?editor WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?editor . ?film wdt:P344 ?cinematographer . FILTER (?editor = ?cinematographer) . VALUES ?film {wd:Q169720 wd:Q169725 wd:Q180699 wd:Q39495} . } { wd:Q39495 wdt:P271 ?editor . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q13471372 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q13471372 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q16985078 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q16985078 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q428929 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q428929 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q765928 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q765928 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q765928 wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q13471372 wdt:P1040 ?resource. } UNION { wd:Q13471372 wdt:P344 ?resource. } UNION { wd:Q16985078 wdt:P1040 ?resource. } UNION { wd:Q16985078 wdt:P344 ?resource. } UNION { wd:Q428929 wdt:P1040 ?resource. } UNION { wd:Q428929 wdt:P344 ?resource. } UNION { wd:Q765928 wdt:P1040 ?resource. } UNION { wd:Q765928 wdt:P344 ?resource. } UNION { wd:Q765928 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q212990"]], "gold": [["wd:Q212990"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:0039 kg:9181 . } UNION \",\n        \"{ ?resource kg:0039 kg:3285 . } UNION \",\n        \"{ ?resource kg:0039 kg:5838 . } UNION \",\n        \"{ ?resource kg:0039 kg:4511 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0039 kg:9181 . } UNION { ?resource kg:0039 kg:3285 . } UNION { ?resource kg:0039 kg:5838 . } UNION { ?resource kg:0039 kg:4511 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P800 wd:Q249677 .\",\n      \"?resource wdt:P108 wd:Q1059465 .\",\n      \"?resource wdt:P108 wd:Q36578 .\",\n      \"?resource wdt:P108 wd:Q2013 .\",\n      \"?resource wdt:P108 wd:Q4911222 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q249677 . ?resource wdt:P108 wd:Q1059465 . ?resource wdt:P108 wd:Q36578 . ?resource wdt:P108 wd:Q2013 . ?resource wdt:P108 wd:Q4911222 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q80"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P108 wd:Q7095994.} UNION \",\n        \"{?resource wdt:P126 wd:Q37033.} UNION \",\n        \"{?resource wdt:P108 wd:Q42944.} UNION \",\n        \"{?resource wdt:P108 wd:Q7204713.} UNION \",\n        \"{?resource wdt:P108 wd:Q7432436.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P108 wd:Q7095994.} UNION {?resource wdt:P126 wd:Q37033.} UNION {?resource wdt:P108 wd:Q42944.} UNION {?resource wdt:P108 wd:Q7204713.} UNION {?resource wdt:P108 wd:Q7432436.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1579821"], ["wd:Q43954169"], ["wd:Q63966878"], ["wd:Q15052128"], ["wd:Q55097980"], ["wd:Q57909530"], ["wd:Q60227311"], ["wd:Q64854112"], ["wd:Q57095111"], ["wd:Q56956048"], ["wd:Q60255049"], ["wd:Q57087709"], ["wd:Q59751646"], ["wd:Q67500738"], ["wd:Q79724371"], ["wd:Q63409944"], ["wd:Q59510437"], ["wd:Q53443276"], ["wd:Q56849337"], ["wd:Q60656401"], ["wd:Q59750766"], ["wd:Q67378102"], ["wd:Q1032963"], ["wd:Q53463521"], ["wd:Q67470367"], ["wd:Q90408220"], ["wd:Q89063393"], ["wd:Q58315640"], ["wd:Q63390061"], ["wd:Q55433580"], ["wd:Q64857698"], ["wd:Q64860531"], ["wd:Q57635068"], ["wd:Q55008221"], ["wd:Q55076838"], ["wd:Q67220443"], ["wd:Q57416543"], ["wd:Q15145161"], ["wd:Q64857896"], ["wd:Q80"], ["wd:Q6163986"], ["wd:Q11919389"], ["wd:Q53284080"], ["wd:Q53506223"], ["wd:Q89508163"], ["wd:Q59082432"], ["wd:Q64857987"], ["wd:Q184592"], ["wd:Q88003958"], ["wd:Q64855359"], ["wd:Q57414602"], ["wd:Q64866883"], ["wd:Q95956948"], ["wd:Q53285043"], ["wd:Q59563456"], ["wd:Q96147390"], ["wd:Q47543088"], ["wd:Q53465303"], ["wd:Q55095818"], ["wd:Q63754483"], ["wd:Q64857857"], ["wd:Q64857872"], ["wd:Q59684273"], ["wd:Q57934192"], ["wd:Q62760775"], ["wd:Q55005202"], ["wd:Q67220581"], ["wd:Q85361629"], ["wd:Q56992693"], ["wd:Q64857953"], ["wd:Q43829735"], ["wd:Q64707109"], ["wd:Q7781924"], ["wd:Q59471507"], ["wd:Q59491951"], ["wd:Q59554056"], ["wd:Q64864347"], ["wd:Q57305579"], ["wd:Q64857702"], ["wd:Q43216244"], ["wd:Q26936205"], ["wd:Q56854360"], ["wd:Q15901871"], ["wd:Q80744051"], ["wd:Q27050188"], ["wd:Q58888543"], ["wd:Q51462053"], ["wd:Q58878269"], ["wd:Q58827822"], ["wd:Q64855339"], ["wd:Q64861778"], ["wd:Q64864843"], ["wd:Q53283550"], ["wd:Q60618481"], ["wd:Q63487498"], ["wd:Q30512793"], ["wd:Q54957734"], ["wd:Q55007482"], ["wd:Q17308816"], ["wd:Q91526404"], ["wd:Q88661011"], ["wd:Q3762636"], ["wd:Q514831"], ["wd:Q1351285"], ["wd:Q87075829"], ["wd:Q55063548"], ["wd:Q60191855"], ["wd:Q57007899"], ["wd:Q56885138"], ["wd:Q67220068"], ["wd:Q67378162"], ["wd:Q61831016"], ["wd:Q54957985"], ["wd:Q87001060"], ["wd:Q92837573"], ["wd:Q67651031"], ["wd:Q90383087"], ["wd:Q61824502"], ["wd:Q67469956"], ["wd:Q91198547"], ["wd:Q95972574"], ["wd:Q1599157"], ["wd:Q554631"], ["wd:Q64857762"], ["wd:Q67650882"], ["wd:Q1528248"], ["wd:Q37621058"], ["wd:Q67651054"], ["wd:Q1930694"], ["wd:Q64864821"], ["wd:Q53243879"], ["wd:Q56477097"], ["wd:Q64857171"], ["wd:Q53463335"], ["wd:Q53284219"], ["wd:Q56604530"], ["wd:Q54181519"], ["wd:Q57759396"], ["wd:Q59583624"], ["wd:Q64855493"], ["wd:Q64863353"], ["wd:Q91329958"], ["wd:Q58826319"], ["wd:Q64038636"], ["wd:Q57398476"], ["wd:Q83182853"], ["wd:Q57085461"], ["wd:Q9388349"], ["wd:Q87143740"], ["wd:Q87818814"], ["wd:Q667841"], ["wd:Q57653617"], ["wd:Q64855387"], ["wd:Q57443875"], ["wd:Q43274823"], ["wd:Q58370788"], ["wd:Q64863662"], ["wd:Q57027847"], ["wd:Q64038658"], ["wd:Q441154"], ["wd:Q201229"], ["wd:Q42321185"], ["wd:Q64857998"], ["wd:Q92425505"], ["wd:Q64866863"], ["wd:Q28924975"], ["wd:Q62560080"], ["wd:Q64551828"], ["wd:Q91623676"], ["wd:Q92746982"], ["wd:Q91262932"], ["wd:Q94688057"], ["wd:Q54034353"], ["wd:Q57172851"], ["wd:Q57702311"], ["wd:Q62036470"], ["wd:Q88470388"], ["wd:Q104779"], ["wd:Q39540544"], ["wd:Q12414237"], ["wd:Q57443843"], ["wd:Q60168771"], ["wd:Q48087360"], ["wd:Q64865239"], ["wd:Q57015437"], ["wd:Q59563943"], ["wd:Q57943258"], ["wd:Q58387457"], ["wd:Q59389575"], ["wd:Q59866189"], ["wd:Q64857705"], ["wd:Q92051139"], ["wd:Q64856080"], ["wd:Q6229977"], ["wd:Q63413725"], ["wd:Q55068098"], ["wd:Q67650895"], ["wd:Q60618443"], ["wd:Q74156078"], ["wd:Q30747376"], ["wd:Q58509703"], ["wd:Q58621368"], ["wd:Q88146179"], ["wd:Q90122676"], ["wd:Q50777114"], ["wd:Q61188284"], ["wd:Q64865760"], ["wd:Q64855364"], ["wd:Q92363525"], ["wd:Q57080080"], ["wd:Q49262497"], ["wd:Q58904374"], ["wd:Q56425461"], ["wd:Q64861768"], ["wd:Q58385153"], ["wd:Q58887518"], ["wd:Q2283225"], ["wd:Q54198032"], ["wd:Q67651018"], ["wd:Q59752940"], ["wd:Q55063742"], ["wd:Q57055627"], ["wd:Q58888414"], ["wd:Q57176629"], ["wd:Q67650777"], ["wd:Q54946530"], ["wd:Q90232720"], ["wd:Q66439767"], ["wd:Q1515185"], ["wd:Q1322326"], ["wd:Q15080603"], ["wd:Q57065692"], ["wd:Q64858123"], ["wd:Q57127963"], ["wd:Q57422469"], ["wd:Q2824517"], ["wd:Q28064398"], ["wd:Q57697837"], ["wd:Q64861601"], ["wd:Q67378160"], ["wd:Q2732347"], ["wd:Q57410899"], ["wd:Q64857652"], ["wd:Q60664579"], ["wd:Q1793575"], ["wd:Q67220173"], ["wd:Q15834172"], ["wd:Q58881183"], ["wd:Q67470512"], ["wd:Q64861616"], ["wd:Q64857763"], ["wd:Q67468632"], ["wd:Q57315444"], ["wd:Q59485603"], ["wd:Q63184442"], ["wd:Q103614"], ["wd:Q57613434"], ["wd:Q87822100"], ["wd:Q37647544"], ["wd:Q67220367"], ["wd:Q87747398"], ["wd:Q60667945"], ["wd:Q64551830"], ["wd:Q43089436"], ["wd:Q89026185"], ["wd:Q79379511"], ["wd:Q57163055"], ["wd:Q64857779"], ["wd:Q83397052"], ["wd:Q29419104"], ["wd:Q54040758"], ["wd:Q60041300"], ["wd:Q56604512"], ["wd:Q56640593"], ["wd:Q1737883"], ["wd:Q64764249"], ["wd:Q57076520"], ["wd:Q55007036"], ["wd:Q58649977"], ["wd:Q56944250"], ["wd:Q59485591"], ["wd:Q67482185"], ["wd:Q83011278"], ["wd:Q88721955"], ["wd:Q67410308"], ["wd:Q66605756"], ["wd:Q5444891"], ["wd:Q64867010"], ["wd:Q59651028"], ["wd:Q153178"], ["wd:Q15965153"], ["wd:Q54953361"], ["wd:Q62058459"], ["wd:Q64012279"], ["wd:Q81416271"], ["wd:Q57421299"], ["wd:Q60866595"], ["wd:Q95464375"], ["wd:Q91151113"], ["wd:Q58492424"], ["wd:Q64863681"], ["wd:Q64038641"], ["wd:Q67650845"], ["wd:Q59142278"], ["wd:Q57305840"], ["wd:Q92741952"], ["wd:Q57048707"], ["wd:Q26213570"], ["wd:Q61711495"], ["wd:Q1229020"], ["wd:Q113992698"], ["wd:Q92397857"], ["wd:Q64552155"], ["wd:Q55018050"], ["wd:Q64866782"], ["wd:Q12714078"], ["wd:Q83883708"], ["wd:Q64858302"], ["wd:Q96094264"], ["wd:Q55092063"], ["wd:Q59492209"], ["wd:Q441993"], ["wd:Q90232724"], ["wd:Q76511585"], ["wd:Q64857674"], ["wd:Q81197414"], ["wd:Q23042989"], ["wd:Q89571672"], ["wd:Q87453082"], ["wd:Q89752333"], ["wd:Q58236754"], ["wd:Q57172806"], ["wd:Q64855436"], ["wd:Q57690541"], ["wd:Q64858046"], ["wd:Q1526786"], ["wd:Q53283777"], ["wd:Q58376350"], ["wd:Q50923771"], ["wd:Q61088475"], ["wd:Q91636"], ["wd:Q119499"], ["wd:Q42321190"], ["wd:Q64857773"], ["wd:Q57391796"], ["wd:Q95974968"], ["wd:Q59392538"], ["wd:Q87294899"], ["wd:Q67220024"], ["wd:Q87362064"], ["wd:Q53461530"], ["wd:Q64857931"], ["wd:Q59516927"], ["wd:Q59590497"], ["wd:Q64858029"], ["wd:Q67468068"], ["wd:Q364608"], ["wd:Q23840678"], ["wd:Q67470529"], ["wd:Q64855363"], ["wd:Q60319282"], ["wd:Q58878911"], ["wd:Q57909573"], ["wd:Q67650694"], ["wd:Q2850406"], ["wd:Q81382111"], ["wd:Q1679950"], ["wd:Q38230505"], ["wd:Q19904538"], ["wd:Q79724728"], ["wd:Q55067844"], ["wd:Q87804760"], ["wd:Q67650720"], ["wd:Q53284366"], ["wd:Q30090470"], ["wd:Q64856020"], ["wd:Q53593307"], ["wd:Q87602864"], ["wd:Q93146580"], ["wd:Q55086992"], ["wd:Q709562"], ["wd:Q442643"], ["wd:Q1424955"], ["wd:Q59650995"], ["wd:Q67482745"], ["wd:Q86450146"], ["wd:Q91345431"], ["wd:Q60762353"], ["wd:Q7351896"], ["wd:Q57909590"], ["wd:Q91825931"], ["wd:Q96203652"], ["wd:Q64858251"], ["wd:Q59384804"], ["wd:Q87895244"], ["wd:Q88390208"], ["wd:Q17521164"], ["wd:Q53443173"], ["wd:Q82194333"], ["wd:Q56480603"], ["wd:Q153210"], ["wd:Q53467240"], ["wd:Q15173099"], ["wd:Q50992398"], ["wd:Q59389194"], ["wd:Q56481184"], ["wd:Q67220133"], ["wd:Q54946754"], ["wd:Q57412212"], ["wd:Q59472188"], ["wd:Q53283502"], ["wd:Q67469826"], ["wd:Q29253985"], ["wd:Q56090111"], ["wd:Q59422352"], ["wd:Q59292154"], ["wd:Q64857936"], ["wd:Q58317806"], ["wd:Q70610043"], ["wd:Q88065562"], ["wd:Q83130154"], ["wd:Q17496912"], ["wd:Q90525501"], ["wd:Q30745608"], ["wd:Q67470479"], ["wd:Q91001127"], ["wd:Q67468529"], ["wd:Q55091786"], ["wd:Q57420201"], ["wd:Q61716729"], ["wd:Q64855318"], ["wd:Q64855894"], ["wd:Q64854243"], ["wd:Q64865380"], ["wd:Q20472489"], ["wd:Q55086323"], ["wd:Q56854980"], ["wd:Q88090015"], ["wd:Q64857861"], ["wd:Q95933899"], ["wd:Q64692510"], ["wd:Q67483035"], ["wd:Q64857503"], ["wd:Q55086913"], ["wd:Q67483450"], ["wd:Q59489300"], ["wd:Q91965414"], ["wd:Q1719021"], ["wd:Q64866055"], ["wd:Q92126941"], ["wd:Q67483188"], ["wd:Q57391748"], ["wd:Q57547212"], ["wd:Q64856387"], ["wd:Q57686589"], ["wd:Q39389421"], ["wd:Q87662462"], ["wd:Q55007253"], ["wd:Q60545322"], ["wd:Q64856586"], ["wd:Q86358169"], ["wd:Q59403765"], ["wd:Q74546481"], ["wd:Q90895869"], ["wd:Q63466835"], ["wd:Q39993588"], ["wd:Q49828374"], ["wd:Q57329051"], ["wd:Q63408297"], ["wd:Q61650334"], ["wd:Q57438881"], ["wd:Q1906263"], ["wd:Q53524957"], ["wd:Q57403143"], ["wd:Q67220432"], ["wd:Q59522400"], ["wd:Q67469966"], ["wd:Q87753271"], ["wd:Q87910875"], ["wd:Q81374393"], ["wd:Q67220546"], ["wd:Q63952714"], ["wd:Q24054872"], ["wd:Q64858312"], ["wd:Q64863103"], ["wd:Q87772863"], ["wd:Q95956960"], ["wd:Q67220452"], ["wd:Q56992557"], ["wd:Q56997166"], ["wd:Q46826387"], ["wd:Q59200022"], ["wd:Q64862687"], ["wd:Q64866885"], ["wd:Q64866910"], ["wd:Q1967632"], ["wd:Q56654535"], ["wd:Q57739877"], ["wd:Q90870038"], ["wd:Q16299885"], ["wd:Q59491498"], ["wd:Q79368409"], ["wd:Q91056898"], ["wd:Q67469610"], ["wd:Q42111543"], ["wd:Q64864875"], ["wd:Q364713"], ["wd:Q55060487"], ["wd:Q56501531"], ["wd:Q53283196"], ["wd:Q57420782"], ["wd:Q58667602"], ["wd:Q64053084"], ["wd:Q57749869"], ["wd:Q90108596"], ["wd:Q53282717"], ["wd:Q64857659"], ["wd:Q59857600"], ["wd:Q67220446"], ["wd:Q57445071"], ["wd:Q67466090"], ["wd:Q82194285"], ["wd:Q71587422"], ["wd:Q88580303"], ["wd:Q96100546"], ["wd:Q64096106"], ["wd:Q24251208"], ["wd:Q57305554"], ["wd:Q64865358"], ["wd:Q5616905"], ["wd:Q56479669"], ["wd:Q55004500"], ["wd:Q88896463"], ["wd:Q655289"], ["wd:Q64857827"], ["wd:Q67470192"], ["wd:Q64857713"], ["wd:Q67651104"], ["wd:Q79944943"], ["wd:Q58224861"], ["wd:Q350305"], ["wd:Q55061294"], ["wd:Q57473981"], ["wd:Q58370781"], ["wd:Q56461535"], ["wd:Q67483158"], ["wd:Q67260409"], ["wd:Q95326196"], ["wd:Q57789116"], ["wd:Q57044444"], ["wd:Q85857136"], ["wd:Q57260628"], ["wd:Q64503641"], ["wd:Q73660651"], ["wd:Q59284152"], ["wd:Q90288968"], ["wd:Q82560390"], ["wd:Q54255802"], ["wd:Q15263795"], ["wd:Q88649737"], ["wd:Q64859977"], ["wd:Q43093387"], ["wd:Q67468666"], ["wd:Q53467544"], ["wd:Q67482083"], ["wd:Q38915551"], ["wd:Q5638313"], ["wd:Q53283330"], ["wd:Q57691318"], ["wd:Q58330090"], ["wd:Q64855767"], ["wd:Q86962508"], ["wd:Q56885185"], ["wd:Q15881934"], ["wd:Q54239483"], ["wd:Q65557416"], ["wd:Q87602297"], ["wd:Q67220275"], ["wd:Q56458784"], ["wd:Q5992052"], ["wd:Q59818371"], ["wd:Q64858105"], ["wd:Q31199793"], ["wd:Q64589685"], ["wd:Q64857725"], ["wd:Q59674761"], ["wd:Q64857620"], ["wd:Q54957500"], ["wd:Q67650909"], ["wd:Q96029854"], ["wd:Q57444403"], ["wd:Q92643542"], ["wd:Q63791735"], ["wd:Q64857971"], ["wd:Q1770174"], ["wd:Q76176687"], ["wd:Q59394162"], ["wd:Q60220968"], ["wd:Q55017132"], ["wd:Q59696762"], ["wd:Q52984365"], ["wd:Q56570593"], ["wd:Q62995650"], ["wd:Q64857682"], ["wd:Q76521682"], ["wd:Q51725303"], ["wd:Q56595814"], ["wd:Q58888404"], ["wd:Q60040999"], ["wd:Q55092020"], ["wd:Q20983586"], ["wd:Q60573390"], ["wd:Q55004446"], ["wd:Q58811064"], ["wd:Q79572697"], ["wd:Q55006953"], ["wd:Q64855380"], ["wd:Q56993091"], ["wd:Q96084840"], ["wd:Q54957560"], ["wd:Q69465157"], ["wd:Q54208426"], ["wd:Q57447877"], ["wd:Q59510438"], ["wd:Q54255770"], ["wd:Q67466565"], ["wd:Q30123583"], ["wd:Q57690165"], ["wd:Q86652650"], ["wd:Q5134690"], ["wd:Q57412468"], ["wd:Q59483358"], ["wd:Q55005062"], ["wd:Q85108322"], ["wd:Q56285695"], ["wd:Q15020902"], ["wd:Q67378934"], ["wd:Q64781584"], ["wd:Q64858039"], ["wd:Q63974986"], ["wd:Q67220522"], ["wd:Q64858103"], ["wd:Q56482356"], ["wd:Q57411488"], ["wd:Q57306545"], ["wd:Q57429263"], ["wd:Q58354405"], ["wd:Q59752622"], ["wd:Q203461"], ["wd:Q92749"], ["wd:Q64858144"], ["wd:Q64857614"], ["wd:Q125474422"], ["wd:Q53460786"], ["wd:Q66771471"], ["wd:Q2086091"], ["wd:Q57196929"], ["wd:Q58818081"], ["wd:Q63980392"], ["wd:Q56595883"], ["wd:Q64856100"], ["wd:Q64857684"], ["wd:Q30106737"], ["wd:Q57014839"], ["wd:Q58331017"], ["wd:Q67220316"], ["wd:Q22668109"], ["wd:Q88893357"], ["wd:Q18629209"], ["wd:Q54255889"], ["wd:Q18132175"], ["wd:Q91645698"], ["wd:Q12060704"], ["wd:Q57162999"], ["wd:Q57385909"], ["wd:Q63488649"], ["wd:Q57934082"], ["wd:Q86409269"], ["wd:Q60864555"], ["wd:Q50760654"], ["wd:Q58329320"], ["wd:Q87411580"], ["wd:Q64589677"], ["wd:Q55076994"], ["wd:Q59491503"], ["wd:Q58485650"], ["wd:Q26936556"], ["wd:Q53524812"], ["wd:Q93489294"], ["wd:Q58782251"], ["wd:Q16193595"], ["wd:Q55087001"], ["wd:Q56597229"], ["wd:Q89443356"], ["wd:Q87325808"], ["wd:Q61697477"], ["wd:Q370077"], ["wd:Q64858238"], ["wd:Q87364248"], ["wd:Q55059385"], ["wd:Q67500159"], ["wd:Q59208337"], ["wd:Q54182336"], ["wd:Q64857558"], ["wd:Q4890009"], ["wd:Q56451979"], ["wd:Q55004935"], ["wd:Q57215151"], ["wd:Q67377774"], ["wd:Q88889833"], ["wd:Q92913603"], ["wd:Q56867369"], ["wd:Q58402920"], ["wd:Q64855562"], ["wd:Q64857864"], ["wd:Q64864299"], ["wd:Q65953485"], ["wd:Q6761598"], ["wd:Q91454"], ["wd:Q59573991"], ["wd:Q63357340"], ["wd:Q57422015"], ["wd:Q63976550"], ["wd:Q67483007"], ["wd:Q56604711"], ["wd:Q67467226"], ["wd:Q53538668"], ["wd:Q88301243"], ["wd:Q21708036"], ["wd:Q50326999"], ["wd:Q28726950"], ["wd:Q91726665"], ["wd:Q64551839"], ["wd:Q64862869"], ["wd:Q64862668"], ["wd:Q67483505"], ["wd:Q49828211"], ["wd:Q64857482"], ["wd:Q73200565"], ["wd:Q64859937"], ["wd:Q57494061"], ["wd:Q89114528"], ["wd:Q56482174"], ["wd:Q67468939"], ["wd:Q40140799"], ["wd:Q53283627"], ["wd:Q24942946"], ["wd:Q57317057"], ["wd:Q91985871"], ["wd:Q56604091"], ["wd:Q67651094"], ["wd:Q53283703"], ["wd:Q64857426"], ["wd:Q60492025"], ["wd:Q58235154"], ["wd:Q569705"], ["wd:Q30509082"], ["wd:Q983183"], ["wd:Q57060129"], ["wd:Q64858322"], ["wd:Q88208651"], ["wd:Q64764248"], ["wd:Q52685250"], ["wd:Q57170858"], ["wd:Q57612653"], ["wd:Q60737538"], ["wd:Q94747714"], ["wd:Q5396133"], ["wd:Q59153418"], ["wd:Q64551814"], ["wd:Q82310846"], ["wd:Q24256667"], ["wd:Q116386"], ["wd:Q54959461"], ["wd:Q57164443"], ["wd:Q61088497"], ["wd:Q64864429"], ["wd:Q59857773"], ["wd:Q53284530"], ["wd:Q89291268"], ["wd:Q55865195"], ["wd:Q64857989"], ["wd:Q60618458"], ["wd:Q47487723"], ["wd:Q60438723"], ["wd:Q64863715"], ["wd:Q64864335"], ["wd:Q55004463"], ["wd:Q64855811"], ["wd:Q86596810"], ["wd:Q56441775"], ["wd:Q53286183"], ["wd:Q192715"], ["wd:Q53953420"], ["wd:Q64857618"], ["wd:Q64857961"], ["wd:Q92215044"], ["wd:Q87822975"], ["wd:Q91586893"], ["wd:Q59699369"], ["wd:Q59347469"], ["wd:Q64857838"], ["wd:Q64855335"], ["wd:Q15854669"], ["wd:Q96226929"], ["wd:Q53953422"], ["wd:Q56604540"], ["wd:Q58327552"], ["wd:Q59492194"], ["wd:Q64857587"], ["wd:Q54957887"], ["wd:Q83132346"], ["wd:Q85906868"], ["wd:Q86878335"], ["wd:Q87584966"], ["wd:Q57479164"], ["wd:Q67466403"], ["wd:Q40289624"], ["wd:Q54957805"], ["wd:Q50225709"], ["wd:Q18685104"], ["wd:Q54182188"], ["wd:Q64858119"], ["wd:Q2473997"], ["wd:Q54946878"], ["wd:Q53285185"], ["wd:Q60914460"], ["wd:Q53283922"], ["wd:Q92911649"], ["wd:Q87189239"], ["wd:Q21166181"], ["wd:Q54957919"], ["wd:Q57737841"], ["wd:Q58319243"], ["wd:Q88093882"], ["wd:Q1782155"], ["wd:Q59205135"], ["wd:Q60667451"], ["wd:Q56884292"], ["wd:Q74469900"], ["wd:Q55008870"], ["wd:Q64052139"], ["wd:Q56991181"], ["wd:Q64781569"], ["wd:Q53443892"], ["wd:Q56461546"], ["wd:Q53816700"], ["wd:Q11936764"], ["wd:Q55004374"], ["wd:Q67220048"], ["wd:Q53282882"], ["wd:Q1687583"], ["wd:Q59259777"], ["wd:Q60018436"], ["wd:Q54958023"], ["wd:Q90470893"], ["wd:Q67470696"], ["wd:Q56492872"], ["wd:Q84883106"], ["wd:Q67220028"], ["wd:Q67470073"], ["wd:Q54198350"], ["wd:Q67466905"], ["wd:Q67468440"], ["wd:Q53460937"], ["wd:Q64857590"], ["wd:Q87797905"], ["wd:Q58379815"], ["wd:Q43370965"], ["wd:Q54957847"], ["wd:Q64861079"], ["wd:Q63342052"], ["wd:Q96225539"], ["wd:Q86380475"], ["wd:Q64855403"], ["wd:Q64857432"], ["wd:Q91438648"], ["wd:Q64341938"], ["wd:Q64864295"], ["wd:Q89865933"], ["wd:Q2149938"], ["wd:Q56551114"], ["wd:Q64858304"], ["wd:Q53476390"], ["wd:Q67500552"], ["wd:Q15450063"], ["wd:Q57746308"], ["wd:Q58397612"], ["wd:Q86578782"], ["wd:Q42321192"], ["wd:Q53284673"], ["wd:Q56749886"], ["wd:Q54957816"], ["wd:Q86702057"], ["wd:Q64862792"], ["wd:Q57067846"], ["wd:Q64858196"], ["wd:Q66724745"], ["wd:Q83034619"], ["wd:Q61829298"], ["wd:Q58352797"], ["wd:Q94481342"], ["wd:Q64856313"], ["wd:Q59572138"], ["wd:Q94447592"], ["wd:Q67378120"], ["wd:Q57419326"], ["wd:Q75561892"], ["wd:Q57077365"], ["wd:Q56605891"], ["wd:Q62102318"], ["wd:Q61808611"], ["wd:Q55086923"], ["wd:Q56648183"], ["wd:Q3355912"], ["wd:Q57198587"], ["wd:Q58827832"], ["wd:Q89507962"], ["wd:Q56640584"], ["wd:Q56509038"], ["wd:Q90606417"], ["wd:Q57736204"], ["wd:Q12269533"], ["wd:Q55068519"], ["wd:Q92002098"], ["wd:Q672378"], ["wd:Q64589679"], ["wd:Q84910217"], ["wd:Q85352623"], ["wd:Q57327044"], ["wd:Q64864469"], ["wd:Q57002417"], ["wd:Q59749863"], ["wd:Q64863762"], ["wd:Q27516058"], ["wd:Q53458510"], ["wd:Q54182281"], ["wd:Q64857701"], ["wd:Q58681049"], ["wd:Q58377212"], ["wd:Q59759347"], ["wd:Q3435171"], ["wd:Q64857940"], ["wd:Q88978317"], ["wd:Q58371696"], ["wd:Q58335887"], ["wd:Q2076024"], ["wd:Q55028816"], ["wd:Q19956414"], ["wd:Q90473486"], ["wd:Q21820002"], ["wd:Q54957866"], ["wd:Q57171665"], ["wd:Q57429712"], ["wd:Q59439470"], ["wd:Q37382568"], ["wd:Q1744047"], ["wd:Q60658481"], ["wd:Q59269447"], ["wd:Q79823836"], ["wd:Q53465679"], ["wd:Q91115835"], ["wd:Q96106115"], ["wd:Q64551811"], ["wd:Q59938255"], ["wd:Q86391885"], ["wd:Q578084"], ["wd:Q53475843"], ["wd:Q62055788"], ["wd:Q1553486"], ["wd:Q1033005"], ["wd:Q85237120"], ["wd:Q23759707"], ["wd:Q55098019"], ["wd:Q67482789"], ["wd:Q7688074"], ["wd:Q53285103"], ["wd:Q55008108"], ["wd:Q21542865"], ["wd:Q59832046"], ["wd:Q88977939"], ["wd:Q64856772"], ["wd:Q58611740"], ["wd:Q67220299"], ["wd:Q3435587"], ["wd:Q58623467"], ["wd:Q57909605"], ["wd:Q18280732"], ["wd:Q54040943"], ["wd:Q42803084"], ["wd:Q75604284"], ["wd:Q64857680"], ["wd:Q85107808"], ["wd:Q57066018"], ["wd:Q85687381"], ["wd:Q84571676"], ["wd:Q59387752"]], "gold": [["wd:Q80"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:8444 kg:2585.} UNION \",\n        \"{?resource kg:8444 kg:9985.} UNION \",\n        \"{?resource kg:0878 kg:9985.} UNION \",\n        \"{?resource kg:0878 kg:2585.} UNION \",\n        \"{?resource kg:8444 kg:8837.} UNION \",\n        \"{?resource kg:8444 kg:7604.} UNION \",\n        \"{?resource kg:8444 kg:5786.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:8444 kg:2585.} UNION {?resource kg:8444 kg:9985.} UNION {?resource kg:0878 kg:9985.} UNION {?resource kg:0878 kg:2585.} UNION {?resource kg:8444 kg:8837.} UNION {?resource kg:8444 kg:7604.} UNION {?resource kg:8444 kg:5786.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2866 wd:Q47099 .\",\n      \"?resource wdt:P58 wd:Q188442 .\",\n      \"?resource wdt:P344 wd:Q188442 .\",\n      \"?resource wdt:P673 wd:Q188442 .\",\n      \"?resource wdt:P50 wd:Q188442 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P673 wd:Q962521 .\",\n      \"?resource wdt:P58 wd:Q962521 .\",\n    \"} UNION {\",\n      \"?resource wdt:P409 wd:Q1190783 .\",\n      \"?resource wdt:P58 wd:Q1190783 .\",\n    \"} UNION {\",\n      \"?resource wdt:P673 wd:Q240167 .\",\n      \"?resource wdt:P58 wd:Q240167 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2866 wd:Q47099 . ?resource wdt:P58 wd:Q188442 . ?resource wdt:P344 wd:Q188442 . ?resource wdt:P673 wd:Q188442 . ?resource wdt:P50 wd:Q188442 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P673 wd:Q962521 . ?resource wdt:P58 wd:Q962521 . } UNION { ?resource wdt:P409 wd:Q1190783 . ?resource wdt:P58 wd:Q1190783 . } UNION { ?resource wdt:P673 wd:Q240167 . ?resource wdt:P58 wd:Q240167 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q15072368 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q192115 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1653396 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q128493 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q192115 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q138788 wdt:P86 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q15072368 wdt:P57 ?resource. } UNION { wd:Q192115 wdt:P57 ?resource. } UNION { wd:Q1653396 wdt:P57 ?resource. } UNION { wd:Q128493 wdt:P57 ?resource. } UNION { wd:Q1165050 wdt:P58 ?resource. } UNION { wd:Q1165050 wdt:P344 ?resource. } UNION { wd:Q1165050 wdt:P161 ?resource. } UNION { wd:Q192115 wdt:P1040 ?resource. } UNION { wd:Q138788 wdt:P86 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q525318"], ["wd:Q152309"], ["wd:Q211040"], ["wd:Q729618"], ["wd:Q15831428"], ["wd:Q227123"], ["wd:Q15831429"], ["wd:Q1712385"], ["wd:Q3059246"], ["wd:Q47284"], ["wd:Q207676"], ["wd:Q241510"], ["wd:Q3772"], ["wd:Q362697"], ["wd:Q41396"], ["wd:Q1042923"], ["wd:Q180004"], ["wd:Q314606"], ["wd:Q208374"], ["wd:Q2680"], ["wd:Q235072"]], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1457 kg:6683 ?resource . } UNION \",\n        \"{ kg:1457 kg:9880 ?resource . } UNION \",\n        \"{ kg:1457 kg:6750 ?resource . } UNION \",\n        \"{ kg:1457 kg:1594 ?resource . }\",\n      \"}\",\n      \"{ kg:8257 kg:7326 ?resource . } UNION \",\n      \"{ kg:8257 kg:5977 ?resource . }\",\n      \"{ kg:9537 kg:7326 ?resource . } UNION \",\n      \"{ kg:1457 kg:5977 ?resource . }\",\n      \"{ kg:3207 kg:7326 ?resource . } UNION \",\n      \"{ kg:3207 kg:5977 ?resource . }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1457 kg:6683 ?resource . } UNION { kg:1457 kg:9880 ?resource . } UNION { kg:1457 kg:6750 ?resource . } UNION { kg:1457 kg:1594 ?resource . } } { kg:8257 kg:7326 ?resource . } UNION { kg:8257 kg:5977 ?resource . } { kg:9537 kg:7326 ?resource . } UNION { kg:1457 kg:5977 ?resource . } { kg:3207 kg:7326 ?resource . } UNION { kg:3207 kg:5977 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director ?executiveProducer ?editor WHERE {\",\n      \"{\",\n        \"?pieta wdt:P31 wd:Q2085374; # Pietà is a film\",\n          \"wdt:P57 ?director; # director of Pietà\",\n          \"wdt:P6927 ?executiveProducer; # executive producer of Pietà\",\n          \"wdt:P1040 ?editor. # editor of Pietà\",\n      \"}\",\n      \"{\",\n        \"?dream wdt:P31 wd:Q2085374; # Dream is a film\",\n          \"wdt:P57 ?director; # director of Dream\",\n          \"wdt:P6927 ?executiveProducer; # executive producer of Dream\",\n          \"wdt:P1040 ?editor; # editor of Dream\",\n          \"wdt:P58 ?writer. # writer of Dream\",\n      \"}\",\n      \"{\",\n        \"?moebius wdt:P31 wd:Q2085374; # Moebius is a film\",\n          \"wdt:P57 ?director; # director of Moebius\",\n          \"wdt:P6927 ?executiveProducer; # executive producer of Moebius\",\n          \"wdt:P1040 ?editor; # editor of Moebius\",\n          \"wdt:P58 ?writer. # writer of Moebius\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?director ?executiveProducer ?editor WHERE { { ?pieta wdt:P31 wd:Q2085374; wdt:P57 ?director; wdt:P6927 ?executiveProducer; wdt:P1040 ?editor. } { ?dream wdt:P31 wd:Q2085374; wdt:P57 ?director; wdt:P6927 ?executiveProducer; wdt:P1040 ?editor; wdt:P58 ?writer. } { ?moebius wdt:P31 wd:Q2085374; wdt:P57 ?director; wdt:P6927 ?executiveProducer; wdt:P1040 ?editor; wdt:P58 ?writer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q483197 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q483197 wdt:P1431 ?executiveProducer . } UNION \",\n        \"{ wd:Q483197 wdt:P1040 ?editor . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q483197 wdt:P57 ?director . } UNION { wd:Q483197 wdt:P1431 ?executiveProducer . } UNION { wd:Q483197 wdt:P1040 ?editor . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9521 kg:0874 ?executiveProducerPieta . } UNION { kg:9521 kg:9764 ?screenwriterPieta . } UNION { kg:9521 kg:6091 ?filmEditorPieta . }\",\n        \"{ kg:5465 kg:0874 ?executiveProducerMoebius . } UNION { kg:5465 kg:9764 ?screenwriterMoebius . } UNION { kg:5465 kg:6091 ?filmEditorMoebius . }\",\n        \"{ kg:2746 kg:0874 ?executiveProducerDream . } UNION { kg:2746 kg:9764 ?screenwriterDream . } UNION { kg:2746 kg:6091 ?filmEditorDream . }\",\n        \"FILTER (?executiveProducerPieta = ?executiveProducerMoebius && ?executiveProducerPieta = ?executiveProducerDream)\",\n        \"FILTER (?screenwriterPieta = ?screenwriterMoebius && ?screenwriterPieta = ?screenwriterDream)\",\n        \"FILTER (?filmEditorPieta = ?filmEditorMoebius && ?filmEditorPieta = ?filmEditorDream)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9521 kg:0874 ?executiveProducerPieta . } UNION { kg:9521 kg:9764 ?screenwriterPieta . } UNION { kg:9521 kg:6091 ?filmEditorPieta . } { kg:5465 kg:0874 ?executiveProducerMoebius . } UNION { kg:5465 kg:9764 ?screenwriterMoebius . } UNION { kg:5465 kg:6091 ?filmEditorMoebius . } { kg:2746 kg:0874 ?executiveProducerDream . } UNION { kg:2746 kg:9764 ?screenwriterDream . } UNION { kg:2746 kg:6091 ?filmEditorDream . } FILTER (?executiveProducerPieta = ?executiveProducerMoebius && ?executiveProducerPieta = ?executiveProducerDream) FILTER (?screenwriterPieta = ?screenwriterMoebius && ?screenwriterPieta = ?screenwriterDream) FILTER (?filmEditorPieta = ?filmEditorMoebius && ?filmEditorPieta = ?filmEditorDream) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q2498761 .\",\n      \"?resource wdt:P57 wd:Q106123 ;\",\n                \"wdt:P50 wd:Q106123 ;\",\n                \"wdt:P58 wd:Q106123 .\",\n      \"?resource wdt:P495 wd:Q701763 ;\",\n                \"wdt:P495 wd:Q701764 ;\",\n                \"wdt:P495 wd:Q280099 .\",\n      \"?resource wdt:P57 ?film1 .\",\n      \"?resource wdt:P535 ?film1 .\",\n      \"?resource wdt:P58 ?film1 .\",\n      \"?film1 rdfs:label \\\"The Brahma Diamond\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q2498761 .\",\n      \"?resource wdt:P57 wd:Q106123 ;\",\n                \"wdt:P50 wd:Q106123 ;\",\n                \"wdt:P58 wd:Q106123 .\",\n      \"?resource wdt:P495 wd:Q701763 ;\",\n                \"wdt:P495 wd:Q701764 ;\",\n                \"wdt:P495 wd:Q280099 .\",\n      \"?resource wdt:P57 ?film2 .\",\n      \"?resource wdt:P535 ?film2 .\",\n      \"?resource wdt:P58 ?film2 .\",\n      \"?film2 rdfs:label \\\"His Lost Love\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q2498761 .\",\n      \"?resource wdt:P57 wd:Q106123 ;\",\n                \"wdt:P50 wd:Q106123 ;\",\n                \"wdt:P58 wd:Q106123 .\",\n      \"?resource wdt:P495 wd:Q701763 ;\",\n                \"wdt:P495 wd:Q701764 ;\",\n                \"wdt:P495 wd:Q280099 .\",\n      \"?resource wdt:P57 ?film3 .\",\n      \"?resource wdt:P535 ?film3 .\",\n      \"?resource wdt:P58 ?film3 .\",\n      \"?film3 rdfs:label \\\"The Birth of a Nation\\\"@en .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . ?resource wdt:P57 wd:Q106123 ; wdt:P50 wd:Q106123 ; wdt:P58 wd:Q106123 . ?resource wdt:P495 wd:Q701763 ; wdt:P495 wd:Q701764 ; wdt:P495 wd:Q280099 . ?resource wdt:P57 ?film1 . ?resource wdt:P535 ?film1 . ?resource wdt:P58 ?film1 . ?film1 rdfs:label \"The Brahma Diamond\"@en . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . ?resource wdt:P57 wd:Q106123 ; wdt:P50 wd:Q106123 ; wdt:P58 wd:Q106123 . ?resource wdt:P495 wd:Q701763 ; wdt:P495 wd:Q701764 ; wdt:P495 wd:Q280099 . ?resource wdt:P57 ?film2 . ?resource wdt:P535 ?film2 . ?resource wdt:P58 ?film2 . ?film2 rdfs:label \"His Lost Love\"@en . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . ?resource wdt:P57 wd:Q106123 ; wdt:P50 wd:Q106123 ; wdt:P58 wd:Q106123 . ?resource wdt:P495 wd:Q701763 ; wdt:P495 wd:Q701764 ; wdt:P495 wd:Q280099 . ?resource wdt:P57 ?film3 . ?resource wdt:P535 ?film3 . ?resource wdt:P58 ?film3 . ?film3 rdfs:label \"The Birth of a Nation\"@en . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q220394 .\",\n          \"?resource wdt:P58 wd:Q220394 .\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q1857205 .\",\n          \"?resource wdt:P58 wd:Q1857205 .\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q542216 .\",\n          \"?resource wdt:P58 wd:Q542216 .\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q220394 . ?resource wdt:P58 wd:Q220394 . ?resource wdt:P106 wd:Q3282637 . } { ?resource wdt:P57 wd:Q1857205 . ?resource wdt:P58 wd:Q1857205 . ?resource wdt:P106 wd:Q3282637 . } { ?resource wdt:P57 wd:Q542216 . ?resource wdt:P58 wd:Q542216 . ?resource wdt:P106 wd:Q3282637 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:8812 kg:2810 . } UNION \",\n        \"{ ?resource kg:7158 kg:3018 . } UNION \",\n        \"{ ?resource kg:9383 kg:4739 . } UNION \",\n        \"{ ?resource kg:9383 kg:2555 . } UNION \",\n        \"{ ?resource kg:9383 kg:9546 . } UNION \",\n        \"{ ?resource kg:7158 kg:0465 . } UNION \",\n        \"{ ?resource kg:7158 kg:5981 . } UNION \",\n        \"{ ?resource kg:7158 kg:5308 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8812 kg:2810 . } UNION { ?resource kg:7158 kg:3018 . } UNION { ?resource kg:9383 kg:4739 . } UNION { ?resource kg:9383 kg:2555 . } UNION { ?resource kg:9383 kg:9546 . } UNION { ?resource kg:7158 kg:0465 . } UNION { ?resource kg:7158 kg:5981 . } UNION { ?resource kg:7158 kg:5308 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?person WHERE {\",\n      \"{\",\n        \"?person wdt:P31 wd:Q5 .\",\n        \"?person wdt:P496 wd:Q108702693 .\",\n        \"?person wdt:P161 ?work1 .\",\n        \"?work1 wdt:P31 wd:Q11424 .\",\n        \"?work1 rdfs:label 'Brecha'@en .\",\n      \"}\",\n      \"{\",\n        \"?person wdt:P650 ?work2 .\",\n        \"?work2 rdfs:label 'Primary!'@en .\",\n      \"}\",\n      \"{\",\n        \"?person wdt:P650 ?work3 .\",\n        \"?work3 rdfs:label 'In Your Absence'@en .\",\n      \"}\"\n    ]\n  }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { { ?person wdt:P31 wd:Q5 . ?person wdt:P496 wd:Q108702693 . ?person wdt:P161 ?work1 . ?work1 wdt:P31 wd:Q11424 . ?work1 rdfs:label 'Brecha'@en . } { ?person wdt:P650 ?work2 . ?work2 rdfs:label 'Primary!'@en . } { ?person wdt:P650 ?work3 . ?work3 rdfs:label 'In Your Absence'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q4959991 .\",\n          \"?resource wdt:P86 wd:Q4959991 .\",\n          \"?resource wdt:P1040 wd:Q4959991 .\",\n          \"?resource wdt:P344 wd:Q4959991 .\",\n          \"?resource wdt:P1431 wd:Q4959991 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q7243050 .\",\n          \"?resource wdt:P1040 wd:Q7243050 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q5375110 .\",\n          \"?resource wdt:P1040 wd:Q5375110 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q4959991 . ?resource wdt:P86 wd:Q4959991 . ?resource wdt:P1040 wd:Q4959991 . ?resource wdt:P344 wd:Q4959991 . ?resource wdt:P1431 wd:Q4959991 . } { ?resource wdt:P58 wd:Q7243050 . ?resource wdt:P1040 wd:Q7243050 . } { ?resource wdt:P58 wd:Q5375110 . ?resource wdt:P1040 wd:Q5375110 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1879 kg:1638 . } UNION \",\n        \"{ ?resource kg:0923 kg:1638 . } UNION \",\n        \"{ ?resource kg:1984 kg:1638 . } UNION \",\n        \"{ ?resource kg:6733 kg:1638 . } UNION \",\n        \"{ ?resource kg:1298 kg:1638 . } UNION \",\n        \"{ ?resource kg:0770 kg:0804 . } UNION \",\n        \"{ ?resource kg:6733 kg:0804 . } UNION \",\n        \"{ ?resource kg:0770 kg:2931 . } UNION \",\n        \"{ ?resource kg:6733 kg:2931 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1879 kg:1638 . } UNION { ?resource kg:0923 kg:1638 . } UNION { ?resource kg:1984 kg:1638 . } UNION { ?resource kg:6733 kg:1638 . } UNION { ?resource kg:1298 kg:1638 . } UNION { ?resource kg:0770 kg:0804 . } UNION { ?resource kg:6733 kg:0804 . } UNION { ?resource kg:0770 kg:2931 . } UNION { ?resource kg:6733 kg:2931 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P27 wd:Q30 .\",\n    \"?resource wdt:P1416 wd:Q898081 .\",\n    \"?resource wdt:P108 wd:Q185486 .\",\n    \"?resource wdt:P108 wd:Q273864 .\",\n    \"?resource wdt:P108 wd:Q927387 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q30 . ?resource wdt:P1416 wd:Q898081 . ?resource wdt:P108 wd:Q185486 . ?resource wdt:P108 wd:Q273864 . ?resource wdt:P108 wd:Q927387 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q49285"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P108 wd:Q55206 .\",\n      \"?resource wdt:P108 wd:Q41506 .\",\n      \"?resource wdt:P108 wd:Q5059715 .\",\n      \"?resource wdt:P108 wd:Q23548 .\",\n      \"?resource wdt:P108 wd:Q622664 .\",\n      \"?resource wdt:P27 wd:Q30 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q55206 . ?resource wdt:P108 wd:Q41506 . ?resource wdt:P108 wd:Q5059715 . ?resource wdt:P108 wd:Q23548 . ?resource wdt:P108 wd:Q622664 . ?resource wdt:P27 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q49285"]], "gold": [["wd:Q49285"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:0862 kg:5939.} UNION \",\n        \"{?resource kg:2472 kg:6725.} UNION \",\n        \"{?resource kg:2472 kg:0485.} UNION \",\n        \"{?resource kg:2472 kg:8517.} UNION \",\n        \"{?resource kg:2472 kg:9362.} UNION \",\n        \"{?resource kg:2472 kg:9594.}\"\n      ]\n    }", "normal_query": "SELECT ?resource WHERE { {?resource kg:0862 kg:5939.} UNION {?resource kg:2472 kg:6725.} UNION {?resource kg:2472 kg:0485.} UNION {?resource kg:2472 kg:8517.} UNION {?resource kg:2472 kg:9362.} UNION {?resource kg:2472 kg:9594.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P25 wd:Q489670 ;\",\n        \"wdt:P50 wd:Q489670 ;\",\n        \"wdt:P86 wd:Q489670 ;\",\n        \"wdt:P345 wd:Q489670 ;\",\n        \"wdt:P162 wd:Q489670 ;\",\n        \"wdt:P800 wd:Q489670 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P25 wd:Q1340065 ;\",\n        \"wdt:P50 wd:Q1340065 ;\",\n        \"wdt:P86 wd:Q1340065 ;\",\n        \"wdt:P345 wd:Q1340065 ;\",\n        \"wdt:P162 wd:Q1340065 ;\",\n        \"wdt:P800 wd:Q1340065 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P25 wd:Q79674 ;\",\n        \"wdt:P50 wd:Q79674 ;\",\n        \"wdt:P86 wd:Q79674 ;\",\n        \"wdt:P345 wd:Q79674 ;\",\n        \"wdt:P162 wd:Q79674 ;\",\n        \"wdt:P800 wd:Q79674 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P25 wd:Q134157 ;\",\n        \"wdt:P50 wd:Q134157 ;\",\n        \"wdt:P86 wd:Q134157 ;\",\n        \"wdt:P345 wd:Q134157 ;\",\n        \"wdt:P162 wd:Q134157 ;\",\n        \"wdt:P800 wd:Q134157 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P25 wd:Q489670 ; wdt:P50 wd:Q489670 ; wdt:P86 wd:Q489670 ; wdt:P345 wd:Q489670 ; wdt:P162 wd:Q489670 ; wdt:P800 wd:Q489670 . } { ?resource wdt:P31 wd:Q5 . ?resource wdt:P25 wd:Q1340065 ; wdt:P50 wd:Q1340065 ; wdt:P86 wd:Q1340065 ; wdt:P345 wd:Q1340065 ; wdt:P162 wd:Q1340065 ; wdt:P800 wd:Q1340065 . } { ?resource wdt:P31 wd:Q5 . ?resource wdt:P25 wd:Q79674 ; wdt:P50 wd:Q79674 ; wdt:P86 wd:Q79674 ; wdt:P345 wd:Q79674 ; wdt:P162 wd:Q79674 ; wdt:P800 wd:Q79674 . } { ?resource wdt:P31 wd:Q5 . ?resource wdt:P25 wd:Q134157 ; wdt:P50 wd:Q134157 ; wdt:P86 wd:Q134157 ; wdt:P345 wd:Q134157 ; wdt:P162 wd:Q134157 ; wdt:P800 wd:Q134157 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1165050 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P195 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P195 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P195 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P195 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q1165050 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q142115 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q656357 wdt:P344 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1165050 wdt:P57 ?resource. } UNION { wd:Q93853 wdt:P57 ?resource. } UNION { wd:Q142115 wdt:P57 ?resource. } UNION { wd:Q656357 wdt:P57 ?resource. } UNION { wd:Q1165050 wdt:P86 ?resource. } UNION { wd:Q93853 wdt:P86 ?resource. } UNION { wd:Q142115 wdt:P86 ?resource. } UNION { wd:Q656357 wdt:P86 ?resource. } UNION { wd:Q1165050 wdt:P58 ?resource. } UNION { wd:Q93853 wdt:P58 ?resource. } UNION { wd:Q142115 wdt:P58 ?resource. } UNION { wd:Q656357 wdt:P58 ?resource. } UNION { wd:Q1165050 wdt:P195 ?resource. } UNION { wd:Q93853 wdt:P195 ?resource. } UNION { wd:Q142115 wdt:P195 ?resource. } UNION { wd:Q656357 wdt:P195 ?resource. } UNION { wd:Q1165050 wdt:P1040 ?resource. } UNION { wd:Q93853 wdt:P1040 ?resource. } UNION { wd:Q142115 wdt:P1040 ?resource. } UNION { wd:Q656357 wdt:P1040 ?resource. } UNION { wd:Q1165050 wdt:P344 ?resource. } UNION { wd:Q93853 wdt:P344 ?resource. } UNION { wd:Q142115 wdt:P344 ?resource. } UNION { wd:Q656357 wdt:P344 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q48975"], ["wd:Q47284"], ["wd:Q15438012"]], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{ kg:2043 kg:4129 ?resource . } UNION \",\n        \"{ kg:2043 kg:6886 ?resource . } UNION \",\n        \"{ kg:2043 kg:8596 ?resource . } UNION \",\n        \"{ kg:2043 kg:9344 ?resource . } UNION \",\n        \"{ kg:2043 kg:3341 ?resource . } UNION \",\n        \"{ kg:2043 kg:8181 ?resource . } UNION \",\n        \"{ kg:0404 kg:4129 ?resource . } UNION \",\n        \"{ kg:0404 kg:6886 ?resource . } UNION \",\n        \"{ kg:0404 kg:8596 ?resource . } UNION \",\n        \"{ kg:0404 kg:9344 ?resource . } UNION \",\n        \"{ kg:0404 kg:3341 ?resource . } UNION \",\n        \"{ kg:0404 kg:8181 ?resource . } UNION \",\n        \"{ kg:9806 kg:4129 ?resource . } UNION \",\n        \"{ kg:9806 kg:6886 ?resource . } UNION \",\n        \"{ kg:9806 kg:8596 ?resource . } UNION \",\n        \"{ kg:9806 kg:9344 ?resource . } UNION \",\n        \"{ kg:9806 kg:3341 ?resource . } UNION \",\n        \"{ kg:9806 kg:8181 ?resource . } UNION \",\n        \"{ kg:4401 kg:4129 ?resource . } UNION \",\n        \"{ kg:4401 kg:6886 ?resource . } UNION \",\n        \"{ kg:4401 kg:8596 ?resource . } UNION \",\n        \"{ kg:4401 kg:9344 ?resource . } UNION \",\n        \"{ kg:4401 kg:3341 ?resource . } UNION \",\n        \"{ kg:4401 kg:8181 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { kg:2043 kg:4129 ?resource . } UNION { kg:2043 kg:6886 ?resource . } UNION { kg:2043 kg:8596 ?resource . } UNION { kg:2043 kg:9344 ?resource . } UNION { kg:2043 kg:3341 ?resource . } UNION { kg:2043 kg:8181 ?resource . } UNION { kg:0404 kg:4129 ?resource . } UNION { kg:0404 kg:6886 ?resource . } UNION { kg:0404 kg:8596 ?resource . } UNION { kg:0404 kg:9344 ?resource . } UNION { kg:0404 kg:3341 ?resource . } UNION { kg:0404 kg:8181 ?resource . } UNION { kg:9806 kg:4129 ?resource . } UNION { kg:9806 kg:6886 ?resource . } UNION { kg:9806 kg:8596 ?resource . } UNION { kg:9806 kg:9344 ?resource . } UNION { kg:9806 kg:3341 ?resource . } UNION { kg:9806 kg:8181 ?resource . } UNION { kg:4401 kg:4129 ?resource . } UNION { kg:4401 kg:6886 ?resource . } UNION { kg:4401 kg:8596 ?resource . } UNION { kg:4401 kg:9344 ?resource . } UNION { kg:4401 kg:3341 ?resource . } UNION { kg:4401 kg:8181 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 wd:Q249676 .\",\n    \"?resource wdt:P800 wd:Q11266439 .\",\n    \"?resource wdt:P800 wd:Q506156 .\",\n    \"?resource wdt:P800 wd:Q7505879 .\",\n    \"?resource wdt:P800 wd:Q243111 .\",\n    \"?resource wdt:P800 wd:Q1650964 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q249676 . ?resource wdt:P800 wd:Q11266439 . ?resource wdt:P800 wd:Q506156 . ?resource wdt:P800 wd:Q7505879 . ?resource wdt:P800 wd:Q243111 . ?resource wdt:P800 wd:Q1650964 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q29011 wdt:P1431 ?executiveProducer . } UNION { wd:Q29011 wdt:P58 ?screenwriter . }\",\n        \"?resource wdt:P108 wd:Q11371930, wd:Q947907, wd:Q182950, wd:Q1054807, wd:Q1136386, wd:Q11490471 .\",\n        \"FILTER (?resource IN (?executiveProducer, ?screenwriter))\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q29011 wdt:P1431 ?executiveProducer . } UNION { wd:Q29011 wdt:P58 ?screenwriter . } ?resource wdt:P108 wd:Q11371930, wd:Q947907, wd:Q182950, wd:Q1054807, wd:Q1136386, wd:Q11490471 . FILTER (?resource IN (?executiveProducer, ?screenwriter)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q55400"]], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{ kg:3829 kg:4582 ?executiveProducer . } UNION { kg:3829 kg:2791 ?screenwriter . }\",\n        \"?resource kg:9948 kg:6160, kg:7740, kg:6651, kg:2192, kg:1188, kg:9463 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { kg:3829 kg:4582 ?executiveProducer . } UNION { kg:3829 kg:2791 ?screenwriter . } ?resource kg:9948 kg:6160, kg:7740, kg:6651, kg:2192, kg:1188, kg:9463 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P58 wd:Q206479 ;\",\n        \"wdt:P50 wd:Q206479 ;\",\n        \"wdt:P162 wd:Q206479 .\",\n      \"?resource wdt:P3831 wd:Q188462 .\",\n    \"} UNION {\",\n      \"?resource wdt:P58 wd:Q206479 ;\",\n        \"wdt:P50 wd:Q206479 ;\",\n        \"wdt:P162 wd:Q206479 .\",\n      \"?resource wdt:P3831 wd:Q188462 .\",\n    \"} UNION {\",\n      \"?resource wdt:P58 wd:Q206479 ;\",\n        \"wdt:P50 wd:Q206479 ;\",\n        \"wdt:P162 wd:Q206479 .\",\n      \"?resource wdt:P3831 wd:Q188462 .\",\n    \"} UNION {\",\n      \"?resource wdt:P58 wd:Q206479 ;\",\n        \"wdt:P50 wd:Q206479 ;\",\n        \"wdt:P162 wd:Q206479 .\",\n      \"?resource wdt:P3831 wd:Q188462 .\",\n    \"}\",\n  \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P58 wd:Q206479 ; wdt:P50 wd:Q206479 ; wdt:P162 wd:Q206479 . ?resource wdt:P3831 wd:Q188462 . } UNION { ?resource wdt:P58 wd:Q206479 ; wdt:P50 wd:Q206479 ; wdt:P162 wd:Q206479 . ?resource wdt:P3831 wd:Q188462 . } UNION { ?resource wdt:P58 wd:Q206479 ; wdt:P50 wd:Q206479 ; wdt:P162 wd:Q206479 . ?resource wdt:P3831 wd:Q188462 . } UNION { ?resource wdt:P58 wd:Q206479 ; wdt:P50 wd:Q206479 ; wdt:P162 wd:Q206479 . ?resource wdt:P3831 wd:Q188462 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q17738 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1609393 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q613974 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1415127 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q208910 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1609393 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1415127 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q17738 wdt:P57 ?resource. } UNION { wd:Q1609393 wdt:P344 ?resource. } UNION { wd:Q613974 wdt:P58 ?resource. } UNION { wd:Q1415127 wdt:P58 ?resource. } UNION { wd:Q208910 wdt:P58 ?resource. } UNION { wd:Q1609393 wdt:P58 ?resource. } UNION { wd:Q17738 wdt:P58 ?resource. } UNION { wd:Q1415127 wdt:P57 ?resource. } UNION { wd:Q17738 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q38222"], ["wd:Q21279512"]], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:7242 kg:0815 . } UNION \",\n        \"{ ?resource kg:7392 kg:0815 . } UNION \",\n        \"{ ?resource kg:7592 kg:4375 . } UNION \",\n        \"{ ?resource kg:7592 kg:4519 . } UNION \",\n        \"{ ?resource kg:7692 kg:2452 . } UNION \",\n        \"{ ?resource kg:0296 kg:2452 . } UNION \",\n        \"{ ?resource kg:7242 kg:2634 . } UNION \",\n        \"{ ?resource kg:7592 kg:2634 . } UNION \",\n        \"{ ?resource kg:8434 kg:2634 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7242 kg:0815 . } UNION { ?resource kg:7392 kg:0815 . } UNION { ?resource kg:7592 kg:4375 . } UNION { ?resource kg:7592 kg:4519 . } UNION { ?resource kg:7692 kg:2452 . } UNION { ?resource kg:0296 kg:2452 . } UNION { ?resource kg:7242 kg:2634 . } UNION { ?resource kg:7592 kg:2634 . } UNION { ?resource kg:8434 kg:2634 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P496 wd:Q208727;\",\n      \"wdt:P58 wd:Q208727.\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. } { ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. } { ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q208727; wdt:P58 wd:Q208727. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"wd:Q1473406 wdt:P57 ?resource.\",\n          \"wd:Q1473406 wdt:P344 ?resource.\",\n          \"wd:Q2085 wdt:P1431 ?resource.\",\n        \"}\",\n        \"{\",\n          \"wd:Q3485595 wdt:P57 ?resource.\",\n          \"wd:Q3485595 wdt:P344 ?resource.\",\n          \"wd:Q2085 wdt:P1431 ?resource.\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1473406 wdt:P57 ?resource. wd:Q1473406 wdt:P344 ?resource. wd:Q2085 wdt:P1431 ?resource. } { wd:Q3485595 wdt:P57 ?resource. wd:Q3485595 wdt:P344 ?resource. wd:Q2085 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q2071"]], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:4187 kg:9557 . } UNION \",\n        \"{ ?resource kg:4376 kg:9557 . } UNION \",\n        \"{ ?resource kg:3443 kg:9557 . } UNION \",\n        \"{ ?resource kg:4187 kg:7819 . } UNION \",\n        \"{ ?resource kg:4376 kg:7819 . } UNION \",\n        \"{ ?resource kg:3443 kg:7819 . } UNION \",\n        \"{ ?resource kg:4560 kg:6263 . } UNION \",\n        \"{ ?resource kg:4560 kg:6602 . } UNION \",\n        \"{ ?resource kg:4560 kg:9722 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4187 kg:9557 . } UNION { ?resource kg:4376 kg:9557 . } UNION { ?resource kg:3443 kg:9557 . } UNION { ?resource kg:4187 kg:7819 . } UNION { ?resource kg:4376 kg:7819 . } UNION { ?resource kg:3443 kg:7819 . } UNION { ?resource kg:4560 kg:6263 . } UNION { ?resource kg:4560 kg:6602 . } UNION { ?resource kg:4560 kg:9722 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"The Kid\\\"@en .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"The Floorwalker\\\"@en .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"A Woman\\\"@en .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"Modern Times\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?director wdt:P26 ?spouse .\",\n        \"?spouse rdfs:label \\\"Lita Grey\\\"@en .\",\n      \"} UNION {\",\n        \"?director wdt:P26 ?spouse .\",\n        \"?spouse rdfs:label \\\"Mildred Harris\\\"@en .\",\n      \"} UNION {\",\n        \"?director wdt:P26 ?spouse .\",\n        \"?spouse rdfs:label \\\"Oona O'Neill\\\"@en .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"The Kid\"@en . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"The Floorwalker\"@en . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"A Woman\"@en . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"Modern Times\"@en . } { ?director wdt:P26 ?spouse . ?spouse rdfs:label \"Lita Grey\"@en . } UNION { ?director wdt:P26 ?spouse . ?spouse rdfs:label \"Mildred Harris\"@en . } UNION { ?director wdt:P26 ?spouse . ?spouse rdfs:label \"Oona O'Neill\"@en . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q374172 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q374172 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q166739 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q166739 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q2449461 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q2449461 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P1040 ?resource. }\",\n      \"}\",\n      \"?resource wdt:P26 wd:Q32337, wd:Q241019, wd:Q137808.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q374172 wdt:P57 ?resource. } UNION { wd:Q374172 wdt:P1040 ?resource. } UNION { wd:Q166739 wdt:P57 ?resource. } UNION { wd:Q166739 wdt:P1040 ?resource. } UNION { wd:Q2449461 wdt:P57 ?resource. } UNION { wd:Q2449461 wdt:P1040 ?resource. } UNION { wd:Q45602 wdt:P57 ?resource. } UNION { wd:Q45602 wdt:P1040 ?resource. } } ?resource wdt:P26 wd:Q32337, wd:Q241019, wd:Q137808. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0674 kg:0802 .\",\n          \"?resource kg:3374 kg:0802 .\",\n          \"?resource kg:1521 kg:3253 .\",\n          \"?resource kg:1521 kg:2766 .\",\n          \"?resource kg:1521 kg:1588 .\",\n        \"} UNION {\",\n          \"?resource kg:0674 kg:8420 .\",\n          \"?resource kg:3374 kg:8420 .\",\n          \"?resource kg:1521 kg:3253 .\",\n          \"?resource kg:1521 kg:2766 .\",\n          \"?resource kg:1521 kg:1588 .\",\n        \"} UNION {\",\n          \"?resource kg:0674 kg:6094 .\",\n          \"?resource kg:3374 kg:6094 .\",\n          \"?resource kg:1521 kg:3253 .\",\n          \"?resource kg:1521 kg:2766 .\",\n          \"?resource kg:1521 kg:1588 .\",\n        \"} UNION {\",\n          \"?resource kg:0674 kg:2607 .\",\n          \"?resource kg:3374 kg:2607 .\",\n          \"?resource kg:1521 kg:3253 .\",\n          \"?resource kg:1521 kg:2766 .\",\n          \"?resource kg:1521 kg:1588 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0674 kg:0802 . ?resource kg:3374 kg:0802 . ?resource kg:1521 kg:3253 . ?resource kg:1521 kg:2766 . ?resource kg:1521 kg:1588 . } UNION { ?resource kg:0674 kg:8420 . ?resource kg:3374 kg:8420 . ?resource kg:1521 kg:3253 . ?resource kg:1521 kg:2766 . ?resource kg:1521 kg:1588 . } UNION { ?resource kg:0674 kg:6094 . ?resource kg:3374 kg:6094 . ?resource kg:1521 kg:3253 . ?resource kg:1521 kg:2766 . ?resource kg:1521 kg:1588 . } UNION { ?resource kg:0674 kg:2607 . ?resource kg:3374 kg:2607 . ?resource kg:1521 kg:3253 . ?resource kg:1521 kg:2766 . ?resource kg:1521 kg:1588 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q9376 wdt:P21 wd:Q6581097 .\",\n    \"wd:Q9376 wdt:P31 wd:Q5 .\",\n    \"wd:Q9376 wdt:P39 wd:Q482980 .\",\n    \"wd:Q9376 wdt:P50 wd:Q482980 .\",\n    \"wd:Q9376 wdt:P58 wd:Q482980 .\",\n    \"BIND(wd:Q9376 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q9376 wdt:P21 wd:Q6581097 . wd:Q9376 wdt:P31 wd:Q5 . wd:Q9376 wdt:P39 wd:Q482980 . wd:Q9376 wdt:P50 wd:Q482980 . wd:Q9376 wdt:P58 wd:Q482980 . BIND(wd:Q9376 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q882 wdt:P31 wd:Q5 . } UNION \",\n        \"{ wd:Q882 wdt:P21 wd:Q6581097 . } UNION \",\n        \"{ wd:Q882 wdt:P57 ?resource . } UNION \",\n        \"{ wd:Q882 wdt:P1040 ?resource . } UNION \",\n        \"{ wd:Q882 wdt:P58 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q882 wdt:P31 wd:Q5 . } UNION { wd:Q882 wdt:P21 wd:Q6581097 . } UNION { wd:Q882 wdt:P57 ?resource . } UNION { wd:Q882 wdt:P1040 ?resource . } UNION { wd:Q882 wdt:P58 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2139 kg:280 ?resource . } UNION \",\n        \"{ kg:2139 kg:7397 ?resource . } UNION \",\n        \"{ kg:2139 kg:6986 ?resource . } UNION \",\n        \"{ kg:2139 kg:2241 kg:2114 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2139 kg:280 ?resource . } UNION { kg:2139 kg:7397 ?resource . } UNION { kg:2139 kg:6986 ?resource . } UNION { kg:2139 kg:2241 kg:2114 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?company WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film rdfs:label \\\"Grand Canyon\\\"@en .\",\n    \"?film wdt:P272|wdt:P162 ?company .\",\n    \"?company wdt:P749* wd:Q5380986, wd:Q136150, wd:Q136150, wd:Q136150, wd:Q136150, wd:Q136150 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"Grand Canyon\"@en . ?film wdt:P272|wdt:P162 ?company . ?company wdt:P749* wd:Q5380986, wd:Q136150, wd:Q136150, wd:Q136150, wd:Q136150, wd:Q136150 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ wd:Q2062523 wdt:P750 ?company. } UNION { wd:Q2062523 wdt:P272 ?company. }\",\n        \"?company wdt:P127 ?owner.\",\n        \"{ ?owner wdt:P127 wd:Q3133593. } UNION { ?owner wdt:P127 wd:Q1411292. } UNION\",\n        \"  { ?owner wdt:P127 wd:Q219635. } UNION { ?owner wdt:P127 wd:Q7603552. } UNION\",\n        \"  { ?owner wdt:P127 wd:Q3511946. } UNION { ?owner wdt:P127 wd:Q505275. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { wd:Q2062523 wdt:P750 ?company. } UNION { wd:Q2062523 wdt:P272 ?company. } ?company wdt:P127 ?owner. { ?owner wdt:P127 wd:Q3133593. } UNION { ?owner wdt:P127 wd:Q1411292. } UNION { ?owner wdt:P127 wd:Q219635. } UNION { ?owner wdt:P127 wd:Q7603552. } UNION { ?owner wdt:P127 wd:Q3511946. } UNION { ?owner wdt:P127 wd:Q505275. } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ kg:3187 kg:is_distributed_by ?company . } UNION { kg:3172 kg:0554 ?company . }\",\n        \"?company kg:1549 kg:2351, kg:1023, kg:4856, kg:7596, kg:5524, kg:5601 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { kg:3187 kg:is_distributed_by ?company . } UNION { kg:3172 kg:0554 ?company . } ?company kg:1549 kg:2351, kg:1023, kg:4856, kg:7596, kg:5524, kg:5601 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director ?star WHERE {\",\n    \"{\",\n      \"?film1 wdt:P31 wd:Q11424 .\",\n      \"?film1 rdfs:label \\\"There Will Be No Leave Today\\\"@en .\",\n      \"?film1 wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P31 wd:Q11424 .\",\n      \"?film2 rdfs:label \\\"The Killers\\\"@en .\",\n      \"?film2 wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n      \"?film1 wdt:P31 wd:Q11424 .\",\n      \"?film1 rdfs:label \\\"There Will Be No Leave Today\\\"@en .\",\n      \"?film1 wdt:P161 ?star .\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P31 wd:Q11424 .\",\n      \"?film2 rdfs:label \\\"The Killers\\\"@en .\",\n      \"?film2 wdt:P161 ?star .\",\n    \"}\",\n    \"{\",\n      \"wd:Q59087 wdt:P737 ?director .\",\n    \"}\",\n    \"{\",\n      \"wd:Q59087 wdt:P737 ?star .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"There Will Be No Leave Today\"@en . ?film1 wdt:P57 ?director . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"The Killers\"@en . ?film2 wdt:P57 ?director . } { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"There Will Be No Leave Today\"@en . ?film1 wdt:P161 ?star . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"The Killers\"@en . ?film2 wdt:P161 ?star . } { wd:Q59087 wdt:P737 ?director . } { wd:Q59087 wdt:P737 ?star . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P26 wd:Q490876, wd:Q232089, wd:Q232090 .\",\n      \"?resource wdt:P3320 wd:Q159816, wd:Q215783, wd:Q431489 .\",\n      \"?resource wdt:P1127 wd:Q150715 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q490876, wd:Q232089, wd:Q232090 . ?resource wdt:P3320 wd:Q159816, wd:Q215783, wd:Q431489 . ?resource wdt:P1127 wd:Q150715 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P26 wd:Q137808 .\",\n          \"?resource wdt:P26 wd:Q32337 .\",\n          \"?resource wdt:P26 wd:Q241019 .\",\n          \"?resource wdt:P737 wd:Q7371 .\",\n          \"?resource wdt:P737 wd:Q157191 .\",\n          \"?resource wdt:P737 wd:Q104340 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P26 wd:Q137808 . ?resource wdt:P26 wd:Q32337 . ?resource wdt:P26 wd:Q241019 . ?resource wdt:P737 wd:Q7371 . ?resource wdt:P737 wd:Q157191 . ?resource wdt:P737 wd:Q104340 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource WHERE {\",\n    \"{\",\n      \"?resource kg:9609 kg:6642 .\",\n      \"?resource kg:9609 kg:0424 .\",\n      \"?resource kg:9609 kg:4418 .\",\n      \"?resource kg:4505 kg:3750 .\",\n      \"?resource kg:4505 kg:9414 .\",\n      \"?resource kg:4505 kg:9016 .\",\n      \"?resource kg:2541 kg:7462 .\",\n    \"}\",\n    \"{\",\n      \"?resource kg:4320 kg:5368 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:9609 kg:6642 . ?resource kg:9609 kg:0424 . ?resource kg:9609 kg:4418 . ?resource kg:4505 kg:3750 . ?resource kg:4505 kg:9414 . ?resource kg:4505 kg:9016 . ?resource kg:2541 kg:7462 . } { ?resource kg:4320 kg:5368 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"Jane B. par Agnès V.\\\"@en .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"The Beaches of Agnès\\\"@en .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film rdfs:label \\\"The World of Jacques Demy\\\"@en .\",\n      \"}\",\n      \"?director wdt:P26 ?spouse .\",\n      \"?spouse rdfs:label \\\"Jacques Demy\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"Jane B. par Agnès V.\"@en . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"The Beaches of Agnès\"@en . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film rdfs:label \"The World of Jacques Demy\"@en . } ?director wdt:P26 ?spouse . ?spouse rdfs:label \"Jacques Demy\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q229990"]], "gold": [["wd:Q229990"]]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2709504 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q2709504 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q3181846 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q3181846 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q2709504 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q3181846 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q3204825 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q3204825 wdt:P98 ?resource. } UNION \",\n        \"{ wd:Q3161846 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q3161846 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q3204825 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q3161846 wdt:P58 ?resource. }\",\n      \"?resource wdt:P26 wd:Q312258.\",\n      \"?resource wdt:P737 wd:Q312258.\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2709504 wdt:P57 ?resource. } UNION { wd:Q2709504 wdt:P161 ?resource. } UNION { wd:Q3181846 wdt:P57 ?resource. } UNION { wd:Q3181846 wdt:P161 ?resource. } UNION { wd:Q2709504 wdt:P58 ?resource. } UNION { wd:Q3181846 wdt:P58 ?resource. } UNION { wd:Q3204825 wdt:P57 ?resource. } UNION { wd:Q3204825 wdt:P98 ?resource. } UNION { wd:Q3161846 wdt:P57 ?resource. } UNION { wd:Q3161846 wdt:P161 ?resource. } UNION { wd:Q3204825 wdt:P58 ?resource. } UNION { wd:Q3161846 wdt:P58 ?resource. } ?resource wdt:P26 wd:Q312258. ?resource wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2720 kg:8751 ?resource . } UNION \",\n        \"{ kg:2720 kg:2163 ?resource . } UNION \",\n        \"{ kg:2720 kg:5571 ?resource . } UNION \",\n        \"{ kg:1428 kg:8751 ?resource . } UNION \",\n        \"{ kg:1428 kg:2163 ?resource . } UNION \",\n        \"{ kg:1428 kg:5571 ?resource . } UNION \",\n        \"{ kg:9534 kg:8751 ?resource . } UNION \",\n        \"{ kg:9534 kg:2163 ?resource . } UNION \",\n        \"{ kg:9534 kg:5571 ?resource . } UNION \",\n        \"{ ?resource kg:4393 kg:7335 . } UNION \",\n        \"{ ?resource kg:1806 kg:7335 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2720 kg:8751 ?resource . } UNION { kg:2720 kg:2163 ?resource . } UNION { kg:2720 kg:5571 ?resource . } UNION { kg:1428 kg:8751 ?resource . } UNION { kg:1428 kg:2163 ?resource . } UNION { kg:1428 kg:5571 ?resource . } UNION { kg:9534 kg:8751 ?resource . } UNION { kg:9534 kg:2163 ?resource . } UNION { kg:9534 kg:5571 ?resource . } UNION { ?resource kg:4393 kg:7335 . } UNION { ?resource kg:1806 kg:7335 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 .\",\n    \"?company wdt:P729 wd:Q6683420 .\",\n    \"?company wdt:P749 wd:Q10871268 .\",\n    \"?company wdt:P749 wd:Q56839558 .\",\n    \"?company wdt:P749 wd:Q180449 .\",\n    \"?company wdt:P749 wd:Q207196 .\",\n    \"?company wdt:P749 wd:Q35086 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P729 wd:Q6683420 . ?company wdt:P749 wd:Q10871268 . ?company wdt:P749 wd:Q56839558 . ?company wdt:P749 wd:Q180449 . ?company wdt:P749 wd:Q207196 . ?company wdt:P749 wd:Q35086 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ wd:Q17070012 wdt:P750 ?company. } UNION \",\n        \"{ wd:Q1628791 wdt:P127 ?company. } UNION \",\n        \"{ wd:Q318128 wdt:P127 ?company. } UNION \",\n        \"{ wd:Q136469 wdt:P127 ?company. } UNION \",\n        \"{ wd:Q65073147 wdt:P127 ?company. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { { wd:Q17070012 wdt:P750 ?company. } UNION { wd:Q1628791 wdt:P127 ?company. } UNION { wd:Q318128 wdt:P127 ?company. } UNION { wd:Q136469 wdt:P127 ?company. } UNION { wd:Q65073147 wdt:P127 ?company. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?company WHERE {\",\n        \"{ ?company kg:4947 kg:6814. } UNION { ?company kg:8044 kg:6814. }\",\n        \"?company kg:8165 kg:0479.\",\n        \"?company kg:8165 kg:0464.\",\n        \"?company kg:8165 kg:2485.\",\n        \"?company kg:8165 kg:3637.\",\n        \"?company kg:8165 kg:1784.\",\n        \"?company kg:8165 kg:8332.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { { ?company kg:4947 kg:6814. } UNION { ?company kg:8044 kg:6814. } ?company kg:8165 kg:0479. ?company kg:8165 kg:0464. ?company kg:8165 kg:2485. ?company kg:8165 kg:3637. ?company kg:8165 kg:1784. ?company kg:8165 kg:8332. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 wd:Q49068;\",\n          \"wdt:P57 wd:Q108705;\",\n          \"wdt:P58 wd:Q108705.\",\n        \"?resource wdt:P31 wd:Q5;\",\n          \"wdt:P25 w", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q3207690 .\",\n          \"?resource wdt:P1040 wd:Q3207690 .\",\n          \"?resource wdt:P800 wd:Q3207690 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q4004365 .\",\n          \"?resource wdt:P1040 wd:Q4004365 .\",\n          \"?resource wdt:P800 wd:Q4004365 .\",\n        \"}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q3207690 . ?resource wdt:P1040 wd:Q3207690 . ?resource wdt:P800 wd:Q3207690 . } { ?resource wdt:P57 wd:Q4004365 . ?resource wdt:P1040 wd:Q4004365 . ?resource wdt:P800 wd:Q4004365 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8325 kg:2955 .\",\n          \"?resource kg:8626 kg:3765 .\",\n          \"?resource kg:8501 kg:9100 .\",\n          \"?resource kg:8501 kg:1223 .\",\n          \"?resource kg:8501 kg:0414 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8325 kg:2955 . ?resource kg:8626 kg:3765 . ?resource kg:8501 kg:9100 . ?resource kg:8501 kg:1223 . ?resource kg:8501 kg:0414 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q239086 wdt:P26 ?spouse.\",\n    \"?spouse wdt:P106 wd:Q547909;\",\n    \"       wdt:P1127 wd:Q165091, wd:Q38099, wd:Q165091, wd:Q165091, wd:Q488205.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q239086 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q547909; wdt:P1127 wd:Q165091, wd:Q38099, wd:Q165091, wd:Q165091, wd:Q488205. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q6813152 wdt:P26 ?spouse . } UNION \",\n        \"{ ?resource wdt:P106 wd:Q222344 . } UNION \",\n        \"{ ?resource wdt:P112 wd:Q746676 . } UNION \",\n        \"{ ?resource wdt:P112 wd:Q1044630 . } UNION \",\n        \"{ ?resource wdt:P112 wd:Q258945 . } UNION \",\n        \"{ ?resource wdt:P112 wd:Q242446 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q6813152 wdt:P26 ?spouse . } UNION { ?resource wdt:P106 wd:Q222344 . } UNION { ?resource wdt:P112 wd:Q746676 . } UNION { ?resource wdt:P112 wd:Q1044630 . } UNION { ?resource wdt:P112 wd:Q258945 . } UNION { ?resource wdt:P112 wd:Q242446 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1081069"], ["wd:Q471010"], ["wd:Q441964"], ["wd:Q1283902"], ["wd:Q662604"], ["wd:Q1904456"], ["wd:Q374091"], ["wd:Q851569"], ["wd:Q823849"], ["wd:Q62942"], ["wd:Q1280254"], ["wd:Q1700581"], ["wd:Q1738640"], ["wd:Q367614"], ["wd:Q962442"], ["wd:Q1711048"], ["wd:Q357624"], ["wd:Q958911"], ["wd:Q55438"], ["wd:Q502329"], ["wd:Q78667"], ["wd:Q1720705"], ["wd:Q8662"], ["wd:Q1699167"], ["wd:Q494445"], ["wd:Q528068"], ["wd:Q1389642"], ["wd:Q323729"], ["wd:Q616886"], ["wd:Q657828"], ["wd:Q367813"], ["wd:Q958139"], ["wd:Q480429"], ["wd:Q467806"], ["wd:Q355835"], ["wd:Q1070690"], ["wd:Q8342"], ["wd:Q1723700"], ["wd:Q1038228"], ["wd:Q1808428"], ["wd:Q466154"], ["wd:Q1352323"], ["wd:Q1370328"], ["wd:Q879436"], ["wd:Q1279797"], ["wd:Q1291742"], ["wd:Q1801273"], ["wd:Q523689"], ["wd:Q1715379"], ["wd:Q62503"], ["wd:Q1346097"], ["wd:Q1248073"], ["wd:Q1704894"], ["wd:Q1308087"], ["wd:Q368085"], ["wd:Q2025121"], ["wd:Q1870813"], ["wd:Q87548"], ["wd:Q353758"], ["wd:Q445503"], ["wd:Q8586"], ["wd:Q348015"], ["wd:Q1782166"], ["wd:Q1356226"], ["wd:Q462027"], ["wd:Q528421"], ["wd:Q987622"], ["wd:Q1036469"], ["wd:Q1343723"], ["wd:Q350948"], ["wd:Q1818885"], ["wd:Q1245983"], ["wd:Q1303217"], ["wd:Q506106"], ["wd:Q1351392"], ["wd:Q86462"], ["wd:Q486525"], ["wd:Q329965"], ["wd:Q1009685"], ["wd:Q427290"], ["wd:Q1035735"], ["wd:Q465353"], ["wd:Q1058003"], ["wd:Q351563"], ["wd:Q608904"], ["wd:Q478196"], ["wd:Q1738685"], ["wd:Q1749970"], ["wd:Q817447"], ["wd:Q825833"], ["wd:Q1280673"], ["wd:Q376107"], ["wd:Q481854"], ["wd:Q1340391"], ["wd:Q519902"], ["wd:Q1291925"], ["wd:Q1352702"], ["wd:Q514728"], ["wd:Q77588"], ["wd:Q374229"], ["wd:Q1382876"], ["wd:Q421675"], ["wd:Q643982"], ["wd:Q1065293"], ["wd:Q1777727"], ["wd:Q1287408"], ["wd:Q920674"], ["wd:Q1299356"], ["wd:Q1697840"], ["wd:Q1270652"], ["wd:Q1724729"], ["wd:Q981968"], ["wd:Q1740231"], ["wd:Q907264"], ["wd:Q512453"], ["wd:Q329176"], ["wd:Q513098"], ["wd:Q984522"], ["wd:Q504461"], ["wd:Q902080"], ["wd:Q436584"], ["wd:Q1285624"], ["wd:Q1336434"], ["wd:Q1357486"], ["wd:Q617690"], ["wd:Q1057926"], ["wd:Q1396023"], ["wd:Q682888"], ["wd:Q428260"], ["wd:Q560108"], ["wd:Q922928"], ["wd:Q1697760"], ["wd:Q11321"], ["wd:Q661100"], ["wd:Q1348041"], ["wd:Q1702793"], ["wd:Q938904"], ["wd:Q1006997"], ["wd:Q1297379"], ["wd:Q1316296"], ["wd:Q1690776"], ["wd:Q488925"], ["wd:Q515331"], ["wd:Q1827244"], ["wd:Q1991156"], ["wd:Q1039135"], ["wd:Q1389016"], ["wd:Q960230"], ["wd:Q1737526"], ["wd:Q982621"], ["wd:Q1334835"], ["wd:Q2039888"], ["wd:Q381539"], ["wd:Q568941"], ["wd:Q1036419"], ["wd:Q1741495"], ["wd:Q1878134"], ["wd:Q706886"], ["wd:Q598995"], ["wd:Q1352050"], ["wd:Q1717068"], ["wd:Q402812"], ["wd:Q7374"], ["wd:Q607280"], ["wd:Q824647"], ["wd:Q317567"], ["wd:Q504444"], ["wd:Q1691202"], ["wd:Q1714219"], ["wd:Q792338"], ["wd:Q1375642"], ["wd:Q1819039"], ["wd:Q944642"], ["wd:Q1396531"], ["wd:Q1747392"], ["wd:Q997148"], ["wd:Q1377720"], ["wd:Q51490"], ["wd:Q1035649"], ["wd:Q853230"], ["wd:Q1276107"], ["wd:Q1067522"], ["wd:Q1751108"], ["wd:Q512673"], ["wd:Q1901547"], ["wd:Q1367452"], ["wd:Q1708070"], ["wd:Q706993"], ["wd:Q72816"], ["wd:Q1324256"], ["wd:Q2058858"], ["wd:Q1690143"], ["wd:Q361290"], ["wd:Q1798531"], ["wd:Q1699611"], ["wd:Q46139"], ["wd:Q1383929"], ["wd:Q347864"], ["wd:Q498696"], ["wd:Q1866991"], ["wd:Q1893879"], ["wd:Q55249"], ["wd:Q1273469"], ["wd:Q1903799"], ["wd:Q678653"], ["wd:Q1286279"], ["wd:Q1368602"], ["wd:Q613921"], ["wd:Q684952"], ["wd:Q971656"], ["wd:Q1028679"], ["wd:Q1359405"], ["wd:Q1381610"], ["wd:Q386394"], ["wd:Q14045"], ["wd:Q348727"], ["wd:Q1928816"], ["wd:Q648611"], ["wd:Q352087"], ["wd:Q340451"], ["wd:Q933596"], ["wd:Q1249541"], ["wd:Q987708"], ["wd:Q1030765"], ["wd:Q939296"], ["wd:Q967126"], ["wd:Q414574"], ["wd:Q505940"], ["wd:Q658352"], ["wd:Q524041"], ["wd:Q1351247"], ["wd:Q1294164"], ["wd:Q1793619"], ["wd:Q1804597"], ["wd:Q964166"], ["wd:Q86913"], ["wd:Q437616"], ["wd:Q568659"], ["wd:Q658017"], ["wd:Q55193"], ["wd:Q1907678"], ["wd:Q809434"], ["wd:Q1999126"], ["wd:Q674810"], ["wd:Q1375311"], ["wd:Q1305723"], ["wd:Q1750698"], ["wd:Q55211"], ["wd:Q77756"], ["wd:Q639084"], ["wd:Q789362"], ["wd:Q494759"], ["wd:Q328403"], ["wd:Q822523"], ["wd:Q1084770"], ["wd:Q441578"], ["wd:Q835122"], ["wd:Q972545"], ["wd:Q1381489"], ["wd:Q418937"], ["wd:Q453691"], ["wd:Q1367673"], ["wd:Q382945"], ["wd:Q45857"], ["wd:Q1894645"], ["wd:Q1360098"], ["wd:Q335080"], ["wd:Q1796674"], ["wd:Q395096"], ["wd:Q1727536"], ["wd:Q960196"], ["wd:Q385158"], ["wd:Q1725681"], ["wd:Q1359005"], ["wd:Q74117"], ["wd:Q484980"], ["wd:Q651863"], ["wd:Q968440"], ["wd:Q790767"], ["wd:Q1285680"], ["wd:Q1377602"], ["wd:Q1715509"], ["wd:Q44426"], ["wd:Q1077553"], ["wd:Q1370528"], ["wd:Q1718756"], ["wd:Q827371"], ["wd:Q824344"], ["wd:Q489951"], ["wd:Q1005321"], ["wd:Q324937"], ["wd:Q497036"], ["wd:Q384784"], ["wd:Q1714641"], ["wd:Q490240"], ["wd:Q354579"], ["wd:Q1003717"], ["wd:Q1319817"], ["wd:Q364116"], ["wd:Q1246911"], ["wd:Q1715209"], ["wd:Q460277"], ["wd:Q682762"], ["wd:Q1396327"], ["wd:Q2057473"], ["wd:Q484973"], ["wd:Q854244"], ["wd:Q85041"], ["wd:Q981530"], ["wd:Q1330373"], ["wd:Q1900489"], ["wd:Q38222"], ["wd:Q1033837"], ["wd:Q85349"], ["wd:Q2055313"], ["wd:Q965654"], ["wd:Q472058"], ["wd:Q498242"], ["wd:Q956193"], ["wd:Q1064479"], ["wd:Q691335"], ["wd:Q921068"], ["wd:Q1379839"], ["wd:Q1709544"], ["wd:Q1071497"], ["wd:Q706016"], ["wd:Q1962284"], ["wd:Q854168"], ["wd:Q1739226"], ["wd:Q1347338"], ["wd:Q362210"], ["wd:Q512006"], ["wd:Q65252"], ["wd:Q1341593"], ["wd:Q1748823"], ["wd:Q1302031"], ["wd:Q1314113"], ["wd:Q1389274"], ["wd:Q516836"], ["wd:Q1345605"], ["wd:Q822798"], ["wd:Q1375876"], ["wd:Q1748896"], ["wd:Q484572"], ["wd:Q48987"], ["wd:Q815767"], ["wd:Q84116"], ["wd:Q1929690"], ["wd:Q583717"], ["wd:Q49020"], ["wd:Q707321"], ["wd:Q958587"], ["wd:Q1063394"], ["wd:Q1353698"], ["wd:Q1790455"], ["wd:Q1276080"], ["wd:Q1030375"], ["wd:Q1298970"], ["wd:Q970579"], ["wd:Q1750402"], ["wd:Q1858445"], ["wd:Q77757"], ["wd:Q444545"], ["wd:Q1001238"], ["wd:Q1273264"], ["wd:Q965659"], ["wd:Q1327257"], ["wd:Q1328532"], ["wd:Q344472"], ["wd:Q363413"], ["wd:Q446427"], ["wd:Q1737759"], ["wd:Q1358070"], ["wd:Q543004"], ["wd:Q455900"], ["wd:Q1899422"], ["wd:Q467574"], ["wd:Q449828"], ["wd:Q524897"], ["wd:Q1889742"], ["wd:Q497075"], ["wd:Q348050"], ["wd:Q1939454"], ["wd:Q1249315"], ["wd:Q1360594"], ["wd:Q916629"], ["wd:Q1036385"], ["wd:Q1362806"], ["wd:Q1772301"], ["wd:Q1786409"], ["wd:Q458766"], ["wd:Q1342731"], ["wd:Q824345"], ["wd:Q1063846"], ["wd:Q612638"], ["wd:Q677834"], ["wd:Q78719"], ["wd:Q543733"], ["wd:Q668170"], ["wd:Q523976"], ["wd:Q1904397"], ["wd:Q2036564"], ["wd:Q66774"], ["wd:Q8644"], ["wd:Q822368"], ["wd:Q1691020"], ["wd:Q82653"], ["wd:Q854215"], ["wd:Q974053"], ["wd:Q1929470"], ["wd:Q1294424"], ["wd:Q1253831"], ["wd:Q1045172"], ["wd:Q622342"], ["wd:Q1366385"], ["wd:Q43754"], ["wd:Q1000549"], ["wd:Q487671"], ["wd:Q1709083"], ["wd:Q951018"], ["wd:Q633967"], ["wd:Q1294348"], ["wd:Q435814"], ["wd:Q390981"], ["wd:Q1036454"], ["wd:Q1364819"], ["wd:Q1355409"], ["wd:Q420568"], ["wd:Q372654"], ["wd:Q978315"], ["wd:Q508497"], ["wd:Q376641"], ["wd:Q390780"], ["wd:Q969298"], ["wd:Q319849"], ["wd:Q486883"], ["wd:Q1893952"], ["wd:Q953717"], ["wd:Q535692"], ["wd:Q1745034"], ["wd:Q1904323"], ["wd:Q494835"], ["wd:Q562434"], ["wd:Q1397362"], ["wd:Q1806099"], ["wd:Q1081186"], ["wd:Q1315265"], ["wd:Q433979"], ["wd:Q1372630"], ["wd:Q997463"], ["wd:Q1326980"], ["wd:Q404522"], ["wd:Q44131"], ["wd:Q87267"], ["wd:Q950689"], ["wd:Q977419"], ["wd:Q43264"], ["wd:Q919460"], ["wd:Q1360497"], ["wd:Q383764"], ["wd:Q932305"], ["wd:Q823567"], ["wd:Q650877"], ["wd:Q684771"], ["wd:Q1356562"], ["wd:Q1712018"], ["wd:Q1367135"], ["wd:Q1270164"], ["wd:Q1270602"], ["wd:Q489559"], ["wd:Q1351182"], ["wd:Q382570"], ["wd:Q499882"], ["wd:Q1340985"], ["wd:Q1356510"], ["wd:Q1400431"], ["wd:Q1084628"], ["wd:Q466405"], ["wd:Q970432"], ["wd:Q993830"], ["wd:Q986879"], ["wd:Q1325975"], ["wd:Q1939485"], ["wd:Q1255042"], ["wd:Q554303"], ["wd:Q2059416"], ["wd:Q74626"], ["wd:Q816873"], ["wd:Q1293533"], ["wd:Q1859330"], ["wd:Q1400885"], ["wd:Q952023"], ["wd:Q448362"], ["wd:Q1247974"], ["wd:Q1718760"], ["wd:Q1725546"], ["wd:Q325970"], ["wd:Q1360245"], ["wd:Q1356708"], ["wd:Q1740242"], ["wd:Q1319095"], ["wd:Q460090"], ["wd:Q1359957"], ["wd:Q825526"], ["wd:Q316756"], ["wd:Q1339485"], ["wd:Q381227"], ["wd:Q1333793"], ["wd:Q1353078"], ["wd:Q45928"], ["wd:Q86332"], ["wd:Q436704"], ["wd:Q1383447"], ["wd:Q2020093"], ["wd:Q1928284"], ["wd:Q914315"], ["wd:Q57231"], ["wd:Q1790110"], ["wd:Q8873"], ["wd:Q447931"], ["wd:Q1732240"], ["wd:Q2057315"], ["wd:Q8003"], ["wd:Q2071"], ["wd:Q460144"], ["wd:Q1252526"], ["wd:Q55430"], ["wd:Q993643"], ["wd:Q464425"], ["wd:Q616171"], ["wd:Q983391"], ["wd:Q1252382"], ["wd:Q1930792"], ["wd:Q1898959"], ["wd:Q1029330"], ["wd:Q45221"], ["wd:Q1063987"], ["wd:Q918558"], ["wd:Q524370"], ["wd:Q78263"], ["wd:Q504191"], ["wd:Q1894373"], ["wd:Q518140"], ["wd:Q349518"], ["wd:Q685815"], ["wd:Q638941"], ["wd:Q707485"], ["wd:Q931959"], ["wd:Q1986537"], ["wd:Q1374692"], ["wd:Q957569"], ["wd:Q937733"], ["wd:Q1356454"], ["wd:Q63069"], ["wd:Q561686"], ["wd:Q377126"], ["wd:Q1330422"], ["wd:Q597096"], ["wd:Q865243"], ["wd:Q939716"], ["wd:Q87684"], ["wd:Q25132"], ["wd:Q704378"], ["wd:Q955982"], ["wd:Q1263877"], ["wd:Q1366594"], ["wd:Q921687"], ["wd:Q1699554"], ["wd:Q78952"], ["wd:Q505840"], ["wd:Q1709705"], ["wd:Q1714798"], ["wd:Q1320795"], ["wd:Q1910709"], ["wd:Q975310"], ["wd:Q1730166"], ["wd:Q634059"], ["wd:Q1352909"], ["wd:Q1347598"], ["wd:Q549956"], ["wd:Q1343961"], ["wd:Q1351601"], ["wd:Q431611"], ["wd:Q589679"], ["wd:Q1335915"], ["wd:Q323074"], ["wd:Q587102"], ["wd:Q919722"], ["wd:Q1914035"], ["wd:Q525385"], ["wd:Q958849"], ["wd:Q556573"], ["wd:Q1290023"], ["wd:Q1390225"], ["wd:Q345800"], ["wd:Q1891623"], ["wd:Q1034904"], ["wd:Q1278124"], ["wd:Q544901"], ["wd:Q462569"], ["wd:Q524278"], ["wd:Q515077"], ["wd:Q490797"], ["wd:Q373115"], ["wd:Q1745857"], ["wd:Q1356489"], ["wd:Q1769543"], ["wd:Q1033274"], ["wd:Q1805281"], ["wd:Q1793702"], ["wd:Q788591"], ["wd:Q1010227"], ["wd:Q1295714"], ["wd:Q1700488"], ["wd:Q1287295"], ["wd:Q1732923"], ["wd:Q1782773"], ["wd:Q1876183"], ["wd:Q645627"], ["wd:Q572838"], ["wd:Q509671"], ["wd:Q464686"], ["wd:Q489174"], ["wd:Q62547"], ["wd:Q1386296"], ["wd:Q551828"], ["wd:Q1358687"], ["wd:Q585668"], ["wd:Q328489"], ["wd:Q5178190"], ["wd:Q1340718"], ["wd:Q1872931"], ["wd:Q979618"], ["wd:Q2039051"], ["wd:Q1898671"], ["wd:Q1754659"], ["wd:Q466387"], ["wd:Q1338345"], ["wd:Q1346696"], ["wd:Q347950"], ["wd:Q690973"], ["wd:Q656924"], ["wd:Q387323"], ["wd:Q2033969"], ["wd:Q1282375"], ["wd:Q349339"], ["wd:Q1704892"], ["wd:Q1927914"], ["wd:Q449514"], ["wd:Q1337082"], ["wd:Q1311938"], ["wd:Q85038"], ["wd:Q472343"], ["wd:Q448503"], ["wd:Q349588"], ["wd:Q3610"], ["wd:Q330172"], ["wd:Q1285107"], ["wd:Q1806083"], ["wd:Q2036260"], ["wd:Q808638"], ["wd:Q1706711"], ["wd:Q60745"], ["wd:Q529749"], ["wd:Q2039715"], ["wd:Q2033788"], ["wd:Q580810"], ["wd:Q354292"], ["wd:Q462727"], ["wd:Q2044183"], ["wd:Q936935"], ["wd:Q1801792"], ["wd:Q71424"], ["wd:Q64337"], ["wd:Q1347228"], ["wd:Q918883"], ["wd:Q817359"], ["wd:Q487094"], ["wd:Q1285748"], ["wd:Q826178"], ["wd:Q922700"], ["wd:Q974798"], ["wd:Q1300791"], ["wd:Q573164"], ["wd:Q1964519"], ["wd:Q1345827"], ["wd:Q28028"], ["wd:Q970960"], ["wd:Q1797629"], ["wd:Q640142"], ["wd:Q1299601"], ["wd:Q1895800"], ["wd:Q78383"], ["wd:Q322521"], ["wd:Q1741574"], ["wd:Q1998036"], ["wd:Q1081867"], ["wd:Q1258190"], ["wd:Q1948483"], ["wd:Q377151"], ["wd:Q348093"], ["wd:Q1370195"], ["wd:Q1368789"], ["wd:Q8296"], ["wd:Q940328"], ["wd:Q630736"], ["wd:Q325399"], ["wd:Q1356284"], ["wd:Q1386853"], ["wd:Q1303779"], ["wd:Q655877"], ["wd:Q51541"], ["wd:Q539136"], ["wd:Q690290"], ["wd:Q1351651"], ["wd:Q450504"], ["wd:Q1928366"], ["wd:Q1278867"], ["wd:Q540947"], ["wd:Q1266387"], ["wd:Q926054"], ["wd:Q375247"], ["wd:Q1757080"], ["wd:Q496124"], ["wd:Q2032881"], ["wd:Q684569"], ["wd:Q1905022"], ["wd:Q1710150"], ["wd:Q1335859"], ["wd:Q1288088"], ["wd:Q1748118"], ["wd:Q1903090"], ["wd:Q1386988"], ["wd:Q87665"], ["wd:Q551945"], ["wd:Q969766"], ["wd:Q1349845"], ["wd:Q1386077"], ["wd:Q1892611"], ["wd:Q1875217"], ["wd:Q72014"], ["wd:Q682383"], ["wd:Q795025"], ["wd:Q594400"], ["wd:Q1332558"], ["wd:Q517553"], ["wd:Q825411"], ["wd:Q1298560"], ["wd:Q579550"], ["wd:Q657194"], ["wd:Q1711723"], ["wd:Q944140"], ["wd:Q1766320"], ["wd:Q938708"], ["wd:Q1775255"], ["wd:Q563004"], ["wd:Q2031070"], ["wd:Q73248"], ["wd:Q1794153"], ["wd:Q485770"], ["wd:Q825361"], ["wd:Q1245379"], ["wd:Q349780"], ["wd:Q1899078"], ["wd:Q453839"], ["wd:Q678350"], ["wd:Q317574"], ["wd:Q86660"], ["wd:Q1244238"], ["wd:Q827379"], ["wd:Q402295"], ["wd:Q1714768"], ["wd:Q40645"], ["wd:Q55210"], ["wd:Q704287"], ["wd:Q1904937"], ["wd:Q1385397"], ["wd:Q2017139"], ["wd:Q60669"], ["wd:Q1690216"], ["wd:Q879830"], ["wd:Q808479"], ["wd:Q2025507"], ["wd:Q1354061"], ["wd:Q949330"], ["wd:Q1312577"], ["wd:Q1891308"], ["wd:Q514003"], ["wd:Q653778"], ["wd:Q925857"], ["wd:Q1341403"], ["wd:Q707484"], ["wd:Q1354039"], ["wd:Q1271476"], ["wd:Q942779"], ["wd:Q357333"], ["wd:Q707946"], ["wd:Q792020"], ["wd:Q8884"], ["wd:Q67547"], ["wd:Q382393"], ["wd:Q978222"], ["wd:Q536309"], ["wd:Q958200"], ["wd:Q325848"], ["wd:Q503952"], ["wd:Q917051"], ["wd:Q516683"], ["wd:Q792950"], ["wd:Q1249956"], ["wd:Q77365"], ["wd:Q1701288"], ["wd:Q889887"], ["wd:Q1064334"], ["wd:Q933856"], ["wd:Q62099"], ["wd:Q324753"], ["wd:Q976792"], ["wd:Q452731"], ["wd:Q650706"], ["wd:Q505035"], ["wd:Q1029561"], ["wd:Q1286353"], ["wd:Q457890"], ["wd:Q817863"], ["wd:Q854797"], ["wd:Q976626"], ["wd:Q1382764"], ["wd:Q1352432"], ["wd:Q2001"], ["wd:Q1706840"], ["wd:Q5603"], ["wd:Q1308135"], ["wd:Q1699139"], ["wd:Q86102"], ["wd:Q460376"], ["wd:Q69810"], ["wd:Q364017"], ["wd:Q963628"], ["wd:Q991779"], ["wd:Q25191"], ["wd:Q53052"], ["wd:Q62323"], ["wd:Q961121"], ["wd:Q55282"], ["wd:Q62652"], ["wd:Q938424"], ["wd:Q1927151"], ["wd:Q1379980"], ["wd:Q1754514"], ["wd:Q956642"], ["wd:Q1345903"], ["wd:Q365230"], ["wd:Q452471"], ["wd:Q1717043"], ["wd:Q1827126"], ["wd:Q1052322"], ["wd:Q977626"], ["wd:Q552985"], ["wd:Q86018"], ["wd:Q505629"], ["wd:Q1316891"], ["wd:Q1781422"], ["wd:Q1031449"], ["wd:Q1390841"], ["wd:Q86545"], ["wd:Q1360018"], ["wd:Q1018614"], ["wd:Q78666"], ["wd:Q1273499"], ["wd:Q1380910"], ["wd:Q512103"], ["wd:Q1898945"], ["wd:Q1702035"], ["wd:Q1386403"], ["wd:Q1748117"], ["wd:Q1928985"], ["wd:Q515579"], ["wd:Q1297951"], ["wd:Q425713"], ["wd:Q913128"], ["wd:Q1715638"], ["wd:Q530824"], ["wd:Q1793907"], [], ["wd:Q330778"], ["wd:Q11319"], ["wd:Q369059"], ["wd:Q487382"], ["wd:Q1279700"], ["wd:Q1396116"], ["wd:Q1774941"], ["wd:Q1359565"], ["wd:Q1893397"], ["wd:Q899938"], ["wd:Q24296"], ["wd:Q957926"], ["wd:Q1750243"], ["wd:Q1904345"], ["wd:Q1716907"], ["wd:Q927045"], ["wd:Q679088"], ["wd:Q940393"], ["wd:Q969902"], ["wd:Q387074"], ["wd:Q1392525"], ["wd:Q1706396"], ["wd:Q1357270"], ["wd:Q1707993"], ["wd:Q962142"], ["wd:Q464764"], ["wd:Q556317"], ["wd:Q1890642"], ["wd:Q1056714"], ["wd:Q888489"], ["wd:Q993210"], ["wd:Q469449"], ["wd:Q337645"], ["wd:Q1028321"], ["wd:Q87818"], ["wd:Q47284"], ["wd:Q973847"], ["wd:Q1081551"], ["wd:Q1294192"], ["wd:Q1698589"], ["wd:Q62028"], ["wd:Q1733238"], ["wd:Q1927220"], ["wd:Q1898736"], ["wd:Q515568"], ["wd:Q61654"], ["wd:Q897981"], ["wd:Q1771457"], ["wd:Q1889725"], ["wd:Q64358"], ["wd:Q1323300"], ["wd:Q968052"], ["wd:Q810018"], ["wd:Q1948700"], ["wd:Q544869"], ["wd:Q816482"], ["wd:Q1793417"], ["wd:Q84650"], ["wd:Q1702154"], ["wd:Q833133"], ["wd:Q698676"], ["wd:Q1350910"], ["wd:Q322960"], ["wd:Q487069"], ["wd:Q512419"], ["wd:Q439911"], ["wd:Q437509"], ["wd:Q501712"], ["wd:Q1033249"], ["wd:Q55392"], ["wd:Q508873"], ["wd:Q1360465"], ["wd:Q965067"], ["wd:Q492401"], ["wd:Q888475"], ["wd:Q1258139"], ["wd:Q1402143"], ["wd:Q455482"], ["wd:Q1360584"], ["wd:Q899843"], ["wd:Q1738870"], ["wd:Q1345872"], ["wd:Q1030862"], ["wd:Q942647"], ["wd:Q86682"], ["wd:Q361308"], ["wd:Q933453"], ["wd:Q1796276"], ["wd:Q1891599"], ["wd:Q465350"], ["wd:Q336206"], ["wd:Q64581"], ["wd:Q1793897"], ["wd:Q1818990"], ["wd:Q1820823"], ["wd:Q463497"], ["wd:Q55405"], ["wd:Q1349775"], ["wd:Q1390499"], ["wd:Q555180"], ["wd:Q630767"], ["wd:Q918531"], ["wd:Q514432"], ["wd:Q1303573"], ["wd:Q1712369"], ["wd:Q87852"], ["wd:Q900157"], ["wd:Q1273430"], ["wd:Q936663"], ["wd:Q1002914"], ["wd:Q1933181"], ["wd:Q466626"], ["wd:Q345838"], ["wd:Q1745375"], ["wd:Q905986"]], "gold": [false]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5144 kg:7813 ?resource . } UNION \",\n        \"{ kg:3610 kg:7813 ?resource . } UNION \",\n        \"{ kg:8063 kg:7813 ?resource . } UNION \",\n        \"{ kg:1879 kg:7813 ?resource . } UNION \",\n        \"{ kg:8877 kg:7813 ?resource . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5144 kg:7813 ?resource . } UNION { kg:3610 kg:7813 ?resource . } UNION { kg:8063 kg:7813 ?resource . } UNION { kg:1879 kg:7813 ?resource . } UNION { kg:8877 kg:7813 ?resource . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P2600 wd:Q487926;\",\n      \"wdt:P161 wd:Q487926.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P2600 wd:Q1067234;\",\n      \"wdt:P161 wd:Q1067234.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P2600 wd:Q108909980;\",\n      \"wdt:P161 wd:Q108909980.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P2600 wd:Q107406690;\",\n      \"wdt:P57 wd:Q107406690;\",\n      \"wdt:P58 wd:Q107406690;\",\n      \"wdt:P2521 wd:Q107406690;\",\n      \"wdt:P3320 wd:Q107406690.\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5; wdt:P2600 wd:Q487926; wdt:P161 wd:Q487926. } { ?resource wdt:P31 wd:Q5; wdt:P2600 wd:Q1067234; wdt:P161 wd:Q1067234. } { ?resource wdt:P31 wd:Q5; wdt:P2600 wd:Q108909980; wdt:P161 wd:Q108909980. } { ?resource wdt:P31 wd:Q5; wdt:P2600 wd:Q107406690; wdt:P57 wd:Q107406690; wdt:P58 wd:Q107406690; wdt:P2521 wd:Q107406690; wdt:P3320 wd:Q107406690. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P344 wd:Q85520081 .\",\n          \"?resource wdt:P674 wd:Q96054985 .\",\n          \"?resource wdt:P344 wd:Q85532437 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P161 wd:Q87778273 .\",\n          \"?resource wdt:P57 wd:Q87778273 .\",\n          \"?resource wdt:P58 wd:Q87778273 .\",\n          \"?resource wdt:P1431 wd:Q87778273 .\",\n          \"?resource wdt:P1040 wd:Q87778273 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P344 wd:Q85520081 . ?resource wdt:P674 wd:Q96054985 . ?resource wdt:P344 wd:Q85532437 . } { ?resource wdt:P161 wd:Q87778273 . ?resource wdt:P57 wd:Q87778273 . ?resource wdt:P58 wd:Q87778273 . ?resource wdt:P1431 wd:Q87778273 . ?resource wdt:P1040 wd:Q87778273 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:1594 kg:6680 .\",\n          \"?resource kg:1348 kg:1786 .\",\n          \"?resource kg:1348 kg:4083 .\",\n          \"?resource kg:1348 kg:0590 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:1505 kg:4752 .\",\n          \"?resource kg:3026 kg:4752 .\",\n          \"?resource kg:1594 kg:4752 .\",\n          \"?resource kg:2395 kg:4752 .\",\n          \"?resource kg:6680 kg:4752 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1594 kg:6680 . ?resource kg:1348 kg:1786 . ?resource kg:1348 kg:4083 . ?resource kg:1348 kg:0590 . } { ?resource kg:1505 kg:4752 . ?resource kg:3026 kg:4752 . ?resource kg:1594 kg:4752 . ?resource kg:2395 kg:4752 . ?resource kg:6680 kg:4752 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?writer WHERE {\",\n    \"{\",\n      \"?writer wdt:P31 wd:Q5 .\",\n      \"?writer wdt:P26 ?spouse .\",\n      \"?spouse wdt:P734 wd:Q10891696, wd:Q10891697 .\",\n    \"}\",\n    \"{\",\n      \"?work wdt:P50 ?writer ;\",\n      \"wdt:P31 wd:Q24856690 .\",\n      \"FILTER (?work IN (wd:Q10891696, wd:Q10891697, wd:Q10891698, wd:Q10891699))\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?writer WHERE { { ?writer wdt:P31 wd:Q5 . ?writer wdt:P26 ?spouse . ?spouse wdt:P734 wd:Q10891696, wd:Q10891697 . } { ?work wdt:P50 ?writer ; wdt:P31 wd:Q24856690 . FILTER (?work IN (wd:Q10891696, wd:Q10891697, wd:Q10891698, wd:Q10891699)) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P58 wd:Q2411065 .\",\n          \"?resource wdt:P344 wd:Q2411065 .\",\n          \"?resource wdt:P58 wd:Q613974 .\",\n          \"?resource wdt:P344 wd:Q613974 .\",\n          \"?resource wdt:P26 wd:Q52306598 .\",\n          \"?resource wdt:P737 wd:Q52306598 .\",\n        \"} UNION {\",\n          \"?resource wdt:P161 wd:Q2411065 .\",\n          \"?resource wdt:P162 wd:Q2411065 .\",\n          \"?resource wdt:P161 wd:Q613974 .\",\n          \"?resource wdt:P162 wd:Q613974 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P58 wd:Q2411065 . ?resource wdt:P344 wd:Q2411065 . ?resource wdt:P58 wd:Q613974 . ?resource wdt:P344 wd:Q613974 . ?resource wdt:P26 wd:Q52306598 . ?resource wdt:P737 wd:Q52306598 . } UNION { ?resource wdt:P161 wd:Q2411065 . ?resource wdt:P162 wd:Q2411065 . ?resource wdt:P161 wd:Q613974 . ?resource wdt:P162 wd:Q613974 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2129 kg:6371 . } UNION \",\n        \"{ ?resource kg:2044 kg:5258 . } UNION \",\n        \"{ ?resource kg:2044 kg:7321 . } UNION \",\n        \"{ ?resource kg:4097 kg:4611 . } UNION \",\n        \"{ ?resource kg:4097 kg:3949 . } UNION \",\n        \"{ ?resource kg:4097 kg:1488 . } UNION \",\n        \"{ ?resource kg:4097 kg:1736 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2129 kg:6371 . } UNION { ?resource kg:2044 kg:5258 . } UNION { ?resource kg:2044 kg:7321 . } UNION { ?resource kg:4097 kg:4611 . } UNION { ?resource kg:4097 kg:3949 . } UNION { ?resource kg:4097 kg:1488 . } UNION { ?resource kg:4097 kg:1736 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?trilogy wdt:P31 wd:Q56470928 ; # instance of film trilogy\",\n          \"wdt:P57 ?director . # director\",\n          \"wdt:P179* wd:Q196748 . # part of the series Nuri Bilge Ceylan films\",\n        \"}\",\n      \"{\",\n        \"wd:Q203102 wdt:P57 ?director ; # Uzak director\",\n          \"wdt:P162 ?executiveProducer ; # executive producer\",\n          \"wdt:P98 ?editor ; # editor\",\n          \"wdt:P58 ?writer . # writer\",\n        \"}\",\n      \"{\",\n        \"wd:Q304766 wdt:P57 ?director ; # Clouds of May director\",\n          \"wdt:P162 ?executiveProducer ; # executive producer\",\n          \"wdt:P98 ?editor ; # editor\",\n          \"wdt:P58 ?writer . # writer\",\n        \"}\",\n      \"{\",\n        \"?resource wdt:P345 'Nuri_Bilge_Ceylan' . # Nuri Bilge Ceylan\",\n        \"FILTER (?director = ?resource && \",\n          \"?executiveProducer = ?resource && \",\n          \"?editor = ?resource && \",\n          \"?writer = ?resource) .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?trilogy wdt:P31 wd:Q56470928 ; wdt:P57 ?director . wdt:P179* wd:Q196748 . } { wd:Q203102 wdt:P57 ?director ; wdt:P162 ?executiveProducer ; wdt:P98 ?editor ; wdt:P58 ?writer . } { wd:Q304766 wdt:P57 ?director ; wdt:P162 ?executiveProducer ; wdt:P98 ?editor ; wdt:P58 ?writer . } { ?resource wdt:P345 'Nuri_Bilge_Ceylan' . FILTER (?director = ?resource && ?executiveProducer = ?resource && ?editor = ?resource && ?writer = ?resource) . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q18609037 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q2086445 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q1361018 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q2086445 wdt:P58 ?screenwriter . } UNION \",\n        \"{ wd:Q1361018 wdt:P58 ?screenwriter . } UNION \",\n        \"{ wd:Q2086445 wdt:P195 ?producer . } UNION \",\n        \"{ wd:Q1361018 wdt:P195 ?producer . } UNION \",\n        \"{ wd:Q2086445 wdt:P1040 ?editor . } UNION \",\n        \"{ wd:Q1361018 wdt:P1040 ?editor . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q18609037 wdt:P57 ?director . } UNION { wd:Q2086445 wdt:P57 ?director . } UNION { wd:Q1361018 wdt:P57 ?director . } UNION { wd:Q2086445 wdt:P58 ?screenwriter . } UNION { wd:Q1361018 wdt:P58 ?screenwriter . } UNION { wd:Q2086445 wdt:P195 ?producer . } UNION { wd:Q1361018 wdt:P195 ?producer . } UNION { wd:Q2086445 wdt:P1040 ?editor . } UNION { wd:Q1361018 wdt:P1040 ?editor . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9796 kg:7293 ?resource . } UNION \",\n        \"{ kg:9796 kg:6143 ?resource . } UNION \",\n        \"{ kg:9796 kg:3493 ?resource . } UNION \",\n        \"{ kg:9796 kg:6836 ?resource . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9796 kg:7293 ?resource . } UNION { kg:9796 kg:6143 ?resource . } UNION { kg:9796 kg:3493 ?resource . } UNION { kg:9796 kg:6836 ?resource . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 ?director .\",\n        \"?film wdt:P68 ?director .\",\n        \"VALUES ?film {wd:Q190921 wd:Q309626 wd:Q64916117}\",\n      \"} UNION \",\n      \"{\",\n        \"?director wdt:P26 ?spouse .\",\n        \"?spouse wdt:P582 ?influence .\",\n        \"VALUES ?spouse {wd:Q309417}\",\n      \"} .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P68 ?director . VALUES ?film {wd:Q190921 wd:Q309626 wd:Q64916117} } UNION { ?director wdt:P26 ?spouse . ?spouse wdt:P582 ?influence . VALUES ?spouse {wd:Q309417} } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2493884 wdt:P1040 ?editor . } UNION \",\n        \"{ wd:Q267517 wdt:P1040 ?editor . } UNION \",\n        \"{ wd:Q63993096 wdt:P1040 ?editor . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2493884 wdt:P1040 ?editor . } UNION { wd:Q267517 wdt:P1040 ?editor . } UNION { wd:Q63993096 wdt:P1040 ?editor . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director WHERE {\",\n        \"{ kg:7684 kg:6454 ?director . } UNION \",\n        \"{ kg:3793 kg:6454 ?director . } UNION \",\n        \"{ kg:4401 kg:6454 ?director . } UNION \",\n        \"{ kg:8360 kg:6454 ?director . }\",\n      \"?director kg:6454 kg:1654 .\",\n      \"?director kg:3248 kg:6665 .\",\n      \"kg:6665 kg:1597 ?director .\"\n    ]\n}", "normal_query": "SELECT ?director WHERE { { kg:7684 kg:6454 ?director . } UNION { kg:3793 kg:6454 ?director . } UNION { kg:4401 kg:6454 ?director . } UNION { kg:8360 kg:6454 ?director . } ?director kg:6454 kg:1654 . ?director kg:3248 kg:6665 . kg:6665 kg:1597 ?director . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q4830453 .\",\n      \"?resource wdt:P749 wd:Q262178 .\",\n      \"?resource wdt:P127 ?acquirer .\",\n      \"VALUES ?acquirer { wd:Q7604653 wd:Q1914626 wd:Q7839669 wd:Q1021178 wd:Q7541699 wd:Q1048554 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q4830453 . ?resource wdt:P749 wd:Q262178 . ?resource wdt:P127 ?acquirer . VALUES ?acquirer { wd:Q7604653 wd:Q1914626 wd:Q7839669 wd:Q1021178 wd:Q7541699 wd:Q1048554 } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P127 wd:Q849363 .\",\n          \"?resource wdt:P127 wd:Q505275 .\",\n          \"?resource wdt:P127 wd:Q219635 .\",\n          \"?resource wdt:P127 wd:Q3511946 .\",\n          \"?resource wdt:P127 wd:Q7603552 .\",\n          \"?resource wdt:P127 wd:Q2007336 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P750 wd:Q849363 .\",\n          \"?resource wdt:P750 wd:Q505275 .\",\n          \"?resource wdt:P750 wd:Q219635 .\",\n          \"?resource wdt:P750 wd:Q3511946 .\",\n          \"?resource wdt:P750 wd:Q7603552 .\",\n          \"?resource wdt:P750 wd:Q2007336 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P272 wd:Q849363 .\",\n          \"?resource wdt:P272 wd:Q505275 .\",\n          \"?resource wdt:P272 wd:Q219635 .\",\n          \"?resource wdt:P272 wd:Q3511946 .\",\n          \"?resource wdt:P272 wd:Q7603552 .\",\n          \"?resource wdt:P272 wd:Q2007336 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P127 wd:Q849363 . ?resource wdt:P127 wd:Q505275 . ?resource wdt:P127 wd:Q219635 . ?resource wdt:P127 wd:Q3511946 . ?resource wdt:P127 wd:Q7603552 . ?resource wdt:P127 wd:Q2007336 . } UNION { ?resource wdt:P750 wd:Q849363 . ?resource wdt:P750 wd:Q505275 . ?resource wdt:P750 wd:Q219635 . ?resource wdt:P750 wd:Q3511946 . ?resource wdt:P750 wd:Q7603552 . ?resource wdt:P750 wd:Q2007336 . } UNION { ?resource wdt:P272 wd:Q849363 . ?resource wdt:P272 wd:Q505275 . ?resource wdt:P272 wd:Q219635 . ?resource wdt:P272 wd:Q3511946 . ?resource wdt:P272 wd:Q7603552 . ?resource wdt:P272 wd:Q2007336 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:4122 kg:8410 . } UNION \",\n        \"{ ?resource kg:0622 kg:9245 . } UNION \",\n        \"{ ?resource kg:0622 kg:8849 . } UNION \",\n        \"{ ?resource kg:0622 kg:7561 . } UNION \",\n        \"{ ?resource kg:0622 kg:3467 . } UNION \",\n        \"{ ?resource kg:0622 kg:1950 . } UNION \",\n        \"{ ?resource kg:0622 kg:8425 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4122 kg:8410 . } UNION { ?resource kg:0622 kg:9245 . } UNION { ?resource kg:0622 kg:8849 . } UNION { ?resource kg:0622 kg:7561 . } UNION { ?resource kg:0622 kg:3467 . } UNION { ?resource kg:0622 kg:1950 . } UNION { ?resource kg:0622 kg:8425 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 .\",\n    \"?movie wdt:P57 ?director .\",\n    \"?movie wdt:P162 ?producer .\",\n    \"?movie wdt:P58 ?screenwriter .\",\n    \"?movie wdt:P161 ?actor1 .\",\n    \"?movie wdt:P161 ?actor2 .\",\n    \"VALUES (?director ?producer ?screenwriter ?actor1 ?actor2) {\",\n    \"(wd:Q3508479 wd:Q168809 wd:Q106121 wd:Q318721 wd:Q3508479)\",\n    \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?movie WHERE { ?movie wdt:P31 wd:Q11424 . ?movie wdt:P57 ?director . ?movie wdt:P162 ?producer . ?movie wdt:P58 ?screenwriter . ?movie wdt:P161 ?actor1 . ?movie wdt:P161 ?actor2 . VALUES (?director ?producer ?screenwriter ?actor1 ?actor2) { (wd:Q3508479 wd:Q168809 wd:Q106121 wd:Q318721 wd:Q3508479) } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?movie WHERE {\",\n        \"{\",\n          \"?movie wdt:P58 wd:Q4420093 .\",\n          \"?movie wdt:P162 wd:Q295984 .\",\n          \"?movie wdt:P57 wd:Q16390 .\",\n          \"?movie wdt:P58 wd:Q242477 .\",\n        \"}\",\n        \"{\",\n          \"?movie wdt:P161 wd:Q93188 .\",\n          \"?movie wdt:P161 wd:Q744357 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?movie WHERE { { ?movie wdt:P58 wd:Q4420093 . ?movie wdt:P162 wd:Q295984 . ?movie wdt:P57 wd:Q16390 . ?movie wdt:P58 wd:Q242477 . } { ?movie wdt:P161 wd:Q93188 . ?movie wdt:P161 wd:Q744357 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:3580 kg:4602.} UNION \",\n        \"{?resource kg:9112 kg:6595.} UNION \",\n        \"{?resource kg:3082 kg:0279.} UNION \",\n        \"{?resource kg:9112 kg:1608.} UNION \",\n        \"{?resource kg:4101 kg:1860.} UNION \",\n        \"{?resource kg:1087 kg:0743.} UNION \",\n        \"{?resource kg:1087 kg:8323.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:3580 kg:4602.} UNION {?resource kg:9112 kg:6595.} UNION {?resource kg:3082 kg:0279.} UNION {?resource kg:9112 kg:1608.} UNION {?resource kg:4101 kg:1860.} UNION {?resource kg:1087 kg:0743.} UNION {?resource kg:1087 kg:8323.} } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
