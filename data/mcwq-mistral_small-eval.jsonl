{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n    \"  wd:Q1569487 wdt:P30 wd:Q28360.\",\n    \"  wd:Q1569487 wdt:P106 ?occupation.\",\n    \"  ?occupation wdt:P279* wd:Q33969.\"\n    ]\n}", "normal_query": "SELECT ?screenwriter WHERE { wd:Q1569487 wdt:P30 wd:Q28360. wd:Q1569487 wdt:P106 ?occupation. ?occupation wdt:P279* wd:Q33969. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?occupation WHERE {\",\n      \"wd:Q103013 wdt:P106 ?occupation.\",\n      \"FILTER(?occupation = wd:Q69423232)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?occupation WHERE { wd:Q103013 wdt:P106 ?occupation. FILTER(?occupation = wd:Q69423232) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q69423232"]], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Hans Ertl\nkg:9006 is occupation\nkg:7856 is film screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:0153 kg:9006 ?occupation.\",\n            \"?occupation kg:7856 ?resource.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { wd:Q103013 wdt:P106 ?occupation. ?occupation wd:Q69423232 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q7690 wdt:P106 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q7690 wdt:P106 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q392 wdt:P106 ?occupation.\",\n    \"  FILTER(?occupation = wd:Q36834).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q392 wdt:P106 ?occupation. FILTER(?occupation = wd:Q36834). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [[]], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4423 is occupation\nkg:3294 is composer\nkg:1333 is Bob Dylan", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:4423 kg:3294 .\",\n            \"?resource kg:1333 \\\"Bob Dylan\\\" .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q36834 . ?resource wd:Q392 \"Bob Dylan\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q873"], ["wd:Q353"], ["wd:Q5450"], ["wd:Q4899"], ["wd:Q1058"], ["wd:Q2086"], ["wd:Q3547"], ["wd:Q1802"], ["wd:Q2116"], ["wd:Q3098"], ["wd:Q6404"], ["wd:Q5351"], ["wd:Q5865"], ["wd:Q4240"], ["wd:Q4491"], ["wd:Q5586"], ["wd:Q2767"], ["wd:Q635"], ["wd:Q1245"], ["wd:Q2129"], ["wd:Q558"], ["wd:Q1318"], ["wd:Q2124"], ["wd:Q835"], ["wd:Q1379"], ["wd:Q1915"], ["wd:Q1323"], ["wd:Q1416"], ["wd:Q5376"], ["wd:Q2610"], ["wd:Q1782"], ["wd:Q4924"], ["wd:Q1744"], ["wd:Q489"], ["wd:Q303"], ["wd:Q868"], ["wd:Q1402"], ["wd:Q181"], ["wd:Q5652"], ["wd:Q5928"], ["wd:Q714"], ["wd:Q1628"], ["wd:Q4490"], ["wd:Q1704"], ["wd:Q5594"], ["wd:Q329"], ["wd:Q1883"], ["wd:Q5877"], ["wd:Q1775"], ["wd:Q838"], ["wd:Q4214"], ["wd:Q2571"], ["wd:Q5809"], ["wd:Q1779"], ["wd:Q3824"], ["wd:Q255"], ["wd:Q1687"], ["wd:Q4761"], ["wd:Q1698"], ["wd:Q2001"], ["wd:Q1919"], ["wd:Q1717"], ["wd:Q3335"], ["wd:Q1790"], ["wd:Q2185"], ["wd:Q4441"], ["wd:Q5834"], ["wd:Q4599"], ["wd:Q6079"], ["wd:Q1332"], ["wd:Q5661"], ["wd:Q4012"], ["wd:Q464"], ["wd:Q6017"], ["wd:Q1399"], ["wd:Q2161"], ["wd:Q5844"], ["wd:Q3295"], ["wd:Q1657"], ["wd:Q4328"], ["wd:Q4583"], ["wd:Q4690"], ["wd:Q615"], ["wd:Q1325"], ["wd:Q2604"], ["wd:Q4061"], ["wd:Q5069"], ["wd:Q605"], ["wd:Q767"], ["wd:Q5670"], ["wd:Q905"], ["wd:Q1911"], ["wd:Q3745"], ["wd:Q5331"], ["wd:Q1317"], ["wd:Q2339"], ["wd:Q504"], ["wd:Q410"], ["wd:Q1944"], ["wd:Q1659"], ["wd:Q76"], ["wd:Q1669"], ["wd:Q3648"], ["wd:Q1879"], ["wd:Q4496"], ["wd:Q1528"], ["wd:Q5252"], ["wd:Q272"], ["wd:Q1938"], ["wd:Q6091"], ["wd:Q3251"], ["wd:Q5796"], ["wd:Q2908"], ["wd:Q4498"], ["wd:Q2791"], ["wd:Q6279"], ["wd:Q675"], ["wd:Q4142"], ["wd:Q4064"], ["wd:Q1666"], ["wd:Q3112"], ["wd:Q5752"], ["wd:Q927"], ["wd:Q555"], ["wd:Q5167"], ["wd:Q6722"], ["wd:Q6060"], ["wd:Q5353"], ["wd:Q5592"], ["wd:Q4025"], ["wd:Q539"], ["wd:Q2253"], ["wd:Q4279"], ["wd:Q1401"], ["wd:Q3034"], ["wd:Q4261"], ["wd:Q6701"], ["wd:Q5365"], ["wd:Q4723"], ["wd:Q2593"], ["wd:Q6530"], ["wd:Q3008"], ["wd:Q3260"], ["wd:Q2599"], ["wd:Q1933"], ["wd:Q4030"], ["wd:Q4914"], ["wd:Q157"], ["wd:Q3102"], ["wd:Q4617"], ["wd:Q512"], ["wd:Q80"], ["wd:Q619"], ["wd:Q4770"], ["wd:Q1672"], ["wd:Q6013"], ["wd:Q4137"], ["wd:Q920"], ["wd:Q4014"], ["wd:Q207"], ["wd:Q2496"], ["wd:Q609"], ["wd:Q4891"], ["wd:Q3205"], ["wd:Q6050"], ["wd:Q4731"], ["wd:Q2582"], ["wd:Q1796"], ["wd:Q567"], ["wd:Q1403"], ["wd:Q1685"], ["wd:Q1984"], ["wd:Q2010"], ["wd:Q5681"], ["wd:Q4749"], ["wd:Q1276"], ["wd:Q1329"], ["wd:Q4997"], ["wd:Q1804"], ["wd:Q4889"], ["wd:Q1956"], ["wd:Q296"], ["wd:Q1783"], ["wd:Q1753"], ["wd:Q1736"], ["wd:Q562"], ["wd:Q1300"], ["wd:Q4038"], ["wd:Q1907"], ["wd:Q2673"], ["wd:Q1656"], ["wd:Q2069"], ["wd:Q909"], ["wd:Q1762"], ["wd:Q2601"], ["wd:Q4926"], ["wd:Q1691"], ["wd:Q1220"], ["wd:Q820"], ["wd:Q1655"], ["wd:Q6297"], ["wd:Q409"], ["wd:Q5721"], ["wd:Q1776"], ["wd:Q1651"], ["wd:Q5812"], ["wd:Q5682"], ["wd:Q4786"], ["wd:Q4806"], ["wd:Q5553"], ["wd:Q6195"], ["wd:Q4042"], ["wd:Q853"], ["wd:Q1755"], ["wd:Q1436"], ["wd:Q1777"], ["wd:Q6969"], ["wd:Q2196"], ["wd:Q3128"], ["wd:Q4340"], ["wd:Q4762"], ["wd:Q5335"], ["wd:Q1330"], ["wd:Q4790"], ["wd:Q2866"], ["wd:Q5547"], ["wd:Q4506"], ["wd:Q1503"], ["wd:Q3910"], ["wd:Q6950"], ["wd:Q4293"], ["wd:Q1928"], ["wd:Q2685"], ["wd:Q5345"], ["wd:Q91"], ["wd:Q946"], ["wd:Q5170"], ["wd:Q2054"], ["wd:Q1712"], ["wd:Q2540"], ["wd:Q5444"], ["wd:Q1442"], ["wd:Q6817"], ["wd:Q4960"], ["wd:Q2597"], ["wd:Q3924"], ["wd:Q5683"], ["wd:Q1151"], ["wd:Q2104"], ["wd:Q6033"], ["wd:Q4934"], ["wd:Q1936"], ["wd:L1375130"], ["wd:Q5233"], ["wd:Q4203"], ["wd:Q1429"], ["wd:Q5458"], ["wd:Q440"], ["wd:Q2737"], ["wd:Q4505"], ["wd:Q1728"], ["wd:Q1043"], ["wd:Q1427"], ["wd:Q448"], ["wd:Q1268"], ["wd:Q4695"], ["wd:Q4029"], ["wd:Q4768"], ["wd:Q392"], ["wd:Q5260"], ["wd:Q6319"], ["wd:Q935"], ["wd:Q3101"], ["wd:Q4769"], ["wd:Q4039"], ["wd:Q2038"], ["wd:Q4691"], ["wd:Q1923"], ["wd:Q4245"], ["wd:Q1394"], ["wd:Q1414"], ["wd:Q1395"], ["wd:Q1523"], ["wd:Q1541"], ["wd:Q1679"], ["wd:Q1917"], ["wd:Q302"], ["wd:Q2252"], ["wd:Q1910"], ["wd:Q4223"], ["wd:Q5009"], ["wd:Q2040"], ["wd:Q5040"], ["wd:Q5333"], ["wd:Q5454"], ["wd:Q5623"], ["wd:Q6096"], ["wd:Q4267"], ["wd:Q2274"], ["wd:Q1267"], ["wd:Q1939"], ["wd:Q1665"], ["wd:Q1708"], ["wd:Q4671"], ["wd:Q4313"], ["wd:Q4581"], ["wd:Q6242"], ["wd:Q4448"], ["wd:Q530"], ["wd:Q1817"], ["wd:Q1812"], ["wd:Q377"], ["wd:Q1962"], ["wd:Q1789"], ["wd:Q3281"], ["wd:Q1480"], ["wd:Q4725"], ["wd:Q4302"], ["wd:Q1751"], ["wd:Q5368"], ["wd:Q1446"], ["wd:Q5169"], ["wd:Q5673"], ["wd:Q859"], ["wd:Q1771"], ["wd:Q1839"], ["wd:Q1769"], ["wd:Q1031"], ["wd:Q2125"], ["wd:Q1950"], ["wd:Q1450"], ["wd:Q5284"], ["wd:Q1257"], ["wd:Q6399"], ["wd:Q1254"], ["wd:Q2677"], ["wd:Q1405"], ["wd:Q4501"], ["wd:Q3048"], ["wd:Q1081"], ["wd:Q4337"], ["wd:Q1333"], ["wd:Q882"], ["wd:Q1660"], ["wd:Q949"], ["wd:Q4578"], ["wd:Q1943"], ["wd:Q5686"], ["wd:Q4227"], ["wd:Q5382"], ["wd:Q6197"], ["wd:Q720"], ["wd:Q5580"], ["wd:Q5669"], ["wd:Q6008"], ["wd:Q5359"], ["wd:Q6427"], ["wd:Q1233"], ["wd:Q5336"], ["wd:Q5820"], ["wd:Q6541"], ["wd:Q2263"], ["wd:Q913"], ["wd:Q1035"], ["wd:Q4735"], ["wd:Q360"], ["wd:Q892"], ["wd:Q4622"], ["wd:Q4742"], ["wd:Q5081"], ["wd:Q3321"], ["wd:Q5585"], ["wd:Q6351"], ["wd:Q680"], ["wd:Q1189"], ["wd:Q4395"], ["wd:Q1326"], ["wd:Q1931"], ["wd:Q5355"], ["wd:Q2732"], ["wd:Q4461"], ["wd:Q3044"], ["wd:Q4408"], ["wd:Q6198"], ["wd:Q6300"], ["wd:Q5199"], ["wd:Q3319"], ["wd:Q5805"], ["wd:Q260"], ["wd:Q607"], ["wd:Q1739"], ["wd:Q3365"], ["wd:Q4826"], ["wd:Q2098"], ["wd:Q4036"], ["wd:Q5603"], ["wd:Q4500"], ["wd:Q1760"], ["wd:Q1512"], ["wd:Q297"], ["wd:Q5658"], ["wd:Q1662"], ["wd:Q6270"], ["wd:Q1425"], ["wd:Q3247"], ["wd:Q6512"], ["wd:Q5370"], ["wd:Q2330"], ["wd:Q1545"], ["wd:Q4991"], ["wd:Q862"], ["wd:Q6100"], ["wd:Q5588"], ["wd:Q1785"], ["wd:Q4593"], ["wd:Q1047"], ["wd:Q5271"], ["wd:Q3324"], ["wd:Q42"], ["wd:Q501"], ["wd:Q1625"], ["wd:Q1677"], ["wd:Q5072"], ["wd:Q1238"], ["wd:Q192"], ["wd:Q5344"], ["wd:Q4933"], ["wd:Q1064"], ["wd:Q5799"], ["wd:Q5073"], ["wd:Q3606"], ["wd:Q4836"], ["wd:Q1320"], ["wd:Q1671"], ["wd:Q5597"], ["wd:Q354"], ["wd:Q5352"], ["wd:Q1878"], ["wd:Q4026"], ["wd:Q2514"], ["wd:Q4992"], ["wd:Q4199"], ["wd:Q4462"], ["wd:Q1294"], ["wd:Q1958"], ["wd:Q4291"], ["wd:Q346"], ["wd:Q1433"], ["wd:Q5363"], ["wd:Q5879"], ["wd:Q2512"], ["wd:Q4009"], ["wd:Q1463"], ["wd:Q624"], ["wd:Q5005"], ["wd:Q939"], ["wd:Q2808"], ["wd:Q2071"], ["wd:Q692"], ["wd:Q3671"], ["wd:Q4652"], ["wd:Q1426"], ["wd:Q3153"], ["wd:Q5104"], ["wd:Q1908"], ["wd:Q5631"], ["wd:Q3285"], ["wd:Q848"], ["wd:Q2031"], ["wd:Q3611"], ["wd:Q4295"], ["wd:Q4124"], ["wd:Q4413"], ["wd:Q2667"], ["wd:Q4128"], ["wd:Q1745"], ["wd:Q5443"], ["wd:Q2190"], ["wd:Q7068"], ["wd:Q1991"], ["wd:Q814"], ["wd:Q4689"], ["wd:Q5618"], ["wd:Q307"], ["wd:Q1532"], ["wd:Q1920"], ["wd:Q4605"], ["wd:Q1423"], ["wd:Q991"], ["wd:Q5685"], ["wd:Q4440"], ["wd:Q4330"], ["wd:Q1149"], ["wd:Q4276"], ["wd:Q5074"], ["wd:Q4509"], ["wd:Q5080"], ["wd:Q5577"], ["wd:Q6101"], ["wd:Q762"], ["wd:Q885"], ["wd:Q2646"], ["wd:Q4832"], ["wd:Q5071"], ["wd:Q1699"], ["wd:Q3239"], ["wd:Q1942"], ["wd:Q989"], ["wd:Q5648"], ["wd:Q1224"], ["wd:Q7031"], ["wd:Q5827"], ["wd:Q4701"], ["wd:Q6030"], ["wd:Q3301"], ["wd:Q3925"], ["wd:Q1752"], ["wd:Q4058"], ["wd:Q4876"], ["wd:Q5959"], ["wd:Q1934"], ["wd:Q5327"], ["wd:Q1328"], ["wd:Q1922"], ["wd:Q1743"], ["wd:Q6363"], ["wd:Q1797"], ["wd:Q815"], ["wd:Q2492"], ["wd:Q2655"], ["wd:Q475"], ["wd:Q839"], ["wd:Q3291"], ["wd:Q5208"], ["wd:Q5656"], ["wd:Q2551"], ["wd:Q1496"], ["wd:Q5105"], ["wd:Q6026"], ["wd:Q6107"], ["wd:Q6367"], ["wd:Q5558"], ["wd:Q6515"], ["wd:Q3772"], ["wd:Q3121"], ["wd:Q4740"], ["wd:Q5608"], ["wd:Q3340"], ["wd:Q1316"], ["wd:Q6473"], ["wd:Q2538"], ["wd:Q3622"], ["wd:Q1241"], ["wd:Q1681"], ["wd:Q5807"], ["wd:Q6419"], ["wd:Q5028"], ["wd:Q3300"], ["wd:Q1421"], ["wd:Q4547"], ["wd:Q3090"], ["wd:Q3794"], ["wd:Q1340"], ["wd:Q590"], ["wd:Q855"], ["wd:Q1235"], ["wd:Q1259"], ["wd:Q2632"], ["wd:Q5024"], ["wd:Q2573"], ["wd:Q529"], ["wd:Q5581"], ["wd:Q6682"], ["wd:Q6519"], ["wd:Q3095"], ["wd:Q1001"], ["wd:Q4332"], ["wd:Q3610"], ["wd:Q600"], ["wd:Q1242"], ["wd:Q1937"], ["wd:Q2680"], ["wd:Q7071"], ["wd:Q1732"], ["wd:Q4737"], ["wd:Q1514"], ["wd:Q1411"], ["wd:Q1639"], ["wd:Q7011"], ["wd:Q6694"], ["wd:Q2709"], ["wd:Q1830"], ["wd:Q1260"], ["wd:Q4145"], ["wd:Q6332"], ["wd:Q407"], ["wd:Q3722"], ["wd:Q3993"], ["wd:Q4631"], ["wd:Q6391"], ["wd:Q3603"], ["wd:Q1654"], ["wd:Q498"], ["wd:Q4281"], ["wd:Q6379"], ["wd:Q5264"], ["wd:Q1228"], ["wd:Q5172"], ["wd:Q2291"], ["wd:Q5383"], ["wd:Q4288"], ["wd:Q5361"], ["wd:Q5348"], ["wd:Q5356"], ["wd:Q517"], ["wd:Q379"], ["wd:Q5664"], ["wd:Q2172"], ["wd:Q444"], ["wd:Q4896"], ["wd:Q4993"], ["wd:Q3996"], ["wd:Q5738"], ["wd:Q4835"], ["wd:Q1766"], ["wd:Q5676"], ["wd:Q1793"], ["wd:Q4189"], ["wd:Q5198"], ["wd:Q4586"], ["wd:Q5258"], ["wd:Q5236"], ["wd:Q5819"], ["wd:Q1381"], ["wd:Q335"], ["wd:Q5795"], ["wd:Q5998"], ["wd:Q6078"], ["wd:Q6294"], ["wd:Q2530"], ["wd:Q5969"], ["wd:Q5816"], ["wd:Q535"], ["wd:Q1230"], ["wd:Q6240"], ["wd:Q3253"], ["wd:Q6395"], ["wd:Q4922"], ["wd:Q5447"], ["wd:Q4590"], ["wd:Q5679"], ["wd:Q2570"], ["wd:Q4752"], ["wd:Q4738"], ["wd:Q5659"], ["wd:Q6260"], ["wd:Q1750"], ["wd:Q1868"], ["wd:Q559"], ["wd:Q1464"], ["wd:Q5950"], ["wd:Q3099"], ["wd:Q7060"], ["wd:Q4487"], ["wd:Q2643"], ["wd:Q997"], ["wd:Q2072"], ["wd:Q2543"], ["wd:Q5070"], ["wd:Q1786"], ["wd:Q1051"], ["wd:Q1488"], ["wd:Q2831"], ["wd:Q6281"], ["wd:Q1945"], ["wd:Q4247"], ["wd:Q1689"], ["wd:Q2998"], ["wd:Q1652"], ["wd:Q579"], ["wd:Q4323"], ["wd:Q4273"], ["wd:Q6882"], ["wd:Q3374"], ["wd:Q4488"], ["wd:Q4235"], ["wd:Q5822"], ["wd:Q4774"], ["wd:Q2754"], ["wd:Q4443"], ["wd:Q4805"], ["wd:Q5404"], ["wd:Q1638"], ["wd:Q5000"], ["wd:Q3288"], ["wd:Q4381"], ["wd:Q2327"], ["wd:Q3197"], ["wd:Q352"], ["wd:Q2153"], ["wd:Q1253"], ["wd:Q4510"], ["wd:Q3271"], ["wd:Q2307"], ["wd:Q5803"], ["wd:Q4715"], ["wd:Q3165"], ["wd:Q5254"], ["wd:Q930"], ["wd:Q1929"], ["wd:Q6357"], ["wd:Q5604"], ["wd:Q5007"], ["wd:Q4318"], ["wd:Q1940"], ["wd:Q1615"], ["wd:Q5152"], ["wd:Q5617"], ["wd:Q3195"], ["wd:Q1067"], ["wd:Q1324"], ["wd:Q5346"], ["wd:Q5349"], ["wd:Q5587"], ["wd:Q320"], ["wd:Q4465"], ["wd:Q1585"], ["wd:Q2494"], ["wd:Q636"], ["wd:Q1788"], ["wd:Q3137"], ["wd:Q3773"], ["wd:Q5649"], ["wd:Q2516"], ["wd:Q1784"], ["wd:Q1778"], ["wd:Q4070"], ["wd:Q6310"], ["wd:Q1430"], ["wd:Q331"], ["wd:Q755"], ["wd:Q4452"], ["wd:Q1787"], ["wd:Q1048"], ["wd:Q4517"], ["wd:Q5391"], ["wd:Q5630"], ["wd:Q4028"], ["wd:Q1925"], ["wd:Q1631"], ["wd:Q1798"], ["wd:Q2542"], ["wd:Q4414"], ["wd:Q5829"], ["wd:Q1511"], ["wd:Q6386"], ["wd:Q5347"], ["wd:Q5878"], ["wd:Q4573"], ["wd:Q5360"], ["wd:Q1634"], ["wd:Q23"], ["wd:Q1331"], ["wd:Q6105"], ["wd:Q1419"], ["wd:Q502"], ["wd:Q301"], ["wd:Q3362"], ["wd:Q1240"], ["wd:Q5621"], ["wd:Q926"], ["wd:Q4616"], ["wd:Q4883"], ["wd:Q845"], ["wd:Q5364"], ["wd:Q4119"], ["wd:Q1791"], ["wd:Q1500"], ["wd:Q4212"], ["wd:Q1747"], ["wd:Q5269"], ["wd:Q3867"], ["wd:Q1275"], ["wd:Q3677"], ["wd:Q5651"], ["wd:Q6733"], ["wd:Q4285"], ["wd:Q1705"], ["wd:Q3275"], ["wd:Q6324"], ["wd:Q1398"], ["wd:Q254"], ["wd:Q7013"], ["wd:Q1702"], ["wd:Q1604"], ["wd:Q1589"], ["wd:Q5571"], ["wd:Q1327"], ["wd:Q6353"], ["wd:Q632"], ["wd:Q5442"], ["wd:Q6021"], ["wd:Q6711"], ["wd:Q2602"], ["wd:Q1440"], ["wd:Q4270"], ["wd:Q742"], ["wd:Q4833"], ["wd:Q1544"], ["wd:Q1618"], ["wd:Q1716"], ["wd:Q3378"], ["wd:Q1742"], ["wd:Q2757"], ["wd:Q3036"], ["wd:Q1924"], ["wd:Q5197"], ["wd:Q1192"], ["wd:Q2594"], ["wd:Q368"], ["wd:Q1768"], ["wd:Q5811"], ["wd:Q186"], ["wd:Q4989"], ["wd:Q984"], ["wd:Q3355"], ["wd:Q1885"], ["wd:Q563"], ["wd:Q1738"], ["wd:Q2750"], ["wd:Q1124"], ["wd:Q4612"], ["wd:Q4109"], ["wd:Q1668"], ["wd:Q1417"], ["wd:Q1927"], ["wd:Q4344"], ["wd:Q493"], ["wd:Q1434"], ["wd:Q4350"], ["wd:Q4518"], ["wd:Q4866"], ["wd:Q6086"], ["wd:Q449"], ["wd:Q4931"], ["wd:Q4985"], ["wd:Q5396"], ["wd:Q1935"], ["wd:Q1912"], ["wd:Q2022"], ["wd:Q2566"], ["wd:Q5593"], ["wd:Q3188"], ["wd:Q4732"], ["wd:Q1409"], ["wd:Q1835"], ["wd:Q2607"], ["wd:Q1646"], ["wd:Q2147"], ["wd:Q5793"], ["wd:Q2518"], ["wd:Q2006"], ["wd:Q1023"], ["wd:Q1413"], ["wd:Q1955"], ["wd:Q4232"], ["wd:Q1298"], ["wd:Q2097"], ["wd:Q6304"], ["wd:Q1470"], ["wd:Q1909"], ["wd:Q1178"], ["wd:Q5362"], ["wd:Q1453"], ["wd:Q4673"], ["wd:Q5280"], ["wd:Q2042"], ["wd:Q6527"], ["wd:Q3371"], ["wd:Q5350"], ["wd:Q576"], ["wd:Q1290"], ["wd:Q2563"], ["wd:Q4700"], ["wd:Q4807"], ["wd:Q2569"], ["wd:Q5354"], ["wd:Q5912"], ["wd:Q3166"], ["wd:Q5749"], ["wd:Q857"], ["wd:Q306"], ["wd:Q5921"], ["wd:Q1526"], ["wd:Q6538"], ["wd:Q3356"], ["wd:Q6348"], ["wd:Q1758"], ["wd:Q2972"], ["wd:Q6338"], ["wd:Q2259"], ["wd:Q651"], ["wd:Q1913"], ["wd:Q937"], ["wd:Q1225"], ["wd:Q1407"], ["wd:Q1339"], ["wd:Q640"], ["wd:Q4298"], ["wd:Q4636"], ["wd:Q5220"], ["wd:Q849"], ["wd:Q1271"], ["wd:Q5598"], ["wd:Q4881"], ["wd:Q4864"], ["wd:Q5479"], ["wd:Q4457"], ["wd:Q4538"], ["wd:Q4237"], ["wd:Q4271"], ["wd:Q5015"], ["wd:Q687"], ["wd:Q1217"], ["wd:Q1921"], ["wd:Q4489"], ["wd:Q1674"], ["wd:Q1683"], ["wd:Q3373"], ["wd:Q5599"], ["wd:Q3816"], ["wd:Q3350"], ["wd:Q4724"], ["wd:Q1424"], ["wd:Q5031"], ["wd:Q5060"], ["wd:Q5432"], ["wd:Q400"], ["wd:Q1319"], ["wd:Q3835"], ["wd:Q1264"], ["wd:Q5977"], ["wd:Q6370"], ["wd:Q557"], ["wd:Q5076"], ["wd:Q206"], ["wd:Q6714"], ["wd:Q2039"], ["wd:Q3345"], ["wd:Q1918"], ["wd:Q4289"], ["wd:Q5589"], ["wd:Q1056"], ["wd:Q747"], ["wd:Q3990"], ["wd:Q4783"], ["wd:Q1322"], ["wd:Q4153"], ["wd:Q5650"], ["wd:Q1805"], ["wd:Q6312"], ["wd:Q4757"], ["wd:Q5591"], ["wd:Q1993"], ["wd:Q3234"], ["wd:Q2567"], ["wd:Q5371"], ["wd:Q3647"], ["wd:Q5582"], ["wd:Q4604"], ["wd:Q4813"], ["wd:Q326"], ["wd:Q1803"], ["wd:Q3911"], ["wd:Q5626"], ["wd:Q1926"], ["wd:Q1145"], ["wd:Q4473"], ["wd:Q603"], ["wd:Q6003"], ["wd:Q6215"], ["wd:Q1894"], ["wd:Q2628"], ["wd:Q6184"], ["wd:Q633"], ["wd:Q5409"], ["wd:Q5821"], ["wd:Q185"], ["wd:Q765"], ["wd:Q1916"], ["wd:Q2105"], ["wd:Q4349"], ["wd:Q5380"], ["wd:Q4837"], ["wd:Q3250"], ["wd:Q5117"], ["wd:Q5201"], ["wd:Q5600"], ["wd:Q6432"], ["wd:Q1203"]], "gold": [["wd:Q105946422"], ["wd:Q69997240"], ["wd:Q120053021"], ["wd:Q20475006"], ["wd:Q113071363"]]}
{"question": "What did human found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?entity WHERE {\",\n      \"?entity wdt:P112 wd:Q5.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?entity WHERE { ?entity wdt:P112 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q105946422"], ["wd:Q69997240"], ["wd:Q120053021"], ["wd:Q20475006"], ["wd:Q113071363"]], "gold": [["wd:Q105946422"], ["wd:Q69997240"], ["wd:Q120053021"], ["wd:Q20475006"], ["wd:Q113071363"]]}
{"question": "What did human found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4808 is founded by\nkg:9741 is human", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:4808 ?foundedBy.\",\n            \"?foundedBy kg:9741 ?human.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 ?foundedBy. ?foundedBy wd:Q5 ?human. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  wd:Q10632 wdt:P31 wd:Q5741089.\",\n    \"  wd:Q10632 wdt:P106 ?occupation.\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P106 ?occupation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { wd:Q10632 wdt:P31 wd:Q5741089. wd:Q10632 wdt:P106 ?occupation. ?item wdt:P31 wd:Q11424. ?item wdt:P106 ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q853 wdt:P1040 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0149 is Andrei Tarkovsky\nkg:9165 is film editor", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:0149 kg:9165 ?resource.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q281988"]]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1062947 wdt:P625 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1062947 wdt:P625 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"wd:Q1042294 wdt:P155 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1042294 wdt:P155 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q721"]], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1847 is follows\nkg:5163 is Life, the Universe and Everything\nkg:4214 is So Long, and Thanks for All the Fish", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:1847 kg:5163.\",\n            \"FILTER NOT EXISTS { ?resource kg:1847 kg:4214. }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P155 wd:Q721. FILTER NOT EXISTS { ?resource wdt:P155 wd:Q1042294. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q1042294"]], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1067294 wdt:P530 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1067294 wdt:P530 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q168 is pi\nwdt:P155 is follows\nwd:Q131593 is san", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q168 wdt:P155 ?sequel.\",\n    \"  ?sequel wdt:P155 wd:Q131593.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?sequel WHERE { wd:Q168 wdt:P155 ?sequel. ?sequel wdt:P155 wd:Q131593. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2378 is pi\nkg:6156 is follows\nkg:6999 is san", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:2378 kg:6156 ?resource .\",\n            \"?resource kg:6999 ?san .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q168 wdt:P155 ?resource . ?resource wd:Q131593 ?san . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q134267 wdt:P25 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q134267 wdt:P25 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q260 wdt:P40 ?child.\",\n    \"  ?child wdt:P40 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?child. ?child wdt:P40 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9374 is child\nkg:2975 is has subsidiary\nkg:9894 is Jean-François Champollion", "response": "{\n    \"query\": [\n        \"SELECT ?parent\",\n        \"WHERE {\",\n            \"kg:9894 kg:9374 ?child.\",\n            \"?child kg:9374 ?parent.\"\n        ]\n    }\n ", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?child. ?child wdt:P40 ?parent. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 wd:Q34658.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P179 wd:Q34658. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q836821"], ["wd:Q12858529"], ["wd:Q5123647"], ["wd:Q3470527"], ["wd:Q513589"], ["wd:Q1768713"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P31 ?type.\",\n    \"  ?work wdt:P50 ?author.\",\n    \"  FILTER(?author = wd:Q42)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P31 ?type. ?work wdt:P50 ?author. FILTER(?author = wd:Q42) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q20793895"], ["wd:Q187655"], ["wd:Q20898239"], ["wd:Q468135"], ["wd:Q25169"], ["wd:Q116294401"], ["wd:Q126718323"], ["wd:Q126720025"], ["wd:Q122036585"], ["wd:Q280418"], ["wd:Q121986512"], ["wd:Q111263076"], ["wd:Q20736364"], ["wd:Q285194"], ["wd:Q117187377"], ["wd:Q7758404"], ["wd:Q5301192"], ["wd:Q121951803"], ["wd:Q23045921"], ["wd:Q1198969"], ["wd:Q902712"], ["wd:Q23663697"], ["wd:Q3107329"], ["wd:Q111292696"], ["wd:Q1068999"], ["wd:Q121972589"], ["wd:Q44272786"], ["wd:Q121971046"], ["wd:Q721"], ["wd:Q673644"], ["wd:Q60488168"], ["wd:Q121986523"], ["wd:Q122024403"], ["wd:Q117279887"], ["wd:Q60412079"], ["wd:Q7739857"], ["wd:Q122122845"], ["wd:Q7771858"], ["wd:Q1199348"], ["wd:Q1065955"], ["wd:Q578895"], ["wd:Q44272937"], ["wd:Q55109472"], ["wd:Q117280941"], ["wd:Q121946148"], ["wd:Q121984998"], ["wd:Q121946147"], ["wd:Q875382"], ["wd:Q121985076"], ["wd:Q1042294"]], "gold": [["wd:Q836821"], ["wd:Q12858529"], ["wd:Q5123647"], ["wd:Q3470527"], ["wd:Q513589"], ["wd:Q1768713"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9298 is Douglas Adams\nkg:9846 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:9298 kg:9846 ?resource .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q42 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q836821"], ["wd:Q12858529"], ["wd:Q5123647"], ["wd:Q3470527"], ["wd:Q513589"], ["wd:Q1768713"]]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q132468 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P17 wd:Q40.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q132468 wdt:P108 ?employer. ?employer wdt:P17 wd:Q40. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q79070 wdt:P108 ?employer.\",\n    \"  FILTER(?employer = wd:Q40)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q79070 wdt:P108 ?employer. FILTER(?employer = wd:Q40) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q40"]], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3977 is employer\nkg:4018 is Austria\nkg:2612 is Max Margules", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:3977 kg:4018 .\",\n            \"?resource rdfs:label \\\"Max Margules\\\"@en .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q40 . ?resource rdfs:label \"Max Margules\"@en . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q124697 wdt:P50 ?author.\",\n    \"  ?author rdfs:label \\\"J. R. R. Tolkien\\\"@en.\",\n    \"  wd:Q124697 wdt:P31 wd:Q188643.\",\n    \"  BIND(wd:Q124697 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q124697 wdt:P50 ?author. ?author rdfs:label \"J. R. R. Tolkien\"@en. wd:Q124697 wdt:P31 wd:Q188643. BIND(wd:Q124697 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q80379 wdt:P58 ?resource.\",\n      \"?resource wdt:P106 wd:Q33999.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource. ?resource wdt:P106 wd:Q33999. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1529 is The Hobbit: An Unexpected Journey\nkg:7293 is J. R. R. Tolkien\nkg:9243 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:screenwriter kg:1529.\",\n            \"?resource kg:author kg:7293.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:screenwriter wd:Q80379. ?resource kg:author wd:Q892. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1549206 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1549206 wdt:P178 wd:Q10622.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P178 wd:Q10622.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1549206 wdt:P31 wd:Q11424. wd:Q1549206 wdt:P178 wd:Q10622. ?film wdt:P31 wd:Q11424. ?film wdt:P178 wd:Q10622. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q72276 wdt:P1431 ?resource.\",\n      \"?resource wdt:P35 ?person.\",\n      \"FILTER(?person = wd:Q2680)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q72276 wdt:P1431 ?resource. ?resource wdt:P35 ?person. FILTER(?person = wd:Q2680) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0403 is executive producer\nkg:8042 is A Good Day to Die Hard\nkg:5286 is Bruce Willis", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:0403 kg:8042.\",\n            \"?resource kg:0403 kg:5286.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q72276. ?resource wdt:P1431 wd:Q2680. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q107623485 wdt:P179 ?costumeDesigner.\",\n    \"  FILTER NOT EXISTS { ?costumeDesigner wdt:P106 wd:Q3396. }\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q107623485 wdt:P179 ?costumeDesigner. FILTER NOT EXISTS { ?costumeDesigner wdt:P106 wd:Q3396. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P2515 wd:Q2733930.\",\n      \"?costumeDesigner wdt:P106 wd:Q36834.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P2515 wd:Q2733930. ?costumeDesigner wdt:P106 wd:Q36834. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3119 is occupation\nkg:4634 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:7537 is composer\nkg:5566 is costume designer", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:3119 kg:7537 .\",\n            \"?resource kg:4634 kg:5566 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q36834 . ?resource wd:Q2733930 wdt:P2515 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q152408 wdt:P367 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q33988.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?cinematographer WHERE { wd:Q152408 wdt:P367 ?cinematographer. ?cinematographer wdt:P106 wd:Q33988. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q158069 wdt:P344 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q69423232.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q158069 wdt:P344 ?cinematographer. ?cinematographer wdt:P106 wd:Q69423232. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q103013"], ["wd:Q110464"]], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6736 is occupation\nkg:6247 is Olympia\nkg:2665 is film screenwriter\nkg:5056 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer WHERE {\",\n            \"?cinematographer kg:6736 kg:5056 .\",\n            \"?cinematographer kg:6247 kg:6247 .\",\n            \"?cinematographer kg:6736 kg:2665 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P106 wdt:P344 . ?cinematographer wd:Q158069 wd:Q158069 . ?cinematographer wdt:P106 wd:Q69423232 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q76941 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P108 ?employer.\",\n    \"  ?employer rdfs:label \\\"Free German Youth\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76941 wdt:P26 ?spouse. ?spouse wdt:P108 ?employer. ?employer rdfs:label \"Free German Youth\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q2607 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P108 wd:Q76845.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q2607 wdt:P26 ?spouse. ?spouse wdt:P108 wd:Q76845. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q76893"]], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4689 is employer\nkg:1391 is Erich Honecker\nkg:1230 is spouse\nkg:5225 is Free German Youth", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:4689 kg:5225 .\",\n            \"kg:1391 kg:1230 ?resource .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q76845 . wd:Q2607 wdt:P26 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?composer WHERE {\",\n        \"  wd:Q206418 p:P375 ?statement.\",\n        \"  ?statement ps:P375 ?composer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q206418 p:P375 ?statement. ?statement ps:P375 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"wd:Q208824 wdt:P162 ?producer.\",\n      \"?producer wdt:P106 wd:Q36834.\",\n      \"?producer wdt:P272 ?productionCompany.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?producer. ?producer wdt:P106 wd:Q36834. ?producer wdt:P272 ?productionCompany. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8795 is 1999\nkg:9507 is composer\nkg:7933 is producer\nkg:3877 is occupation\nkg:2254 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:8795 kg:7933 ?resource .\",\n            \"?resource kg:3877 kg:9507 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q208824 wdt:P162 ?resource . ?resource wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q7542"]], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P31 wd:Q33967.\",\n    \"  ?composer wdt:P800 wd:Q5426444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q33967. ?composer wdt:P800 wd:Q5426444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n      \"?screenwriter wdt:P106 wd:Q69423232.\",\n      \"?screenwriter wdt:P86 wd:Q577126.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?screenwriter WHERE { ?screenwriter wdt:P106 wd:Q69423232. ?screenwriter wdt:P86 wd:Q577126. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is occupation\nkg:8297 is film screenwriter\nkg:0135 is composer\nkg:4092 is Al Compás de tu Mentira", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7262 kg:0135 .\",\n            \"?resource kg:8297 kg:8297 .\",\n            \"kg:4092 kg:0135 ?resource .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wdt:P86 . ?resource wd:Q69423232 wd:Q69423232 . wd:Q577126 wdt:P86 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q1064287 wdt:P31 wd:Q574109.\",\n    \"  wd:Q1064287 wdt:P106 wd:Q33964.\",\n    \"  ?composer wdt:P106 wd:Q33964.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q1064287 wdt:P31 wd:Q574109. wd:Q1064287 wdt:P106 wd:Q33964. ?composer wdt:P106 wd:Q33964. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q76582 .\",\n      \"?composer wdt:P106 wd:Q222344 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q76582 . ?composer wdt:P106 wd:Q222344 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0600 is occupation\nkg:2423 is The Chess Players\nkg:9247 is composer\nkg:1572 is cinematographer", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0600 kg:9247 .\",\n            \"?resource kg:0600 kg:1572 .\",\n            \"?resource kg:0600 kg:2423 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wdt:P86 . ?resource wdt:P106 wd:Q222344 . ?resource wdt:P106 wd:Q76582 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1524687 wdt:P364 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1524687 wdt:P364 ?sequel. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"wd:Q4348691 wdt:P155 ?sequel.\",\n      \"?sequel wdt:P750 wd:Q2283.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?sequel WHERE { wd:Q4348691 wdt:P155 ?sequel. ?sequel wdt:P750 wd:Q2283. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5718 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:7041 is distributed by\nkg:2249 is Microsoft\nkg:6198 is follows", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:5718 kg:7041 ?resource .\",\n            \"?resource kg:6198 kg:5718 .\",\n            \"?resource kg:7041 kg:2249 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q4348691 wdt:P750 ?resource . ?resource wdt:P155 wd:Q4348691 . ?resource wdt:P750 wd:Q2283 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1234567 wdt:P364 ?sequel.\",\n    \"  ?sequel wdt:P1080 wd:Q9345678.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1234567 wdt:P364 ?sequel. ?sequel wdt:P1080 wd:Q9345678. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P155 wd:Q2085.\",\n      \"?sequel wdt:P161 wd:Q967797.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q2085. ?sequel wdt:P161 wd:Q967797. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3519 is James Parks\nkg:0055 is cast member\nkg:3268 is Twin Peaks\nkg:0306 is follows", "response": "{\n    \"query\": [\n        \"SELECT ?sequel\",\n        \"WHERE {\",\n            \"?sequel kg:0306 kg:3268 .\",\n            \"?sequel kg:0055 kg:3519 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q2085 . ?sequel wdt:P161 wd:Q967797 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q2065489 wdt:P173 ?person.\",\n    \"  ?person wdt:P40 wd:Q10662.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q2065489 wdt:P173 ?person. ?person wdt:P40 wd:Q10662. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"wd:Q81950264 wdt:P112 ?founder.\",\n      \"?founder wdt:P40 wd:Q15070044.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q81950264 wdt:P112 ?founder. ?founder wdt:P40 wd:Q15070044. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q13133"], ["wd:Q76"]], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9700 is Higher Ground Productions\nkg:1385 is has subsidiary\nkg:9585 is child\nkg:5784 is Malia Obama\nkg:8580 is founded by", "response": "{\n    \"query\": [\n        \"SELECT ?founder\",\n        \"WHERE {\",\n            \"?founder kg:1385 kg:9700.\",\n            \"?founder kg:9585 kg:5784.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P355 wd:Q81950264. ?founder wdt:P40 wd:Q15070044. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q102893 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P1038 wd:Q564636. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q102893 wdt:P3373 ?sibling. ?sibling wdt:P1038 wd:Q564636. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"wd:Q352 wdt:P3373 ?sibling.\",\n      \"?sibling wdt:P108 wd:Q1022419.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q352 wdt:P3373 ?sibling. ?sibling wdt:P108 wd:Q1022419. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q84328"]], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9612 is employer\nkg:5089 is sibling\nkg:4923 is Uniqa Insurance Group\nkg:1490 is Adolf Hitler", "response": "{\n    \"query\": [\n        \"SELECT ?sibling WHERE {\",\n            \"?sibling kg:5089 kg:1490 .\",\n            \"?sibling kg:9612 kg:4923 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q352 . ?sibling wdt:P108 wd:Q1022419 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q108647 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P2539 wd:Q28624446.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q108647 wdt:P108 ?employer. ?employer wdt:P2539 wd:Q28624446. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?distributor WHERE {\",\n      \"wd:Q6078 wdt:P108 ?employer.\",\n      \"?employer wdt:P750 wd:Q42310881.\",\n      \"?distributor wdt:P750 wd:Q42310881.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor WHERE { wd:Q6078 wdt:P108 ?employer. ?employer wdt:P750 wd:Q42310881. ?distributor wdt:P750 wd:Q42310881. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7511 is employer\nkg:0138 is Dr. Dre\nkg:5087 is distributed by\nkg:0439 is Animal Crossing: Pocket Camp", "response": "{\n    \"query\": [\n        \"SELECT ?distributor\",\n        \"WHERE {\",\n            \"kg:0138 kg:7511 ?employer.\",\n            \"?employer kg:5087 kg:0439.\",\n            \"kg:0439 kg:5087 ?distributor.\"\n        ]\n    }\n ", "normal_query": "SELECT ?distributor WHERE { wd:Q6078 wdt:P108 ?employer. ?employer wdt:P750 wd:Q42310881. wd:Q42310881 wdt:P750 ?distributor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q107628 p:P108 ?statement.\",\n    \"  ?statement ps:P108 wd:Q34596.\",\n    \"  ?statement prov:wasDerivedFrom ?source.\",\n    \"  ?employer wdt:P108 wd:Q34596.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?employer WHERE { wd:Q107628 p:P108 ?statement. ?statement ps:P108 wd:Q34596. ?statement prov:wasDerivedFrom ?source. ?employer wdt:P108 wd:Q34596. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q15070044 wdt:P40 ?child.\",\n    \"  ?child wdt:P355 ?parent.\",\n    \"  ?parent wdt:P108 wd:Q103941992.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q15070044 wdt:P40 ?child. ?child wdt:P355 ?parent. ?parent wdt:P108 wd:Q103941992. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4573 is employer\nkg:9143 is Ben LaBolt\nkg:8971 is has subsidiary\nkg:6383 is child\nkg:3910 is Malia Obama", "response": "{\n    \"query\": [\n        \"SELECT ?employer\",\n        \"WHERE {\",\n            \"?employer kg:4573 kg:9143 .\",\n            \"?employer kg:6383 kg:3910 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 wd:Q103941992 . ?employer wdt:P40 wd:Q15070044 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q76"]]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q106724985 wdt:P3373 ?spouse.\",\n    \"  ?spouse wdt:P25 ?sibling.\",\n    \"  ?sibling wdt:P26 ?pierreVanDormael.\",\n    \"  wd:Q106724985 wdt:P106 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q106724985 wdt:P3373 ?spouse. ?spouse wdt:P25 ?sibling. ?sibling wdt:P26 ?pierreVanDormael. wd:Q106724985 wdt:P106 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P26 ?spouse.\",\n      \"wd:Q730300 wdt:P3373 ?spouse.\"\n    ]\n  }\n ", "normal_query": "SELECT ?spouse WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P26 ?spouse. wd:Q730300 wdt:P3373 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5911 is spouse\nkg:6311 is sibling\nkg:3868 is costume designer\nkg:9413 is occupation\nkg:2251 is Pierre Van Dormael", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:5911 kg:2251 .\",\n            \"?resource kg:6311 ?sibling .\",\n            \"?costumeDesigner kg:3868 ?occupation .\",\n            \"?costumeDesigner kg:9413 ?resource .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q730300 . ?resource wdt:P3373 ?sibling . ?costumeDesigner wd:Q1323191 ?occupation . ?costumeDesigner wdt:P106 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10679248 wdt:P355 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q10679248.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10679248 wdt:P355 ?spouse. ?spouse wdt:P31 wd:Q10679248. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 wd:Q1323191.\",\n      \"?spouse wdt:P112 wd:Q1102919.\"\n    ]\n  }\n ", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q1323191. ?spouse wdt:P112 wd:Q1102919. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0326 is ClubJenna\nkg:0468 is spouse\nkg:5654 is costume designer\nkg:8372 is founded by\nkg:0389 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:0468 kg:0326 .\",\n            \"?resource kg:5654 kg:0389 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q1102919 . ?resource wd:Q1323191 wdt:P106 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10629 wdt:P57 wd:Q348.\",\n    \"  wd:Q10629 wdt:P161 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10629 wdt:P57 wd:Q348. wd:Q10629 wdt:P161 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"wd:Q2643 wdt:P57 ?film .\",\n      \"wd:Q2643 wdt:P58 ?film .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q2643 wdt:P57 ?film . wd:Q2643 wdt:P58 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6663 is George Harrison\nkg:6370 is director\nkg:8835 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"kg:6663 kg:6370 ?resource .\",\n            \"kg:6663 kg:8835 ?resource .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2643 wdt:P57 ?resource . wd:Q2643 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q571.\",\n    \"  ?item wdt:P629 wd:Q480444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q571. ?item wdt:P629 wd:Q480444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q33540390"], ["wd:Q12317972"], ["wd:Q20729292"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P58 wd:Q24907.\",\n      \"?resource wdt:P1040 wd:Q24907.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907. ?resource wdt:P1040 wd:Q24907. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2050 is screenwriter\nkg:3395 is Anker Sørensen\nkg:9127 is film editor", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:2050/kg:3395 .\",\n            \"?resource kg:9127/kg:3395 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58/wd:Q24907 . ?resource wdt:P1040/wd:Q24907 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q107246983 wdt:P25 wd:Q107246983.\",\n    \"  wd:Q107246983 wdt:P106 wd:Q107246983.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q107246983.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q107246983 wdt:P25 wd:Q107246983. wd:Q107246983 wdt:P106 wd:Q107246983. ?costumeDesigner wdt:P106 wd:Q107246983. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n      \"wd:Q4990261 wdt:P40 ?child.\",\n      \"?child wdt:P106 wd:Q1323191.\",\n      \"?child wdt:P27 wd:Q34.\",\n      \"?parent wdt:P40 ?child.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q4990261 wdt:P40 ?child. ?child wdt:P106 wd:Q1323191. ?child wdt:P27 wd:Q34. ?parent wdt:P40 ?child. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8006 is Nadja Weiss\nkg:4923 is child\nkg:0967 is has subsidiary\nkg:5528 is costume designer\nkg:0457 is country of citizenship\nkg:4304 is Sweden\nkg:1782 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0967 kg:8006 .\",\n      \"?resource kg:5528 kg:8006 .\",\n      \"?resource kg:4304 kg:4923 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P355 wd:Q4990261 . ?resource wd:Q1323191 wd:Q4990261 . ?resource wd:Q34 wdt:P40 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10726485 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q339685.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10726485 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q339685. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q3514303 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P106 wd:Q222344.\",\n      \"?spouse wdt:P27 wd:Q17.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344. ?spouse wdt:P27 wd:Q17. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q271247"]], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1186 is Japan\nkg:7045 is spouse\nkg:1905 is cinematographer\nkg:3399 is country of citizenship\nkg:8953 is occupation\nkg:3305 is Takenori Sentō", "response": "{\n    \"query\": [\n        \"SELECT ?spouse\",\n        \"WHERE {\",\n            \"?spouse kg:7045 kg:3305 .\",\n            \"?spouse kg:1905 ?occupation .\",\n            \"?spouse kg:8953 ?occupation .\",\n            \"?spouse kg:3399 kg:1186 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q3514303 . ?spouse wd:Q222344 ?occupation . ?spouse wdt:P106 ?occupation . ?spouse wdt:P27 wd:Q17 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q142 wdt:P31 wd:Q6256.\",\n    \"  wd:Q142 wdt:P108 ?director.\",\n    \"  ?director wdt:P108 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q142 wdt:P31 wd:Q6256. wd:Q142 wdt:P108 ?director. ?director wdt:P108 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q1065"]]}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q16 is Canada\nwd:Q2526255 is film director\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"?director wdt:P108 ?employer.\",\n      \"?director wdt:P106 wd:Q2526255.\",\n      \"wd:Q16 wdt:P112 ?founder.\",\n      \"FILTER(?founder = ?employer)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?director wdt:P108 ?employer. ?director wdt:P106 wd:Q2526255. wd:Q16 wdt:P112 ?founder. FILTER(?founder = ?employer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q1065"]]}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9422 is employer\nkg:6057 is Canada\nkg:1505 is film director\nkg:6946 is founded by\nkg:3508 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?employer\",\n        \"WHERE {\",\n            \"?employer kg:9422 ?director .\",\n            \"?director kg:1505 [] .\",\n            \"?director kg:3508 kg:6057 .\",\n            \"kg:6057 kg:6946 ?founder .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 ?director . ?director wd:Q2526255 [] . ?director wdt:P106 wd:Q16 . wd:Q16 wdt:P112 ?founder . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q1065"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P170 wd:Q2469.\",\n    \"  ?item wdt:P57 wd:Q2469.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P170 wd:Q2469. ?item wdt:P57 wd:Q2469. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1744 wdt:P162 ?resource .\",\n    \"  wd:Q1744 wdt:P58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1744 wdt:P162 ?resource . wd:Q1744 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7859 is producer\nkg:2187 is Madonna\nkg:4516 is production company\nkg:5724 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7859 kg:2187 .\",\n            \"?resource kg:4516 kg:2187 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162 wd:Q1744 . ?resource wdt:P272 wd:Q1744 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q107263984 wdt:P108 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q107263984 wdt:P108 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q1141467 is Joe's Bed-Stuy Barbershop: We Cut Heads\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P108 ?employer.\",\n      \"?employer wdt:P272 wd:Q1141467.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P108 ?employer. ?employer wdt:P272 wd:Q1141467. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0372 is employer\nkg:0324 is Joe's Bed-Stuy Barbershop: We Cut Heads\nkg:1250 is costume designer\nkg:1706 is occupation\nkg:2873 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?employer\",\n        \"WHERE {\",\n            \"?costumeDesigner kg:1706 kg:1250 .\",\n            \"?costumeDesigner kg:0372 ?employer .\",\n            \"?employer kg:2873 kg:0324 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner wdt:P106 wd:Q1323191 . ?costumeDesigner wdt:P108 ?employer . ?employer wdt:P272 wd:Q1141467 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner ?sibling ?spouse WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q387452.\",\n    \"?costumeDesigner wdt:P3373 ?sibling.\",\n    \"?sibling wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q105966.\",\n    \"?spouse rdfs:label \\\"Nadia Cassini\\\"@en.\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner ?sibling ?spouse WHERE { ?costumeDesigner wdt:P106 wd:Q387452. ?costumeDesigner wdt:P3373 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q105966. ?spouse rdfs:label \"Nadia Cassini\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P3373 ?sibling.\",\n      \"?sibling wdt:P26 wd:Q461354.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P3373 ?sibling. ?sibling wdt:P26 wd:Q461354. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q5993204"]], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4361 is spouse\nkg:4210 is sibling\nkg:8468 is costume designer\nkg:7750 is Nadia Cassini\nkg:0230 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:4361 kg:7750 .\",\n            \"?resource kg:4210 ?sibling .\",\n            \"?sibling kg:8468 ?costumeDesigner .\",\n            \"?costumeDesigner kg:0230 kg:8468 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q461354 . ?resource wdt:P3373 ?sibling . ?sibling wd:Q1323191 ?costumeDesigner . ?costumeDesigner wdt:P106 wd:Q1323191 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q10564278 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P355 wd:Q191067.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?employer WHERE { wd:Q10564278 wdt:P108 ?employer. ?employer wdt:P355 wd:Q191067. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"wd:Q67134 wdt:P108 ?employer.\",\n      \"?employer wdt:P355 ?parentCompany.\",\n      \"?parentCompany wdt:P31 wd:Q4830453.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q67134 wdt:P108 ?employer. ?employer wdt:P355 ?parentCompany. ?parentCompany wdt:P31 wd:Q4830453. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q23317"]], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5028 is employer\nkg:6897 is has subsidiary\nkg:0513 is instance of\nkg:9566 is Christian Abt\nkg:5920 is child\nkg:6833 is business", "response": "{\n    \"query\": [\n        \"SELECT ?parent\",\n        \"WHERE {\",\n            \"?employer kg:0513 kg:6833 .\",\n            \"?employer kg:5028 kg:9566 .\",\n            \"?employer kg:6897 ?parent .\",\n            \"FILTER NOT EXISTS { ?parent kg:5920 ?child }\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?parent WHERE { ?employer wdt:P31 wd:Q4830453 . ?employer wdt:P108 wd:Q67134 . ?employer wdt:P355 ?parent . FILTER NOT EXISTS { ?parent wdt:P40 ?child } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q10592648 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P31 wd:Q7397.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q10592648 wdt:P108 ?employer. ?employer wdt:P31 wd:Q7397. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q1094792 wdt:P108 ?employer.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P750 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer. ?film wdt:P31 wd:Q11424. ?film wdt:P750 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q8073"]], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9229 is Claire Doutriaux\nkg:3252 is employer\nkg:1532 is distributed by\nkg:8324 is film\nkg:8843 is instance of", "response": "{\n    \"query\": [\n        \"SELECT ?employer\",\n        \"WHERE {\",\n            \"kg:9229 kg:3252 ?employer .\",\n            \"?film kg:1532 ?employer .\",\n            \"?film kg:8843 kg:8324 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?film wdt:P750 ?employer . ?film wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q8073"]], "gold": [["wd:Q8073"]]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q134062 wdt:P859 ?producer.\",\n    \"  wd:Q134062 wdt:P750 ?distributor.\",\n    \"  ?producer wdt:P17 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q134062 wdt:P859 ?producer. wd:Q134062 wdt:P750 ?distributor. ?producer wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q1651543 wdt:P272 ?producer.\",\n    \"  wd:Q1651543 wdt:P750 ?distributor.\",\n    \"  OPTIONAL { ?producer wdt:P112 wd:Q34 }\",\n    \"  OPTIONAL { ?distributor wdt:P112 wd:Q34 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q1651543 wdt:P272 ?producer. wd:Q1651543 wdt:P750 ?distributor. OPTIONAL { ?producer wdt:P112 wd:Q34 } OPTIONAL { ?distributor wdt:P112 wd:Q34 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q1543058"]], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4695 is founded by\nkg:7740 is distributed by\nkg:3184 is Sweden\nkg:4730 is The Magic Flute\nkg:4677 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:4695 kg:3184.\",\n            \"?resource kg:7740 kg:4730.\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q34. ?resource wdt:P750 wd:Q1651543. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q10642895 wdt:P31 wd:Q17665.\",\n    \"  wd:Q10642895 wdt:P26 wd:Q10642895.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q3393466.\",\n    \"  ?costumeDesigner wdt:P27 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q10642895 wdt:P31 wd:Q17665. wd:Q10642895 wdt:P26 wd:Q10642895. ?costumeDesigner wdt:P106 wd:Q3393466. ?costumeDesigner wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 wd:Q6200573.\",\n      \"?spouse wdt:P27 wd:Q34.\",\n      \"?spouse wdt:P106 wd:Q1323191.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q6200573. ?spouse wdt:P27 wd:Q34. ?spouse wdt:P106 wd:Q1323191. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q1554690"]], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9973 is spouse\nkg:4042 is country of citizenship\nkg:2591 is costume designer\nkg:8266 is Sweden\nkg:6817 is Mark Sylwan\nkg:0279 is occupation", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:9973 kg:6817 .\",\n            \"?resource kg:4042 kg:8266 .\",\n            \"?resource kg:2591 ?occupation .\",\n            \"FILTER (?occupation = kg:0279)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q6200573 . ?resource wdt:P27 wd:Q34 . ?resource wd:Q1323191 ?occupation . FILTER (?occupation = wdt:P106) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q13246 wdt:P25 ?spouse.\",\n    \"  wd:Q13246 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 ?sibling.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q13246 wdt:P25 ?spouse. wd:Q13246 wdt:P3373 ?sibling. ?spouse wdt:P26 ?sibling. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q3356 wdt:P26 ?spouse.\",\n    \"  wd:Q3356 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q2045778.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q3356 wdt:P26 ?spouse. wd:Q3356 wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q2045778. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q451082"], ["wd:Q2045778", "wd:Q451082"], ["wd:Q3362", "wd:Q451082"], ["wd:Q451082", "wd:Q40252"], ["wd:Q451051", "wd:Q451082"]], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0790 is spouse\nkg:2778 is Antiochus IV Epiphanes\nkg:3961 is sibling\nkg:7882 is Antiochus", "response": "{\n    \"query\": [\n        \"SELECT ?spouse ?sibling WHERE {\",\n        \"  kg:2778 kg:0790 ?spouse .\",\n        \"  kg:2778 kg:3961 ?sibling .\",\n        \"  ?spouse kg:0790 kg:7882 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q3356 wdt:P26 ?spouse . wd:Q3356 wdt:P3373 ?sibling . ?spouse wdt:P26 wd:Q2045778 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q451082"], ["wd:Q2045778", "wd:Q451082"], ["wd:Q3362", "wd:Q451082"], ["wd:Q451082", "wd:Q40252"], ["wd:Q451051", "wd:Q451082"]], "gold": [["wd:Q451082"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q34762 wdt:P1082 ?distributor.\",\n    \"  wd:Q34762 wdt:P179 ?producer.\",\n    \"  ?distributor wdt:P17 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q34762 wdt:P1082 ?distributor. wd:Q34762 wdt:P179 ?producer. ?distributor wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor.\",\n    \"  wd:Q1651543 wdt:P272 ?producer.\",\n    \"  ?producer wdt:P112 wd:Q34.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1651543 wdt:P750 ?distributor. wd:Q1651543 wdt:P272 ?producer. ?producer wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q1543058"]], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3967 is founded by\nkg:6420 is distributed by\nkg:1560 is Sweden\nkg:9298 is The Magic Flute\nkg:7034 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?distributor ?producer\",\n        \"WHERE {\",\n            \"?movie kg:6420 ?distributor .\",\n            \"?movie kg:3967 kg:1560 .\",\n            \"?movie kg:7034 ?producer .\",\n            \"FILTER(?movie = kg:9298)\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?movie wdt:P750 ?distributor . ?movie wdt:P112 wd:Q34 . ?movie wdt:P272 ?producer . FILTER(?movie = wd:Q1651543) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q1543058"]]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q196048 p:P35 wd:Q27464.\",\n    \"  ?founder wdt:P35 wd:Q27464.\",\n    \"  ?founder wdt:P106 wd:Q3393156.\",\n    \"  ?founder wdt:P17 wd:Q55.\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q196048 p:P35 wd:Q27464. ?founder wdt:P35 wd:Q27464. ?founder wdt:P106 wd:Q3393156. ?founder wdt:P17 wd:Q55. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder wdt:P112 wd:Q117892.\",\n      \"?founder wdt:P3373 wd:Q2336212.\",\n      \"?founder wdt:P27 wd:Q29999.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P112 wd:Q117892. ?founder wdt:P3373 wd:Q2336212. ?founder wdt:P27 wd:Q29999. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5121 is Prince Aschwin of Lippe-Biesterfeld\nkg:2036 is sibling\nkg:3061 is country of citizenship\nkg:9737 is World Wide Fund for Nature\nkg:6658 is founded by\nkg:0880 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder kg:6658 kg:9737 .\",\n      \"?founder kg:2036 kg:5121 .\",\n      \"?founder kg:3061 kg:0880 .\"\n    ,\n  \"]\"\n  ]}", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P112 wd:Q117892 . ?founder wdt:P3373 wd:Q2336212 . ?founder wdt:P27 wd:Q29999 . ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q937857.\",\n    \"  ?person wdt:P25 wd:Q42444.\",\n    \"  ?person wdt:P108 wd:Q10444.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q937857. ?person wdt:P25 wd:Q42444. ?person wdt:P108 wd:Q10444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q60414 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q183 .\",\n    \"  ?sibling wdt:P108 wd:Q15789 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q60414 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q183 . ?sibling wdt:P108 wd:Q15789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q44340"]], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5620 is employer\nkg:8212 is Dieter Hoeneß\nkg:3317 is sibling\nkg:4759 is FC Bayern Munich\nkg:0766 is country of citizenship\nkg:5041 is Germany", "response": "{\n    \"query\": [\n        \"SELECT ?sibling\",\n        \"WHERE {\",\n            \"?sibling kg:3317 kg:8212 .\",\n            \"?sibling kg:0766 kg:5041 .\",\n            \"kg:8212 kg:5620 kg:4759 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q60414 . ?sibling wdt:P27 wd:Q183 . wd:Q60414 wdt:P108 wd:Q15789 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q104928 wdt:P356 ?distributor.\",\n    \"  wd:Q104928 wdt:P178 ?producer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q104928 wdt:P356 ?distributor. wd:Q104928 wdt:P178 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q3715556 wdt:P750 ?distributor.\",\n    \"  wd:Q3715556 wdt:P272 ?producer.\",\n    \"  ?distributor wdt:P112 wd:Q882.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q3715556 wdt:P750 ?distributor. wd:Q3715556 wdt:P272 ?producer. ?distributor wdt:P112 wd:Q882. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q219400"]], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3141 is Drums of Love\nkg:0996 is Charlie Chaplin\nkg:7691 is distributed by\nkg:4650 is founded by\nkg:4440 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?distributor ?producer\",\n        \"WHERE {\",\n            \"kg:3141 kg:7691 ?distributor.\",\n            \"?distributor kg:4650 kg:0996.\",\n            \"kg:3141 kg:4440 ?producer.\",\n            \"?producer kg:4650 kg:0996.\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q3715556 wdt:P750 ?distributor. ?distributor wdt:P112 wd:Q882. wd:Q3715556 wdt:P272 ?producer. ?producer wdt:P112 wd:Q882. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q219400"]], "gold": [["wd:Q219400"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1705 wd:Q26349.\",\n    \"  ?item wdt:P86 wd:Q10666.\"\n    ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1705 wd:Q26349. ?item wdt:P86 wd:Q10666. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P58 wd:Q4500.\",\n      \"?work wdt:P162 wd:Q888311.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q4500. ?work wdt:P162 wd:Q888311. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8652 is screenwriter\nkg:3078 is Vince Gilligan\nkg:4870 is producer\nkg:6231 is Bob Weinstein\nkg:3787 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:8652 kg:3078 .\",\n            \"?resource kg:4870 kg:6231 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q4500 . ?resource wdt:P162 wd:Q888311 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P1128 wd:Q304697.\",\n    \"  ?company wdt:P17 wd:Q142.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P1128 wd:Q304697. ?company wdt:P17 wd:Q142. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company wdt:P112 wd:Q1079409.\",\n      \"?company wdt:P31 wd:Q4830453.\",\n      \"wd:Q1079409 wdt:P3373 ?sibling.\",\n      \"?sibling wdt:P27 wd:Q142.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P112 wd:Q1079409. ?company wdt:P31 wd:Q4830453. wd:Q1079409 wdt:P3373 ?sibling. ?sibling wdt:P27 wd:Q142. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6937 is Alphonse-Louis du Plessis de Richelieu\nkg:5212 is France\nkg:8053 is instance of\nkg:4705 is sibling\nkg:0200 is country of citizenship\nkg:1440 is business\nkg:4948 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company kg:4948 kg:6937 .\",\n      \"?company kg:8053 kg:1440 .\",\n      \"kg:6937 kg:4705 ?sibling .\",\n      \"?sibling kg:0200 kg:5212 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P112 wd:Q1079409 . ?company wdt:P31 wd:Q4830453 . wd:Q1079409 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [false]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?writer WHERE {\",\n    \"  wd:Q126470 wdt:P31 wd:Q589644.\",\n    \"  wd:Q126470 wdt:P175 ?producer.\",\n    \"  wd:Q126470 wdt:P175 ?writer.\",\n    \"  ?producer wdt:P31 wd:Q983454.\",\n    \"  ?writer wdt:P31 wd:Q983454.\"\n    ]\n}", "normal_query": "SELECT ?producer ?writer WHERE { wd:Q126470 wdt:P31 wd:Q589644. wd:Q126470 wdt:P175 ?producer. wd:Q126470 wdt:P175 ?writer. ?producer wdt:P31 wd:Q983454. ?writer wdt:P31 wd:Q983454. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q44477 wdt:P58 ?screenwriter.\",\n      \"?screenwriter wdt:P162 ?producer.\",\n      \"?producer wdt:P272 wd:Q320211.\",\n      \"?resource wdt:P58 wd:Q2831.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { wd:Q44477 wdt:P58 ?screenwriter. ?screenwriter wdt:P162 ?producer. ?producer wdt:P272 wd:Q320211. ?resource wdt:P58 wd:Q2831. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3301 is screenwriter\nkg:6258 is Stan Winston\nkg:5176 is producer\nkg:1959 is Michael Jackson\nkg:3712 is Michael Jackson's Ghosts\nkg:9250 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3301 kg:1959 .\",\n      \"?resource kg:5176 kg:6258 .\",\n      \"?resource kg:9250 kg:3712 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q2831 . ?resource wdt:P162 wd:Q320211 . ?resource wdt:P272 wd:Q44477 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P162 wd:Q34807.\",\n    \"  ?film wdt:P582 wd:Q93444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q34807. ?film wdt:P582 wd:Q93444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P1431 wd:Q8877.\",\n      \"?film wdt:P58 wd:Q75079.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1431 wd:Q8877. ?film wdt:P58 wd:Q75079. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q636043"], ["wd:Q241958"]], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7184 is Steven Spielberg\nkg:8361 is executive producer\nkg:6774 is Chris Columbus\nkg:4377 is screenwriter", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:8361 kg:7184 .\",\n            \"?resource kg:4377 kg:6774 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q8877 . ?resource wdt:P58 wd:Q75079 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q636043"], ["wd:Q241958"]], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?distributor wdt:P31 wd:Q28640.\",\n    \"  ?distributor wdt:P17 wd:Q34.\",\n    \"  ?distributor wdt:P195 wd:Q106335.\",\n    \"  ?producer wdt:P31 wd:Q28640.\",\n    \"  ?producer wdt:P17 wd:Q34.\",\n    \"  ?producer wdt:P195 wd:Q106335.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q28640. ?distributor wdt:P17 wd:Q34. ?distributor wdt:P195 wd:Q106335. ?producer wdt:P31 wd:Q28640. ?producer wdt:P17 wd:Q34. ?producer wdt:P195 wd:Q106335. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor.\",\n    \"  wd:Q1651543 wdt:P272 ?producer.\",\n    \"  ?producer wdt:P112 wd:Q34.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1651543 wdt:P750 ?distributor. wd:Q1651543 wdt:P272 ?producer. ?producer wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q1543058"]], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8573 is founded by\nkg:2311 is distributed by\nkg:8167 is Sweden\nkg:9238 is The Magic Flute\nkg:8602 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?distributor ?producer\",\n        \"WHERE {\",\n            \"?distributor kg:2311 kg:9238.\",\n            \"?producer kg:8573 kg:8167.\",\n            \"?producer kg:8602 kg:8167.\"\n        ]\n    }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P750 wd:Q1651543. ?producer wdt:P112 wd:Q34. ?producer wdt:P272 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102346785 wdt:P39 ?parent.\",\n    \"  wd:Q102346785 wdt:P26 ?spouse.\",\n    \"  wd:Q102346785 wdt:P3373 ?sibling.\",\n    \"  ?resource wdt:P26 wd:Q102346785.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q102346785 wdt:P39 ?parent. wd:Q102346785 wdt:P26 ?spouse. wd:Q102346785 wdt:P3373 ?sibling. ?resource wdt:P26 wd:Q102346785. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"  wd:Q443473 wdt:P40 ?child.\",\n    \"  ?child wdt:P26 ?spouse.\",\n    \"  ?child wdt:P355 ?parent.\",\n    \"  ?child wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q210535.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { wd:Q443473 wdt:P40 ?child. ?child wdt:P26 ?spouse. ?child wdt:P355 ?parent. ?child wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q210535. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2887 is spouse\nkg:3982 is child\nkg:2371 is has subsidiary\nkg:8188 is sibling\nkg:2542 is Nefertari\nkg:7348 is Henutmire", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"VALUES ?person { kg:7348 }\",\n            \"?person kg:3982 ?parent.\",\n            \"?person kg:2887 ?spouse.\",\n            \"?person kg:8188 ?sibling.\",\n            \"?parent kg:2542 ?resource.\",\n            \"?spouse kg:2542 ?resource.\",\n            \"?sibling kg:2542 ?resource.\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q443473 } ?person wdt:P40 ?parent. ?person wdt:P26 ?spouse. ?person wdt:P3373 ?sibling. ?parent wd:Q210535 ?resource. ?spouse wd:Q210535 ?resource. ?sibling wd:Q210535 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10692475 wdt:P3373 ?spouse.\",\n    \"  ?spouse wdt:P27 wd:Q16.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10692475 wdt:P3373 ?spouse. ?spouse wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse wdt:P26 wd:Q233128.\",\n      \"?spouse wdt:P21 wd:Q6581097.\",\n      \"?spouse wdt:P27 wd:Q16.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q233128. ?spouse wdt:P21 wd:Q6581097. ?spouse wdt:P27 wd:Q16. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q896740"]], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3526 is Canada\nkg:6728 is spouse\nkg:0382 is costume designer\nkg:2053 is sex or gender\nkg:5779 is country of citizenship\nkg:3791 is occupation\nkg:3623 is male\nkg:4504 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse kg:6728 kg:4504 .\",\n      \"?spouse kg:3179 kg:3526 .\",\n      \"?spouse kg:2053 kg:3623 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse wdt:P26 wd:Q233128 . ?spouse kg:3179 wd:Q16 . ?spouse wdt:P21 wd:Q6581097 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q10672438 wdt:P529 ?sequel.\",\n    \"  ?sequel wdt:P17 wd:Q10672438.\",\n    \"  ?sequel wdt:P17 wd:Q10672438.\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q10672438 wdt:P529 ?sequel. ?sequel wdt:P17 wd:Q10672438. ?sequel wdt:P17 wd:Q10672438. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P155 wd:Q115945.\",\n      \"?sequel wdt:P750 wd:Q47099.\",\n      \"?sequel wdt:P272 wd:Q47099.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q115945. ?sequel wdt:P750 wd:Q47099. ?sequel wdt:P272 wd:Q47099. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q471588"]], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3680 is distributed by\nkg:5106 is Between Love and Hatred\nkg:5175 is producer\nkg:7630 is production company\nkg:8932 is Grupo Televisa\nkg:0879 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel kg:3680 kg:8932 .\",\n      \"?sequel kg:5106 kg:5175 .\",\n      \"?sequel kg:5175 kg:7630 .\",\n      \"?sequel kg:7630 kg:8932 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P750 wd:Q47099 . ?sequel wd:Q115945 wdt:P162 . ?sequel wdt:P162 wdt:P272 . ?sequel wdt:P272 wd:Q47099 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  wd:Q106247 wdt:P355 ?child.\",\n    \"  ?child wdt:P355 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { wd:Q106247 wdt:P355 ?child. ?child wdt:P355 ?parent. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  wd:Q467752 wdt:P355 ?subsidiary.\",\n    \"  ?subsidiary wdt:P127 ?parent.\",\n    \"  ?subsidiary wdt:P40 ?child.\",\n    \"  ?child wdt:P31 wd:Q4830453.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { wd:Q467752 wdt:P355 ?subsidiary. ?subsidiary wdt:P127 ?parent. ?subsidiary wdt:P40 ?child. ?child wdt:P31 wd:Q4830453. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5526 is child\nkg:1121 is has subsidiary\nkg:2336 is Verizon Communications\nkg:9692 is instance of\nkg:3004 is business\nkg:1042 is owned by\nkg:7651 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n      \"?child kg:1121 kg:2336 .\",\n      \"?child kg:9692 kg:3004 .\",\n      \"?child kg:5526 ?parent .\",\n      \"?parent kg:7651 kg:2336 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?child wdt:P355 wd:Q467752 . ?child wdt:P31 wd:Q4830453 . ?child wdt:P40 ?parent . ?parent wdt:P749 wd:Q467752 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q1062437 p:P195 ?statement.\",\n    \"  ?statement ps:P195 ?producer.\",\n    \"  OPTIONAL { ?statement pq:P195 ?distributor. }\",\n    \"  FILTER NOT EXISTS { ?statement pq:P195 wd:Q2064783. }\",\n    \"  FILTER NOT EXISTS { ?statement pq:P195 wd:Q1062437. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q1062437 p:P195 ?statement. ?statement ps:P195 ?producer. OPTIONAL { ?statement pq:P195 ?distributor. } FILTER NOT EXISTS { ?statement pq:P195 wd:Q2064783. } FILTER NOT EXISTS { ?statement pq:P195 wd:Q1062437. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?producerDistributor WHERE {\",\n      \"wd:Q524849 wdt:P272 ?producerDistributor.\",\n      \"?producerDistributor wdt:P112 wd:Q882.\",\n      \"?producerDistributor wdt:P112 wd:Q104109.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producerDistributor WHERE { wd:Q524849 wdt:P272 ?producerDistributor. ?producerDistributor wdt:P112 wd:Q882. ?producerDistributor wdt:P112 wd:Q104109. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q219400"]], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7074 is Barbary Coast\nkg:0987 is Charlie Chaplin\nkg:2612 is distributed by\nkg:4917 is Mary Pickford\nkg:7888 is founded by\nkg:4517 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"kg:7074 kg:2612 ?distributor .\",\n      \"?distributor kg:7888 ?founder .\",\n      \"VALUES ?founder { kg:0987 kg:4917 } .\",\n      \"?distributor a kg:4517 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q524849 wdt:P750 ?distributor . ?distributor wdt:P112 ?founder . VALUES ?founder { wd:Q882 wd:Q104109 } . ?distributor a wdt:P272 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q10672498 wdt:P35 wd:Q10672498.\",\n    \"  wd:Q10672498 wdt:P170 wd:Q10672498.\",\n    \"  ?actor wdt:P106 wd:Q33965.\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q10672498 wdt:P35 wd:Q10672498. wd:Q10672498 wdt:P170 wd:Q10672498. ?actor wdt:P106 wd:Q33965. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q142701 wdt:P737 ?influencer.\",\n    \"  ?influencer wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?sibling wdt:P25 wd:Q4811453.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q142701 wdt:P737 ?influencer. ?influencer wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q33999. ?actor wdt:P106 wd:Q33999. ?sibling wdt:P25 wd:Q4811453. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0855 is influenced by\nkg:6618 is actor\nkg:1604 is Pearl Jam\nkg:5525 is sibling\nkg:8238 is occupation\nkg:0994 is Astrid Young", "response": "{\n    \"query\": [\n        \"SELECT ?actor WHERE {\",\n            \"?actor kg:0855 kg:1604 .\",\n            \"?actor kg:6618 true .\",\n            \"?actor kg:8238 kg:0994 .\",\n            \"?actor kg:5525 ?sibling .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P737 wd:Q142701 . ?actor wd:Q33999 true . ?actor wdt:P106 wd:Q4811453 . ?actor wdt:P3373 ?sibling . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  VALUES ?person { wd:Q10694278 wd:Q350944 wd:Q10694278 }.\",\n    \"  ?item wdt:P50 ?person .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { VALUES ?person { wd:Q10694278 wd:Q350944 wd:Q10694278 }. ?item wdt:P50 ?person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P58 wd:Q1687239 .\",\n      \"?resource wdt:P58 wd:Q35979475 .\",\n      \"?resource wdt:P58 wd:Q562108 .\",\n      \"?resource wdt:P1040 wd:Q1687239 .\",\n      \"?resource wdt:P1040 wd:Q35979475 .\",\n      \"?resource wdt:P1040 wd:Q562108 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . ?resource wdt:P1040 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2298 is screenwriter\nkg:3420 is film editor\nkg:1913 is Ole John\nkg:9960 is Jens Jørgen Thorsen\nkg:7552 is Jørgen Leth", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:2298/kg:3420 kg:1913 .\",\n            \"?resource kg:2298/kg:3420 kg:7552 .\",\n            \"?resource kg:2298/kg:3420 kg:9960 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58/wdt:P1040 wd:Q35979475 . ?resource wdt:P58/wdt:P1040 wd:Q562108 . ?resource wdt:P58/wdt:P1040 wd:Q1687239 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q10672984 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q504864.\",\n    \"  ?sibling wdt:P108 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q10672984 wdt:P3373 ?sibling. ?sibling wdt:P106 wd:Q504864. ?sibling wdt:P108 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q29.\",\n      \"?costumeDesigner wdt:P27 wd:Q29.\",\n      \"?costumeDesigner wdt:P3373 wd:Q3083718.\",\n      \"?costumeDesigner wdt:P2515 ?film.\",\n      \"?film wdt:P31 wd:Q11424.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P31 wd:Q29. ?costumeDesigner wdt:P27 wd:Q29. ?costumeDesigner wdt:P3373 wd:Q3083718. ?costumeDesigner wdt:P2515 ?film. ?film wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9609 is Spain\nkg:8565 is film\nkg:3335 is Miguel Albaladejo\nkg:1890 is instance of\nkg:3009 is sibling\nkg:3394 is country of citizenship\nkg:4627 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?costumeDesigner kg:1890 kg:8565 .\",\n      \"?costumeDesigner kg:3009 kg:3335 .\",\n      \"?costumeDesigner kg:3394 kg:9609 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P31 wd:Q11424 . ?costumeDesigner wdt:P3373 wd:Q3083718 . ?costumeDesigner wdt:P27 wd:Q29 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q5876635"]]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P106 wd:Q33964.\",\n    \"  ?composer wdt:P25 wd:Q7844.\",\n    \"  ?composer wdt:P26 wd:Q106644.\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q33964. ?composer wdt:P25 wd:Q7844. ?composer wdt:P26 wd:Q106644. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P106 wd:Q36834 .\", \"# The resource is a composer\",\n      \"?composer wdt:P27 wd:Q34 .\", \"# The resource has Sweden as country of citizenship\",\n      \"?composer wdt:P21 wd:Q6581072 .\", \"# The resource is female\",\n      \"?composer wdt:P26 wd:Q96203723 .\" ,\"# The resource is spouse of Mattias Järvinen Palme\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . ?composer wdt:P27 wd:Q34 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P26 wd:Q96203723 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q75329"]], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8240 is female\nkg:1877 is spouse\nkg:5795 is composer\nkg:8255 is country of citizenship\nkg:1005 is sex or gender\nkg:9200 is Sweden\nkg:1240 is Mattias Järvinen Palme\nkg:9820 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1877 kg:1240 .\",\n      \"?resource kg:5795 [] .\",\n      \"?resource kg:1005 kg:8240 .\",\n      \"?resource kg:8255 kg:9200 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q96203723 . ?resource wd:Q36834 [] . ?resource wdt:P21 wd:Q6581072 . ?resource wdt:P27 wd:Q34 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10724685 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10724685 wdt:P179 ?director.\",\n    \"  VALUES ?director { wd:Q10724685 }\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P179 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10724685 wdt:P31 wd:Q11424. wd:Q10724685 wdt:P179 ?director. VALUES ?director { wd:Q10724685 } ?film wdt:P31 wd:Q11424. ?film wdt:P179 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q20729551 wdt:P1040 ?resource .\",\n      \"?resource wdt:P162 wd:Q35979475 .\",\n      \"?resource wdt:P162 wd:Q1687239 .\",\n      \"?resource wdt:P162 wd:Q562108 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P1040 ?resource . ?resource wdt:P162 wd:Q35979475 . ?resource wdt:P162 wd:Q1687239 . ?resource wdt:P162 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3795 is Stop for Bud\nkg:0702 is film editor\nkg:3132 is Ole John\nkg:1205 is producer\nkg:2710 is Jens Jørgen Thorsen\nkg:4688 is Jørgen Leth\nkg:5707 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"kg:3795 kg:0702 ?resource .\",\n      \"kg:3795 kg:1205 ?resource .\",\n      \"?resource kg:5707 kg:4688 .\",\n      \"?resource kg:5707 kg:2710 .\",\n      \"?resource kg:5707 kg:3132 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P1040 ?resource . wd:Q20729551 wdt:P162 ?resource . ?resource wdt:P272 wd:Q562108 . ?resource wdt:P272 wd:Q1687239 . ?resource wdt:P272 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling ?spouse WHERE {\",\n    \"  wd:Q1234567 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P39 wd:Q1086464.\",\n    \"  ?spouse wdt:P25 wd:Q1234567.\",\n    \"  ?sibling wdt:P25 wd:Q1234567.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling ?spouse WHERE { wd:Q1234567 wdt:P26 ?spouse. ?spouse wdt:P39 wd:Q1086464. ?spouse wdt:P25 wd:Q1234567. ?sibling wdt:P25 wd:Q1234567. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q40027"], ["wd:Q40023"]]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P26 wd:Q296446.\",\n      \"?sibling wdt:P3373 wd:Q3340.\",\n      \"?sibling wdt:P21 wd:Q6581072.\"\n    \t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P26 wd:Q296446. ?sibling wdt:P3373 wd:Q3340. ?sibling wdt:P21 wd:Q6581072. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q40027"], ["wd:Q40023"]], "gold": [["wd:Q40027"], ["wd:Q40023"]]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9407 is female\nkg:9937 is spouse\nkg:3250 is Ptolemy IX Lathyros\nkg:3533 is Antiochus IX Cyzicenus\nkg:0360 is sibling\nkg:3013 is sex or gender", "response": "{\n  \"query\": [\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n      \"?sibling kg:9407 true .\",\n      \"?sibling kg:0360 kg:3250 .\",\n      \"?sibling kg:9937 kg:3533 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wd:Q6581072 true . ?sibling wdt:P3373 wd:Q3340 . ?sibling wdt:P26 wd:Q296446 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q40027"], ["wd:Q40023"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 wd:Q206435.\",\n    \"  ?item wdt:P800 wd:Q206435.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P179 wd:Q206435. ?item wdt:P800 wd:Q206435. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P58 wd:Q1687239 .\",\n      \"?resource wdt:P58 wd:Q562108 .\",\n      \"?resource wdt:P1040 wd:Q35979475 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5726 is screenwriter\nkg:0254 is film editor\nkg:2763 is Ole John\nkg:8753 is Jens Jørgen Thorsen\nkg:6599 is Jørgen Leth", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:5726 kg:8753 .\",\n            \"?resource kg:0254 kg:6599 .\",\n            \"?resource kg:0254 kg:2763 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q784269.\",\n    \"  ?resource wdt:P50 wd:Q1063464.\",\n    \"  ?resource wdt:P98 wd:Q1063464.\",\n    \"  ?resource wdt:P98 wd:Q273624.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q784269. ?resource wdt:P50 wd:Q1063464. ?resource wdt:P98 wd:Q1063464. ?resource wdt:P98 wd:Q273624. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P58 ?screenwriter.\",\n    \"  wd:Q20729551 wdt:P1040 ?editor.\",\n    \"  VALUES ?screenwriter { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"  VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P58 ?screenwriter. wd:Q20729551 wdt:P1040 ?editor. VALUES ?screenwriter { wd:Q35979475 wd:Q1687239 wd:Q562108 } VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [[]], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1771 is Stop for Bud\nkg:5869 is film editor\nkg:9402 is screenwriter\nkg:3342 is Ole John\nkg:0943 is Jens Jørgen Thorsen\nkg:1474 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5869 kg:1771 .\",\n      \"?resource kg:9402 kg:1771 .\",\n      \"FILTER (?resource IN (kg:0943, kg:1474, kg:3342))\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q20729551 . ?resource wdt:P58 wd:Q20729551 . FILTER (?resource IN (wd:Q1687239, wd:Q562108, wd:Q35979475)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10724685 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10724685 wdt:P179 ?director.\",\n    \"  wd:Q10724685 wdt:P179 ?editor.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?editor wdt:P31 wd:Q33999.\",\n    \"  ?director rdfs:label \\\"Ole John\\\"@en.\",\n    \"  ?editor rdfs:label \\\"Jørgen Leth\\\"@en.\",\n    \"  ?film wdt:P275 ?director.\",\n    \"  ?film wdt:P1683 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10724685 wdt:P31 wd:Q11424. wd:Q10724685 wdt:P179 ?director. wd:Q10724685 wdt:P179 ?editor. ?director wdt:P31 wd:Q33999. ?editor wdt:P31 wd:Q33999. ?director rdfs:label \"Ole John\"@en. ?editor rdfs:label \"Jørgen Leth\"@en. ?film wdt:P275 ?director. ?film wdt:P1683 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q20729551 wdt:P162|wdt:P1040 ?resource .\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"FILTER(?resource IN (wd:Q35979475, wd:Q1687239, wd:Q562108))\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P162|wdt:P1040 ?resource . ?resource wdt:P31 wd:Q5 . FILTER(?resource IN (wd:Q35979475, wd:Q1687239, wd:Q562108)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3040 is Stop for Bud\nkg:6668 is film editor\nkg:4972 is Ole John\nkg:3420 is producer\nkg:2694 is Jens Jørgen Thorsen\nkg:3482 is Jørgen Leth\nkg:5290 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:3040 }\",\n      \"?film kg:6668 ?editor.\",\n      \"?film kg:3420 ?producer.\",\n      \"?editor kg:5290 ?productionCompany.\",\n      \"?producer kg:5290 ?productionCompany.\",\n      \"VALUES ?person { kg:4972 kg:3482 kg:2694 }\",\n      \"?resource kg:5290 ?productionCompany.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q20729551 } ?film wdt:P1040 ?editor. ?film wdt:P162 ?producer. ?editor wdt:P272 ?productionCompany. ?producer wdt:P272 ?productionCompany. VALUES ?person { wd:Q35979475 wd:Q562108 wd:Q1687239 } ?resource wdt:P272 ?productionCompany. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P162 ?producer.\",\n    \"  ?item wdt:P3097 ?executiveProducer.\",\n    \"  VALUES ?producer { wd:Q45841 wd:Q106347 wd:Q106347 }\",\n    \"  VALUES ?executiveProducer { wd:Q45841 wd:Q106347 wd:Q106347 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 ?producer. ?item wdt:P3097 ?executiveProducer. VALUES ?producer { wd:Q45841 wd:Q106347 wd:Q106347 } VALUES ?executiveProducer { wd:Q45841 wd:Q106347 wd:Q106347 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P162 wd:Q365090 .\",\n      \"?work wdt:P1431 wd:Q95125 .\",\n      \"?work wdt:P1431 wd:Q43994 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P162 wd:Q365090 . ?work wdt:P1431 wd:Q95125 . ?work wdt:P1431 wd:Q43994 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1258 is Sam Simon\nkg:5216 is James L. Brooks\nkg:6586 is executive producer\nkg:8380 is producer\nkg:9138 is Matt Groening\nkg:0738 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8380/kg:1258 .\",\n      \"?resource kg:6586/kg:1258 .\",\n      \"?resource kg:8380/kg:9138 .\",\n      \"?resource kg:6586/kg:9138 .\",\n      \"?resource kg:8380/kg:5216 .\",\n      \"?resource kg:6586/kg:5216 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162/wd:Q365090 . ?resource wdt:P1431/wd:Q365090 . ?resource wdt:P162/wd:Q43994 . ?resource wdt:P1431/wd:Q43994 . ?resource wdt:P162/wd:Q95125 . ?resource wdt:P1431/wd:Q95125 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1546287 wdt:P39 wd:Q105666.\",\n    \"  wd:Q1546287 wdt:P40 wd:Q105666.\",\n    \"  ?sibling wdt:P39 wd:Q105666.\",\n    \"  ?sibling wdt:P40 wd:Q105666.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1546287 wdt:P39 wd:Q105666. wd:Q1546287 wdt:P40 wd:Q105666. ?sibling wdt:P39 wd:Q105666. ?sibling wdt:P40 wd:Q105666. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q40027"], ["wd:Q40023"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P26 wd:Q3340 .\",\n      \"?sibling wdt:P3373 wd:Q3345 .\",\n      \"?sibling wdt:P21 wd:Q6581072 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P26 wd:Q3340 . ?sibling wdt:P3373 wd:Q3345 . ?sibling wdt:P21 wd:Q6581072 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q40027"], ["wd:Q40023"]], "gold": [["wd:Q40027"], ["wd:Q40023"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5835 is female\nkg:5138 is spouse\nkg:5268 is Ptolemy IX Lathyros\nkg:3488 is sibling\nkg:5344 is sex or gender\nkg:8343 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling kg:3488 kg:5268 .\",\n      \"?sibling kg:5138 kg:5268 .\",\n      \"?sibling kg:5344 kg:5835 .\",\n      \"?sibling kg:5138 ?spouse .\",\n      \"?spouse kg:5344 kg:5835 .\",\n      \"?spouse kg:5268 kg:8343 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q3340 . ?sibling wdt:P26 wd:Q3340 . ?sibling wdt:P21 wd:Q6581072 . ?sibling wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 . ?spouse wd:Q3340 wd:Q3345 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?property { wdt:P168 wdt:P57 wdt:P93 } .\",\n    \"  ?resource ?property wd:Q204464 .\",\n    \"  ?resource ?property wd:Q106344 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?property { wdt:P168 wdt:P57 wdt:P93 } . ?resource ?property wd:Q204464 . ?resource ?property wd:Q106344 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P58 wd:Q4500 .\",\n      \"?resource wdt:P58 wd:Q5542223 .\",\n      \"?resource wdt:P57 wd:Q4500 .\",\n      \"?resource wdt:P57 wd:Q5542223 .\",\n      \"?resource wdt:P162 wd:Q4500 .\",\n      \"?resource wdt:P162 wd:Q5542223 .\",\n      \"?resource wdt:P272 wd:Q1079 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q4500 . ?resource wdt:P58 wd:Q5542223 . ?resource wdt:P57 wd:Q4500 . ?resource wdt:P57 wd:Q5542223 . ?resource wdt:P162 wd:Q4500 . ?resource wdt:P162 wd:Q5542223 . ?resource wdt:P272 wd:Q1079 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0199 is George Mastras\nkg:2552 is director\nkg:7788 is screenwriter\nkg:4646 is Vince Gilligan\nkg:8458 is producer\nkg:0474 is Breaking Bad\nkg:5292 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2552 kg:0199 .\",\n      \"?resource kg:7788 kg:0199 .\",\n      \"?resource kg:8458 kg:0199 .\",\n      \"?resource kg:2552 kg:4646 .\",\n      \"?resource kg:7788 kg:4646 .\",\n      \"?resource kg:8458 kg:4646 .\",\n      \"?resource kg:0474 ?productionCompany .\",\n      \"?productionCompany kg:5292 ?resource .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q5542223 . ?resource wdt:P58 wd:Q5542223 . ?resource wdt:P162 wd:Q5542223 . ?resource wdt:P57 wd:Q4500 . ?resource wdt:P58 wd:Q4500 . ?resource wdt:P162 wd:Q4500 . ?resource wd:Q1079 ?productionCompany . ?productionCompany wdt:P272 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  VALUES ?film { wd:Q15829406 wd:Q376444 wd:Q15829406 }\",\n    \"  ?film wdt:P175 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { VALUES ?film { wd:Q15829406 wd:Q376444 wd:Q15829406 } ?film wdt:P175 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P161 wd:Q3530946.\",\n      \"?costumeDesigner wdt:P161 wd:Q2336453.\",\n      \"?costumeDesigner wdt:P161 wd:Q2615443.\",\n      \"?costumeDesigner wdt:P1040 ?filmEditor.\"\n    ]\n  }\n ", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P161 wd:Q3530946. ?costumeDesigner wdt:P161 wd:Q2336453. ?costumeDesigner wdt:P161 wd:Q2615443. ?costumeDesigner wdt:P1040 ?filmEditor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8233 is Laurence Anyways\nkg:3723 is film editor\nkg:9065 is Heartbeats\nkg:1968 is Tom at the Farm\nkg:4718 is costume designer\nkg:4835 is occupation\nkg:9084 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4835/kg:4718 .\",\n      \"?resource kg:4835/kg:3723 .\",\n      \"?resource kg:4835/kg:9065 .\",\n      \"?resource kg:4835/kg:1968 .\",\n      \"?resource kg:4835/kg:8233 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106/wd:Q1323191 . ?resource wdt:P106/wdt:P1040 . ?resource wdt:P106/wd:Q2336453 . ?resource wdt:P106/wd:Q3530946 . ?resource wdt:P106/wd:Q2615443 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P452 wd:Q746446.\",\n    \"  ?person wdt:P452 wd:Q1142644.\",\n    \"  ?person wdt:P452 wd:Q309844.\",\n    \"  ?person wdt:P452 wd:Q746446.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P452 wd:Q746446. ?person wdt:P452 wd:Q1142644. ?person wdt:P452 wd:Q309844. ?person wdt:P452 wd:Q746446. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\",\n      \"?person wdt:P161 wd:Q658822 .\",\n      \"?person wdt:P161 wd:Q921678 .\",\n      \"?person wdt:P161 wd:Q45602 .\",\n      \"?person wdt:P161 wd:Q2718259 .\",\n      \"?person wdt:P1040 wd:Q658822 .\",\n      \"?person wdt:P1040 wd:Q921678 .\",\n      \"?person wdt:P1040 wd:Q45602 .\",\n      \"?person wdt:P1040 wd:Q2718259 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P161 wd:Q658822 . ?person wdt:P161 wd:Q921678 . ?person wdt:P161 wd:Q45602 . ?person wdt:P161 wd:Q2718259 . ?person wdt:P1040 wd:Q658822 . ?person wdt:P1040 wd:Q921678 . ?person wdt:P1040 wd:Q45602 . ?person wdt:P1040 wd:Q2718259 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8179 is In the Park\nkg:0287 is The Professor\nkg:9013 is Shanghaied\nkg:0636 is human\nkg:6250 is film editor\nkg:4097 is instance of\nkg:7044 is cast member\nkg:7719 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4097 kg:0636 .\",\n      \"?resource kg:6250 kg:8179 .\",\n      \"?resource kg:6250 kg:9013 .\",\n      \"?resource kg:6250 kg:0287 .\",\n      \"?resource kg:7044 kg:7719 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P1040 wd:Q658822 . ?resource wdt:P1040 wd:Q921678 . ?resource wdt:P1040 wd:Q2718259 . ?resource wdt:P161 wd:Q45602 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q882"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1096478 wd:Q235967 wd:Q159944 wd:Q1096478 }.\",\n    \"  ?film wdt:P57 wd:Q1096478 .\",\n    \"  ?film wdt:P57 wd:Q235967 .\",\n    \"  ?film wdt:P57 wd:Q159944 .\",\n    \"  ?film wdt:P57 wd:Q1096478 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1096478 wd:Q235967 wd:Q159944 wd:Q1096478 }. ?film wdt:P57 wd:Q1096478 . ?film wdt:P57 wd:Q235967 . ?film wdt:P57 wd:Q159944 . ?film wdt:P57 wd:Q1096478 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q16198328 .\",\n      \"?film wdt:P57 wd:Q4679987 .\",\n      \"?film wdt:P57 wd:Q4207234 .\",\n      \"?film wdt:P57 wd:Q1291210 .\",\n      \"?film wdt:P1040 wd:Q16198328 .\",\n      \"?film wdt:P1040 wd:Q4679987 .\",\n      \"?film wdt:P1040 wd:Q4207234 .\",\n      \"?film wdt:P1040 wd:Q1291210 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q16198328 . ?film wdt:P57 wd:Q4679987 . ?film wdt:P57 wd:Q4207234 . ?film wdt:P57 wd:Q1291210 . ?film wdt:P1040 wd:Q16198328 . ?film wdt:P1040 wd:Q4679987 . ?film wdt:P1040 wd:Q4207234 . ?film wdt:P1040 wd:Q1291210 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5107 is director\nkg:3907 is Jason Eisener\nkg:0019 is film editor\nkg:1480 is Adam Wingard\nkg:6912 is Gareth Evans\nkg:6442 is Eduardo Sánchez", "response": "{\n    \"query\": [\n        \"SELECT ?film WHERE {\",\n            \"{ kg:3907 kg:5107 ?film . } UNION \",\n            \"{ kg:1480 kg:5107 ?film . } UNION \",\n            \"{ kg:6912 kg:5107 ?film . } UNION \",\n            \"{ kg:6442 kg:5107 ?film . }\",\n        \"}\",\n        \"UNION {\",\n            \"{ kg:3907 kg:0019 ?film . } UNION \",\n            \"{ kg:1480 kg:0019 ?film . } UNION \",\n            \"{ kg:6912 kg:0019 ?film . } UNION \",\n            \"{ kg:6442 kg:0019 ?film . }\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { wd:Q16198328 wdt:P57 ?film . } UNION { wd:Q4679987 wdt:P57 ?film . } UNION { wd:Q4207234 wdt:P57 ?film . } UNION { wd:Q1291210 wdt:P57 ?film . } } UNION { { wd:Q16198328 wdt:P1040 ?film . } UNION { wd:Q4679987 wdt:P1040 ?film . } UNION { wd:Q4207234 wdt:P1040 ?film . } UNION { wd:Q1291210 wdt:P1040 ?film . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1269408 wdt:P57 wd:Q33311.\",\n    \"  wd:Q1269408 wdt:P170 wd:Q1269408.\",\n    \"  wd:Q1269408 wdt:P175 wd:Q1269408.\",\n    \"  wd:Q1269408 wdt:P31 wd:Q11424.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1269408 wdt:P57 wd:Q33311. wd:Q1269408 wdt:P170 wd:Q1269408. wd:Q1269408 wdt:P175 wd:Q1269408. wd:Q1269408 wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter WHERE {\",\n      \"wd:Q1137372 wdt:P57 ?director.\",\n      \"wd:Q1137372 wdt:P58 ?screenwriter.\",\n      \"VALUES ?director { wd:Q47284 wd:Q3772 wd:Q2838329 wd:Q549956 }\",\n      \"VALUES ?screenwriter { wd:Q47284 wd:Q3772 wd:Q2838329 wd:Q549956 }\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?screenwriter WHERE { wd:Q1137372 wdt:P57 ?director. wd:Q1137372 wdt:P58 ?screenwriter. VALUES ?director { wd:Q47284 wd:Q3772 wd:Q2838329 wd:Q549956 } VALUES ?screenwriter { wd:Q47284 wd:Q3772 wd:Q2838329 wd:Q549956 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2361 is director\nkg:0456 is Four Rooms\nkg:4350 is Robert Rodriguez\nkg:4672 is screenwriter\nkg:9455 is Allison Anders\nkg:5296 is Quentin Tarantino\nkg:3334 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director ?screenwriter WHERE {\",\n      \"?movie kg:0456 .\",\n      \"?movie kg:2361 ?director .\",\n      \"?movie kg:4672 ?screenwriter .\",\n      \"FILTER(?director IN (kg:4350, kg:9455, kg:5296, kg:3334))\",\n      \"FILTER(?screenwriter IN (kg:4350, kg:9455, kg:5296, kg:3334))\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?director ?screenwriter WHERE { ?movie wd:Q1137372 . ?movie wdt:P57 ?director . ?movie wdt:P58 ?screenwriter . FILTER(?director IN (wd:Q47284, wd:Q2838329, wd:Q3772, wd:Q549956)) FILTER(?screenwriter IN (wd:Q47284, wd:Q2838329, wd:Q3772, wd:Q549956)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q107642385 wdt:P57 wd:Q198476.\",\n    \"  wd:Q107642385 wdt:P161 ?director.\",\n    \"  wd:Q107642385 wdt:P162 ?producer.\",\n    \"  VALUES ?director {wd:Q93441 wd:Q107642385}.\",\n    \"  VALUES ?producer {wd:Q93441 wd:Q107642385}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q107642385 wdt:P57 wd:Q198476. wd:Q107642385 wdt:P161 ?director. wd:Q107642385 wdt:P162 ?producer. VALUES ?director {wd:Q93441 wd:Q107642385}. VALUES ?producer {wd:Q93441 wd:Q107642385}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?director ?producer WHERE {\",\n    \"  wd:Q3977597 wdt:P57 ?director.\",\n    \"  wd:Q3977597 wdt:P162 ?producer.\",\n    \"  FILTER(?director IN (wd:Q40220, wd:Q117392, wd:Q5127380, wd:Q4235))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?producer WHERE { wd:Q3977597 wdt:P57 ?director. wd:Q3977597 wdt:P162 ?producer. FILTER(?director IN (wd:Q40220, wd:Q117392, wd:Q5127380, wd:Q4235)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q117392", "wd:Q7440949"], ["wd:Q117392", "wd:Q4235"], ["wd:Q117392", "wd:Q5127380"], ["wd:Q4235"], ["wd:Q117392", "wd:Q2607618"], ["wd:Q40220"], ["wd:Q117392", "wd:Q1018606"], ["wd:Q5127380"], ["wd:Q40220", "wd:Q117392"], ["wd:Q117392", "wd:Q269214"], ["wd:Q1018606", "wd:Q5127380"], ["wd:Q40220", "wd:Q5127380"], ["wd:Q40220", "wd:Q269214"], ["wd:Q269214", "wd:Q5127380"], ["wd:Q40220", "wd:Q1018606"], ["wd:Q4235", "wd:Q7440949"], ["wd:Q4235", "wd:Q2607618"], ["wd:Q117392"], ["wd:Q5127380", "wd:Q7440949"], ["wd:Q40220", "wd:Q2607618"], ["wd:Q4235", "wd:Q5127380"], ["wd:Q4235", "wd:Q1018606"], ["wd:Q40220", "wd:Q4235"], ["wd:Q4235", "wd:Q269214"], ["wd:Q5127380", "wd:Q2607618"], ["wd:Q40220", "wd:Q7440949"]], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0032 is director\nkg:5184 is Miley Cyrus\nkg:0301 is Super Rhino\nkg:1706 is producer\nkg:9737 is Susie Essman\nkg:2682 is Clark Spencer\nkg:9813 is Malcolm McDowell\nkg:2829 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?movie { kg:0301 }\",\n      \"?movie kg:0032 ?director.\",\n      \"?movie kg:1706 ?producer.\",\n      \"VALUES ?director { kg:9737 kg:9813 kg:2682 kg:5184 }\",\n      \"VALUES ?producer { kg:9737 kg:9813 kg:2682 kg:5184 }\",\n      \"?resource kg:0032 ?director.\",\n      \"?resource kg:1706 ?producer.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?movie { wd:Q3977597 } ?movie wdt:P57 ?director. ?movie wdt:P162 ?producer. VALUES ?director { wd:Q40220 wd:Q117392 wd:Q5127380 wd:Q4235 } VALUES ?producer { wd:Q40220 wd:Q117392 wd:Q5127380 wd:Q4235 } ?resource wdt:P57 ?director. ?resource wdt:P162 ?producer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P162 wd:Q34507.\",\n    \"  ?film wdt:P189 wd:Q34507.\",\n    \"  ?film wdt:P186 wd:Q34507.\",\n    \"  ?film wdt:P126 wd:Q34507.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q34507. ?film wdt:P189 wd:Q34507. ?film wdt:P186 wd:Q34507. ?film wdt:P126 wd:Q34507. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q17738"]]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P58 wd:Q38222.\",\n      \"?film wdt:P1431 wd:Q38222.\",\n      \"?film wdt:P162 wd:Q38222.\",\n      \"?film wdt:P1040 wd:Q38222.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P58 wd:Q38222. ?film wdt:P1431 wd:Q38222. ?film wdt:P162 wd:Q38222. ?film wdt:P1040 wd:Q38222. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8776 is screenwriter\nkg:6572 is film editor\nkg:1896 is executive producer\nkg:6686 is producer\nkg:6869 is George Lucas\nkg:5488 is production company", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"VALUES ?person { kg:6869 }.\",\n            \"?resource kg:8776 ?person .\",\n            \"?resource kg:1896 ?person .\",\n            \"?resource kg:6572 ?person .\",\n            \"?resource kg:6686 ?person .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q38222 }. ?resource wdt:P58 ?person . ?resource wdt:P1431 ?person . ?resource wdt:P1040 ?person . ?resource wdt:P162 ?person . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P31 wd:Q33967.\",\n    \"  ?writer wdt:P1080 wd:Q245644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q33967. ?writer wdt:P1080 wd:Q245644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q53001"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q972787.\",\n      \"?writer wdt:P1040 wd:Q3141131.\",\n      \"?writer wdt:P1040 wd:Q672061.\",\n      \"?writer wdt:P58 wd:Q972787.\",\n      \"?writer wdt:P108 wd:Q909176.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q972787. ?writer wdt:P1040 wd:Q3141131. ?writer wdt:P1040 wd:Q672061. ?writer wdt:P58 wd:Q972787. ?writer wdt:P108 wd:Q909176. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1912 is employer\nkg:2452 is Every Man for Himself\nkg:2392 is screenwriter\nkg:2942 is film editor\nkg:8913 is Notre musique\nkg:4179 is Passion\nkg:2410 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2392 kg:2452 .\",\n      \"?resource kg:2392 kg:8913 .\",\n      \"?resource kg:2392 kg:4179 .\",\n      \"?resource kg:2942 kg:2452 .\",\n      \"?resource kg:2942 kg:8913 .\",\n      \"?resource kg:2942 kg:4179 .\",\n      \"?resource kg:1912 kg:2410 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q972787 . ?resource wdt:P58 wd:Q3141131 . ?resource wdt:P58 wd:Q672061 . ?resource wdt:P1040 wd:Q972787 . ?resource wdt:P1040 wd:Q3141131 . ?resource wdt:P1040 wd:Q672061 . ?resource wdt:P108 wd:Q909176 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q53001"]]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1072468 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1072468 p:P161 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P161 ?executiveProducer.\",\n    \"  VALUES ?executiveProducer {\",\n    \"    wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468\",\n    \"  }.\",\n    \"  wd:Q1072468 p:P161 ?producerStatement.\",\n    \"  ?producerStatement ps:P161 ?producer.\",\n    \"  VALUES ?producer {\",\n    \"    wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468\",\n    \"  }.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1072468 wdt:P31 wd:Q11424. wd:Q1072468 p:P161 ?executiveProducerStatement. ?executiveProducerStatement ps:P161 ?executiveProducer. VALUES ?executiveProducer { wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468 }. wd:Q1072468 p:P161 ?producerStatement. ?producerStatement ps:P161 ?producer. VALUES ?producer { wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468 }. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q819109 .\",\n      \"?resource wdt:P1431 wd:Q1969128 .\",\n      \"?resource wdt:P1431 wd:Q81520 .\",\n      \"?resource wdt:P1431 wd:Q1295611 .\",\n      \"?resource wdt:P1431 wd:Q381545 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q819109 . ?resource wdt:P1431 wd:Q1969128 . ?resource wdt:P1431 wd:Q81520 . ?resource wdt:P1431 wd:Q1295611 . ?resource wdt:P1431 wd:Q381545 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6124 is Pierce Brosnan\nkg:3569 is Bob Yari\nkg:9039 is Laws of Attraction\nkg:0657 is executive producer\nkg:0074 is Elie Samaha\nkg:4797 is producer\nkg:4872 is Toby Emmerich\nkg:5915 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:3569 kg:6124 kg:0074 kg:4872 }\",\n      \"?resource kg:0657 ?person .\",\n      \"?resource kg:4797 ?person .\",\n      \"?resource kg:5915 kg:9039 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q1969128 wd:Q81520 wd:Q381545 wd:Q1295611 } ?resource wdt:P1431 ?person . ?resource wdt:P162 ?person . ?resource wdt:P272 wd:Q819109 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q105694 wdt:P31 wd:Q11424.\",\n    \"  wd:Q105694 p:P577 ?editStatement.\",\n    \"  ?editStatement ps:P577 ?editor.\",\n    \"  ?editor wdt:P106 wd:Q3393863.\",\n    \"  OPTIONAL {\",\n    \"    ?film wdt:P244 ?isbn.\",\n    \"    ?isbn wdt:P358 wd:Q105694.\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q105694 wdt:P31 wd:Q11424. wd:Q105694 p:P577 ?editStatement. ?editStatement ps:P577 ?editor. ?editor wdt:P106 wd:Q3393863. OPTIONAL { ?film wdt:P244 ?isbn. ?isbn wdt:P358 wd:Q105694. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"wd:Q854990 wdt:P58 ?screenwriter.\",\n      \"?screenwriter wdt:P31 wd:Q8006.\",\n      \"wd:Q854990 wdt:P1040 ?editor.\",\n      \"?editor wdt:P31 wd:Q8006.\",\n      \"wd:Q854990 wdt:P1431 ?executiveProducer.\",\n      \"?executiveProducer wdt:P31 wd:Q8006.\",\n      \"wd:Q854990 wdt:P162 ?producer.\",\n      \"?producer wdt:P31 wd:Q8006.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { wd:Q854990 wdt:P58 ?screenwriter. ?screenwriter wdt:P31 wd:Q8006. wd:Q854990 wdt:P1040 ?editor. ?editor wdt:P31 wd:Q8006. wd:Q854990 wdt:P1431 ?executiveProducer. ?executiveProducer wdt:P31 wd:Q8006. wd:Q854990 wdt:P162 ?producer. ?producer wdt:P31 wd:Q8006. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7632 is screenwriter\nkg:9931 is film editor\nkg:1425 is Akira Kurosawa\nkg:2311 is executive producer\nkg:8024 is producer\nkg:4824 is Kagemusha\nkg:4757 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:4824 }\",\n      \"?resource kg:9931 ?film .\",\n      \"?resource kg:7632 ?film .\",\n      \"?resource kg:2311 ?film .\",\n      \"?resource kg:8024 ?film .\",\n      \"?resource kg:1425 ?film .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q854990 } ?resource wdt:P1040 ?film . ?resource wdt:P58 ?film . ?resource wdt:P1431 ?film . ?resource wdt:P162 ?film . ?resource wd:Q8006 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q340785.\",\n    \"  ?film wdt:P1629 wd:Q169934.\",\n    \"  ?film wdt:P1629 wd:Q169934.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q340785. ?film wdt:P1629 wd:Q169934. ?film wdt:P1629 wd:Q169934. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q562108. ?film wdt:P58 wd:Q1687239. ?film wdt:P1040 wd:Q35979475. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6545 is director\nkg:8202 is screenwriter\nkg:7913 is film editor\nkg:8650 is Ole John\nkg:9267 is Jens Jørgen Thorsen\nkg:6296 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6545 kg:6296 .\",\n      \"?resource kg:8202 kg:9267 .\",\n      \"?resource kg:7913 kg:8650 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q340785.\",\n    \"  ?film wdt:P577 wd:Q340785.\",\n    \"  ?film wdt:P161 wd:Q340785.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q340785. ?film wdt:P577 wd:Q340785. ?film wdt:P161 wd:Q340785. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q35979475.\",\n      \"?film wdt:P1040 wd:Q35979475.\",\n      \"?film wdt:P57 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q562108.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q35979475. ?film wdt:P58 wd:Q35979475. ?film wdt:P1040 wd:Q35979475. ?film wdt:P57 wd:Q1687239. ?film wdt:P58 wd:Q1687239. ?film wdt:P1040 wd:Q1687239. ?film wdt:P57 wd:Q562108. ?film wdt:P58 wd:Q562108. ?film wdt:P1040 wd:Q562108. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2033 is director\nkg:0860 is screenwriter\nkg:2823 is film editor\nkg:1751 is Ole John\nkg:7403 is Jens Jørgen Thorsen\nkg:2915 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2033 kg:1751 .\",\n      \"?resource kg:0860 kg:1751 .\",\n      \"?resource kg:2823 kg:1751 .\",\n      \"?resource kg:2033 kg:2915 .\",\n      \"?resource kg:0860 kg:2915 .\",\n      \"?resource kg:2823 kg:2915 .\",\n      \"?resource kg:2033 kg:7403 .\",\n      \"?resource kg:0860 kg:7403 .\",\n      \"?resource kg:2823 kg:7403 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q35979475 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P1040 wd:Q35979475 . ?resource wdt:P57 wd:Q562108 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P1040 wd:Q1687239 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  wd:Q1056948 wdt:P31 wd:Q279606.\",\n    \"  wd:Q1056948 wdt:P106 wd:Q11424.\",\n    \"  ?producer wdt:P106 wd:Q11424.\",\n    \"  ?producer wdt:P31 wd:Q279606.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q1056948 wdt:P31 wd:Q279606. wd:Q1056948 wdt:P106 wd:Q11424. ?producer wdt:P106 wd:Q11424. ?producer wdt:P31 wd:Q279606. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q629819 .\",\n      \"?director wdt:P57 wd:Q283699 .\",\n      \"?director wdt:P57 wd:Q600762 .\",\n      \"?director wdt:P57 wd:Q1216566 .\",\n      \"?director wdt:P106 wd:Q3282637 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q629819 . ?director wdt:P57 wd:Q283699 . ?director wdt:P57 wd:Q600762 . ?director wdt:P57 wd:Q1216566 . ?director wdt:P106 wd:Q3282637 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9341 is director\nkg:3378 is Hatchet for the Honeymoon\nkg:5028 is film producer\nkg:0317 is Danger: Diabolik\nkg:8588 is Black Sunday\nkg:1376 is occupation\nkg:5086 is The Whip and the Body\nkg:5290 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1376 kg:5028 .\",\n      \"?resource kg:9341 kg:5086 .\",\n      \"?resource kg:9341 kg:3378 .\",\n      \"?resource kg:9341 kg:0317 .\",\n      \"?resource kg:9341 kg:8588 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q600762 . ?resource wdt:P57 wd:Q283699 . ?resource wdt:P57 wd:Q629819 . ?resource wdt:P57 wd:Q1216566 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33984.\",\n    \"  ?actor wdt:P175 wd:Q2066439.\",\n    \"  ?actor wdt:P175 wd:Q186075.\",\n    \"  ?actor wdt:P175 wd:Q186075.\",\n    \"  ?actor wdt:P175 wd:Q24396.\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33984. ?actor wdt:P175 wd:Q2066439. ?actor wdt:P175 wd:Q186075. ?actor wdt:P175 wd:Q186075. ?actor wdt:P175 wd:Q24396. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?actor wdt:P57 wd:Q3485595.\",\n      \"?actor wdt:P57 wd:Q862058.\",\n      \"?actor wdt:P57 wd:Q1473406.\",\n      \"?actor wdt:P57 wd:Q3016313.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P57 wd:Q3485595. ?actor wdt:P57 wd:Q862058. ?actor wdt:P57 wd:Q1473406. ?actor wdt:P57 wd:Q3016313. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6222 is director\nkg:1856 is Darkened Room\nkg:1061 is Inland Empire\nkg:8198 is actor\nkg:6644 is Rabbits\nkg:6649 is occupation\nkg:8094 is Six Men Getting Sick\nkg:7926 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6222/kg:1856 .\",\n      \"?resource kg:6222/kg:1061 .\",\n      \"?resource kg:6222/kg:8094 .\",\n      \"?resource kg:6222/kg:6644 .\",\n      \"?resource kg:7926/kg:1856 .\",\n      \"?resource kg:7926/kg:1061 .\",\n      \"?resource kg:7926/kg:8094 .\",\n      \"?resource kg:7926/kg:6644 .\",\n      \"?resource kg:6649/kg:8198 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57/wd:Q3016313 . ?resource wdt:P57/wd:Q862058 . ?resource wdt:P57/wd:Q3485595 . ?resource wdt:P57/wd:Q1473406 . ?resource wdt:P344/wd:Q3016313 . ?resource wdt:P344/wd:Q862058 . ?resource wdt:P344/wd:Q3485595 . ?resource wdt:P344/wd:Q1473406 . ?resource wdt:P106/wd:Q33999 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q30475.\",\n    \"  ?film wdt:P57 wd:Q8447.\",\n    \"  ?film wdt:P161 wd:Q30475.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q30475. ?film wdt:P57 wd:Q8447. ?film wdt:P161 wd:Q30475. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q497256"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1064275 wd:Q398347 wd:Q169944 }.\",\n    \"  ?director wdt:P57 wd:Q11424.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1064275 wd:Q398347 wd:Q169944 }. ?director wdt:P57 wd:Q11424. ?film wdt:P31 wd:Q11424. ?film wdt:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"{ wd:Q35979475 wdt:P57 ?film . } UNION \",\n      \"{ wd:Q1687239 wdt:P57 ?film . } UNION \",\n      \"{ wd:Q562108 wdt:P57 ?film . }\",\n    \"}\",\n    \"UNION {\",\n      \"{ wd:Q35979475 wdt:P58 ?film . } UNION \",\n      \"{ wd:Q1687239 wdt:P58 ?film . } UNION \",\n      \"{ wd:Q562108 wdt:P58 ?film . }\",\n    \"}\",\n    \"UNION {\",\n      \"{ wd:Q35979475 wdt:P1040 ?film . } UNION \",\n      \"{ wd:Q1687239 wdt:P1040 ?film . } UNION \",\n      \"{ wd:Q562108 wdt:P1040 ?film . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { wd:Q35979475 wdt:P57 ?film . } UNION { wd:Q1687239 wdt:P57 ?film . } UNION { wd:Q562108 wdt:P57 ?film . } } UNION { { wd:Q35979475 wdt:P58 ?film . } UNION { wd:Q1687239 wdt:P58 ?film . } UNION { wd:Q562108 wdt:P58 ?film . } } UNION { { wd:Q35979475 wdt:P1040 ?film . } UNION { wd:Q1687239 wdt:P1040 ?film . } UNION { wd:Q562108 wdt:P1040 ?film . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7826 is director\nkg:4439 is screenwriter\nkg:8590 is film editor\nkg:8518 is Ole John\nkg:0721 is Jens Jørgen Thorsen\nkg:8090 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ ?resource kg:7826/kg:8518 . } UNION \",\n      \"{ ?resource kg:7826/kg:0721 . } UNION \",\n      \"{ ?resource kg:7826/kg:8090 . } UNION \",\n      \"{ ?resource kg:4439/kg:8518 . } UNION \",\n      \"{ ?resource kg:4439/kg:0721 . } UNION \",\n      \"{ ?resource kg:4439/kg:8090 . } UNION \",\n      \"{ ?resource kg:8590/kg:8518 . } UNION \",\n      \"{ ?resource kg:8590/kg:0721 . } UNION \",\n      \"{ ?resource kg:8590/kg:8090 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57/wd:Q35979475 . } UNION { ?resource wdt:P57/wd:Q1687239 . } UNION { ?resource wdt:P57/wd:Q562108 . } UNION { ?resource wdt:P58/wd:Q35979475 . } UNION { ?resource wdt:P58/wd:Q1687239 . } UNION { ?resource wdt:P58/wd:Q562108 . } UNION { ?resource wdt:P1040/wd:Q35979475 . } UNION { ?resource wdt:P1040/wd:Q1687239 . } UNION { ?resource wdt:P1040/wd:Q562108 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q152468 wdt:P31 wd:Q11424.\",\n    \"  wd:Q152468 wdt:P57 wd:Q109666.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q109666.\",\n    \"  ?film wdt:P58 wd:Q152468.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q152468 wdt:P31 wd:Q11424. wd:Q152468 wdt:P57 wd:Q109666. ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q109666. ?film wdt:P58 wd:Q152468. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?movie wdt:P31 wd:Q11424.\",\n      \"?movie rdfs:label \\\"Grindhouse\\\"@en.\",\n      \"?movie wdt:P57 ?director.\",\n      \"FILTER(?director IN (wd:Q679023, wd:Q522057, wd:Q298255, wd:Q47284, wd:Q358714))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?movie wdt:P31 wd:Q11424. ?movie rdfs:label \"Grindhouse\"@en. ?movie wdt:P57 ?director. FILTER(?director IN (wd:Q679023, wd:Q522057, wd:Q298255, wd:Q47284, wd:Q358714)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6979 is director\nkg:4973 is Robert Rodriguez\nkg:6605 is Edgar Wright\nkg:7920 is screenwriter\nkg:2849 is Grindhouse\nkg:2475 is Eli Roth\nkg:1797 is Rob Zombie\nkg:8252 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6979 kg:2849 .\",\n      \"?resource kg:7920 kg:2849 .\",\n      \"FILTER (?resource IN (kg:4973, kg:6605, kg:1797, kg:8252, kg:2475))\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q679023 . ?resource wdt:P58 wd:Q679023 . FILTER (?resource IN (wd:Q47284, wd:Q522057, wd:Q298255, wd:Q3772, wd:Q358714)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 }\",\n    \"  ?film wdt:P577 ?producer.\",\n    \"  ?film wdt:P1476 ?writer.\",\n    \"  FILTER(?producer = ?writer)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 } ?film wdt:P577 ?producer. ?film wdt:P1476 ?writer. FILTER(?producer = ?writer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n      \"?filmProducer wdt:P106 wd:Q3282637.\",\n      \"{ ?filmProducer wdt:P58 wd:Q567519. } UNION \",\n      \"{ ?filmProducer wdt:P58 wd:Q686125. } UNION \",\n      \"{ ?filmProducer wdt:P58 wd:Q327427. } UNION \",\n      \"{ ?filmProducer wdt:P58 wd:Q2789885. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3282637. { ?filmProducer wdt:P58 wd:Q567519. } UNION { ?filmProducer wdt:P58 wd:Q686125. } UNION { ?filmProducer wdt:P58 wd:Q327427. } UNION { ?filmProducer wdt:P58 wd:Q2789885. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6772 is Katzelmacher\nkg:2507 is screenwriter\nkg:8123 is film editor\nkg:9419 is The Niklashausen Journey\nkg:0244 is film producer\nkg:2998 is Whity\nkg:7250 is Lili Marleen\nkg:7034 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:0244 ?occupation .\",\n      \"?resource kg:2507 kg:6772 .\",\n      \"?resource kg:8123 kg:6772 .\",\n      \"?resource kg:2507 kg:9419 .\",\n      \"?resource kg:8123 kg:9419 .\",\n      \"?resource kg:2507 kg:2998 .\",\n      \"?resource kg:8123 kg:2998 .\",\n      \"?resource kg:2507 kg:7250 .\",\n      \"?resource kg:8123 kg:7250 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wd:Q3282637 ?occupation . ?resource wdt:P58 wd:Q567519 . ?resource wdt:P1040 wd:Q567519 . ?resource wdt:P58 wd:Q2789885 . ?resource wdt:P1040 wd:Q2789885 . ?resource wdt:P58 wd:Q327427 . ?resource wdt:P1040 wd:Q327427 . ?resource wdt:P58 wd:Q686125 . ?resource wdt:P1040 wd:Q686125 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q106245 }\",\n    \"  VALUES ?writer { wd:Q397840 wd:Q106245 wd:Q106245 wd:Q106245 wd:Q106245 }\",\n    \"  ?work wdt:P571 ?director.\",\n    \"  ?work wdt:P582 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?director { wd:Q106245 } VALUES ?writer { wd:Q397840 wd:Q106245 wd:Q106245 wd:Q106245 wd:Q106245 } ?work wdt:P571 ?director. ?work wdt:P582 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P57/wd:P31/ wd:Q5542223 .\",\n      \"?work wdt:P58/wd:P31/ wd:Q7407299 .\",\n      \"?work wdt:P57/wd:P31/ wd:Q7174311 .\",\n      \"?work wdt:P58/wd:P31/ wd:Q4500 .\",\n      \"?work wdt:P57/wd:P31/ wd:Q15042700 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?work WHERE { ?work wdt:P57/wd:P31/ wd:Q5542223 . ?work wdt:P58/wd:P31/ wd:Q7407299 . ?work wdt:P57/wd:P31/ wd:Q7174311 . ?work wdt:P58/wd:P31/ wd:Q4500 . ?work wdt:P57/wd:P31/ wd:Q15042700 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0085 is George Mastras\nkg:4382 is director\nkg:7904 is screenwriter\nkg:0044 is Sam Catlin\nkg:1644 is Vince Gilligan\nkg:1058 is Peter Gould\nkg:0768 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ ?resource kg:4382 kg:0085 . } UNION \",\n      \"{ ?resource kg:4382 kg:0044 . } UNION \",\n      \"{ ?resource kg:4382 kg:1644 . } UNION \",\n      \"{ ?resource kg:4382 kg:1058 . } UNION \",\n      \"{ ?resource kg:4382 kg:0768 . }\",\n    \"}\",\n    \"UNION {\",\n      \"{ ?resource kg:7904 kg:0085 . } UNION \",\n      \"{ ?resource kg:7904 kg:0044 . } UNION \",\n      \"{ ?resource kg:7904 kg:1644 . } UNION \",\n      \"{ ?resource kg:7904 kg:1058 . } UNION \",\n      \"{ ?resource kg:7904 kg:0768 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q5542223 . } UNION { ?resource wdt:P57 wd:Q7407299 . } UNION { ?resource wdt:P57 wd:Q4500 . } UNION { ?resource wdt:P57 wd:Q7174311 . } UNION { ?resource wdt:P57 wd:Q15042700 . } } UNION { { ?resource wdt:P58 wd:Q5542223 . } UNION { ?resource wdt:P58 wd:Q7407299 . } UNION { ?resource wdt:P58 wd:Q4500 . } UNION { ?resource wdt:P58 wd:Q7174311 . } UNION { ?resource wdt:P58 wd:Q15042700 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P634 ?editor.\",\n    \"  VALUES ?director { wd:Q206464 }\",\n    \"  VALUES ?writer { wd:Q571440 }\",\n    \"  VALUES ?editor { wd:Q98444 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P571 ?director. ?film wdt:P98 ?writer. ?film wdt:P634 ?editor. VALUES ?director { wd:Q206464 } VALUES ?writer { wd:Q571440 } VALUES ?editor { wd:Q98444 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q35979475.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P1040 wd:Q562108.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q35979475. ?film wdt:P58 wd:Q1687239. ?film wdt:P1040 wd:Q562108. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3394 is director\nkg:6803 is screenwriter\nkg:0323 is film editor\nkg:0969 is Ole John\nkg:4347 is Jens Jørgen Thorsen\nkg:9492 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:3394 kg:0969 .\",\n      \"?film kg:6803 kg:4347 .\",\n      \"?film kg:0323 kg:9492 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q35979475 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorExecutive WHERE {\",\n    \"  VALUES ?film { wd:Q108967 wd:Q243544 wd:Q108969 wd:Q108970 }\",\n    \"  ?film wdt:P175 ?filmEditorExecutive.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditorExecutive WHERE { VALUES ?film { wd:Q108967 wd:Q243544 wd:Q108969 wd:Q108970 } ?film wdt:P175 ?filmEditorExecutive. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855.\",\n      \"?filmEditor wdt:P58 wd:Q17738.\",\n      \"?filmEditor wdt:P58 wd:Q165713.\",\n      \"?filmEditor wdt:P58 wd:Q181803.\",\n      \"?filmEditor wdt:P58 wd:Q3968346.\",\n      \"?filmEditor wdt:P1431 wd:Q17738.\",\n      \"?filmEditor wdt:P1431 wd:Q165713.\",\n      \"?filmEditor wdt:P1431 wd:Q181803.\",\n      \"?filmEditor wdt:P1431 wd:Q3968346.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855. ?filmEditor wdt:P58 wd:Q17738. ?filmEditor wdt:P58 wd:Q165713. ?filmEditor wdt:P58 wd:Q181803. ?filmEditor wdt:P58 wd:Q3968346. ?filmEditor wdt:P1431 wd:Q17738. ?filmEditor wdt:P1431 wd:Q165713. ?filmEditor wdt:P1431 wd:Q181803. ?filmEditor wdt:P1431 wd:Q3968346. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9079 is screenwriter\nkg:2001 is executive producer\nkg:4043 is Star Wars: Episode VI – Return of the Jedi\nkg:0382 is Star Whores\nkg:8244 is film editor\nkg:1706 is occupation\nkg:0534 is Star Wars: Episode IV – A New Hope\nkg:8405 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1706/kg:9079 .\",\n      \"?resource kg:1706/kg:2001 .\",\n      \"?resource kg:1706/kg:8244 .\",\n      \"?resource kg:1706/kg:0534 .\",\n      \"?resource kg:1706/kg:8405 .\",\n      \"?resource kg:1706/kg:4043 .\",\n      \"?resource kg:1706/kg:0382 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106/wdt:P58 . ?resource wdt:P106/wdt:P1431 . ?resource wdt:P106/wd:Q7042855 . ?resource wdt:P106/wd:Q17738 . ?resource wdt:P106/wd:Q165713 . ?resource wdt:P106/wd:Q181803 . ?resource wdt:P106/wd:Q3968346 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Stop for Bud\\\"@en.\",\n    \"  OPTIONAL { ?film wdt:P577 ?writer. }\",\n    \"  OPTIONAL { ?film wdt:P98 ?editor. }\",\n    \"  OPTIONAL { ?film wdt:P162 ?director. }\",\n    \"  FILTER (NOT EXISTS { ?film wdt:P31 wd:Q475024. })\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Stop for Bud\"@en. OPTIONAL { ?film wdt:P577 ?writer. } OPTIONAL { ?film wdt:P98 ?editor. } OPTIONAL { ?film wdt:P162 ?director. } FILTER (NOT EXISTS { ?film wdt:P31 wd:Q475024. }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q20729551"]], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor ?screenwriter WHERE {\",\n    \"  wd:Q20729551 wdt:P57 ?director.\",\n    \"  wd:Q20729551 wdt:P1040 ?editor.\",\n    \"  wd:Q20729551 wdt:P58 ?screenwriter.\",\n    \"  FILTER(?director IN (wd:Q35979475, wd:Q1687239, wd:Q562108))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?editor ?screenwriter WHERE { wd:Q20729551 wdt:P57 ?director. wd:Q20729551 wdt:P1040 ?editor. wd:Q20729551 wdt:P58 ?screenwriter. FILTER(?director IN (wd:Q35979475, wd:Q1687239, wd:Q562108)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [["wd:Q35979475", "wd:Q1687239", "wd:Q562108"], ["wd:Q1687239", "wd:Q562108"], ["wd:Q562108"], ["wd:Q1687239"], ["wd:Q35979475"], ["wd:Q35979475", "wd:Q1687239"], ["wd:Q35979475", "wd:Q562108"]], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5239 is director\nkg:3258 is Stop for Bud\nkg:4140 is film editor\nkg:5675 is screenwriter\nkg:1224 is Ole John\nkg:8676 is Jens Jørgen Thorsen\nkg:9937 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:3258 }\",\n      \"?resource kg:5239 kg:1224 .\",\n      \"?resource kg:5239 kg:8676 .\",\n      \"?resource kg:5239 kg:9937 .\",\n      \"?resource kg:4140 kg:1224 .\",\n      \"?resource kg:4140 kg:8676 .\",\n      \"?resource kg:4140 kg:9937 .\",\n      \"?resource kg:5675 kg:1224 .\",\n      \"?resource kg:5675 kg:8676 .\",\n      \"?resource kg:5675 kg:9937 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q20729551 } ?resource wdt:P57 wd:Q35979475 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P57 wd:Q562108 . ?resource wdt:P1040 wd:Q35979475 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P161 ?writer.\",\n    \"  ?film wdt:P162 ?cinematographer.\",\n    \"  FILTER(?releaseDate = \\\"1938-04-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?releaseDate. ?film wdt:P175 ?director. ?film wdt:P161 ?writer. ?film wdt:P162 ?cinematographer. FILTER(?releaseDate = \"1938-04-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q613974.\",\n      \"?writer wdt:P58 wd:Q208910.\",\n      \"?writer wdt:P58 wd:Q1869678.\",\n      \"?writer wdt:P1431 wd:Q165713.\",\n      \"?writer wdt:P1431 wd:Q192403.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q613974. ?writer wdt:P58 wd:Q208910. ?writer wdt:P58 wd:Q1869678. ?writer wdt:P1431 wd:Q165713. ?writer wdt:P1431 wd:Q192403. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9276 is screenwriter\nkg:9100 is executive producer\nkg:1454 is Anyone Lived in a Pretty How Town\nkg:2752 is Look at Life\nkg:6560 is 1:42.08\nkg:7291 is The Land Before Time\nkg:3763 is Star Wars: Episode I – The Phantom Menace\nkg:6310 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"?writer kg:9276 kg:1454.\",\n            \"?writer kg:9276 kg:6560.\",\n            \"?writer kg:9100 kg:3763.\",\n            \"?writer kg:9100 kg:7291.\"\n        ]\n    }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q613974. ?writer wdt:P58 wd:Q208910. ?writer wdt:P1431 wd:Q165713. ?writer wdt:P1431 wd:Q192403. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film (wdt:P577|wdt:P1686) \\\"Uzak\\\".\",\n    \"  ?film (wdt:P577|wdt:P1686) \\\"Clouds of May\\\".\",\n    \"  ?producer wdt:P3094 ?film.\",\n    \"  ?producer wdt:P2868 ?film.\",\n    \"  ?producer wdt:P571 ?film.\",\n    \"  ?producer wdt:P1686 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film (wdt:P577|wdt:P1686) \"Uzak\". ?film (wdt:P577|wdt:P1686) \"Clouds of May\". ?producer wdt:P3094 ?film. ?producer wdt:P2868 ?film. ?producer wdt:P571 ?film. ?producer wdt:P1686 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer wdt:P106 wd:Q3282637.\",\n      \"?producer wdt:P57 wd:Q1361018.\",\n      \"?producer wdt:P58 wd:Q1361018.\",\n      \"?producer wdt:P1040 wd:Q1361018.\",\n      \"?producer wdt:P1431 wd:Q1361018.\",\n      \"?producer wdt:P57 wd:Q2086445.\",\n      \"?producer wdt:P58 wd:Q2086445.\",\n      \"?producer wdt:P1040 wd:Q2086445.\",\n      \"?producer wdt:P1431 wd:Q2086445.\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637. ?producer wdt:P57 wd:Q1361018. ?producer wdt:P58 wd:Q1361018. ?producer wdt:P1040 wd:Q1361018. ?producer wdt:P1431 wd:Q1361018. ?producer wdt:P57 wd:Q2086445. ?producer wdt:P58 wd:Q2086445. ?producer wdt:P1040 wd:Q2086445. ?producer wdt:P1431 wd:Q2086445. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9862 is Clouds of May\nkg:0638 is director\nkg:1836 is screenwriter\nkg:1486 is film editor\nkg:5247 is executive producer\nkg:2699 is Uzak\nkg:7714 is film producer\nkg:0443 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer kg:0443 kg:7714 .\",\n      \"?producer kg:0638 kg:2699 .\",\n      \"?producer kg:1836 kg:2699 .\",\n      \"?producer kg:5247 kg:2699 .\",\n      \"?producer kg:1486 kg:2699 .\",\n      \"?producer kg:0638 kg:9862 .\",\n      \"?producer kg:1836 kg:9862 .\",\n      \"?producer kg:5247 kg:9862 .\",\n      \"?producer kg:1486 kg:9862 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637 . ?producer wdt:P57 wd:Q1361018 . ?producer wdt:P58 wd:Q1361018 . ?producer wdt:P1431 wd:Q1361018 . ?producer wdt:P1040 wd:Q1361018 . ?producer wdt:P57 wd:Q2086445 . ?producer wdt:P58 wd:Q2086445 . ?producer wdt:P1431 wd:Q2086445 . ?producer wdt:P1040 wd:Q2086445 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 wd:Q1086964.\",\n    \"  ?film wdt:P161 wd:Q1086964.\",\n    \"  ?film wdt:P162 wd:Q33646.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 wd:Q1086964. ?film wdt:P161 wd:Q1086964. ?film wdt:P162 wd:Q33646. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?publicationDate.\",\n    \"  ?film wdt:P1680 ?writer.\",\n    \"  ?film wdt:P1920 ?executiveProducer.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  FILTER (\",\n    \"    ?writer IN (wd:Q34064, wd:Q38244, wd:Q38245) .\",\n    \"    ?executiveProducer IN (wd:Q34064, wd:Q38244, wd:Q38245) .\",\n    \"    ?director IN (wd:Q34064, wd:Q38244, wd:Q38245) .\",\n    \"  )\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?publicationDate. ?film wdt:P1680 ?writer. ?film wdt:P1920 ?executiveProducer. ?film wdt:P57 ?director. FILTER ( ?writer IN (wd:Q34064, wd:Q38244, wd:Q38245) . ?executiveProducer IN (wd:Q34064, wd:Q38244, wd:Q38245) . ?director IN (wd:Q34064, wd:Q38244, wd:Q38245) . ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?director ?executiveProducer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084672.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P162 ?writer.\",\n    \"  ?film wdt:P169 ?executiveProducer.\",\n    \"  FILTER(?releaseDate >= \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime)\",\n    \"  VALUES ?director {wd:Q34578}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?director ?executiveProducer WHERE { ?film wdt:P31 wd:Q1084672. ?film wdt:P577 ?releaseDate. ?film wdt:P175 ?director. ?film wdt:P162 ?writer. ?film wdt:P169 ?executiveProducer. FILTER(?releaseDate >= \"2000-01-01T00:00:00Z\"^^xsd:dateTime) VALUES ?director {wd:Q34578} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P57 wd:Q1140578.\",\n      \"?writer wdt:P57 wd:Q2085.\",\n      \"?writer wdt:P58 wd:Q1140578.\",\n      \"?writer wdt:P58 wd:Q2085.\",\n      \"?writer wdt:P1431 wd:Q1140578.\",\n      \"?writer wdt:P1431 wd:Q2085.\",\n      \"?writer wdt:P1431 wd:Q1511905.\",\n      \"?writer wdt:P1431 wd:Q583406.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P57 wd:Q1140578. ?writer wdt:P57 wd:Q2085. ?writer wdt:P58 wd:Q1140578. ?writer wdt:P58 wd:Q2085. ?writer wdt:P1431 wd:Q1140578. ?writer wdt:P1431 wd:Q2085. ?writer wdt:P1431 wd:Q1511905. ?writer wdt:P1431 wd:Q583406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8073 is director\nkg:3473 is screenwriter\nkg:4070 is executive producer\nkg:1760 is Twin Peaks: Fire Walk with Me\nkg:7851 is Surveillance\nkg:7512 is Twin Peaks\nkg:3325 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8073/kg:1760.\",\n      \"?resource kg:4070/kg:1760.\",\n      \"?resource kg:3473/kg:1760.\",\n      \"?resource kg:4070/kg:7512.\",\n      \"?resource kg:8073/kg:7512.\",\n      \"?resource kg:4070/kg:3325.\",\n      \"?resource kg:8073/kg:3325.\",\n      \"?resource kg:4070/kg:7851.\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57/wd:Q1140578. ?resource wdt:P1431/wd:Q1140578. ?resource wdt:P58/wd:Q1140578. ?resource wdt:P1431/wd:Q2085. ?resource wdt:P57/wd:Q2085. ?resource wdt:P1431/wd:Q1511905. ?resource wdt:P57/wd:Q1511905. ?resource wdt:P1431/wd:Q583406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q106724 wd:Q35984 wd:Q106724 wd:Q106724 wd:Q106724 }.\",\n    \"  ?film wdt:P57 wd:Q106724 .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q106724 wd:Q35984 wd:Q106724 wd:Q106724 wd:Q106724 }. ?film wdt:P57 wd:Q106724 . ?film wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q116760 .\",\n      \"?film wdt:P58 wd:Q116760 .\",\n      \"?film wdt:P57 wd:Q1033656 .\",\n      \"?film wdt:P58 wd:Q1033656 .\",\n      \"?film wdt:P57 wd:Q982339 .\",\n      \"?film wdt:P58 wd:Q982339 .\",\n      \"?film wdt:P57 wd:Q1365463 .\",\n      \"?film wdt:P58 wd:Q1365463 .\",\n      \"?film wdt:P57 wd:Q7546 .\",\n      \"?film wdt:P58 wd:Q7546 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q116760 . ?film wdt:P58 wd:Q116760 . ?film wdt:P57 wd:Q1033656 . ?film wdt:P58 wd:Q1033656 . ?film wdt:P57 wd:Q982339 . ?film wdt:P58 wd:Q982339 . ?film wdt:P57 wd:Q1365463 . ?film wdt:P58 wd:Q1365463 . ?film wdt:P57 wd:Q7546 . ?film wdt:P58 wd:Q7546 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q222633"]], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6767 is director\nkg:9491 is Jörn Donner\nkg:3501 is Vilgot Sjöman\nkg:0295 is film\nkg:0772 is screenwriter\nkg:1640 is Hans Alfredson\nkg:3045 is instance of\nkg:9984 is Ingmar Bergman\nkg:0868 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:3045 kg:0295 .\",\n      \"?film kg:6767/kg:3501 .\",\n      \"?film kg:6767/kg:1640 .\",\n      \"?film kg:6767/kg:9491 .\",\n      \"?film kg:6767/kg:9984 .\",\n      \"?film kg:6767/kg:0868 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57/wd:Q116760 . ?film wdt:P57/wd:Q1033656 . ?film wdt:P57/wd:Q982339 . ?film wdt:P57/wd:Q7546 . ?film wdt:P57/wd:Q1365463 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P106 wd:Q33978.\",\n      \"?composer wdt:P57 wd:Q24860.\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q33978. ?composer wdt:P57 wd:Q24860. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q550196.\",\n      \"?composer wdt:P57 wd:Q192115.\",\n      \"?composer wdt:P57 wd:Q1653396.\",\n      \"?composer wdt:P57 wd:Q656357.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q550196. ?composer wdt:P57 wd:Q192115. ?composer wdt:P57 wd:Q1653396. ?composer wdt:P57 wd:Q656357. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8464 is director\nkg:0995 is composer\nkg:5795 is Sin City\nkg:0483 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0507 is Spy Kids 3-D: Game Over\nkg:0641 is Sin City: A Dame to Kill For\nkg:7630 is cast member\nkg:3439 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:8464 kg:5795 .\",\n            \"?resource kg:8464 kg:0641 .\",\n            \"?resource kg:8464 kg:0483 .\",\n            \"?resource kg:0995 kg:0507 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q192115 . ?resource wdt:P57 wd:Q1653396 . ?resource wdt:P57 wd:Q656357 . ?resource wdt:P86 wd:Q550196 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P31 wd:Q33960.\",\n    \"  ?composer wdt:P57 wd:Q28424.\",\n    \"  ?composer wdt:P106 wd:Q33960.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q33960. ?composer wdt:P57 wd:Q28424. ?composer wdt:P106 wd:Q33960. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P86 wd:Q470895 .\",\n      \"?composer wdt:P86 wd:Q199039 .\",\n      \"?composer wdt:P1040 wd:Q238211 .\",\n      \"?composer wdt:P1040 wd:Q45602 .\",\n      \"?composer wdt:P161 wd:Q3986814 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P86 wd:Q470895 . ?composer wdt:P86 wd:Q199039 . ?composer wdt:P1040 wd:Q238211 . ?composer wdt:P1040 wd:Q45602 . ?composer wdt:P161 wd:Q3986814 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1720 is The Essanay-Chaplin Revue of 1916\nkg:7601 is composer\nkg:6976 is film editor\nkg:8348 is Pay Day\nkg:1769 is A Woman of Paris\nkg:7559 is City Lights\nkg:7635 is cast member\nkg:7074 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7601 kg:8348 .\",\n      \"?resource kg:7601 kg:1769 .\",\n      \"?resource kg:6976 kg:7559 .\",\n      \"?resource kg:6976 kg:7074 .\",\n      \"?resource kg:6976 kg:1720 .\",\n      \"?resource kg:7635 kg:7559 .\",\n      \"?resource kg:7635 kg:7074 .\",\n      \"?resource kg:7635 kg:1720 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P86 wd:Q199039 . ?resource wdt:P86 wd:Q470895 . ?resource wdt:P1040 wd:Q238211 . ?resource wdt:P1040 wd:Q45602 . ?resource wdt:P1040 wd:Q3986814 . ?resource wdt:P161 wd:Q238211 . ?resource wdt:P161 wd:Q45602 . ?resource wdt:P161 wd:Q3986814 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q206478 wdt:P57 wd:Q13944.\",\n    \"  wd:Q206478 wdt:P161 wd:Q206478.\",\n    \"  wd:Q206478 wdt:P161 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q206478 wdt:P57 wd:Q13944. wd:Q206478 wdt:P161 wd:Q206478. wd:Q206478 wdt:P161 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q497256"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P2043 ?editor.\",\n    \"  VALUES ?director {wd:Q6162660} \",\n    \"  VALUES ?writer {wd:Q5799660}\",\n    \"  VALUES ?editor {wd:Q8049600 wd:Q1053940}\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P571 ?director. ?film wdt:P98 ?writer. ?film wdt:P2043 ?editor. VALUES ?director {wd:Q6162660} VALUES ?writer {wd:Q5799660} VALUES ?editor {wd:Q8049600 wd:Q1053940} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q4023328.\",\n      \"?film wdt:P58 wd:Q4023328.\",\n      \"?film wdt:P1040 wd:Q4023328.\",\n      \"?film wdt:P57 wd:Q5836844.\",\n      \"?film wdt:P58 wd:Q5836844.\",\n      \"?film wdt:P1040 wd:Q5836844.\",\n      \"?film wdt:P57 wd:Q5658534.\",\n      \"?film wdt:P58 wd:Q5658534.\",\n      \"?film wdt:P1040 wd:Q5658534.\",\n      \"?film wdt:P57 wd:Q4022902.\",\n      \"?film wdt:P58 wd:Q4022902.\",\n      \"?film wdt:P1040 wd:Q4022902.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q4023328. ?film wdt:P58 wd:Q4023328. ?film wdt:P1040 wd:Q4023328. ?film wdt:P57 wd:Q5836844. ?film wdt:P58 wd:Q5836844. ?film wdt:P1040 wd:Q5836844. ?film wdt:P57 wd:Q5658534. ?film wdt:P58 wd:Q5658534. ?film wdt:P1040 wd:Q5658534. ?film wdt:P57 wd:Q4022902. ?film wdt:P58 wd:Q4022902. ?film wdt:P1040 wd:Q4022902. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5280 is director\nkg:5040 is screenwriter\nkg:2352 is film editor\nkg:0869 is Yoshihiro Nishimura\nkg:0938 is Ernesto Díaz Espinoza\nkg:2071 is Yūdai Yamaguchi\nkg:4134 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:5280/kg:2071 .\",\n      \"?film kg:5040/kg:0938 .\",\n      \"?film kg:2352/kg:4134 .\",\n      \"?film kg:2352/kg:0869 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57/wd:Q4023328 . ?film wdt:P58/wd:Q5836844 . ?film wdt:P1040/wd:Q5658534 . ?film wdt:P1040/wd:Q4022902 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor ?executiveProducer ?editor WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Pietà\\\"@en.\",\n    \"  ?film wdt:P57 wd:Q1086964.\",\n    \"  ?filmEditor wdt:P106 wd:Q3393462.\",\n    \"  ?filmEditor wdt:P161 wd:Q1086964.\",\n    \"  ?executiveProducer wdt:P106 wd:Q574106.\",\n    \"  ?executiveProducer wdt:P161 wd:Q1086964.\",\n    \"  ?editor wdt:P106 wd:Q3393462.\",\n    \"  ?editor wdt:P161 wd:Q1086964.\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?filmEditor ?executiveProducer ?editor WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Pietà\"@en. ?film wdt:P57 wd:Q1086964. ?filmEditor wdt:P106 wd:Q3393462. ?filmEditor wdt:P161 wd:Q1086964. ?executiveProducer wdt:P106 wd:Q574106. ?executiveProducer wdt:P161 wd:Q1086964. ?editor wdt:P106 wd:Q3393462. ?editor wdt:P161 wd:Q1086964. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855 .\",\n      \"?filmEditor wdt:P1040 wd:Q483197 .\",\n      \"?filmEditor wdt:P1431 wd:Q483197 .\",\n      \"?filmEditor wdt:P1040 wd:Q484679 .\",\n      \"?filmEditor wdt:P1431 wd:Q484679 .\",\n      \"?filmEditor wdt:P1040 wd:Q13471372 .\",\n      \"?filmEditor wdt:P1431 wd:Q13471372 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855 . ?filmEditor wdt:P1040 wd:Q483197 . ?filmEditor wdt:P1431 wd:Q483197 . ?filmEditor wdt:P1040 wd:Q484679 . ?filmEditor wdt:P1431 wd:Q484679 . ?filmEditor wdt:P1040 wd:Q13471372 . ?filmEditor wdt:P1431 wd:Q13471372 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3387 is Moebius\nkg:7835 is screenwriter\nkg:1068 is film editor\nkg:8387 is executive producer\nkg:3329 is film editor\nkg:2502 is Dream\nkg:0214 is occupation\nkg:5744 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0214/kg:1068 .\",\n      \"?resource kg:0214/kg:3398 .\",\n      \"?resource kg:0214/kg:8387 .\",\n      \"?resource kg:0214/kg:3387 .\",\n      \"?resource kg:0214/kg:2502 .\",\n      \"?resource kg:0214/kg:5744 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106/wdt:P1040 . ?resource wdt:P106/kg:3398 . ?resource wdt:P106/wdt:P1431 . ?resource wdt:P106/wd:Q13471372 . ?resource wdt:P106/wd:Q484679 . ?resource wdt:P106/wd:Q483197 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducerExecutive WHERE {\",\n    \"  ?filmProducerExecutive wdt:P106 wd:Q33988.\",\n    \"  ?filmProducerExecutive p:P577 ?statement1.\",\n    \"  ?statement1 ps:P577 wd:Q2464654.\",\n    \"  ?filmProducerExecutive p:P50 wd:Q2464654.\",\n    \"  ?filmProducerExecutive p:P31 wd:Q289244.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmProducerExecutive WHERE { ?filmProducerExecutive wdt:P106 wd:Q33988. ?filmProducerExecutive p:P577 ?statement1. ?statement1 ps:P577 wd:Q2464654. ?filmProducerExecutive p:P50 wd:Q2464654. ?filmProducerExecutive p:P31 wd:Q289244. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n      \"?filmProducer wdt:P106 wd:Q3282637 .\",\n      \"?filmProducer wdt:P1431 wd:Q5437360 .\",\n      \"?filmProducer wdt:P1431 wd:Q12813010 .\",\n      \"?filmProducer wdt:P1431 wd:Q6084069 .\",\n      \"?filmProducer wdt:P58 wd:Q5437360 .\",\n      \"?filmProducer wdt:P58 wd:Q12813010 .\",\n      \"?filmProducer wdt:P58 wd:Q6084069 .\",\n      \"?filmProducer wdt:P1040 wd:Q5437360 .\",\n      \"?filmProducer wdt:P1040 wd:Q12813010 .\",\n      \"?filmProducer wdt:P1040 wd:Q6084069 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3282637 . ?filmProducer wdt:P1431 wd:Q5437360 . ?filmProducer wdt:P1431 wd:Q12813010 . ?filmProducer wdt:P1431 wd:Q6084069 . ?filmProducer wdt:P58 wd:Q5437360 . ?filmProducer wdt:P58 wd:Q12813010 . ?filmProducer wdt:P58 wd:Q6084069 . ?filmProducer wdt:P1040 wd:Q5437360 . ?filmProducer wdt:P1040 wd:Q12813010 . ?filmProducer wdt:P1040 wd:Q6084069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3740 is The Waiting Room\nkg:5795 is film editor\nkg:4183 is screenwriter\nkg:3912 is executive producer\nkg:7053 is film producer\nkg:6751 is Fate\nkg:9994 is The Confession\nkg:0676 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3912 kg:7053 .\",\n      \"?resource kg:5795 kg:6751 .\",\n      \"?resource kg:4183 kg:9994 .\",\n      \"?resource kg:3912 kg:3740 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q3282637 . ?resource wdt:P1040 wd:Q5437360 . ?resource wdt:P58 wd:Q12813010 . ?resource wdt:P1431 wd:Q6084069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q109628 wdt:P3547 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q33964.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q109628 wdt:P3547 ?spouse. ?spouse wdt:P106 wd:Q33964. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"wd:Q312258 wdt:P26 ?spouse.\",\n      \"?spouse wdt:P58 wd:Q2493884.\",\n      \"?spouse wdt:P58 wd:Q2298257.\",\n      \"?spouse wdt:P1040 wd:Q63993096.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q312258 wdt:P26 ?spouse. ?spouse wdt:P58 wd:Q2493884. ?spouse wdt:P58 wd:Q2298257. ?spouse wdt:P1040 wd:Q63993096. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5738 is The Gleaners and I\nkg:9940 is screenwriter\nkg:1497 is Vagabond\nkg:7127 is film editor\nkg:5049 is spouse\nkg:9301 is influenced by\nkg:9335 is Varda by Agnès\nkg:2935 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:9940 kg:1497 .\",\n      \"?writer kg:7127 kg:1497 .\",\n      \"?writer kg:9940 kg:5738 .\",\n      \"?writer kg:7127 kg:5738 .\",\n      \"?writer kg:9940 kg:9335 .\",\n      \"?writer kg:7127 kg:9335 .\",\n      \"?writer kg:5049 kg:2935 .\",\n      \"?writer kg:9301 kg:2935 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q2298257 . ?writer wdt:P1040 wd:Q2298257 . ?writer wdt:P58 wd:Q2493884 . ?writer wdt:P1040 wd:Q2493884 . ?writer wdt:P58 wd:Q63993096 . ?writer wdt:P1040 wd:Q63993096 . ?writer wdt:P26 wd:Q312258 . ?writer wdt:P737 wd:Q312258 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?star ?director ?composer WHERE {\",\n    \"  wd:Q1067284 wdt:P31 wd:Q5.\",\n    \"  wd:Q1067284 wdt:P179 ?writer.\",\n    \"  wd:Q1067284 wdt:P106 ?star.\",\n    \"  wd:Q1067284 wdt:P57 ?director.\",\n    \"  wd:Q1067284 wdt:P80 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?star ?director ?composer WHERE { wd:Q1067284 wdt:P31 wd:Q5. wd:Q1067284 wdt:P179 ?writer. wd:Q1067284 wdt:P106 ?star. wd:Q1067284 wdt:P57 ?director. wd:Q1067284 wdt:P80 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q166739.\",\n      \"?director wdt:P86 wd:Q1140317.\",\n      \"?director wdt:P58 wd:Q109116.\",\n      \"?director wdt:P161 wd:Q109116.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q166739. ?director wdt:P86 wd:Q1140317. ?director wdt:P58 wd:Q109116. ?director wdt:P161 wd:Q109116. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9543 is director\nkg:7212 is The Floorwalker\nkg:8432 is composer\nkg:2179 is screenwriter\nkg:1132 is Shoulder Arms\nkg:2300 is cast member\nkg:8169 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9543 kg:7212 .\",\n      \"?resource kg:9543 kg:8169 .\",\n      \"?resource kg:8432 kg:1132 .\",\n      \"?resource kg:8432 kg:8169 .\",\n      \"?resource kg:2179 kg:1132 .\",\n      \"?resource kg:2179 kg:8169 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q166739 . ?resource wdt:P57 wd:Q109116 . ?resource wdt:P86 wd:Q1140317 . ?resource wdt:P86 wd:Q109116 . ?resource wdt:P58 wd:Q1140317 . ?resource wdt:P58 wd:Q109116 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q882"]]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?film { wd:Q1549608 wd:Q27367 }\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q33949 .\",\n    \"  ?resource wdt:P175 wd:Q182467 .\",\n    \"  ?resource wdt:P175 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q1549608 wd:Q27367 } ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q33949 . ?resource wdt:P175 wd:Q182467 . ?resource wdt:P175 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q1165050 .\",\n      \"?person wdt:P58 wd:Q1165050 .\",\n      \"?person wdt:P1040 wd:Q1165050 .\",\n      \"?person wdt:P344 wd:Q1165050 .\",\n      \"?person wdt:P57 wd:Q192115 .\",\n      \"?person wdt:P58 wd:Q192115 .\",\n      \"?person wdt:P1040 wd:Q192115 .\",\n      \"?person wdt:P344 wd:Q192115 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q1165050 . ?person wdt:P58 wd:Q1165050 . ?person wdt:P1040 wd:Q1165050 . ?person wdt:P344 wd:Q1165050 . ?person wdt:P57 wd:Q192115 . ?person wdt:P58 wd:Q192115 . ?person wdt:P1040 wd:Q192115 . ?person wdt:P344 wd:Q192115 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3070 is Planet Terror\nkg:6501 is director\nkg:9873 is screenwriter\nkg:3834 is film editor\nkg:9590 is Sin City\nkg:9726 is cast member\nkg:0459 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6501 kg:3070 .\",\n      \"?resource kg:9873 kg:3070 .\",\n      \"?resource kg:3834 kg:3070 .\",\n      \"?resource kg:0459 kg:3070 .\",\n      \"?resource kg:6501 kg:9590 .\",\n      \"?resource kg:9873 kg:9590 .\",\n      \"?resource kg:3834 kg:9590 .\",\n      \"?resource kg:0459 kg:9590 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q1165050 . ?resource wdt:P58 wd:Q1165050 . ?resource wdt:P1040 wd:Q1165050 . ?resource wdt:P344 wd:Q1165050 . ?resource wdt:P57 wd:Q192115 . ?resource wdt:P58 wd:Q192115 . ?resource wdt:P1040 wd:Q192115 . ?resource wdt:P344 wd:Q192115 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?star WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 ?cinematographer.\",\n    \"  ?film wdt:P175 ?star.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?star WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 ?cinematographer. ?film wdt:P175 ?star. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1432710 is Full Frontal\nwd:Q2082586 is Schizopolis\nwd:Q730888 is Contagion\nwd:Q17893055 is Magic Mike XXL\nwdt:P161 is cast member\nwd:Q205447 is Ocean's Eleven\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P161 wd:Q730888.\",\n      \"?cinematographer wdt:P161 wd:Q2082586.\",\n      \"?cinematographer wdt:P161 wd:Q205447.\",\n      \"?cinematographer wdt:P161 wd:Q1432710.\",\n      \"?cinematographer wdt:P1040 wd:Q17893055.\",\n      \"?cinematographer wdt:P1431 wd:Q17893055.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P161 wd:Q730888. ?cinematographer wdt:P161 wd:Q2082586. ?cinematographer wdt:P161 wd:Q205447. ?cinematographer wdt:P161 wd:Q1432710. ?cinematographer wdt:P1040 wd:Q17893055. ?cinematographer wdt:P1431 wd:Q17893055. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9428 is film editor\nkg:3667 is executive producer\nkg:3690 is Full Frontal\nkg:8732 is Schizopolis\nkg:9739 is Contagion\nkg:3328 is Magic Mike XXL\nkg:5089 is cast member\nkg:5335 is Ocean's Eleven\nkg:1618 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9428 kg:9739 .\",\n      \"?resource kg:9428 kg:8732 .\",\n      \"?resource kg:9428 kg:5335 .\",\n      \"?resource kg:9428 kg:3690 .\",\n      \"?resource kg:3667 kg:3328 .\",\n      \"?resource kg:1618 kg:3328 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q730888 . ?resource wdt:P1040 wd:Q2082586 . ?resource wdt:P1040 wd:Q205447 . ?resource wdt:P1040 wd:Q1432710 . ?resource wdt:P1431 wd:Q17893055 . ?resource wdt:P344 wd:Q17893055 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  wd:Q10569428 wdt:P31 wd:Q7397.\",\n    \"  wd:Q10569428 wdt:P170 ?cinematographer.\",\n    \"  wd:Q10569428 wdt:P171 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?editor WHERE { wd:Q10569428 wdt:P31 wd:Q7397. wd:Q10569428 wdt:P170 ?cinematographer. wd:Q10569428 wdt:P171 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P1040 wd:Q3485595.\",\n      \"?cinematographer wdt:P161 wd:Q56756907.\",\n      \"?cinematographer wdt:P161 wd:Q2085.\",\n      \"?cinematographer wdt:P161 wd:Q507285.\",\n      \"?cinematographer wdt:P161 wd:Q114819.\",\n      \"?cinematographer wdt:P161 wd:Q862058.\",\n      \"?cinematographer wdt:P161 wd:Q3641257.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P1040 wd:Q3485595. ?cinematographer wdt:P161 wd:Q56756907. ?cinematographer wdt:P161 wd:Q2085. ?cinematographer wdt:P161 wd:Q507285. ?cinematographer wdt:P161 wd:Q114819. ?cinematographer wdt:P161 wd:Q862058. ?cinematographer wdt:P161 wd:Q3641257. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is film editor\nkg:3903 is Lumière and Company\nkg:4169 is Inland Empire\nkg:8978 is Dune\nkg:3018 is Twin Peaks\nkg:0127 is Boat\nkg:1543 is Six Men Getting Sick\nkg:6545 is cast member\nkg:0514 is The Black Ghiandola\nkg:4111 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n      \"?cinematographer kg:2731 kg:1543.\",\n      \"?cinematographer kg:6545 kg:0514.\",\n      \"?cinematographer kg:6545 kg:3018.\",\n      \"?cinematographer kg:6545 kg:3903.\",\n      \"?cinematographer kg:6545 kg:8978.\",\n      \"?cinematographer kg:6545 kg:4169.\",\n      \"?cinematographer kg:6545 kg:0127.\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P1040 wd:Q3485595. ?cinematographer wdt:P161 wd:Q56756907. ?cinematographer wdt:P161 wd:Q2085. ?cinematographer wdt:P161 wd:Q507285. ?cinematographer wdt:P161 wd:Q114819. ?cinematographer wdt:P161 wd:Q862058. ?cinematographer wdt:P161 wd:Q3641257. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?editor ?director WHERE {\",\n    \"  wd:Q1234567 wdt:P1082 ?writer.\",\n    \"  wd:Q1234567 wdt:P1082 ?editor.\",\n    \"  wd:Q1234567 wdt:P1082 ?director.\",\n    \"  wd:Q1234567 wdt:P19 ?spouse.\",\n    \"  wd:Q1234567 wdt:P1082 ?influenced.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?editor ?director WHERE { wd:Q1234567 wdt:P1082 ?writer. wd:Q1234567 wdt:P1082 ?editor. wd:Q1234567 wdt:P1082 ?director. wd:Q1234567 wdt:P19 ?spouse. wd:Q1234567 wdt:P1082 ?influenced. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P57 wd:Q2493884.\",\n      \"?writer wdt:P58 wd:Q2298257.\",\n      \"?writer wdt:P1040 wd:Q2298257.\",\n      \"?writer wdt:P1040 wd:Q2493884.\",\n      \"?writer wdt:P26 wd:Q312258.\",\n      \"?writer wdt:P737 wd:Q312258.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P57 wd:Q2493884. ?writer wdt:P58 wd:Q2298257. ?writer wdt:P1040 wd:Q2298257. ?writer wdt:P1040 wd:Q2493884. ?writer wdt:P26 wd:Q312258. ?writer wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6839 is director\nkg:3502 is The Gleaners and I\nkg:7097 is screenwriter\nkg:4445 is Vagabond\nkg:8802 is film editor\nkg:4180 is spouse\nkg:4212 is influenced by\nkg:8516 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3502 kg:7097 .\",\n      \"?resource kg:4445 kg:6839 .\",\n      \"?resource kg:4445 kg:8802 .\",\n      \"?resource kg:4180 ?spouse .\",\n      \"?resource kg:4212 kg:8516 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wd:Q2493884 wdt:P58 . ?resource wd:Q2298257 wdt:P57 . ?resource wd:Q2298257 wdt:P1040 . ?resource wdt:P26 ?spouse . ?resource wdt:P737 wd:Q312258 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q106724985 wdt:P31 wd:Q33968.\",\n    \"  wd:Q106724985 p:P106 ?statement.\",\n    \"  ?statement ps:P106 wd:Q33968.\",\n    \"  ?statement prov:wasDerivedFrom ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q106724985 wdt:P31 wd:Q33968. wd:Q106724985 p:P106 ?statement. ?statement ps:P106 wd:Q33968. ?statement prov:wasDerivedFrom ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1040 wd:Q12813010 .\",\n      \"?person wdt:P1431 wd:Q12813010 .\",\n      \"?person wdt:P58 wd:Q6099428 .\",\n      \"?person wdt:P58 wd:Q6084069 .\",\n      \"?person wdt:P58 wd:Q5265241 .\",\n      \"?person wdt:P344 wd:Q12813010 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P1040 wd:Q12813010 . ?person wdt:P1431 wd:Q12813010 . ?person wdt:P58 wd:Q6099428 . ?person wdt:P58 wd:Q6084069 . ?person wdt:P58 wd:Q5265241 . ?person wdt:P344 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5345 is The Third Page\nkg:0514 is The Waiting Room\nkg:6264 is film editor\nkg:5793 is screenwriter\nkg:3037 is executive producer\nkg:4320 is Destiny\nkg:4433 is The Confession\nkg:9840 is cast member\nkg:6861 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6264 kg:4433 .\",\n      \"?resource kg:5793 kg:4032 .\",\n      \"?resource kg:3037 kg:4433 .\",\n      \"?resource kg:6861 kg:4433 .\",\n      \"?resource kg:5793 kg:0514 .\",\n      \"?resource kg:5793 kg:5345 .\",\n      \"?resource kg:5793 kg:4320 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q12813010 . ?resource wdt:P58 kg:4032 . ?resource wdt:P1431 wd:Q12813010 . ?resource wdt:P344 wd:Q12813010 . ?resource wdt:P58 wd:Q6084069 . ?resource wdt:P58 wd:Q6099428 . ?resource wdt:P58 wd:Q5265241 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor ?writer ?director WHERE {\",\n    \"  wd:Q1064287 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1064287 p:P577 ?editStatement.\",\n    \"  ?editStatement ps:P577 ?filmEditor.\",\n    \"  wd:Q1064287 p:P50 ?writeStatement.\",\n    \"  ?writeStatement ps:P50 ?writer.\",\n    \"  wd:Q1064287 p:P57 ?directStatement.\",\n    \"  ?directStatement ps:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor ?writer ?director WHERE { wd:Q1064287 wdt:P31 wd:Q11424. wd:Q1064287 p:P577 ?editStatement. ?editStatement ps:P577 ?filmEditor. wd:Q1064287 p:P50 ?writeStatement. ?writeStatement ps:P50 ?writer. wd:Q1064287 p:P57 ?directStatement. ?directStatement ps:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855.\",\n      \"?filmEditor wdt:P57 wd:Q199039.\",\n      \"?filmEditor wdt:P57 wd:Q45602.\",\n      \"?filmEditor wdt:P57 wd:Q166739.\",\n      \"?filmEditor wdt:P57 wd:Q2445896.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855. ?filmEditor wdt:P57 wd:Q199039. ?filmEditor wdt:P57 wd:Q45602. ?filmEditor wdt:P57 wd:Q166739. ?filmEditor wdt:P57 wd:Q2445896. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3703 is director\nkg:1897 is The Floorwalker\nkg:1977 is Work\nkg:2020 is screenwriter\nkg:4025 is film editor\nkg:2136 is Pay Day\nkg:7327 is film editor\nkg:8552 is occupation\nkg:8876 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4025 ?film .\",\n      \"?resource kg:2020 ?film .\",\n      \"?resource kg:3703 ?film .\",\n      \"VALUES ?film { kg:1897 kg:1977 kg:2136 kg:8876 }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 ?film . ?resource wdt:P58 ?film . ?resource wdt:P57 ?film . VALUES ?film { wd:Q166739 wd:Q2445896 wd:Q199039 wd:Q45602 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor WHERE {\",\n    \"  wd:Q107246985 wdt:P31 wd:Q107246985.\",\n    \"  wd:Q107246985 p:P161 ?writerStatement.\",\n    \"  ?writerStatement ps:P161 ?writer.\",\n    \"  wd:Q107246985 p:P31 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P31 ?executiveProducer.\",\n    \"  wd:Q107246985 p:P31 ?editorStatement.\",\n    \"  ?editorStatement ps:P31 ?editor.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer ?executiveProducer ?editor WHERE { wd:Q107246985 wdt:P31 wd:Q107246985. wd:Q107246985 p:P161 ?writerStatement. ?writerStatement ps:P161 ?writer. wd:Q107246985 p:P31 ?executiveProducerStatement. ?executiveProducerStatement ps:P31 ?executiveProducer. wd:Q107246985 p:P31 ?editorStatement. ?editorStatement ps:P31 ?editor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1431 wd:Q12813010.\",\n      \"?person wdt:P1040 wd:Q12813010.\",\n      \"?person wdt:P58 wd:Q6084069.\",\n      \"?person wdt:P1431 wd:Q6084069.\",\n      \"?person wdt:P1040 wd:Q6084069.\",\n      \"?person wdt:P58 wd:Q5437360.\",\n      \"?person wdt:P1431 wd:Q5437360.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P1431 wd:Q12813010. ?person wdt:P1040 wd:Q12813010. ?person wdt:P58 wd:Q6084069. ?person wdt:P1431 wd:Q6084069. ?person wdt:P1040 wd:Q6084069. ?person wdt:P58 wd:Q5437360. ?person wdt:P1431 wd:Q5437360. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7462 is The Waiting Room\nkg:7206 is film editor\nkg:8079 is screenwriter\nkg:4979 is executive producer\nkg:0563 is Fate\nkg:6844 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4979 kg:6844 .\",\n      \"?resource kg:7206 kg:6844 .\",\n      \"?resource kg:8079 kg:7462 .\",\n      \"?resource kg:4979 kg:0563 .\",\n      \"?resource kg:7206 kg:0563 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q12813010 . ?resource wdt:P1040 wd:Q12813010 . ?resource wdt:P58 wd:Q6084069 . ?resource wdt:P1431 wd:Q5437360 . ?resource wdt:P1040 wd:Q5437360 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q187261"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P1680 ?writer.\",\n    \"  VALUES ?director {wd:Q98464 wd:Q106347 wd:Q102967 wd:Q102959 wd:Q102958}.\",\n    \"  VALUES ?writer {wd:Q98464 wd:Q106347 wd:Q102967 wd:Q102959 wd:Q102958}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P1680 ?writer. VALUES ?director {wd:Q98464 wd:Q106347 wd:Q102967 wd:Q102959 wd:Q102958}. VALUES ?writer {wd:Q98464 wd:Q106347 wd:Q102967 wd:Q102959 wd:Q102958}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q982339 .\",\n      \"?film wdt:P57 wd:Q116760 .\",\n      \"?film wdt:P57 wd:Q1033656 .\",\n      \"?film wdt:P57 wd:Q7546 .\",\n      \"?film wdt:P57 wd:Q1365463 .\",\n      \"?film wdt:P58 wd:Q982339 .\",\n      \"?film wdt:P58 wd:Q116760 .\",\n      \"?film wdt:P58 wd:Q1033656 .\",\n      \"?film wdt:P58 wd:Q7546 .\",\n      \"?film wdt:P58 wd:Q1365463 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q982339 . ?film wdt:P57 wd:Q116760 . ?film wdt:P57 wd:Q1033656 . ?film wdt:P57 wd:Q7546 . ?film wdt:P57 wd:Q1365463 . ?film wdt:P58 wd:Q982339 . ?film wdt:P58 wd:Q116760 . ?film wdt:P58 wd:Q1033656 . ?film wdt:P58 wd:Q7546 . ?film wdt:P58 wd:Q1365463 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9808 is director\nkg:0106 is Jörn Donner\nkg:0263 is Vilgot Sjöman\nkg:6825 is film\nkg:0265 is screenwriter\nkg:2442 is Hans Alfredson\nkg:9772 is instance of\nkg:3926 is Ingmar Bergman\nkg:6401 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:9772 kg:6825 .\",\n      \"?film kg:9808/kg:0106 .\",\n      \"?film kg:9808/kg:0263 .\",\n      \"?film kg:9808/kg:2442 .\",\n      \"?film kg:9808/kg:3926 .\",\n      \"?film kg:9808/kg:6401 .\",\n      \"?film kg:0265/kg:0106 .\",\n      \"?film kg:0265/kg:0263 .\",\n      \"?film kg:0265/kg:2442 .\",\n      \"?film kg:0265/kg:3926 .\",\n      \"?film kg:0265/kg:6401 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57/wd:Q982339 . ?film wdt:P57/wd:Q116760 . ?film wdt:P57/wd:Q1033656 . ?film wdt:P57/wd:Q7546 . ?film wdt:P57/wd:Q1365463 . ?film wdt:P58/wd:Q982339 . ?film wdt:P58/wd:Q116760 . ?film wdt:P58/wd:Q1033656 . ?film wdt:P58/wd:Q7546 . ?film wdt:P58/wd:Q1365463 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33949.\",\n    \"  ?person wdt:P1082 wd:Q574106.\",\n    \"  ?person wdt:P1082 wd:Q1080237.\",\n    \"  ?person wdt:P1082 wd:Q931944.\",\n    \"  ?person wdt:P1082 wd:Q566644.\",\n    \"  ?person wdt:P1082 wd:Q764946.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33949. ?person wdt:P1082 wd:Q574106. ?person wdt:P1082 wd:Q1080237. ?person wdt:P1082 wd:Q931944. ?person wdt:P1082 wd:Q566644. ?person wdt:P1082 wd:Q764946. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P58 wd:Q6084069 .\",\n      \"?person wdt:P1040 wd:Q6084069 .\",\n      \"?person wdt:P344 wd:Q6084069 .\",\n      \"?person wdt:P58 wd:Q5265241 .\",\n      \"?person wdt:P1431 wd:Q5265241 .\",\n      \"?person wdt:P344 wd:Q5265241 .\",\n      \"?person wdt:P58 wd:Q12813010 .\",\n      \"?person wdt:P1431 wd:Q12813010 .\",\n      \"?person wdt:P344 wd:Q12813010 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P58 wd:Q6084069 . ?person wdt:P1040 wd:Q6084069 . ?person wdt:P344 wd:Q6084069 . ?person wdt:P58 wd:Q5265241 . ?person wdt:P1431 wd:Q5265241 . ?person wdt:P344 wd:Q5265241 . ?person wdt:P58 wd:Q12813010 . ?person wdt:P1431 wd:Q12813010 . ?person wdt:P344 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1850 is The Waiting Room\nkg:1459 is film editor\nkg:1256 is screenwriter\nkg:1368 is executive producer\nkg:5444 is Destiny\nkg:9231 is The Confession\nkg:6630 is cast member\nkg:8325 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1459 kg:1850 .\",\n      \"?resource kg:1256 kg:1850 .\",\n      \"?resource kg:8325 kg:1850 .\",\n      \"?resource kg:1368 kg:1850 .\",\n      \"?resource kg:1459 kg:5444 .\",\n      \"?resource kg:8325 kg:9231 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q6084069 . ?resource wdt:P58 wd:Q6084069 . ?resource wdt:P344 wd:Q6084069 . ?resource wdt:P1431 wd:Q6084069 . ?resource wdt:P1040 wd:Q5265241 . ?resource wdt:P344 wd:Q12813010 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorSpouse WHERE {\",\n    \"  ?filmEditor wdt:P26 ?spouse.\",\n    \"  ?filmEditor wdt:P106 wd:Q385479.\",\n    \"  ?spouse wdt:P31 wd:Q5.\",\n    \"  ?filmEditorSpouse wdt:P31 wd:Q2119125.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q385479.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q1086291.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q1086291.\",\n    \"  ?filmEditorSpouse wdt:P31 wd:Q5.\",\n    \"  ?filmEditorSpouse wdt:P407 wd:Q188.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q294535.\"\n    ]\n}", "normal_query": "SELECT ?filmEditorSpouse WHERE { ?filmEditor wdt:P26 ?spouse. ?filmEditor wdt:P106 wd:Q385479. ?spouse wdt:P31 wd:Q5. ?filmEditorSpouse wdt:P31 wd:Q2119125. ?filmEditorSpouse wdt:P106 wd:Q385479. ?filmEditorSpouse wdt:P106 wd:Q1086291. ?filmEditorSpouse wdt:P106 wd:Q1086291. ?filmEditorSpouse wdt:P31 wd:Q5. ?filmEditorSpouse wdt:P407 wd:Q188. ?filmEditorSpouse wdt:P106 wd:Q294535. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"VALUES ?film { wd:Q878673 wd:Q567519 wd:Q543382 wd:Q327427 wd:Q570483 }\",\n      \"?film wdt:P58 ?spouse.\",\n      \"?spouse wdt:P26 ?editor.\",\n      \"?editor wdt:P1040 wd:Q7042855.\"\n    ]\n  }\n ", "normal_query": "SELECT ?spouse WHERE { VALUES ?film { wd:Q878673 wd:Q567519 wd:Q543382 wd:Q327427 wd:Q570483 } ?film wdt:P58 ?spouse. ?spouse wdt:P26 ?editor. ?editor wdt:P1040 wd:Q7042855. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2774 is Katzelmacher\nkg:1944 is screenwriter\nkg:7713 is film editor\nkg:8916 is spouse\nkg:0195 is In a Year of 13 Moons\nkg:7392 is Whity\nkg:5145 is film editor\nkg:1608 is The City Tramp\nkg:8858 is occupation\nkg:1345 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"VALUES ?film { kg:2774 kg:1608 kg:1944 kg:7392 kg:0195 }.\",\n      \"?person kg:8858 kg:7713 .\",\n      \"?person kg:8916 ?spouse .\",\n      \"?spouse kg:8858 kg:1944 .\",\n      \"?film kg:1944 ?person .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { VALUES ?film { wd:Q567519 wd:Q878673 wdt:P58 wd:Q327427 wd:Q570483 }. ?person wdt:P106 wdt:P1040 . ?person wdt:P26 ?spouse . ?spouse wdt:P106 wdt:P58 . ?film wdt:P58 ?person . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?director wdt:P31 wd:Q5.\",\n    \"  ?director wdt:P2868 ?film.\",\n    \"  ?film (wdt:P407|wdt:P921) wd:Q1080056.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  VALUES ?film {wd:Q1080056 wd:Q174400 wd:Q9244} .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P31 wd:Q5. ?director wdt:P2868 ?film. ?film (wdt:P407|wdt:P921) wd:Q1080056. ?film wdt:P31 wd:Q11424. VALUES ?film {wd:Q1080056 wd:Q174400 wd:Q9244} . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P21 wd:Q6581072 .\",\n      \"?director wdt:P57 wd:Q497617 .\",\n      \"?director wdt:P57 wd:Q158069 .\",\n      \"?director wdt:P57 wd:Q156497 .\",\n      \"?director wdt:P58 wd:Q497617 .\",\n      \"?director wdt:P58 wd:Q158069 .\",\n      \"?director wdt:P58 wd:Q156497 .\",\n      \"?director wdt:P1040 wd:Q497617 .\",\n      \"?director wdt:P1040 wd:Q158069 .\",\n      \"?director wdt:P1040 wd:Q156497 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P21 wd:Q6581072 . ?director wdt:P57 wd:Q497617 . ?director wdt:P57 wd:Q158069 . ?director wdt:P57 wd:Q156497 . ?director wdt:P58 wd:Q497617 . ?director wdt:P58 wd:Q158069 . ?director wdt:P58 wd:Q156497 . ?director wdt:P1040 wd:Q497617 . ?director wdt:P1040 wd:Q158069 . ?director wdt:P1040 wd:Q156497 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9010 is director\nkg:5403 is screenwriter\nkg:4328 is film editor\nkg:3823 is female\nkg:1652 is Triumph of the Will\nkg:5606 is Olympia\nkg:3805 is sex or gender\nkg:9681 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director kg:9010 kg:1652, kg:5606, kg:3805.\",\n      \"?director kg:4328 kg:1652, kg:5606, kg:3805.\",\n      \"?director kg:5403 kg:1652, kg:5606, kg:3805.\",\n      \"?director kg:9681 ?film.\",\n      \"?director kg:3823 kg:3805.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q156497, wd:Q158069, wdt:P21. ?director wdt:P1040 wd:Q156497, wd:Q158069, wdt:P21. ?director wdt:P58 wd:Q156497, wd:Q158069, wdt:P21. ?director wd:Q497617 ?film. ?director wd:Q6581072 wdt:P21. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n    \"  ?writerDirector wdt:P106 wd:Q33987.\",\n    \"  ?writerDirector wdt:P57 wd:Q24646.\",\n    \"  ?writerDirector wdt:P1080 wd:Q11266.\",\n    \"  ?writerDirector wdt:P1080 wd:Q39644.\",\n    \"  ?writerDirector wdt:P1080 wd:Q57644.\",\n    \"  ?writerDirector wdt:P1080 wd:Q24646.\"\n    ]\n}", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector wdt:P106 wd:Q33987. ?writerDirector wdt:P57 wd:Q24646. ?writerDirector wdt:P1080 wd:Q11266. ?writerDirector wdt:P1080 wd:Q39644. ?writerDirector wdt:P1080 wd:Q57644. ?writerDirector wdt:P1080 wd:Q24646. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n      \"?writerDirector wdt:P58 wd:Q219155 .\", \"# Dawn of the Dead\",\n      \"?writerDirector wdt:P58 wd:Q198557 .\", \"# Monkey Shines\",\n      \"?writerDirector wdt:P58 wd:Q219170 .\", \"# Day of the Dead\",\n      \"?writerDirector wdt:P58 wd:Q1277329 .\", \"# Survival of the Dead\",\n      \"?writerDirector wdt:P57 wd:Q627060 .\", \"# The Crazies\",\n      \"?writerDirector wdt:P1040 wd:Q627060 .\", \"# The Crazies\",\n      \"?writerDirector wdt:P27 wd:Q16 .\", \"# Canada\"\n    ]\n  }\n ", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector wdt:P58 wd:Q219155 . ?writerDirector wdt:P58 wd:Q198557 . ?writerDirector wdt:P58 wd:Q219170 . ?writerDirector wdt:P58 wd:Q1277329 . ?writerDirector wdt:P57 wd:Q627060 . ?writerDirector wdt:P1040 wd:Q627060 . ?writerDirector wdt:P27 wd:Q16 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7971 is Survival of the Dead\nkg:3067 is director\nkg:8180 is Dawn of the Dead\nkg:7961 is Monkey Shines\nkg:3210 is screenwriter\nkg:0514 is film editor\nkg:5600 is Canada\nkg:8443 is country of citizenship\nkg:7526 is The Crazies\nkg:9199 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n      \"?writerDirector kg:3067 kg:7971 .\",\n      \"?writerDirector kg:3067 kg:8180 .\",\n      \"?writerDirector kg:3210 kg:7526 .\",\n      \"?writerDirector kg:3067 kg:7961 .\",\n      \"?writerDirector kg:3067 kg:9199 .\",\n      \"?writerDirector kg:8443 kg:5600 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector wdt:P57 wd:Q1277329 . ?writerDirector wdt:P57 wd:Q219155 . ?writerDirector wdt:P58 wd:Q627060 . ?writerDirector wdt:P57 wd:Q198557 . ?writerDirector wdt:P57 wd:Q219170 . ?writerDirector wdt:P27 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q51511"]]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n    \"  wd:Q1942680 wdt:P57 wd:Q328.\",\n    \"  wd:Q1942680 wdt:P106 wd:Q339695.\",\n    \"  ?director wdt:P106 wd:Q339695;\",\n    \"          wdt:P179 wd:Q1942680.\",\n    \"  ?executiveProducer wdt:P106 wd:Q106092;\",\n    \"                     wdt:P179 wd:Q1942680.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?executiveProducer WHERE { wd:Q1942680 wdt:P57 wd:Q328. wd:Q1942680 wdt:P106 wd:Q339695. ?director wdt:P106 wd:Q339695; wdt:P179 wd:Q1942680. ?executiveProducer wdt:P106 wd:Q106092; wdt:P179 wd:Q1942680. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q378013 .\",\n      \"?director wdt:P58 wd:Q378013 .\",\n      \"?director wdt:P57 wd:Q391143 .\",\n      \"?director wdt:P58 wd:Q391143 .\",\n      \"?director wdt:P57 wd:Q206182 .\",\n      \"?director wdt:P58 wd:Q206182 .\",\n      \"?director wdt:P57 wd:Q232108 .\",\n      \"?director wdt:P58 wd:Q232108 .\",\n      \"?director wdt:P1431 wd:Q206182 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q378013 . ?director wdt:P58 wd:Q378013 . ?director wdt:P57 wd:Q391143 . ?director wdt:P58 wd:Q391143 . ?director wdt:P57 wd:Q206182 . ?director wdt:P58 wd:Q206182 . ?director wdt:P57 wd:Q232108 . ?director wdt:P58 wd:Q232108 . ?director wdt:P1431 wd:Q206182 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9655 is Police Story 2\nkg:9361 is director\nkg:7514 is The Fearless Hyena\nkg:7818 is screenwriter\nkg:9685 is executive producer\nkg:0643 is Chinese Zodiac\nkg:7911 is 1911\nkg:0165 is Police Story", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:9361/kg:9685 kg:7911 .\",\n            \"?resource kg:9361/kg:9685 kg:0165 .\",\n            \"?resource kg:9361/kg:9685 kg:9655 .\",\n            \"?resource kg:9361/kg:9685 kg:0643 .\",\n            \"?resource kg:7818/kg:9685 kg:7514 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57/wdt:P1431 wd:Q206182 . ?resource wdt:P57/wdt:P1431 wd:Q594033 . ?resource wdt:P57/wdt:P1431 wd:Q378013 . ?resource wdt:P57/wdt:P1431 wd:Q391143 . ?resource wdt:P58/wdt:P1431 wd:Q232108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q283745.\",\n    \"  ?person wdt:P1416 wd:Q9348.\",\n    \"  ?person wdt:P1416 wd:Q13444.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q283745. ?person wdt:P1416 wd:Q9348. ?person wdt:P1416 wd:Q13444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P112 wd:Q7095994.\",\n      \"?person wdt:P108 wd:Q37033.\",\n      \"?person wdt:P108 wd:Q42944.\",\n      \"?person wdt:P108 wd:Q7432436.\",\n      \"?person wdt:P108 wd:Q7204713.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P112 wd:Q7095994. ?person wdt:P108 wd:Q37033. ?person wdt:P108 wd:Q42944. ?person wdt:P108 wd:Q7432436. ?person wdt:P108 wd:Q7204713. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1104 is employer\nkg:3032 is founded by\nkg:3783 is World Wide Web Consortium\nkg:9538 is CERN\nkg:2052 is Open Data Institute\nkg:0564 is Plessey\nkg:7797 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1104/kg:3032 kg:2052 .\",\n      \"?resource kg:1104 kg:9538 .\",\n      \"?resource kg:1104 kg:3783 .\",\n      \"?resource kg:1104 kg:7797 .\",\n      \"?resource kg:1104 kg:0564 .\"\n    ,\n  \"]\"\n  ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108/wdt:P112 wd:Q7095994 . ?resource wdt:P108 wd:Q42944 . ?resource wdt:P108 wd:Q37033 . ?resource wdt:P108 wd:Q7432436 . ?resource wdt:P108 wd:Q7204713 . ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10564287 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10564287 wdt:P577 ?date.\",\n    \"  wd:Q10564287 wdt:P179 ?film.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?date.\",\n    \"  ?film wdt:P161 wd:Q10564287.\",\n    \"  ?film wdt:P98 wd:Q10564287.\",\n    \"  ?film wdt:P30 wd:Q10564287.\",\n    \"  ?film wdt:P170 wd:Q10564287.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { wd:Q10564287 wdt:P31 wd:Q11424. wd:Q10564287 wdt:P577 ?date. wd:Q10564287 wdt:P179 ?film. ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?date. ?film wdt:P161 wd:Q10564287. ?film wdt:P98 wd:Q10564287. ?film wdt:P30 wd:Q10564287. ?film wdt:P170 wd:Q10564287. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q1687239 .\",\n      \"?film wdt:P57 wd:Q35979475 .\",\n      \"?film wdt:P57 wd:Q562108 .\",\n      \"?film wdt:P1040 wd:Q1687239 .\",\n      \"?film wdt:P1040 wd:Q35979475 .\",\n      \"?film wdt:P1040 wd:Q562108 .\",\n      \"?film wdt:P58 wd:Q1687239 .\",\n      \"?film wdt:P58 wd:Q35979475 .\",\n      \"?film wdt:P58 wd:Q562108 .\",\n      \"?film wdt:P162 wd:Q1687239 .\",\n      \"?film wdt:P162 wd:Q35979475 .\",\n      \"?film wdt:P162 wd:Q562108 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P57 wd:Q35979475 . ?film wdt:P57 wd:Q562108 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P58 wd:Q562108 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P162 wd:Q35979475 . ?film wdt:P162 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1894 is director\nkg:7564 is film\nkg:9245 is film editor\nkg:8695 is screenwriter\nkg:0840 is Ole John\nkg:9282 is instance of\nkg:5044 is producer\nkg:4421 is Jens Jørgen Thorsen\nkg:3691 is Jørgen Leth\nkg:2037 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:9282 kg:7564 .\",\n      \"?film kg:1894 kg:4421 .\",\n      \"?film kg:1894 kg:0840 .\",\n      \"?film kg:1894 kg:3691 .\",\n      \"?film kg:5044 kg:4421 .\",\n      \"?film kg:5044 kg:0840 .\",\n      \"?film kg:5044 kg:3691 .\",\n      \"?film kg:9245 kg:4421 .\",\n      \"?film kg:9245 kg:0840 .\",\n      \"?film kg:9245 kg:3691 .\",\n      \"?film kg:8695 kg:4421 .\",\n      \"?film kg:8695 kg:0840 .\",\n      \"?film kg:8695 kg:3691 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P57 wd:Q35979475 . ?film wdt:P57 wd:Q562108 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P162 wd:Q35979475 . ?film wdt:P162 wd:Q562108 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P58 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?editor ?director WHERE {\",\n    \"?film wdt:P31 wd:Q1048296.\",\n    \"?film wdt:P577 ?year.\",\n    \"FILTER(?year >= 2000).\",\n    \"?film wdt:P175 ?writer.\",\n    \"?film wdt:P134 ?cinematographer.\",\n    \"?film wdt:P161 ?star.\",\n    \"?film wdt:P98 ?editor.\",\n    \"?film wdt:P57 ?director.\",\n    \"?film wdt:P2067 ?executiveProducer.\",\n    \"?executiveProducer wdt:P345 ?fromDuskTillDawnSeries.\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?editor ?director WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?year. FILTER(?year >= 2000). ?film wdt:P175 ?writer. ?film wdt:P134 ?cinematographer. ?film wdt:P161 ?star. ?film wdt:P98 ?editor. ?film wdt:P57 ?director. ?film wdt:P2067 ?executiveProducer. ?executiveProducer wdt:P345 ?fromDuskTillDawnSeries. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P58 wd:Q192115 .\",\n      \"?writer wdt:P57 wd:Q192115 .\",\n      \"?writer wdt:P344 wd:Q192115 .\",\n      \"?writer wdt:P1040 wd:Q192115 .\",\n      \"?writer wdt:P161 wd:Q192115 .\",\n      \"?writer wdt:P58 wd:Q656357 .\",\n      \"?writer wdt:P57 wd:Q656357 .\",\n      \"?writer wdt:P344 wd:Q656357 .\",\n      \"?writer wdt:P1040 wd:Q656357 .\",\n      \"?writer wdt:P161 wd:Q656357 .\",\n      \"?writer wdt:P1431 wd:Q15622760 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q192115 . ?writer wdt:P57 wd:Q192115 . ?writer wdt:P344 wd:Q192115 . ?writer wdt:P1040 wd:Q192115 . ?writer wdt:P161 wd:Q192115 . ?writer wdt:P58 wd:Q656357 . ?writer wdt:P57 wd:Q656357 . ?writer wdt:P344 wd:Q656357 . ?writer wdt:P1040 wd:Q656357 . ?writer wdt:P161 wd:Q656357 . ?writer wdt:P1431 wd:Q15622760 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4649 is director\nkg:6169 is From Dusk till Dawn: The Series\nkg:0035 is screenwriter\nkg:0297 is film editor\nkg:8073 is executive producer\nkg:2632 is Sin City\nkg:0710 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:0764 is cast member\nkg:9651 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?writer WHERE {\",\n            \"?writer kg:0035 kg:2632 .\",\n            \"?writer kg:0035 kg:0710 .\",\n            \"?writer kg:4649 kg:2632 .\",\n            \"?writer kg:4649 kg:0710 .\",\n            \"?writer kg:0297 kg:2632 .\",\n            \"?writer kg:0297 kg:0710 .\",\n            \"?writer kg:8073 kg:6169 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 wd:Q192115 . ?writer wdt:P58 wd:Q656357 . ?writer wdt:P57 wd:Q192115 . ?writer wdt:P57 wd:Q656357 . ?writer wdt:P1040 wd:Q192115 . ?writer wdt:P1040 wd:Q656357 . ?writer wdt:P1431 wd:Q15622760 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q47284"]]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"  wd:Q10642875 wdt:P571 ?director.\",\n    \"  wd:Q10642875 wdt:P39 ?cinematographer.\",\n    \"  wd:Q10642875 wdt:P140 ?writer.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?cinematographer wdt:P31 wd:Q33999.\",\n    \"  ?writer wdt:P31 wd:Q33999.\",\n    \"  ?director wdt:P571 ?rioDasMortesDirector.\",\n    \"  ?cinematographer wdt:P571 ?liliMarleenCinematographer.\",\n    \"  ?writer wdt:P571 ?whityWriter.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { wd:Q10642875 wdt:P571 ?director. wd:Q10642875 wdt:P39 ?cinematographer. wd:Q10642875 wdt:P140 ?writer. ?director wdt:P31 wd:Q33999. ?cinematographer wdt:P31 wd:Q33999. ?writer wdt:P31 wd:Q33999. ?director wdt:P571 ?rioDasMortesDirector. ?cinematographer wdt:P571 ?liliMarleenCinematographer. ?writer wdt:P571 ?whityWriter. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"  wd:Q1699716 wdt:P57 ?director.\",\n    \"  wd:Q1699716 wdt:P344 ?cinematographer.\",\n    \"  wd:Q1699716 wdt:P58 ?writer.\",\n    \"  ?director wdt:P57 wd:Q823767.\",\n    \"  ?director wdt:P57 wd:Q686125.\",\n    \"  ?director wdt:P57 wd:Q327427.\",\n    \"  ?cinematographer wdt:P344 wd:Q823767.\",\n    \"  ?cinematographer wdt:P344 wd:Q686125.\",\n    \"  ?cinematographer wdt:P344 wd:Q327427.\",\n    \"  ?writer wdt:P58 wd:Q823767.\",\n    \"  ?writer wdt:P58 wd:Q686125.\",\n    \"  ?writer wdt:P58 wd:Q327427.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { wd:Q1699716 wdt:P57 ?director. wd:Q1699716 wdt:P344 ?cinematographer. wd:Q1699716 wdt:P58 ?writer. ?director wdt:P57 wd:Q823767. ?director wdt:P57 wd:Q686125. ?director wdt:P57 wd:Q327427. ?cinematographer wdt:P344 wd:Q823767. ?cinematographer wdt:P344 wd:Q686125. ?cinematographer wdt:P344 wd:Q327427. ?writer wdt:P58 wd:Q823767. ?writer wdt:P58 wd:Q686125. ?writer wdt:P58 wd:Q327427. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8314 is director\nkg:7878 is screenwriter\nkg:0343 is film editor\nkg:3960 is Whity\nkg:5269 is This Night\nkg:6224 is Rio das Mortes\nkg:1489 is Lili Marleen\nkg:9356 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n      \"?director kg:8314 kg:5269 .\",\n      \"?director kg:7878 kg:3960 .\",\n      \"?director kg:0343 kg:3960 .\",\n      \"?cinematographer kg:9356 kg:5269 .\",\n      \"?writer kg:7878 kg:5269 .\",\n      \"?writer kg:7878 kg:1489 .\",\n      \"?writer kg:0343 kg:1489 .\",\n      \"?cinematographer kg:9356 kg:1489 .\",\n      \"?director kg:8314 kg:6224 .\",\n      \"?director kg:7878 kg:6224 .\",\n      \"?director kg:0343 kg:6224 .\",\n      \"?cinematographer kg:9356 kg:6224 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { ?director wdt:P57 wd:Q1699716 . ?director wdt:P58 wd:Q327427 . ?director wdt:P1040 wd:Q327427 . ?cinematographer wdt:P344 wd:Q1699716 . ?writer wdt:P58 wd:Q1699716 . ?writer wdt:P58 wd:Q686125 . ?writer wdt:P1040 wd:Q686125 . ?cinematographer wdt:P344 wd:Q686125 . ?director wdt:P57 wd:Q823767 . ?director wdt:P58 wd:Q823767 . ?director wdt:P1040 wd:Q823767 . ?cinematographer wdt:P344 wd:Q823767 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1072465 wdt:P31 wd:Q386724.\",\n    \"  wd:Q1072465 p:P161 ?statement1.\",\n    \"  ?statement1 ps:P161 wd:Q19027.\",\n    \"  ?resource wdt:P31 wd:Q386724.\",\n    \"  ?resource wdt:P161 wd:Q19027.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1072465 wdt:P31 wd:Q386724. wd:Q1072465 p:P161 ?statement1. ?statement1 ps:P161 wd:Q19027. ?resource wdt:P31 wd:Q386724. ?resource wdt:P161 wd:Q19027. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P58 ?screenwriter.\",\n      \"?film wdt:P1040 ?editor.\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P344 ?cinematographer.\",\n      \"VALUES ?film {\",\n        \"wd:Q623051\",\n        \"wd:Q1903317\",\n        \"wd:Q2520777\",\n        \"wd:Q627060\"\n      \t\t,\n      \"?cinematographer wdt:P27 wd:Q30.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P58 ?screenwriter. ?film wdt:P1040 ?editor. ?film wdt:P57 ?director. ?film wdt:P344 ?cinematographer. VALUES ?film { wd:Q623051 wd:Q1903317 wd:Q2520777 wd:Q627060 ?cinematographer wdt:P27 wd:Q30. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2900 is director\nkg:3787 is screenwriter\nkg:6216 is film editor\nkg:2918 is Season of the Witch\nkg:7747 is Martin\nkg:3590 is Night of the Living Dead\nkg:9892 is country of citizenship\nkg:5164 is The Crazies\nkg:0476 is United States of America\nkg:5276 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2900 kg:2918 .\",\n      \"?resource kg:3787 kg:2918 .\",\n      \"?resource kg:6216 kg:2918 .\",\n      \"?resource kg:5276 kg:3590 .\",\n      \"?resource kg:9892 kg:0476 .\",\n      \"?resource kg:2900 kg:7747 .\",\n      \"?resource kg:3787 kg:7747 .\",\n      \"?resource kg:6216 kg:7747 .\",\n      \"?resource kg:2900 kg:5164 .\",\n      \"?resource kg:3787 kg:5164 .\",\n      \"?resource kg:6216 kg:5164 .\",\n      \"?resource kg:2900 kg:2918 .\",\n      \"?resource kg:3787 kg:2918 .\",\n      \"?resource kg:6216 kg:2918 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2520777 . ?resource wdt:P58 wd:Q2520777 . ?resource wdt:P1040 wd:Q2520777 . ?resource wdt:P344 wd:Q623051 . ?resource wdt:P27 wd:Q30 . ?resource wdt:P57 wd:Q1903317 . ?resource wdt:P58 wd:Q1903317 . ?resource wdt:P1040 wd:Q1903317 . ?resource wdt:P57 wd:Q627060 . ?resource wdt:P58 wd:Q627060 . ?resource wdt:P1040 wd:Q627060 . ?resource wdt:P57 wd:Q2520777 . ?resource wdt:P58 wd:Q2520777 . ?resource wdt:P1040 wd:Q2520777 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048297.\",\n    \"  ?film wdt:P577 ?year.\",\n    \"  FILTER(?year = \\\"1977-01-01\\\"^^xsd:date).\",\n    \"  ?film wdt:P161 ?director.\",\n    \"  ?film wdt:P2843 ?writer.\",\n    \"  ?film wdt:P582 ?cinematographer.\",\n    \"  ?film wdt:P179 ?title.\",\n    \"  FILTER(?title = \\\"Star Wars: Episode IV – A New Hope\\\").\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?director WHERE { ?film wdt:P31 wd:Q1048297. ?film wdt:P577 ?year. FILTER(?year = \"1977-01-01\"^^xsd:date). ?film wdt:P161 ?director. ?film wdt:P2843 ?writer. ?film wdt:P582 ?cinematographer. ?film wdt:P179 ?title. FILTER(?title = \"Star Wars: Episode IV – A New Hope\"). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P57 wd:Q613974.\",\n      \"?writer wdt:P58 wd:Q1869678.\",\n      \"?writer wdt:P1431 wd:Q17738.\",\n      \"?writer wdt:P344 wd:Q1869678.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P57 wd:Q613974. ?writer wdt:P58 wd:Q1869678. ?writer wdt:P1431 wd:Q17738. ?writer wdt:P344 wd:Q1869678. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7785 is director\nkg:9966 is screenwriter\nkg:7129 is executive producer\nkg:7238 is Anyone Lived in a Pretty How Town\nkg:6810 is Filmmaker\nkg:4958 is Look at Life\nkg:7820 is Star Wars: Episode IV – A New Hope\nkg:9841 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:9966 ?movie.\",\n      \"?writer kg:7785 ?movie.\",\n      \"?writer kg:7129 ?movie.\",\n      \"?movie kg:4958 .\",\n      \"?movie kg:7238 .\",\n      \"?movie kg:6810 .\",\n      \"?movie kg:7820 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P58 ?movie. ?writer wdt:P57 ?movie. ?writer wdt:P1431 ?movie. ?movie wd:Q1869678 . ?movie wd:Q613974 . ?movie wd:Q1415127 . ?movie wd:Q17738 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P168 ?producer.\",\n    \"  ?film wdt:P90 ?writer.\",\n    \"  ?film wdt:P30 ?editor.\",\n    \"  VALUES ?director { wd:Q242457 }\",\n    \"  VALUES ?producer { wd:Q186444 }\",\n    \"  VALUES ?writer { wd:Q974244 }\",\n    \"  VALUES ?editor { wd:Q306344 }\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P168 ?producer. ?film wdt:P90 ?writer. ?film wdt:P30 ?editor. VALUES ?director { wd:Q242457 } VALUES ?producer { wd:Q186444 } VALUES ?writer { wd:Q974244 } VALUES ?editor { wd:Q306344 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q562108 .\",\n      \"?film wdt:P162 wd:Q1687239 .\",\n      \"?film wdt:P58 wd:Q35979475 .\",\n      \"?film wdt:P1040 wd:Q1687239 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q562108 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P1040 wd:Q1687239 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6845 is director\nkg:6893 is film\nkg:5191 is film editor\nkg:1364 is screenwriter\nkg:8595 is Ole John\nkg:2033 is instance of\nkg:4053 is producer\nkg:0888 is Jens Jørgen Thorsen\nkg:4300 is Jørgen Leth\nkg:2577 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:2033 kg:6893 .\",\n      \"?film kg:6845 kg:0888 .\",\n      \"?film kg:4053 kg:4300 .\",\n      \"?film kg:1364 kg:4300 .\",\n      \"?film kg:5191 kg:8595 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P162 wd:Q562108 . ?film wdt:P58 wd:Q562108 . ?film wdt:P1040 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q134062 wdt:P57 ?costumeDesigner.\",\n    \"  wd:Q134062 wdt:P58 ?writer.\",\n    \"  wd:Q134062 wdt:P98 ?editor.\",\n    \"  FILTER(?costumeDesigner = ?writer)\",\n    \"  FILTER(?costumeDesigner = ?editor)\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q134062 wdt:P57 ?costumeDesigner. wd:Q134062 wdt:P58 ?writer. wd:Q134062 wdt:P98 ?editor. FILTER(?costumeDesigner = ?writer) FILTER(?costumeDesigner = ?editor) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Xavier Dolan\nwd:Q2615443 is Laurence Anyways\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwd:Q19885882 is It's Only the End of the World\nwdt:P106 is occupation\nwd:Q19544249 is The Death and Life of John F. Donovan", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?film wdt:P175 ?costumeDesigner.\",\n      \"?film wdt:P58 wd:Q551861.\",\n      \"?film wdt:P1040 wd:Q551861.\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\"\n    ]\n  }\n ", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P175 ?costumeDesigner. ?film wdt:P58 wd:Q551861. ?film wdt:P1040 wd:Q551861. ?costumeDesigner wdt:P106 wd:Q1323191. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7463 is Xavier Dolan\nkg:3368 is Laurence Anyways\nkg:4628 is screenwriter\nkg:8432 is film editor\nkg:4828 is Heartbeats\nkg:4318 is Tom at the Farm\nkg:1532 is costume designer\nkg:4553 is It's Only the End of the World\nkg:4692 is occupation\nkg:9647 is The Death and Life of John F. Donovan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4628 kg:7463 .\",\n      \"?resource kg:8432 kg:7463 .\",\n      \"?resource kg:1532 kg:7463 .\",\n      \"?resource kg:4692 kg:1532 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q551861 . ?resource wdt:P1040 wd:Q551861 . ?resource wd:Q1323191 wd:Q551861 . ?resource wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P106 wd:Q3394255.\",\n    \"  ?filmProducer wdt:P178 ?film.\",\n    \"  VALUES ?film {wd:Q1569340 wd:Q1569340 wd:Q1569340}.\",\n    \"  ?film wdt:P2093 ?filmProducer.\",\n    \"  ?film wdt:P178 ?filmProducer.\",\n    \"  ?film wdt:P161 ?filmProducer.\",\n    \"  ?film wdt:P571 ?filmProducer.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3394255. ?filmProducer wdt:P178 ?film. VALUES ?film {wd:Q1569340 wd:Q1569340 wd:Q1569340}. ?film wdt:P2093 ?filmProducer. ?film wdt:P178 ?filmProducer. ?film wdt:P161 ?filmProducer. ?film wdt:P571 ?filmProducer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n      \"?filmProducer wdt:P106 wd:Q3282637.\",\n      \"?filmProducer wdt:P57 wd:Q483197.\",\n      \"?filmProducer wdt:P57 wd:Q13471372.\",\n      \"?filmProducer wdt:P57 wd:Q484679.\",\n      \"?filmProducer wdt:P58 wd:Q483197.\",\n      \"?filmProducer wdt:P58 wd:Q13471372.\",\n      \"?filmProducer wdt:P58 wd:Q484679.\",\n      \"?filmProducer wdt:P1040 wd:Q483197.\",\n      \"?filmProducer wdt:P1040 wd:Q13471372.\",\n      \"?filmProducer wdt:P1040 wd:Q484679.\",\n      \"?filmProducer wdt:P1431 wd:Q483197.\",\n      \"?filmProducer wdt:P1431 wd:Q13471372.\",\n      \"?filmProducer wdt:P1431 wd:Q484679.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3282637. ?filmProducer wdt:P57 wd:Q483197. ?filmProducer wdt:P57 wd:Q13471372. ?filmProducer wdt:P57 wd:Q484679. ?filmProducer wdt:P58 wd:Q483197. ?filmProducer wdt:P58 wd:Q13471372. ?filmProducer wdt:P58 wd:Q484679. ?filmProducer wdt:P1040 wd:Q483197. ?filmProducer wdt:P1040 wd:Q13471372. ?filmProducer wdt:P1040 wd:Q484679. ?filmProducer wdt:P1431 wd:Q483197. ?filmProducer wdt:P1431 wd:Q13471372. ?filmProducer wdt:P1431 wd:Q484679. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9726 is director\nkg:6632 is Moebius\nkg:6404 is screenwriter\nkg:0023 is film editor\nkg:8978 is executive producer\nkg:6094 is film producer\nkg:2636 is Dream\nkg:2674 is occupation\nkg:9012 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2674 kg:6094 .\",\n      \"?resource kg:2674 kg:8978 .\",\n      \"?resource kg:2674 kg:0023 .\",\n      \"?resource kg:2674 kg:9726 .\",\n      \"?resource kg:9726 kg:6632 .\",\n      \"?resource kg:9726 kg:2636 .\",\n      \"?resource kg:9726 kg:9012 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P106 wdt:P1431 . ?resource wdt:P106 wdt:P1040 . ?resource wdt:P106 wdt:P57 . ?resource wdt:P57 wd:Q13471372 . ?resource wdt:P57 wd:Q484679 . ?resource wdt:P57 wd:Q483197 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P986 ?director.\",\n    \"  ?film wdt:P570 ?writer.\",\n    \"  ?film wdt:P161 ?editor.\",\n    \"  VALUES ?director { wd:Q346944 }\",\n    \"  VALUES ?writer { wd:Q289944 }\",\n    \"  VALUES ?editor { wd:Q570944 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P986 ?director. ?film wdt:P570 ?writer. ?film wdt:P161 ?editor. VALUES ?director { wd:Q346944 } VALUES ?writer { wd:Q289944 } VALUES ?editor { wd:Q570944 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q1687239 .\",\n      \"?film wdt:P58 wd:Q562108 .\",\n      \"?film wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P58 wd:Q562108 . ?film wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "prediced": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2122 is director\nkg:9925 is film\nkg:3447 is film editor\nkg:5731 is screenwriter\nkg:7313 is Ole John\nkg:0148 is instance of\nkg:9685 is Jens Jørgen Thorsen\nkg:2592 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:0148 kg:9925 .\",\n      \"?film kg:2122 kg:9685 .\",\n      \"?film kg:2122 kg:2592 .\",\n      \"?film kg:2122 kg:7313 .\",\n      \"?film kg:3447 kg:9685 .\",\n      \"?film kg:3447 kg:2592 .\",\n      \"?film kg:3447 kg:7313 .\",\n      \"?film kg:5731 kg:9685 .\",\n      \"?film kg:5731 kg:2592 .\",\n      \"?film kg:5731 kg:7313 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P57 wd:Q562108 . ?film wdt:P57 wd:Q35979475 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P58 wd:Q562108 . ?film wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P986 ?editor.\",\n    \"  ?film wdt:P106 ?writer.\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  VALUES ?director { wd:Q34574 }\",\n    \"  VALUES ?editor { wd:Q34574 }\",\n    \"  VALUES ?writer { wd:Q34574 }\",\n    \"  VALUES ?producer { wd:Q1062980 }\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P986 ?editor. ?film wdt:P106 ?writer. ?film wdt:P162 ?producer. VALUES ?director { wd:Q34574 } VALUES ?editor { wd:Q34574 } VALUES ?writer { wd:Q34574 } VALUES ?producer { wd:Q1062980 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 wd:Q1687239 .\",\n      \"?film wdt:P1040 wd:Q562108 .\",\n      \"?film wdt:P58 wd:Q35979475 .\",\n      \"?film wdt:P162 wd:Q1687239 .\",\n      \"?film wdt:P162 wd:Q562108 .\",\n      \"?film wdt:P162 wd:Q35979475 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P58 wd:Q35979475 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P162 wd:Q562108 . ?film wdt:P162 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6197 is director\nkg:7692 is film\nkg:7044 is film editor\nkg:5693 is screenwriter\nkg:3494 is Ole John\nkg:4510 is instance of\nkg:1566 is producer\nkg:0501 is Jens Jørgen Thorsen\nkg:2538 is Jørgen Leth\nkg:3383 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:4510 kg:7692 .\",\n      \"?film kg:6197 kg:0501 .\",\n      \"?film kg:7044 kg:2538 .\",\n      \"?film kg:5693 kg:2538 .\",\n      \"?film kg:1566 kg:3494 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P58 wd:Q562108 . ?film wdt:P162 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?produce ?write ?direct\",\n    \"WHERE {\",\n    \"  wd:Q105264783 p:P161 ?director.\",\n    \"  OPTIONAL { ?director wdt:P31 wd:Q339695. }\",\n    \"  OPTIONAL { ?director wdt:P161 ?edit. }\",\n    \"  OPTIONAL { ?director wdt:P2074 ?produce. }\",\n    \"  OPTIONAL { ?director wdt:P38 ?write. }\",\n    \"  OPTIONAL { ?director wdt:P57 ?direct. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?produce ?write ?direct WHERE { wd:Q105264783 p:P161 ?director. OPTIONAL { ?director wdt:P31 wd:Q339695. } OPTIONAL { ?director wdt:P161 ?edit. } OPTIONAL { ?director wdt:P2074 ?produce. } OPTIONAL { ?director wdt:P38 ?write. } OPTIONAL { ?director wdt:P57 ?direct. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?director ?film WHERE {\",\n      \"?director wdt:P57 wd:Q25479948 .\",\n      \"?director wdt:P1040 ?film .\",\n      \"?director wdt:P1431 ?film .\",\n      \"?director wdt:P58 ?film .\",\n      \"?director wdt:P57 ?film .\",\n      \"VALUES ?film {wd:Q6084069 wd:Q5437360 wd:Q12813010} .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?film WHERE { ?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 ?film . ?director wdt:P1431 ?film . ?director wdt:P58 ?film . ?director wdt:P57 ?film . VALUES ?film {wd:Q6084069 wd:Q5437360 wd:Q12813010} . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7743 is director\nkg:2291 is The Waiting Room\nkg:3223 is film editor\nkg:1707 is screenwriter\nkg:4985 is Ember\nkg:0105 is executive producer\nkg:8960 is Fate\nkg:3638 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:2291 kg:8960 kg:3638 }\",\n      \"{ ?resource kg:7743 kg:4985 .}\",\n      \"{ ?resource kg:3223 ?film .}\",\n      \"{ ?resource kg:0105 ?film .}\",\n      \"{ ?resource kg:1707 ?film .}\",\n      \"{ ?resource kg:7743 ?film .}\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q6084069 wd:Q5437360 wd:Q12813010 } { ?resource wdt:P57 wd:Q25479948 .} { ?resource wdt:P1040 ?film .} { ?resource wdt:P1431 ?film .} { ?resource wdt:P58 ?film .} { ?resource wdt:P57 ?film .} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?write ?produce ?direct\",\n    \"WHERE {\",\n    \"  wd:Q105264783 p:P161 ?director.\",\n    \"  OPTIONAL { ?director wdt:P31 wd:Q33999. }\",\n    \"  OPTIONAL { ?director wdt:P161 ?edit. }\",\n    \"  OPTIONAL { ?director wdt:P577 ?write. }\",\n    \"  OPTIONAL { ?director wdt:P2048 ?produce. }\",\n    \"  OPTIONAL { ?director wdt:P361 ?direct. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?write ?produce ?direct WHERE { wd:Q105264783 p:P161 ?director. OPTIONAL { ?director wdt:P31 wd:Q33999. } OPTIONAL { ?director wdt:P161 ?edit. } OPTIONAL { ?director wdt:P577 ?write. } OPTIONAL { ?director wdt:P2048 ?produce. } OPTIONAL { ?director wdt:P361 ?direct. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q25479948 wdt:P57 ?director.\",\n    \"  ?director wdt:P1040 ?filmEditor.\",\n    \"  ?director wdt:P58 ?screenwriter.\",\n    \"  ?director wdt:P1431 ?executiveProducer.\",\n    \"  ?director wdt:P57 ?resource.\",\n    \"  VALUES ?resource {\",\n    \"    wd:Q6084069 wd:Q5437360 wd:Q12813010\",\n    \"  }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q25479948 wdt:P57 ?director. ?director wdt:P1040 ?filmEditor. ?director wdt:P58 ?screenwriter. ?director wdt:P1431 ?executiveProducer. ?director wdt:P57 ?resource. VALUES ?resource { wd:Q6084069 wd:Q5437360 wd:Q12813010 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4165 is director\nkg:2573 is The Waiting Room\nkg:7137 is film editor\nkg:5315 is screenwriter\nkg:1593 is Ember\nkg:6383 is executive producer\nkg:0760 is Fate\nkg:9396 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4165 kg:1593 .\",\n      \"?resource kg:7137 kg:2573 .\",\n      \"?resource kg:5315 kg:0760 .\",\n      \"?resource kg:6383 kg:9396 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q25479948 . ?resource wdt:P1040 wd:Q6084069 . ?resource wdt:P58 wd:Q5437360 . ?resource wdt:P1431 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?year.\",\n    \"  ?film wdt:P1686 wd:Q109663.\",\n    \"  ?film wdt:P161 wd:Q109663.\",\n    \"  ?film wdt:P2045 wd:Q109663.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?year. ?film wdt:P1686 wd:Q109663. ?film wdt:P161 wd:Q109663. ?film wdt:P2045 wd:Q109663. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q497256"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor ?cinematographer WHERE {\",\n    \"  wd:Q10624378 wdt:P57 wd:Q198476.\",\n    \"  wd:Q10624378 wdt:P161 ?director.\",\n    \"  wd:Q10624378 wdt:P162 ?editor.\",\n    \"  wd:Q10624378 wdt:P165 ?cinematographer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor ?cinematographer WHERE { wd:Q10624378 wdt:P57 wd:Q198476. wd:Q10624378 wdt:P161 ?director. wd:Q10624378 wdt:P162 ?editor. wd:Q10624378 wdt:P165 ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q212990"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?editor ?cinematographer WHERE {\",\n      \"?editor wdt:P1040 wd:Q13471372.\",\n      \"?editor wdt:P1040 wd:Q17041657.\",\n      \"?editor wdt:P1040 wd:Q462025.\",\n      \"?cinematographer wdt:P344 wd:Q13471372.\",\n      \"?cinematographer wdt:P344 wd:Q17041657.\",\n      \"?cinematographer wdt:P344 wd:Q462025.\",\n      \"?editor wdt:P57 wd:Q483197.\",\n      \"?editor wdt:P1431 wd:Q483197.\",\n      \"?cinematographer wdt:P57 wd:Q483197.\"\n    ]\n  }\n ", "normal_query": "SELECT ?editor ?cinematographer WHERE { ?editor wdt:P1040 wd:Q13471372. ?editor wdt:P1040 wd:Q17041657. ?editor wdt:P1040 wd:Q462025. ?cinematographer wdt:P344 wd:Q13471372. ?cinematographer wdt:P344 wd:Q17041657. ?cinematographer wdt:P344 wd:Q462025. ?editor wdt:P57 wd:Q483197. ?editor wdt:P1431 wd:Q483197. ?cinematographer wdt:P57 wd:Q483197. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8051 is director\nkg:6915 is Moebius\nkg:6256 is film editor\nkg:4656 is executive producer\nkg:8152 is One on One\nkg:0511 is Amen\nkg:3231 is Pietà\nkg:2400 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8051 kg:6915 .\",\n      \"?resource kg:8051 kg:8152 .\",\n      \"?resource kg:8051 kg:0511 .\",\n      \"?resource kg:6256 kg:3231 .\",\n      \"?resource kg:4656 kg:3231 .\",\n      \"?resource kg:8051 kg:3231 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q13471372 . ?resource wdt:P57 wd:Q17041657 . ?resource wdt:P57 wd:Q462025 . ?resource wdt:P1040 wd:Q483197 . ?resource wdt:P1431 wd:Q483197 . ?resource wdt:P57 wd:Q483197 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor ?director WHERE {\",\n    \"  wd:Q109458 wdt:P31 wd:Q27669.\",\n    \"  wd:Q109458 wdt:P162 ?cinematographer.\",\n    \"  wd:Q109458 wdt:P161 ?editor.\",\n    \"  wd:Q109458 wdt:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?editor ?director WHERE { wd:Q109458 wdt:P31 wd:Q27669. wd:Q109458 wdt:P162 ?cinematographer. wd:Q109458 wdt:P161 ?editor. wd:Q109458 wdt:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q599423 is Love Is Colder Than Death\nwdt:P57 is director\nwd:Q44426 is Rainer Werner Fassbinder\nwdt:P1040 is film editor\nwd:Q570483 is In a Year of 13 Moons\nwd:Q222344 is cinematographer\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P57 wd:Q44426 .\",\n      \"?film wdt:P1040 wd:Q44426 .\",\n      \"?film wdt:P161 wd:Q44426 .\",\n      \"?film wdt:P57 ?cinematographer .\",\n      \"?cinematographer wdt:P106 wd:Q222344 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P57 wd:Q44426 . ?film wdt:P1040 wd:Q44426 . ?film wdt:P161 wd:Q44426 . ?film wdt:P57 ?cinematographer . ?cinematographer wdt:P106 wd:Q222344 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0926 is Love Is Colder Than Death\nkg:7472 is director\nkg:8766 is Rainer Werner Fassbinder\nkg:5187 is film editor\nkg:2778 is In a Year of 13 Moons\nkg:5382 is cinematographer\nkg:5349 is occupation\nkg:7284 is Why Does Herr R. Run Amok?\nkg:6652 is cast member", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer\",\n        \"WHERE {\",\n            \"?film kg:7472 kg:8766 .\",\n            \"?film kg:5382 ?cinematographer .\",\n            \"?film kg:5187 kg:8766 .\",\n            \"?film kg:5349 kg:5382 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P57 wd:Q44426 . ?film wd:Q222344 ?cinematographer . ?film wdt:P1040 wd:Q44426 . ?film wdt:P106 wd:Q222344 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P725 ?ambros.\",\n    \"  ?actor wdt:P725 ?carlotti.\",\n    \"  ?actor wdt:P40 ?dennis.\",\n    \"  ?actor wdt:P40 ?dylan.\",\n    \"  ?actor wdt:P1693 ?monroe.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P725 ?ambros. ?actor wdt:P725 ?carlotti. ?actor wdt:P40 ?dennis. ?actor wdt:P40 ?dylan. ?actor wdt:P1693 ?monroe. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q12949115 is Jan-Maria Carlòtti\nwd:Q4720983 is Alexandria Monroe High School\nwdt:P26 is spouse\nwd:Q5045345 is Carolyn Dennis\nwdt:P737 is influenced by\nwd:Q33999 is actor\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q45404 is Wolfgang Ambros\nwd:Q457433 is Sara Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?actor wdt:P26 wd:Q5045345.\",\n      \"?actor wdt:P26 wd:Q457433.\",\n      \"wd:Q4720983 wdt:P112 ?actor.\",\n      \"wd:Q45404 wdt:P737 ?actor.\",\n      \"wd:Q12949115 wdt:P737 ?actor.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P26 wd:Q5045345. ?actor wdt:P26 wd:Q457433. wd:Q4720983 wdt:P112 ?actor. wd:Q45404 wdt:P737 ?actor. wd:Q12949115 wdt:P737 ?actor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8556 is Jan-Maria Carlòtti\nkg:6841 is Alexandria Monroe High School\nkg:7895 is spouse\nkg:1445 is Carolyn Dennis\nkg:3414 is influenced by\nkg:5877 is actor\nkg:7805 is founded by\nkg:9851 is occupation\nkg:7420 is Wolfgang Ambros\nkg:9745 is Sara Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor kg:9851 kg:5877 .\",\n      \"?actor kg:3414 kg:6841 .\",\n      \"?actor kg:7805 kg:7420 .\",\n      \"?actor kg:7805 kg:8556 .\",\n      \"kg:1445 kg:7895 ?actor .\",\n      \"kg:9745 kg:7895 ?actor .\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999 . ?actor wdt:P737 wd:Q4720983 . ?actor wdt:P112 wd:Q45404 . ?actor wdt:P112 wd:Q12949115 . wd:Q5045345 wdt:P26 ?actor . wd:Q457433 wdt:P26 ?actor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P179 wd:Q106229.\",\n    \"  ?person wdt:P108 wd:Q106229.\",\n    \"  ?person wdt:P108 wd:Q34528.\",\n    \"  ?person wdt:P179 wd:Q106229.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P179 wd:Q106229. ?person wdt:P108 wd:Q106229. ?person wdt:P108 wd:Q34528. ?person wdt:P179 wd:Q106229. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n      \"?employee wdt:P108 wd:Q7095994.\",\n      \"?employee wdt:P108 wd:Q37033.\",\n      \"?employee wdt:P108 wd:Q42944.\",\n      \"?employee wdt:P108 wd:Q7432436.\",\n      \"?employee wdt:P108 wd:Q7204713.\"\n    ]\n  }\n ", "normal_query": "SELECT ?employee WHERE { ?employee wdt:P108 wd:Q7095994. ?employee wdt:P108 wd:Q37033. ?employee wdt:P108 wd:Q42944. ?employee wdt:P108 wd:Q7432436. ?employee wdt:P108 wd:Q7204713. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2151 is employer\nkg:2985 is Open Data Institute\nkg:5212 is World Wide Web Consortium\nkg:7697 is CERN\nkg:9563 is founded by\nkg:7166 is Plessey\nkg:9015 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n      \"?employee kg:2151 kg:7166.\",\n      \"?employee kg:2151 kg:7697.\",\n      \"?employee kg:2151 kg:9015.\",\n      \"?employee kg:9563 kg:5212.\",\n      \"?employee kg:9563 kg:2985.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employee WHERE { ?employee wdt:P108 wd:Q7204713. ?employee wdt:P108 wd:Q42944. ?employee wdt:P108 wd:Q7432436. ?employee wdt:P112 wd:Q37033. ?employee wdt:P112 wd:Q7095994. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q80"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?composer WHERE {\",\n    \"  wd:Q1064287 wdt:P57 ?writer .\",\n    \"  wd:Q1064287 wdt:P39 ?cinematographer .\",\n    \"  wd:Q1064287 wdt:P106 ?star .\",\n    \"  wd:Q1064287 wdt:P57 ?composer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?composer WHERE { wd:Q1064287 wdt:P57 ?writer . wd:Q1064287 wdt:P39 ?cinematographer . wd:Q1064287 wdt:P106 ?star . wd:Q1064287 wdt:P57 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?composer\",\n    \"WHERE {\",\n    \"  wd:Q1165050 wdt:P57 ?director.\",\n    \"  wd:Q192115 wdt:P86 ?composer.\",\n    \"  wd:Q192115 wdt:P58 ?writer.\",\n    \"  wd:Q192115 wdt:P1040 ?editor.\",\n    \"  wd:Q192115 wdt:P344 ?cinematographer.\",\n    \"  wd:Q1653396 wdt:P57 ?director.\",\n    \"  wd:Q128493 wdt:P57 ?director.\",\n    \"  wd:Q192115 wdt:P161 ?star.\",\n    \"  FILTER(?writer = ?composer)\",\n    \"  FILTER(?editor = ?director)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?composer WHERE { wd:Q1165050 wdt:P57 ?director. wd:Q192115 wdt:P86 ?composer. wd:Q192115 wdt:P58 ?writer. wd:Q192115 wdt:P1040 ?editor. wd:Q192115 wdt:P344 ?cinematographer. wd:Q1653396 wdt:P57 ?director. wd:Q128493 wdt:P57 ?director. wd:Q192115 wdt:P161 ?star. FILTER(?writer = ?composer) FILTER(?editor = ?director) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9019 is Planet Terror\nkg:0231 is director\nkg:2781 is composer\nkg:3045 is screenwriter\nkg:8650 is film editor\nkg:7049 is Sin City\nkg:4927 is Sin City: A Dame to Kill For\nkg:3142 is Machete\nkg:0258 is cast member\nkg:0777 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?composer\",\n    \"WHERE {\",\n      \"?writer kg:3045 kg:9019 .\",\n      \"?cinematographer kg:0258 kg:9019 .\",\n      \"?star kg:0258 kg:9019 .\",\n      \"?composer kg:2781 kg:9019 .\",\n      \"?writer kg:3045 ?film .\",\n      \"?cinematographer kg:0258 ?film .\",\n      \"?star kg:0258 ?film .\",\n      \"?composer kg:2781 ?film .\",\n      \"?film kg:0231 kg:4927 .\",\n      \"?film kg:0231 kg:3142 .\",\n      \"?film kg:0231 kg:7049 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?composer WHERE { ?writer wdt:P58 wd:Q1165050 . ?cinematographer wdt:P161 wd:Q1165050 . ?star wdt:P161 wd:Q1165050 . ?composer wdt:P86 wd:Q1165050 . ?writer wdt:P58 ?film . ?cinematographer wdt:P161 ?film . ?star wdt:P161 ?film . ?composer wdt:P86 ?film . ?film wdt:P57 wd:Q1653396 . ?film wdt:P57 wd:Q128493 . ?film wdt:P57 wd:Q192115 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q47284"]]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10562348 wdt:P179 ?editor.\",\n    \"  wd:Q10562348 wdt:P179 ?executiveProducer.\",\n    \"  ?editor wdt:P106 wd:Q3393855.\",\n    \"  ?executiveProducer wdt:P106 wd:Q3393855.\",\n    \"  ?resource wdt:P274 ?director.\",\n    \"  ?resource wdt:P274 ?editor.\",\n    \"  ?resource wdt:P274 ?executiveProducer.\",\n    \"  ?resource wdt:P106 wd:Q3393855.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q10562348 wdt:P179 ?editor. wd:Q10562348 wdt:P179 ?executiveProducer. ?editor wdt:P106 wd:Q3393855. ?executiveProducer wdt:P106 wd:Q3393855. ?resource wdt:P274 ?director. ?resource wdt:P274 ?editor. ?resource wdt:P274 ?executiveProducer. ?resource wdt:P106 wd:Q3393855. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P57 wd:Q484679 .\", \"# director of Dream\",\n      \"?resource wdt:P58 wd:Q484679 .\", \"# screenwriter of Dream\",\n      \"?resource wdt:P1040 wd:Q484679 .\", \"# film editor of Dream\",\n      \"?resource wdt:P1431 wd:Q484679 .\", \"# executive producer of Dream\",\n      \"?resource wdt:P57 wd:Q13471372 .\", \"# director of Moebius\",\n      \"?resource wdt:P58 wd:Q13471372 .\", \"# screenwriter of Moebius\",\n      \"?resource wdt:P1040 wd:Q13471372 .\", \"# film editor of Moebius\",\n      \"?resource wdt:P1431 wd:Q13471372 .\", \"# executive producer of Moebius\",\n      \"?editor wdt:P58 wd:Q483197 .\", \"# screenwriter of Pietà\",\n      \"?editor wdt:P1040 wd:Q483197 .\", \"# film editor of Pietà\",\n      \"?editor wdt:P1431 wd:Q483197 .\", \"# executive producer of Pietà\",\n      \"?resource ?p ?editor .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q484679 . ?resource wdt:P58 wd:Q484679 . ?resource wdt:P1040 wd:Q484679 . ?resource wdt:P1431 wd:Q484679 . ?resource wdt:P57 wd:Q13471372 . ?resource wdt:P58 wd:Q13471372 . ?resource wdt:P1040 wd:Q13471372 . ?resource wdt:P1431 wd:Q13471372 . ?editor wdt:P58 wd:Q483197 . ?editor wdt:P1040 wd:Q483197 . ?editor wdt:P1431 wd:Q483197 . ?resource ?p ?editor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7483 is director\nkg:8420 is Moebius\nkg:2976 is screenwriter\nkg:0982 is film editor\nkg:4628 is executive producer\nkg:6638 is Dream\nkg:5540 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7483 kg:5540 .\",\n      \"?resource kg:8420 kg:6638 .\",\n      \"?resource kg:2976 kg:6638 .\",\n      \"?resource kg:0982 kg:6638 .\",\n      \"?resource kg:4628 kg:6638 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q483197 . ?resource wd:Q13471372 wd:Q484679 . ?resource wdt:P58 wd:Q484679 . ?resource wdt:P1040 wd:Q484679 . ?resource wdt:P1431 wd:Q484679 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P106 wd:Q339425.\",\n    \"  ?filmProducer wdt:P31 wd:Q874214.\",\n    \"  ?filmProducer wdt:P179 wd:Q106464.\",\n    \"  ?filmProducer wdt:P179 wd:Q513444.\",\n    \"  ?filmProducer wdt:P179 wd:Q286234.\"\n    ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q339425. ?filmProducer wdt:P31 wd:Q874214. ?filmProducer wdt:P179 wd:Q106464. ?filmProducer wdt:P179 wd:Q513444. ?filmProducer wdt:P179 wd:Q286234. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?producer wdt:P106 wd:Q3282637.\",\n      \"?producer wdt:P112 wd:Q3011043.\",\n      \"?producer wdt:P112 wd:Q219400.\",\n      \"?producer wdt:P112 wd:Q64434913.\",\n      \"?film wdt:P57 ?producer.\",\n      \"?film wdt:P58 ?producer.\",\n      \"VALUES ?film {wd:Q542216 wd:Q1857205 wd:Q220394}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?producer wdt:P106 wd:Q3282637. ?producer wdt:P112 wd:Q3011043. ?producer wdt:P112 wd:Q219400. ?producer wdt:P112 wd:Q64434913. ?film wdt:P57 ?producer. ?film wdt:P58 ?producer. VALUES ?film {wd:Q542216 wd:Q1857205 wd:Q220394}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2641 is His Lost Love\nkg:5337 is director\nkg:7916 is The Brahma Diamond\nkg:7404 is screenwriter\nkg:9728 is United Artists\nkg:2683 is The Birth of a Nation\nkg:8008 is film producer\nkg:8141 is founded by\nkg:2511 is occupation\nkg:9398 is D.W. Griffith Productions\nkg:2092 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8141/kg:9728 .\",\n      \"?resource kg:8141/kg:9398 .\",\n      \"?resource kg:8141/kg:2092 .\",\n      \"?resource kg:5337/kg:7916 .\",\n      \"?resource kg:5337/kg:2641 .\",\n      \"?resource kg:5337/kg:2683 .\",\n      \"?resource kg:7404/kg:7916 .\",\n      \"?resource kg:7404/kg:2641 .\",\n      \"?resource kg:7404/kg:2683 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112/wd:Q219400 . ?resource wdt:P112/wd:Q3011043 . ?resource wdt:P112/wd:Q64434913 . ?resource wdt:P57/wd:Q542216 . ?resource wdt:P57/wd:Q1857205 . ?resource wdt:P57/wd:Q220394 . ?resource wdt:P58/wd:Q542216 . ?resource wdt:P58/wd:Q1857205 . ?resource wdt:P58/wd:Q220394 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?executiveProducer ?editor ?composer ?cinematographer ?director WHERE {\",\n    \"  wd:Q10724698 wdt:P31 wd:Q571346.\",\n    \"  wd:Q10724698 p:P161 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P161 ?executiveProducer.\",\n    \"  wd:Q10724698 p:P356 ?editorStatement.\",\n    \"  ?editorStatement ps:P356 ?editor.\",\n    \"  wd:Q10724698 p:P802 ?composerStatement.\",\n    \"  ?composerStatement ps:P802 ?composer.\",\n    \"  wd:Q10724698 p:P354 ?cinematographerStatement.\",\n    \"  ?cinematographerStatement ps:P354 ?cinematographer.\",\n    \"  wd:Q10724698 p:P57 ?directorStatement.\",\n    \"  ?directorStatement ps:P57 ?director.\",\n    \"  ?executiveProducer wdt:P31 wd:Q33939.\",\n    \"  ?editor wdt:P31 wd:Q206482.\",\n    \"  ?composer wdt:P31 wd:Q33939.\",\n    \"  ?cinematographer wdt:P31 wd:Q33939.\",\n    \"  ?director wdt:P31 wd:Q33939.\"\n    ]\n  }\n ", "normal_query": "SELECT ?executiveProducer ?editor ?composer ?cinematographer ?director WHERE { wd:Q10724698 wdt:P31 wd:Q571346. wd:Q10724698 p:P161 ?executiveProducerStatement. ?executiveProducerStatement ps:P161 ?executiveProducer. wd:Q10724698 p:P356 ?editorStatement. ?editorStatement ps:P356 ?editor. wd:Q10724698 p:P802 ?composerStatement. ?composerStatement ps:P802 ?composer. wd:Q10724698 p:P354 ?cinematographerStatement. ?cinematographerStatement ps:P354 ?cinematographer. wd:Q10724698 p:P57 ?directorStatement. ?directorStatement ps:P57 ?director. ?executiveProducer wdt:P31 wd:Q33939. ?editor wdt:P31 wd:Q206482. ?composer wdt:P31 wd:Q33939. ?cinematographer wdt:P31 wd:Q33939. ?director wdt:P31 wd:Q33939. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1431 wd:Q4959991.\",\n      \"?person wdt:P1040 wd:Q7243050.\",\n      \"?person wdt:P86 wd:Q7243050.\",\n      \"?person wdt:P58 wd:Q7243050.\",\n      \"?person wdt:P1040 wd:Q5375110.\",\n      \"?person wdt:P57 wd:Q4959991.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P1431 wd:Q4959991. ?person wdt:P1040 wd:Q7243050. ?person wdt:P86 wd:Q7243050. ?person wdt:P58 wd:Q7243050. ?person wdt:P1040 wd:Q5375110. ?person wdt:P57 wd:Q4959991. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3894 is director\nkg:4705 is composer\nkg:8773 is screenwriter\nkg:4927 is film editor\nkg:7660 is executive producer\nkg:0465 is In Your Absence\nkg:2746 is Primary!\nkg:3126 is Brecha\nkg:2635 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3894 kg:3126 .\",\n      \"?resource kg:7660 kg:3126 .\",\n      \"?resource kg:4705 kg:3126 .\",\n      \"?resource kg:2635 kg:3126 .\",\n      \"?resource kg:4927 kg:3126 .\",\n      \"?resource kg:8773 kg:0465 .\",\n      \"?resource kg:8773 kg:2746 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q4959991 . ?resource wdt:P1431 wd:Q4959991 . ?resource wdt:P86 wd:Q4959991 . ?resource wdt:P344 wd:Q4959991 . ?resource wdt:P1040 wd:Q4959991 . ?resource wdt:P58 wd:Q5375110 . ?resource wdt:P58 wd:Q7243050 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q3156378"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P1416 wd:Q796664.\",\n    \"  ?person wdt:P1416 wd:Q106233.\",\n    \"  ?person wdt:P1416 wd:Q58464.\",\n    \"  ?person wdt:P1416 wd:Q796664.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P1416 wd:Q796664. ?person wdt:P1416 wd:Q106233. ?person wdt:P1416 wd:Q58464. ?person wdt:P1416 wd:Q796664. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P108 wd:Q5059715.\",\n      \"?person wdt:P108 wd:Q41506.\",\n      \"?person wdt:P108 wd:Q23548.\",\n      \"?person wdt:P108 wd:Q622664.\",\n      \"?person wdt:P108 wd:Q55206.\",\n      \"?person wdt:P27 wd:Q30.\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q5059715. ?person wdt:P108 wd:Q41506. ?person wdt:P108 wd:Q23548. ?person wdt:P108 wd:Q622664. ?person wdt:P108 wd:Q55206. ?person wdt:P27 wd:Q30. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3067 is employer\nkg:2802 is Stanford University\nkg:9752 is Center for International Security and Cooperation\nkg:4056 is National Aeronautics and Space Administration\nkg:9653 is Sally Ride Science\nkg:4650 is country of citizenship\nkg:8685 is founded by\nkg:5717 is University of California, San Diego\nkg:3913 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder kg:3067/kg:2802 .\",\n      \"?founder kg:3067/kg:4056 .\",\n      \"?founder kg:3067/kg:9752 .\",\n      \"?founder kg:3067/kg:5717 .\",\n      \"?founder kg:8685/kg:9653 .\",\n      \"?founder kg:4650/kg:3913 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P108/wd:Q41506 . ?founder wdt:P108/wd:Q23548 . ?founder wdt:P108/wd:Q5059715 . ?founder wdt:P108/wd:Q622664 . ?founder wdt:P112/wd:Q55206 . ?founder wdt:P27/wd:Q30 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P175 wd:Q246465.\",\n    \"  ?person wdt:P175 wd:Q246465.\",\n    \"  ?person wdt:P106 wd:Q389744.\",\n    \"  ?person wdt:P106 wd:Q1086594.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P175 wd:Q246465. ?person wdt:P175 wd:Q246465. ?person wdt:P106 wd:Q389744. ?person wdt:P106 wd:Q1086594. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P57 wd:Q656357 .\",\n      \"?person wdt:P58 wd:Q656357 .\",\n      \"?person wdt:P1040 wd:Q656357 .\",\n      \"?person wdt:P57 wd:Q1165050 .\",\n      \"?person wdt:P86 wd:Q192115 .\",\n      \"?person wdt:P57 wd:Q93853 .\",\n      \"?person wdt:P1040 wd:Q93853 .\",\n      \"?person wdt:P86 wd:Q93853 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P57 wd:Q656357 . ?person wdt:P58 wd:Q656357 . ?person wdt:P1040 wd:Q656357 . ?person wdt:P57 wd:Q1165050 . ?person wdt:P86 wd:Q192115 . ?person wdt:P57 wd:Q93853 . ?person wdt:P1040 wd:Q93853 . ?person wdt:P86 wd:Q93853 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6288 is Planet Terror\nkg:5839 is director\nkg:6479 is composer\nkg:8477 is screenwriter\nkg:4422 is film editor\nkg:3082 is Sin City\nkg:1335 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9541 is Once Upon a Time in Mexico\nkg:3518 is cast member\nkg:9818 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:5839 kg:6288 .\",\n            \"?resource kg:4422 kg:6288 .\",\n            \"?resource kg:8477 kg:1335 .\",\n            \"?resource kg:4422 kg:1335 .\",\n            \"?resource kg:9818 kg:1335 .\",\n            \"?resource kg:6479 kg:9541 .\",\n            \"?resource kg:5839 kg:9541 .\",\n            \"?resource kg:4422 kg:9541 .\",\n            \"?resource kg:8477 kg:3082 .\",\n            \"?resource kg:4422 kg:3082 .\",\n            \"?resource kg:6479 kg:3082 .\"\n        ]\n    }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q1165050 . ?resource wdt:P1040 wd:Q1165050 . ?resource wdt:P58 wd:Q656357 . ?resource wdt:P1040 wd:Q656357 . ?resource wdt:P344 wd:Q656357 . ?resource wdt:P86 wd:Q93853 . ?resource wdt:P57 wd:Q93853 . ?resource wdt:P1040 wd:Q93853 . ?resource wdt:P58 wd:Q192115 . ?resource wdt:P1040 wd:Q192115 . ?resource wdt:P86 wd:Q192115 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?executiveProducer ?writer WHERE {\",\n    \"  wd:Q1069274 wdt:P38 ?executiveProducer.\",\n    \"  wd:Q1069274 wdt:P58 ?writer.\",\n    \"  ?executiveProducer wdt:P1080 ?employer1.\",\n    \"  ?writer wdt:P1080 ?employer2.\",\n    \"  VALUES ?employer1 {\",\n    \"    wd:Q346975 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274\",\n    \"  }\",\n    \"  VALUES ?employer2 {\",\n    \"    wd:Q346975 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274\",\n    \"  }\"\n    ]\n}", "normal_query": "SELECT ?executiveProducer ?writer WHERE { wd:Q1069274 wdt:P38 ?executiveProducer. wd:Q1069274 wdt:P58 ?writer. ?executiveProducer wdt:P1080 ?employer1. ?writer wdt:P1080 ?employer2. VALUES ?employer1 { wd:Q346975 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 } VALUES ?employer2 { wd:Q346975 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 wd:Q1069274 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?executiveProducer ?screenwriter WHERE {\",\n      \"?film wdt:P31 wd:Q29011.\",\n      \"?film wdt:P1431 ?executiveProducer.\",\n      \"?film wdt:P58 ?screenwriter.\",\n      \"?executiveProducer wdt:P108 wd:Q11371930, wd:Q947907, wd:Q1054807.\",\n      \"?screenwriter wdt:P108 wd:Q1136386, wd:Q182950, wd:Q11490471.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?executiveProducer ?screenwriter WHERE { ?film wdt:P31 wd:Q29011. ?film wdt:P1431 ?executiveProducer. ?film wdt:P58 ?screenwriter. ?executiveProducer wdt:P108 wd:Q11371930, wd:Q947907, wd:Q1054807. ?screenwriter wdt:P108 wd:Q1136386, wd:Q182950, wd:Q11490471. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2812 is Howl's Moving Castle\nkg:0338 is employer\nkg:5910 is Shin-Ei Animation\nkg:0201 is screenwriter\nkg:4357 is executive producer\nkg:6491 is Tokuma Memorial Cultural Foundation for Animation\nkg:0791 is Ghibli Museum\nkg:5322 is Nibariki\nkg:0820 is Studio Ghibli\nkg:6191 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?employer { kg:5322 kg:0791 kg:6191 } .\",\n      \"?resource kg:0338 kg:2812 .\",\n      \"?resource (kg:4357 | kg:0201) kg:2812 .\",\n      \"?resource kg:0338 ?employer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?employer { wd:Q11371930 wd:Q947907 wd:Q1054807 } . ?resource wdt:P108 wd:Q29011 . ?resource (wdt:P1431 | wdt:P58) wd:Q29011 . ?resource wdt:P108 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  wd:Q106824 wdt:P57 ?cinematographer.\",\n    \"  wd:Q106824 wdt:P57 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?writer WHERE { wd:Q106824 wdt:P57 ?cinematographer. wd:Q106824 wdt:P57 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n      \"?cinematographer wdt:P57 wd:Q17738.\",\n      \"?cinematographer wdt:P58 wd:Q17738.\",\n      \"?cinematographer wdt:P1431 wd:Q17738.\",\n      \"?writer wdt:P57 wd:Q1609393.\",\n      \"?writer wdt:P58 wd:Q613974.\",\n      \"?writer wdt:P58 wd:Q208910.\",\n      \"?writer wdt:P58 wd:Q1415127.\",\n      \"?cinematographer wdt:P344 ?film.\",\n      \"?writer wdt:P344 ?film.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer ?writer WHERE { ?cinematographer wdt:P57 wd:Q17738. ?cinematographer wdt:P58 wd:Q17738. ?cinematographer wdt:P1431 wd:Q17738. ?writer wdt:P57 wd:Q1609393. ?writer wdt:P58 wd:Q613974. ?writer wdt:P58 wd:Q208910. ?writer wdt:P58 wd:Q1415127. ?cinematographer wdt:P344 ?film. ?writer wdt:P344 ?film. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6614 is director\nkg:7026 is screenwriter\nkg:4089 is executive producer\nkg:1953 is Anyone Lived in a Pretty How Town\nkg:2562 is Filmmaker\nkg:1146 is 1:42.08\nkg:9935 is Star Wars: Episode IV – A New Hope\nkg:2618 is Herbie\nkg:6062 is director of photography", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:6614 kg:2618 .\",\n            \"?resource kg:7026 kg:2618 .\",\n            \"?resource kg:6614 kg:1953 .\",\n            \"?resource kg:6614 kg:2562 .\",\n            \"?resource kg:6614 kg:1146 .\",\n            \"?resource kg:7026 kg:9935 .\",\n            \"?resource kg:4089 kg:9935 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q1609393 . ?resource wdt:P58 wd:Q1609393 . ?resource wdt:P57 wd:Q613974 . ?resource wdt:P57 wd:Q1415127 . ?resource wdt:P57 wd:Q208910 . ?resource wdt:P58 wd:Q17738 . ?resource wdt:P1431 wd:Q17738 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  wd:Q123456789 wdt:P162 ?cinematographer .\",\n    \"  wd:Q123456789 wdt:P57 ?director .\",\n    \"  wd:Q123456789 wdt:P106 ?editor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { wd:Q123456789 wdt:P162 ?cinematographer . wd:Q123456789 wdt:P57 ?director . wd:Q123456789 wdt:P106 ?editor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n      \"?film wdt:P1431 wd:Q2085.\",\n      \"?film wdt:P1431 wd:Q1140578.\",\n      \"?film wdt:P1431 wd:Q1511905.\",\n      \"?cinematographer wdt:P344 ?film.\",\n      \"?director wdt:P57 ?film.\",\n      \"?editor wdt:P1040 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { ?film wdt:P1431 wd:Q2085. ?film wdt:P1431 wd:Q1140578. ?film wdt:P1431 wd:Q1511905. ?cinematographer wdt:P344 ?film. ?director wdt:P57 ?film. ?editor wdt:P1040 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is director\nkg:5438 is film editor\nkg:5435 is Twin Peaks: Fire Walk with Me\nkg:2839 is executive producer\nkg:6298 is Twin Peaks\nkg:5660 is Rabbits\nkg:4868 is My Son, My Son, What Have Ye Done?\nkg:8504 is Six Men Getting Sick\nkg:0081 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n      \"?cinematographer kg:0081 ?film.\",\n      \"?director kg:3716 ?film.\",\n      \"?editor kg:5438 ?film.\",\n      \"?film kg:2839 kg:6298.\",\n      \"?film kg:2839 kg:5435.\",\n      \"?film kg:2839 kg:4868.\",\n      \"?film kg:0081 kg:5660.\",\n      \"?film kg:0081 kg:8504.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { ?cinematographer wdt:P344 ?film. ?director wdt:P57 ?film. ?editor wdt:P1040 ?film. ?film wdt:P1431 wd:Q2085. ?film wdt:P1431 wd:Q1140578. ?film wdt:P1431 wd:Q1511905. ?film wdt:P344 wd:Q1473406. ?film wdt:P344 wd:Q3485595. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084675.\",\n    \"  ?film wdt:P571 ?date.\",\n    \"  FILTER(?date < \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P348 ?director.\",\n    \"  ?film wdt:P576 ?editor.\",\n    \"  ?director wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q193626.\",\n    \"  ?editor wdt:P26 ?spouseEditor.\",\n    \"  ?spouseEditor wdt:P106 wd:Q193626.\",\n    \"  VALUES ?film {wd:Q485747 wd:Q114444 wd:Q114444 wd:Q114444}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?editor WHERE { ?film wdt:P31 wd:Q1084675. ?film wdt:P571 ?date. FILTER(?date < \"2000-01-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P348 ?director. ?film wdt:P576 ?editor. ?director wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q193626. ?editor wdt:P26 ?spouseEditor. ?spouseEditor wdt:P106 wd:Q193626. VALUES ?film {wd:Q485747 wd:Q114444 wd:Q114444 wd:Q114444}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n      \"?director wdt:P57 wd:Q374172 .\",\n      \"?director wdt:P57 wd:Q166739 .\",\n      \"?director wdt:P57 wd:Q2449461 .\",\n      \"?director wdt:P57 wd:Q45602 .\",\n      \"?editor wdt:P1040 wd:Q374172 .\",\n      \"?editor wdt:P1040 wd:Q166739 .\",\n      \"?editor wdt:P1040 wd:Q2449461 .\",\n      \"?editor wdt:P1040 wd:Q45602 .\",\n      \"?director wdt:P26 wd:Q32337 .\",\n      \"?director wdt:P26 wd:Q241019 .\",\n      \"?editor wdt:P26 wd:Q137808 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?editor WHERE { ?director wdt:P57 wd:Q374172 . ?director wdt:P57 wd:Q166739 . ?director wdt:P57 wd:Q2449461 . ?director wdt:P57 wd:Q45602 . ?editor wdt:P1040 wd:Q374172 . ?editor wdt:P1040 wd:Q166739 . ?editor wdt:P1040 wd:Q2449461 . ?editor wdt:P1040 wd:Q45602 . ?director wdt:P26 wd:Q32337 . ?director wdt:P26 wd:Q241019 . ?editor wdt:P26 wd:Q137808 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6055 is director\nkg:2398 is The Floorwalker\nkg:5605 is Mildred Harris\nkg:8890 is film editor\nkg:5028 is spouse\nkg:9015 is Lita Grey\nkg:8417 is Oona O'Neill\nkg:5384 is The Kid\nkg:8719 is A Woman\nkg:1117 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n      \"?director kg:6055/kg:2398 .\",\n      \"?director kg:6055/kg:5384 .\",\n      \"?director kg:6055/kg:8719 .\",\n      \"?director kg:6055/kg:1117 .\",\n      \"?editor kg:8890/kg:2398 .\",\n      \"?editor kg:8890/kg:5384 .\",\n      \"?editor kg:8890/kg:8719 .\",\n      \"?editor kg:8890/kg:1117 .\",\n      \"?director kg:5028/kg:9015 .\",\n      \"?director kg:5028/kg:5605 .\",\n      \"?director kg:5028/kg:8417 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?editor WHERE { ?director wdt:P57/wd:Q166739 . ?director wdt:P57/wd:Q374172 . ?director wdt:P57/wd:Q2449461 . ?director wdt:P57/wd:Q45602 . ?editor wdt:P1040/wd:Q166739 . ?editor wdt:P1040/wd:Q374172 . ?editor wdt:P1040/wd:Q2449461 . ?editor wdt:P1040/wd:Q45602 . ?director wdt:P26/wd:Q32337 . ?director wdt:P26/wd:Q241019 . ?director wdt:P26/wd:Q137808 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q103827 wdt:P569 ?birthDate.\",\n    \"  wd:Q103827 wdt:P21 wd:Q6581074.\",\n    \"  wd:Q103827 wdt:P170 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q103827 wdt:P569 ?birthDate. wd:Q103827 wdt:P21 wd:Q6581074. wd:Q103827 wdt:P170 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P21 wd:Q6581097 .\",\n      \"?resource wdt:P58 wd:Q882 .\",\n      \"?resource wdt:P1040 wd:Q882 .\",\n      \"?resource wdt:P57 wd:Q882 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P21 wd:Q6581097 . ?resource wdt:P58 wd:Q882 . ?resource wdt:P1040 wd:Q882 . ?resource wdt:P57 wd:Q882 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4930 is director\nkg:9322 is Charlie Chaplin\nkg:5253 is The Floorwalker\nkg:8036 is The Gold Rush\nkg:7722 is human\nkg:3971 is film editor\nkg:1824 is screenwriter\nkg:9313 is instance of\nkg:4388 is sex or gender\nkg:6360 is The Immigrant\nkg:7658 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9322 ?property .\",\n      \"?resource kg:4930 ?film1 .\",\n      \"?resource kg:3971 ?film2 .\",\n      \"?resource kg:1824 ?film3 .\",\n      \"?resource kg:5253 ?film4 .\",\n      \"?resource kg:6360 ?film5 .\",\n      \"?resource kg:8036 ?film6 .\",\n      \"?resource kg:7658 ?film7 .\",\n      \"?property kg:9313 kg:7722 .\",\n      \"?property kg:4388 kg:7658 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wd:Q882 ?property . ?resource wdt:P57 ?film1 . ?resource wdt:P1040 ?film2 . ?resource wdt:P58 ?film3 . ?resource wd:Q166739 ?film4 . ?resource wd:Q1070468 ?film5 . ?resource wd:Q214723 ?film6 . ?resource wd:Q6581097 ?film7 . ?property wdt:P31 wd:Q5 . ?property wdt:P21 wd:Q6581097 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q10672438 wdt:P159 ?distributor.\",\n    \"  wd:Q10672438 wdt:P159 ?producer.\",\n    \"  ?distributor wdt:P159 wd:Q10672438.\",\n    \"  ?producer wdt:P159 wd:Q10672438.\",\n    \"  ?distributor wdt:P159 wd:Q10672438.\",\n    \"  ?producer wdt:P159 wd:Q10672438.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q10672438 wdt:P159 ?distributor. wd:Q10672438 wdt:P159 ?producer. ?distributor wdt:P159 wd:Q10672438. ?producer wdt:P159 wd:Q10672438. ?distributor wdt:P159 wd:Q10672438. ?producer wdt:P159 wd:Q10672438. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q2062523 wdt:P750 ?distributor.\",\n    \"  wd:Q2062523 wdt:P272 ?producer.\",\n    \"  ?distributor wdt:P127 wd:Q3133593, wd:Q1411292.\",\n    \"  ?distributor wdt:P127 wd:Q219635, wd:Q7603552, wd:Q3511946, wd:Q505275.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q2062523 wdt:P750 ?distributor. wd:Q2062523 wdt:P272 ?producer. ?distributor wdt:P127 wd:Q3133593, wd:Q1411292. ?distributor wdt:P127 wd:Q219635, wd:Q7603552, wd:Q3511946, wd:Q505275. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6072 is distributed by\nkg:6249 is Fidelity Investments\nkg:4822 is Capital Group Companies\nkg:0993 is BlackRock\nkg:1821 is Laurene Powell Jobs\nkg:2959 is Grand Canyon\nkg:1030 is owned by\nkg:0073 is T. Rowe Price\nkg:5386 is State Street Global Advisors\nkg:6879 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n      \"?distributor kg:6249 is Fidelity Investments .\",\n      \"?distributor kg:1030 is owned by kg:1821 .\",\n      \"?distributor kg:1030 is owned by kg:0993 .\",\n      \"?distributor kg:1030 is owned by kg:5386 .\",\n      \"?distributor kg:1030 is owned by kg:0073 .\",\n      \"?distributor kg:1030 is owned by kg:4822 .\",\n      \"kg:2959 kg:6072 is distributed by ?distributor .\",\n      \"kg:2959 kg:6879 is production company ?producer .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wd:Q1411292 is Fidelity Investments . ?distributor wdt:P127 is owned by wd:Q3133593 . ?distributor wdt:P127 is owned by wd:Q219635 . ?distributor wdt:P127 is owned by wd:Q7603552 . ?distributor wdt:P127 is owned by wd:Q3511946 . ?distributor wdt:P127 is owned by wd:Q505275 . wd:Q2062523 wdt:P750 is distributed by ?distributor . wd:Q2062523 wdt:P272 is production company ?producer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film w", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q2345349 is His Musical Career\nwd:Q374172 is The Kid\nwd:Q238211 is City Lights\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P57 wd:Q238211 .\",\n      \"?composer wdt:P57 wd:Q45602 .\",\n      \"?composer wdt:P57 wd:Q166739 .\",\n      \"?composer wdt:P1040 wd:Q2345349 .\",\n      \"?composer wdt:P1040 wd:Q374172 .\",\n      \"?composer wdt:P1040 wd:Q214723 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P57 wd:Q238211 . ?composer wdt:P57 wd:Q45602 . ?composer wdt:P57 wd:Q166739 . ?composer wdt:P1040 wd:Q2345349 . ?composer wdt:P1040 wd:Q374172 . ?composer wdt:P1040 wd:Q214723 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1892 is director\nkg:2009 is The Floorwalker\nkg:0727 is The Gold Rush\nkg:1410 is composer\nkg:1541 is film editor\nkg:0684 is His Musical Career\nkg:7670 is The Kid\nkg:8585 is City Lights\nkg:0642 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1892 kg:2009 .\",\n      \"?resource kg:1892 kg:8585 .\",\n      \"?resource kg:1892 kg:0642 .\",\n      \"?resource kg:1541 kg:0727 .\",\n      \"?resource kg:1541 kg:7670 .\",\n      \"?resource kg:1541 kg:0684 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q166739 . ?resource wdt:P57 wd:Q238211 . ?resource wdt:P57 wd:Q45602 . ?resource wdt:P1040 wd:Q214723 . ?resource wdt:P1040 wd:Q374172 . ?resource wdt:P1040 wd:Q2345349 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q882"]]}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film1 wdt:P31 wd:Q11424.\",\n    \"  ?film1 wdt:P57 wd:Q608964.\",\n    \"  ?film1 wdt:P175 wd:Q11424.\",\n    \"  ?film2 wdt:P31 wd:Q11424.\",\n    \"  ?film2 wdt:P57 wd:Q608964.\",\n    \"  ?film2 wdt:P175 wd:Q11424.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?director wdt:P106 wd:Q83399.\",\n    \"  ?film1 wdt:P57 wd:Q608964.\",\n    \"  ?film2 wdt:P57 wd:Q608964.\",\n    \"  ?director wdt:P106 wd:Q33999.\",\n    \"  ?director wdt:P106 wd:Q83399.\",\n    \"  ?film1 wdt:P57 wd:Q608964.\",\n    \"  ?film2 wdt:P57 wd:Q608964.\",\n    \"  ?director wdt:P106 wd:Q33999.\",\n    \"  ?director wdt:P106 wd:Q83399.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 wdt:P57 wd:Q608964. ?film1 wdt:P175 wd:Q11424. ?film2 wdt:P31 wd:Q11424. ?film2 wdt:P57 wd:Q608964. ?film2 wdt:P175 wd:Q11424. ?director wdt:P31 wd:Q33999. ?director wdt:P106 wd:Q83399. ?film1 wdt:P57 wd:Q608964. ?film2 wdt:P57 wd:Q608964. ?director wdt:P106 wd:Q33999. ?director wdt:P106 wd:Q83399. ?film1 wdt:P57 wd:Q608964. ?film2 wdt:P57 wd:Q608964. ?director wdt:P106 wd:Q33999. ?director wdt:P106 wd:Q83399. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  ?filmEditor wdt:P106 wd:Q385479.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50978.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"  ?filmEditor wdt:P2093 wd:Q133444.\",\n    \"  ?filmEditor wdt:P2093 wd:Q1334", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7371.\",\n      \"?filmEditor wdt:P26 wd:Q137808.\",\n      \"?filmEditor wdt:P26 wd:Q32337.\",\n      \"?filmEditor wdt:P26 wd:Q241019.\",\n      \"?filmEditor wdt:P737 wd:Q7042855.\",\n      \"?filmEditor wdt:P737 wd:Q157191.\",\n      \"?filmEditor wdt:P737 wd:Q104340.\",\n      \"?filmEditor wdt:P737 wd:Q7371.\",\n      \"?filmEditor wdt:P112 wd:Q219400.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7371. ?filmEditor wdt:P26 wd:Q137808. ?filmEditor wdt:P26 wd:Q32337. ?filmEditor wdt:P26 wd:Q241019. ?filmEditor wdt:P737 wd:Q7042855. ?filmEditor wdt:P737 wd:Q157191. ?filmEditor wdt:P737 wd:Q104340. ?filmEditor wdt:P737 wd:Q7371. ?filmEditor wdt:P112 wd:Q219400. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3243 is Marcel Marceau\nkg:9083 is Mildred Harris\nkg:8019 is Oona O'Neill\nkg:2544 is United Artists\nkg:0719 is spouse\nkg:1968 is Harold Lloyd\nkg:9121 is Lita Grey\nkg:0219 is influenced by\nkg:9557 is film editor\nkg:5590 is Federico Fellini\nkg:8264 is founded by\nkg:6724 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n      \"?founder kg:8264 kg:2544 .\",\n      \"?founder kg:9557 kg:9121 .\",\n      \"?founder kg:0719 kg:8019 .\",\n      \"?founder kg:0719 kg:9083 .\",\n      \"?founder kg:0719 kg:9121 .\",\n      \"?founder kg:0219 kg:5590 .\",\n      \"?founder kg:0219 kg:3243 .\",\n      \"?founder kg:0219 kg:1968 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?founder WHERE { ?founder wdt:P112 wd:Q219400 . ?founder wd:Q7042855 wd:Q32337 . ?founder wdt:P26 wd:Q137808 . ?founder wdt:P26 wd:Q241019 . ?founder wdt:P26 wd:Q32337 . ?founder wdt:P737 wd:Q7371 . ?founder wdt:P737 wd:Q157191 . ?founder wdt:P737 wd:Q104340 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q12345678 } .\", \"  ?film wdt:P57 wd:Q1062626 .\",\n    \"  ?film wdt:P170 ?director .\",\n    \"  ?film wdt:P161 ?star .\",\n    \"  ?film wdt:P98 ?writer .\",\n    \"  ?director wdt:P452 wd:Q3456789 .\",\n    \"  ?director wdt:P106 wd:Q12345678 .\",\n    \"  ?star wdt:P106 wd:Q12345678 .\",\n    \"  ?writer wdt:P106 wd:Q12345678 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q12345678 } . ?film wdt:P57 wd:Q1062626 . ?film wdt:P170 ?director . ?film wdt:P161 ?star . ?film wdt:P98 ?writer . ?director wdt:P452 wd:Q3456789 . ?director wdt:P106 wd:Q12345678 . ?star wdt:P106 wd:Q12345678 . ?writer wdt:P106 wd:Q12345678 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  wd:Q3161846 wdt:P57 ?director .\",\n    \"  wd:Q3161846 wdt:P161 ?star .\",\n    \"  wd:Q3161846 wdt:P58 ?writer .\",\n    \"  wd:Q2709504 wdt:P57 ?director .\",\n    \"  wd:Q2709504 wdt:P161 ?star .\",\n    \"  wd:Q2709504 wdt:P58 ?writer .\",\n    \"  wd:Q3204825 wdt:P57 ?director .\",\n    \"  wd:Q3204825 wdt:P161 ?star .\",\n    \"  wd:Q3204825 wdt:P58 ?writer .\",\n    \"  ?director wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P737 wd:Q312258 .\",\n    \"  wd:Q312258 wdt:P737 ?writer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { wd:Q3161846 wdt:P57 ?director . wd:Q3161846 wdt:P161 ?star . wd:Q3161846 wdt:P58 ?writer . wd:Q2709504 wdt:P57 ?director . wd:Q2709504 wdt:P161 ?star . wd:Q2709504 wdt:P58 ?writer . wd:Q3204825 wdt:P57 ?director . wd:Q3204825 wdt:P161 ?star . wd:Q3204825 wdt:P58 ?writer . ?director wdt:P26 ?spouse . ?spouse wdt:P737 wd:Q312258 . wd:Q312258 wdt:P737 ?writer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q229990"]]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5087 is The Beaches of Agnès\nkg:0390 is director\nkg:0204 is screenwriter\nkg:4270 is spouse\nkg:1230 is influenced by\nkg:1985 is Jane B. par Agnès V.\nkg:1448 is The World of Jacques Demy\nkg:1187 is cast member\nkg:3223 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n      \"?movie kg:0390 ?director .\",\n      \"?movie kg:0204 ?writer .\",\n      \"?movie kg:1187 ?star .\",\n      \"?director kg:4270 ?spouse .\",\n      \"?spouse kg:1230 ?influencer .\",\n      \"?influencer kg:1985 ?movie .\",\n      \"?writer kg:1230 ?influencedBy .\",\n      \"?influencedBy kg:1448 ?movie .\",\n      \"VALUES ?movie { kg:5087 kg:1985 kg:1448 }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?star ?writer WHERE { ?movie wdt:P57 ?director . ?movie wdt:P58 ?writer . ?movie wdt:P161 ?star . ?director wdt:P26 ?spouse . ?spouse wdt:P737 ?influencer . ?influencer wd:Q3161846 ?movie . ?writer wdt:P737 ?influencedBy . ?influencedBy wd:Q3204825 ?movie . VALUES ?movie { wd:Q2709504 wd:Q3161846 wd:Q3204825 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?distributor wdt:P31 wd:Q2064985.\",\n    \"  ?distributor wdt:P749 wd:Q108026.\",\n    \"  ?distributor wdt:P126 wd:Q108026.\",\n    \"  ?producer wdt:P31 wd:Q2064985.\",\n    \"  ?producer wdt:P749 wd:Q108026.\",\n    \"  ?producer wdt:P126 wd:Q108026.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q2064985. ?distributor wdt:P749 wd:Q108026. ?distributor wdt:P126 wd:Q108026. ?producer wdt:P31 wd:Q2064985. ?producer wdt:P749 wd:Q108026. ?producer wdt:P126 wd:Q108026. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n      \"?distributor wdt:P750 wd:Q17070012.\",\n      \"?producer wdt:P272 wd:Q17070012.\",\n      \"?distributor wdt:P127 wd:Q849363.\",\n      \"?distributor wdt:P127 wd:Q219635.\",\n      \"?producer wdt:P127 wd:Q1628791.\",\n      \"?producer wdt:P127 wd:Q65073147.\",\n      \"?producer wdt:P127 wd:Q136469.\",\n      \"?producer wdt:P127 wd:Q318128.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P750 wd:Q17070012. ?producer wdt:P272 wd:Q17070012. ?distributor wdt:P127 wd:Q849363. ?distributor wdt:P127 wd:Q219635. ?producer wdt:P127 wd:Q1628791. ?producer wdt:P127 wd:Q65073147. ?producer wdt:P127 wd:Q136469. ?producer wdt:P127 wd:Q318128. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5071 is AbeBooks\nkg:5943 is Amazon Kindle\nkg:0832 is distributed by\nkg:4990 is The Vanguard Group\nkg:3680 is BlackRock\nkg:0582 is Amazon CloudFront\nkg:1758 is Mozart in the Jungle\nkg:6716 is owned by\nkg:8018 is .amazon\nkg:0983 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n      \"?distributor kg:0832 kg:1758.\",\n      \"?producer kg:6716 kg:1758.\",\n      \"?distributor kg:6716/kg:4990.\",\n      \"?distributor kg:6716/kg:3680.\",\n      \"?distributor kg:6716/kg:0582.\",\n      \"?producer kg:6716/kg:8018.\",\n      \"?producer kg:6716/kg:5943.\",\n      \"?producer kg:6716/kg:5071.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P750 wd:Q17070012. ?producer wdt:P127 wd:Q17070012. ?distributor wdt:P127/wd:Q849363. ?distributor wdt:P127/wd:Q219635. ?distributor wdt:P127/wd:Q1628791. ?producer wdt:P127/wd:Q65073147. ?producer wdt:P127/wd:Q136469. ?producer wdt:P127/wd:Q318128. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5741086.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q5741086.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \"  ?resource wdt:P106 wd:Q33988.\",\n    \"  ?resource wdt:P106 wd:Q937857.\",\n    \"  ?resource wdt:P106 wd:Q28643.\",\n    \" ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P57 wd:Q289021 .\",\n      \"?resource wdt:P57 wd:Q463946 .\",\n      \"?resource wdt:P57 wd:Q3207690 .\",\n      \"?resource wdt:P58 wd:Q3207690 .\",\n      \"?resource wdt:P1040 wd:Q3207690 .\",\n      \"?resource wdt:P27 wd:Q29 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q289021 . ?resource wdt:P57 wd:Q463946 . ?resource wdt:P57 wd:Q3207690 . ?resource wdt:P58 wd:Q3207690 . ?resource wdt:P1040 wd:Q3207690 . ?resource wdt:P27 wd:Q29 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9150 is director\nkg:5431 is screenwriter\nkg:9847 is film editor\nkg:6048 is Bahía blanca\nkg:4005 is Spain\nkg:6836 is 99 Women\nkg:1739 is Una rajita para dos\nkg:7389 is country of citizenship\nkg:9729 is Female Vampire\nkg:5874 is The Blood of Fu Manchu\nkg:9618 is cast member\nkg:7039 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9150 kg:9729 .\",\n      \"?resource kg:5431 kg:9729 .\",\n      \"?resource kg:9847 kg:9729 .\",\n      \"?resource kg:9150 kg:6836 .\",\n      \"?resource kg:5431 kg:6836 .\",\n      \"?resource kg:9847 kg:6836 .\",\n      \"?resource kg:9150 kg:5874 .\",\n      \"?resource kg:5431 kg:5874 .\",\n      \"?resource kg:9847 kg:5874 .\",\n      \"?resource kg:7389 kg:4005 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q3207690 . ?resource wdt:P58 wd:Q3207690 . ?resource wdt:P1040 wd:Q3207690 . ?resource wdt:P57 wd:Q289021 . ?resource wdt:P58 wd:Q289021 . ?resource wdt:P1040 wd:Q289021 . ?resource wdt:P57 wd:Q463946 . ?resource wdt:P58 wd:Q463946 . ?resource wdt:P1040 wd:Q463946 . ?resource wdt:P27 wd:Q29 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P106 wd:Q33947.\",\n    \"  ?cinematographer wdt:P2868 wd:Q50646.\",\n    \"  ?cinematographer wdt:P106 wd:Q106244.\",\n    \"  ?spouse wdt:P3373 ?cinematographer.\",\n    \"  ?spouse wdt:P26 wd:Q58944.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P106 wd:Q33947. ?cinematographer wdt:P2868 wd:Q50646. ?cinematographer wdt:P106 wd:Q106244. ?spouse wdt:P3373 ?cinematographer. ?spouse wdt:P26 wd:Q58944. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P112 wd:Q746676 .\",\n      \"?cinematographer wdt:P112 wd:Q1044630 .\",\n      \"?cinematographer wdt:P106 wd:Q222344 .\",\n      \"?spouse wdt:P26 ?cinematographer .\",\n      \"?spouse wdt:P112 wd:Q258945 .\",\n      \"?spouse wdt:P112 wd:Q242446 .\",\n      \"?spouse wdt:P112 wd:Q216611 .\",\n      \"?spouse wdt:P26 wd:Q6813152 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P112 wd:Q746676 . ?cinematographer wdt:P112 wd:Q1044630 . ?cinematographer wdt:P106 wd:Q222344 . ?spouse wdt:P26 ?cinematographer . ?spouse wdt:P112 wd:Q258945 . ?spouse wdt:P112 wd:Q242446 . ?spouse wdt:P112 wd:Q216611 . ?spouse wdt:P26 wd:Q6813152 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8974 is Lucasfilm Games\nkg:1593 is Industrial Light & Magic\nkg:3537 is spouse\nkg:9092 is cinematographer\nkg:3551 is THX\nkg:9494 is Mellody Hobson\nkg:4803 is Jediism\nkg:7076 is founded by\nkg:7603 is occupation\nkg:4437 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7603 kg:9092 .\",\n      \"?resource kg:7076 kg:1593 .\",\n      \"?resource kg:7076 kg:3551 .\",\n      \"?resource kg:7076 kg:4803 .\",\n      \"?resource kg:7076 kg:4437 .\",\n      \"?resource kg:3537 ?spouse .\",\n      \"?spouse kg:9494 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q222344 . ?resource wdt:P112 wd:Q746676 . ?resource wdt:P112 wd:Q1044630 . ?resource wdt:P112 wd:Q258945 . ?resource wdt:P112 wd:Q242446 . ?resource wdt:P26 ?spouse . ?spouse wd:Q6813152 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q3393466.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 ?cinematographer. ?cinematographer wdt:P106 wd:Q3393466. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer wdt:P161 wd:Q87778273.\",\n      \"?cinematographer wdt:P57 wd:Q85532437.\",\n      \"?cinematographer wdt:P57 wd:Q96054985.\",\n      \"?cinematographer wdt:P161 wd:Q85520081.\",\n      \"?cinematographer wdt:P58 wd:Q87778273.\",\n      \"?cinematographer wdt:P1431 wd:Q87778273.\",\n      \"?cinematographer wdt:P1040 wd:Q87778273.\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P161 wd:Q87778273. ?cinematographer wdt:P57 wd:Q85532437. ?cinematographer wdt:P57 wd:Q96054985. ?cinematographer wdt:P161 wd:Q85520081. ?cinematographer wdt:P58 wd:Q87778273. ?cinematographer wdt:P1431 wd:Q87778273. ?cinematographer wdt:P1040 wd:Q87778273. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4806 is director\nkg:9888 is Liberation\nkg:6509 is screenwriter\nkg:1484 is Inception\nkg:1709 is film editor\nkg:8781 is The Madness\nkg:8389 is executive producer\nkg:8802 is Game Over\nkg:6473 is cast member\nkg:0658 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer kg:0658 kg:1484 .\",\n      \"?cinematographer kg:0658 kg:8802 .\",\n      \"?cinematographer kg:0658 kg:9888 .\",\n      \"?cinematographer kg:6373 kg:1484 .\",\n      \"?cinematographer kg:6373 kg:8802 .\",\n      \"?cinematographer kg:6373 kg:9888 .\",\n      \"?cinematographer kg:4806 kg:8781 .\",\n      \"?cinematographer kg:9888 kg:8781 .\",\n      \"?cinematographer kg:8389 kg:8781 .\",\n      \"?cinematographer kg:1709 kg:8781 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P344 wd:Q85520081 . ?cinematographer wdt:P344 wd:Q96054985 . ?cinematographer wdt:P344 wd:Q85532437 . ?cinematographer kg:6373 wd:Q85520081 . ?cinematographer kg:6373 wd:Q96054985 . ?cinematographer kg:6373 wd:Q85532437 . ?cinematographer wdt:P57 wd:Q87778273 . ?cinematographer wd:Q85532437 wd:Q87778273 . ?cinematographer wdt:P1431 wd:Q87778273 . ?cinematographer wdt:P1040 wd:Q87778273 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048297.\",\n    \"  ?film wdt:P577 ?date.\",\n    \"  FILTER(?date >= \\\"1960-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P1480 ?writer.\",\n    \"  ?film wdt:P571 ?cinematographer.\",\n    \"  ?film rdfs:label \\\"The Emperor\\\".\",\n    \"  FILTER(lang(?film) = \\\"en\\\").\",\n    \"  ?film2 wdt:P31 wd:Q1048297.\",\n    \"  ?film2 wdt:P577 ?date2.\",\n    \"  FILTER(?date2 >= \\\"1960-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film2 wdt:P1480 ?writer2.\",\n    \"  ?film2 wdt:P571 ?cinematographer2.\",\n    \"  ?film2 rdfs:label \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"  FILTER(lang(?film2) = \\\"en\\\").\",\n    \"  ?film3 wdt:P31 wd:Q1048297.\",\n    \"  ?film3 wdt:P577 ?date3.\",\n    \"  FILTER(?date3 >= \\\"1960-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film3 wdt:P1480 ?writer3.\",\n    \"  ?film3 wdt:P571 ?cinematographer3.\",\n    \"  ?film3 rdfs:label \\\"1:42.08\\\".\",\n    \"  FILTER(lang(?film3) = \\\"en\\\").\",\n    \"  ?film4 wdt:P31 wd:Q1048297.\",\n    \"  ?film4 wdt:P577 ?date4.\",\n    \"  FILTER(?date4 >= \\\"1960-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film4 wdt:P1480 ?writer4.\",\n    \"  ?film4 wdt:P571 ?cinematographer4.\",\n    \"  ?film4 rdfs:label \\\"Herbie\\\".\",\n    \"  FILTER(lang(?film4) = \\\"en\\\").\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P26 ?spouse.\",\n    \"  ?person wdt:P735 ?influencedPerson.\",\n    \"  ?person rdfs:label \\\"Marcus Orelias\\\".\",\n    \"  FILTER(lang(?person) = \\\"en\\\").\",\n    \"  ?person2 wdt:P31 wd:Q5.\",\n    \"  ?person2 wdt:P735 ?influencedPerson2.\",\n    \"  ?person2 rdfs:label \\\"Lorne Lanning\\\".\",\n    \"  FILTER(lang(?person2) = \\\"en\\\").\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?film wdt:P31 wd:Q1048297. ?film wdt:P577 ?date. FILTER(?date >= \"1960-01-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P1480 ?writer. ?film wdt:P571 ?cinematographer. ?film rdfs:label \"The Emperor\". FILTER(lang(?film) = \"en\"). ?film2 wdt:P31 wd:Q1048297. ?film2 wdt:P577 ?date2. FILTER(?date2 >= \"1960-01-01T00:00:00Z\"^^xsd:dateTime). ?film2 wdt:P1480 ?writer2. ?film2 wdt:P571 ?cinematographer2. ?film2 rdfs:label \"Anyone Lived in a Pretty How Town\". FILTER(lang(?film2) = \"en\"). ?film3 wdt:P31 wd:Q1048297. ?film3 wdt:P577 ?date3. FILTER(?date3 >= \"1960-01-01T00:00:00Z\"^^xsd:dateTime). ?film3 wdt:P1480 ?writer3. ?film3 wdt:P571 ?cinematographer3. ?film3 rdfs:label \"1:42.08\". FILTER(lang(?film3) = \"en\"). ?film4 wdt:P31 wd:Q1048297. ?film4 wdt:P577 ?date4. FILTER(?date4 >= \"1960-01-01T00:00:00Z\"^^xsd:dateTime). ?film4 wdt:P1480 ?writer4. ?film4 wdt:P571 ?cinematographer4. ?film4 rdfs:label \"Herbie\". FILTER(lang(?film4) = \"en\"). ?person wdt:P31 wd:Q5. ?person wdt:P26 ?spouse. ?person wdt:P735 ?influencedPerson. ?person rdfs:label \"Marcus Orelias\". FILTER(lang(?person) = \"en\"). ?person2 wdt:P31 wd:Q5. ?person2 wdt:P735 ?influencedPerson2. ?person2 rdfs:label \"Lorne Lanning\". FILTER(lang(?person2) = \"en\"). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n      \"?writer wdt:P58 wd:Q613974 .\",\n      \"?writer wdt:P58 wd:Q208910 .\",\n      \"?writer wdt:P58 wd:Q1609393 .\",\n      \"?writer wdt:P58 wd:Q2411065 .\",\n      \"?cinematographer wdt:P344 wd:Q613974 .\",\n      \"?cinematographer wdt:P344 wd:Q208910 .\",\n      \"?cinematographer wdt:P344 wd:Q1609393 .\",\n      \"?cinematographer wdt:P344 wd:Q2411065 .\",\n      \"?writer wdt:P26 ?spouse .\",\n      \"?spouse wdt:P737 wd:Q52306598 .\",\n      \"?spouse wdt:P737 wd:Q717378 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?writer wdt:P58 wd:Q613974 . ?writer wdt:P58 wd:Q208910 . ?writer wdt:P58 wd:Q1609393 . ?writer wdt:P58 wd:Q2411065 . ?cinematographer wdt:P344 wd:Q613974 . ?cinematographer wdt:P344 wd:Q208910 . ?cinematographer wdt:P344 wd:Q1609393 . ?cinematographer wdt:P344 wd:Q2411065 . ?writer wdt:P26 ?spouse . ?spouse wdt:P737 wd:Q52306598 . ?spouse wdt:P737 wd:Q717378 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9371 is Lorne Lanning\nkg:6058 is screenwriter\nkg:2767 is human\nkg:8250 is Marcus Orelias\nkg:6333 is spouse\nkg:0307 is Anyone Lived in a Pretty How Town\nkg:6723 is instance of\nkg:4430 is influenced by\nkg:4166 is 1:42.08\nkg:5987 is director of photography\nkg:0145 is Herbie\nkg:3401 is The Emperor", "response": "{\n    \"query\": [\n        \"SELECT ?writer ?cinematographer WHERE {\",\n            \"?writer kg:6058 kg:0307 .\",\n            \"?writer kg:6058 kg:0145 .\",\n            \"?writer kg:6058 kg:4166 .\",\n            \"?writer kg:6058 kg:3401 .\",\n            \"?cinematographer kg:5987 kg:0307 .\",\n            \"?cinematographer kg:5987 kg:0145 .\",\n            \"?cinematographer kg:5987 kg:4166 .\",\n            \"?cinematographer kg:5987 kg:3401 .\",\n            \"kg:0145 kg:6333 ?spouse .\",\n            \"?spouse kg:4430 kg:8250 .\",\n            \"?spouse kg:4430 kg:9371 .\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?writer wdt:P58 wd:Q613974 . ?writer wdt:P58 wd:Q1609393 . ?writer wdt:P58 wd:Q208910 . ?writer wdt:P58 wd:Q2411065 . ?cinematographer wdt:P344 wd:Q613974 . ?cinematographer wdt:P344 wd:Q1609393 . ?cinematographer wdt:P344 wd:Q208910 . ?cinematographer wdt:P344 wd:Q2411065 . wd:Q1609393 wdt:P26 ?spouse . ?spouse wdt:P737 wd:Q52306598 . ?spouse wdt:P737 wd:Q717378 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q10642978 wdt:P31 wd:Q571740.\",\n    \"  wd:Q10642978 p:P161 ?statement1.\",\n    \"  ?statement1 ps:P161 wd:Q10642978.\",\n    \"  ?statement1 prov:wasDerivedFrom ?cinematographer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q10642978 wdt:P31 wd:Q571740. wd:Q10642978 p:P161 ?statement1. ?statement1 ps:P161 wd:Q10642978. ?statement1 prov:wasDerivedFrom ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P57 wd:Q18609037 .\",\n      \"?film wdt:P58 wd:Q2086445 .\",\n      \"?film wdt:P1040 wd:Q2086445 .\",\n      \"?film wdt:P1431 wd:Q2086445 .\",\n      \"?film wdt:P57 wd:Q1361018 .\",\n      \"?film wdt:P58 wd:Q1361018 .\",\n      \"?film wdt:P1040 wd:Q1361018 .\",\n      \"?film wdt:P1431 wd:Q1361018 .\",\n      \"?cinematographer wdt:P106 wd:Q222344 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P57 wd:Q18609037 . ?film wdt:P58 wd:Q2086445 . ?film wdt:P1040 wd:Q2086445 . ?film wdt:P1431 wd:Q2086445 . ?film wdt:P57 wd:Q1361018 . ?film wdt:P58 wd:Q1361018 . ?film wdt:P1040 wd:Q1361018 . ?film wdt:P1431 wd:Q1361018 . ?cinematographer wdt:P106 wd:Q222344 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2448 is Clouds of May\nkg:3965 is director\nkg:5866 is screenwriter\nkg:0060 is film editor\nkg:0650 is executive producer\nkg:9814 is Uzak\nkg:5964 is Nuri Bilge Ceylan trilogy\nkg:0252 is cinematographer\nkg:8485 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film kg:3965 kg:5964 .\",\n      \"?film kg:0650 kg:5964 .\",\n      \"?film kg:0060 kg:5964 .\",\n      \"?film kg:5866 kg:5964 .\",\n      \"?film kg:2448 ?cinematographer .\",\n      \"?film kg:9814 ?cinematographer .\",\n      \"?cinematographer kg:8485 kg:0252 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P57 wd:Q18609037 . ?film wdt:P1431 wd:Q18609037 . ?film wdt:P1040 wd:Q18609037 . ?film wdt:P58 wd:Q18609037 . ?film wd:Q2086445 ?cinematographer . ?film wd:Q1361018 ?cinematographer . ?cinematographer wdt:P106 wd:Q222344 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film wdt:P57 wd:Q1064932.\",\n    \"  ?film wdt:P58 wd:Q1064932.\",\n    \"  ?film wdt:P58 wd:Q1064932.\",\n    \"  ?director wdt:P175 ?film.\",\n    \"  ?director wdt:P106 wd:Q1064932.\",\n    \"  ?director wdt:P106 wd:Q1064932.\",\n    \"  ?director wdt:P106 wd:Q1064932.\"\n    ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P57 wd:Q1064932. ?film wdt:P58 wd:Q1064932. ?film wdt:P58 wd:Q1064932. ?director wdt:P175 ?film. ?director wdt:P106 wd:Q1064932. ?director wdt:P106 wd:Q1064932. ?director wdt:P106 wd:Q1064932. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P1040 wd:Q2493884.\",\n      \"?director wdt:P1040 wd:Q2298257.\",\n      \"?director wdt:P1040 wd:Q63993096.\",\n      \"?director wdt:P58 wd:Q2493884.\",\n      \"?director wdt:P58 wd:Q2298257.\",\n      \"?director wdt:P58 wd:Q63993096.\",\n      \"?director wdt:P106 wd:Q2526255.\",\n      \"?director wdt:P26 ?spouse.\",\n      \"?spouse wdt:P737 wd:Q312258.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P1040 wd:Q2493884. ?director wdt:P1040 wd:Q2298257. ?director wdt:P1040 wd:Q63993096. ?director wdt:P58 wd:Q2493884. ?director wdt:P58 wd:Q2298257. ?director wdt:P58 wd:Q63993096. ?director wdt:P106 wd:Q2526255. ?director wdt:P26 ?spouse. ?spouse wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3369 is The Gleaners and I\nkg:6219 is Vagabond\nkg:9020 is film editor\nkg:2324 is screenwriter\nkg:1170 is spouse\nkg:1392 is influenced by\nkg:4110 is film director\nkg:3500 is occupation\nkg:3696 is Varda by Agnès\nkg:7997 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?director\",\n    \"WHERE {\",\n      \"?director kg:3500 kg:4110 .\",\n      \"?director kg:2324 kg:6219 .\",\n      \"?director kg:2324 kg:3369 .\",\n      \"?director kg:2324 kg:3696 .\",\n      \"?director kg:9020 kg:6219 .\",\n      \"?director kg:9020 kg:3369 .\",\n      \"?director kg:9020 kg:3696 .\",\n      \"?director kg:1170 ?spouse .\",\n      \"?spouse kg:1392 kg:7997 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P106 wd:Q2526255 . ?director wdt:P58 wd:Q2298257 . ?director wdt:P58 wd:Q2493884 . ?director wdt:P58 wd:Q63993096 . ?director wdt:P1040 wd:Q2298257 . ?director wdt:P1040 wd:Q2493884 . ?director wdt:P1040 wd:Q63993096 . ?director wdt:P26 ?spouse . ?spouse wdt:P737 wd:Q312258 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "prediced": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?distributor wdt:P31 wd:Q2064985.\",\n    \"  ?distributor wdt:P1705 ?producer.\",\n    \"  ?producer wdt:P1705 wd:Q1062339.\",\n    \"  ?producer wdt:P1705 wd:Q4830453.\",\n    \"  ?producer wdt:P1705 wd:Q1062339.\",\n    \"  ?distributor wdt:P1705 wd:Q1062339.\",\n    \"  ?distributor wdt:P1705 wd:Q4830453.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q2064985. ?distributor wdt:P1705 ?producer. ?producer wdt:P1705 wd:Q1062339. ?producer wdt:P1705 wd:Q4830453. ?producer wdt:P1705 wd:Q1062339. ?distributor wdt:P1705 wd:Q1062339. ?distributor wdt:P1705 wd:Q4830453. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q2062523 wdt:P750 ?distributor.\",\n    \"  wd:Q2062523 wdt:P272 ?producer.\",\n    \"  ?distributor wdt:P127/^wdt:P127 wd:Q7603552 .\",\n    \"  ?distributor wdt:P127/^wdt:P127 wd:Q219635 .\",\n    \"  ?distributor wdt:P127/^wdt:P127 wd:Q3511946 .\",\n    \"  ?distributor wdt:P127/^wdt:P127 wd:Q505275 .\",\n    \"  ?producer wdt:P127/^wdt:P127 wd:Q2007336 .\",\n    \"  ?producer wdt:P127/^wdt:P127 wd:Q849363 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q2062523 wdt:P750 ?distributor. wd:Q2062523 wdt:P272 ?producer. ?distributor wdt:P127/^wdt:P127 wd:Q7603552 . ?distributor wdt:P127/^wdt:P127 wd:Q219635 . ?distributor wdt:P127/^wdt:P127 wd:Q3511946 . ?distributor wdt:P127/^wdt:P127 wd:Q505275 . ?producer wdt:P127/^wdt:P127 wd:Q2007336 . ?producer wdt:P127/^wdt:P127 wd:Q849363 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7738 is distributed by\nkg:5449 is The Vanguard Group\nkg:8430 is Capital Group Companies\nkg:8277 is BlackRock\nkg:1995 is Grand Canyon\nkg:1382 is owned by\nkg:4633 is T. Rowe Price\nkg:1353 is State Street Global Advisors\nkg:9905 is State Farm Insurance\nkg:5318 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n      \"?distributor kg:7738 is distributed by ?producer .\",\n      \"?producer kg:1382 is owned by kg:9905 .\",\n      \"?producer kg:1382 is owned by kg:5449 .\",\n      \"?producer kg:1382 is owned by kg:1353 .\",\n      \"?producer kg:1382 is owned by kg:8277 .\",\n      \"?producer kg:1382 is owned by kg:4633 .\",\n      \"?producer kg:1382 is owned by kg:8430 .\",\n      \"?distributor kg:5318 is production company .\",\n      \"?distributor kg:7738 is distributed by kg:1995 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P750 is distributed by ?producer . ?producer wdt:P127 is owned by wd:Q2007336 . ?producer wdt:P127 is owned by wd:Q849363 . ?producer wdt:P127 is owned by wd:Q7603552 . ?producer wdt:P127 is owned by wd:Q219635 . ?producer wdt:P127 is owned by wd:Q3511946 . ?producer wdt:P127 is owned by wd:Q505275 . ?distributor wdt:P272 is production company . ?distributor wdt:P750 is distributed by wd:Q2062523 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608944.\",\n    \"  ?film wdt:P161 wd:Q10624.\",\n    \"  ?film wdt:P162 wd:Q30444.\",\n    \"  ?film wdt:P58 wd:Q7697.\",\n    \"  ?film wdt:P168 wd:Q10624.\",\n    \"  ?film wdt:P168 wd:Q30444.\",\n    \"  ?film wdt:P168 wd:Q5697.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608944. ?film wdt:P161 wd:Q10624. ?film wdt:P162 wd:Q30444. ?film wdt:P58 wd:Q7697. ?film wdt:P168 wd:Q10624. ?film wdt:P168 wd:Q30444. ?film wdt:P168 wd:Q5697. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"# The resource is a film.\",\n      \"?film wdt:P57 wd:Q295984 .\", \"# Directed by Randolph Scott.\",\n      \"?film wdt:P162 wd:Q242477 .\", \"# Produced by Miriam Hopkins.\",\n      \"?film wdt:P58 wd:Q4420093 .\", \"# Written by Robert Buckner.\",\n      \"?film wdt:P58 wd:Q16390 .\", \"# Written by Humphrey Bogart.\",\n      \"?film wdt:P161 wd:Q93188 .\", \"# Starring Errol Flynn.\",\n      \"?film wdt:P161 wd:Q744357 .\", \"# Starring Paul Fix.\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q295984 . ?film wdt:P162 wd:Q242477 . ?film wdt:P58 wd:Q4420093 . ?film wdt:P58 wd:Q16390 . ?film wdt:P161 wd:Q93188 . ?film wdt:P161 wd:Q744357 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5388 is director\nkg:3310 is Robert Buckner\nkg:5701 is film\nkg:0929 is screenwriter\nkg:8971 is Randolph Scott\nkg:3761 is Humphrey Bogart\nkg:6535 is instance of\nkg:9349 is producer\nkg:7915 is Miriam Hopkins\nkg:7369 is Errol Flynn\nkg:0114 is Paul Fix\nkg:3674 is cast member\nkg:0826 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:6535 kg:5701 .\",\n      \"?film kg:5388 kg:8971 .\",\n      \"?film kg:9349 kg:7915 .\",\n      \"?film kg:0929 kg:3310 .\",\n      \"?film kg:3674 kg:7369 .\",\n      \"?film kg:3674 kg:0114 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q295984 . ?film wdt:P162 wd:Q242477 . ?film wdt:P58 wd:Q4420093 . ?film wdt:P161 wd:Q93188 . ?film wdt:P161 wd:Q744357 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
